
rubbish-bin-v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000200d8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000139b0  080203a8  080203a8  000213a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08033d58  08033d58  00034d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08033d60  08033d60  00034d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08033d64  08033d64  00034d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000090  24000000  08033d68  00035000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008d58  24000090  08033df8  00035090  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  24008de8  08033df8  00035de8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00035090  2**0
                  CONTENTS, READONLY
 10 .debug_info   00044758  00000000  00000000  000350be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000091ac  00000000  00000000  00079816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e30  00000000  00000000  000829c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000023e2  00000000  00000000  000857f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001124c  00000000  00000000  00087bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00049ed5  00000000  00000000  00098e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f89d  00000000  00000000  000e2cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00262598  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c9ac  00000000  00000000  002625dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  0026ef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000090 	.word	0x24000090
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08020390 	.word	0x08020390

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000094 	.word	0x24000094
 800030c:	08020390 	.word	0x08020390

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <my_printf>:
}
*/
extern UART_HandleTypeDef hlpuart1;

static inline void my_printf(const char *format, ...)
{
 80006ec:	b40f      	push	{r0, r1, r2, r3}
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b0c2      	sub	sp, #264	@ 0x108
 80006f2:	af00      	add	r7, sp, #0
    char buffer[256];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80006f4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80006f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000700:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800070a:	f107 0008 	add.w	r0, r7, #8
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000714:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000718:	f01e fe4a 	bl	801f3b0 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fdf5 	bl	8000310 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f107 0108 	add.w	r1, r7, #8
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <my_printf+0x5c>)
 8000734:	f00e f978 	bl	800ea28 <HAL_UART_Transmit>
}
 8000738:	bf00      	nop
 800073a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800073e:	46bd      	mov	sp, r7
 8000740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr
 8000748:	24000220 	.word	0x24000220

0800074c <tud_mount_cb>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void tud_mount_cb(void) {
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  //Do nothing for now
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void) {
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  //Do nothing for now
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_3) {
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	2b08      	cmp	r3, #8
 8000776:	d102      	bne.n	800077e <HAL_GPIO_EXTI_Callback+0x16>
    	my_printf("hello from exti\r\n");
 8000778:	4803      	ldr	r0, [pc, #12]	@ (8000788 <HAL_GPIO_EXTI_Callback+0x20>)
 800077a:	f7ff ffb7 	bl	80006ec <my_printf>
    }
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	080203a8 	.word	0x080203a8

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08e      	sub	sp, #56	@ 0x38
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f003 fbc7 	bl	8003f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f8bd 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 fbbd 	bl	8000f18 <MX_GPIO_Init>
  MX_DMA_Init();
 800079e:	f000 fb9b 	bl	8000ed8 <MX_DMA_Init>
  MX_I2C1_Init();
 80007a2:	f000 f925 	bl	80009f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007a6:	f000 f963 	bl	8000a70 <MX_I2C2_Init>
  MX_SPI4_Init();
 80007aa:	f000 fa8b 	bl	8000cc4 <MX_SPI4_Init>
  MX_TIM2_Init();
 80007ae:	f000 fadf 	bl	8000d70 <MX_TIM2_Init>
  MX_SDMMC1_SD_Init();
 80007b2:	f000 fa69 	bl	8000c88 <MX_SDMMC1_SD_Init>
  MX_I2S1_Init();
 80007b6:	f000 f99b 	bl	8000af0 <MX_I2S1_Init>
  MX_UART5_Init();
 80007ba:	f000 fa19 	bl	8000bf0 <MX_UART5_Init>
  MX_FATFS_Init();
 80007be:	f010 fc23 	bl	8011008 <MX_FATFS_Init>
  MX_LPUART1_UART_Init();
 80007c2:	f000 f9c9 	bl	8000b58 <MX_LPUART1_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 80007c6:	f000 fb55 	bl	8000e74 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  my_printf("test print\r\n");
 80007ca:	4844      	ldr	r0, [pc, #272]	@ (80008dc <main+0x150>)
 80007cc:	f7ff ff8e 	bl	80006ec <my_printf>
  float pi = 3.142;
 80007d0:	4b43      	ldr	r3, [pc, #268]	@ (80008e0 <main+0x154>)
 80007d2:	637b      	str	r3, [r7, #52]	@ 0x34
  char tx_buffer[40];
  sprintf(tx_buffer, "test print float: %f\r\n", pi);
 80007d4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80007d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007dc:	f107 0008 	add.w	r0, r7, #8
 80007e0:	ec53 2b17 	vmov	r2, r3, d7
 80007e4:	493f      	ldr	r1, [pc, #252]	@ (80008e4 <main+0x158>)
 80007e6:	f01e fd4f 	bl	801f288 <siprintf>
  my_printf(tx_buffer);
 80007ea:	f107 0308 	add.w	r3, r7, #8
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff7c 	bl	80006ec <my_printf>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007f4:	2100      	movs	r1, #0
 80007f6:	483c      	ldr	r0, [pc, #240]	@ (80008e8 <main+0x15c>)
 80007f8:	f00d f8bc 	bl	800d974 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007fc:	2104      	movs	r1, #4
 80007fe:	483a      	ldr	r0, [pc, #232]	@ (80008e8 <main+0x15c>)
 8000800:	f00d f8b8 	bl	800d974 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 8000804:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000808:	f003 fc1e 	bl	8004048 <HAL_Delay>

  mfcc_q15_init();
 800080c:	f000 fc84 	bl	8001118 <mfcc_q15_init>

  st7920_init();
 8000810:	f001 f874 	bl	80018fc <st7920_init>
  st7920_clear();
 8000814:	f001 f9de 	bl	8001bd4 <st7920_clear>
  st7920_print(1, 1, "sd card mount failed");
 8000818:	4a34      	ldr	r2, [pc, #208]	@ (80008ec <main+0x160>)
 800081a:	2101      	movs	r1, #1
 800081c:	2001      	movs	r0, #1
 800081e:	f001 f9b3 	bl	8001b88 <st7920_print>
  st7920_sendBuffer();
 8000822:	f001 f903 	bl	8001a2c <st7920_sendBuffer>
  sd_init();
 8000826:	f000 fcfd 	bl	8001224 <sd_init>
  st7920_clear();
 800082a:	f001 f9d3 	bl	8001bd4 <st7920_clear>
  st7920_print(1, 1, "sd card mount success");
 800082e:	4a30      	ldr	r2, [pc, #192]	@ (80008f0 <main+0x164>)
 8000830:	2101      	movs	r1, #1
 8000832:	2001      	movs	r0, #1
 8000834:	f001 f9a8 	bl	8001b88 <st7920_print>
  st7920_sendBuffer();
 8000838:	f001 f8f8 	bl	8001a2c <st7920_sendBuffer>

  if(vl53l0x_init())
 800083c:	f003 fb00 	bl	8003e40 <vl53l0x_init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d008      	beq.n	8000858 <main+0xcc>
  {
	  my_printf("init vl53l0x success\r\n");
 8000846:	482b      	ldr	r0, [pc, #172]	@ (80008f4 <main+0x168>)
 8000848:	f7ff ff50 	bl	80006ec <my_printf>
	  st7920_print(1, 9, "vl53l0x init success");
 800084c:	4a2a      	ldr	r2, [pc, #168]	@ (80008f8 <main+0x16c>)
 800084e:	2109      	movs	r1, #9
 8000850:	2001      	movs	r0, #1
 8000852:	f001 f999 	bl	8001b88 <st7920_print>
 8000856:	e007      	b.n	8000868 <main+0xdc>
  } else {
	  my_printf("init vl53l0x failed\r\n");
 8000858:	4828      	ldr	r0, [pc, #160]	@ (80008fc <main+0x170>)
 800085a:	f7ff ff47 	bl	80006ec <my_printf>
	  st7920_print(1, 9, "vl53l0x init failed");
 800085e:	4a28      	ldr	r2, [pc, #160]	@ (8000900 <main+0x174>)
 8000860:	2109      	movs	r1, #9
 8000862:	2001      	movs	r0, #1
 8000864:	f001 f990 	bl	8001b88 <st7920_print>
  }
  my_printf("finish setup\r\n");
 8000868:	4826      	ldr	r0, [pc, #152]	@ (8000904 <main+0x178>)
 800086a:	f7ff ff3f 	bl	80006ec <my_printf>
  st7920_sendBuffer();
 800086e:	f001 f8dd 	bl	8001a2c <st7920_sendBuffer>

  servo360_init();
 8000872:	f000 ffa7 	bl	80017c4 <servo360_init>
  set_servo_speed(150);
 8000876:	2096      	movs	r0, #150	@ 0x96
 8000878:	f000 ffbe 	bl	80017f8 <set_servo_speed>

  list_directory("", 0);
 800087c:	2100      	movs	r1, #0
 800087e:	4822      	ldr	r0, [pc, #136]	@ (8000908 <main+0x17c>)
 8000880:	f000 fd84 	bl	800138c <list_directory>
  get_next_audio_filename();
 8000884:	f000 fd02 	bl	800128c <get_next_audio_filename>

  st7920_print(1, 17, "record start");
 8000888:	4a20      	ldr	r2, [pc, #128]	@ (800090c <main+0x180>)
 800088a:	2111      	movs	r1, #17
 800088c:	2001      	movs	r0, #1
 800088e:	f001 f97b 	bl	8001b88 <st7920_print>
  st7920_sendBuffer();
 8000892:	f001 f8cb 	bl	8001a2c <st7920_sendBuffer>
  start_audio_recording();
 8000896:	f000 feab 	bl	80015f0 <start_audio_recording>
  st7920_print(1, 25, "record done");
 800089a:	4a1d      	ldr	r2, [pc, #116]	@ (8000910 <main+0x184>)
 800089c:	2119      	movs	r1, #25
 800089e:	2001      	movs	r0, #1
 80008a0:	f001 f972 	bl	8001b88 <st7920_print>
  st7920_sendBuffer();
 80008a4:	f001 f8c2 	bl	8001a2c <st7920_sendBuffer>
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
// Init device stack on roothub port
#if TUSB_VERSION_NUMBER > 2000  // 0.20.0
TU_ATTR_DEPRECATED("Please use tusb_init(rhport, rh_init) instead")
#endif
TU_ATTR_ALWAYS_INLINE static inline bool tud_init (uint8_t rhport) {
  const tusb_rhport_init_t rh_init = {
 80008ae:	2301      	movs	r3, #1
 80008b0:	713b      	strb	r3, [r7, #4]
 80008b2:	2300      	movs	r3, #0
 80008b4:	717b      	strb	r3, [r7, #5]
    .role = TUSB_ROLE_DEVICE,
    .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
  };
  return tud_rhport_init(rhport, &rh_init);
 80008b6:	1d3a      	adds	r2, r7, #4
 80008b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f017 fffc 	bl	80188bc <tud_rhport_init>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 80008c4:	2100      	movs	r1, #0
 80008c6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ca:	f018 f92b 	bl	8018b24 <tud_task_ext>
}
 80008ce:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tud_task();
	  HAL_Delay(100);
 80008d0:	2064      	movs	r0, #100	@ 0x64
 80008d2:	f003 fbb9 	bl	8004048 <HAL_Delay>
	  tud_task();
 80008d6:	bf00      	nop
 80008d8:	e7f4      	b.n	80008c4 <main+0x138>
 80008da:	bf00      	nop
 80008dc:	080203bc 	.word	0x080203bc
 80008e0:	40491687 	.word	0x40491687
 80008e4:	080203cc 	.word	0x080203cc
 80008e8:	2400044c 	.word	0x2400044c
 80008ec:	080203e4 	.word	0x080203e4
 80008f0:	080203fc 	.word	0x080203fc
 80008f4:	08020414 	.word	0x08020414
 80008f8:	0802042c 	.word	0x0802042c
 80008fc:	08020444 	.word	0x08020444
 8000900:	0802045c 	.word	0x0802045c
 8000904:	08020470 	.word	0x08020470
 8000908:	08020480 	.word	0x08020480
 800090c:	08020484 	.word	0x08020484
 8000910:	08020494 	.word	0x08020494

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09c      	sub	sp, #112	@ 0x70
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091e:	224c      	movs	r2, #76	@ 0x4c
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f01e fde6 	bl	801f4f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2220      	movs	r2, #32
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f01e fde0 	bl	801f4f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000934:	2002      	movs	r0, #2
 8000936:	f007 fc21 	bl	800817c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b2b      	ldr	r3, [pc, #172]	@ (80009ec <SystemClock_Config+0xd8>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a2a      	ldr	r2, [pc, #168]	@ (80009ec <SystemClock_Config+0xd8>)
 8000944:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b28      	ldr	r3, [pc, #160]	@ (80009ec <SystemClock_Config+0xd8>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000956:	bf00      	nop
 8000958:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <SystemClock_Config+0xd8>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000964:	d1f8      	bne.n	8000958 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000966:	2301      	movs	r3, #1
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800096a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000974:	2302      	movs	r3, #2
 8000976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000978:	2305      	movs	r3, #5
 800097a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 800097c:	2330      	movs	r3, #48	@ 0x30
 800097e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000980:	2301      	movs	r3, #1
 8000982:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000984:	2305      	movs	r3, #5
 8000986:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800098c:	2308      	movs	r3, #8
 800098e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000990:	2300      	movs	r3, #0
 8000992:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099c:	4618      	mov	r0, r3
 800099e:	f007 fc37 	bl	8008210 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009a8:	f000 fb80 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ac:	233f      	movs	r3, #63	@ 0x3f
 80009ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b0:	2303      	movs	r3, #3
 80009b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009bc:	2340      	movs	r3, #64	@ 0x40
 80009be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c0:	2340      	movs	r3, #64	@ 0x40
 80009c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ca:	2340      	movs	r3, #64	@ 0x40
 80009cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2103      	movs	r1, #3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f007 fff6 	bl	80089c4 <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80009de:	f000 fb65 	bl	80010ac <Error_Handler>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3770      	adds	r7, #112	@ 0x70
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	58024800 	.word	0x58024800

080009f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <MX_I2C1_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <MX_I2C1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <MX_I2C1_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <MX_I2C1_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a2c:	f006 fa0e 	bl	8006e4c <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 fb39 	bl	80010ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a3e:	f006 ff55 	bl	80078ec <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 fb30 	bl	80010ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a50:	f006 ff97 	bl	8007982 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 fb27 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	240000ac 	.word	0x240000ac
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	307075b1 	.word	0x307075b1

08000a70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae8 <MX_I2C2_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000aec <MX_I2C2_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aaa:	480e      	ldr	r0, [pc, #56]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000aac:	f006 f9ce 	bl	8006e4c <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 faf9 	bl	80010ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000abe:	f006 ff15 	bl	80078ec <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 faf0 	bl	80010ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000ad0:	f006 ff57 	bl	8007982 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fae7 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24000100 	.word	0x24000100
 8000ae8:	40005800 	.word	0x40005800
 8000aec:	307075b1 	.word	0x307075b1

08000af0 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000af6:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <MX_I2S1_Init+0x64>)
 8000af8:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000afc:	2206      	movs	r2, #6
 8000afe:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000b06:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b0c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b16:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000b1a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b3c:	f006 ff6e 	bl	8007a1c <HAL_I2S_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2S1_Init+0x5a>
  {
    Error_Handler();
 8000b46:	f000 fab1 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	24000154 	.word	0x24000154
 8000b54:	40013000 	.word	0x40013000

08000b58 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b5e:	4a23      	ldr	r2, [pc, #140]	@ (8000bec <MX_LPUART1_UART_Init+0x94>)
 8000b60:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b62:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b88:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b94:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ba0:	4811      	ldr	r0, [pc, #68]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000ba2:	f00d fef1 	bl	800e988 <HAL_UART_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bac:	f000 fa7e 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	480d      	ldr	r0, [pc, #52]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000bb4:	f00f f88b 	bl	800fcce <HAL_UARTEx_SetTxFifoThreshold>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bbe:	f000 fa75 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4808      	ldr	r0, [pc, #32]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000bc6:	f00f f8c0 	bl	800fd4a <HAL_UARTEx_SetRxFifoThreshold>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd0:	f000 fa6c 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000bd6:	f00f f841 	bl	800fc5c <HAL_UARTEx_DisableFifoMode>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000be0:	f000 fa64 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	24000220 	.word	0x24000220
 8000bec:	58000c00 	.word	0x58000c00

08000bf0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000bf4:	4b22      	ldr	r3, [pc, #136]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000bf6:	4a23      	ldr	r2, [pc, #140]	@ (8000c84 <MX_UART5_Init+0x94>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b1f      	ldr	r3, [pc, #124]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c26:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c38:	4811      	ldr	r0, [pc, #68]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c3a:	f00d fea5 	bl	800e988 <HAL_UART_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000c44:	f000 fa32 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c4c:	f00f f83f 	bl	800fcce <HAL_UARTEx_SetTxFifoThreshold>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000c56:	f000 fa29 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4808      	ldr	r0, [pc, #32]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c5e:	f00f f874 	bl	800fd4a <HAL_UARTEx_SetRxFifoThreshold>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000c68:	f000 fa20 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c6e:	f00e fff5 	bl	800fc5c <HAL_UARTEx_DisableFifoMode>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000c78:	f000 fa18 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	240002b4 	.word	0x240002b4
 8000c84:	40005000 	.word	0x40005000

08000c88 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MX_SDMMC1_SD_Init+0x34>)
 8000c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc0 <MX_SDMMC1_SD_Init+0x38>)
 8000c90:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <MX_SDMMC1_SD_Init+0x34>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <MX_SDMMC1_SD_Init+0x34>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <MX_SDMMC1_SD_Init+0x34>)
 8000ca0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ca4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ca6:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <MX_SDMMC1_SD_Init+0x34>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <MX_SDMMC1_SD_Init+0x34>)
 8000cae:	220a      	movs	r2, #10
 8000cb0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	24000348 	.word	0x24000348
 8000cc0:	52007000 	.word	0x52007000

08000cc4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000cc8:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cca:	4a28      	ldr	r2, [pc, #160]	@ (8000d6c <MX_SPI4_Init+0xa8>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cce:	4b26      	ldr	r3, [pc, #152]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cd0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cd4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd6:	4b24      	ldr	r3, [pc, #144]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cde:	2207      	movs	r2, #7
 8000ce0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000cee:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cf0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cf4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cf8:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000cfc:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d04:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d10:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d16:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d1e:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d24:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d36:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d42:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d48:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d56:	f00c f959 	bl	800d00c <HAL_SPI_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000d60:	f000 f9a4 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	240003c4 	.word	0x240003c4
 8000d6c:	40013400 	.word	0x40013400

08000d70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	@ 0x38
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da2:	4b33      	ldr	r3, [pc, #204]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000da4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2750-1;
 8000daa:	4b31      	ldr	r3, [pc, #196]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dac:	f640 22bd 	movw	r2, #2749	@ 0xabd
 8000db0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000db8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dba:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000dbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dcc:	4828      	ldr	r0, [pc, #160]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dce:	f00c fd18 	bl	800d802 <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000dd8:	f000 f968 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000de2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4821      	ldr	r0, [pc, #132]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dea:	f00c fff3 	bl	800ddd4 <HAL_TIM_ConfigClockSource>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000df4:	f000 f95a 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000df8:	481d      	ldr	r0, [pc, #116]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dfa:	f00c fd59 	bl	800d8b0 <HAL_TIM_PWM_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e04:	f000 f952 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	4816      	ldr	r0, [pc, #88]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000e18:	f00d fd1a 	bl	800e850 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e22:	f000 f943 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e26:	2360      	movs	r3, #96	@ 0x60
 8000e28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000e3e:	f00c feb5 	bl	800dbac <HAL_TIM_PWM_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e48:	f000 f930 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2204      	movs	r2, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000e54:	f00c feaa 	bl	800dbac <HAL_TIM_PWM_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000e5e:	f000 f925 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e62:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000e64:	f001 fa12 	bl	800228c <HAL_TIM_MspPostInit>

}
 8000e68:	bf00      	nop
 8000e6a:	3738      	adds	r7, #56	@ 0x38
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2400044c 	.word	0x2400044c

08000e74 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000e78:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e7a:	4a16      	ldr	r2, [pc, #88]	@ (8000ed4 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e80:	2209      	movs	r2, #9
 8000e82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e86:	2202      	movs	r2, #2
 8000e88:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ebc:	f007 f82e 	bl	8007f1c <HAL_PCD_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ec6:	f000 f8f1 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	24000498 	.word	0x24000498
 8000ed4:	40040000 	.word	0x40040000

08000ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <MX_DMA_Init+0x3c>)
 8000ee0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f14 <MX_DMA_Init+0x3c>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_DMA_Init+0x3c>)
 8000ef0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	200b      	movs	r0, #11
 8000f02:	f003 f9a0 	bl	8004246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f06:	200b      	movs	r0, #11
 8000f08:	f003 f9b7 	bl	800427a <HAL_NVIC_EnableIRQ>

}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58024400 	.word	0x58024400

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08e      	sub	sp, #56	@ 0x38
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2e:	4b5b      	ldr	r3, [pc, #364]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f34:	4a59      	ldr	r2, [pc, #356]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3e:	4b57      	ldr	r3, [pc, #348]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f44:	f003 0310 	and.w	r3, r3, #16
 8000f48:	623b      	str	r3, [r7, #32]
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4c:	4b53      	ldr	r3, [pc, #332]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f52:	4a52      	ldr	r2, [pc, #328]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f6a:	4b4c      	ldr	r3, [pc, #304]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f70:	4a4a      	ldr	r2, [pc, #296]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f72:	f043 0320 	orr.w	r3, r3, #32
 8000f76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7a:	4b48      	ldr	r3, [pc, #288]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f80:	f003 0320 	and.w	r3, r3, #32
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f88:	4b44      	ldr	r3, [pc, #272]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a43      	ldr	r2, [pc, #268]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b40      	ldr	r3, [pc, #256]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fac:	4a3b      	ldr	r2, [pc, #236]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb6:	4b39      	ldr	r3, [pc, #228]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	4b35      	ldr	r3, [pc, #212]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fca:	4a34      	ldr	r2, [pc, #208]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd4:	4b31      	ldr	r3, [pc, #196]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	4a2c      	ldr	r2, [pc, #176]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <MX_GPIO_Init+0x184>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001000:	4b26      	ldr	r3, [pc, #152]	@ (800109c <MX_GPIO_Init+0x184>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001006:	4a25      	ldr	r2, [pc, #148]	@ (800109c <MX_GPIO_Init+0x184>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001010:	4b22      	ldr	r3, [pc, #136]	@ (800109c <MX_GPIO_Init+0x184>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin|lcd_rst_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2118      	movs	r1, #24
 8001022:	481f      	ldr	r0, [pc, #124]	@ (80010a0 <MX_GPIO_Init+0x188>)
 8001024:	f005 fede 	bl	8006de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, xshut4_Pin|xshut3_Pin|xshut2_Pin|xshut1_Pin
 8001028:	2200      	movs	r2, #0
 800102a:	21bc      	movs	r1, #188	@ 0xbc
 800102c:	481d      	ldr	r0, [pc, #116]	@ (80010a4 <MX_GPIO_Init+0x18c>)
 800102e:	f005 fed9 	bl	8006de4 <HAL_GPIO_WritePin>
                          |led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : lcd_cs_Pin lcd_rst_Pin */
  GPIO_InitStruct.Pin = lcd_cs_Pin|lcd_rst_Pin;
 8001032:	2318      	movs	r3, #24
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001046:	4619      	mov	r1, r3
 8001048:	4815      	ldr	r0, [pc, #84]	@ (80010a0 <MX_GPIO_Init+0x188>)
 800104a:	f005 fd23 	bl	8006a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ir_sensor_Pin */
  GPIO_InitStruct.Pin = ir_sensor_Pin;
 800104e:	2308      	movs	r3, #8
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001052:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ir_sensor_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4811      	ldr	r0, [pc, #68]	@ (80010a8 <MX_GPIO_Init+0x190>)
 8001064:	f005 fd16 	bl	8006a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : xshut4_Pin xshut3_Pin xshut2_Pin xshut1_Pin
                           led_Pin */
  GPIO_InitStruct.Pin = xshut4_Pin|xshut3_Pin|xshut2_Pin|xshut1_Pin
 8001068:	23bc      	movs	r3, #188	@ 0xbc
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <MX_GPIO_Init+0x18c>)
 8001080:	f005 fd08 	bl	8006a94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(ir_sensor_EXTI_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	2009      	movs	r0, #9
 800108a:	f003 f8dc 	bl	8004246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ir_sensor_EXTI_IRQn);
 800108e:	2009      	movs	r0, #9
 8001090:	f003 f8f3 	bl	800427a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001094:	bf00      	nop
 8001096:	3738      	adds	r7, #56	@ 0x38
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	58024400 	.word	0x58024400
 80010a0:	58021000 	.word	0x58021000
 80010a4:	58021800 	.word	0x58021800
 80010a8:	58020000 	.word	0x58020000

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <Error_Handler+0x8>

080010b8 <my_printf>:
{
 80010b8:	b40f      	push	{r0, r1, r2, r3}
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b0c2      	sub	sp, #264	@ 0x108
 80010be:	af00      	add	r7, sp, #0
    va_start(args, format);
 80010c0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80010c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010cc:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80010ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010d6:	f107 0008 	add.w	r0, r7, #8
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80010e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010e4:	f01e f964 	bl	801f3b0 <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f90f 	bl	8000310 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f107 0108 	add.w	r1, r7, #8
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <my_printf+0x5c>)
 8001100:	f00d fc92 	bl	800ea28 <HAL_UART_Transmit>
}
 8001104:	bf00      	nop
 8001106:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800110a:	46bd      	mov	sp, r7
 800110c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001110:	b004      	add	sp, #16
 8001112:	4770      	bx	lr
 8001114:	24000220 	.word	0x24000220

08001118 <mfcc_q15_init>:
#include "dct_coefficients.h"
#include "filter_bank.h"

arm_mfcc_instance_q15 mfcc_inst;

void mfcc_q15_init() {
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af06      	add	r7, sp, #24
	arm_status status;

	status = arm_mfcc_init_q15(
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <mfcc_q15_init+0x4c>)
 8001120:	9304      	str	r3, [sp, #16]
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <mfcc_q15_init+0x50>)
 8001124:	9303      	str	r3, [sp, #12]
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <mfcc_q15_init+0x54>)
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <mfcc_q15_init+0x58>)
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <mfcc_q15_init+0x5c>)
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	230d      	movs	r3, #13
 8001134:	221a      	movs	r2, #26
 8001136:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800113a:	480f      	ldr	r0, [pc, #60]	@ (8001178 <mfcc_q15_init+0x60>)
 800113c:	f015 fb12 	bl	8016764 <arm_mfcc_init_q15>
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
	    mel_filter_lengths,          // filterLengths
	    mel_filter_coeffs,           // filterCoefs
	    hamming_window               // windowCoefs
	);

	if(status == ARM_MATH_SUCCESS)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d103      	bne.n	8001154 <mfcc_q15_init+0x3c>
	{
		my_printf("mfcc init success\r\n");
 800114c:	480b      	ldr	r0, [pc, #44]	@ (800117c <mfcc_q15_init+0x64>)
 800114e:	f7ff ffb3 	bl	80010b8 <my_printf>
	} else {
		my_printf("mfcc init failed\r\n");
	}
}
 8001152:	e002      	b.n	800115a <mfcc_q15_init+0x42>
		my_printf("mfcc init failed\r\n");
 8001154:	480a      	ldr	r0, [pc, #40]	@ (8001180 <mfcc_q15_init+0x68>)
 8001156:	f7ff ffaf 	bl	80010b8 <my_printf>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	08021264 	.word	0x08021264
 8001168:	08020ea0 	.word	0x08020ea0
 800116c:	08020e38 	.word	0x08020e38
 8001170:	08020dd0 	.word	0x08020dd0
 8001174:	08020b2c 	.word	0x08020b2c
 8001178:	2400097c 	.word	0x2400097c
 800117c:	080204a0 	.word	0x080204a0
 8001180:	080204b4 	.word	0x080204b4

08001184 <convert_mfcc>:
q15_t mfcc_output[26];
// input buffer is 512
q31_t tmp_buffer[512 * 2];

void convert_mfcc(q15_t * pcm_input)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	arm_status status;
	status = arm_mfcc_q15(&mfcc_inst, pcm_input, mfcc_output, tmp_buffer);
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <convert_mfcc+0x30>)
 800118e:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <convert_mfcc+0x34>)
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	480a      	ldr	r0, [pc, #40]	@ (80011bc <convert_mfcc+0x38>)
 8001194:	f015 fb16 	bl	80167c4 <arm_mfcc_q15>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
	if (status != ARM_MATH_SUCCESS)
 800119c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <convert_mfcc+0x26>
	{
		my_printf("failed mfcc conversion\r\n");
 80011a4:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <convert_mfcc+0x3c>)
 80011a6:	f7ff ff87 	bl	80010b8 <my_printf>
	}
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	240009e8 	.word	0x240009e8
 80011b8:	240009b4 	.word	0x240009b4
 80011bc:	2400097c 	.word	0x2400097c
 80011c0:	080204c8 	.word	0x080204c8

080011c4 <my_printf>:
{
 80011c4:	b40f      	push	{r0, r1, r2, r3}
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b0c2      	sub	sp, #264	@ 0x108
 80011ca:	af00      	add	r7, sp, #0
    va_start(args, format);
 80011cc:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80011d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011d8:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80011da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011e2:	f107 0008 	add.w	r0, r7, #8
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80011ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f0:	f01e f8de 	bl	801f3b0 <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f889 	bl	8000310 <strlen>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	f107 0108 	add.w	r1, r7, #8
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <my_printf+0x5c>)
 800120c:	f00d fc0c 	bl	800ea28 <HAL_UART_Transmit>
}
 8001210:	bf00      	nop
 8001212:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001216:	46bd      	mov	sp, r7
 8001218:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800121c:	b004      	add	sp, #16
 800121e:	4770      	bx	lr
 8001220:	24000220 	.word	0x24000220

08001224 <sd_init>:

FATFS fatfs;
FRESULT fresult;
extern SD_HandleTypeDef hsd1;

void sd_init() {
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    if (BSP_SD_Init() == MSD_OK) {
 8001228:	f00f ff08 	bl	801103c <BSP_SD_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d103      	bne.n	800123a <sd_init+0x16>
        my_printf("SD card initialized successfully!\r\n");
 8001232:	4810      	ldr	r0, [pc, #64]	@ (8001274 <sd_init+0x50>)
 8001234:	f7ff ffc6 	bl	80011c4 <my_printf>
 8001238:	e002      	b.n	8001240 <sd_init+0x1c>
    } else {
        my_printf("SD card initialization failed!\r\n");
 800123a:	480f      	ldr	r0, [pc, #60]	@ (8001278 <sd_init+0x54>)
 800123c:	f7ff ffc2 	bl	80011c4 <my_printf>
    }

    fresult = f_mount(&fatfs, "", 1);
 8001240:	2201      	movs	r2, #1
 8001242:	490e      	ldr	r1, [pc, #56]	@ (800127c <sd_init+0x58>)
 8001244:	480e      	ldr	r0, [pc, #56]	@ (8001280 <sd_init+0x5c>)
 8001246:	f01c fed7 	bl	801dff8 <f_mount>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <sd_init+0x60>)
 8001250:	701a      	strb	r2, [r3, #0]
    if(fresult != FR_OK) {
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <sd_init+0x60>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00a      	beq.n	8001270 <sd_init+0x4c>
        my_printf("f_mount failed, %d\r\n", fresult);
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <sd_init+0x60>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4619      	mov	r1, r3
 8001260:	4809      	ldr	r0, [pc, #36]	@ (8001288 <sd_init+0x64>)
 8001262:	f7ff ffaf 	bl	80011c4 <my_printf>
        while(1){
            HAL_Delay(1000);
 8001266:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800126a:	f002 feed 	bl	8004048 <HAL_Delay>
 800126e:	e7fa      	b.n	8001266 <sd_init+0x42>
        }
    }
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	080204e4 	.word	0x080204e4
 8001278:	08020508 	.word	0x08020508
 800127c:	0802052c 	.word	0x0802052c
 8001280:	240019e8 	.word	0x240019e8
 8001284:	24001c18 	.word	0x24001c18
 8001288:	08020530 	.word	0x08020530

0800128c <get_next_audio_filename>:
#define AUDIO_FOLDER "AUDIO"
#define FILE_TEMPLATE "AUDIO%03d.WAV"
#define F32_TEMPLATE "FLOAT%03d.BIN"
#define MFCC_TEMPLATE "MFCC%03d.BIN"

int get_next_audio_filename() {
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	@ 0x50
 8001290:	af00      	add	r7, sp, #0
  DIR dir;
  FILINFO fno;
  int max_number = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (f_opendir(&dir, AUDIO_FOLDER) == FR_OK) {
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	4931      	ldr	r1, [pc, #196]	@ (8001360 <get_next_audio_filename+0xd4>)
 800129c:	4618      	mov	r0, r3
 800129e:	f01d fcd1 	bl	801ec44 <f_opendir>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d155      	bne.n	8001354 <get_next_audio_filename+0xc8>
    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 80012a8:	e01e      	b.n	80012e8 <get_next_audio_filename+0x5c>
      if (strstr(fno.fname, "AUDIO") && strstr(fno.fname, ".WAV")) {
 80012aa:	463b      	mov	r3, r7
 80012ac:	3309      	adds	r3, #9
 80012ae:	492c      	ldr	r1, [pc, #176]	@ (8001360 <get_next_audio_filename+0xd4>)
 80012b0:	4618      	mov	r0, r3
 80012b2:	f01e f927 	bl	801f504 <strstr>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d015      	beq.n	80012e8 <get_next_audio_filename+0x5c>
 80012bc:	463b      	mov	r3, r7
 80012be:	3309      	adds	r3, #9
 80012c0:	4928      	ldr	r1, [pc, #160]	@ (8001364 <get_next_audio_filename+0xd8>)
 80012c2:	4618      	mov	r0, r3
 80012c4:	f01e f91e 	bl	801f504 <strstr>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00c      	beq.n	80012e8 <get_next_audio_filename+0x5c>
        int num = atoi(fno.fname + 5);
 80012ce:	463b      	mov	r3, r7
 80012d0:	3309      	adds	r3, #9
 80012d2:	3305      	adds	r3, #5
 80012d4:	4618      	mov	r0, r3
 80012d6:	f01d fde6 	bl	801eea6 <atoi>
 80012da:	64b8      	str	r0, [r7, #72]	@ 0x48
        if (num > max_number) {
 80012dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80012de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dd01      	ble.n	80012e8 <get_next_audio_filename+0x5c>
          max_number = num;
 80012e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 80012e8:	463a      	mov	r2, r7
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f01d fd40 	bl	801ed76 <f_readdir>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <get_next_audio_filename+0x76>
 80012fc:	7a7b      	ldrb	r3, [r7, #9]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1d3      	bne.n	80012aa <get_next_audio_filename+0x1e>
        }
      }
    }
    f_closedir(&dir);
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	4618      	mov	r0, r3
 8001308:	f01d fd0f 	bl	801ed2a <f_closedir>
  } else {
    return -1;
  }

  snprintf(latest_audio_filename, sizeof(latest_audio_filename), AUDIO_FOLDER "/" FILE_TEMPLATE, max_number + 1);
 800130c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800130e:	3301      	adds	r3, #1
 8001310:	4a15      	ldr	r2, [pc, #84]	@ (8001368 <get_next_audio_filename+0xdc>)
 8001312:	2120      	movs	r1, #32
 8001314:	4815      	ldr	r0, [pc, #84]	@ (800136c <get_next_audio_filename+0xe0>)
 8001316:	f01d ff81 	bl	801f21c <sniprintf>
  snprintf(latest_f32_filename, sizeof(latest_f32_filename), AUDIO_FOLDER "/" F32_TEMPLATE, max_number + 1);
 800131a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800131c:	3301      	adds	r3, #1
 800131e:	4a14      	ldr	r2, [pc, #80]	@ (8001370 <get_next_audio_filename+0xe4>)
 8001320:	2120      	movs	r1, #32
 8001322:	4814      	ldr	r0, [pc, #80]	@ (8001374 <get_next_audio_filename+0xe8>)
 8001324:	f01d ff7a 	bl	801f21c <sniprintf>
  snprintf(latest_mfcc_filename, sizeof(latest_mfcc_filename), AUDIO_FOLDER "/" MFCC_TEMPLATE, max_number + 1);
 8001328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800132a:	3301      	adds	r3, #1
 800132c:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <get_next_audio_filename+0xec>)
 800132e:	2120      	movs	r1, #32
 8001330:	4812      	ldr	r0, [pc, #72]	@ (800137c <get_next_audio_filename+0xf0>)
 8001332:	f01d ff73 	bl	801f21c <sniprintf>
  my_printf("new audio file name in pcm should be: %s\r\n", latest_audio_filename);
 8001336:	490d      	ldr	r1, [pc, #52]	@ (800136c <get_next_audio_filename+0xe0>)
 8001338:	4811      	ldr	r0, [pc, #68]	@ (8001380 <get_next_audio_filename+0xf4>)
 800133a:	f7ff ff43 	bl	80011c4 <my_printf>
  my_printf("new audio file name in f32 should be: %s\r\n", latest_f32_filename);
 800133e:	490d      	ldr	r1, [pc, #52]	@ (8001374 <get_next_audio_filename+0xe8>)
 8001340:	4810      	ldr	r0, [pc, #64]	@ (8001384 <get_next_audio_filename+0xf8>)
 8001342:	f7ff ff3f 	bl	80011c4 <my_printf>
  my_printf("new mfcc in f32 should be: %s\r\n", latest_mfcc_filename);
 8001346:	490d      	ldr	r1, [pc, #52]	@ (800137c <get_next_audio_filename+0xf0>)
 8001348:	480f      	ldr	r0, [pc, #60]	@ (8001388 <get_next_audio_filename+0xfc>)
 800134a:	f7ff ff3b 	bl	80011c4 <my_printf>
  return max_number + 1;
 800134e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001350:	3301      	adds	r3, #1
 8001352:	e001      	b.n	8001358 <get_next_audio_filename+0xcc>
    return -1;
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001358:	4618      	mov	r0, r3
 800135a:	3750      	adds	r7, #80	@ 0x50
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	08020548 	.word	0x08020548
 8001364:	08020550 	.word	0x08020550
 8001368:	08020558 	.word	0x08020558
 800136c:	24001c1c 	.word	0x24001c1c
 8001370:	0802056c 	.word	0x0802056c
 8001374:	24001c3c 	.word	0x24001c3c
 8001378:	08020580 	.word	0x08020580
 800137c:	24001c5c 	.word	0x24001c5c
 8001380:	08020594 	.word	0x08020594
 8001384:	080205c0 	.word	0x080205c0
 8001388:	080205ec 	.word	0x080205ec

0800138c <list_directory>:

void list_directory(const char *path, uint8_t depth) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b0b8      	sub	sp, #224	@ 0xe0
 8001390:	af02      	add	r7, sp, #8
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
    DIR dir;
    FILINFO fno;

    // Try opening the directory
    if (f_opendir(&dir, path) == FR_OK) {
 8001398:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	f01d fc50 	bl	801ec44 <f_opendir>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d157      	bne.n	800145a <list_directory+0xce>
        while (1) {
            // Read directory content
            if (f_readdir(&dir, &fno) != FR_OK || fno.fname[0] == 0) break;  // End of directory
 80013aa:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80013ae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f01d fcde 	bl	801ed76 <f_readdir>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d146      	bne.n	800144e <list_directory+0xc2>
 80013c0:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d042      	beq.n	800144e <list_directory+0xc2>

            // Ignore "." and ".."
            if (fno.fname[0] == '.') continue;
 80013c8:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80013cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80013ce:	d03c      	beq.n	800144a <list_directory+0xbe>

            // Indentation for subdirectories
            for (uint8_t i = 0; i < depth; i++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80013d6:	e007      	b.n	80013e8 <list_directory+0x5c>
                my_printf("  ");
 80013d8:	4824      	ldr	r0, [pc, #144]	@ (800146c <list_directory+0xe0>)
 80013da:	f7ff fef3 	bl	80011c4 <my_printf>
            for (uint8_t i = 0; i < depth; i++) {
 80013de:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80013e2:	3301      	adds	r3, #1
 80013e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80013e8:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d3f2      	bcc.n	80013d8 <list_directory+0x4c>
            }

            if (fno.fattrib & AM_DIR) {
 80013f2:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d01b      	beq.n	8001436 <list_directory+0xaa>
                // It's a directory
                my_printf("[DIR] %s\r\n", fno.fname);
 80013fe:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001402:	3309      	adds	r3, #9
 8001404:	4619      	mov	r1, r3
 8001406:	481a      	ldr	r0, [pc, #104]	@ (8001470 <list_directory+0xe4>)
 8001408:	f7ff fedc 	bl	80011c4 <my_printf>

                // Recursively list subdirectory
                char new_path[128];
                snprintf(new_path, sizeof(new_path), "%s/%s", path, fno.fname);
 800140c:	f107 000c 	add.w	r0, r7, #12
 8001410:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001414:	3309      	adds	r3, #9
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a16      	ldr	r2, [pc, #88]	@ (8001474 <list_directory+0xe8>)
 800141c:	2180      	movs	r1, #128	@ 0x80
 800141e:	f01d fefd 	bl	801f21c <sniprintf>
                list_directory(new_path, depth + 1);
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	3301      	adds	r3, #1
 8001426:	b2da      	uxtb	r2, r3
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ffac 	bl	800138c <list_directory>
 8001434:	e7b9      	b.n	80013aa <list_directory+0x1e>
            } else {
                // It's a file
                my_printf("[FILE] %s (%lu bytes)\r\n", fno.fname, fno.fsize);
 8001436:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800143a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800143e:	3309      	adds	r3, #9
 8001440:	4619      	mov	r1, r3
 8001442:	480d      	ldr	r0, [pc, #52]	@ (8001478 <list_directory+0xec>)
 8001444:	f7ff febe 	bl	80011c4 <my_printf>
 8001448:	e7af      	b.n	80013aa <list_directory+0x1e>
            if (fno.fname[0] == '.') continue;
 800144a:	bf00      	nop
            if (f_readdir(&dir, &fno) != FR_OK || fno.fname[0] == 0) break;  // End of directory
 800144c:	e7ad      	b.n	80013aa <list_directory+0x1e>
            }
        }
        f_closedir(&dir);
 800144e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001452:	4618      	mov	r0, r3
 8001454:	f01d fc69 	bl	801ed2a <f_closedir>
    } else {
        my_printf("Failed to open directory: %s\r\n", path);
    }
}
 8001458:	e003      	b.n	8001462 <list_directory+0xd6>
        my_printf("Failed to open directory: %s\r\n", path);
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4807      	ldr	r0, [pc, #28]	@ (800147c <list_directory+0xf0>)
 800145e:	f7ff feb1 	bl	80011c4 <my_printf>
}
 8001462:	bf00      	nop
 8001464:	37d8      	adds	r7, #216	@ 0xd8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	0802060c 	.word	0x0802060c
 8001470:	08020610 	.word	0x08020610
 8001474:	0802061c 	.word	0x0802061c
 8001478:	08020624 	.word	0x08020624
 800147c:	0802063c 	.word	0x0802063c

08001480 <HAL_I2S_RxHalfCpltCallback>:
UINT bytes_written;
int16_t left_pcm_buffer[BUFFER_SIZE / 4];
q15_t q15_buffer[BUFFER_SIZE / 4];

// Callback when half buffer is filled
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    buffer_ready = 1;
 8001488:	4b04      	ldr	r3, [pc, #16]	@ (800149c <HAL_I2S_RxHalfCpltCallback+0x1c>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	24005eac 	.word	0x24005eac

080014a0 <HAL_I2S_RxCpltCallback>:

// Callback when full buffer is filled
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    buffer_ready = 2;
 80014a8:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <HAL_I2S_RxCpltCallback+0x1c>)
 80014aa:	2202      	movs	r2, #2
 80014ac:	701a      	strb	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	24005eac 	.word	0x24005eac

080014c0 <write_wav_header>:

// Write WAV header for mono channel, 16-bit, 16kHz sampling rate
void write_wav_header(FIL *file, uint32_t data_size) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08e      	sub	sp, #56	@ 0x38
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
    uint8_t wav_header[44] = {
 80014ca:	2352      	movs	r3, #82	@ 0x52
 80014cc:	733b      	strb	r3, [r7, #12]
 80014ce:	2349      	movs	r3, #73	@ 0x49
 80014d0:	737b      	strb	r3, [r7, #13]
 80014d2:	2346      	movs	r3, #70	@ 0x46
 80014d4:	73bb      	strb	r3, [r7, #14]
 80014d6:	2346      	movs	r3, #70	@ 0x46
 80014d8:	73fb      	strb	r3, [r7, #15]
        'R', 'I', 'F', 'F',
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	3324      	adds	r3, #36	@ 0x24
 80014e0:	b2db      	uxtb	r3, r3
    uint8_t wav_header[44] = {
 80014e2:	743b      	strb	r3, [r7, #16]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3324      	adds	r3, #36	@ 0x24
 80014e8:	0a1b      	lsrs	r3, r3, #8
    uint8_t wav_header[44] = {
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	747b      	strb	r3, [r7, #17]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	3324      	adds	r3, #36	@ 0x24
 80014f2:	0c1b      	lsrs	r3, r3, #16
    uint8_t wav_header[44] = {
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	74bb      	strb	r3, [r7, #18]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	3324      	adds	r3, #36	@ 0x24
 80014fc:	0e1b      	lsrs	r3, r3, #24
    uint8_t wav_header[44] = {
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	74fb      	strb	r3, [r7, #19]
 8001502:	2357      	movs	r3, #87	@ 0x57
 8001504:	753b      	strb	r3, [r7, #20]
 8001506:	2341      	movs	r3, #65	@ 0x41
 8001508:	757b      	strb	r3, [r7, #21]
 800150a:	2356      	movs	r3, #86	@ 0x56
 800150c:	75bb      	strb	r3, [r7, #22]
 800150e:	2345      	movs	r3, #69	@ 0x45
 8001510:	75fb      	strb	r3, [r7, #23]
 8001512:	2366      	movs	r3, #102	@ 0x66
 8001514:	763b      	strb	r3, [r7, #24]
 8001516:	236d      	movs	r3, #109	@ 0x6d
 8001518:	767b      	strb	r3, [r7, #25]
 800151a:	2374      	movs	r3, #116	@ 0x74
 800151c:	76bb      	strb	r3, [r7, #26]
 800151e:	2320      	movs	r3, #32
 8001520:	76fb      	strb	r3, [r7, #27]
 8001522:	2310      	movs	r3, #16
 8001524:	773b      	strb	r3, [r7, #28]
 8001526:	2300      	movs	r3, #0
 8001528:	777b      	strb	r3, [r7, #29]
 800152a:	2300      	movs	r3, #0
 800152c:	77bb      	strb	r3, [r7, #30]
 800152e:	2300      	movs	r3, #0
 8001530:	77fb      	strb	r3, [r7, #31]
 8001532:	2301      	movs	r3, #1
 8001534:	f887 3020 	strb.w	r3, [r7, #32]
 8001538:	2300      	movs	r3, #0
 800153a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800153e:	2301      	movs	r3, #1
 8001540:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001544:	2300      	movs	r3, #0
 8001546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800154a:	2300      	movs	r3, #0
 800154c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001550:	233e      	movs	r3, #62	@ 0x3e
 8001552:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001556:	2300      	movs	r3, #0
 8001558:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800155c:	2300      	movs	r3, #0
 800155e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001562:	2300      	movs	r3, #0
 8001564:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001568:	237d      	movs	r3, #125	@ 0x7d
 800156a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800156e:	2300      	movs	r3, #0
 8001570:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001574:	2300      	movs	r3, #0
 8001576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800157a:	2302      	movs	r3, #2
 800157c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8001580:	2300      	movs	r3, #0
 8001582:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001586:	2310      	movs	r3, #16
 8001588:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800158c:	2300      	movs	r3, #0
 800158e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001592:	2364      	movs	r3, #100	@ 0x64
 8001594:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001598:	2361      	movs	r3, #97	@ 0x61
 800159a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800159e:	2374      	movs	r3, #116	@ 0x74
 80015a0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80015a4:	2361      	movs	r3, #97	@ 0x61
 80015a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        16, 0, 0, 0, 1, 0, 1, 0,  // PCM format, 1 channel (mono)
        0x00, 0x3E, 0x00, 0x00,  // 16000 Hz sample rate (0x3E80 = 16000)
        0x00, 0x7D, 0x00, 0x00,  // Byte rate = 16000 * 1 * 16/8 = 32000 (0x7D00)
        2, 0, 16, 0,  // Block align = 2 bytes, Bits per sample = 16
        'd', 'a', 't', 'a',
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	0a1b      	lsrs	r3, r3, #8
    uint8_t wav_header[44] = {
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	0c1b      	lsrs	r3, r3, #16
    uint8_t wav_header[44] = {
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	0e1b      	lsrs	r3, r3, #24
    uint8_t wav_header[44] = {
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    };
    UINT bytes_written;
    f_write(file, wav_header, 44, &bytes_written);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	f107 010c 	add.w	r1, r7, #12
 80015d8:	222c      	movs	r2, #44	@ 0x2c
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f01c ff0c 	bl	801e3f8 <f_write>
    f_sync(file);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f01d f87e 	bl	801e6e2 <f_sync>
}
 80015e6:	bf00      	nop
 80015e8:	3738      	adds	r7, #56	@ 0x38
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <start_audio_recording>:
}

extern I2S_HandleTypeDef hi2s1;

// Start audio recording (writing only left channel)
void start_audio_recording() {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
	UINT bytes_written_mfcc;
    buffer_ready = 0;
 80015f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001768 <start_audio_recording+0x178>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
    my_printf("Starting audio recording...\r\n");
 80015fc:	485b      	ldr	r0, [pc, #364]	@ (800176c <start_audio_recording+0x17c>)
 80015fe:	f7ff fde1 	bl	80011c4 <my_printf>

    if (f_open(&file, latest_audio_filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 8001602:	220a      	movs	r2, #10
 8001604:	495a      	ldr	r1, [pc, #360]	@ (8001770 <start_audio_recording+0x180>)
 8001606:	485b      	ldr	r0, [pc, #364]	@ (8001774 <start_audio_recording+0x184>)
 8001608:	f01c fd3c 	bl	801e084 <f_open>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 80a4 	bne.w	800175c <start_audio_recording+0x16c>
        my_printf("File created successfully\r\n");
 8001614:	4858      	ldr	r0, [pc, #352]	@ (8001778 <start_audio_recording+0x188>)
 8001616:	f7ff fdd5 	bl	80011c4 <my_printf>

        // Write placeholder WAV header
        write_wav_header(&file, 0);
 800161a:	2100      	movs	r1, #0
 800161c:	4855      	ldr	r0, [pc, #340]	@ (8001774 <start_audio_recording+0x184>)
 800161e:	f7ff ff4f 	bl	80014c0 <write_wav_header>

        if (f_open(&file_mfcc, latest_mfcc_filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8001622:	220a      	movs	r2, #10
 8001624:	4955      	ldr	r1, [pc, #340]	@ (800177c <start_audio_recording+0x18c>)
 8001626:	4856      	ldr	r0, [pc, #344]	@ (8001780 <start_audio_recording+0x190>)
 8001628:	f01c fd2c 	bl	801e084 <f_open>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00a      	beq.n	8001648 <start_audio_recording+0x58>
        {
        	my_printf("start write mfcc failed, filename: %s, error: %d\r\n", latest_mfcc_filename, fresult);
 8001632:	4b54      	ldr	r3, [pc, #336]	@ (8001784 <start_audio_recording+0x194>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	4950      	ldr	r1, [pc, #320]	@ (800177c <start_audio_recording+0x18c>)
 800163a:	4853      	ldr	r0, [pc, #332]	@ (8001788 <start_audio_recording+0x198>)
 800163c:	f7ff fdc2 	bl	80011c4 <my_printf>
        	f_close(&file_mfcc);
 8001640:	484f      	ldr	r0, [pc, #316]	@ (8001780 <start_audio_recording+0x190>)
 8001642:	f01d f8cc 	bl	801e7de <f_close>
        	return;
 8001646:	e08c      	b.n	8001762 <start_audio_recording+0x172>
        }

        if (f_open(&file_f32, latest_f32_filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8001648:	220a      	movs	r2, #10
 800164a:	4950      	ldr	r1, [pc, #320]	@ (800178c <start_audio_recording+0x19c>)
 800164c:	4850      	ldr	r0, [pc, #320]	@ (8001790 <start_audio_recording+0x1a0>)
 800164e:	f01c fd19 	bl	801e084 <f_open>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <start_audio_recording+0x76>
        {
        	my_printf("start write f32 failed\r\n");
 8001658:	484e      	ldr	r0, [pc, #312]	@ (8001794 <start_audio_recording+0x1a4>)
 800165a:	f7ff fdb3 	bl	80011c4 <my_printf>
        	f_close(&file_f32);
 800165e:	484c      	ldr	r0, [pc, #304]	@ (8001790 <start_audio_recording+0x1a0>)
 8001660:	f01d f8bd 	bl	801e7de <f_close>
        	return;
 8001664:	e07d      	b.n	8001762 <start_audio_recording+0x172>
        }

        // Start I2S DMA
        HAL_I2S_Receive_DMA(&hi2s1, (uint16_t *)i2s_data, BUFFER_SIZE);
 8001666:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800166a:	494b      	ldr	r1, [pc, #300]	@ (8001798 <start_audio_recording+0x1a8>)
 800166c:	484b      	ldr	r0, [pc, #300]	@ (800179c <start_audio_recording+0x1ac>)
 800166e:	f006 fb05 	bl	8007c7c <HAL_I2S_Receive_DMA>

        uint32_t total_samples = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]

        while (total_samples < SAMPLING_RATE * PERIOD) {
 8001676:	e053      	b.n	8001720 <start_audio_recording+0x130>
            if (buffer_ready) {
 8001678:	4b3b      	ldr	r3, [pc, #236]	@ (8001768 <start_audio_recording+0x178>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d04e      	beq.n	8001720 <start_audio_recording+0x130>
                int16_t *start_ptr = (buffer_ready == 1) ? i2s_data : &i2s_data[BUFFER_SIZE / 2];
 8001682:	4b39      	ldr	r3, [pc, #228]	@ (8001768 <start_audio_recording+0x178>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <start_audio_recording+0xa0>
 800168c:	4b42      	ldr	r3, [pc, #264]	@ (8001798 <start_audio_recording+0x1a8>)
 800168e:	e000      	b.n	8001692 <start_audio_recording+0xa2>
 8001690:	4b43      	ldr	r3, [pc, #268]	@ (80017a0 <start_audio_recording+0x1b0>)
 8001692:	60bb      	str	r3, [r7, #8]

                for (uint32_t i = 0; i < BUFFER_SIZE / 2; i += 2)
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	e013      	b.n	80016c2 <start_audio_recording+0xd2>
                {
                	left_pcm_buffer[i / 2] = start_ptr[i] * GAIN;
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	4413      	add	r3, r2
 80016a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	0092      	lsls	r2, r2, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	b211      	sxth	r1, r2
 80016b6:	4a3b      	ldr	r2, [pc, #236]	@ (80017a4 <start_audio_recording+0x1b4>)
 80016b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (uint32_t i = 0; i < BUFFER_SIZE / 2; i += 2)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	3302      	adds	r3, #2
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016c8:	d3e7      	bcc.n	800169a <start_audio_recording+0xaa>
                }

                // Write only left channel (even indices)

                f_write(&file, left_pcm_buffer, (BUFFER_SIZE / 4) * sizeof(int16_t), &bytes_written);
 80016ca:	4b37      	ldr	r3, [pc, #220]	@ (80017a8 <start_audio_recording+0x1b8>)
 80016cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016d0:	4934      	ldr	r1, [pc, #208]	@ (80017a4 <start_audio_recording+0x1b4>)
 80016d2:	4828      	ldr	r0, [pc, #160]	@ (8001774 <start_audio_recording+0x184>)
 80016d4:	f01c fe90 	bl	801e3f8 <f_write>

                total_samples += (BUFFER_SIZE / 4); // Since we write only half the samples
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016de:	617b      	str	r3, [r7, #20]

                arm_copy_q15((q15_t*)left_pcm_buffer, q15_buffer, BUFFER_SIZE / 4);
 80016e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016e4:	4931      	ldr	r1, [pc, #196]	@ (80017ac <start_audio_recording+0x1bc>)
 80016e6:	482f      	ldr	r0, [pc, #188]	@ (80017a4 <start_audio_recording+0x1b4>)
 80016e8:	f011 faae 	bl	8012c48 <arm_copy_q15>

                for (uint8_t i = 0; i < 4; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e010      	b.n	8001714 <start_audio_recording+0x124>
                {
                	convert_mfcc(&left_pcm_buffer[i * 512]);
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4a2a      	ldr	r2, [pc, #168]	@ (80017a4 <start_audio_recording+0x1b4>)
 80016fa:	4413      	add	r3, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fd41 	bl	8001184 <convert_mfcc>
                	f_write(&file_mfcc, mfcc_output, 26 * sizeof(q15_t), &bytes_written_mfcc);
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2234      	movs	r2, #52	@ 0x34
 8001706:	492a      	ldr	r1, [pc, #168]	@ (80017b0 <start_audio_recording+0x1c0>)
 8001708:	481d      	ldr	r0, [pc, #116]	@ (8001780 <start_audio_recording+0x190>)
 800170a:	f01c fe75 	bl	801e3f8 <f_write>
                for (uint8_t i = 0; i < 4; i++)
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	3301      	adds	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d9eb      	bls.n	80016f2 <start_audio_recording+0x102>
                }

                buffer_ready = 0;
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <start_audio_recording+0x178>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
        while (total_samples < SAMPLING_RATE * PERIOD) {
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	4a24      	ldr	r2, [pc, #144]	@ (80017b4 <start_audio_recording+0x1c4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d9a7      	bls.n	8001678 <start_audio_recording+0x88>
            }
        }

        // Stop DMA
        HAL_I2S_DMAStop(&hi2s1);
 8001728:	481c      	ldr	r0, [pc, #112]	@ (800179c <start_audio_recording+0x1ac>)
 800172a:	f006 fb49 	bl	8007dc0 <HAL_I2S_DMAStop>

        // Update WAV header with actual data size
        f_lseek(&file, 0);
 800172e:	2100      	movs	r1, #0
 8001730:	4810      	ldr	r0, [pc, #64]	@ (8001774 <start_audio_recording+0x184>)
 8001732:	f01d f87e 	bl	801e832 <f_lseek>
        write_wav_header(&file, total_samples * sizeof(int16_t));
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4619      	mov	r1, r3
 800173c:	480d      	ldr	r0, [pc, #52]	@ (8001774 <start_audio_recording+0x184>)
 800173e:	f7ff febf 	bl	80014c0 <write_wav_header>

        my_printf("recording stopped!\r\n");
 8001742:	481d      	ldr	r0, [pc, #116]	@ (80017b8 <start_audio_recording+0x1c8>)
 8001744:	f7ff fd3e 	bl	80011c4 <my_printf>

        // Close file
        f_close(&file);
 8001748:	480a      	ldr	r0, [pc, #40]	@ (8001774 <start_audio_recording+0x184>)
 800174a:	f01d f848 	bl	801e7de <f_close>
//        f_close(&file_f32);
        f_close(&file_mfcc);
 800174e:	480c      	ldr	r0, [pc, #48]	@ (8001780 <start_audio_recording+0x190>)
 8001750:	f01d f845 	bl	801e7de <f_close>
//        for (int i = 0; i < 40; i++)
//        {
//        	my_printf("mel [%d]: %f\r\n", i, mel_spectrogram[i]);
//        }

        my_printf("Recording complete\r\n");
 8001754:	4819      	ldr	r0, [pc, #100]	@ (80017bc <start_audio_recording+0x1cc>)
 8001756:	f7ff fd35 	bl	80011c4 <my_printf>
 800175a:	e002      	b.n	8001762 <start_audio_recording+0x172>
    } else {
        my_printf("File open failed\r\n");
 800175c:	4818      	ldr	r0, [pc, #96]	@ (80017c0 <start_audio_recording+0x1d0>)
 800175e:	f7ff fd31 	bl	80011c4 <my_printf>
    }
}
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	24005eac 	.word	0x24005eac
 800176c:	0802065c 	.word	0x0802065c
 8001770:	24001c1c 	.word	0x24001c1c
 8001774:	24001c7c 	.word	0x24001c7c
 8001778:	0802067c 	.word	0x0802067c
 800177c:	24001c5c 	.word	0x24001c5c
 8001780:	240080e4 	.word	0x240080e4
 8001784:	24001c18 	.word	0x24001c18
 8001788:	08020698 	.word	0x08020698
 800178c:	24001c3c 	.word	0x24001c3c
 8001790:	24007eb4 	.word	0x24007eb4
 8001794:	080206cc 	.word	0x080206cc
 8001798:	24001eac 	.word	0x24001eac
 800179c:	24000154 	.word	0x24000154
 80017a0:	24003eac 	.word	0x24003eac
 80017a4:	24005eb4 	.word	0x24005eb4
 80017a8:	24005eb0 	.word	0x24005eb0
 80017ac:	24006eb4 	.word	0x24006eb4
 80017b0:	240009b4 	.word	0x240009b4
 80017b4:	000270ff 	.word	0x000270ff
 80017b8:	080206e8 	.word	0x080206e8
 80017bc:	08020700 	.word	0x08020700
 80017c0:	08020718 	.word	0x08020718

080017c4 <servo360_init>:
#include "stm32h7xx_hal.h"
#include <stdint.h>

extern TIM_HandleTypeDef htim2;

void servo360_init(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
    for (int i = 100; i < 200; i++) {
 80017ca:	2364      	movs	r3, #100	@ 0x64
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	e00a      	b.n	80017e6 <servo360_init+0x22>
        set_servo_speed(i);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 f80f 	bl	80017f8 <set_servo_speed>
        HAL_Delay(10);
 80017da:	200a      	movs	r0, #10
 80017dc:	f002 fc34 	bl	8004048 <HAL_Delay>
    for (int i = 100; i < 200; i++) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3301      	adds	r3, #1
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80017ea:	ddf1      	ble.n	80017d0 <servo360_init+0xc>
    }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <set_servo_speed>:
/**
* for 360 degree servo
* pwm_value=150, stop
* pwm_value < 150 anticlockwise, > 150 clockwise
 */
void set_servo_speed(uint16_t pwm_value) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value - 5); // Small pre-step
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	1f5a      	subs	r2, r3, #5
 8001806:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <set_servo_speed+0x2c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(20); // Let the servo register a small change
 800180c:	2014      	movs	r0, #20
 800180e:	f002 fc1b 	bl	8004048 <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value); // Set final speed
 8001812:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <set_servo_speed+0x2c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	88fa      	ldrh	r2, [r7, #6]
 8001818:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2400044c 	.word	0x2400044c

08001828 <st7920_writeCmd>:
#include "font.h"

extern SPI_HandleTypeDef hspi4;

void st7920_writeCmd(uint8_t cmd)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, SET);
 8001832:	2201      	movs	r2, #1
 8001834:	2108      	movs	r1, #8
 8001836:	480f      	ldr	r0, [pc, #60]	@ (8001874 <st7920_writeCmd+0x4c>)
 8001838:	f005 fad4 	bl	8006de4 <HAL_GPIO_WritePin>
	uint8_t txBuffer[3];
	txBuffer[0] = 0xF8;
 800183c:	23f8      	movs	r3, #248	@ 0xf8
 800183e:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = (cmd & 0xF0);
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f023 030f 	bic.w	r3, r3, #15
 8001846:	b2db      	uxtb	r3, r3
 8001848:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = ((cmd << 4) & 0xF0);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	b2db      	uxtb	r3, r3
 8001850:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi4, txBuffer, 3, HAL_MAX_DELAY);
 8001852:	f107 010c 	add.w	r1, r7, #12
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	2203      	movs	r2, #3
 800185c:	4806      	ldr	r0, [pc, #24]	@ (8001878 <st7920_writeCmd+0x50>)
 800185e:	f00b fcf9 	bl	800d254 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2108      	movs	r1, #8
 8001866:	4803      	ldr	r0, [pc, #12]	@ (8001874 <st7920_writeCmd+0x4c>)
 8001868:	f005 fabc 	bl	8006de4 <HAL_GPIO_WritePin>
}
 800186c:	bf00      	nop
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	58021000 	.word	0x58021000
 8001878:	240003c4 	.word	0x240003c4

0800187c <st7920_writeData>:

void st7920_writeData(uint8_t data)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, SET);
 8001886:	2201      	movs	r2, #1
 8001888:	2108      	movs	r1, #8
 800188a:	480f      	ldr	r0, [pc, #60]	@ (80018c8 <st7920_writeData+0x4c>)
 800188c:	f005 faaa 	bl	8006de4 <HAL_GPIO_WritePin>
	uint8_t txBuffer[3];
	txBuffer[0] = 0xFA;
 8001890:	23fa      	movs	r3, #250	@ 0xfa
 8001892:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = (data & 0xF0);
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f023 030f 	bic.w	r3, r3, #15
 800189a:	b2db      	uxtb	r3, r3
 800189c:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = ((data << 4) & 0xF0);
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi4, txBuffer, 3, HAL_MAX_DELAY);
 80018a6:	f107 010c 	add.w	r1, r7, #12
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	2203      	movs	r2, #3
 80018b0:	4806      	ldr	r0, [pc, #24]	@ (80018cc <st7920_writeData+0x50>)
 80018b2:	f00b fccf 	bl	800d254 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2108      	movs	r1, #8
 80018ba:	4803      	ldr	r0, [pc, #12]	@ (80018c8 <st7920_writeData+0x4c>)
 80018bc:	f005 fa92 	bl	8006de4 <HAL_GPIO_WritePin>
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	58021000 	.word	0x58021000
 80018cc:	240003c4 	.word	0x240003c4

080018d0 <st7920_gfx>:

void st7920_gfx()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	st7920_writeCmd(0x30);  // 8 bit mode
 80018d4:	2030      	movs	r0, #48	@ 0x30
 80018d6:	f7ff ffa7 	bl	8001828 <st7920_writeCmd>
	HAL_Delay(1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f002 fbb4 	bl	8004048 <HAL_Delay>
	st7920_writeCmd(0x34);  // switch to Extended instructions
 80018e0:	2034      	movs	r0, #52	@ 0x34
 80018e2:	f7ff ffa1 	bl	8001828 <st7920_writeCmd>
	HAL_Delay(1);
 80018e6:	2001      	movs	r0, #1
 80018e8:	f002 fbae 	bl	8004048 <HAL_Delay>
	st7920_writeCmd(0x36);  // enable graphics
 80018ec:	2036      	movs	r0, #54	@ 0x36
 80018ee:	f7ff ff9b 	bl	8001828 <st7920_writeCmd>
	HAL_Delay(1);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f002 fba8 	bl	8004048 <HAL_Delay>
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <st7920_init>:

void st7920_init()
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, lcd_rst_Pin, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	2110      	movs	r1, #16
 8001904:	481d      	ldr	r0, [pc, #116]	@ (800197c <st7920_init+0x80>)
 8001906:	f005 fa6d 	bl	8006de4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800190a:	200a      	movs	r0, #10
 800190c:	f002 fb9c 	bl	8004048 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, lcd_rst_Pin, GPIO_PIN_SET);
 8001910:	2201      	movs	r2, #1
 8001912:	2110      	movs	r1, #16
 8001914:	4819      	ldr	r0, [pc, #100]	@ (800197c <st7920_init+0x80>)
 8001916:	f005 fa65 	bl	8006de4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800191a:	2032      	movs	r0, #50	@ 0x32
 800191c:	f002 fb94 	bl	8004048 <HAL_Delay>

	st7920_writeCmd(0x30);
 8001920:	2030      	movs	r0, #48	@ 0x30
 8001922:	f7ff ff81 	bl	8001828 <st7920_writeCmd>
	HAL_Delay(1);
 8001926:	2001      	movs	r0, #1
 8001928:	f002 fb8e 	bl	8004048 <HAL_Delay>
	st7920_writeCmd(0x30);
 800192c:	2030      	movs	r0, #48	@ 0x30
 800192e:	f7ff ff7b 	bl	8001828 <st7920_writeCmd>
	HAL_Delay(1);
 8001932:	2001      	movs	r0, #1
 8001934:	f002 fb88 	bl	8004048 <HAL_Delay>
	st7920_writeCmd(0x08);
 8001938:	2008      	movs	r0, #8
 800193a:	f7ff ff75 	bl	8001828 <st7920_writeCmd>
	HAL_Delay(1);
 800193e:	2001      	movs	r0, #1
 8001940:	f002 fb82 	bl	8004048 <HAL_Delay>
	st7920_writeCmd(0x01);
 8001944:	2001      	movs	r0, #1
 8001946:	f7ff ff6f 	bl	8001828 <st7920_writeCmd>
	HAL_Delay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f002 fb7c 	bl	8004048 <HAL_Delay>
	st7920_writeCmd(0x06);
 8001950:	2006      	movs	r0, #6
 8001952:	f7ff ff69 	bl	8001828 <st7920_writeCmd>
	HAL_Delay(1);
 8001956:	2001      	movs	r0, #1
 8001958:	f002 fb76 	bl	8004048 <HAL_Delay>
	st7920_writeCmd(0x0C);
 800195c:	200c      	movs	r0, #12
 800195e:	f7ff ff63 	bl	8001828 <st7920_writeCmd>
	HAL_Delay(1);
 8001962:	2001      	movs	r0, #1
 8001964:	f002 fb70 	bl	8004048 <HAL_Delay>
	st7920_writeCmd(0x02);
 8001968:	2002      	movs	r0, #2
 800196a:	f7ff ff5d 	bl	8001828 <st7920_writeCmd>
	HAL_Delay(1);
 800196e:	2001      	movs	r0, #1
 8001970:	f002 fb6a 	bl	8004048 <HAL_Delay>
	st7920_gfx();
 8001974:	f7ff ffac 	bl	80018d0 <st7920_gfx>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	58021000 	.word	0x58021000

08001980 <st7920_drawPixel>:

uint8_t framebuffer[64][16];

void st7920_drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t color)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	460b      	mov	r3, r1
 800198c:	71bb      	strb	r3, [r7, #6]
 800198e:	4613      	mov	r3, r2
 8001990:	717b      	strb	r3, [r7, #5]
	if(color > 1) return;
 8001992:	797b      	ldrb	r3, [r7, #5]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d840      	bhi.n	8001a1a <st7920_drawPixel+0x9a>
	uint8_t bit_position = 7 - (pos_x % 8);
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	43db      	mvns	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	73fb      	strb	r3, [r7, #15]
	if (color)
 80019a4:	797b      	ldrb	r3, [r7, #5]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01a      	beq.n	80019e0 <st7920_drawPixel+0x60>
	{
		framebuffer[pos_y][pos_x /8] |= (1 << bit_position);
 80019aa:	79bb      	ldrb	r3, [r7, #6]
 80019ac:	79fa      	ldrb	r2, [r7, #7]
 80019ae:	08d2      	lsrs	r2, r2, #3
 80019b0:	b2d0      	uxtb	r0, r2
 80019b2:	4601      	mov	r1, r0
 80019b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a28 <st7920_drawPixel+0xa8>)
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b25a      	sxtb	r2, r3
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2101      	movs	r1, #1
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	b25b      	sxtb	r3, r3
 80019ca:	4313      	orrs	r3, r2
 80019cc:	b25a      	sxtb	r2, r3
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	b2d1      	uxtb	r1, r2
 80019d2:	4a15      	ldr	r2, [pc, #84]	@ (8001a28 <st7920_drawPixel+0xa8>)
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	4413      	add	r3, r2
 80019d8:	4403      	add	r3, r0
 80019da:	460a      	mov	r2, r1
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	e01d      	b.n	8001a1c <st7920_drawPixel+0x9c>
	} else {
		framebuffer[pos_y][pos_x /8] &= ~(1 << bit_position);
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	79fa      	ldrb	r2, [r7, #7]
 80019e4:	08d2      	lsrs	r2, r2, #3
 80019e6:	b2d0      	uxtb	r0, r2
 80019e8:	4601      	mov	r1, r0
 80019ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001a28 <st7920_drawPixel+0xa8>)
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	4413      	add	r3, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b25a      	sxtb	r2, r3
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	b25a      	sxtb	r2, r3
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	b2d1      	uxtb	r1, r2
 8001a0c:	4a06      	ldr	r2, [pc, #24]	@ (8001a28 <st7920_drawPixel+0xa8>)
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	4413      	add	r3, r2
 8001a12:	4403      	add	r3, r0
 8001a14:	460a      	mov	r2, r1
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e000      	b.n	8001a1c <st7920_drawPixel+0x9c>
	if(color > 1) return;
 8001a1a:	bf00      	nop
	}
}
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	24008314 	.word	0x24008314

08001a2c <st7920_sendBuffer>:

void st7920_sendBuffer()
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y < 64; y++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	e044      	b.n	8001ac2 <st7920_sendBuffer+0x96>
	{
		if (y < 32)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	2b1f      	cmp	r3, #31
 8001a3c:	d81d      	bhi.n	8001a7a <st7920_sendBuffer+0x4e>
		{
			st7920_writeCmd(0x80 | y);
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff feee 	bl	8001828 <st7920_writeCmd>
			st7920_writeCmd(0x80);
 8001a4c:	2080      	movs	r0, #128	@ 0x80
 8001a4e:	f7ff feeb 	bl	8001828 <st7920_writeCmd>
			for (uint8_t j = 0; j < 16; j++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	71bb      	strb	r3, [r7, #6]
 8001a56:	e00c      	b.n	8001a72 <st7920_sendBuffer+0x46>
			{
				st7920_writeData(framebuffer[y][j]);
 8001a58:	79fa      	ldrb	r2, [r7, #7]
 8001a5a:	79bb      	ldrb	r3, [r7, #6]
 8001a5c:	491d      	ldr	r1, [pc, #116]	@ (8001ad4 <st7920_sendBuffer+0xa8>)
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	440a      	add	r2, r1
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff08 	bl	800187c <st7920_writeData>
			for (uint8_t j = 0; j < 16; j++)
 8001a6c:	79bb      	ldrb	r3, [r7, #6]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	71bb      	strb	r3, [r7, #6]
 8001a72:	79bb      	ldrb	r3, [r7, #6]
 8001a74:	2b0f      	cmp	r3, #15
 8001a76:	d9ef      	bls.n	8001a58 <st7920_sendBuffer+0x2c>
 8001a78:	e020      	b.n	8001abc <st7920_sendBuffer+0x90>
			}
		} else {
			st7920_writeCmd(0x80 | (y-32));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	3b20      	subs	r3, #32
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fecc 	bl	8001828 <st7920_writeCmd>
			st7920_writeCmd(0x88);
 8001a90:	2088      	movs	r0, #136	@ 0x88
 8001a92:	f7ff fec9 	bl	8001828 <st7920_writeCmd>
			for (uint8_t j = 0; j < 16; j++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	717b      	strb	r3, [r7, #5]
 8001a9a:	e00c      	b.n	8001ab6 <st7920_sendBuffer+0x8a>
			{
				st7920_writeData(framebuffer[y][j]);
 8001a9c:	79fa      	ldrb	r2, [r7, #7]
 8001a9e:	797b      	ldrb	r3, [r7, #5]
 8001aa0:	490c      	ldr	r1, [pc, #48]	@ (8001ad4 <st7920_sendBuffer+0xa8>)
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	440a      	add	r2, r1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fee6 	bl	800187c <st7920_writeData>
			for (uint8_t j = 0; j < 16; j++)
 8001ab0:	797b      	ldrb	r3, [r7, #5]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	717b      	strb	r3, [r7, #5]
 8001ab6:	797b      	ldrb	r3, [r7, #5]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d9ef      	bls.n	8001a9c <st7920_sendBuffer+0x70>
	for (uint8_t y = 0; y < 64; y++)
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	71fb      	strb	r3, [r7, #7]
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ac6:	d9b7      	bls.n	8001a38 <st7920_sendBuffer+0xc>
			}
		}
	}
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	24008314 	.word	0x24008314

08001ad8 <st7920_drawChar>:

// more features

void st7920_drawChar(uint8_t x, uint8_t y, char c) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	71bb      	strb	r3, [r7, #6]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	717b      	strb	r3, [r7, #5]
	if (c < 32 || c > 126) return;
 8001aea:	797b      	ldrb	r3, [r7, #5]
 8001aec:	2b1f      	cmp	r3, #31
 8001aee:	d945      	bls.n	8001b7c <st7920_drawChar+0xa4>
 8001af0:	797b      	ldrb	r3, [r7, #5]
 8001af2:	2b7e      	cmp	r3, #126	@ 0x7e
 8001af4:	d842      	bhi.n	8001b7c <st7920_drawChar+0xa4>
    uint8_t charIndex = (c - 32);
 8001af6:	797b      	ldrb	r3, [r7, #5]
 8001af8:	3b20      	subs	r3, #32
 8001afa:	737b      	strb	r3, [r7, #13]

    for (uint8_t row = 0; row < 5; row++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e038      	b.n	8001b74 <st7920_drawChar+0x9c>
    {
        for (uint8_t col = 0; col < 7; col++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	73bb      	strb	r3, [r7, #14]
 8001b06:	e02f      	b.n	8001b68 <st7920_drawChar+0x90>
        {
        	uint8_t fontByte = fontdata[charIndex][col];
 8001b08:	7b7a      	ldrb	r2, [r7, #13]
 8001b0a:	7bb9      	ldrb	r1, [r7, #14]
 8001b0c:	481d      	ldr	r0, [pc, #116]	@ (8001b84 <st7920_drawChar+0xac>)
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	4403      	add	r3, r0
 8001b16:	440b      	add	r3, r1
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	733b      	strb	r3, [r7, #12]
        	if (fontByte & (1 << (4 - row)))
 8001b1c:	7b3a      	ldrb	r2, [r7, #12]
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	f1c3 0304 	rsb	r3, r3, #4
 8001b24:	fa42 f303 	asr.w	r3, r2, r3
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00c      	beq.n	8001b4a <st7920_drawChar+0x72>
            {
                st7920_drawPixel(x + row, y + col, 1);
 8001b30:	79fa      	ldrb	r2, [r7, #7]
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	4413      	add	r3, r2
 8001b36:	b2d8      	uxtb	r0, r3
 8001b38:	79ba      	ldrb	r2, [r7, #6]
 8001b3a:	7bbb      	ldrb	r3, [r7, #14]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2201      	movs	r2, #1
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7ff ff1c 	bl	8001980 <st7920_drawPixel>
 8001b48:	e00b      	b.n	8001b62 <st7920_drawChar+0x8a>
            } else {
            	st7920_drawPixel(x + row, y + col, 0);
 8001b4a:	79fa      	ldrb	r2, [r7, #7]
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	4413      	add	r3, r2
 8001b50:	b2d8      	uxtb	r0, r3
 8001b52:	79ba      	ldrb	r2, [r7, #6]
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
 8001b56:	4413      	add	r3, r2
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7ff ff0f 	bl	8001980 <st7920_drawPixel>
        for (uint8_t col = 0; col < 7; col++)
 8001b62:	7bbb      	ldrb	r3, [r7, #14]
 8001b64:	3301      	adds	r3, #1
 8001b66:	73bb      	strb	r3, [r7, #14]
 8001b68:	7bbb      	ldrb	r3, [r7, #14]
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d9cc      	bls.n	8001b08 <st7920_drawChar+0x30>
    for (uint8_t row = 0; row < 5; row++)
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	3301      	adds	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d9c3      	bls.n	8001b02 <st7920_drawChar+0x2a>
 8001b7a:	e000      	b.n	8001b7e <st7920_drawChar+0xa6>
	if (c < 32 || c > 126) return;
 8001b7c:	bf00      	nop
            }
        }
    }
}
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	08021664 	.word	0x08021664

08001b88 <st7920_print>:

void st7920_print(uint8_t x, uint8_t y, const char* str)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	603a      	str	r2, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	460b      	mov	r3, r1
 8001b96:	71bb      	strb	r3, [r7, #6]
	while(*str)
 8001b98:	e013      	b.n	8001bc2 <st7920_print+0x3a>
	{
		st7920_drawChar(x, y, *str++);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	603a      	str	r2, [r7, #0]
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	79b9      	ldrb	r1, [r7, #6]
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff96 	bl	8001ad8 <st7920_drawChar>
		x+=6;
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	3306      	adds	r3, #6
 8001bb0:	71fb      	strb	r3, [r7, #7]
		if(x > 122)
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b7a      	cmp	r3, #122	@ 0x7a
 8001bb6:	d904      	bls.n	8001bc2 <st7920_print+0x3a>
		{
			y+=8;
 8001bb8:	79bb      	ldrb	r3, [r7, #6]
 8001bba:	3308      	adds	r3, #8
 8001bbc:	71bb      	strb	r3, [r7, #6]
			x=1;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1e7      	bne.n	8001b9a <st7920_print+0x12>
		}
	}
}
 8001bca:	bf00      	nop
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <st7920_clear>:

void st7920_clear() {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	memset(framebuffer, 0x00, sizeof(framebuffer));
 8001bd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4802      	ldr	r0, [pc, #8]	@ (8001be8 <st7920_clear+0x14>)
 8001be0:	f01d fc88 	bl	801f4f4 <memset>
	//st7920_writeCmd(0x01);
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	24008314 	.word	0x24008314

08001bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_MspInit+0x30>)
 8001bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bf8:	4a08      	ldr	r2, [pc, #32]	@ (8001c1c <HAL_MspInit+0x30>)
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_MspInit+0x30>)
 8001c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	58024400 	.word	0x58024400

08001c20 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0ba      	sub	sp, #232	@ 0xe8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c38:	f107 0318 	add.w	r3, r7, #24
 8001c3c:	22b8      	movs	r2, #184	@ 0xb8
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f01d fc57 	bl	801f4f4 <memset>
  if(hi2c->Instance==I2C1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d7c <HAL_I2C_MspInit+0x15c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d146      	bne.n	8001cde <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c50:	f04f 0208 	mov.w	r2, #8
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c62:	f107 0318 	add.w	r3, r7, #24
 8001c66:	4618      	mov	r0, r3
 8001c68:	f007 fa38 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001c72:	f7ff fa1b 	bl	80010ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	4b42      	ldr	r3, [pc, #264]	@ (8001d80 <HAL_I2C_MspInit+0x160>)
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c7c:	4a40      	ldr	r2, [pc, #256]	@ (8001d80 <HAL_I2C_MspInit+0x160>)
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c86:	4b3e      	ldr	r3, [pc, #248]	@ (8001d80 <HAL_I2C_MspInit+0x160>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c94:	23c0      	movs	r3, #192	@ 0xc0
 8001c96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c9a:	2312      	movs	r3, #18
 8001c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cac:	2304      	movs	r3, #4
 8001cae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4832      	ldr	r0, [pc, #200]	@ (8001d84 <HAL_I2C_MspInit+0x164>)
 8001cba:	f004 feeb 	bl	8006a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cbe:	4b30      	ldr	r3, [pc, #192]	@ (8001d80 <HAL_I2C_MspInit+0x160>)
 8001cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8001d80 <HAL_I2C_MspInit+0x160>)
 8001cc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cce:	4b2c      	ldr	r3, [pc, #176]	@ (8001d80 <HAL_I2C_MspInit+0x160>)
 8001cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cdc:	e04a      	b.n	8001d74 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a29      	ldr	r2, [pc, #164]	@ (8001d88 <HAL_I2C_MspInit+0x168>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d145      	bne.n	8001d74 <HAL_I2C_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ce8:	f04f 0208 	mov.w	r2, #8
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfa:	f107 0318 	add.w	r3, r7, #24
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f007 f9ec 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001d0a:	f7ff f9cf 	bl	80010ac <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <HAL_I2C_MspInit+0x160>)
 8001d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d14:	4a1a      	ldr	r2, [pc, #104]	@ (8001d80 <HAL_I2C_MspInit+0x160>)
 8001d16:	f043 0320 	orr.w	r3, r3, #32
 8001d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_I2C_MspInit+0x160>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d24:	f003 0320 	and.w	r3, r3, #32
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d32:	2312      	movs	r3, #18
 8001d34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d44:	2304      	movs	r3, #4
 8001d46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d4a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d4e:	4619      	mov	r1, r3
 8001d50:	480e      	ldr	r0, [pc, #56]	@ (8001d8c <HAL_I2C_MspInit+0x16c>)
 8001d52:	f004 fe9f 	bl	8006a94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d56:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <HAL_I2C_MspInit+0x160>)
 8001d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d5c:	4a08      	ldr	r2, [pc, #32]	@ (8001d80 <HAL_I2C_MspInit+0x160>)
 8001d5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_I2C_MspInit+0x160>)
 8001d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
}
 8001d74:	bf00      	nop
 8001d76:	37e8      	adds	r7, #232	@ 0xe8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40005400 	.word	0x40005400
 8001d80:	58024400 	.word	0x58024400
 8001d84:	58020400 	.word	0x58020400
 8001d88:	40005800 	.word	0x40005800
 8001d8c:	58021400 	.word	0x58021400

08001d90 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b0b8      	sub	sp, #224	@ 0xe0
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	22b8      	movs	r2, #184	@ 0xb8
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f01d fb9f 	bl	801f4f4 <memset>
  if(hi2s->Instance==SPI1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a47      	ldr	r2, [pc, #284]	@ (8001ed8 <HAL_I2S_MspInit+0x148>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	f040 8086 	bne.w	8001ece <HAL_I2S_MspInit+0x13e>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001dc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001dd2:	2310      	movs	r3, #16
 8001dd4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001dde:	2302      	movs	r3, #2
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001de2:	23c0      	movs	r3, #192	@ 0xc0
 8001de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f007 f96f 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_I2S_MspInit+0x78>
    {
      Error_Handler();
 8001e04:	f7ff f952 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e08:	4b34      	ldr	r3, [pc, #208]	@ (8001edc <HAL_I2S_MspInit+0x14c>)
 8001e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e0e:	4a33      	ldr	r2, [pc, #204]	@ (8001edc <HAL_I2S_MspInit+0x14c>)
 8001e10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e18:	4b30      	ldr	r3, [pc, #192]	@ (8001edc <HAL_I2S_MspInit+0x14c>)
 8001e1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	4b2d      	ldr	r3, [pc, #180]	@ (8001edc <HAL_I2S_MspInit+0x14c>)
 8001e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001edc <HAL_I2S_MspInit+0x14c>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e36:	4b29      	ldr	r3, [pc, #164]	@ (8001edc <HAL_I2S_MspInit+0x14c>)
 8001e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001e44:	2370      	movs	r3, #112	@ 0x70
 8001e46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e5c:	2305      	movs	r3, #5
 8001e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001e66:	4619      	mov	r1, r3
 8001e68:	481d      	ldr	r0, [pc, #116]	@ (8001ee0 <HAL_I2S_MspInit+0x150>)
 8001e6a:	f004 fe13 	bl	8006a94 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <HAL_I2S_MspInit+0x154>)
 8001e70:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee8 <HAL_I2S_MspInit+0x158>)
 8001e72:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <HAL_I2S_MspInit+0x154>)
 8001e76:	2225      	movs	r2, #37	@ 0x25
 8001e78:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <HAL_I2S_MspInit+0x154>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e80:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <HAL_I2S_MspInit+0x154>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e86:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <HAL_I2S_MspInit+0x154>)
 8001e88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e8c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <HAL_I2S_MspInit+0x154>)
 8001e90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e94:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e96:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <HAL_I2S_MspInit+0x154>)
 8001e98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e9c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <HAL_I2S_MspInit+0x154>)
 8001ea0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ea4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <HAL_I2S_MspInit+0x154>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee4 <HAL_I2S_MspInit+0x154>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001eb2:	480c      	ldr	r0, [pc, #48]	@ (8001ee4 <HAL_I2S_MspInit+0x154>)
 8001eb4:	f002 f9fc 	bl	80042b0 <HAL_DMA_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8001ebe:	f7ff f8f5 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a07      	ldr	r2, [pc, #28]	@ (8001ee4 <HAL_I2S_MspInit+0x154>)
 8001ec6:	649a      	str	r2, [r3, #72]	@ 0x48
 8001ec8:	4a06      	ldr	r2, [pc, #24]	@ (8001ee4 <HAL_I2S_MspInit+0x154>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ece:	bf00      	nop
 8001ed0:	37e0      	adds	r7, #224	@ 0xe0
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40013000 	.word	0x40013000
 8001edc:	58024400 	.word	0x58024400
 8001ee0:	58020000 	.word	0x58020000
 8001ee4:	240001a8 	.word	0x240001a8
 8001ee8:	40020010 	.word	0x40020010

08001eec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0ba      	sub	sp, #232	@ 0xe8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	22b8      	movs	r2, #184	@ 0xb8
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f01d faf1 	bl	801f4f4 <memset>
  if(huart->Instance==LPUART1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a4d      	ldr	r2, [pc, #308]	@ (800204c <HAL_UART_MspInit+0x160>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d147      	bne.n	8001fac <HAL_UART_MspInit+0xc0>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f1c:	f04f 0204 	mov.w	r2, #4
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2e:	f107 0318 	add.w	r3, r7, #24
 8001f32:	4618      	mov	r0, r3
 8001f34:	f007 f8d2 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001f3e:	f7ff f8b5 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f42:	4b43      	ldr	r3, [pc, #268]	@ (8002050 <HAL_UART_MspInit+0x164>)
 8001f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f48:	4a41      	ldr	r2, [pc, #260]	@ (8002050 <HAL_UART_MspInit+0x164>)
 8001f4a:	f043 0308 	orr.w	r3, r3, #8
 8001f4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f52:	4b3f      	ldr	r3, [pc, #252]	@ (8002050 <HAL_UART_MspInit+0x164>)
 8001f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f60:	4b3b      	ldr	r3, [pc, #236]	@ (8002050 <HAL_UART_MspInit+0x164>)
 8001f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f66:	4a3a      	ldr	r2, [pc, #232]	@ (8002050 <HAL_UART_MspInit+0x164>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f70:	4b37      	ldr	r3, [pc, #220]	@ (8002050 <HAL_UART_MspInit+0x164>)
 8001f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	482b      	ldr	r0, [pc, #172]	@ (8002054 <HAL_UART_MspInit+0x168>)
 8001fa6:	f004 fd75 	bl	8006a94 <HAL_GPIO_Init>
    /* USER CODE BEGIN UART5_MspInit 1 */

    /* USER CODE END UART5_MspInit 1 */
  }

}
 8001faa:	e04b      	b.n	8002044 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==UART5)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a29      	ldr	r2, [pc, #164]	@ (8002058 <HAL_UART_MspInit+0x16c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d146      	bne.n	8002044 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001fb6:	f04f 0202 	mov.w	r2, #2
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc8:	f107 0318 	add.w	r3, r7, #24
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f007 f885 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001fd8:	f7ff f868 	bl	80010ac <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8002050 <HAL_UART_MspInit+0x164>)
 8001fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8002050 <HAL_UART_MspInit+0x164>)
 8001fe4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fe8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fec:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <HAL_UART_MspInit+0x164>)
 8001fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <HAL_UART_MspInit+0x164>)
 8001ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002000:	4a13      	ldr	r2, [pc, #76]	@ (8002050 <HAL_UART_MspInit+0x164>)
 8002002:	f043 0302 	orr.w	r3, r3, #2
 8002006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800200a:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <HAL_UART_MspInit+0x164>)
 800200c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002018:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800201c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002032:	230e      	movs	r3, #14
 8002034:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800203c:	4619      	mov	r1, r3
 800203e:	4807      	ldr	r0, [pc, #28]	@ (800205c <HAL_UART_MspInit+0x170>)
 8002040:	f004 fd28 	bl	8006a94 <HAL_GPIO_Init>
}
 8002044:	bf00      	nop
 8002046:	37e8      	adds	r7, #232	@ 0xe8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	58000c00 	.word	0x58000c00
 8002050:	58024400 	.word	0x58024400
 8002054:	58020000 	.word	0x58020000
 8002058:	40005000 	.word	0x40005000
 800205c:	58020400 	.word	0x58020400

08002060 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b0ba      	sub	sp, #232	@ 0xe8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002078:	f107 0318 	add.w	r3, r7, #24
 800207c:	22b8      	movs	r2, #184	@ 0xb8
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f01d fa37 	bl	801f4f4 <memset>
  if(hsd->Instance==SDMMC1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a38      	ldr	r2, [pc, #224]	@ (800216c <HAL_SD_MspInit+0x10c>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d169      	bne.n	8002164 <HAL_SD_MspInit+0x104>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002090:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800209c:	2300      	movs	r3, #0
 800209e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a0:	f107 0318 	add.w	r3, r7, #24
 80020a4:	4618      	mov	r0, r3
 80020a6:	f007 f819 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80020b0:	f7fe fffc 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80020b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002170 <HAL_SD_MspInit+0x110>)
 80020b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002170 <HAL_SD_MspInit+0x110>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80020c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <HAL_SD_MspInit+0x110>)
 80020c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d2:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <HAL_SD_MspInit+0x110>)
 80020d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d8:	4a25      	ldr	r2, [pc, #148]	@ (8002170 <HAL_SD_MspInit+0x110>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e2:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <HAL_SD_MspInit+0x110>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002170 <HAL_SD_MspInit+0x110>)
 80020f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002170 <HAL_SD_MspInit+0x110>)
 80020f8:	f043 0308 	orr.w	r3, r3, #8
 80020fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <HAL_SD_MspInit+0x110>)
 8002102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800210e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002122:	2303      	movs	r3, #3
 8002124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002128:	230c      	movs	r3, #12
 800212a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800212e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002132:	4619      	mov	r1, r3
 8002134:	480f      	ldr	r0, [pc, #60]	@ (8002174 <HAL_SD_MspInit+0x114>)
 8002136:	f004 fcad 	bl	8006a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800213a:	2304      	movs	r3, #4
 800213c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002152:	230c      	movs	r3, #12
 8002154:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002158:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800215c:	4619      	mov	r1, r3
 800215e:	4806      	ldr	r0, [pc, #24]	@ (8002178 <HAL_SD_MspInit+0x118>)
 8002160:	f004 fc98 	bl	8006a94 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8002164:	bf00      	nop
 8002166:	37e8      	adds	r7, #232	@ 0xe8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	52007000 	.word	0x52007000
 8002170:	58024400 	.word	0x58024400
 8002174:	58020800 	.word	0x58020800
 8002178:	58020c00 	.word	0x58020c00

0800217c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b0b8      	sub	sp, #224	@ 0xe0
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	22b8      	movs	r2, #184	@ 0xb8
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f01d f9a9 	bl	801f4f4 <memset>
  if(hspi->Instance==SPI4)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a26      	ldr	r2, [pc, #152]	@ (8002240 <HAL_SPI_MspInit+0xc4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d144      	bne.n	8002236 <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80021ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80021b8:	2300      	movs	r3, #0
 80021ba:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	4618      	mov	r0, r3
 80021c2:	f006 ff8b 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80021cc:	f7fe ff6e 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80021d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002244 <HAL_SPI_MspInit+0xc8>)
 80021d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002244 <HAL_SPI_MspInit+0xc8>)
 80021d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021e0:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <HAL_SPI_MspInit+0xc8>)
 80021e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ee:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <HAL_SPI_MspInit+0xc8>)
 80021f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f4:	4a13      	ldr	r2, [pc, #76]	@ (8002244 <HAL_SPI_MspInit+0xc8>)
 80021f6:	f043 0310 	orr.w	r3, r3, #16
 80021fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021fe:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <HAL_SPI_MspInit+0xc8>)
 8002200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800220c:	2364      	movs	r3, #100	@ 0x64
 800220e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002224:	2305      	movs	r3, #5
 8002226:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800222a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800222e:	4619      	mov	r1, r3
 8002230:	4805      	ldr	r0, [pc, #20]	@ (8002248 <HAL_SPI_MspInit+0xcc>)
 8002232:	f004 fc2f 	bl	8006a94 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8002236:	bf00      	nop
 8002238:	37e0      	adds	r7, #224	@ 0xe0
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40013400 	.word	0x40013400
 8002244:	58024400 	.word	0x58024400
 8002248:	58021000 	.word	0x58021000

0800224c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800225c:	d10e      	bne.n	800227c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_TIM_Base_MspInit+0x3c>)
 8002260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002264:	4a08      	ldr	r2, [pc, #32]	@ (8002288 <HAL_TIM_Base_MspInit+0x3c>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_TIM_Base_MspInit+0x3c>)
 8002270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	58024400 	.word	0x58024400

0800228c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ac:	d11e      	bne.n	80022ec <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <HAL_TIM_MspPostInit+0x68>)
 80022b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b4:	4a0f      	ldr	r2, [pc, #60]	@ (80022f4 <HAL_TIM_MspPostInit+0x68>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <HAL_TIM_MspPostInit+0x68>)
 80022c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022cc:	2303      	movs	r3, #3
 80022ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022dc:	2301      	movs	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4619      	mov	r1, r3
 80022e6:	4804      	ldr	r0, [pc, #16]	@ (80022f8 <HAL_TIM_MspPostInit+0x6c>)
 80022e8:	f004 fbd4 	bl	8006a94 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022ec:	bf00      	nop
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	58024400 	.word	0x58024400
 80022f8:	58020000 	.word	0x58020000

080022fc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b0b2      	sub	sp, #200	@ 0xc8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	22b8      	movs	r2, #184	@ 0xb8
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f01d f8f1 	bl	801f4f4 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1a      	ldr	r2, [pc, #104]	@ (8002380 <HAL_PCD_MspInit+0x84>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d12c      	bne.n	8002376 <HAL_PCD_MspInit+0x7a>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800231c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002328:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800232c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002330:	f107 0310 	add.w	r3, r7, #16
 8002334:	4618      	mov	r0, r3
 8002336:	f006 fed1 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8002340:	f7fe feb4 	bl	80010ac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002344:	f005 ff54 	bl	80081f0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002348:	4b0e      	ldr	r3, [pc, #56]	@ (8002384 <HAL_PCD_MspInit+0x88>)
 800234a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800234e:	4a0d      	ldr	r2, [pc, #52]	@ (8002384 <HAL_PCD_MspInit+0x88>)
 8002350:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002354:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002358:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <HAL_PCD_MspInit+0x88>)
 800235a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800235e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	204d      	movs	r0, #77	@ 0x4d
 800236c:	f001 ff6b 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8002370:	204d      	movs	r0, #77	@ 0x4d
 8002372:	f001 ff82 	bl	800427a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8002376:	bf00      	nop
 8002378:	37c8      	adds	r7, #200	@ 0xc8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40040000 	.word	0x40040000
 8002384:	58024400 	.word	0x58024400

08002388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <NMI_Handler+0x4>

08002390 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <HardFault_Handler+0x4>

08002398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <MemManage_Handler+0x4>

080023a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <BusFault_Handler+0x4>

080023a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <UsageFault_Handler+0x4>

080023b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023de:	f001 fe13 	bl	8004008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ir_sensor_Pin);
 80023ea:	2008      	movs	r0, #8
 80023ec:	f004 fd13 	bl	8006e16 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80023f8:	4802      	ldr	r0, [pc, #8]	@ (8002404 <DMA1_Stream0_IRQHandler+0x10>)
 80023fa:	f003 f839 	bl	8005470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	240001a8 	.word	0x240001a8

08002408 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */
	tud_int_handler(0);
 800240c:	2000      	movs	r0, #0
 800240e:	f019 fadd 	bl	801b9cc <dcd_int_handler>
	return;
 8002412:	bf00      	nop
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002414:	bd80      	pop	{r7, pc}

08002416 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e00a      	b.n	800243e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002428:	f3af 8000 	nop.w
 800242c:	4601      	mov	r1, r0
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	60ba      	str	r2, [r7, #8]
 8002434:	b2ca      	uxtb	r2, r1
 8002436:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	dbf0      	blt.n	8002428 <_read+0x12>
  }

  return len;
 8002446:	687b      	ldr	r3, [r7, #4]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	e009      	b.n	8002476 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	60ba      	str	r2, [r7, #8]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3301      	adds	r3, #1
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	dbf1      	blt.n	8002462 <_write+0x12>
  }
  return len;
 800247e:	687b      	ldr	r3, [r7, #4]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_close>:

int _close(int file)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024b0:	605a      	str	r2, [r3, #4]
  return 0;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_isatty>:

int _isatty(int file)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024c8:	2301      	movs	r3, #1
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f8:	4a14      	ldr	r2, [pc, #80]	@ (800254c <_sbrk+0x5c>)
 80024fa:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <_sbrk+0x60>)
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002504:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <_sbrk+0x64>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d102      	bne.n	8002512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800250c:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <_sbrk+0x64>)
 800250e:	4a12      	ldr	r2, [pc, #72]	@ (8002558 <_sbrk+0x68>)
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002512:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <_sbrk+0x64>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	429a      	cmp	r2, r3
 800251e:	d207      	bcs.n	8002530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002520:	f01d f84c 	bl	801f5bc <__errno>
 8002524:	4603      	mov	r3, r0
 8002526:	220c      	movs	r2, #12
 8002528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
 800252e:	e009      	b.n	8002544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002530:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <_sbrk+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002536:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <_sbrk+0x64>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	4a05      	ldr	r2, [pc, #20]	@ (8002554 <_sbrk+0x64>)
 8002540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002542:	68fb      	ldr	r3, [r7, #12]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	24050000 	.word	0x24050000
 8002550:	00004000 	.word	0x00004000
 8002554:	24008714 	.word	0x24008714
 8002558:	24008de8 	.word	0x24008de8

0800255c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002560:	4b3e      	ldr	r3, [pc, #248]	@ (800265c <SystemInit+0x100>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002566:	4a3d      	ldr	r2, [pc, #244]	@ (800265c <SystemInit+0x100>)
 8002568:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800256c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002570:	4b3b      	ldr	r3, [pc, #236]	@ (8002660 <SystemInit+0x104>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	2b06      	cmp	r3, #6
 800257a:	d807      	bhi.n	800258c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800257c:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <SystemInit+0x104>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 030f 	bic.w	r3, r3, #15
 8002584:	4a36      	ldr	r2, [pc, #216]	@ (8002660 <SystemInit+0x104>)
 8002586:	f043 0307 	orr.w	r3, r3, #7
 800258a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800258c:	4b35      	ldr	r3, [pc, #212]	@ (8002664 <SystemInit+0x108>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a34      	ldr	r2, [pc, #208]	@ (8002664 <SystemInit+0x108>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002598:	4b32      	ldr	r3, [pc, #200]	@ (8002664 <SystemInit+0x108>)
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800259e:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <SystemInit+0x108>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4930      	ldr	r1, [pc, #192]	@ (8002664 <SystemInit+0x108>)
 80025a4:	4b30      	ldr	r3, [pc, #192]	@ (8002668 <SystemInit+0x10c>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002660 <SystemInit+0x104>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002660 <SystemInit+0x104>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 030f 	bic.w	r3, r3, #15
 80025be:	4a28      	ldr	r2, [pc, #160]	@ (8002660 <SystemInit+0x104>)
 80025c0:	f043 0307 	orr.w	r3, r3, #7
 80025c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025c6:	4b27      	ldr	r3, [pc, #156]	@ (8002664 <SystemInit+0x108>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025cc:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <SystemInit+0x108>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025d2:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <SystemInit+0x108>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025d8:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <SystemInit+0x108>)
 80025da:	4a24      	ldr	r2, [pc, #144]	@ (800266c <SystemInit+0x110>)
 80025dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025de:	4b21      	ldr	r3, [pc, #132]	@ (8002664 <SystemInit+0x108>)
 80025e0:	4a23      	ldr	r2, [pc, #140]	@ (8002670 <SystemInit+0x114>)
 80025e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002664 <SystemInit+0x108>)
 80025e6:	4a23      	ldr	r2, [pc, #140]	@ (8002674 <SystemInit+0x118>)
 80025e8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <SystemInit+0x108>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80025f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <SystemInit+0x108>)
 80025f2:	4a20      	ldr	r2, [pc, #128]	@ (8002674 <SystemInit+0x118>)
 80025f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80025f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <SystemInit+0x108>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80025fc:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <SystemInit+0x108>)
 80025fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002674 <SystemInit+0x118>)
 8002600:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002602:	4b18      	ldr	r3, [pc, #96]	@ (8002664 <SystemInit+0x108>)
 8002604:	2200      	movs	r2, #0
 8002606:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002608:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <SystemInit+0x108>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a15      	ldr	r2, [pc, #84]	@ (8002664 <SystemInit+0x108>)
 800260e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002612:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002614:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <SystemInit+0x108>)
 8002616:	2200      	movs	r2, #0
 8002618:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800261a:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <SystemInit+0x108>)
 800261c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002620:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d113      	bne.n	8002650 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002628:	4b0e      	ldr	r3, [pc, #56]	@ (8002664 <SystemInit+0x108>)
 800262a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800262e:	4a0d      	ldr	r2, [pc, #52]	@ (8002664 <SystemInit+0x108>)
 8002630:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002634:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002638:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <SystemInit+0x11c>)
 800263a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800263e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002640:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <SystemInit+0x108>)
 8002642:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002646:	4a07      	ldr	r2, [pc, #28]	@ (8002664 <SystemInit+0x108>)
 8002648:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800264c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000ed00 	.word	0xe000ed00
 8002660:	52002000 	.word	0x52002000
 8002664:	58024400 	.word	0x58024400
 8002668:	eaf6ed7f 	.word	0xeaf6ed7f
 800266c:	02020200 	.word	0x02020200
 8002670:	01ff0000 	.word	0x01ff0000
 8002674:	01010280 	.word	0x01010280
 8002678:	52004000 	.word	0x52004000

0800267c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002680:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <ExitRun0Mode+0x2c>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4a08      	ldr	r2, [pc, #32]	@ (80026a8 <ExitRun0Mode+0x2c>)
 8002686:	f043 0302 	orr.w	r3, r3, #2
 800268a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800268c:	bf00      	nop
 800268e:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <ExitRun0Mode+0x2c>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f9      	beq.n	800268e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	58024800 	.word	0x58024800

080026ac <board_usb_get_serial>:
  board_led_write(false);
}

// Get USB Serial number string from unique ID if available. Return number of character.
// Input is string descriptor from index 1 (index 0 is type + len)
static inline size_t board_usb_get_serial(uint16_t desc_str1[], size_t max_chars) {
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b091      	sub	sp, #68	@ 0x44
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint8_t uid[16] TU_ATTR_ALIGNED(4);
  size_t uid_len;

  // TODO work with make, but not working with esp32s3 cmake
  if ( board_get_unique_id ) {
 80026b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002770 <board_usb_get_serial+0xc4>)
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <board_usb_get_serial+0x20>
    uid_len = board_get_unique_id(uid, sizeof(uid));
 80026bc:	f107 031c 	add.w	r3, r7, #28
 80026c0:	2110      	movs	r1, #16
 80026c2:	4618      	mov	r0, r3
 80026c4:	f3af 8000 	nop.w
 80026c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80026ca:	e00b      	b.n	80026e4 <board_usb_get_serial+0x38>
  }else {
    // fixed serial string is 01234567889ABCDEF
    uint32_t* uid32 = (uint32_t*) (uintptr_t) uid;
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	633b      	str	r3, [r7, #48]	@ 0x30
    uid32[0] = 0x67452301;
 80026d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d4:	4a27      	ldr	r2, [pc, #156]	@ (8002774 <board_usb_get_serial+0xc8>)
 80026d6:	601a      	str	r2, [r3, #0]
    uid32[1] = 0xEFCDAB89;
 80026d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026da:	3304      	adds	r3, #4
 80026dc:	4a26      	ldr	r2, [pc, #152]	@ (8002778 <board_usb_get_serial+0xcc>)
 80026de:	601a      	str	r2, [r3, #0]
    uid_len = 8;
 80026e0:	2308      	movs	r3, #8
 80026e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if ( uid_len > max_chars / 2 ) uid_len = max_chars / 2;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d902      	bls.n	80026f4 <board_usb_get_serial+0x48>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	085b      	lsrs	r3, r3, #1
 80026f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  for ( size_t i = 0; i < uid_len; i++ ) {
 80026f4:	2300      	movs	r3, #0
 80026f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026f8:	e030      	b.n	800275c <board_usb_get_serial+0xb0>
    for ( size_t j = 0; j < 2; j++ ) {
 80026fa:	2300      	movs	r3, #0
 80026fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80026fe:	e027      	b.n	8002750 <board_usb_get_serial+0xa4>
      const char nibble_to_hex[16] = {
 8002700:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <board_usb_get_serial+0xd0>)
 8002702:	f107 040c 	add.w	r4, r7, #12
 8002706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          '0', '1', '2', '3', '4', '5', '6', '7',
          '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
      };
      uint8_t const nibble = (uid[i] >> (j * 4)) & 0xf;
 800270c:	f107 021c 	add.w	r2, r7, #28
 8002710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002712:	4413      	add	r3, r2
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	fa42 f303 	asr.w	r3, r2, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      desc_str1[i * 2 + (1 - j)] = nibble_to_hex[nibble]; // UTF-16-LE
 800272a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800272e:	3340      	adds	r3, #64	@ 0x40
 8002730:	443b      	add	r3, r7
 8002732:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 8002736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002738:	005a      	lsls	r2, r3, #1
 800273a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	3301      	adds	r3, #1
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	460a      	mov	r2, r1
 8002748:	801a      	strh	r2, [r3, #0]
    for ( size_t j = 0; j < 2; j++ ) {
 800274a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800274c:	3301      	adds	r3, #1
 800274e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002752:	2b01      	cmp	r3, #1
 8002754:	d9d4      	bls.n	8002700 <board_usb_get_serial+0x54>
  for ( size_t i = 0; i < uid_len; i++ ) {
 8002756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002758:	3301      	adds	r3, #1
 800275a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800275c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800275e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002760:	429a      	cmp	r2, r3
 8002762:	d3ca      	bcc.n	80026fa <board_usb_get_serial+0x4e>
    }
  }

  return 2 * uid_len;
 8002764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002766:	005b      	lsls	r3, r3, #1
}
 8002768:	4618      	mov	r0, r3
 800276a:	3744      	adds	r7, #68	@ 0x44
 800276c:	46bd      	mov	sp, r7
 800276e:	bd90      	pop	{r4, r7, pc}
 8002770:	00000000 	.word	0x00000000
 8002774:	67452301 	.word	0x67452301
 8002778:	efcdab89 	.word	0xefcdab89
 800277c:	0802072c 	.word	0x0802072c

08002780 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8002784:	4b02      	ldr	r3, [pc, #8]	@ (8002790 <tud_descriptor_device_cb+0x10>)
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	08021bb4 	.word	0x08021bb4

08002794 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
 800279e:	4b03      	ldr	r3, [pc, #12]	@ (80027ac <tud_descriptor_configuration_cb+0x18>)
#endif
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	08021bc8 	.word	0x08021bc8

080027b0 <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	460a      	mov	r2, r1
 80027ba:	71fb      	strb	r3, [r7, #7]
 80027bc:	4613      	mov	r3, r2
 80027be:	80bb      	strh	r3, [r7, #4]
  (void) langid;
  size_t chr_count;

  switch ( index ) {
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <tud_descriptor_string_cb+0x1c>
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d009      	beq.n	80027de <tud_descriptor_string_cb+0x2e>
 80027ca:	e00f      	b.n	80027ec <tud_descriptor_string_cb+0x3c>
    case STRID_LANGID:
      memcpy(&_desc_str[1], string_desc_arr[0], 2);
 80027cc:	4b25      	ldr	r3, [pc, #148]	@ (8002864 <tud_descriptor_string_cb+0xb4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	4b24      	ldr	r3, [pc, #144]	@ (8002868 <tud_descriptor_string_cb+0xb8>)
 80027d6:	805a      	strh	r2, [r3, #2]
      chr_count = 1;
 80027d8:	2301      	movs	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
      break;
 80027dc:	e031      	b.n	8002842 <tud_descriptor_string_cb+0x92>

    case STRID_SERIAL:
      chr_count = board_usb_get_serial(_desc_str + 1, 32);
 80027de:	4b23      	ldr	r3, [pc, #140]	@ (800286c <tud_descriptor_string_cb+0xbc>)
 80027e0:	2120      	movs	r1, #32
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff62 	bl	80026ac <board_usb_get_serial>
 80027e8:	6178      	str	r0, [r7, #20]
      break;
 80027ea:	e02a      	b.n	8002842 <tud_descriptor_string_cb+0x92>

    default:
      // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
      // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

      if ( !(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])) ) return NULL;
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d901      	bls.n	80027f6 <tud_descriptor_string_cb+0x46>
 80027f2:	2300      	movs	r3, #0
 80027f4:	e031      	b.n	800285a <tud_descriptor_string_cb+0xaa>

      const char *str = string_desc_arr[index];
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002864 <tud_descriptor_string_cb+0xb4>)
 80027fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fe:	60fb      	str	r3, [r7, #12]

      // Cap at max char
      chr_count = strlen(str);
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7fd fd85 	bl	8000310 <strlen>
 8002806:	6178      	str	r0, [r7, #20]
      size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 8002808:	2320      	movs	r3, #32
 800280a:	60bb      	str	r3, [r7, #8]
      if ( chr_count > max_count ) chr_count = max_count;
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	429a      	cmp	r2, r3
 8002812:	d901      	bls.n	8002818 <tud_descriptor_string_cb+0x68>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	617b      	str	r3, [r7, #20]

      // Convert ASCII string into UTF-16
      for ( size_t i = 0; i < chr_count; i++ ) {
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	e00c      	b.n	8002838 <tud_descriptor_string_cb+0x88>
        _desc_str[1 + i] = str[i];
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	3301      	adds	r3, #1
 800282a:	4611      	mov	r1, r2
 800282c:	4a0e      	ldr	r2, [pc, #56]	@ (8002868 <tud_descriptor_string_cb+0xb8>)
 800282e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for ( size_t i = 0; i < chr_count; i++ ) {
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	3301      	adds	r3, #1
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	429a      	cmp	r2, r3
 800283e:	d3ee      	bcc.n	800281e <tud_descriptor_string_cb+0x6e>
      }
      break;
 8002840:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	b29b      	uxth	r3, r3
 8002846:	3301      	adds	r3, #1
 8002848:	b29b      	uxth	r3, r3
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	b29b      	uxth	r3, r3
 800284e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002852:	b29a      	uxth	r2, r3
 8002854:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <tud_descriptor_string_cb+0xb8>)
 8002856:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8002858:	4b03      	ldr	r3, [pc, #12]	@ (8002868 <tud_descriptor_string_cb+0xb8>)
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	24000008 	.word	0x24000008
 8002868:	24008718 	.word	0x24008718
 800286c:	2400871a 	.word	0x2400871a

08002870 <my_printf>:
{
 8002870:	b40f      	push	{r0, r1, r2, r3}
 8002872:	b580      	push	{r7, lr}
 8002874:	b0c2      	sub	sp, #264	@ 0x108
 8002876:	af00      	add	r7, sp, #0
    va_start(args, format);
 8002878:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800287c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002880:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002884:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800288a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800288e:	f107 0008 	add.w	r0, r7, #8
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002898:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800289c:	f01c fd88 	bl	801f3b0 <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80028a0:	f107 0308 	add.w	r3, r7, #8
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fd33 	bl	8000310 <strlen>
 80028aa:	4603      	mov	r3, r0
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	f107 0108 	add.w	r1, r7, #8
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
 80028b6:	4805      	ldr	r0, [pc, #20]	@ (80028cc <my_printf+0x5c>)
 80028b8:	f00c f8b6 	bl	800ea28 <HAL_UART_Transmit>
}
 80028bc:	bf00      	nop
 80028be:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80028c2:	46bd      	mov	sp, r7
 80028c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028c8:	b004      	add	sp, #16
 80028ca:	4770      	bx	lr
 80028cc:	24000220 	.word	0x24000220

080028d0 <i2c_set_slave_address>:

extern I2C_HandleTypeDef hi2c1;

uint8_t i2c_addr = 0;

void i2c_set_slave_address(uint8_t addr) {
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
    i2c_addr = addr;
 80028da:	4a04      	ldr	r2, [pc, #16]	@ (80028ec <i2c_set_slave_address+0x1c>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	7013      	strb	r3, [r2, #0]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	2400875b 	.word	0x2400875b

080028f0 <i2c_read_addr8_data8>:

bool i2c_read_addr8_data8(uint8_t addr, uint8_t *data) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	4603      	mov	r3, r0
 80028f8:	6039      	str	r1, [r7, #0]
 80028fa:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80028fc:	4b18      	ldr	r3, [pc, #96]	@ (8002960 <i2c_read_addr8_data8+0x70>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	b299      	uxth	r1, r3
 8002904:	1dfa      	adds	r2, r7, #7
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2301      	movs	r3, #1
 800290e:	4815      	ldr	r0, [pc, #84]	@ (8002964 <i2c_read_addr8_data8+0x74>)
 8002910:	f004 fb38 	bl	8006f84 <HAL_I2C_Master_Transmit>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d006      	beq.n	8002928 <i2c_read_addr8_data8+0x38>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	4619      	mov	r1, r3
 800291e:	4812      	ldr	r0, [pc, #72]	@ (8002968 <i2c_read_addr8_data8+0x78>)
 8002920:	f7ff ffa6 	bl	8002870 <my_printf>
        return false;
 8002924:	2300      	movs	r3, #0
 8002926:	e016      	b.n	8002956 <i2c_read_addr8_data8+0x66>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, data, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002928:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <i2c_read_addr8_data8+0x70>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	b299      	uxth	r1, r3
 8002930:	f04f 33ff 	mov.w	r3, #4294967295
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2301      	movs	r3, #1
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	480a      	ldr	r0, [pc, #40]	@ (8002964 <i2c_read_addr8_data8+0x74>)
 800293c:	f004 fc3a 	bl	80071b4 <HAL_I2C_Master_Receive>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d006      	beq.n	8002954 <i2c_read_addr8_data8+0x64>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	4619      	mov	r1, r3
 800294a:	4808      	ldr	r0, [pc, #32]	@ (800296c <i2c_read_addr8_data8+0x7c>)
 800294c:	f7ff ff90 	bl	8002870 <my_printf>
        return false;
 8002950:	2300      	movs	r3, #0
 8002952:	e000      	b.n	8002956 <i2c_read_addr8_data8+0x66>
    }
    return true;
 8002954:	2301      	movs	r3, #1
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2400875b 	.word	0x2400875b
 8002964:	240000ac 	.word	0x240000ac
 8002968:	08020768 	.word	0x08020768
 800296c:	080207ac 	.word	0x080207ac

08002970 <i2c_write_addr8_data8>:
    }
    *data = (buf[0] << 8) | buf[1];
    return true;
}

bool i2c_write_addr8_data8(uint8_t addr, uint8_t data) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af02      	add	r7, sp, #8
 8002976:	4603      	mov	r3, r0
 8002978:	460a      	mov	r2, r1
 800297a:	71fb      	strb	r3, [r7, #7]
 800297c:	4613      	mov	r3, r2
 800297e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {addr, data};
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	733b      	strb	r3, [r7, #12]
 8002984:	79bb      	ldrb	r3, [r7, #6]
 8002986:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, buf, 2, HAL_MAX_DELAY) != HAL_OK) {
 8002988:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <i2c_write_addr8_data8+0x54>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	b299      	uxth	r1, r3
 8002990:	f107 020c 	add.w	r2, r7, #12
 8002994:	f04f 33ff 	mov.w	r3, #4294967295
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	2302      	movs	r3, #2
 800299c:	480a      	ldr	r0, [pc, #40]	@ (80029c8 <i2c_write_addr8_data8+0x58>)
 800299e:	f004 faf1 	bl	8006f84 <HAL_I2C_Master_Transmit>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <i2c_write_addr8_data8+0x4a>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_data8 (register 0x%X) on device 0x%X\r\n", addr, i2c_addr);
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	4a06      	ldr	r2, [pc, #24]	@ (80029c4 <i2c_write_addr8_data8+0x54>)
 80029ac:	7812      	ldrb	r2, [r2, #0]
 80029ae:	4619      	mov	r1, r3
 80029b0:	4806      	ldr	r0, [pc, #24]	@ (80029cc <i2c_write_addr8_data8+0x5c>)
 80029b2:	f7ff ff5d 	bl	8002870 <my_printf>
        return false;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <i2c_write_addr8_data8+0x4c>
    }
    return true;
 80029ba:	2301      	movs	r3, #1
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2400875b 	.word	0x2400875b
 80029c8:	240000ac 	.word	0x240000ac
 80029cc:	0802087c 	.word	0x0802087c

080029d0 <i2c_read_addr8_data32>:

bool i2c_read_addr8_data32(uint8_t addr, uint32_t *data) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	4603      	mov	r3, r0
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80029dc:	4b1f      	ldr	r3, [pc, #124]	@ (8002a5c <i2c_read_addr8_data32+0x8c>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	b299      	uxth	r1, r3
 80029e4:	1dfa      	adds	r2, r7, #7
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2301      	movs	r3, #1
 80029ee:	481c      	ldr	r0, [pc, #112]	@ (8002a60 <i2c_read_addr8_data32+0x90>)
 80029f0:	f004 fac8 	bl	8006f84 <HAL_I2C_Master_Transmit>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d006      	beq.n	8002a08 <i2c_read_addr8_data32+0x38>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	4619      	mov	r1, r3
 80029fe:	4819      	ldr	r0, [pc, #100]	@ (8002a64 <i2c_read_addr8_data32+0x94>)
 8002a00:	f7ff ff36 	bl	8002870 <my_printf>
        return false;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e024      	b.n	8002a52 <i2c_read_addr8_data32+0x82>
    }
    uint8_t buf[4];
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, buf, 4, HAL_MAX_DELAY) != HAL_OK) {
 8002a08:	4b14      	ldr	r3, [pc, #80]	@ (8002a5c <i2c_read_addr8_data32+0x8c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	b299      	uxth	r1, r3
 8002a10:	f107 020c 	add.w	r2, r7, #12
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	4810      	ldr	r0, [pc, #64]	@ (8002a60 <i2c_read_addr8_data32+0x90>)
 8002a1e:	f004 fbc9 	bl	80071b4 <HAL_I2C_Master_Receive>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <i2c_read_addr8_data32+0x66>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	480e      	ldr	r0, [pc, #56]	@ (8002a68 <i2c_read_addr8_data32+0x98>)
 8002a2e:	f7ff ff1f 	bl	8002870 <my_printf>
        return false;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e00d      	b.n	8002a52 <i2c_read_addr8_data32+0x82>
    }
    *data = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 8002a36:	7b3b      	ldrb	r3, [r7, #12]
 8002a38:	061a      	lsls	r2, r3, #24
 8002a3a:	7b7b      	ldrb	r3, [r7, #13]
 8002a3c:	041b      	lsls	r3, r3, #16
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	7bbb      	ldrb	r3, [r7, #14]
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	4313      	orrs	r3, r2
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	601a      	str	r2, [r3, #0]
    return true;
 8002a50:	2301      	movs	r3, #1
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2400875b 	.word	0x2400875b
 8002a60:	240000ac 	.word	0x240000ac
 8002a64:	080208d0 	.word	0x080208d0
 8002a68:	08020918 	.word	0x08020918

08002a6c <i2c_write_addr8_bytes>:

bool i2c_write_addr8_bytes(uint8_t addr, const uint8_t *data, uint8_t length) {
 8002a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a70:	b087      	sub	sp, #28
 8002a72:	af02      	add	r7, sp, #8
 8002a74:	4603      	mov	r3, r0
 8002a76:	6039      	str	r1, [r7, #0]
 8002a78:	71fb      	strb	r3, [r7, #7]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	71bb      	strb	r3, [r7, #6]
 8002a7e:	466b      	mov	r3, sp
 8002a80:	461e      	mov	r6, r3
    uint8_t buf[1 + length];
 8002a82:	79bb      	ldrb	r3, [r7, #6]
 8002a84:	1c59      	adds	r1, r3, #1
 8002a86:	1e4b      	subs	r3, r1, #1
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	460a      	mov	r2, r1
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	4690      	mov	r8, r2
 8002a90:	4699      	mov	r9, r3
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aa6:	460a      	mov	r2, r1
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	4614      	mov	r4, r2
 8002aac:	461d      	mov	r5, r3
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	00eb      	lsls	r3, r5, #3
 8002ab8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002abc:	00e2      	lsls	r2, r4, #3
 8002abe:	460b      	mov	r3, r1
 8002ac0:	3307      	adds	r3, #7
 8002ac2:	08db      	lsrs	r3, r3, #3
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	ebad 0d03 	sub.w	sp, sp, r3
 8002aca:	ab02      	add	r3, sp, #8
 8002acc:	3300      	adds	r3, #0
 8002ace:	60bb      	str	r3, [r7, #8]
    buf[0] = addr;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	79fa      	ldrb	r2, [r7, #7]
 8002ad4:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[1], data, length);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	79ba      	ldrb	r2, [r7, #6]
 8002adc:	6839      	ldr	r1, [r7, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f01c fd99 	bl	801f616 <memcpy>

    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, buf, length + 1, HAL_MAX_DELAY) != HAL_OK) {
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b24 <i2c_write_addr8_bytes+0xb8>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	b299      	uxth	r1, r3
 8002aec:	79bb      	ldrb	r3, [r7, #6]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295
 8002af8:	9200      	str	r2, [sp, #0]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	480a      	ldr	r0, [pc, #40]	@ (8002b28 <i2c_write_addr8_bytes+0xbc>)
 8002afe:	f004 fa41 	bl	8006f84 <HAL_I2C_Master_Transmit>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d006      	beq.n	8002b16 <i2c_write_addr8_bytes+0xaa>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_bytes (register 0x%X)\r\n", addr);
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4807      	ldr	r0, [pc, #28]	@ (8002b2c <i2c_write_addr8_bytes+0xc0>)
 8002b0e:	f7ff feaf 	bl	8002870 <my_printf>
        return false;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e000      	b.n	8002b18 <i2c_write_addr8_bytes+0xac>
    }
    return true;
 8002b16:	2301      	movs	r3, #1
 8002b18:	46b5      	mov	sp, r6
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b24:	2400875b 	.word	0x2400875b
 8002b28:	240000ac 	.word	0x240000ac
 8002b2c:	0802095c 	.word	0x0802095c

08002b30 <i2c_read_addr8_bytes>:

bool i2c_read_addr8_bytes(uint8_t addr, uint8_t *data, uint8_t length) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	4603      	mov	r3, r0
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	71fb      	strb	r3, [r7, #7]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002b40:	4b18      	ldr	r3, [pc, #96]	@ (8002ba4 <i2c_read_addr8_bytes+0x74>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	b299      	uxth	r1, r3
 8002b48:	1dfa      	adds	r2, r7, #7
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2301      	movs	r3, #1
 8002b52:	4815      	ldr	r0, [pc, #84]	@ (8002ba8 <i2c_read_addr8_bytes+0x78>)
 8002b54:	f004 fa16 	bl	8006f84 <HAL_I2C_Master_Transmit>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <i2c_read_addr8_bytes+0x3c>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	4619      	mov	r1, r3
 8002b62:	4812      	ldr	r0, [pc, #72]	@ (8002bac <i2c_read_addr8_bytes+0x7c>)
 8002b64:	f7ff fe84 	bl	8002870 <my_printf>
        return false;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e017      	b.n	8002b9c <i2c_read_addr8_bytes+0x6c>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, data, length, HAL_MAX_DELAY) != HAL_OK) {
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba4 <i2c_read_addr8_bytes+0x74>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	b299      	uxth	r1, r3
 8002b74:	79bb      	ldrb	r3, [r7, #6]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7c:	9200      	str	r2, [sp, #0]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	4809      	ldr	r0, [pc, #36]	@ (8002ba8 <i2c_read_addr8_bytes+0x78>)
 8002b82:	f004 fb17 	bl	80071b4 <HAL_I2C_Master_Receive>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <i2c_read_addr8_bytes+0x6a>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4807      	ldr	r0, [pc, #28]	@ (8002bb0 <i2c_read_addr8_bytes+0x80>)
 8002b92:	f7ff fe6d 	bl	8002870 <my_printf>
        return false;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e000      	b.n	8002b9c <i2c_read_addr8_bytes+0x6c>
    }
    return true;
 8002b9a:	2301      	movs	r3, #1
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	2400875b 	.word	0x2400875b
 8002ba8:	240000ac 	.word	0x240000ac
 8002bac:	080209a0 	.word	0x080209a0
 8002bb0:	080209e4 	.word	0x080209e4

08002bb4 <device_is_booted>:
/**
 * We can read the model id to confirm that the device is booted.
 * (There is no fresh_out_of_reset as on the vl6180x)
 */
static bool device_is_booted()
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
    printf("check device is booted\r\n");
 8002bba:	4813      	ldr	r0, [pc, #76]	@ (8002c08 <device_is_booted+0x54>)
 8002bbc:	f01c fb26 	bl	801f20c <puts>
    uint8_t device_id = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_IDENTIFICATION_MODEL_ID, &device_id)) {
 8002bc4:	1dfb      	adds	r3, r7, #7
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	20c0      	movs	r0, #192	@ 0xc0
 8002bca:	f7ff fe91 	bl	80028f0 <i2c_read_addr8_data8>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f083 0301 	eor.w	r3, r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <device_is_booted+0x34>
        printf("current device id: %d", device_id);
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	480b      	ldr	r0, [pc, #44]	@ (8002c0c <device_is_booted+0x58>)
 8002be0:	f01c faac 	bl	801f13c <iprintf>
        return false;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e00a      	b.n	8002bfe <device_is_booted+0x4a>
    } else {
        printf("device id: %d", device_id);
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	4619      	mov	r1, r3
 8002bec:	4808      	ldr	r0, [pc, #32]	@ (8002c10 <device_is_booted+0x5c>)
 8002bee:	f01c faa5 	bl	801f13c <iprintf>
    }
    return device_id == VL53L0X_EXPECTED_DEVICE_ID;
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	2bee      	cmp	r3, #238	@ 0xee
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	08020a28 	.word	0x08020a28
 8002c0c:	08020a40 	.word	0x08020a40
 8002c10:	08020a58 	.word	0x08020a58

08002c14 <data_init>:

/**
 * One time device initialization
 */
static bool data_init()
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
    bool success = false;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	71fb      	strb	r3, [r7, #7]

    /* Set 2v8 mode */
    uint8_t vhv_config_scl_sda = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	71bb      	strb	r3, [r7, #6]
    if (!i2c_read_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_scl_sda)) {
 8002c22:	1dbb      	adds	r3, r7, #6
 8002c24:	4619      	mov	r1, r3
 8002c26:	2089      	movs	r0, #137	@ 0x89
 8002c28:	f7ff fe62 	bl	80028f0 <i2c_read_addr8_data8>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f083 0301 	eor.w	r3, r3, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <data_init+0x28>
        return false;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e073      	b.n	8002d24 <data_init+0x110>
    }
    vhv_config_scl_sda |= 0x01;
 8002c3c:	79bb      	ldrb	r3, [r7, #6]
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, vhv_config_scl_sda)) {
 8002c46:	79bb      	ldrb	r3, [r7, #6]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	2089      	movs	r0, #137	@ 0x89
 8002c4c:	f7ff fe90 	bl	8002970 <i2c_write_addr8_data8>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f083 0301 	eor.w	r3, r3, #1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <data_init+0x4c>
        return false;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e061      	b.n	8002d24 <data_init+0x110>
    }

    /* Set I2C standard mode */
    success = i2c_write_addr8_data8(0x88, 0x00);
 8002c60:	2100      	movs	r1, #0
 8002c62:	2088      	movs	r0, #136	@ 0x88
 8002c64:	f7ff fe84 	bl	8002970 <i2c_write_addr8_data8>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	71fb      	strb	r3, [r7, #7]

    success &= i2c_write_addr8_data8(0x80, 0x01);
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	2080      	movs	r0, #128	@ 0x80
 8002c70:	f7ff fe7e 	bl	8002970 <i2c_write_addr8_data8>
 8002c74:	4603      	mov	r3, r0
 8002c76:	461a      	mov	r2, r3
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002c86:	2101      	movs	r1, #1
 8002c88:	20ff      	movs	r0, #255	@ 0xff
 8002c8a:	f7ff fe71 	bl	8002970 <i2c_write_addr8_data8>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf14      	ite	ne
 8002c9a:	2301      	movne	r3, #1
 8002c9c:	2300      	moveq	r3, #0
 8002c9e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7ff fe64 	bl	8002970 <i2c_write_addr8_data8>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	461a      	mov	r2, r3
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf14      	ite	ne
 8002cb4:	2301      	movne	r3, #1
 8002cb6:	2300      	moveq	r3, #0
 8002cb8:	71fb      	strb	r3, [r7, #7]
    /* It may be unnecessary to retrieve the stop variable for each sensor */
    success &= i2c_read_addr8_data8(0x91, &stop_variable);
 8002cba:	491c      	ldr	r1, [pc, #112]	@ (8002d2c <data_init+0x118>)
 8002cbc:	2091      	movs	r0, #145	@ 0x91
 8002cbe:	f7ff fe17 	bl	80028f0 <i2c_read_addr8_data8>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf14      	ite	ne
 8002cce:	2301      	movne	r3, #1
 8002cd0:	2300      	moveq	r3, #0
 8002cd2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7ff fe4a 	bl	8002970 <i2c_write_addr8_data8>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	461a      	mov	r2, r3
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf14      	ite	ne
 8002ce8:	2301      	movne	r3, #1
 8002cea:	2300      	moveq	r3, #0
 8002cec:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002cee:	2100      	movs	r1, #0
 8002cf0:	20ff      	movs	r0, #255	@ 0xff
 8002cf2:	f7ff fe3d 	bl	8002970 <i2c_write_addr8_data8>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bf14      	ite	ne
 8002d02:	2301      	movne	r3, #1
 8002d04:	2300      	moveq	r3, #0
 8002d06:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 8002d08:	2100      	movs	r1, #0
 8002d0a:	2080      	movs	r0, #128	@ 0x80
 8002d0c:	f7ff fe30 	bl	8002970 <i2c_write_addr8_data8>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf14      	ite	ne
 8002d1c:	2301      	movne	r3, #1
 8002d1e:	2300      	moveq	r3, #0
 8002d20:	71fb      	strb	r3, [r7, #7]

    return success;
 8002d22:	79fb      	ldrb	r3, [r7, #7]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	2400875a 	.word	0x2400875a

08002d30 <read_strobe>:
/**
 * Wait for strobe value to be set. This is used when we read values
 * from NVM (non volatile memory).
 */
static bool read_strobe()
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
    bool success = false;
 8002d36:	2300      	movs	r3, #0
 8002d38:	71fb      	strb	r3, [r7, #7]
    uint8_t strobe = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(0x83, 0x00)) {
 8002d3e:	2100      	movs	r1, #0
 8002d40:	2083      	movs	r0, #131	@ 0x83
 8002d42:	f7ff fe15 	bl	8002970 <i2c_write_addr8_data8>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f083 0301 	eor.w	r3, r3, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <read_strobe+0x26>
        return false;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e021      	b.n	8002d9a <read_strobe+0x6a>
    }
    do {
        success = i2c_read_addr8_data8(0x83, &strobe);
 8002d56:	1dbb      	adds	r3, r7, #6
 8002d58:	4619      	mov	r1, r3
 8002d5a:	2083      	movs	r0, #131	@ 0x83
 8002d5c:	f7ff fdc8 	bl	80028f0 <i2c_read_addr8_data8>
 8002d60:	4603      	mov	r3, r0
 8002d62:	71fb      	strb	r3, [r7, #7]
    } while (success && (strobe == 0));
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <read_strobe+0x40>
 8002d6a:	79bb      	ldrb	r3, [r7, #6]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f2      	beq.n	8002d56 <read_strobe+0x26>
    if (!success) {
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	f083 0301 	eor.w	r3, r3, #1
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <read_strobe+0x50>
        return false;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e00c      	b.n	8002d9a <read_strobe+0x6a>
    }
    if (!i2c_write_addr8_data8(0x83, 0x01)) {
 8002d80:	2101      	movs	r1, #1
 8002d82:	2083      	movs	r0, #131	@ 0x83
 8002d84:	f7ff fdf4 	bl	8002970 <i2c_write_addr8_data8>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f083 0301 	eor.w	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <read_strobe+0x68>
        return false;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <read_strobe+0x6a>
    }
    return true;
 8002d98:	2301      	movs	r3, #1
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <get_spad_info_from_nvm>:
 * or only non-aperture SPADs. The number of SPADs to enable and which type
 * are also saved during the calibration step at ST factory and can be retrieved
 * from NVM.
 */
static bool get_spad_info_from_nvm(uint8_t *spad_count, uint8_t *spad_type, uint8_t good_spad_map[6])
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
    bool success = false;
 8002dae:	2300      	movs	r3, #0
 8002db0:	75fb      	strb	r3, [r7, #23]
    uint8_t tmp_data8 = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	75bb      	strb	r3, [r7, #22]
    uint32_t tmp_data32 = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]

    /* Setup to read from NVM */
    success  = i2c_write_addr8_data8(0x80, 0x01);
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2080      	movs	r0, #128	@ 0x80
 8002dbe:	f7ff fdd7 	bl	8002970 <i2c_write_addr8_data8>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	20ff      	movs	r0, #255	@ 0xff
 8002dca:	f7ff fdd1 	bl	8002970 <i2c_write_addr8_data8>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bf14      	ite	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	2300      	moveq	r3, #0
 8002dde:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002de0:	2100      	movs	r1, #0
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7ff fdc4 	bl	8002970 <i2c_write_addr8_data8>
 8002de8:	4603      	mov	r3, r0
 8002dea:	461a      	mov	r2, r3
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf14      	ite	ne
 8002df4:	2301      	movne	r3, #1
 8002df6:	2300      	moveq	r3, #0
 8002df8:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x06);
 8002dfa:	2106      	movs	r1, #6
 8002dfc:	20ff      	movs	r0, #255	@ 0xff
 8002dfe:	f7ff fdb7 	bl	8002970 <i2c_write_addr8_data8>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461a      	mov	r2, r3
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bf14      	ite	ne
 8002e0e:	2301      	movne	r3, #1
 8002e10:	2300      	moveq	r3, #0
 8002e12:	75fb      	strb	r3, [r7, #23]
    success &= i2c_read_addr8_data8(0x83, &tmp_data8);
 8002e14:	f107 0316 	add.w	r3, r7, #22
 8002e18:	4619      	mov	r1, r3
 8002e1a:	2083      	movs	r0, #131	@ 0x83
 8002e1c:	f7ff fd68 	bl	80028f0 <i2c_read_addr8_data8>
 8002e20:	4603      	mov	r3, r0
 8002e22:	461a      	mov	r2, r3
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	bf14      	ite	ne
 8002e2c:	2301      	movne	r3, #1
 8002e2e:	2300      	moveq	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x83, tmp_data8 | 0x04);
 8002e32:	7dbb      	ldrb	r3, [r7, #22]
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	2083      	movs	r0, #131	@ 0x83
 8002e3e:	f7ff fd97 	bl	8002970 <i2c_write_addr8_data8>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf14      	ite	ne
 8002e4e:	2301      	movne	r3, #1
 8002e50:	2300      	moveq	r3, #0
 8002e52:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x07);
 8002e54:	2107      	movs	r1, #7
 8002e56:	20ff      	movs	r0, #255	@ 0xff
 8002e58:	f7ff fd8a 	bl	8002970 <i2c_write_addr8_data8>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x81, 0x01);
 8002e6e:	2101      	movs	r1, #1
 8002e70:	2081      	movs	r0, #129	@ 0x81
 8002e72:	f7ff fd7d 	bl	8002970 <i2c_write_addr8_data8>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bf14      	ite	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	2300      	moveq	r3, #0
 8002e86:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 8002e88:	2101      	movs	r1, #1
 8002e8a:	2080      	movs	r0, #128	@ 0x80
 8002e8c:	f7ff fd70 	bl	8002970 <i2c_write_addr8_data8>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461a      	mov	r2, r3
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	f083 0301 	eor.w	r3, r3, #1
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <get_spad_info_from_nvm+0x110>
      return false;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e0c1      	b.n	8003036 <get_spad_info_from_nvm+0x294>
    }

    /* Get the SPAD count and type */
    success &= i2c_write_addr8_data8(0x94, 0x6b);
 8002eb2:	216b      	movs	r1, #107	@ 0x6b
 8002eb4:	2094      	movs	r0, #148	@ 0x94
 8002eb6:	f7ff fd5b 	bl	8002970 <i2c_write_addr8_data8>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf14      	ite	ne
 8002ec6:	2301      	movne	r3, #1
 8002ec8:	2300      	moveq	r3, #0
 8002eca:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	f083 0301 	eor.w	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <get_spad_info_from_nvm+0x13a>
        return false;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e0ac      	b.n	8003036 <get_spad_info_from_nvm+0x294>
    }
    if (!read_strobe()) {
 8002edc:	f7ff ff28 	bl	8002d30 <read_strobe>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f083 0301 	eor.w	r3, r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <get_spad_info_from_nvm+0x14e>
        return false;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e0a2      	b.n	8003036 <get_spad_info_from_nvm+0x294>
    }
    success &= i2c_read_addr8_data32(0x90, &tmp_data32);
 8002ef0:	f107 0310 	add.w	r3, r7, #16
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	2090      	movs	r0, #144	@ 0x90
 8002ef8:	f7ff fd6a 	bl	80029d0 <i2c_read_addr8_data32>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461a      	mov	r2, r3
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf14      	ite	ne
 8002f08:	2301      	movne	r3, #1
 8002f0a:	2300      	moveq	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	f083 0301 	eor.w	r3, r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <get_spad_info_from_nvm+0x17c>
        return false;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e08b      	b.n	8003036 <get_spad_info_from_nvm+0x294>
    }
    *spad_count = (tmp_data32 >> 8) & 0x7f;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	701a      	strb	r2, [r3, #0]
    *spad_type = (tmp_data32 >> 15) & 0x01;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	0bdb      	lsrs	r3, r3, #15
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	701a      	strb	r2, [r3, #0]
    good_spad_map[5] = (uint8_t)((tmp_data32 >> 16) & 0xFF);

#endif

    /* Restore after reading from NVM */
    success &=i2c_write_addr8_data8(0x81, 0x00);
 8002f3e:	2100      	movs	r1, #0
 8002f40:	2081      	movs	r0, #129	@ 0x81
 8002f42:	f7ff fd15 	bl	8002970 <i2c_write_addr8_data8>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x06);
 8002f58:	2106      	movs	r1, #6
 8002f5a:	20ff      	movs	r0, #255	@ 0xff
 8002f5c:	f7ff fd08 	bl	8002970 <i2c_write_addr8_data8>
 8002f60:	4603      	mov	r3, r0
 8002f62:	461a      	mov	r2, r3
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
    success &=i2c_read_addr8_data8(0x83, &tmp_data8);
 8002f72:	f107 0316 	add.w	r3, r7, #22
 8002f76:	4619      	mov	r1, r3
 8002f78:	2083      	movs	r0, #131	@ 0x83
 8002f7a:	f7ff fcb9 	bl	80028f0 <i2c_read_addr8_data8>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf14      	ite	ne
 8002f8a:	2301      	movne	r3, #1
 8002f8c:	2300      	moveq	r3, #0
 8002f8e:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x83, tmp_data8 & 0xfb);
 8002f90:	7dbb      	ldrb	r3, [r7, #22]
 8002f92:	f023 0304 	bic.w	r3, r3, #4
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	4619      	mov	r1, r3
 8002f9a:	2083      	movs	r0, #131	@ 0x83
 8002f9c:	f7ff fce8 	bl	8002970 <i2c_write_addr8_data8>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x01);
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	20ff      	movs	r0, #255	@ 0xff
 8002fb6:	f7ff fcdb 	bl	8002970 <i2c_write_addr8_data8>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bf14      	ite	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	2300      	moveq	r3, #0
 8002fca:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x00, 0x01);
 8002fcc:	2101      	movs	r1, #1
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7ff fcce 	bl	8002970 <i2c_write_addr8_data8>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x00);
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	20ff      	movs	r0, #255	@ 0xff
 8002fea:	f7ff fcc1 	bl	8002970 <i2c_write_addr8_data8>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x80, 0x00);
 8003000:	2100      	movs	r1, #0
 8003002:	2080      	movs	r0, #128	@ 0x80
 8003004:	f7ff fcb4 	bl	8002970 <i2c_write_addr8_data8>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf14      	ite	ne
 8003014:	2301      	movne	r3, #1
 8003016:	2300      	moveq	r3, #0
 8003018:	75fb      	strb	r3, [r7, #23]

    /* When we haven't configured the SPAD map yet, the SPAD map register actually
     * contains the good SPAD map, so we can retrieve it straight from this register
     * instead of reading it from the NVM. */
    if (!i2c_read_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, good_spad_map, 6)) {
 800301a:	2206      	movs	r2, #6
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	20b0      	movs	r0, #176	@ 0xb0
 8003020:	f7ff fd86 	bl	8002b30 <i2c_read_addr8_bytes>
 8003024:	4603      	mov	r3, r0
 8003026:	f083 0301 	eor.w	r3, r3, #1
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <get_spad_info_from_nvm+0x292>
        return false;
 8003030:	2300      	movs	r3, #0
 8003032:	e000      	b.n	8003036 <get_spad_info_from_nvm+0x294>
    }
    return success;
 8003034:	7dfb      	ldrb	r3, [r7, #23]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <set_spads_from_nvm>:
 * Sets the SPADs according to the value saved to NVM by ST during production. Assuming
 * similar conditions (e.g. no cover glass), this should give reasonable readings and we
 * can avoid running ref spad management (tedious code).
 */
static bool set_spads_from_nvm()
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b08c      	sub	sp, #48	@ 0x30
 8003042:	af00      	add	r7, sp, #0
    uint8_t spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 8003044:	f107 0310 	add.w	r3, r7, #16
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	809a      	strh	r2, [r3, #4]
    uint8_t good_spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 800304e:	f107 0308 	add.w	r3, r7, #8
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	809a      	strh	r2, [r3, #4]
    uint8_t spads_enabled_count = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t spads_to_enable_count = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	71fb      	strb	r3, [r7, #7]
    uint8_t spad_type = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	71bb      	strb	r3, [r7, #6]
    volatile uint32_t total_val = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	603b      	str	r3, [r7, #0]

    if (!get_spad_info_from_nvm(&spads_to_enable_count, &spad_type, good_spad_map)) {
 800306a:	f107 0208 	add.w	r2, r7, #8
 800306e:	1db9      	adds	r1, r7, #6
 8003070:	1dfb      	adds	r3, r7, #7
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fe95 	bl	8002da2 <get_spad_info_from_nvm>
 8003078:	4603      	mov	r3, r0
 800307a:	f083 0301 	eor.w	r3, r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <set_spads_from_nvm+0x4a>
        return false;
 8003084:	2300      	movs	r3, #0
 8003086:	e0c7      	b.n	8003218 <set_spads_from_nvm+0x1da>
    }

    for (int i = 0; i < 6; i++) {
 8003088:	2300      	movs	r3, #0
 800308a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800308c:	e00b      	b.n	80030a6 <set_spads_from_nvm+0x68>
        total_val += good_spad_map[i];
 800308e:	f107 0208 	add.w	r2, r7, #8
 8003092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003094:	4413      	add	r3, r2
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	4413      	add	r3, r2
 800309e:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 6; i++) {
 80030a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a2:	3301      	adds	r3, #1
 80030a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	ddf0      	ble.n	800308e <set_spads_from_nvm+0x50>
    }

    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 80030ac:	2101      	movs	r1, #1
 80030ae:	20ff      	movs	r0, #255	@ 0xff
 80030b0:	f7ff fc5e 	bl	8002970 <i2c_write_addr8_data8>
 80030b4:	4603      	mov	r3, r0
 80030b6:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80030b8:	2100      	movs	r1, #0
 80030ba:	204f      	movs	r0, #79	@ 0x4f
 80030bc:	f7ff fc58 	bl	8002970 <i2c_write_addr8_data8>
 80030c0:	4603      	mov	r3, r0
 80030c2:	461a      	mov	r2, r3
 80030c4:	7ffb      	ldrb	r3, [r7, #31]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80030d2:	212c      	movs	r1, #44	@ 0x2c
 80030d4:	204e      	movs	r0, #78	@ 0x4e
 80030d6:	f7ff fc4b 	bl	8002970 <i2c_write_addr8_data8>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	7ffb      	ldrb	r3, [r7, #31]
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80030ec:	2100      	movs	r1, #0
 80030ee:	20ff      	movs	r0, #255	@ 0xff
 80030f0:	f7ff fc3e 	bl	8002970 <i2c_write_addr8_data8>
 80030f4:	4603      	mov	r3, r0
 80030f6:	461a      	mov	r2, r3
 80030f8:	7ffb      	ldrb	r3, [r7, #31]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_GLOBAL_CONFIG_REF_EN_START_SELECT, SPAD_START_SELECT);
 8003106:	21b4      	movs	r1, #180	@ 0xb4
 8003108:	20b6      	movs	r0, #182	@ 0xb6
 800310a:	f7ff fc31 	bl	8002970 <i2c_write_addr8_data8>
 800310e:	4603      	mov	r3, r0
 8003110:	461a      	mov	r2, r3
 8003112:	7ffb      	ldrb	r3, [r7, #31]
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf14      	ite	ne
 800311a:	2301      	movne	r3, #1
 800311c:	2300      	moveq	r3, #0
 800311e:	77fb      	strb	r3, [r7, #31]
    if (!success) {
 8003120:	7ffb      	ldrb	r3, [r7, #31]
 8003122:	f083 0301 	eor.w	r3, r3, #1
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <set_spads_from_nvm+0xf2>
        return false;
 800312c:	2300      	movs	r3, #0
 800312e:	e073      	b.n	8003218 <set_spads_from_nvm+0x1da>
    }

    uint8_t offset = (spad_type == SPAD_TYPE_APERTURE) ? SPAD_APERTURE_START_INDEX : 0;
 8003130:	79bb      	ldrb	r3, [r7, #6]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <set_spads_from_nvm+0xfc>
 8003136:	230c      	movs	r3, #12
 8003138:	e000      	b.n	800313c <set_spads_from_nvm+0xfe>
 800313a:	2300      	movs	r3, #0
 800313c:	77bb      	strb	r3, [r7, #30]

    /* Create a new SPAD array by selecting a subset of the SPADs suggested by the good SPAD map.
     * The subset should only have the number of type enabled as suggested by the reading from
     * the NVM (spads_to_enable_count and spad_type). */
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
 8003142:	e04d      	b.n	80031e0 <set_spads_from_nvm+0x1a2>
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 8003144:	2300      	movs	r3, #0
 8003146:	623b      	str	r3, [r7, #32]
 8003148:	e03d      	b.n	80031c6 <set_spads_from_nvm+0x188>
            int index = (row * SPAD_ROW_SIZE) + column;
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	6a3a      	ldr	r2, [r7, #32]
 8003150:	4413      	add	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
            if (index >= SPAD_MAX_COUNT) {
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b2b      	cmp	r3, #43	@ 0x2b
 8003158:	dd01      	ble.n	800315e <set_spads_from_nvm+0x120>
                return false;
 800315a:	2300      	movs	r3, #0
 800315c:	e05c      	b.n	8003218 <set_spads_from_nvm+0x1da>
            }
            if (spads_enabled_count == spads_to_enable_count) {
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003164:	429a      	cmp	r2, r3
 8003166:	d032      	beq.n	80031ce <set_spads_from_nvm+0x190>
                /* We are done */
                break;
            }
            if (index < offset) {
 8003168:	7fbb      	ldrb	r3, [r7, #30]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	429a      	cmp	r2, r3
 800316e:	db26      	blt.n	80031be <set_spads_from_nvm+0x180>
                continue;
            }
            if ((good_spad_map[row] >> column) & 0x1) {
 8003170:	f107 0208 	add.w	r2, r7, #8
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	4413      	add	r3, r2
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	fa42 f303 	asr.w	r3, r2, r3
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01a      	beq.n	80031c0 <set_spads_from_nvm+0x182>
                spad_map[row] |= (1 << column);
 800318a:	f107 0210 	add.w	r2, r7, #16
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	4413      	add	r3, r2
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b25a      	sxtb	r2, r3
 8003196:	2101      	movs	r1, #1
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	b25b      	sxtb	r3, r3
 80031a0:	4313      	orrs	r3, r2
 80031a2:	b25b      	sxtb	r3, r3
 80031a4:	b2d9      	uxtb	r1, r3
 80031a6:	f107 0210 	add.w	r2, r7, #16
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	4413      	add	r3, r2
 80031ae:	460a      	mov	r2, r1
 80031b0:	701a      	strb	r2, [r3, #0]
                spads_enabled_count++;
 80031b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80031b6:	3301      	adds	r3, #1
 80031b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80031bc:	e000      	b.n	80031c0 <set_spads_from_nvm+0x182>
                continue;
 80031be:	bf00      	nop
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	3301      	adds	r3, #1
 80031c4:	623b      	str	r3, [r7, #32]
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	2b07      	cmp	r3, #7
 80031ca:	ddbe      	ble.n	800314a <set_spads_from_nvm+0x10c>
 80031cc:	e000      	b.n	80031d0 <set_spads_from_nvm+0x192>
                break;
 80031ce:	bf00      	nop
            }
        }
        if (spads_enabled_count == spads_to_enable_count) {
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d006      	beq.n	80031e8 <set_spads_from_nvm+0x1aa>
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	3301      	adds	r3, #1
 80031de:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	ddae      	ble.n	8003144 <set_spads_from_nvm+0x106>
 80031e6:	e000      	b.n	80031ea <set_spads_from_nvm+0x1ac>
            /* To avoid looping unnecessarily when we are already done. */
            break;
 80031e8:	bf00      	nop
        }
    }

    if (spads_enabled_count != spads_to_enable_count) {
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <set_spads_from_nvm+0x1ba>
        return false;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e00f      	b.n	8003218 <set_spads_from_nvm+0x1da>
    }

    /* Write the new SPAD configuration */
    if (!i2c_write_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, spad_map, SPAD_MAP_ROW_COUNT)) {
 80031f8:	f107 0310 	add.w	r3, r7, #16
 80031fc:	2206      	movs	r2, #6
 80031fe:	4619      	mov	r1, r3
 8003200:	20b0      	movs	r0, #176	@ 0xb0
 8003202:	f7ff fc33 	bl	8002a6c <i2c_write_addr8_bytes>
 8003206:	4603      	mov	r3, r0
 8003208:	f083 0301 	eor.w	r3, r3, #1
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <set_spads_from_nvm+0x1d8>
        return false;
 8003212:	2300      	movs	r3, #0
 8003214:	e000      	b.n	8003218 <set_spads_from_nvm+0x1da>
    }

    return true;
 8003216:	2301      	movs	r3, #1
}
 8003218:	4618      	mov	r0, r3
 800321a:	3730      	adds	r7, #48	@ 0x30
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <load_default_tuning_settings>:

/**
 * Load tuning settings (same as default tuning settings provided by ST api code)
 */
static bool load_default_tuning_settings()
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 8003226:	2101      	movs	r1, #1
 8003228:	20ff      	movs	r0, #255	@ 0xff
 800322a:	f7ff fba1 	bl	8002970 <i2c_write_addr8_data8>
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8003232:	2100      	movs	r1, #0
 8003234:	2000      	movs	r0, #0
 8003236:	f7ff fb9b 	bl	8002970 <i2c_write_addr8_data8>
 800323a:	4603      	mov	r3, r0
 800323c:	461a      	mov	r2, r3
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	bf14      	ite	ne
 8003246:	2301      	movne	r3, #1
 8003248:	2300      	moveq	r3, #0
 800324a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 800324c:	2100      	movs	r1, #0
 800324e:	20ff      	movs	r0, #255	@ 0xff
 8003250:	f7ff fb8e 	bl	8002970 <i2c_write_addr8_data8>
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x09, 0x00);
 8003266:	2100      	movs	r1, #0
 8003268:	2009      	movs	r0, #9
 800326a:	f7ff fb81 	bl	8002970 <i2c_write_addr8_data8>
 800326e:	4603      	mov	r3, r0
 8003270:	461a      	mov	r2, r3
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x10, 0x00);
 8003280:	2100      	movs	r1, #0
 8003282:	2010      	movs	r0, #16
 8003284:	f7ff fb74 	bl	8002970 <i2c_write_addr8_data8>
 8003288:	4603      	mov	r3, r0
 800328a:	461a      	mov	r2, r3
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x11, 0x00);
 800329a:	2100      	movs	r1, #0
 800329c:	2011      	movs	r0, #17
 800329e:	f7ff fb67 	bl	8002970 <i2c_write_addr8_data8>
 80032a2:	4603      	mov	r3, r0
 80032a4:	461a      	mov	r2, r3
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bf14      	ite	ne
 80032ae:	2301      	movne	r3, #1
 80032b0:	2300      	moveq	r3, #0
 80032b2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x24, 0x01);
 80032b4:	2101      	movs	r1, #1
 80032b6:	2024      	movs	r0, #36	@ 0x24
 80032b8:	f7ff fb5a 	bl	8002970 <i2c_write_addr8_data8>
 80032bc:	4603      	mov	r3, r0
 80032be:	461a      	mov	r2, r3
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x25, 0xFF);
 80032ce:	21ff      	movs	r1, #255	@ 0xff
 80032d0:	2025      	movs	r0, #37	@ 0x25
 80032d2:	f7ff fb4d 	bl	8002970 <i2c_write_addr8_data8>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x75, 0x00);
 80032e8:	2100      	movs	r1, #0
 80032ea:	2075      	movs	r0, #117	@ 0x75
 80032ec:	f7ff fb40 	bl	8002970 <i2c_write_addr8_data8>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003302:	2101      	movs	r1, #1
 8003304:	20ff      	movs	r0, #255	@ 0xff
 8003306:	f7ff fb33 	bl	8002970 <i2c_write_addr8_data8>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	bf14      	ite	ne
 8003316:	2301      	movne	r3, #1
 8003318:	2300      	moveq	r3, #0
 800331a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4E, 0x2C);
 800331c:	212c      	movs	r1, #44	@ 0x2c
 800331e:	204e      	movs	r0, #78	@ 0x4e
 8003320:	f7ff fb26 	bl	8002970 <i2c_write_addr8_data8>
 8003324:	4603      	mov	r3, r0
 8003326:	461a      	mov	r2, r3
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x00);
 8003336:	2100      	movs	r1, #0
 8003338:	2048      	movs	r0, #72	@ 0x48
 800333a:	f7ff fb19 	bl	8002970 <i2c_write_addr8_data8>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	bf14      	ite	ne
 800334a:	2301      	movne	r3, #1
 800334c:	2300      	moveq	r3, #0
 800334e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x20);
 8003350:	2120      	movs	r1, #32
 8003352:	2030      	movs	r0, #48	@ 0x30
 8003354:	f7ff fb0c 	bl	8002970 <i2c_write_addr8_data8>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 800336a:	2100      	movs	r1, #0
 800336c:	20ff      	movs	r0, #255	@ 0xff
 800336e:	f7ff faff 	bl	8002970 <i2c_write_addr8_data8>
 8003372:	4603      	mov	r3, r0
 8003374:	461a      	mov	r2, r3
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	bf14      	ite	ne
 800337e:	2301      	movne	r3, #1
 8003380:	2300      	moveq	r3, #0
 8003382:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x09);
 8003384:	2109      	movs	r1, #9
 8003386:	2030      	movs	r0, #48	@ 0x30
 8003388:	f7ff faf2 	bl	8002970 <i2c_write_addr8_data8>
 800338c:	4603      	mov	r3, r0
 800338e:	461a      	mov	r2, r3
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x54, 0x00);
 800339e:	2100      	movs	r1, #0
 80033a0:	2054      	movs	r0, #84	@ 0x54
 80033a2:	f7ff fae5 	bl	8002970 <i2c_write_addr8_data8>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bf14      	ite	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	2300      	moveq	r3, #0
 80033b6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 80033b8:	2104      	movs	r1, #4
 80033ba:	2031      	movs	r0, #49	@ 0x31
 80033bc:	f7ff fad8 	bl	8002970 <i2c_write_addr8_data8>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x32, 0x03);
 80033d2:	2103      	movs	r1, #3
 80033d4:	2032      	movs	r0, #50	@ 0x32
 80033d6:	f7ff facb 	bl	8002970 <i2c_write_addr8_data8>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf14      	ite	ne
 80033e6:	2301      	movne	r3, #1
 80033e8:	2300      	moveq	r3, #0
 80033ea:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x83);
 80033ec:	2183      	movs	r1, #131	@ 0x83
 80033ee:	2040      	movs	r0, #64	@ 0x40
 80033f0:	f7ff fabe 	bl	8002970 <i2c_write_addr8_data8>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf14      	ite	ne
 8003400:	2301      	movne	r3, #1
 8003402:	2300      	moveq	r3, #0
 8003404:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x25);
 8003406:	2125      	movs	r1, #37	@ 0x25
 8003408:	2046      	movs	r0, #70	@ 0x46
 800340a:	f7ff fab1 	bl	8002970 <i2c_write_addr8_data8>
 800340e:	4603      	mov	r3, r0
 8003410:	461a      	mov	r2, r3
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	bf14      	ite	ne
 800341a:	2301      	movne	r3, #1
 800341c:	2300      	moveq	r3, #0
 800341e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x60, 0x00);
 8003420:	2100      	movs	r1, #0
 8003422:	2060      	movs	r0, #96	@ 0x60
 8003424:	f7ff faa4 	bl	8002970 <i2c_write_addr8_data8>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf14      	ite	ne
 8003434:	2301      	movne	r3, #1
 8003436:	2300      	moveq	r3, #0
 8003438:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x27, 0x00);
 800343a:	2100      	movs	r1, #0
 800343c:	2027      	movs	r0, #39	@ 0x27
 800343e:	f7ff fa97 	bl	8002970 <i2c_write_addr8_data8>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	bf14      	ite	ne
 800344e:	2301      	movne	r3, #1
 8003450:	2300      	moveq	r3, #0
 8003452:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x50, 0x06);
 8003454:	2106      	movs	r1, #6
 8003456:	2050      	movs	r0, #80	@ 0x50
 8003458:	f7ff fa8a 	bl	8002970 <i2c_write_addr8_data8>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x51, 0x00);
 800346e:	2100      	movs	r1, #0
 8003470:	2051      	movs	r0, #81	@ 0x51
 8003472:	f7ff fa7d 	bl	8002970 <i2c_write_addr8_data8>
 8003476:	4603      	mov	r3, r0
 8003478:	461a      	mov	r2, r3
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	4013      	ands	r3, r2
 800347e:	2b00      	cmp	r3, #0
 8003480:	bf14      	ite	ne
 8003482:	2301      	movne	r3, #1
 8003484:	2300      	moveq	r3, #0
 8003486:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x52, 0x96);
 8003488:	2196      	movs	r1, #150	@ 0x96
 800348a:	2052      	movs	r0, #82	@ 0x52
 800348c:	f7ff fa70 	bl	8002970 <i2c_write_addr8_data8>
 8003490:	4603      	mov	r3, r0
 8003492:	461a      	mov	r2, r3
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf14      	ite	ne
 800349c:	2301      	movne	r3, #1
 800349e:	2300      	moveq	r3, #0
 80034a0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x56, 0x08);
 80034a2:	2108      	movs	r1, #8
 80034a4:	2056      	movs	r0, #86	@ 0x56
 80034a6:	f7ff fa63 	bl	8002970 <i2c_write_addr8_data8>
 80034aa:	4603      	mov	r3, r0
 80034ac:	461a      	mov	r2, r3
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bf14      	ite	ne
 80034b6:	2301      	movne	r3, #1
 80034b8:	2300      	moveq	r3, #0
 80034ba:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x57, 0x30);
 80034bc:	2130      	movs	r1, #48	@ 0x30
 80034be:	2057      	movs	r0, #87	@ 0x57
 80034c0:	f7ff fa56 	bl	8002970 <i2c_write_addr8_data8>
 80034c4:	4603      	mov	r3, r0
 80034c6:	461a      	mov	r2, r3
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x61, 0x00);
 80034d6:	2100      	movs	r1, #0
 80034d8:	2061      	movs	r0, #97	@ 0x61
 80034da:	f7ff fa49 	bl	8002970 <i2c_write_addr8_data8>
 80034de:	4603      	mov	r3, r0
 80034e0:	461a      	mov	r2, r3
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bf14      	ite	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	2300      	moveq	r3, #0
 80034ee:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x62, 0x00);
 80034f0:	2100      	movs	r1, #0
 80034f2:	2062      	movs	r0, #98	@ 0x62
 80034f4:	f7ff fa3c 	bl	8002970 <i2c_write_addr8_data8>
 80034f8:	4603      	mov	r3, r0
 80034fa:	461a      	mov	r2, r3
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x64, 0x00);
 800350a:	2100      	movs	r1, #0
 800350c:	2064      	movs	r0, #100	@ 0x64
 800350e:	f7ff fa2f 	bl	8002970 <i2c_write_addr8_data8>
 8003512:	4603      	mov	r3, r0
 8003514:	461a      	mov	r2, r3
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	4013      	ands	r3, r2
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x65, 0x00);
 8003524:	2100      	movs	r1, #0
 8003526:	2065      	movs	r0, #101	@ 0x65
 8003528:	f7ff fa22 	bl	8002970 <i2c_write_addr8_data8>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	bf14      	ite	ne
 8003538:	2301      	movne	r3, #1
 800353a:	2300      	moveq	r3, #0
 800353c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x66, 0xA0);
 800353e:	21a0      	movs	r1, #160	@ 0xa0
 8003540:	2066      	movs	r0, #102	@ 0x66
 8003542:	f7ff fa15 	bl	8002970 <i2c_write_addr8_data8>
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	bf14      	ite	ne
 8003552:	2301      	movne	r3, #1
 8003554:	2300      	moveq	r3, #0
 8003556:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003558:	2101      	movs	r1, #1
 800355a:	20ff      	movs	r0, #255	@ 0xff
 800355c:	f7ff fa08 	bl	8002970 <i2c_write_addr8_data8>
 8003560:	4603      	mov	r3, r0
 8003562:	461a      	mov	r2, r3
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x22, 0x32);
 8003572:	2132      	movs	r1, #50	@ 0x32
 8003574:	2022      	movs	r0, #34	@ 0x22
 8003576:	f7ff f9fb 	bl	8002970 <i2c_write_addr8_data8>
 800357a:	4603      	mov	r3, r0
 800357c:	461a      	mov	r2, r3
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	4013      	ands	r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	bf14      	ite	ne
 8003586:	2301      	movne	r3, #1
 8003588:	2300      	moveq	r3, #0
 800358a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x14);
 800358c:	2114      	movs	r1, #20
 800358e:	2047      	movs	r0, #71	@ 0x47
 8003590:	f7ff f9ee 	bl	8002970 <i2c_write_addr8_data8>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x49, 0xFF);
 80035a6:	21ff      	movs	r1, #255	@ 0xff
 80035a8:	2049      	movs	r0, #73	@ 0x49
 80035aa:	f7ff f9e1 	bl	8002970 <i2c_write_addr8_data8>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	bf14      	ite	ne
 80035ba:	2301      	movne	r3, #1
 80035bc:	2300      	moveq	r3, #0
 80035be:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4A, 0x00);
 80035c0:	2100      	movs	r1, #0
 80035c2:	204a      	movs	r0, #74	@ 0x4a
 80035c4:	f7ff f9d4 	bl	8002970 <i2c_write_addr8_data8>
 80035c8:	4603      	mov	r3, r0
 80035ca:	461a      	mov	r2, r3
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf14      	ite	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	2300      	moveq	r3, #0
 80035d8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80035da:	2100      	movs	r1, #0
 80035dc:	20ff      	movs	r0, #255	@ 0xff
 80035de:	f7ff f9c7 	bl	8002970 <i2c_write_addr8_data8>
 80035e2:	4603      	mov	r3, r0
 80035e4:	461a      	mov	r2, r3
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7A, 0x0A);
 80035f4:	210a      	movs	r1, #10
 80035f6:	207a      	movs	r0, #122	@ 0x7a
 80035f8:	f7ff f9ba 	bl	8002970 <i2c_write_addr8_data8>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7B, 0x00);
 800360e:	2100      	movs	r1, #0
 8003610:	207b      	movs	r0, #123	@ 0x7b
 8003612:	f7ff f9ad 	bl	8002970 <i2c_write_addr8_data8>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf14      	ite	ne
 8003622:	2301      	movne	r3, #1
 8003624:	2300      	moveq	r3, #0
 8003626:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x78, 0x21);
 8003628:	2121      	movs	r1, #33	@ 0x21
 800362a:	2078      	movs	r0, #120	@ 0x78
 800362c:	f7ff f9a0 	bl	8002970 <i2c_write_addr8_data8>
 8003630:	4603      	mov	r3, r0
 8003632:	461a      	mov	r2, r3
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003642:	2101      	movs	r1, #1
 8003644:	20ff      	movs	r0, #255	@ 0xff
 8003646:	f7ff f993 	bl	8002970 <i2c_write_addr8_data8>
 800364a:	4603      	mov	r3, r0
 800364c:	461a      	mov	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	4013      	ands	r3, r2
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x23, 0x34);
 800365c:	2134      	movs	r1, #52	@ 0x34
 800365e:	2023      	movs	r0, #35	@ 0x23
 8003660:	f7ff f986 	bl	8002970 <i2c_write_addr8_data8>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x42, 0x00);
 8003676:	2100      	movs	r1, #0
 8003678:	2042      	movs	r0, #66	@ 0x42
 800367a:	f7ff f979 	bl	8002970 <i2c_write_addr8_data8>
 800367e:	4603      	mov	r3, r0
 8003680:	461a      	mov	r2, r3
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0xFF);
 8003690:	21ff      	movs	r1, #255	@ 0xff
 8003692:	2044      	movs	r0, #68	@ 0x44
 8003694:	f7ff f96c 	bl	8002970 <i2c_write_addr8_data8>
 8003698:	4603      	mov	r3, r0
 800369a:	461a      	mov	r2, r3
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x26);
 80036aa:	2126      	movs	r1, #38	@ 0x26
 80036ac:	2045      	movs	r0, #69	@ 0x45
 80036ae:	f7ff f95f 	bl	8002970 <i2c_write_addr8_data8>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bf14      	ite	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	2300      	moveq	r3, #0
 80036c2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x05);
 80036c4:	2105      	movs	r1, #5
 80036c6:	2046      	movs	r0, #70	@ 0x46
 80036c8:	f7ff f952 	bl	8002970 <i2c_write_addr8_data8>
 80036cc:	4603      	mov	r3, r0
 80036ce:	461a      	mov	r2, r3
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bf14      	ite	ne
 80036d8:	2301      	movne	r3, #1
 80036da:	2300      	moveq	r3, #0
 80036dc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x40);
 80036de:	2140      	movs	r1, #64	@ 0x40
 80036e0:	2040      	movs	r0, #64	@ 0x40
 80036e2:	f7ff f945 	bl	8002970 <i2c_write_addr8_data8>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	bf14      	ite	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	2300      	moveq	r3, #0
 80036f6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0E, 0x06);
 80036f8:	2106      	movs	r1, #6
 80036fa:	200e      	movs	r0, #14
 80036fc:	f7ff f938 	bl	8002970 <i2c_write_addr8_data8>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x20, 0x1A);
 8003712:	211a      	movs	r1, #26
 8003714:	2020      	movs	r0, #32
 8003716:	f7ff f92b 	bl	8002970 <i2c_write_addr8_data8>
 800371a:	4603      	mov	r3, r0
 800371c:	461a      	mov	r2, r3
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x43, 0x40);
 800372c:	2140      	movs	r1, #64	@ 0x40
 800372e:	2043      	movs	r0, #67	@ 0x43
 8003730:	f7ff f91e 	bl	8002970 <i2c_write_addr8_data8>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003746:	2100      	movs	r1, #0
 8003748:	20ff      	movs	r0, #255	@ 0xff
 800374a:	f7ff f911 	bl	8002970 <i2c_write_addr8_data8>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	bf14      	ite	ne
 800375a:	2301      	movne	r3, #1
 800375c:	2300      	moveq	r3, #0
 800375e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x34, 0x03);
 8003760:	2103      	movs	r1, #3
 8003762:	2034      	movs	r0, #52	@ 0x34
 8003764:	f7ff f904 	bl	8002970 <i2c_write_addr8_data8>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x35, 0x44);
 800377a:	2144      	movs	r1, #68	@ 0x44
 800377c:	2035      	movs	r0, #53	@ 0x35
 800377e:	f7ff f8f7 	bl	8002970 <i2c_write_addr8_data8>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	4013      	ands	r3, r2
 800378a:	2b00      	cmp	r3, #0
 800378c:	bf14      	ite	ne
 800378e:	2301      	movne	r3, #1
 8003790:	2300      	moveq	r3, #0
 8003792:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003794:	2101      	movs	r1, #1
 8003796:	20ff      	movs	r0, #255	@ 0xff
 8003798:	f7ff f8ea 	bl	8002970 <i2c_write_addr8_data8>
 800379c:	4603      	mov	r3, r0
 800379e:	461a      	mov	r2, r3
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf14      	ite	ne
 80037a8:	2301      	movne	r3, #1
 80037aa:	2300      	moveq	r3, #0
 80037ac:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 80037ae:	2104      	movs	r1, #4
 80037b0:	2031      	movs	r0, #49	@ 0x31
 80037b2:	f7ff f8dd 	bl	8002970 <i2c_write_addr8_data8>
 80037b6:	4603      	mov	r3, r0
 80037b8:	461a      	mov	r2, r3
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bf14      	ite	ne
 80037c2:	2301      	movne	r3, #1
 80037c4:	2300      	moveq	r3, #0
 80037c6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4B, 0x09);
 80037c8:	2109      	movs	r1, #9
 80037ca:	204b      	movs	r0, #75	@ 0x4b
 80037cc:	f7ff f8d0 	bl	8002970 <i2c_write_addr8_data8>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461a      	mov	r2, r3
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4C, 0x05);
 80037e2:	2105      	movs	r1, #5
 80037e4:	204c      	movs	r0, #76	@ 0x4c
 80037e6:	f7ff f8c3 	bl	8002970 <i2c_write_addr8_data8>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf14      	ite	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	2300      	moveq	r3, #0
 80037fa:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4D, 0x04);
 80037fc:	2104      	movs	r1, #4
 80037fe:	204d      	movs	r0, #77	@ 0x4d
 8003800:	f7ff f8b6 	bl	8002970 <i2c_write_addr8_data8>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003816:	2100      	movs	r1, #0
 8003818:	20ff      	movs	r0, #255	@ 0xff
 800381a:	f7ff f8a9 	bl	8002970 <i2c_write_addr8_data8>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf14      	ite	ne
 800382a:	2301      	movne	r3, #1
 800382c:	2300      	moveq	r3, #0
 800382e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0x00);
 8003830:	2100      	movs	r1, #0
 8003832:	2044      	movs	r0, #68	@ 0x44
 8003834:	f7ff f89c 	bl	8002970 <i2c_write_addr8_data8>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x20);
 800384a:	2120      	movs	r1, #32
 800384c:	2045      	movs	r0, #69	@ 0x45
 800384e:	f7ff f88f 	bl	8002970 <i2c_write_addr8_data8>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	4013      	ands	r3, r2
 800385a:	2b00      	cmp	r3, #0
 800385c:	bf14      	ite	ne
 800385e:	2301      	movne	r3, #1
 8003860:	2300      	moveq	r3, #0
 8003862:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x08);
 8003864:	2108      	movs	r1, #8
 8003866:	2047      	movs	r0, #71	@ 0x47
 8003868:	f7ff f882 	bl	8002970 <i2c_write_addr8_data8>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf14      	ite	ne
 8003878:	2301      	movne	r3, #1
 800387a:	2300      	moveq	r3, #0
 800387c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x28);
 800387e:	2128      	movs	r1, #40	@ 0x28
 8003880:	2048      	movs	r0, #72	@ 0x48
 8003882:	f7ff f875 	bl	8002970 <i2c_write_addr8_data8>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	bf14      	ite	ne
 8003892:	2301      	movne	r3, #1
 8003894:	2300      	moveq	r3, #0
 8003896:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x67, 0x00);
 8003898:	2100      	movs	r1, #0
 800389a:	2067      	movs	r0, #103	@ 0x67
 800389c:	f7ff f868 	bl	8002970 <i2c_write_addr8_data8>
 80038a0:	4603      	mov	r3, r0
 80038a2:	461a      	mov	r2, r3
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf14      	ite	ne
 80038ac:	2301      	movne	r3, #1
 80038ae:	2300      	moveq	r3, #0
 80038b0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x70, 0x04);
 80038b2:	2104      	movs	r1, #4
 80038b4:	2070      	movs	r0, #112	@ 0x70
 80038b6:	f7ff f85b 	bl	8002970 <i2c_write_addr8_data8>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf14      	ite	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	2300      	moveq	r3, #0
 80038ca:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x71, 0x01);
 80038cc:	2101      	movs	r1, #1
 80038ce:	2071      	movs	r0, #113	@ 0x71
 80038d0:	f7ff f84e 	bl	8002970 <i2c_write_addr8_data8>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x72, 0xFE);
 80038e6:	21fe      	movs	r1, #254	@ 0xfe
 80038e8:	2072      	movs	r0, #114	@ 0x72
 80038ea:	f7ff f841 	bl	8002970 <i2c_write_addr8_data8>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461a      	mov	r2, r3
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf14      	ite	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	2300      	moveq	r3, #0
 80038fe:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x76, 0x00);
 8003900:	2100      	movs	r1, #0
 8003902:	2076      	movs	r0, #118	@ 0x76
 8003904:	f7ff f834 	bl	8002970 <i2c_write_addr8_data8>
 8003908:	4603      	mov	r3, r0
 800390a:	461a      	mov	r2, r3
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x77, 0x00);
 800391a:	2100      	movs	r1, #0
 800391c:	2077      	movs	r0, #119	@ 0x77
 800391e:	f7ff f827 	bl	8002970 <i2c_write_addr8_data8>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003934:	2101      	movs	r1, #1
 8003936:	20ff      	movs	r0, #255	@ 0xff
 8003938:	f7ff f81a 	bl	8002970 <i2c_write_addr8_data8>
 800393c:	4603      	mov	r3, r0
 800393e:	461a      	mov	r2, r3
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0D, 0x01);
 800394e:	2101      	movs	r1, #1
 8003950:	200d      	movs	r0, #13
 8003952:	f7ff f80d 	bl	8002970 <i2c_write_addr8_data8>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	bf14      	ite	ne
 8003962:	2301      	movne	r3, #1
 8003964:	2300      	moveq	r3, #0
 8003966:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003968:	2100      	movs	r1, #0
 800396a:	20ff      	movs	r0, #255	@ 0xff
 800396c:	f7ff f800 	bl	8002970 <i2c_write_addr8_data8>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	bf14      	ite	ne
 800397c:	2301      	movne	r3, #1
 800397e:	2300      	moveq	r3, #0
 8003980:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 8003982:	2101      	movs	r1, #1
 8003984:	2080      	movs	r0, #128	@ 0x80
 8003986:	f7fe fff3 	bl	8002970 <i2c_write_addr8_data8>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	4013      	ands	r3, r2
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf14      	ite	ne
 8003996:	2301      	movne	r3, #1
 8003998:	2300      	moveq	r3, #0
 800399a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x01, 0xF8);
 800399c:	21f8      	movs	r1, #248	@ 0xf8
 800399e:	2001      	movs	r0, #1
 80039a0:	f7fe ffe6 	bl	8002970 <i2c_write_addr8_data8>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf14      	ite	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	2300      	moveq	r3, #0
 80039b4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 80039b6:	2101      	movs	r1, #1
 80039b8:	20ff      	movs	r0, #255	@ 0xff
 80039ba:	f7fe ffd9 	bl	8002970 <i2c_write_addr8_data8>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bf14      	ite	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	2300      	moveq	r3, #0
 80039ce:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x8E, 0x01);
 80039d0:	2101      	movs	r1, #1
 80039d2:	208e      	movs	r0, #142	@ 0x8e
 80039d4:	f7fe ffcc 	bl	8002970 <i2c_write_addr8_data8>
 80039d8:	4603      	mov	r3, r0
 80039da:	461a      	mov	r2, r3
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf14      	ite	ne
 80039e4:	2301      	movne	r3, #1
 80039e6:	2300      	moveq	r3, #0
 80039e8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 80039ea:	2101      	movs	r1, #1
 80039ec:	2000      	movs	r0, #0
 80039ee:	f7fe ffbf 	bl	8002970 <i2c_write_addr8_data8>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bf14      	ite	ne
 80039fe:	2301      	movne	r3, #1
 8003a00:	2300      	moveq	r3, #0
 8003a02:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003a04:	2100      	movs	r1, #0
 8003a06:	20ff      	movs	r0, #255	@ 0xff
 8003a08:	f7fe ffb2 	bl	8002970 <i2c_write_addr8_data8>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	461a      	mov	r2, r3
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 8003a1e:	2100      	movs	r1, #0
 8003a20:	2080      	movs	r0, #128	@ 0x80
 8003a22:	f7fe ffa5 	bl	8002970 <i2c_write_addr8_data8>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	71fb      	strb	r3, [r7, #7]
    return success;
 8003a38:	79fb      	ldrb	r3, [r7, #7]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <configure_interrupt>:

static bool configure_interrupt()
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
    /* Interrupt on new sample ready */
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04)) {
 8003a48:	2104      	movs	r1, #4
 8003a4a:	200a      	movs	r0, #10
 8003a4c:	f7fe ff90 	bl	8002970 <i2c_write_addr8_data8>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f083 0301 	eor.w	r3, r3, #1
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <configure_interrupt+0x1e>
        return false;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e02d      	b.n	8003abc <configure_interrupt+0x7a>
    }

    /* Configure active low since the pin is pulled-up on most breakout boards */
    uint8_t gpio_hv_mux_active_high = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, &gpio_hv_mux_active_high)) {
 8003a64:	1dfb      	adds	r3, r7, #7
 8003a66:	4619      	mov	r1, r3
 8003a68:	2084      	movs	r0, #132	@ 0x84
 8003a6a:	f7fe ff41 	bl	80028f0 <i2c_read_addr8_data8>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f083 0301 	eor.w	r3, r3, #1
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <configure_interrupt+0x3c>
        return false;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e01e      	b.n	8003abc <configure_interrupt+0x7a>
    }
    gpio_hv_mux_active_high &= ~0x10;
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	f023 0310 	bic.w	r3, r3, #16
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	71fb      	strb	r3, [r7, #7]
    if (!i2c_write_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, gpio_hv_mux_active_high)) {
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	2084      	movs	r0, #132	@ 0x84
 8003a8e:	f7fe ff6f 	bl	8002970 <i2c_write_addr8_data8>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f083 0301 	eor.w	r3, r3, #1
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <configure_interrupt+0x60>
        return false;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e00c      	b.n	8003abc <configure_interrupt+0x7a>
    }

    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	200b      	movs	r0, #11
 8003aa6:	f7fe ff63 	bl	8002970 <i2c_write_addr8_data8>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f083 0301 	eor.w	r3, r3, #1
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <configure_interrupt+0x78>
        return false;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e000      	b.n	8003abc <configure_interrupt+0x7a>
    }
    return true;
 8003aba:	2301      	movs	r3, #1
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <set_sequence_steps_enabled>:

/**
 * Enable (or disable) specific steps in the sequence
 */
static bool set_sequence_steps_enabled(uint8_t sequence_step)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
    return i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_step);
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f7fe ff4c 	bl	8002970 <i2c_write_addr8_data8>
 8003ad8:	4603      	mov	r3, r0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <static_init>:

/**
 * Basic device initialization
 */
static bool static_init()
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	af00      	add	r7, sp, #0
    if (!set_spads_from_nvm()) {
 8003ae6:	f7ff faaa 	bl	800303e <set_spads_from_nvm>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f083 0301 	eor.w	r3, r3, #1
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <static_init+0x18>
        return false;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e01f      	b.n	8003b3a <static_init+0x58>
    }

    if (!load_default_tuning_settings()) {
 8003afa:	f7ff fb91 	bl	8003220 <load_default_tuning_settings>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f083 0301 	eor.w	r3, r3, #1
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <static_init+0x2c>
        return false;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e015      	b.n	8003b3a <static_init+0x58>
    }

    if (!configure_interrupt()) {
 8003b0e:	f7ff ff98 	bl	8003a42 <configure_interrupt>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f083 0301 	eor.w	r3, r3, #1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <static_init+0x40>
        return false;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e00b      	b.n	8003b3a <static_init+0x58>
    }

    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 8003b22:	20e8      	movs	r0, #232	@ 0xe8
 8003b24:	f7ff ffce 	bl	8003ac4 <set_sequence_steps_enabled>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f083 0301 	eor.w	r3, r3, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <static_init+0x56>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <static_init+0x58>
    }

    return true;
 8003b38:	2301      	movs	r3, #1
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <perform_single_ref_calibration>:

static bool perform_single_ref_calibration(calibration_type_t calib_type)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	4603      	mov	r3, r0
 8003b46:	71fb      	strb	r3, [r7, #7]
    uint8_t sysrange_start = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	73fb      	strb	r3, [r7, #15]
    uint8_t sequence_config = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	73bb      	strb	r3, [r7, #14]
    switch (calib_type)
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <perform_single_ref_calibration+0x1e>
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d005      	beq.n	8003b66 <perform_single_ref_calibration+0x28>
 8003b5a:	e009      	b.n	8003b70 <perform_single_ref_calibration+0x32>
    {
    case CALIBRATION_TYPE_VHV:
        sequence_config = 0x01;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x40;
 8003b60:	2341      	movs	r3, #65	@ 0x41
 8003b62:	73fb      	strb	r3, [r7, #15]
        break;
 8003b64:	e004      	b.n	8003b70 <perform_single_ref_calibration+0x32>
    case CALIBRATION_TYPE_PHASE:
        sequence_config = 0x02;
 8003b66:	2302      	movs	r3, #2
 8003b68:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x00;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b6e:	bf00      	nop
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_config)) {
 8003b70:	7bbb      	ldrb	r3, [r7, #14]
 8003b72:	4619      	mov	r1, r3
 8003b74:	2001      	movs	r0, #1
 8003b76:	f7fe fefb 	bl	8002970 <i2c_write_addr8_data8>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f083 0301 	eor.w	r3, r3, #1
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <perform_single_ref_calibration+0x4c>
        return false;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e041      	b.n	8003c0e <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, sysrange_start)) {
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	2000      	movs	r0, #0
 8003b90:	f7fe feee 	bl	8002970 <i2c_write_addr8_data8>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f083 0301 	eor.w	r3, r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <perform_single_ref_calibration+0x66>
        return false;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e034      	b.n	8003c0e <perform_single_ref_calibration+0xd0>
    }
    /* Wait for interrupt */
    uint8_t interrupt_status = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	733b      	strb	r3, [r7, #12]
    bool success = false;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	737b      	strb	r3, [r7, #13]
    do {
        success = i2c_read_addr8_data8(REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
 8003bac:	f107 030c 	add.w	r3, r7, #12
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	2013      	movs	r0, #19
 8003bb4:	f7fe fe9c 	bl	80028f0 <i2c_read_addr8_data8>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	737b      	strb	r3, [r7, #13]
    } while (success && ((interrupt_status & 0x07) == 0));
 8003bbc:	7b7b      	ldrb	r3, [r7, #13]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <perform_single_ref_calibration+0x8e>
 8003bc2:	7b3b      	ldrb	r3, [r7, #12]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ef      	beq.n	8003bac <perform_single_ref_calibration+0x6e>
    if (!success) {
 8003bcc:	7b7b      	ldrb	r3, [r7, #13]
 8003bce:	f083 0301 	eor.w	r3, r3, #1
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <perform_single_ref_calibration+0x9e>
        return false;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e018      	b.n	8003c0e <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 8003bdc:	2101      	movs	r1, #1
 8003bde:	200b      	movs	r0, #11
 8003be0:	f7fe fec6 	bl	8002970 <i2c_write_addr8_data8>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f083 0301 	eor.w	r3, r3, #1
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <perform_single_ref_calibration+0xb6>
        return false;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e00c      	b.n	8003c0e <perform_single_ref_calibration+0xd0>
    }

    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, 0x00)) {
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f7fe feba 	bl	8002970 <i2c_write_addr8_data8>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f083 0301 	eor.w	r3, r3, #1
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <perform_single_ref_calibration+0xce>
        return false;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <perform_single_ref_calibration+0xd0>
    }
    return true;
 8003c0c:	2301      	movs	r3, #1
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <perform_ref_calibration>:
/**
 * Temperature calibration needs to be run again if the temperature changes by
 * more than 8 degrees according to the datasheet.
 */
static bool perform_ref_calibration()
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	af00      	add	r7, sp, #0
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_VHV)) {
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	f7ff ff8f 	bl	8003b3e <perform_single_ref_calibration>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f083 0301 	eor.w	r3, r3, #1
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <perform_ref_calibration+0x1a>
        return false;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e016      	b.n	8003c5e <perform_ref_calibration+0x48>
    }
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_PHASE)) {
 8003c30:	2001      	movs	r0, #1
 8003c32:	f7ff ff84 	bl	8003b3e <perform_single_ref_calibration>
 8003c36:	4603      	mov	r3, r0
 8003c38:	f083 0301 	eor.w	r3, r3, #1
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <perform_ref_calibration+0x30>
        return false;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e00b      	b.n	8003c5e <perform_ref_calibration+0x48>
    }
    /* Restore sequence steps enabled */
    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 8003c46:	20e8      	movs	r0, #232	@ 0xe8
 8003c48:	f7ff ff3c 	bl	8003ac4 <set_sequence_steps_enabled>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f083 0301 	eor.w	r3, r3, #1
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <perform_ref_calibration+0x46>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e000      	b.n	8003c5e <perform_ref_calibration+0x48>
    }
    return true;
 8003c5c:	2301      	movs	r3, #1
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <configure_address>:

static bool configure_address(uint8_t addr)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	4603      	mov	r3, r0
 8003c6a:	71fb      	strb	r3, [r7, #7]
    /* 7-bit address */
    return i2c_write_addr8_data8(REG_SLAVE_DEVICE_ADDRESS, addr & 0x7F);
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	4619      	mov	r1, r3
 8003c76:	208a      	movs	r0, #138	@ 0x8a
 8003c78:	f7fe fe7a 	bl	8002970 <i2c_write_addr8_data8>
 8003c7c:	4603      	mov	r3, r0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <set_hardware_standby>:

/**
 * Sets the sensor in hardware standby by flipping the XSHUT pin.
 */
static void set_hardware_standby(vl53l0x_idx_t idx, bool enable)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	460a      	mov	r2, r1
 8003c92:	71fb      	strb	r3, [r7, #7]
 8003c94:	4613      	mov	r3, r2
 8003c96:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOG, vl53l0x_infos[idx].xshut_gpio, enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	4a08      	ldr	r2, [pc, #32]	@ (8003cbc <set_hardware_standby+0x34>)
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	8859      	ldrh	r1, [r3, #2]
 8003ca2:	79bb      	ldrb	r3, [r7, #6]
 8003ca4:	f083 0301 	eor.w	r3, r3, #1
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	4804      	ldr	r0, [pc, #16]	@ (8003cc0 <set_hardware_standby+0x38>)
 8003cae:	f003 f899 	bl	8006de4 <HAL_GPIO_WritePin>
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	08021c18 	.word	0x08021c18
 8003cc0:	58021800 	.word	0x58021800

08003cc4 <configure_gpio>:
 * hardware standby after this function is called.
 *
 * NOTE: The pins are hard-coded to P1.0, P1.1, and P1.2.
 **/
static void configure_gpio()
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
    gpio_init();
    gpio_set_output(GPIO_XSHUT_FIRST, false);
    gpio_set_output(GPIO_XSHUT_SECOND, false);
    gpio_set_output(GPIO_XSHUT_THIRD, false);
    */
    HAL_GPIO_WritePin(GPIOG, xshut1_Pin, GPIO_PIN_RESET);
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2120      	movs	r1, #32
 8003ccc:	4809      	ldr	r0, [pc, #36]	@ (8003cf4 <configure_gpio+0x30>)
 8003cce:	f003 f889 	bl	8006de4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut2_Pin, GPIO_PIN_RESET);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2110      	movs	r1, #16
 8003cd6:	4807      	ldr	r0, [pc, #28]	@ (8003cf4 <configure_gpio+0x30>)
 8003cd8:	f003 f884 	bl	8006de4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut3_Pin, GPIO_PIN_RESET);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2108      	movs	r1, #8
 8003ce0:	4804      	ldr	r0, [pc, #16]	@ (8003cf4 <configure_gpio+0x30>)
 8003ce2:	f003 f87f 	bl	8006de4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut4_Pin, GPIO_PIN_RESET);
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2104      	movs	r1, #4
 8003cea:	4802      	ldr	r0, [pc, #8]	@ (8003cf4 <configure_gpio+0x30>)
 8003cec:	f003 f87a 	bl	8006de4 <HAL_GPIO_WritePin>
}
 8003cf0:	bf00      	nop
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	58021800 	.word	0x58021800

08003cf8 <init_address>:

/* Sets the address of a single VL53L0X sensor.
 * This functions assumes that all non-configured VL53L0X are still
 * in hardware standby. */
static bool init_address(vl53l0x_idx_t idx)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
    set_hardware_standby(idx, false);
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ffbe 	bl	8003c88 <set_hardware_standby>
    i2c_set_slave_address(VL53L0X_DEFAULT_ADDRESS);
 8003d0c:	2029      	movs	r0, #41	@ 0x29
 8003d0e:	f7fe fddf 	bl	80028d0 <i2c_set_slave_address>
    /* The datasheet doesn't say how long we must wait to leave hw standby,
     * but using the same delay as vl6180x seems to work fine. */
    HAL_Delay(1);
 8003d12:	2001      	movs	r0, #1
 8003d14:	f000 f998 	bl	8004048 <HAL_Delay>

    if (!device_is_booted()) {
 8003d18:	f7fe ff4c 	bl	8002bb4 <device_is_booted>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f083 0301 	eor.w	r3, r3, #1
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <init_address+0x3a>
        my_printf("device is not booted\n");
 8003d28:	480d      	ldr	r0, [pc, #52]	@ (8003d60 <init_address+0x68>)
 8003d2a:	f7fe fda1 	bl	8002870 <my_printf>
        return false;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e012      	b.n	8003d58 <init_address+0x60>
    }

    if (!configure_address(vl53l0x_infos[idx].addr)) {
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	4a0b      	ldr	r2, [pc, #44]	@ (8003d64 <init_address+0x6c>)
 8003d36:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff ff91 	bl	8003c62 <configure_address>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f083 0301 	eor.w	r3, r3, #1
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d004      	beq.n	8003d56 <init_address+0x5e>
        my_printf("configure address failed\n");
 8003d4c:	4806      	ldr	r0, [pc, #24]	@ (8003d68 <init_address+0x70>)
 8003d4e:	f7fe fd8f 	bl	8002870 <my_printf>
        return false;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e000      	b.n	8003d58 <init_address+0x60>
    }
    return true;
 8003d56:	2301      	movs	r3, #1
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	08020a68 	.word	0x08020a68
 8003d64:	08021c18 	.word	0x08021c18
 8003d68:	08020a80 	.word	0x08020a80

08003d6c <init_addresses>:
/**
 * Initializes the sensors by putting them in hw standby and then
 * waking them up one-by-one as described in AN4846.
 */
static bool init_addresses()
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
    /* Puts all sensors in hardware standby */
    configure_gpio();
 8003d70:	f7ff ffa8 	bl	8003cc4 <configure_gpio>

    /* Wake each sensor up one by one and set a unique address for each one */
    if (!init_address(VL53L0X_IDX_FIRST)) {
 8003d74:	2000      	movs	r0, #0
 8003d76:	f7ff ffbf 	bl	8003cf8 <init_address>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	f083 0301 	eor.w	r3, r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <init_addresses+0x24>
        my_printf("fail init address first sensor\r\n");
 8003d86:	4814      	ldr	r0, [pc, #80]	@ (8003dd8 <init_addresses+0x6c>)
 8003d88:	f7fe fd72 	bl	8002870 <my_printf>
        return false;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e021      	b.n	8003dd4 <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_SECOND)) {
 8003d90:	2001      	movs	r0, #1
 8003d92:	f7ff ffb1 	bl	8003cf8 <init_address>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f083 0301 	eor.w	r3, r3, #1
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <init_addresses+0x3a>
        return false;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e016      	b.n	8003dd4 <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_THIRD)) {
 8003da6:	2002      	movs	r0, #2
 8003da8:	f7ff ffa6 	bl	8003cf8 <init_address>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f083 0301 	eor.w	r3, r3, #1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <init_addresses+0x50>
        return false;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e00b      	b.n	8003dd4 <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_FOURTH)) {
 8003dbc:	2003      	movs	r0, #3
 8003dbe:	f7ff ff9b 	bl	8003cf8 <init_address>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f083 0301 	eor.w	r3, r3, #1
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <init_addresses+0x66>
        return false;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <init_addresses+0x68>
    }
    return true;
 8003dd2:	2301      	movs	r3, #1
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	08020a9c 	.word	0x08020a9c

08003ddc <init_config>:

static bool init_config(vl53l0x_idx_t idx)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
    i2c_set_slave_address(vl53l0x_infos[idx].addr);
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	4a14      	ldr	r2, [pc, #80]	@ (8003e3c <init_config+0x60>)
 8003dea:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fd6e 	bl	80028d0 <i2c_set_slave_address>
    if (!data_init()) {
 8003df4:	f7fe ff0e 	bl	8002c14 <data_init>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f083 0301 	eor.w	r3, r3, #1
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <init_config+0x2c>
        return false;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e014      	b.n	8003e32 <init_config+0x56>
    }
    if (!static_init()) {
 8003e08:	f7ff fe6b 	bl	8003ae2 <static_init>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f083 0301 	eor.w	r3, r3, #1
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <init_config+0x40>
        return false;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e00a      	b.n	8003e32 <init_config+0x56>
    }
    if (!perform_ref_calibration()) {
 8003e1c:	f7ff fefb 	bl	8003c16 <perform_ref_calibration>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f083 0301 	eor.w	r3, r3, #1
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <init_config+0x54>
        return false;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e000      	b.n	8003e32 <init_config+0x56>
    }
    return true;
 8003e30:	2301      	movs	r3, #1
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	08021c18 	.word	0x08021c18

08003e40 <vl53l0x_init>:

bool vl53l0x_init()
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
    if (!init_addresses()) {
 8003e44:	f7ff ff92 	bl	8003d6c <init_addresses>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f083 0301 	eor.w	r3, r3, #1
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <vl53l0x_init+0x1e>
        my_printf("fail init address\r\n");
 8003e54:	481b      	ldr	r0, [pc, #108]	@ (8003ec4 <vl53l0x_init+0x84>)
 8003e56:	f7fe fd0b 	bl	8002870 <my_printf>
        return false;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e02f      	b.n	8003ebe <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_FIRST)) {
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f7ff ffbc 	bl	8003ddc <init_config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f083 0301 	eor.w	r3, r3, #1
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <vl53l0x_init+0x3a>
        my_printf("fail init first\r\n");
 8003e70:	4815      	ldr	r0, [pc, #84]	@ (8003ec8 <vl53l0x_init+0x88>)
 8003e72:	f7fe fcfd 	bl	8002870 <my_printf>
        return false;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e021      	b.n	8003ebe <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_SECOND)) {
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f7ff ffae 	bl	8003ddc <init_config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f083 0301 	eor.w	r3, r3, #1
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <vl53l0x_init+0x50>
        return false;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e016      	b.n	8003ebe <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_THIRD)) {
 8003e90:	2002      	movs	r0, #2
 8003e92:	f7ff ffa3 	bl	8003ddc <init_config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f083 0301 	eor.w	r3, r3, #1
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <vl53l0x_init+0x66>
        return false;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e00b      	b.n	8003ebe <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_FOURTH)) {
 8003ea6:	2003      	movs	r0, #3
 8003ea8:	f7ff ff98 	bl	8003ddc <init_config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f083 0301 	eor.w	r3, r3, #1
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <vl53l0x_init+0x7c>
        return false;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <vl53l0x_init+0x7e>
    }
    return true;
 8003ebc:	2301      	movs	r3, #1
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	08020ac0 	.word	0x08020ac0
 8003ec8:	08020ad4 	.word	0x08020ad4

08003ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003ecc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003f08 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003ed0:	f7fe fbd4 	bl	800267c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ed4:	f7fe fb42 	bl	800255c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ed8:	480c      	ldr	r0, [pc, #48]	@ (8003f0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003eda:	490d      	ldr	r1, [pc, #52]	@ (8003f10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003edc:	4a0d      	ldr	r2, [pc, #52]	@ (8003f14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ee0:	e002      	b.n	8003ee8 <LoopCopyDataInit>

08003ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ee6:	3304      	adds	r3, #4

08003ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eec:	d3f9      	bcc.n	8003ee2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eee:	4a0a      	ldr	r2, [pc, #40]	@ (8003f18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8003f1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ef4:	e001      	b.n	8003efa <LoopFillZerobss>

08003ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ef8:	3204      	adds	r2, #4

08003efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003efc:	d3fb      	bcc.n	8003ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003efe:	f01b fb63 	bl	801f5c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f02:	f7fc fc43 	bl	800078c <main>
  bx  lr
 8003f06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f08:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003f0c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f10:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8003f14:	08033d68 	.word	0x08033d68
  ldr r2, =_sbss
 8003f18:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8003f1c:	24008de8 	.word	0x24008de8

08003f20 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f20:	e7fe      	b.n	8003f20 <ADC3_IRQHandler>
	...

08003f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f2a:	2003      	movs	r0, #3
 8003f2c:	f000 f980 	bl	8004230 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f30:	f004 fefe 	bl	8008d30 <HAL_RCC_GetSysClockFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b15      	ldr	r3, [pc, #84]	@ (8003f8c <HAL_Init+0x68>)
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	0a1b      	lsrs	r3, r3, #8
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	4913      	ldr	r1, [pc, #76]	@ (8003f90 <HAL_Init+0x6c>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f8c <HAL_Init+0x68>)
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	4a0e      	ldr	r2, [pc, #56]	@ (8003f90 <HAL_Init+0x6c>)
 8003f58:	5cd3      	ldrb	r3, [r2, r3]
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
 8003f64:	4a0b      	ldr	r2, [pc, #44]	@ (8003f94 <HAL_Init+0x70>)
 8003f66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f68:	4a0b      	ldr	r2, [pc, #44]	@ (8003f98 <HAL_Init+0x74>)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f6e:	200f      	movs	r0, #15
 8003f70:	f000 f814 	bl	8003f9c <HAL_InitTick>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e002      	b.n	8003f84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f7e:	f7fd fe35 	bl	8001bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	58024400 	.word	0x58024400
 8003f90:	08021ba4 	.word	0x08021ba4
 8003f94:	24000004 	.word	0x24000004
 8003f98:	24000000 	.word	0x24000000

08003f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003fa4:	4b15      	ldr	r3, [pc, #84]	@ (8003ffc <HAL_InitTick+0x60>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e021      	b.n	8003ff4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003fb0:	4b13      	ldr	r3, [pc, #76]	@ (8004000 <HAL_InitTick+0x64>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b11      	ldr	r3, [pc, #68]	@ (8003ffc <HAL_InitTick+0x60>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f965 	bl	8004296 <HAL_SYSTICK_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e00e      	b.n	8003ff4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b0f      	cmp	r3, #15
 8003fda:	d80a      	bhi.n	8003ff2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	f000 f92f 	bl	8004246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fe8:	4a06      	ldr	r2, [pc, #24]	@ (8004004 <HAL_InitTick+0x68>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e000      	b.n	8003ff4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	24000020 	.word	0x24000020
 8004000:	24000000 	.word	0x24000000
 8004004:	2400001c 	.word	0x2400001c

08004008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800400c:	4b06      	ldr	r3, [pc, #24]	@ (8004028 <HAL_IncTick+0x20>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	4b06      	ldr	r3, [pc, #24]	@ (800402c <HAL_IncTick+0x24>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4413      	add	r3, r2
 8004018:	4a04      	ldr	r2, [pc, #16]	@ (800402c <HAL_IncTick+0x24>)
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	24000020 	.word	0x24000020
 800402c:	2400875c 	.word	0x2400875c

08004030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return uwTick;
 8004034:	4b03      	ldr	r3, [pc, #12]	@ (8004044 <HAL_GetTick+0x14>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2400875c 	.word	0x2400875c

08004048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004050:	f7ff ffee 	bl	8004030 <HAL_GetTick>
 8004054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d005      	beq.n	800406e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004062:	4b0a      	ldr	r3, [pc, #40]	@ (800408c <HAL_Delay+0x44>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800406e:	bf00      	nop
 8004070:	f7ff ffde 	bl	8004030 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	429a      	cmp	r2, r3
 800407e:	d8f7      	bhi.n	8004070 <HAL_Delay+0x28>
  {
  }
}
 8004080:	bf00      	nop
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	24000020 	.word	0x24000020

08004090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040a0:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <__NVIC_SetPriorityGrouping+0x40>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040ac:	4013      	ands	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040b8:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <__NVIC_SetPriorityGrouping+0x44>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040be:	4a04      	ldr	r2, [pc, #16]	@ (80040d0 <__NVIC_SetPriorityGrouping+0x40>)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	60d3      	str	r3, [r2, #12]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000ed00 	.word	0xe000ed00
 80040d4:	05fa0000 	.word	0x05fa0000

080040d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040dc:	4b04      	ldr	r3, [pc, #16]	@ (80040f0 <__NVIC_GetPriorityGrouping+0x18>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	f003 0307 	and.w	r3, r3, #7
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004102:	2b00      	cmp	r3, #0
 8004104:	db0b      	blt.n	800411e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	f003 021f 	and.w	r2, r3, #31
 800410c:	4907      	ldr	r1, [pc, #28]	@ (800412c <__NVIC_EnableIRQ+0x38>)
 800410e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2001      	movs	r0, #1
 8004116:	fa00 f202 	lsl.w	r2, r0, r2
 800411a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	e000e100 	.word	0xe000e100

08004130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800413c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004140:	2b00      	cmp	r3, #0
 8004142:	db0a      	blt.n	800415a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	490c      	ldr	r1, [pc, #48]	@ (800417c <__NVIC_SetPriority+0x4c>)
 800414a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800414e:	0112      	lsls	r2, r2, #4
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	440b      	add	r3, r1
 8004154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004158:	e00a      	b.n	8004170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4908      	ldr	r1, [pc, #32]	@ (8004180 <__NVIC_SetPriority+0x50>)
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	3b04      	subs	r3, #4
 8004168:	0112      	lsls	r2, r2, #4
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	440b      	add	r3, r1
 800416e:	761a      	strb	r2, [r3, #24]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000e100 	.word	0xe000e100
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	@ 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f1c3 0307 	rsb	r3, r3, #7
 800419e:	2b04      	cmp	r3, #4
 80041a0:	bf28      	it	cs
 80041a2:	2304      	movcs	r3, #4
 80041a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3304      	adds	r3, #4
 80041aa:	2b06      	cmp	r3, #6
 80041ac:	d902      	bls.n	80041b4 <NVIC_EncodePriority+0x30>
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3b03      	subs	r3, #3
 80041b2:	e000      	b.n	80041b6 <NVIC_EncodePriority+0x32>
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43da      	mvns	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	401a      	ands	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041cc:	f04f 31ff 	mov.w	r1, #4294967295
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	43d9      	mvns	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041dc:	4313      	orrs	r3, r2
         );
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	@ 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041fc:	d301      	bcc.n	8004202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041fe:	2301      	movs	r3, #1
 8004200:	e00f      	b.n	8004222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004202:	4a0a      	ldr	r2, [pc, #40]	@ (800422c <SysTick_Config+0x40>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3b01      	subs	r3, #1
 8004208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800420a:	210f      	movs	r1, #15
 800420c:	f04f 30ff 	mov.w	r0, #4294967295
 8004210:	f7ff ff8e 	bl	8004130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004214:	4b05      	ldr	r3, [pc, #20]	@ (800422c <SysTick_Config+0x40>)
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800421a:	4b04      	ldr	r3, [pc, #16]	@ (800422c <SysTick_Config+0x40>)
 800421c:	2207      	movs	r2, #7
 800421e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	e000e010 	.word	0xe000e010

08004230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff29 	bl	8004090 <__NVIC_SetPriorityGrouping>
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b086      	sub	sp, #24
 800424a:	af00      	add	r7, sp, #0
 800424c:	4603      	mov	r3, r0
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004254:	f7ff ff40 	bl	80040d8 <__NVIC_GetPriorityGrouping>
 8004258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	6978      	ldr	r0, [r7, #20]
 8004260:	f7ff ff90 	bl	8004184 <NVIC_EncodePriority>
 8004264:	4602      	mov	r2, r0
 8004266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800426a:	4611      	mov	r1, r2
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff ff5f 	bl	8004130 <__NVIC_SetPriority>
}
 8004272:	bf00      	nop
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	4603      	mov	r3, r0
 8004282:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff ff33 	bl	80040f4 <__NVIC_EnableIRQ>
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff ffa4 	bl	80041ec <SysTick_Config>
 80042a4:	4603      	mov	r3, r0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80042b8:	f7ff feba 	bl	8004030 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e312      	b.n	80048ee <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a66      	ldr	r2, [pc, #408]	@ (8004468 <HAL_DMA_Init+0x1b8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d04a      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a65      	ldr	r2, [pc, #404]	@ (800446c <HAL_DMA_Init+0x1bc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d045      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a63      	ldr	r2, [pc, #396]	@ (8004470 <HAL_DMA_Init+0x1c0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d040      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a62      	ldr	r2, [pc, #392]	@ (8004474 <HAL_DMA_Init+0x1c4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d03b      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a60      	ldr	r2, [pc, #384]	@ (8004478 <HAL_DMA_Init+0x1c8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d036      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a5f      	ldr	r2, [pc, #380]	@ (800447c <HAL_DMA_Init+0x1cc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d031      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a5d      	ldr	r2, [pc, #372]	@ (8004480 <HAL_DMA_Init+0x1d0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d02c      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a5c      	ldr	r2, [pc, #368]	@ (8004484 <HAL_DMA_Init+0x1d4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d027      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a5a      	ldr	r2, [pc, #360]	@ (8004488 <HAL_DMA_Init+0x1d8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d022      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a59      	ldr	r2, [pc, #356]	@ (800448c <HAL_DMA_Init+0x1dc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d01d      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a57      	ldr	r2, [pc, #348]	@ (8004490 <HAL_DMA_Init+0x1e0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d018      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a56      	ldr	r2, [pc, #344]	@ (8004494 <HAL_DMA_Init+0x1e4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d013      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a54      	ldr	r2, [pc, #336]	@ (8004498 <HAL_DMA_Init+0x1e8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00e      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a53      	ldr	r2, [pc, #332]	@ (800449c <HAL_DMA_Init+0x1ec>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d009      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a51      	ldr	r2, [pc, #324]	@ (80044a0 <HAL_DMA_Init+0x1f0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d004      	beq.n	8004368 <HAL_DMA_Init+0xb8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a50      	ldr	r2, [pc, #320]	@ (80044a4 <HAL_DMA_Init+0x1f4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d101      	bne.n	800436c <HAL_DMA_Init+0xbc>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_DMA_Init+0xbe>
 800436c:	2300      	movs	r3, #0
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 813c 	beq.w	80045ec <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a37      	ldr	r2, [pc, #220]	@ (8004468 <HAL_DMA_Init+0x1b8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d04a      	beq.n	8004424 <HAL_DMA_Init+0x174>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a36      	ldr	r2, [pc, #216]	@ (800446c <HAL_DMA_Init+0x1bc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d045      	beq.n	8004424 <HAL_DMA_Init+0x174>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a34      	ldr	r2, [pc, #208]	@ (8004470 <HAL_DMA_Init+0x1c0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d040      	beq.n	8004424 <HAL_DMA_Init+0x174>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a33      	ldr	r2, [pc, #204]	@ (8004474 <HAL_DMA_Init+0x1c4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d03b      	beq.n	8004424 <HAL_DMA_Init+0x174>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a31      	ldr	r2, [pc, #196]	@ (8004478 <HAL_DMA_Init+0x1c8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d036      	beq.n	8004424 <HAL_DMA_Init+0x174>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a30      	ldr	r2, [pc, #192]	@ (800447c <HAL_DMA_Init+0x1cc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d031      	beq.n	8004424 <HAL_DMA_Init+0x174>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004480 <HAL_DMA_Init+0x1d0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d02c      	beq.n	8004424 <HAL_DMA_Init+0x174>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004484 <HAL_DMA_Init+0x1d4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d027      	beq.n	8004424 <HAL_DMA_Init+0x174>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004488 <HAL_DMA_Init+0x1d8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d022      	beq.n	8004424 <HAL_DMA_Init+0x174>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a2a      	ldr	r2, [pc, #168]	@ (800448c <HAL_DMA_Init+0x1dc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d01d      	beq.n	8004424 <HAL_DMA_Init+0x174>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a28      	ldr	r2, [pc, #160]	@ (8004490 <HAL_DMA_Init+0x1e0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d018      	beq.n	8004424 <HAL_DMA_Init+0x174>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a27      	ldr	r2, [pc, #156]	@ (8004494 <HAL_DMA_Init+0x1e4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d013      	beq.n	8004424 <HAL_DMA_Init+0x174>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a25      	ldr	r2, [pc, #148]	@ (8004498 <HAL_DMA_Init+0x1e8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00e      	beq.n	8004424 <HAL_DMA_Init+0x174>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a24      	ldr	r2, [pc, #144]	@ (800449c <HAL_DMA_Init+0x1ec>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d009      	beq.n	8004424 <HAL_DMA_Init+0x174>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a22      	ldr	r2, [pc, #136]	@ (80044a0 <HAL_DMA_Init+0x1f0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_DMA_Init+0x174>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a21      	ldr	r2, [pc, #132]	@ (80044a4 <HAL_DMA_Init+0x1f4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d108      	bne.n	8004436 <HAL_DMA_Init+0x186>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e007      	b.n	8004446 <HAL_DMA_Init+0x196>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0201 	bic.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004446:	e02f      	b.n	80044a8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004448:	f7ff fdf2 	bl	8004030 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b05      	cmp	r3, #5
 8004454:	d928      	bls.n	80044a8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2203      	movs	r2, #3
 8004460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e242      	b.n	80048ee <HAL_DMA_Init+0x63e>
 8004468:	40020010 	.word	0x40020010
 800446c:	40020028 	.word	0x40020028
 8004470:	40020040 	.word	0x40020040
 8004474:	40020058 	.word	0x40020058
 8004478:	40020070 	.word	0x40020070
 800447c:	40020088 	.word	0x40020088
 8004480:	400200a0 	.word	0x400200a0
 8004484:	400200b8 	.word	0x400200b8
 8004488:	40020410 	.word	0x40020410
 800448c:	40020428 	.word	0x40020428
 8004490:	40020440 	.word	0x40020440
 8004494:	40020458 	.word	0x40020458
 8004498:	40020470 	.word	0x40020470
 800449c:	40020488 	.word	0x40020488
 80044a0:	400204a0 	.word	0x400204a0
 80044a4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1c8      	bne.n	8004448 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4b83      	ldr	r3, [pc, #524]	@ (80046d0 <HAL_DMA_Init+0x420>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80044ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044da:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d107      	bne.n	800450c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004504:	4313      	orrs	r3, r2
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b28      	cmp	r3, #40	@ 0x28
 8004512:	d903      	bls.n	800451c <HAL_DMA_Init+0x26c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b2e      	cmp	r3, #46	@ 0x2e
 800451a:	d91f      	bls.n	800455c <HAL_DMA_Init+0x2ac>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b3e      	cmp	r3, #62	@ 0x3e
 8004522:	d903      	bls.n	800452c <HAL_DMA_Init+0x27c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b42      	cmp	r3, #66	@ 0x42
 800452a:	d917      	bls.n	800455c <HAL_DMA_Init+0x2ac>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b46      	cmp	r3, #70	@ 0x46
 8004532:	d903      	bls.n	800453c <HAL_DMA_Init+0x28c>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b48      	cmp	r3, #72	@ 0x48
 800453a:	d90f      	bls.n	800455c <HAL_DMA_Init+0x2ac>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b4e      	cmp	r3, #78	@ 0x4e
 8004542:	d903      	bls.n	800454c <HAL_DMA_Init+0x29c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b52      	cmp	r3, #82	@ 0x52
 800454a:	d907      	bls.n	800455c <HAL_DMA_Init+0x2ac>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b73      	cmp	r3, #115	@ 0x73
 8004552:	d905      	bls.n	8004560 <HAL_DMA_Init+0x2b0>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b77      	cmp	r3, #119	@ 0x77
 800455a:	d801      	bhi.n	8004560 <HAL_DMA_Init+0x2b0>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_DMA_Init+0x2b2>
 8004560:	2300      	movs	r3, #0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800456c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f023 0307 	bic.w	r3, r3, #7
 8004584:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	2b04      	cmp	r3, #4
 8004596:	d117      	bne.n	80045c8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00e      	beq.n	80045c8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f002 f8e8 	bl	8006780 <DMA_CheckFifoParam>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2240      	movs	r2, #64	@ 0x40
 80045ba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e192      	b.n	80048ee <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f002 f823 	bl	800661c <DMA_CalcBaseAndBitshift>
 80045d6:	4603      	mov	r3, r0
 80045d8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	223f      	movs	r2, #63	@ 0x3f
 80045e4:	409a      	lsls	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	609a      	str	r2, [r3, #8]
 80045ea:	e0c8      	b.n	800477e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a38      	ldr	r2, [pc, #224]	@ (80046d4 <HAL_DMA_Init+0x424>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d022      	beq.n	800463c <HAL_DMA_Init+0x38c>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a37      	ldr	r2, [pc, #220]	@ (80046d8 <HAL_DMA_Init+0x428>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d01d      	beq.n	800463c <HAL_DMA_Init+0x38c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a35      	ldr	r2, [pc, #212]	@ (80046dc <HAL_DMA_Init+0x42c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d018      	beq.n	800463c <HAL_DMA_Init+0x38c>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a34      	ldr	r2, [pc, #208]	@ (80046e0 <HAL_DMA_Init+0x430>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d013      	beq.n	800463c <HAL_DMA_Init+0x38c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a32      	ldr	r2, [pc, #200]	@ (80046e4 <HAL_DMA_Init+0x434>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00e      	beq.n	800463c <HAL_DMA_Init+0x38c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a31      	ldr	r2, [pc, #196]	@ (80046e8 <HAL_DMA_Init+0x438>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d009      	beq.n	800463c <HAL_DMA_Init+0x38c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2f      	ldr	r2, [pc, #188]	@ (80046ec <HAL_DMA_Init+0x43c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d004      	beq.n	800463c <HAL_DMA_Init+0x38c>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2e      	ldr	r2, [pc, #184]	@ (80046f0 <HAL_DMA_Init+0x440>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d101      	bne.n	8004640 <HAL_DMA_Init+0x390>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <HAL_DMA_Init+0x392>
 8004640:	2300      	movs	r3, #0
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 8092 	beq.w	800476c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a21      	ldr	r2, [pc, #132]	@ (80046d4 <HAL_DMA_Init+0x424>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d021      	beq.n	8004696 <HAL_DMA_Init+0x3e6>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a20      	ldr	r2, [pc, #128]	@ (80046d8 <HAL_DMA_Init+0x428>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d01c      	beq.n	8004696 <HAL_DMA_Init+0x3e6>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1e      	ldr	r2, [pc, #120]	@ (80046dc <HAL_DMA_Init+0x42c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d017      	beq.n	8004696 <HAL_DMA_Init+0x3e6>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1d      	ldr	r2, [pc, #116]	@ (80046e0 <HAL_DMA_Init+0x430>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d012      	beq.n	8004696 <HAL_DMA_Init+0x3e6>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1b      	ldr	r2, [pc, #108]	@ (80046e4 <HAL_DMA_Init+0x434>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00d      	beq.n	8004696 <HAL_DMA_Init+0x3e6>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1a      	ldr	r2, [pc, #104]	@ (80046e8 <HAL_DMA_Init+0x438>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d008      	beq.n	8004696 <HAL_DMA_Init+0x3e6>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a18      	ldr	r2, [pc, #96]	@ (80046ec <HAL_DMA_Init+0x43c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d003      	beq.n	8004696 <HAL_DMA_Init+0x3e6>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a17      	ldr	r2, [pc, #92]	@ (80046f0 <HAL_DMA_Init+0x440>)
 8004694:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2202      	movs	r2, #2
 800469a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4b10      	ldr	r3, [pc, #64]	@ (80046f4 <HAL_DMA_Init+0x444>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b40      	cmp	r3, #64	@ 0x40
 80046bc:	d01c      	beq.n	80046f8 <HAL_DMA_Init+0x448>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b80      	cmp	r3, #128	@ 0x80
 80046c4:	d102      	bne.n	80046cc <HAL_DMA_Init+0x41c>
 80046c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80046ca:	e016      	b.n	80046fa <HAL_DMA_Init+0x44a>
 80046cc:	2300      	movs	r3, #0
 80046ce:	e014      	b.n	80046fa <HAL_DMA_Init+0x44a>
 80046d0:	fe10803f 	.word	0xfe10803f
 80046d4:	58025408 	.word	0x58025408
 80046d8:	5802541c 	.word	0x5802541c
 80046dc:	58025430 	.word	0x58025430
 80046e0:	58025444 	.word	0x58025444
 80046e4:	58025458 	.word	0x58025458
 80046e8:	5802546c 	.word	0x5802546c
 80046ec:	58025480 	.word	0x58025480
 80046f0:	58025494 	.word	0x58025494
 80046f4:	fffe000f 	.word	0xfffe000f
 80046f8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68d2      	ldr	r2, [r2, #12]
 80046fe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004700:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004708:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004710:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004718:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004720:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004728:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	4b6e      	ldr	r3, [pc, #440]	@ (80048f8 <HAL_DMA_Init+0x648>)
 8004740:	4413      	add	r3, r2
 8004742:	4a6e      	ldr	r2, [pc, #440]	@ (80048fc <HAL_DMA_Init+0x64c>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	009a      	lsls	r2, r3, #2
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f001 ff63 	bl	800661c <DMA_CalcBaseAndBitshift>
 8004756:	4603      	mov	r3, r0
 8004758:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	2201      	movs	r2, #1
 8004764:	409a      	lsls	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	e008      	b.n	800477e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2240      	movs	r2, #64	@ 0x40
 8004770:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2203      	movs	r2, #3
 8004776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e0b7      	b.n	80048ee <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a5f      	ldr	r2, [pc, #380]	@ (8004900 <HAL_DMA_Init+0x650>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d072      	beq.n	800486e <HAL_DMA_Init+0x5be>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a5d      	ldr	r2, [pc, #372]	@ (8004904 <HAL_DMA_Init+0x654>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d06d      	beq.n	800486e <HAL_DMA_Init+0x5be>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a5c      	ldr	r2, [pc, #368]	@ (8004908 <HAL_DMA_Init+0x658>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d068      	beq.n	800486e <HAL_DMA_Init+0x5be>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a5a      	ldr	r2, [pc, #360]	@ (800490c <HAL_DMA_Init+0x65c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d063      	beq.n	800486e <HAL_DMA_Init+0x5be>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a59      	ldr	r2, [pc, #356]	@ (8004910 <HAL_DMA_Init+0x660>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d05e      	beq.n	800486e <HAL_DMA_Init+0x5be>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a57      	ldr	r2, [pc, #348]	@ (8004914 <HAL_DMA_Init+0x664>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d059      	beq.n	800486e <HAL_DMA_Init+0x5be>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a56      	ldr	r2, [pc, #344]	@ (8004918 <HAL_DMA_Init+0x668>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d054      	beq.n	800486e <HAL_DMA_Init+0x5be>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a54      	ldr	r2, [pc, #336]	@ (800491c <HAL_DMA_Init+0x66c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d04f      	beq.n	800486e <HAL_DMA_Init+0x5be>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a53      	ldr	r2, [pc, #332]	@ (8004920 <HAL_DMA_Init+0x670>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d04a      	beq.n	800486e <HAL_DMA_Init+0x5be>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a51      	ldr	r2, [pc, #324]	@ (8004924 <HAL_DMA_Init+0x674>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d045      	beq.n	800486e <HAL_DMA_Init+0x5be>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a50      	ldr	r2, [pc, #320]	@ (8004928 <HAL_DMA_Init+0x678>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d040      	beq.n	800486e <HAL_DMA_Init+0x5be>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a4e      	ldr	r2, [pc, #312]	@ (800492c <HAL_DMA_Init+0x67c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d03b      	beq.n	800486e <HAL_DMA_Init+0x5be>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004930 <HAL_DMA_Init+0x680>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d036      	beq.n	800486e <HAL_DMA_Init+0x5be>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a4b      	ldr	r2, [pc, #300]	@ (8004934 <HAL_DMA_Init+0x684>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d031      	beq.n	800486e <HAL_DMA_Init+0x5be>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a4a      	ldr	r2, [pc, #296]	@ (8004938 <HAL_DMA_Init+0x688>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d02c      	beq.n	800486e <HAL_DMA_Init+0x5be>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a48      	ldr	r2, [pc, #288]	@ (800493c <HAL_DMA_Init+0x68c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d027      	beq.n	800486e <HAL_DMA_Init+0x5be>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a47      	ldr	r2, [pc, #284]	@ (8004940 <HAL_DMA_Init+0x690>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d022      	beq.n	800486e <HAL_DMA_Init+0x5be>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a45      	ldr	r2, [pc, #276]	@ (8004944 <HAL_DMA_Init+0x694>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01d      	beq.n	800486e <HAL_DMA_Init+0x5be>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a44      	ldr	r2, [pc, #272]	@ (8004948 <HAL_DMA_Init+0x698>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d018      	beq.n	800486e <HAL_DMA_Init+0x5be>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a42      	ldr	r2, [pc, #264]	@ (800494c <HAL_DMA_Init+0x69c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <HAL_DMA_Init+0x5be>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a41      	ldr	r2, [pc, #260]	@ (8004950 <HAL_DMA_Init+0x6a0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_DMA_Init+0x5be>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a3f      	ldr	r2, [pc, #252]	@ (8004954 <HAL_DMA_Init+0x6a4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_DMA_Init+0x5be>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a3e      	ldr	r2, [pc, #248]	@ (8004958 <HAL_DMA_Init+0x6a8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_DMA_Init+0x5be>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a3c      	ldr	r2, [pc, #240]	@ (800495c <HAL_DMA_Init+0x6ac>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d101      	bne.n	8004872 <HAL_DMA_Init+0x5c2>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <HAL_DMA_Init+0x5c4>
 8004872:	2300      	movs	r3, #0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d032      	beq.n	80048de <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f001 fffd 	bl	8006878 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b80      	cmp	r3, #128	@ 0x80
 8004884:	d102      	bne.n	800488c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80048a0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <HAL_DMA_Init+0x61c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d80c      	bhi.n	80048cc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f002 f87a 	bl	80069ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048c8:	605a      	str	r2, [r3, #4]
 80048ca:	e008      	b.n	80048de <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	a7fdabf8 	.word	0xa7fdabf8
 80048fc:	cccccccd 	.word	0xcccccccd
 8004900:	40020010 	.word	0x40020010
 8004904:	40020028 	.word	0x40020028
 8004908:	40020040 	.word	0x40020040
 800490c:	40020058 	.word	0x40020058
 8004910:	40020070 	.word	0x40020070
 8004914:	40020088 	.word	0x40020088
 8004918:	400200a0 	.word	0x400200a0
 800491c:	400200b8 	.word	0x400200b8
 8004920:	40020410 	.word	0x40020410
 8004924:	40020428 	.word	0x40020428
 8004928:	40020440 	.word	0x40020440
 800492c:	40020458 	.word	0x40020458
 8004930:	40020470 	.word	0x40020470
 8004934:	40020488 	.word	0x40020488
 8004938:	400204a0 	.word	0x400204a0
 800493c:	400204b8 	.word	0x400204b8
 8004940:	58025408 	.word	0x58025408
 8004944:	5802541c 	.word	0x5802541c
 8004948:	58025430 	.word	0x58025430
 800494c:	58025444 	.word	0x58025444
 8004950:	58025458 	.word	0x58025458
 8004954:	5802546c 	.word	0x5802546c
 8004958:	58025480 	.word	0x58025480
 800495c:	58025494 	.word	0x58025494

08004960 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e226      	b.n	8004dca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_DMA_Start_IT+0x2a>
 8004986:	2302      	movs	r3, #2
 8004988:	e21f      	b.n	8004dca <HAL_DMA_Start_IT+0x46a>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b01      	cmp	r3, #1
 800499c:	f040 820a 	bne.w	8004db4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a68      	ldr	r2, [pc, #416]	@ (8004b54 <HAL_DMA_Start_IT+0x1f4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d04a      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a66      	ldr	r2, [pc, #408]	@ (8004b58 <HAL_DMA_Start_IT+0x1f8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d045      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a65      	ldr	r2, [pc, #404]	@ (8004b5c <HAL_DMA_Start_IT+0x1fc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d040      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a63      	ldr	r2, [pc, #396]	@ (8004b60 <HAL_DMA_Start_IT+0x200>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d03b      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a62      	ldr	r2, [pc, #392]	@ (8004b64 <HAL_DMA_Start_IT+0x204>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d036      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a60      	ldr	r2, [pc, #384]	@ (8004b68 <HAL_DMA_Start_IT+0x208>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d031      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a5f      	ldr	r2, [pc, #380]	@ (8004b6c <HAL_DMA_Start_IT+0x20c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d02c      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a5d      	ldr	r2, [pc, #372]	@ (8004b70 <HAL_DMA_Start_IT+0x210>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d027      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a5c      	ldr	r2, [pc, #368]	@ (8004b74 <HAL_DMA_Start_IT+0x214>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d022      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8004b78 <HAL_DMA_Start_IT+0x218>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01d      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a59      	ldr	r2, [pc, #356]	@ (8004b7c <HAL_DMA_Start_IT+0x21c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d018      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a57      	ldr	r2, [pc, #348]	@ (8004b80 <HAL_DMA_Start_IT+0x220>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a56      	ldr	r2, [pc, #344]	@ (8004b84 <HAL_DMA_Start_IT+0x224>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a54      	ldr	r2, [pc, #336]	@ (8004b88 <HAL_DMA_Start_IT+0x228>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a53      	ldr	r2, [pc, #332]	@ (8004b8c <HAL_DMA_Start_IT+0x22c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_DMA_Start_IT+0xee>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a51      	ldr	r2, [pc, #324]	@ (8004b90 <HAL_DMA_Start_IT+0x230>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d108      	bne.n	8004a60 <HAL_DMA_Start_IT+0x100>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0201 	bic.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e007      	b.n	8004a70 <HAL_DMA_Start_IT+0x110>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f001 fc24 	bl	80062c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a34      	ldr	r2, [pc, #208]	@ (8004b54 <HAL_DMA_Start_IT+0x1f4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d04a      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a33      	ldr	r2, [pc, #204]	@ (8004b58 <HAL_DMA_Start_IT+0x1f8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d045      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a31      	ldr	r2, [pc, #196]	@ (8004b5c <HAL_DMA_Start_IT+0x1fc>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d040      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a30      	ldr	r2, [pc, #192]	@ (8004b60 <HAL_DMA_Start_IT+0x200>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d03b      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8004b64 <HAL_DMA_Start_IT+0x204>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d036      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8004b68 <HAL_DMA_Start_IT+0x208>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d031      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a2b      	ldr	r2, [pc, #172]	@ (8004b6c <HAL_DMA_Start_IT+0x20c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d02c      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8004b70 <HAL_DMA_Start_IT+0x210>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d027      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a28      	ldr	r2, [pc, #160]	@ (8004b74 <HAL_DMA_Start_IT+0x214>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d022      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a27      	ldr	r2, [pc, #156]	@ (8004b78 <HAL_DMA_Start_IT+0x218>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d01d      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a25      	ldr	r2, [pc, #148]	@ (8004b7c <HAL_DMA_Start_IT+0x21c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d018      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a24      	ldr	r2, [pc, #144]	@ (8004b80 <HAL_DMA_Start_IT+0x220>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d013      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a22      	ldr	r2, [pc, #136]	@ (8004b84 <HAL_DMA_Start_IT+0x224>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00e      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a21      	ldr	r2, [pc, #132]	@ (8004b88 <HAL_DMA_Start_IT+0x228>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d009      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004b8c <HAL_DMA_Start_IT+0x22c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d004      	beq.n	8004b1c <HAL_DMA_Start_IT+0x1bc>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1e      	ldr	r2, [pc, #120]	@ (8004b90 <HAL_DMA_Start_IT+0x230>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <HAL_DMA_Start_IT+0x1c0>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_DMA_Start_IT+0x1c2>
 8004b20:	2300      	movs	r3, #0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d036      	beq.n	8004b94 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f023 021e 	bic.w	r2, r3, #30
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0216 	orr.w	r2, r2, #22
 8004b38:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d03e      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0208 	orr.w	r2, r2, #8
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e035      	b.n	8004bc0 <HAL_DMA_Start_IT+0x260>
 8004b54:	40020010 	.word	0x40020010
 8004b58:	40020028 	.word	0x40020028
 8004b5c:	40020040 	.word	0x40020040
 8004b60:	40020058 	.word	0x40020058
 8004b64:	40020070 	.word	0x40020070
 8004b68:	40020088 	.word	0x40020088
 8004b6c:	400200a0 	.word	0x400200a0
 8004b70:	400200b8 	.word	0x400200b8
 8004b74:	40020410 	.word	0x40020410
 8004b78:	40020428 	.word	0x40020428
 8004b7c:	40020440 	.word	0x40020440
 8004b80:	40020458 	.word	0x40020458
 8004b84:	40020470 	.word	0x40020470
 8004b88:	40020488 	.word	0x40020488
 8004b8c:	400204a0 	.word	0x400204a0
 8004b90:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 020e 	bic.w	r2, r3, #14
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 020a 	orr.w	r2, r2, #10
 8004ba6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0204 	orr.w	r2, r2, #4
 8004bbe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a83      	ldr	r2, [pc, #524]	@ (8004dd4 <HAL_DMA_Start_IT+0x474>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d072      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a82      	ldr	r2, [pc, #520]	@ (8004dd8 <HAL_DMA_Start_IT+0x478>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d06d      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a80      	ldr	r2, [pc, #512]	@ (8004ddc <HAL_DMA_Start_IT+0x47c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d068      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a7f      	ldr	r2, [pc, #508]	@ (8004de0 <HAL_DMA_Start_IT+0x480>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d063      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a7d      	ldr	r2, [pc, #500]	@ (8004de4 <HAL_DMA_Start_IT+0x484>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d05e      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a7c      	ldr	r2, [pc, #496]	@ (8004de8 <HAL_DMA_Start_IT+0x488>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d059      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a7a      	ldr	r2, [pc, #488]	@ (8004dec <HAL_DMA_Start_IT+0x48c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d054      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a79      	ldr	r2, [pc, #484]	@ (8004df0 <HAL_DMA_Start_IT+0x490>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d04f      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a77      	ldr	r2, [pc, #476]	@ (8004df4 <HAL_DMA_Start_IT+0x494>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d04a      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a76      	ldr	r2, [pc, #472]	@ (8004df8 <HAL_DMA_Start_IT+0x498>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d045      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a74      	ldr	r2, [pc, #464]	@ (8004dfc <HAL_DMA_Start_IT+0x49c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d040      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a73      	ldr	r2, [pc, #460]	@ (8004e00 <HAL_DMA_Start_IT+0x4a0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d03b      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a71      	ldr	r2, [pc, #452]	@ (8004e04 <HAL_DMA_Start_IT+0x4a4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d036      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a70      	ldr	r2, [pc, #448]	@ (8004e08 <HAL_DMA_Start_IT+0x4a8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d031      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a6e      	ldr	r2, [pc, #440]	@ (8004e0c <HAL_DMA_Start_IT+0x4ac>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d02c      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a6d      	ldr	r2, [pc, #436]	@ (8004e10 <HAL_DMA_Start_IT+0x4b0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d027      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a6b      	ldr	r2, [pc, #428]	@ (8004e14 <HAL_DMA_Start_IT+0x4b4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d022      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a6a      	ldr	r2, [pc, #424]	@ (8004e18 <HAL_DMA_Start_IT+0x4b8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d01d      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a68      	ldr	r2, [pc, #416]	@ (8004e1c <HAL_DMA_Start_IT+0x4bc>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d018      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a67      	ldr	r2, [pc, #412]	@ (8004e20 <HAL_DMA_Start_IT+0x4c0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a65      	ldr	r2, [pc, #404]	@ (8004e24 <HAL_DMA_Start_IT+0x4c4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a64      	ldr	r2, [pc, #400]	@ (8004e28 <HAL_DMA_Start_IT+0x4c8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a62      	ldr	r2, [pc, #392]	@ (8004e2c <HAL_DMA_Start_IT+0x4cc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x350>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a61      	ldr	r2, [pc, #388]	@ (8004e30 <HAL_DMA_Start_IT+0x4d0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <HAL_DMA_Start_IT+0x354>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_DMA_Start_IT+0x356>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01a      	beq.n	8004cf0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cd6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a37      	ldr	r2, [pc, #220]	@ (8004dd4 <HAL_DMA_Start_IT+0x474>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d04a      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a36      	ldr	r2, [pc, #216]	@ (8004dd8 <HAL_DMA_Start_IT+0x478>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d045      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a34      	ldr	r2, [pc, #208]	@ (8004ddc <HAL_DMA_Start_IT+0x47c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d040      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a33      	ldr	r2, [pc, #204]	@ (8004de0 <HAL_DMA_Start_IT+0x480>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d03b      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a31      	ldr	r2, [pc, #196]	@ (8004de4 <HAL_DMA_Start_IT+0x484>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d036      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a30      	ldr	r2, [pc, #192]	@ (8004de8 <HAL_DMA_Start_IT+0x488>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d031      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a2e      	ldr	r2, [pc, #184]	@ (8004dec <HAL_DMA_Start_IT+0x48c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d02c      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8004df0 <HAL_DMA_Start_IT+0x490>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d027      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a2b      	ldr	r2, [pc, #172]	@ (8004df4 <HAL_DMA_Start_IT+0x494>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d022      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8004df8 <HAL_DMA_Start_IT+0x498>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d01d      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a28      	ldr	r2, [pc, #160]	@ (8004dfc <HAL_DMA_Start_IT+0x49c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d018      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a27      	ldr	r2, [pc, #156]	@ (8004e00 <HAL_DMA_Start_IT+0x4a0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a25      	ldr	r2, [pc, #148]	@ (8004e04 <HAL_DMA_Start_IT+0x4a4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00e      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a24      	ldr	r2, [pc, #144]	@ (8004e08 <HAL_DMA_Start_IT+0x4a8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d009      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a22      	ldr	r2, [pc, #136]	@ (8004e0c <HAL_DMA_Start_IT+0x4ac>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_DMA_Start_IT+0x430>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a21      	ldr	r2, [pc, #132]	@ (8004e10 <HAL_DMA_Start_IT+0x4b0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d108      	bne.n	8004da2 <HAL_DMA_Start_IT+0x442>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0201 	orr.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e012      	b.n	8004dc8 <HAL_DMA_Start_IT+0x468>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0201 	orr.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	e009      	b.n	8004dc8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40020010 	.word	0x40020010
 8004dd8:	40020028 	.word	0x40020028
 8004ddc:	40020040 	.word	0x40020040
 8004de0:	40020058 	.word	0x40020058
 8004de4:	40020070 	.word	0x40020070
 8004de8:	40020088 	.word	0x40020088
 8004dec:	400200a0 	.word	0x400200a0
 8004df0:	400200b8 	.word	0x400200b8
 8004df4:	40020410 	.word	0x40020410
 8004df8:	40020428 	.word	0x40020428
 8004dfc:	40020440 	.word	0x40020440
 8004e00:	40020458 	.word	0x40020458
 8004e04:	40020470 	.word	0x40020470
 8004e08:	40020488 	.word	0x40020488
 8004e0c:	400204a0 	.word	0x400204a0
 8004e10:	400204b8 	.word	0x400204b8
 8004e14:	58025408 	.word	0x58025408
 8004e18:	5802541c 	.word	0x5802541c
 8004e1c:	58025430 	.word	0x58025430
 8004e20:	58025444 	.word	0x58025444
 8004e24:	58025458 	.word	0x58025458
 8004e28:	5802546c 	.word	0x5802546c
 8004e2c:	58025480 	.word	0x58025480
 8004e30:	58025494 	.word	0x58025494

08004e34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004e3c:	f7ff f8f8 	bl	8004030 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e2dc      	b.n	8005406 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d008      	beq.n	8004e6a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2280      	movs	r2, #128	@ 0x80
 8004e5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e2cd      	b.n	8005406 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a76      	ldr	r2, [pc, #472]	@ (8005048 <HAL_DMA_Abort+0x214>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d04a      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a74      	ldr	r2, [pc, #464]	@ (800504c <HAL_DMA_Abort+0x218>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d045      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a73      	ldr	r2, [pc, #460]	@ (8005050 <HAL_DMA_Abort+0x21c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d040      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a71      	ldr	r2, [pc, #452]	@ (8005054 <HAL_DMA_Abort+0x220>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d03b      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a70      	ldr	r2, [pc, #448]	@ (8005058 <HAL_DMA_Abort+0x224>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d036      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a6e      	ldr	r2, [pc, #440]	@ (800505c <HAL_DMA_Abort+0x228>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d031      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a6d      	ldr	r2, [pc, #436]	@ (8005060 <HAL_DMA_Abort+0x22c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d02c      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a6b      	ldr	r2, [pc, #428]	@ (8005064 <HAL_DMA_Abort+0x230>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d027      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a6a      	ldr	r2, [pc, #424]	@ (8005068 <HAL_DMA_Abort+0x234>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d022      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a68      	ldr	r2, [pc, #416]	@ (800506c <HAL_DMA_Abort+0x238>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d01d      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a67      	ldr	r2, [pc, #412]	@ (8005070 <HAL_DMA_Abort+0x23c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d018      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a65      	ldr	r2, [pc, #404]	@ (8005074 <HAL_DMA_Abort+0x240>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a64      	ldr	r2, [pc, #400]	@ (8005078 <HAL_DMA_Abort+0x244>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00e      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a62      	ldr	r2, [pc, #392]	@ (800507c <HAL_DMA_Abort+0x248>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d009      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a61      	ldr	r2, [pc, #388]	@ (8005080 <HAL_DMA_Abort+0x24c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d004      	beq.n	8004f0a <HAL_DMA_Abort+0xd6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a5f      	ldr	r2, [pc, #380]	@ (8005084 <HAL_DMA_Abort+0x250>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_DMA_Abort+0xda>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <HAL_DMA_Abort+0xdc>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d013      	beq.n	8004f3c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 021e 	bic.w	r2, r2, #30
 8004f22:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f32:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	e00a      	b.n	8004f52 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 020e 	bic.w	r2, r2, #14
 8004f4a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a3c      	ldr	r2, [pc, #240]	@ (8005048 <HAL_DMA_Abort+0x214>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d072      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a3a      	ldr	r2, [pc, #232]	@ (800504c <HAL_DMA_Abort+0x218>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d06d      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a39      	ldr	r2, [pc, #228]	@ (8005050 <HAL_DMA_Abort+0x21c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d068      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a37      	ldr	r2, [pc, #220]	@ (8005054 <HAL_DMA_Abort+0x220>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d063      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a36      	ldr	r2, [pc, #216]	@ (8005058 <HAL_DMA_Abort+0x224>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d05e      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a34      	ldr	r2, [pc, #208]	@ (800505c <HAL_DMA_Abort+0x228>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d059      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a33      	ldr	r2, [pc, #204]	@ (8005060 <HAL_DMA_Abort+0x22c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d054      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a31      	ldr	r2, [pc, #196]	@ (8005064 <HAL_DMA_Abort+0x230>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d04f      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a30      	ldr	r2, [pc, #192]	@ (8005068 <HAL_DMA_Abort+0x234>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d04a      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800506c <HAL_DMA_Abort+0x238>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d045      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a2d      	ldr	r2, [pc, #180]	@ (8005070 <HAL_DMA_Abort+0x23c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d040      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8005074 <HAL_DMA_Abort+0x240>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d03b      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a2a      	ldr	r2, [pc, #168]	@ (8005078 <HAL_DMA_Abort+0x244>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d036      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a28      	ldr	r2, [pc, #160]	@ (800507c <HAL_DMA_Abort+0x248>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d031      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a27      	ldr	r2, [pc, #156]	@ (8005080 <HAL_DMA_Abort+0x24c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d02c      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a25      	ldr	r2, [pc, #148]	@ (8005084 <HAL_DMA_Abort+0x250>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d027      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a24      	ldr	r2, [pc, #144]	@ (8005088 <HAL_DMA_Abort+0x254>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d022      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a22      	ldr	r2, [pc, #136]	@ (800508c <HAL_DMA_Abort+0x258>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01d      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a21      	ldr	r2, [pc, #132]	@ (8005090 <HAL_DMA_Abort+0x25c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d018      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1f      	ldr	r2, [pc, #124]	@ (8005094 <HAL_DMA_Abort+0x260>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1e      	ldr	r2, [pc, #120]	@ (8005098 <HAL_DMA_Abort+0x264>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00e      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1c      	ldr	r2, [pc, #112]	@ (800509c <HAL_DMA_Abort+0x268>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d009      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1b      	ldr	r2, [pc, #108]	@ (80050a0 <HAL_DMA_Abort+0x26c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d004      	beq.n	8005042 <HAL_DMA_Abort+0x20e>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a19      	ldr	r2, [pc, #100]	@ (80050a4 <HAL_DMA_Abort+0x270>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d132      	bne.n	80050a8 <HAL_DMA_Abort+0x274>
 8005042:	2301      	movs	r3, #1
 8005044:	e031      	b.n	80050aa <HAL_DMA_Abort+0x276>
 8005046:	bf00      	nop
 8005048:	40020010 	.word	0x40020010
 800504c:	40020028 	.word	0x40020028
 8005050:	40020040 	.word	0x40020040
 8005054:	40020058 	.word	0x40020058
 8005058:	40020070 	.word	0x40020070
 800505c:	40020088 	.word	0x40020088
 8005060:	400200a0 	.word	0x400200a0
 8005064:	400200b8 	.word	0x400200b8
 8005068:	40020410 	.word	0x40020410
 800506c:	40020428 	.word	0x40020428
 8005070:	40020440 	.word	0x40020440
 8005074:	40020458 	.word	0x40020458
 8005078:	40020470 	.word	0x40020470
 800507c:	40020488 	.word	0x40020488
 8005080:	400204a0 	.word	0x400204a0
 8005084:	400204b8 	.word	0x400204b8
 8005088:	58025408 	.word	0x58025408
 800508c:	5802541c 	.word	0x5802541c
 8005090:	58025430 	.word	0x58025430
 8005094:	58025444 	.word	0x58025444
 8005098:	58025458 	.word	0x58025458
 800509c:	5802546c 	.word	0x5802546c
 80050a0:	58025480 	.word	0x58025480
 80050a4:	58025494 	.word	0x58025494
 80050a8:	2300      	movs	r3, #0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a6d      	ldr	r2, [pc, #436]	@ (8005278 <HAL_DMA_Abort+0x444>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d04a      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a6b      	ldr	r2, [pc, #428]	@ (800527c <HAL_DMA_Abort+0x448>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d045      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6a      	ldr	r2, [pc, #424]	@ (8005280 <HAL_DMA_Abort+0x44c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d040      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a68      	ldr	r2, [pc, #416]	@ (8005284 <HAL_DMA_Abort+0x450>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d03b      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a67      	ldr	r2, [pc, #412]	@ (8005288 <HAL_DMA_Abort+0x454>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d036      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a65      	ldr	r2, [pc, #404]	@ (800528c <HAL_DMA_Abort+0x458>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d031      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a64      	ldr	r2, [pc, #400]	@ (8005290 <HAL_DMA_Abort+0x45c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d02c      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a62      	ldr	r2, [pc, #392]	@ (8005294 <HAL_DMA_Abort+0x460>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d027      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a61      	ldr	r2, [pc, #388]	@ (8005298 <HAL_DMA_Abort+0x464>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d022      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a5f      	ldr	r2, [pc, #380]	@ (800529c <HAL_DMA_Abort+0x468>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01d      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a5e      	ldr	r2, [pc, #376]	@ (80052a0 <HAL_DMA_Abort+0x46c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d018      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a5c      	ldr	r2, [pc, #368]	@ (80052a4 <HAL_DMA_Abort+0x470>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a5b      	ldr	r2, [pc, #364]	@ (80052a8 <HAL_DMA_Abort+0x474>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00e      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a59      	ldr	r2, [pc, #356]	@ (80052ac <HAL_DMA_Abort+0x478>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a58      	ldr	r2, [pc, #352]	@ (80052b0 <HAL_DMA_Abort+0x47c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_DMA_Abort+0x32a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a56      	ldr	r2, [pc, #344]	@ (80052b4 <HAL_DMA_Abort+0x480>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <HAL_DMA_Abort+0x33c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e007      	b.n	8005180 <HAL_DMA_Abort+0x34c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0201 	bic.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005180:	e013      	b.n	80051aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005182:	f7fe ff55 	bl	8004030 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b05      	cmp	r3, #5
 800518e:	d90c      	bls.n	80051aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2203      	movs	r2, #3
 800519a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e12d      	b.n	8005406 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005278 <HAL_DMA_Abort+0x444>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d04a      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2d      	ldr	r2, [pc, #180]	@ (800527c <HAL_DMA_Abort+0x448>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d045      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005280 <HAL_DMA_Abort+0x44c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d040      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005284 <HAL_DMA_Abort+0x450>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d03b      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a29      	ldr	r2, [pc, #164]	@ (8005288 <HAL_DMA_Abort+0x454>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d036      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a27      	ldr	r2, [pc, #156]	@ (800528c <HAL_DMA_Abort+0x458>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d031      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a26      	ldr	r2, [pc, #152]	@ (8005290 <HAL_DMA_Abort+0x45c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d02c      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a24      	ldr	r2, [pc, #144]	@ (8005294 <HAL_DMA_Abort+0x460>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d027      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a23      	ldr	r2, [pc, #140]	@ (8005298 <HAL_DMA_Abort+0x464>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a21      	ldr	r2, [pc, #132]	@ (800529c <HAL_DMA_Abort+0x468>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01d      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a20      	ldr	r2, [pc, #128]	@ (80052a0 <HAL_DMA_Abort+0x46c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1e      	ldr	r2, [pc, #120]	@ (80052a4 <HAL_DMA_Abort+0x470>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1d      	ldr	r2, [pc, #116]	@ (80052a8 <HAL_DMA_Abort+0x474>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1b      	ldr	r2, [pc, #108]	@ (80052ac <HAL_DMA_Abort+0x478>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1a      	ldr	r2, [pc, #104]	@ (80052b0 <HAL_DMA_Abort+0x47c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_DMA_Abort+0x422>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a18      	ldr	r2, [pc, #96]	@ (80052b4 <HAL_DMA_Abort+0x480>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d101      	bne.n	800525a <HAL_DMA_Abort+0x426>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <HAL_DMA_Abort+0x428>
 800525a:	2300      	movs	r3, #0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d02b      	beq.n	80052b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005264:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	223f      	movs	r2, #63	@ 0x3f
 8005270:	409a      	lsls	r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	609a      	str	r2, [r3, #8]
 8005276:	e02a      	b.n	80052ce <HAL_DMA_Abort+0x49a>
 8005278:	40020010 	.word	0x40020010
 800527c:	40020028 	.word	0x40020028
 8005280:	40020040 	.word	0x40020040
 8005284:	40020058 	.word	0x40020058
 8005288:	40020070 	.word	0x40020070
 800528c:	40020088 	.word	0x40020088
 8005290:	400200a0 	.word	0x400200a0
 8005294:	400200b8 	.word	0x400200b8
 8005298:	40020410 	.word	0x40020410
 800529c:	40020428 	.word	0x40020428
 80052a0:	40020440 	.word	0x40020440
 80052a4:	40020458 	.word	0x40020458
 80052a8:	40020470 	.word	0x40020470
 80052ac:	40020488 	.word	0x40020488
 80052b0:	400204a0 	.word	0x400204a0
 80052b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c2:	f003 031f 	and.w	r3, r3, #31
 80052c6:	2201      	movs	r2, #1
 80052c8:	409a      	lsls	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a4f      	ldr	r2, [pc, #316]	@ (8005410 <HAL_DMA_Abort+0x5dc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d072      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a4d      	ldr	r2, [pc, #308]	@ (8005414 <HAL_DMA_Abort+0x5e0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d06d      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a4c      	ldr	r2, [pc, #304]	@ (8005418 <HAL_DMA_Abort+0x5e4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d068      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a4a      	ldr	r2, [pc, #296]	@ (800541c <HAL_DMA_Abort+0x5e8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d063      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a49      	ldr	r2, [pc, #292]	@ (8005420 <HAL_DMA_Abort+0x5ec>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d05e      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a47      	ldr	r2, [pc, #284]	@ (8005424 <HAL_DMA_Abort+0x5f0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d059      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a46      	ldr	r2, [pc, #280]	@ (8005428 <HAL_DMA_Abort+0x5f4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d054      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a44      	ldr	r2, [pc, #272]	@ (800542c <HAL_DMA_Abort+0x5f8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d04f      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a43      	ldr	r2, [pc, #268]	@ (8005430 <HAL_DMA_Abort+0x5fc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d04a      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a41      	ldr	r2, [pc, #260]	@ (8005434 <HAL_DMA_Abort+0x600>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d045      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a40      	ldr	r2, [pc, #256]	@ (8005438 <HAL_DMA_Abort+0x604>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d040      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a3e      	ldr	r2, [pc, #248]	@ (800543c <HAL_DMA_Abort+0x608>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d03b      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a3d      	ldr	r2, [pc, #244]	@ (8005440 <HAL_DMA_Abort+0x60c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d036      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a3b      	ldr	r2, [pc, #236]	@ (8005444 <HAL_DMA_Abort+0x610>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d031      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a3a      	ldr	r2, [pc, #232]	@ (8005448 <HAL_DMA_Abort+0x614>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d02c      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a38      	ldr	r2, [pc, #224]	@ (800544c <HAL_DMA_Abort+0x618>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d027      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a37      	ldr	r2, [pc, #220]	@ (8005450 <HAL_DMA_Abort+0x61c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a35      	ldr	r2, [pc, #212]	@ (8005454 <HAL_DMA_Abort+0x620>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01d      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a34      	ldr	r2, [pc, #208]	@ (8005458 <HAL_DMA_Abort+0x624>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d018      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a32      	ldr	r2, [pc, #200]	@ (800545c <HAL_DMA_Abort+0x628>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a31      	ldr	r2, [pc, #196]	@ (8005460 <HAL_DMA_Abort+0x62c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00e      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005464 <HAL_DMA_Abort+0x630>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005468 <HAL_DMA_Abort+0x634>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <HAL_DMA_Abort+0x58a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a2c      	ldr	r2, [pc, #176]	@ (800546c <HAL_DMA_Abort+0x638>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d101      	bne.n	80053c2 <HAL_DMA_Abort+0x58e>
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <HAL_DMA_Abort+0x590>
 80053c2:	2300      	movs	r3, #0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d015      	beq.n	80053f4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80053d0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00c      	beq.n	80053f4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053e8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80053f2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40020010 	.word	0x40020010
 8005414:	40020028 	.word	0x40020028
 8005418:	40020040 	.word	0x40020040
 800541c:	40020058 	.word	0x40020058
 8005420:	40020070 	.word	0x40020070
 8005424:	40020088 	.word	0x40020088
 8005428:	400200a0 	.word	0x400200a0
 800542c:	400200b8 	.word	0x400200b8
 8005430:	40020410 	.word	0x40020410
 8005434:	40020428 	.word	0x40020428
 8005438:	40020440 	.word	0x40020440
 800543c:	40020458 	.word	0x40020458
 8005440:	40020470 	.word	0x40020470
 8005444:	40020488 	.word	0x40020488
 8005448:	400204a0 	.word	0x400204a0
 800544c:	400204b8 	.word	0x400204b8
 8005450:	58025408 	.word	0x58025408
 8005454:	5802541c 	.word	0x5802541c
 8005458:	58025430 	.word	0x58025430
 800545c:	58025444 	.word	0x58025444
 8005460:	58025458 	.word	0x58025458
 8005464:	5802546c 	.word	0x5802546c
 8005468:	58025480 	.word	0x58025480
 800546c:	58025494 	.word	0x58025494

08005470 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08a      	sub	sp, #40	@ 0x28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800547c:	4b67      	ldr	r3, [pc, #412]	@ (800561c <HAL_DMA_IRQHandler+0x1ac>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a67      	ldr	r2, [pc, #412]	@ (8005620 <HAL_DMA_IRQHandler+0x1b0>)
 8005482:	fba2 2303 	umull	r2, r3, r2, r3
 8005486:	0a9b      	lsrs	r3, r3, #10
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005494:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a5f      	ldr	r2, [pc, #380]	@ (8005624 <HAL_DMA_IRQHandler+0x1b4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d04a      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005628 <HAL_DMA_IRQHandler+0x1b8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d045      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a5c      	ldr	r2, [pc, #368]	@ (800562c <HAL_DMA_IRQHandler+0x1bc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d040      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a5a      	ldr	r2, [pc, #360]	@ (8005630 <HAL_DMA_IRQHandler+0x1c0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d03b      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a59      	ldr	r2, [pc, #356]	@ (8005634 <HAL_DMA_IRQHandler+0x1c4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d036      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a57      	ldr	r2, [pc, #348]	@ (8005638 <HAL_DMA_IRQHandler+0x1c8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d031      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a56      	ldr	r2, [pc, #344]	@ (800563c <HAL_DMA_IRQHandler+0x1cc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d02c      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a54      	ldr	r2, [pc, #336]	@ (8005640 <HAL_DMA_IRQHandler+0x1d0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d027      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a53      	ldr	r2, [pc, #332]	@ (8005644 <HAL_DMA_IRQHandler+0x1d4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d022      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a51      	ldr	r2, [pc, #324]	@ (8005648 <HAL_DMA_IRQHandler+0x1d8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d01d      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a50      	ldr	r2, [pc, #320]	@ (800564c <HAL_DMA_IRQHandler+0x1dc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d018      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a4e      	ldr	r2, [pc, #312]	@ (8005650 <HAL_DMA_IRQHandler+0x1e0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a4d      	ldr	r2, [pc, #308]	@ (8005654 <HAL_DMA_IRQHandler+0x1e4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00e      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a4b      	ldr	r2, [pc, #300]	@ (8005658 <HAL_DMA_IRQHandler+0x1e8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d009      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a4a      	ldr	r2, [pc, #296]	@ (800565c <HAL_DMA_IRQHandler+0x1ec>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_DMA_IRQHandler+0xd2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a48      	ldr	r2, [pc, #288]	@ (8005660 <HAL_DMA_IRQHandler+0x1f0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d101      	bne.n	8005546 <HAL_DMA_IRQHandler+0xd6>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <HAL_DMA_IRQHandler+0xd8>
 8005546:	2300      	movs	r3, #0
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 842b 	beq.w	8005da4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	2208      	movs	r2, #8
 8005558:	409a      	lsls	r2, r3
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	4013      	ands	r3, r2
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 80a2 	beq.w	80056a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a2e      	ldr	r2, [pc, #184]	@ (8005624 <HAL_DMA_IRQHandler+0x1b4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d04a      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2d      	ldr	r2, [pc, #180]	@ (8005628 <HAL_DMA_IRQHandler+0x1b8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d045      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2b      	ldr	r2, [pc, #172]	@ (800562c <HAL_DMA_IRQHandler+0x1bc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d040      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a2a      	ldr	r2, [pc, #168]	@ (8005630 <HAL_DMA_IRQHandler+0x1c0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d03b      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a28      	ldr	r2, [pc, #160]	@ (8005634 <HAL_DMA_IRQHandler+0x1c4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d036      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a27      	ldr	r2, [pc, #156]	@ (8005638 <HAL_DMA_IRQHandler+0x1c8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d031      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a25      	ldr	r2, [pc, #148]	@ (800563c <HAL_DMA_IRQHandler+0x1cc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d02c      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a24      	ldr	r2, [pc, #144]	@ (8005640 <HAL_DMA_IRQHandler+0x1d0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d027      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a22      	ldr	r2, [pc, #136]	@ (8005644 <HAL_DMA_IRQHandler+0x1d4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d022      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a21      	ldr	r2, [pc, #132]	@ (8005648 <HAL_DMA_IRQHandler+0x1d8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d01d      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1f      	ldr	r2, [pc, #124]	@ (800564c <HAL_DMA_IRQHandler+0x1dc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d018      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005650 <HAL_DMA_IRQHandler+0x1e0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005654 <HAL_DMA_IRQHandler+0x1e4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00e      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005658 <HAL_DMA_IRQHandler+0x1e8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d009      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a19      	ldr	r2, [pc, #100]	@ (800565c <HAL_DMA_IRQHandler+0x1ec>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <HAL_DMA_IRQHandler+0x194>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a18      	ldr	r2, [pc, #96]	@ (8005660 <HAL_DMA_IRQHandler+0x1f0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d12f      	bne.n	8005664 <HAL_DMA_IRQHandler+0x1f4>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	bf14      	ite	ne
 8005612:	2301      	movne	r3, #1
 8005614:	2300      	moveq	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	e02e      	b.n	8005678 <HAL_DMA_IRQHandler+0x208>
 800561a:	bf00      	nop
 800561c:	24000000 	.word	0x24000000
 8005620:	1b4e81b5 	.word	0x1b4e81b5
 8005624:	40020010 	.word	0x40020010
 8005628:	40020028 	.word	0x40020028
 800562c:	40020040 	.word	0x40020040
 8005630:	40020058 	.word	0x40020058
 8005634:	40020070 	.word	0x40020070
 8005638:	40020088 	.word	0x40020088
 800563c:	400200a0 	.word	0x400200a0
 8005640:	400200b8 	.word	0x400200b8
 8005644:	40020410 	.word	0x40020410
 8005648:	40020428 	.word	0x40020428
 800564c:	40020440 	.word	0x40020440
 8005650:	40020458 	.word	0x40020458
 8005654:	40020470 	.word	0x40020470
 8005658:	40020488 	.word	0x40020488
 800565c:	400204a0 	.word	0x400204a0
 8005660:	400204b8 	.word	0x400204b8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	bf14      	ite	ne
 8005672:	2301      	movne	r3, #1
 8005674:	2300      	moveq	r3, #0
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d015      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0204 	bic.w	r2, r2, #4
 800568a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	2208      	movs	r2, #8
 8005696:	409a      	lsls	r2, r3
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a0:	f043 0201 	orr.w	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ac:	f003 031f 	and.w	r3, r3, #31
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	fa22 f303 	lsr.w	r3, r2, r3
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d06e      	beq.n	800579c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a69      	ldr	r2, [pc, #420]	@ (8005868 <HAL_DMA_IRQHandler+0x3f8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d04a      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a67      	ldr	r2, [pc, #412]	@ (800586c <HAL_DMA_IRQHandler+0x3fc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d045      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a66      	ldr	r2, [pc, #408]	@ (8005870 <HAL_DMA_IRQHandler+0x400>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d040      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a64      	ldr	r2, [pc, #400]	@ (8005874 <HAL_DMA_IRQHandler+0x404>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d03b      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a63      	ldr	r2, [pc, #396]	@ (8005878 <HAL_DMA_IRQHandler+0x408>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d036      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a61      	ldr	r2, [pc, #388]	@ (800587c <HAL_DMA_IRQHandler+0x40c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d031      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a60      	ldr	r2, [pc, #384]	@ (8005880 <HAL_DMA_IRQHandler+0x410>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d02c      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a5e      	ldr	r2, [pc, #376]	@ (8005884 <HAL_DMA_IRQHandler+0x414>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d027      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a5d      	ldr	r2, [pc, #372]	@ (8005888 <HAL_DMA_IRQHandler+0x418>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d022      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a5b      	ldr	r2, [pc, #364]	@ (800588c <HAL_DMA_IRQHandler+0x41c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d01d      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a5a      	ldr	r2, [pc, #360]	@ (8005890 <HAL_DMA_IRQHandler+0x420>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d018      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a58      	ldr	r2, [pc, #352]	@ (8005894 <HAL_DMA_IRQHandler+0x424>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a57      	ldr	r2, [pc, #348]	@ (8005898 <HAL_DMA_IRQHandler+0x428>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00e      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a55      	ldr	r2, [pc, #340]	@ (800589c <HAL_DMA_IRQHandler+0x42c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d009      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a54      	ldr	r2, [pc, #336]	@ (80058a0 <HAL_DMA_IRQHandler+0x430>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_DMA_IRQHandler+0x2ee>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a52      	ldr	r2, [pc, #328]	@ (80058a4 <HAL_DMA_IRQHandler+0x434>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d10a      	bne.n	8005774 <HAL_DMA_IRQHandler+0x304>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005768:	2b00      	cmp	r3, #0
 800576a:	bf14      	ite	ne
 800576c:	2301      	movne	r3, #1
 800576e:	2300      	moveq	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	e003      	b.n	800577c <HAL_DMA_IRQHandler+0x30c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2300      	movs	r3, #0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00d      	beq.n	800579c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005784:	f003 031f 	and.w	r3, r3, #31
 8005788:	2201      	movs	r2, #1
 800578a:	409a      	lsls	r2, r3
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005794:	f043 0202 	orr.w	r2, r3, #2
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	2204      	movs	r2, #4
 80057a6:	409a      	lsls	r2, r3
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 808f 	beq.w	80058d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005868 <HAL_DMA_IRQHandler+0x3f8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d04a      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2a      	ldr	r2, [pc, #168]	@ (800586c <HAL_DMA_IRQHandler+0x3fc>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d045      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a29      	ldr	r2, [pc, #164]	@ (8005870 <HAL_DMA_IRQHandler+0x400>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d040      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a27      	ldr	r2, [pc, #156]	@ (8005874 <HAL_DMA_IRQHandler+0x404>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d03b      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a26      	ldr	r2, [pc, #152]	@ (8005878 <HAL_DMA_IRQHandler+0x408>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d036      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a24      	ldr	r2, [pc, #144]	@ (800587c <HAL_DMA_IRQHandler+0x40c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d031      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a23      	ldr	r2, [pc, #140]	@ (8005880 <HAL_DMA_IRQHandler+0x410>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d02c      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a21      	ldr	r2, [pc, #132]	@ (8005884 <HAL_DMA_IRQHandler+0x414>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d027      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a20      	ldr	r2, [pc, #128]	@ (8005888 <HAL_DMA_IRQHandler+0x418>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d022      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1e      	ldr	r2, [pc, #120]	@ (800588c <HAL_DMA_IRQHandler+0x41c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d01d      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1d      	ldr	r2, [pc, #116]	@ (8005890 <HAL_DMA_IRQHandler+0x420>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d018      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1b      	ldr	r2, [pc, #108]	@ (8005894 <HAL_DMA_IRQHandler+0x424>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1a      	ldr	r2, [pc, #104]	@ (8005898 <HAL_DMA_IRQHandler+0x428>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00e      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a18      	ldr	r2, [pc, #96]	@ (800589c <HAL_DMA_IRQHandler+0x42c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d009      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a17      	ldr	r2, [pc, #92]	@ (80058a0 <HAL_DMA_IRQHandler+0x430>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_DMA_IRQHandler+0x3e2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a15      	ldr	r2, [pc, #84]	@ (80058a4 <HAL_DMA_IRQHandler+0x434>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d12a      	bne.n	80058a8 <HAL_DMA_IRQHandler+0x438>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	bf14      	ite	ne
 8005860:	2301      	movne	r3, #1
 8005862:	2300      	moveq	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	e023      	b.n	80058b0 <HAL_DMA_IRQHandler+0x440>
 8005868:	40020010 	.word	0x40020010
 800586c:	40020028 	.word	0x40020028
 8005870:	40020040 	.word	0x40020040
 8005874:	40020058 	.word	0x40020058
 8005878:	40020070 	.word	0x40020070
 800587c:	40020088 	.word	0x40020088
 8005880:	400200a0 	.word	0x400200a0
 8005884:	400200b8 	.word	0x400200b8
 8005888:	40020410 	.word	0x40020410
 800588c:	40020428 	.word	0x40020428
 8005890:	40020440 	.word	0x40020440
 8005894:	40020458 	.word	0x40020458
 8005898:	40020470 	.word	0x40020470
 800589c:	40020488 	.word	0x40020488
 80058a0:	400204a0 	.word	0x400204a0
 80058a4:	400204b8 	.word	0x400204b8
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2300      	movs	r3, #0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00d      	beq.n	80058d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	2204      	movs	r2, #4
 80058be:	409a      	lsls	r2, r3
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c8:	f043 0204 	orr.w	r2, r3, #4
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d4:	f003 031f 	and.w	r3, r3, #31
 80058d8:	2210      	movs	r2, #16
 80058da:	409a      	lsls	r2, r3
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	4013      	ands	r3, r2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80a6 	beq.w	8005a32 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a85      	ldr	r2, [pc, #532]	@ (8005b00 <HAL_DMA_IRQHandler+0x690>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d04a      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a83      	ldr	r2, [pc, #524]	@ (8005b04 <HAL_DMA_IRQHandler+0x694>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d045      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a82      	ldr	r2, [pc, #520]	@ (8005b08 <HAL_DMA_IRQHandler+0x698>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d040      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a80      	ldr	r2, [pc, #512]	@ (8005b0c <HAL_DMA_IRQHandler+0x69c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d03b      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a7f      	ldr	r2, [pc, #508]	@ (8005b10 <HAL_DMA_IRQHandler+0x6a0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d036      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a7d      	ldr	r2, [pc, #500]	@ (8005b14 <HAL_DMA_IRQHandler+0x6a4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d031      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a7c      	ldr	r2, [pc, #496]	@ (8005b18 <HAL_DMA_IRQHandler+0x6a8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d02c      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a7a      	ldr	r2, [pc, #488]	@ (8005b1c <HAL_DMA_IRQHandler+0x6ac>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d027      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a79      	ldr	r2, [pc, #484]	@ (8005b20 <HAL_DMA_IRQHandler+0x6b0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d022      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a77      	ldr	r2, [pc, #476]	@ (8005b24 <HAL_DMA_IRQHandler+0x6b4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01d      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a76      	ldr	r2, [pc, #472]	@ (8005b28 <HAL_DMA_IRQHandler+0x6b8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d018      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a74      	ldr	r2, [pc, #464]	@ (8005b2c <HAL_DMA_IRQHandler+0x6bc>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d013      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a73      	ldr	r2, [pc, #460]	@ (8005b30 <HAL_DMA_IRQHandler+0x6c0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00e      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a71      	ldr	r2, [pc, #452]	@ (8005b34 <HAL_DMA_IRQHandler+0x6c4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d009      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a70      	ldr	r2, [pc, #448]	@ (8005b38 <HAL_DMA_IRQHandler+0x6c8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <HAL_DMA_IRQHandler+0x516>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a6e      	ldr	r2, [pc, #440]	@ (8005b3c <HAL_DMA_IRQHandler+0x6cc>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10a      	bne.n	800599c <HAL_DMA_IRQHandler+0x52c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	bf14      	ite	ne
 8005994:	2301      	movne	r3, #1
 8005996:	2300      	moveq	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e009      	b.n	80059b0 <HAL_DMA_IRQHandler+0x540>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bf14      	ite	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	2300      	moveq	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d03e      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	2210      	movs	r2, #16
 80059be:	409a      	lsls	r2, r3
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d018      	beq.n	8005a04 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d108      	bne.n	80059f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d024      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	4798      	blx	r3
 80059f0:	e01f      	b.n	8005a32 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01b      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3
 8005a02:	e016      	b.n	8005a32 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d107      	bne.n	8005a22 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0208 	bic.w	r2, r2, #8
 8005a20:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	4013      	ands	r3, r2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8110 	beq.w	8005c68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8005b00 <HAL_DMA_IRQHandler+0x690>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d04a      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a2b      	ldr	r2, [pc, #172]	@ (8005b04 <HAL_DMA_IRQHandler+0x694>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d045      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a29      	ldr	r2, [pc, #164]	@ (8005b08 <HAL_DMA_IRQHandler+0x698>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d040      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a28      	ldr	r2, [pc, #160]	@ (8005b0c <HAL_DMA_IRQHandler+0x69c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d03b      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a26      	ldr	r2, [pc, #152]	@ (8005b10 <HAL_DMA_IRQHandler+0x6a0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d036      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a25      	ldr	r2, [pc, #148]	@ (8005b14 <HAL_DMA_IRQHandler+0x6a4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d031      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a23      	ldr	r2, [pc, #140]	@ (8005b18 <HAL_DMA_IRQHandler+0x6a8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d02c      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a22      	ldr	r2, [pc, #136]	@ (8005b1c <HAL_DMA_IRQHandler+0x6ac>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d027      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a20      	ldr	r2, [pc, #128]	@ (8005b20 <HAL_DMA_IRQHandler+0x6b0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d022      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8005b24 <HAL_DMA_IRQHandler+0x6b4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d01d      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b28 <HAL_DMA_IRQHandler+0x6b8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d018      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1c      	ldr	r2, [pc, #112]	@ (8005b2c <HAL_DMA_IRQHandler+0x6bc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d013      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8005b30 <HAL_DMA_IRQHandler+0x6c0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00e      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a19      	ldr	r2, [pc, #100]	@ (8005b34 <HAL_DMA_IRQHandler+0x6c4>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d009      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a17      	ldr	r2, [pc, #92]	@ (8005b38 <HAL_DMA_IRQHandler+0x6c8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x678>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a16      	ldr	r2, [pc, #88]	@ (8005b3c <HAL_DMA_IRQHandler+0x6cc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d12b      	bne.n	8005b40 <HAL_DMA_IRQHandler+0x6d0>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0310 	and.w	r3, r3, #16
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	bf14      	ite	ne
 8005af6:	2301      	movne	r3, #1
 8005af8:	2300      	moveq	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	e02a      	b.n	8005b54 <HAL_DMA_IRQHandler+0x6e4>
 8005afe:	bf00      	nop
 8005b00:	40020010 	.word	0x40020010
 8005b04:	40020028 	.word	0x40020028
 8005b08:	40020040 	.word	0x40020040
 8005b0c:	40020058 	.word	0x40020058
 8005b10:	40020070 	.word	0x40020070
 8005b14:	40020088 	.word	0x40020088
 8005b18:	400200a0 	.word	0x400200a0
 8005b1c:	400200b8 	.word	0x400200b8
 8005b20:	40020410 	.word	0x40020410
 8005b24:	40020428 	.word	0x40020428
 8005b28:	40020440 	.word	0x40020440
 8005b2c:	40020458 	.word	0x40020458
 8005b30:	40020470 	.word	0x40020470
 8005b34:	40020488 	.word	0x40020488
 8005b38:	400204a0 	.word	0x400204a0
 8005b3c:	400204b8 	.word	0x400204b8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	bf14      	ite	ne
 8005b4e:	2301      	movne	r3, #1
 8005b50:	2300      	moveq	r3, #0
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8087 	beq.w	8005c68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	2220      	movs	r2, #32
 8005b64:	409a      	lsls	r2, r3
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d139      	bne.n	8005bea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0216 	bic.w	r2, r2, #22
 8005b84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d103      	bne.n	8005ba6 <HAL_DMA_IRQHandler+0x736>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0208 	bic.w	r2, r2, #8
 8005bb4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	223f      	movs	r2, #63	@ 0x3f
 8005bc0:	409a      	lsls	r2, r3
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 834a 	beq.w	8006274 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	4798      	blx	r3
          }
          return;
 8005be8:	e344      	b.n	8006274 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d018      	beq.n	8005c2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d108      	bne.n	8005c18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d02c      	beq.n	8005c68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	4798      	blx	r3
 8005c16:	e027      	b.n	8005c68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d023      	beq.n	8005c68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4798      	blx	r3
 8005c28:	e01e      	b.n	8005c68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10f      	bne.n	8005c58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0210 	bic.w	r2, r2, #16
 8005c46:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 8306 	beq.w	800627e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 8088 	beq.w	8005d90 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2204      	movs	r2, #4
 8005c84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a7a      	ldr	r2, [pc, #488]	@ (8005e78 <HAL_DMA_IRQHandler+0xa08>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d04a      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a79      	ldr	r2, [pc, #484]	@ (8005e7c <HAL_DMA_IRQHandler+0xa0c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d045      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a77      	ldr	r2, [pc, #476]	@ (8005e80 <HAL_DMA_IRQHandler+0xa10>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d040      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a76      	ldr	r2, [pc, #472]	@ (8005e84 <HAL_DMA_IRQHandler+0xa14>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d03b      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a74      	ldr	r2, [pc, #464]	@ (8005e88 <HAL_DMA_IRQHandler+0xa18>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d036      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a73      	ldr	r2, [pc, #460]	@ (8005e8c <HAL_DMA_IRQHandler+0xa1c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d031      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a71      	ldr	r2, [pc, #452]	@ (8005e90 <HAL_DMA_IRQHandler+0xa20>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d02c      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a70      	ldr	r2, [pc, #448]	@ (8005e94 <HAL_DMA_IRQHandler+0xa24>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d027      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a6e      	ldr	r2, [pc, #440]	@ (8005e98 <HAL_DMA_IRQHandler+0xa28>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d022      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a6d      	ldr	r2, [pc, #436]	@ (8005e9c <HAL_DMA_IRQHandler+0xa2c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d01d      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a6b      	ldr	r2, [pc, #428]	@ (8005ea0 <HAL_DMA_IRQHandler+0xa30>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d018      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a6a      	ldr	r2, [pc, #424]	@ (8005ea4 <HAL_DMA_IRQHandler+0xa34>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d013      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a68      	ldr	r2, [pc, #416]	@ (8005ea8 <HAL_DMA_IRQHandler+0xa38>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00e      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a67      	ldr	r2, [pc, #412]	@ (8005eac <HAL_DMA_IRQHandler+0xa3c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d009      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a65      	ldr	r2, [pc, #404]	@ (8005eb0 <HAL_DMA_IRQHandler+0xa40>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d004      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x8b8>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a64      	ldr	r2, [pc, #400]	@ (8005eb4 <HAL_DMA_IRQHandler+0xa44>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d108      	bne.n	8005d3a <HAL_DMA_IRQHandler+0x8ca>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0201 	bic.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	e007      	b.n	8005d4a <HAL_DMA_IRQHandler+0x8da>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d307      	bcc.n	8005d66 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1f2      	bne.n	8005d4a <HAL_DMA_IRQHandler+0x8da>
 8005d64:	e000      	b.n	8005d68 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005d66:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2203      	movs	r2, #3
 8005d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005d7e:	e003      	b.n	8005d88 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8272 	beq.w	800627e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	4798      	blx	r3
 8005da2:	e26c      	b.n	800627e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a43      	ldr	r2, [pc, #268]	@ (8005eb8 <HAL_DMA_IRQHandler+0xa48>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d022      	beq.n	8005df4 <HAL_DMA_IRQHandler+0x984>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a42      	ldr	r2, [pc, #264]	@ (8005ebc <HAL_DMA_IRQHandler+0xa4c>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d01d      	beq.n	8005df4 <HAL_DMA_IRQHandler+0x984>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a40      	ldr	r2, [pc, #256]	@ (8005ec0 <HAL_DMA_IRQHandler+0xa50>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d018      	beq.n	8005df4 <HAL_DMA_IRQHandler+0x984>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a3f      	ldr	r2, [pc, #252]	@ (8005ec4 <HAL_DMA_IRQHandler+0xa54>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d013      	beq.n	8005df4 <HAL_DMA_IRQHandler+0x984>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a3d      	ldr	r2, [pc, #244]	@ (8005ec8 <HAL_DMA_IRQHandler+0xa58>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00e      	beq.n	8005df4 <HAL_DMA_IRQHandler+0x984>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a3c      	ldr	r2, [pc, #240]	@ (8005ecc <HAL_DMA_IRQHandler+0xa5c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d009      	beq.n	8005df4 <HAL_DMA_IRQHandler+0x984>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ed0 <HAL_DMA_IRQHandler+0xa60>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d004      	beq.n	8005df4 <HAL_DMA_IRQHandler+0x984>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a39      	ldr	r2, [pc, #228]	@ (8005ed4 <HAL_DMA_IRQHandler+0xa64>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d101      	bne.n	8005df8 <HAL_DMA_IRQHandler+0x988>
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <HAL_DMA_IRQHandler+0x98a>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 823f 	beq.w	800627e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e0c:	f003 031f 	and.w	r3, r3, #31
 8005e10:	2204      	movs	r2, #4
 8005e12:	409a      	lsls	r2, r3
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 80cd 	beq.w	8005fb8 <HAL_DMA_IRQHandler+0xb48>
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 80c7 	beq.w	8005fb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e2e:	f003 031f 	and.w	r3, r3, #31
 8005e32:	2204      	movs	r2, #4
 8005e34:	409a      	lsls	r2, r3
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d049      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 8210 	beq.w	8006278 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e60:	e20a      	b.n	8006278 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 8206 	beq.w	8006278 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e74:	e200      	b.n	8006278 <HAL_DMA_IRQHandler+0xe08>
 8005e76:	bf00      	nop
 8005e78:	40020010 	.word	0x40020010
 8005e7c:	40020028 	.word	0x40020028
 8005e80:	40020040 	.word	0x40020040
 8005e84:	40020058 	.word	0x40020058
 8005e88:	40020070 	.word	0x40020070
 8005e8c:	40020088 	.word	0x40020088
 8005e90:	400200a0 	.word	0x400200a0
 8005e94:	400200b8 	.word	0x400200b8
 8005e98:	40020410 	.word	0x40020410
 8005e9c:	40020428 	.word	0x40020428
 8005ea0:	40020440 	.word	0x40020440
 8005ea4:	40020458 	.word	0x40020458
 8005ea8:	40020470 	.word	0x40020470
 8005eac:	40020488 	.word	0x40020488
 8005eb0:	400204a0 	.word	0x400204a0
 8005eb4:	400204b8 	.word	0x400204b8
 8005eb8:	58025408 	.word	0x58025408
 8005ebc:	5802541c 	.word	0x5802541c
 8005ec0:	58025430 	.word	0x58025430
 8005ec4:	58025444 	.word	0x58025444
 8005ec8:	58025458 	.word	0x58025458
 8005ecc:	5802546c 	.word	0x5802546c
 8005ed0:	58025480 	.word	0x58025480
 8005ed4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d160      	bne.n	8005fa4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a7f      	ldr	r2, [pc, #508]	@ (80060e4 <HAL_DMA_IRQHandler+0xc74>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d04a      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a7d      	ldr	r2, [pc, #500]	@ (80060e8 <HAL_DMA_IRQHandler+0xc78>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d045      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a7c      	ldr	r2, [pc, #496]	@ (80060ec <HAL_DMA_IRQHandler+0xc7c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d040      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a7a      	ldr	r2, [pc, #488]	@ (80060f0 <HAL_DMA_IRQHandler+0xc80>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d03b      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a79      	ldr	r2, [pc, #484]	@ (80060f4 <HAL_DMA_IRQHandler+0xc84>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d036      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a77      	ldr	r2, [pc, #476]	@ (80060f8 <HAL_DMA_IRQHandler+0xc88>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d031      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a76      	ldr	r2, [pc, #472]	@ (80060fc <HAL_DMA_IRQHandler+0xc8c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d02c      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a74      	ldr	r2, [pc, #464]	@ (8006100 <HAL_DMA_IRQHandler+0xc90>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d027      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a73      	ldr	r2, [pc, #460]	@ (8006104 <HAL_DMA_IRQHandler+0xc94>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d022      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a71      	ldr	r2, [pc, #452]	@ (8006108 <HAL_DMA_IRQHandler+0xc98>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d01d      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a70      	ldr	r2, [pc, #448]	@ (800610c <HAL_DMA_IRQHandler+0xc9c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d018      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a6e      	ldr	r2, [pc, #440]	@ (8006110 <HAL_DMA_IRQHandler+0xca0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d013      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a6d      	ldr	r2, [pc, #436]	@ (8006114 <HAL_DMA_IRQHandler+0xca4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00e      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a6b      	ldr	r2, [pc, #428]	@ (8006118 <HAL_DMA_IRQHandler+0xca8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d009      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a6a      	ldr	r2, [pc, #424]	@ (800611c <HAL_DMA_IRQHandler+0xcac>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d004      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xb12>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a68      	ldr	r2, [pc, #416]	@ (8006120 <HAL_DMA_IRQHandler+0xcb0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d108      	bne.n	8005f94 <HAL_DMA_IRQHandler+0xb24>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0208 	bic.w	r2, r2, #8
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	e007      	b.n	8005fa4 <HAL_DMA_IRQHandler+0xb34>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0204 	bic.w	r2, r2, #4
 8005fa2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 8165 	beq.w	8006278 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fb6:	e15f      	b.n	8006278 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbc:	f003 031f 	and.w	r3, r3, #31
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	409a      	lsls	r2, r3
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80c5 	beq.w	8006158 <HAL_DMA_IRQHandler+0xce8>
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80bf 	beq.w	8006158 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fde:	f003 031f 	and.w	r3, r3, #31
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	409a      	lsls	r2, r3
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d018      	beq.n	8006026 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d109      	bne.n	8006012 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 813a 	beq.w	800627c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006010:	e134      	b.n	800627c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 8130 	beq.w	800627c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006024:	e12a      	b.n	800627c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b00      	cmp	r3, #0
 800602e:	f040 8089 	bne.w	8006144 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a2b      	ldr	r2, [pc, #172]	@ (80060e4 <HAL_DMA_IRQHandler+0xc74>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d04a      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a29      	ldr	r2, [pc, #164]	@ (80060e8 <HAL_DMA_IRQHandler+0xc78>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d045      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a28      	ldr	r2, [pc, #160]	@ (80060ec <HAL_DMA_IRQHandler+0xc7c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d040      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a26      	ldr	r2, [pc, #152]	@ (80060f0 <HAL_DMA_IRQHandler+0xc80>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d03b      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a25      	ldr	r2, [pc, #148]	@ (80060f4 <HAL_DMA_IRQHandler+0xc84>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d036      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a23      	ldr	r2, [pc, #140]	@ (80060f8 <HAL_DMA_IRQHandler+0xc88>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d031      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a22      	ldr	r2, [pc, #136]	@ (80060fc <HAL_DMA_IRQHandler+0xc8c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d02c      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a20      	ldr	r2, [pc, #128]	@ (8006100 <HAL_DMA_IRQHandler+0xc90>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d027      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1f      	ldr	r2, [pc, #124]	@ (8006104 <HAL_DMA_IRQHandler+0xc94>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d022      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1d      	ldr	r2, [pc, #116]	@ (8006108 <HAL_DMA_IRQHandler+0xc98>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d01d      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1c      	ldr	r2, [pc, #112]	@ (800610c <HAL_DMA_IRQHandler+0xc9c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d018      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1a      	ldr	r2, [pc, #104]	@ (8006110 <HAL_DMA_IRQHandler+0xca0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a19      	ldr	r2, [pc, #100]	@ (8006114 <HAL_DMA_IRQHandler+0xca4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00e      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a17      	ldr	r2, [pc, #92]	@ (8006118 <HAL_DMA_IRQHandler+0xca8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d009      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a16      	ldr	r2, [pc, #88]	@ (800611c <HAL_DMA_IRQHandler+0xcac>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d004      	beq.n	80060d2 <HAL_DMA_IRQHandler+0xc62>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a14      	ldr	r2, [pc, #80]	@ (8006120 <HAL_DMA_IRQHandler+0xcb0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d128      	bne.n	8006124 <HAL_DMA_IRQHandler+0xcb4>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0214 	bic.w	r2, r2, #20
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e027      	b.n	8006134 <HAL_DMA_IRQHandler+0xcc4>
 80060e4:	40020010 	.word	0x40020010
 80060e8:	40020028 	.word	0x40020028
 80060ec:	40020040 	.word	0x40020040
 80060f0:	40020058 	.word	0x40020058
 80060f4:	40020070 	.word	0x40020070
 80060f8:	40020088 	.word	0x40020088
 80060fc:	400200a0 	.word	0x400200a0
 8006100:	400200b8 	.word	0x400200b8
 8006104:	40020410 	.word	0x40020410
 8006108:	40020428 	.word	0x40020428
 800610c:	40020440 	.word	0x40020440
 8006110:	40020458 	.word	0x40020458
 8006114:	40020470 	.word	0x40020470
 8006118:	40020488 	.word	0x40020488
 800611c:	400204a0 	.word	0x400204a0
 8006120:	400204b8 	.word	0x400204b8
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 020a 	bic.w	r2, r2, #10
 8006132:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 8097 	beq.w	800627c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006156:	e091      	b.n	800627c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	2208      	movs	r2, #8
 8006162:	409a      	lsls	r2, r3
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	4013      	ands	r3, r2
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8088 	beq.w	800627e <HAL_DMA_IRQHandler+0xe0e>
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8082 	beq.w	800627e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a41      	ldr	r2, [pc, #260]	@ (8006284 <HAL_DMA_IRQHandler+0xe14>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d04a      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a3f      	ldr	r2, [pc, #252]	@ (8006288 <HAL_DMA_IRQHandler+0xe18>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d045      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a3e      	ldr	r2, [pc, #248]	@ (800628c <HAL_DMA_IRQHandler+0xe1c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d040      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a3c      	ldr	r2, [pc, #240]	@ (8006290 <HAL_DMA_IRQHandler+0xe20>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d03b      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a3b      	ldr	r2, [pc, #236]	@ (8006294 <HAL_DMA_IRQHandler+0xe24>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d036      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a39      	ldr	r2, [pc, #228]	@ (8006298 <HAL_DMA_IRQHandler+0xe28>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d031      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a38      	ldr	r2, [pc, #224]	@ (800629c <HAL_DMA_IRQHandler+0xe2c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d02c      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a36      	ldr	r2, [pc, #216]	@ (80062a0 <HAL_DMA_IRQHandler+0xe30>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d027      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a35      	ldr	r2, [pc, #212]	@ (80062a4 <HAL_DMA_IRQHandler+0xe34>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d022      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a33      	ldr	r2, [pc, #204]	@ (80062a8 <HAL_DMA_IRQHandler+0xe38>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d01d      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a32      	ldr	r2, [pc, #200]	@ (80062ac <HAL_DMA_IRQHandler+0xe3c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d018      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a30      	ldr	r2, [pc, #192]	@ (80062b0 <HAL_DMA_IRQHandler+0xe40>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d013      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a2f      	ldr	r2, [pc, #188]	@ (80062b4 <HAL_DMA_IRQHandler+0xe44>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00e      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a2d      	ldr	r2, [pc, #180]	@ (80062b8 <HAL_DMA_IRQHandler+0xe48>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d009      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a2c      	ldr	r2, [pc, #176]	@ (80062bc <HAL_DMA_IRQHandler+0xe4c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d004      	beq.n	800621a <HAL_DMA_IRQHandler+0xdaa>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a2a      	ldr	r2, [pc, #168]	@ (80062c0 <HAL_DMA_IRQHandler+0xe50>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d108      	bne.n	800622c <HAL_DMA_IRQHandler+0xdbc>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 021c 	bic.w	r2, r2, #28
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	e007      	b.n	800623c <HAL_DMA_IRQHandler+0xdcc>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 020e 	bic.w	r2, r2, #14
 800623a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006240:	f003 031f 	and.w	r3, r3, #31
 8006244:	2201      	movs	r2, #1
 8006246:	409a      	lsls	r2, r3
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	4798      	blx	r3
 8006272:	e004      	b.n	800627e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006274:	bf00      	nop
 8006276:	e002      	b.n	800627e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006278:	bf00      	nop
 800627a:	e000      	b.n	800627e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800627c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800627e:	3728      	adds	r7, #40	@ 0x28
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	40020010 	.word	0x40020010
 8006288:	40020028 	.word	0x40020028
 800628c:	40020040 	.word	0x40020040
 8006290:	40020058 	.word	0x40020058
 8006294:	40020070 	.word	0x40020070
 8006298:	40020088 	.word	0x40020088
 800629c:	400200a0 	.word	0x400200a0
 80062a0:	400200b8 	.word	0x400200b8
 80062a4:	40020410 	.word	0x40020410
 80062a8:	40020428 	.word	0x40020428
 80062ac:	40020440 	.word	0x40020440
 80062b0:	40020458 	.word	0x40020458
 80062b4:	40020470 	.word	0x40020470
 80062b8:	40020488 	.word	0x40020488
 80062bc:	400204a0 	.word	0x400204a0
 80062c0:	400204b8 	.word	0x400204b8

080062c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a7f      	ldr	r2, [pc, #508]	@ (80064e0 <DMA_SetConfig+0x21c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d072      	beq.n	80063ce <DMA_SetConfig+0x10a>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a7d      	ldr	r2, [pc, #500]	@ (80064e4 <DMA_SetConfig+0x220>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d06d      	beq.n	80063ce <DMA_SetConfig+0x10a>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a7c      	ldr	r2, [pc, #496]	@ (80064e8 <DMA_SetConfig+0x224>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d068      	beq.n	80063ce <DMA_SetConfig+0x10a>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a7a      	ldr	r2, [pc, #488]	@ (80064ec <DMA_SetConfig+0x228>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d063      	beq.n	80063ce <DMA_SetConfig+0x10a>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a79      	ldr	r2, [pc, #484]	@ (80064f0 <DMA_SetConfig+0x22c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d05e      	beq.n	80063ce <DMA_SetConfig+0x10a>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a77      	ldr	r2, [pc, #476]	@ (80064f4 <DMA_SetConfig+0x230>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d059      	beq.n	80063ce <DMA_SetConfig+0x10a>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a76      	ldr	r2, [pc, #472]	@ (80064f8 <DMA_SetConfig+0x234>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d054      	beq.n	80063ce <DMA_SetConfig+0x10a>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a74      	ldr	r2, [pc, #464]	@ (80064fc <DMA_SetConfig+0x238>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d04f      	beq.n	80063ce <DMA_SetConfig+0x10a>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a73      	ldr	r2, [pc, #460]	@ (8006500 <DMA_SetConfig+0x23c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d04a      	beq.n	80063ce <DMA_SetConfig+0x10a>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a71      	ldr	r2, [pc, #452]	@ (8006504 <DMA_SetConfig+0x240>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d045      	beq.n	80063ce <DMA_SetConfig+0x10a>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a70      	ldr	r2, [pc, #448]	@ (8006508 <DMA_SetConfig+0x244>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d040      	beq.n	80063ce <DMA_SetConfig+0x10a>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a6e      	ldr	r2, [pc, #440]	@ (800650c <DMA_SetConfig+0x248>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d03b      	beq.n	80063ce <DMA_SetConfig+0x10a>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a6d      	ldr	r2, [pc, #436]	@ (8006510 <DMA_SetConfig+0x24c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d036      	beq.n	80063ce <DMA_SetConfig+0x10a>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a6b      	ldr	r2, [pc, #428]	@ (8006514 <DMA_SetConfig+0x250>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d031      	beq.n	80063ce <DMA_SetConfig+0x10a>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a6a      	ldr	r2, [pc, #424]	@ (8006518 <DMA_SetConfig+0x254>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d02c      	beq.n	80063ce <DMA_SetConfig+0x10a>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a68      	ldr	r2, [pc, #416]	@ (800651c <DMA_SetConfig+0x258>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d027      	beq.n	80063ce <DMA_SetConfig+0x10a>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a67      	ldr	r2, [pc, #412]	@ (8006520 <DMA_SetConfig+0x25c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d022      	beq.n	80063ce <DMA_SetConfig+0x10a>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a65      	ldr	r2, [pc, #404]	@ (8006524 <DMA_SetConfig+0x260>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01d      	beq.n	80063ce <DMA_SetConfig+0x10a>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a64      	ldr	r2, [pc, #400]	@ (8006528 <DMA_SetConfig+0x264>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d018      	beq.n	80063ce <DMA_SetConfig+0x10a>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a62      	ldr	r2, [pc, #392]	@ (800652c <DMA_SetConfig+0x268>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d013      	beq.n	80063ce <DMA_SetConfig+0x10a>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a61      	ldr	r2, [pc, #388]	@ (8006530 <DMA_SetConfig+0x26c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00e      	beq.n	80063ce <DMA_SetConfig+0x10a>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a5f      	ldr	r2, [pc, #380]	@ (8006534 <DMA_SetConfig+0x270>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d009      	beq.n	80063ce <DMA_SetConfig+0x10a>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a5e      	ldr	r2, [pc, #376]	@ (8006538 <DMA_SetConfig+0x274>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d004      	beq.n	80063ce <DMA_SetConfig+0x10a>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a5c      	ldr	r2, [pc, #368]	@ (800653c <DMA_SetConfig+0x278>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d101      	bne.n	80063d2 <DMA_SetConfig+0x10e>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <DMA_SetConfig+0x110>
 80063d2:	2300      	movs	r3, #0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00d      	beq.n	80063f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80063e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80063f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a39      	ldr	r2, [pc, #228]	@ (80064e0 <DMA_SetConfig+0x21c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d04a      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a38      	ldr	r2, [pc, #224]	@ (80064e4 <DMA_SetConfig+0x220>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d045      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a36      	ldr	r2, [pc, #216]	@ (80064e8 <DMA_SetConfig+0x224>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d040      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a35      	ldr	r2, [pc, #212]	@ (80064ec <DMA_SetConfig+0x228>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d03b      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a33      	ldr	r2, [pc, #204]	@ (80064f0 <DMA_SetConfig+0x22c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d036      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a32      	ldr	r2, [pc, #200]	@ (80064f4 <DMA_SetConfig+0x230>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d031      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a30      	ldr	r2, [pc, #192]	@ (80064f8 <DMA_SetConfig+0x234>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d02c      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a2f      	ldr	r2, [pc, #188]	@ (80064fc <DMA_SetConfig+0x238>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d027      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a2d      	ldr	r2, [pc, #180]	@ (8006500 <DMA_SetConfig+0x23c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d022      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a2c      	ldr	r2, [pc, #176]	@ (8006504 <DMA_SetConfig+0x240>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d01d      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a2a      	ldr	r2, [pc, #168]	@ (8006508 <DMA_SetConfig+0x244>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d018      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a29      	ldr	r2, [pc, #164]	@ (800650c <DMA_SetConfig+0x248>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d013      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a27      	ldr	r2, [pc, #156]	@ (8006510 <DMA_SetConfig+0x24c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00e      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a26      	ldr	r2, [pc, #152]	@ (8006514 <DMA_SetConfig+0x250>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d009      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a24      	ldr	r2, [pc, #144]	@ (8006518 <DMA_SetConfig+0x254>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d004      	beq.n	8006494 <DMA_SetConfig+0x1d0>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a23      	ldr	r2, [pc, #140]	@ (800651c <DMA_SetConfig+0x258>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d101      	bne.n	8006498 <DMA_SetConfig+0x1d4>
 8006494:	2301      	movs	r3, #1
 8006496:	e000      	b.n	800649a <DMA_SetConfig+0x1d6>
 8006498:	2300      	movs	r3, #0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d059      	beq.n	8006552 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	223f      	movs	r2, #63	@ 0x3f
 80064a8:	409a      	lsls	r2, r3
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80064bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b40      	cmp	r3, #64	@ 0x40
 80064cc:	d138      	bne.n	8006540 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80064de:	e086      	b.n	80065ee <DMA_SetConfig+0x32a>
 80064e0:	40020010 	.word	0x40020010
 80064e4:	40020028 	.word	0x40020028
 80064e8:	40020040 	.word	0x40020040
 80064ec:	40020058 	.word	0x40020058
 80064f0:	40020070 	.word	0x40020070
 80064f4:	40020088 	.word	0x40020088
 80064f8:	400200a0 	.word	0x400200a0
 80064fc:	400200b8 	.word	0x400200b8
 8006500:	40020410 	.word	0x40020410
 8006504:	40020428 	.word	0x40020428
 8006508:	40020440 	.word	0x40020440
 800650c:	40020458 	.word	0x40020458
 8006510:	40020470 	.word	0x40020470
 8006514:	40020488 	.word	0x40020488
 8006518:	400204a0 	.word	0x400204a0
 800651c:	400204b8 	.word	0x400204b8
 8006520:	58025408 	.word	0x58025408
 8006524:	5802541c 	.word	0x5802541c
 8006528:	58025430 	.word	0x58025430
 800652c:	58025444 	.word	0x58025444
 8006530:	58025458 	.word	0x58025458
 8006534:	5802546c 	.word	0x5802546c
 8006538:	58025480 	.word	0x58025480
 800653c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	60da      	str	r2, [r3, #12]
}
 8006550:	e04d      	b.n	80065ee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a29      	ldr	r2, [pc, #164]	@ (80065fc <DMA_SetConfig+0x338>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d022      	beq.n	80065a2 <DMA_SetConfig+0x2de>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a27      	ldr	r2, [pc, #156]	@ (8006600 <DMA_SetConfig+0x33c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d01d      	beq.n	80065a2 <DMA_SetConfig+0x2de>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a26      	ldr	r2, [pc, #152]	@ (8006604 <DMA_SetConfig+0x340>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d018      	beq.n	80065a2 <DMA_SetConfig+0x2de>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a24      	ldr	r2, [pc, #144]	@ (8006608 <DMA_SetConfig+0x344>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <DMA_SetConfig+0x2de>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a23      	ldr	r2, [pc, #140]	@ (800660c <DMA_SetConfig+0x348>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d00e      	beq.n	80065a2 <DMA_SetConfig+0x2de>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a21      	ldr	r2, [pc, #132]	@ (8006610 <DMA_SetConfig+0x34c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d009      	beq.n	80065a2 <DMA_SetConfig+0x2de>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a20      	ldr	r2, [pc, #128]	@ (8006614 <DMA_SetConfig+0x350>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d004      	beq.n	80065a2 <DMA_SetConfig+0x2de>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1e      	ldr	r2, [pc, #120]	@ (8006618 <DMA_SetConfig+0x354>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d101      	bne.n	80065a6 <DMA_SetConfig+0x2e2>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <DMA_SetConfig+0x2e4>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d020      	beq.n	80065ee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	2201      	movs	r2, #1
 80065b6:	409a      	lsls	r2, r3
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	2b40      	cmp	r3, #64	@ 0x40
 80065ca:	d108      	bne.n	80065de <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	60da      	str	r2, [r3, #12]
}
 80065dc:	e007      	b.n	80065ee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	60da      	str	r2, [r3, #12]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	58025408 	.word	0x58025408
 8006600:	5802541c 	.word	0x5802541c
 8006604:	58025430 	.word	0x58025430
 8006608:	58025444 	.word	0x58025444
 800660c:	58025458 	.word	0x58025458
 8006610:	5802546c 	.word	0x5802546c
 8006614:	58025480 	.word	0x58025480
 8006618:	58025494 	.word	0x58025494

0800661c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a42      	ldr	r2, [pc, #264]	@ (8006734 <DMA_CalcBaseAndBitshift+0x118>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d04a      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a41      	ldr	r2, [pc, #260]	@ (8006738 <DMA_CalcBaseAndBitshift+0x11c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d045      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a3f      	ldr	r2, [pc, #252]	@ (800673c <DMA_CalcBaseAndBitshift+0x120>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d040      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a3e      	ldr	r2, [pc, #248]	@ (8006740 <DMA_CalcBaseAndBitshift+0x124>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d03b      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a3c      	ldr	r2, [pc, #240]	@ (8006744 <DMA_CalcBaseAndBitshift+0x128>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d036      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a3b      	ldr	r2, [pc, #236]	@ (8006748 <DMA_CalcBaseAndBitshift+0x12c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d031      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a39      	ldr	r2, [pc, #228]	@ (800674c <DMA_CalcBaseAndBitshift+0x130>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d02c      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a38      	ldr	r2, [pc, #224]	@ (8006750 <DMA_CalcBaseAndBitshift+0x134>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d027      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a36      	ldr	r2, [pc, #216]	@ (8006754 <DMA_CalcBaseAndBitshift+0x138>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d022      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a35      	ldr	r2, [pc, #212]	@ (8006758 <DMA_CalcBaseAndBitshift+0x13c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d01d      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a33      	ldr	r2, [pc, #204]	@ (800675c <DMA_CalcBaseAndBitshift+0x140>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d018      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a32      	ldr	r2, [pc, #200]	@ (8006760 <DMA_CalcBaseAndBitshift+0x144>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d013      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a30      	ldr	r2, [pc, #192]	@ (8006764 <DMA_CalcBaseAndBitshift+0x148>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00e      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a2f      	ldr	r2, [pc, #188]	@ (8006768 <DMA_CalcBaseAndBitshift+0x14c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d009      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2d      	ldr	r2, [pc, #180]	@ (800676c <DMA_CalcBaseAndBitshift+0x150>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <DMA_CalcBaseAndBitshift+0xa8>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a2c      	ldr	r2, [pc, #176]	@ (8006770 <DMA_CalcBaseAndBitshift+0x154>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d101      	bne.n	80066c8 <DMA_CalcBaseAndBitshift+0xac>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <DMA_CalcBaseAndBitshift+0xae>
 80066c8:	2300      	movs	r3, #0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d024      	beq.n	8006718 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	3b10      	subs	r3, #16
 80066d6:	4a27      	ldr	r2, [pc, #156]	@ (8006774 <DMA_CalcBaseAndBitshift+0x158>)
 80066d8:	fba2 2303 	umull	r2, r3, r2, r3
 80066dc:	091b      	lsrs	r3, r3, #4
 80066de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	4a24      	ldr	r2, [pc, #144]	@ (8006778 <DMA_CalcBaseAndBitshift+0x15c>)
 80066e8:	5cd3      	ldrb	r3, [r2, r3]
 80066ea:	461a      	mov	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d908      	bls.n	8006708 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	4b1f      	ldr	r3, [pc, #124]	@ (800677c <DMA_CalcBaseAndBitshift+0x160>)
 80066fe:	4013      	ands	r3, r2
 8006700:	1d1a      	adds	r2, r3, #4
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	659a      	str	r2, [r3, #88]	@ 0x58
 8006706:	e00d      	b.n	8006724 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	461a      	mov	r2, r3
 800670e:	4b1b      	ldr	r3, [pc, #108]	@ (800677c <DMA_CalcBaseAndBitshift+0x160>)
 8006710:	4013      	ands	r3, r2
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6593      	str	r3, [r2, #88]	@ 0x58
 8006716:	e005      	b.n	8006724 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	40020010 	.word	0x40020010
 8006738:	40020028 	.word	0x40020028
 800673c:	40020040 	.word	0x40020040
 8006740:	40020058 	.word	0x40020058
 8006744:	40020070 	.word	0x40020070
 8006748:	40020088 	.word	0x40020088
 800674c:	400200a0 	.word	0x400200a0
 8006750:	400200b8 	.word	0x400200b8
 8006754:	40020410 	.word	0x40020410
 8006758:	40020428 	.word	0x40020428
 800675c:	40020440 	.word	0x40020440
 8006760:	40020458 	.word	0x40020458
 8006764:	40020470 	.word	0x40020470
 8006768:	40020488 	.word	0x40020488
 800676c:	400204a0 	.word	0x400204a0
 8006770:	400204b8 	.word	0x400204b8
 8006774:	aaaaaaab 	.word	0xaaaaaaab
 8006778:	08021c28 	.word	0x08021c28
 800677c:	fffffc00 	.word	0xfffffc00

08006780 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d120      	bne.n	80067d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006798:	2b03      	cmp	r3, #3
 800679a:	d858      	bhi.n	800684e <DMA_CheckFifoParam+0xce>
 800679c:	a201      	add	r2, pc, #4	@ (adr r2, 80067a4 <DMA_CheckFifoParam+0x24>)
 800679e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a2:	bf00      	nop
 80067a4:	080067b5 	.word	0x080067b5
 80067a8:	080067c7 	.word	0x080067c7
 80067ac:	080067b5 	.word	0x080067b5
 80067b0:	0800684f 	.word	0x0800684f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d048      	beq.n	8006852 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067c4:	e045      	b.n	8006852 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067ce:	d142      	bne.n	8006856 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067d4:	e03f      	b.n	8006856 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067de:	d123      	bne.n	8006828 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	d838      	bhi.n	800685a <DMA_CheckFifoParam+0xda>
 80067e8:	a201      	add	r2, pc, #4	@ (adr r2, 80067f0 <DMA_CheckFifoParam+0x70>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	08006801 	.word	0x08006801
 80067f4:	08006807 	.word	0x08006807
 80067f8:	08006801 	.word	0x08006801
 80067fc:	08006819 	.word	0x08006819
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	73fb      	strb	r3, [r7, #15]
        break;
 8006804:	e030      	b.n	8006868 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d025      	beq.n	800685e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006816:	e022      	b.n	800685e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006820:	d11f      	bne.n	8006862 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006826:	e01c      	b.n	8006862 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682c:	2b02      	cmp	r3, #2
 800682e:	d902      	bls.n	8006836 <DMA_CheckFifoParam+0xb6>
 8006830:	2b03      	cmp	r3, #3
 8006832:	d003      	beq.n	800683c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006834:	e018      	b.n	8006868 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	73fb      	strb	r3, [r7, #15]
        break;
 800683a:	e015      	b.n	8006868 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006840:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00e      	beq.n	8006866 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	73fb      	strb	r3, [r7, #15]
    break;
 800684c:	e00b      	b.n	8006866 <DMA_CheckFifoParam+0xe6>
        break;
 800684e:	bf00      	nop
 8006850:	e00a      	b.n	8006868 <DMA_CheckFifoParam+0xe8>
        break;
 8006852:	bf00      	nop
 8006854:	e008      	b.n	8006868 <DMA_CheckFifoParam+0xe8>
        break;
 8006856:	bf00      	nop
 8006858:	e006      	b.n	8006868 <DMA_CheckFifoParam+0xe8>
        break;
 800685a:	bf00      	nop
 800685c:	e004      	b.n	8006868 <DMA_CheckFifoParam+0xe8>
        break;
 800685e:	bf00      	nop
 8006860:	e002      	b.n	8006868 <DMA_CheckFifoParam+0xe8>
        break;
 8006862:	bf00      	nop
 8006864:	e000      	b.n	8006868 <DMA_CheckFifoParam+0xe8>
    break;
 8006866:	bf00      	nop
    }
  }

  return status;
 8006868:	7bfb      	ldrb	r3, [r7, #15]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop

08006878 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a38      	ldr	r2, [pc, #224]	@ (800696c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d022      	beq.n	80068d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a36      	ldr	r2, [pc, #216]	@ (8006970 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d01d      	beq.n	80068d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a35      	ldr	r2, [pc, #212]	@ (8006974 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d018      	beq.n	80068d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a33      	ldr	r2, [pc, #204]	@ (8006978 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a32      	ldr	r2, [pc, #200]	@ (800697c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00e      	beq.n	80068d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a30      	ldr	r2, [pc, #192]	@ (8006980 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d009      	beq.n	80068d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a2f      	ldr	r2, [pc, #188]	@ (8006984 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d004      	beq.n	80068d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006988 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d101      	bne.n	80068da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80068da:	2300      	movs	r3, #0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01a      	beq.n	8006916 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	3b08      	subs	r3, #8
 80068e8:	4a28      	ldr	r2, [pc, #160]	@ (800698c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80068ea:	fba2 2303 	umull	r2, r3, r2, r3
 80068ee:	091b      	lsrs	r3, r3, #4
 80068f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4b26      	ldr	r3, [pc, #152]	@ (8006990 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	461a      	mov	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a24      	ldr	r2, [pc, #144]	@ (8006994 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006904:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	2201      	movs	r2, #1
 800690e:	409a      	lsls	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006914:	e024      	b.n	8006960 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	3b10      	subs	r3, #16
 800691e:	4a1e      	ldr	r2, [pc, #120]	@ (8006998 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006920:	fba2 2303 	umull	r2, r3, r2, r3
 8006924:	091b      	lsrs	r3, r3, #4
 8006926:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4a1c      	ldr	r2, [pc, #112]	@ (800699c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d806      	bhi.n	800693e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4a1b      	ldr	r2, [pc, #108]	@ (80069a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d902      	bls.n	800693e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3308      	adds	r3, #8
 800693c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4b18      	ldr	r3, [pc, #96]	@ (80069a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	461a      	mov	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a16      	ldr	r2, [pc, #88]	@ (80069a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006950:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f003 031f 	and.w	r3, r3, #31
 8006958:	2201      	movs	r2, #1
 800695a:	409a      	lsls	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006960:	bf00      	nop
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	58025408 	.word	0x58025408
 8006970:	5802541c 	.word	0x5802541c
 8006974:	58025430 	.word	0x58025430
 8006978:	58025444 	.word	0x58025444
 800697c:	58025458 	.word	0x58025458
 8006980:	5802546c 	.word	0x5802546c
 8006984:	58025480 	.word	0x58025480
 8006988:	58025494 	.word	0x58025494
 800698c:	cccccccd 	.word	0xcccccccd
 8006990:	16009600 	.word	0x16009600
 8006994:	58025880 	.word	0x58025880
 8006998:	aaaaaaab 	.word	0xaaaaaaab
 800699c:	400204b8 	.word	0x400204b8
 80069a0:	4002040f 	.word	0x4002040f
 80069a4:	10008200 	.word	0x10008200
 80069a8:	40020880 	.word	0x40020880

080069ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d04a      	beq.n	8006a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d847      	bhi.n	8006a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a25      	ldr	r2, [pc, #148]	@ (8006a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d022      	beq.n	8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a24      	ldr	r2, [pc, #144]	@ (8006a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d01d      	beq.n	8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a22      	ldr	r2, [pc, #136]	@ (8006a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d018      	beq.n	8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a21      	ldr	r2, [pc, #132]	@ (8006a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d013      	beq.n	8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00e      	beq.n	8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d009      	beq.n	8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1c      	ldr	r2, [pc, #112]	@ (8006a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d004      	beq.n	8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1b      	ldr	r2, [pc, #108]	@ (8006a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d101      	bne.n	8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4b17      	ldr	r3, [pc, #92]	@ (8006a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a15      	ldr	r2, [pc, #84]	@ (8006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006a34:	671a      	str	r2, [r3, #112]	@ 0x70
 8006a36:	e009      	b.n	8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4b14      	ldr	r3, [pc, #80]	@ (8006a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	461a      	mov	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a11      	ldr	r2, [pc, #68]	@ (8006a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006a4a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	2201      	movs	r2, #1
 8006a52:	409a      	lsls	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006a58:	bf00      	nop
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	58025408 	.word	0x58025408
 8006a68:	5802541c 	.word	0x5802541c
 8006a6c:	58025430 	.word	0x58025430
 8006a70:	58025444 	.word	0x58025444
 8006a74:	58025458 	.word	0x58025458
 8006a78:	5802546c 	.word	0x5802546c
 8006a7c:	58025480 	.word	0x58025480
 8006a80:	58025494 	.word	0x58025494
 8006a84:	1600963f 	.word	0x1600963f
 8006a88:	58025940 	.word	0x58025940
 8006a8c:	1000823f 	.word	0x1000823f
 8006a90:	40020940 	.word	0x40020940

08006a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b089      	sub	sp, #36	@ 0x24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006aa2:	4b86      	ldr	r3, [pc, #536]	@ (8006cbc <HAL_GPIO_Init+0x228>)
 8006aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006aa6:	e18c      	b.n	8006dc2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	2101      	movs	r1, #1
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 817e 	beq.w	8006dbc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f003 0303 	and.w	r3, r3, #3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d005      	beq.n	8006ad8 <HAL_GPIO_Init+0x44>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f003 0303 	and.w	r3, r3, #3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d130      	bne.n	8006b3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	2203      	movs	r2, #3
 8006ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae8:	43db      	mvns	r3, r3
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	4013      	ands	r3, r2
 8006aee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b0e:	2201      	movs	r2, #1
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	fa02 f303 	lsl.w	r3, r2, r3
 8006b16:	43db      	mvns	r3, r3
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	091b      	lsrs	r3, r3, #4
 8006b24:	f003 0201 	and.w	r2, r3, #1
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d017      	beq.n	8006b76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	2203      	movs	r2, #3
 8006b52:	fa02 f303 	lsl.w	r3, r2, r3
 8006b56:	43db      	mvns	r3, r3
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d123      	bne.n	8006bca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	08da      	lsrs	r2, r3, #3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3208      	adds	r2, #8
 8006b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	220f      	movs	r2, #15
 8006b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9e:	43db      	mvns	r3, r3
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	08da      	lsrs	r2, r3, #3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3208      	adds	r2, #8
 8006bc4:	69b9      	ldr	r1, [r7, #24]
 8006bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	2203      	movs	r2, #3
 8006bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bda:	43db      	mvns	r3, r3
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4013      	ands	r3, r2
 8006be0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f003 0203 	and.w	r2, r3, #3
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 80d8 	beq.w	8006dbc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8006cc0 <HAL_GPIO_Init+0x22c>)
 8006c0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c12:	4a2b      	ldr	r2, [pc, #172]	@ (8006cc0 <HAL_GPIO_Init+0x22c>)
 8006c14:	f043 0302 	orr.w	r3, r3, #2
 8006c18:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006c1c:	4b28      	ldr	r3, [pc, #160]	@ (8006cc0 <HAL_GPIO_Init+0x22c>)
 8006c1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	60fb      	str	r3, [r7, #12]
 8006c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c2a:	4a26      	ldr	r2, [pc, #152]	@ (8006cc4 <HAL_GPIO_Init+0x230>)
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	089b      	lsrs	r3, r3, #2
 8006c30:	3302      	adds	r3, #2
 8006c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	220f      	movs	r2, #15
 8006c42:	fa02 f303 	lsl.w	r3, r2, r3
 8006c46:	43db      	mvns	r3, r3
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a1d      	ldr	r2, [pc, #116]	@ (8006cc8 <HAL_GPIO_Init+0x234>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d04a      	beq.n	8006cec <HAL_GPIO_Init+0x258>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a1c      	ldr	r2, [pc, #112]	@ (8006ccc <HAL_GPIO_Init+0x238>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d02b      	beq.n	8006cb6 <HAL_GPIO_Init+0x222>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd0 <HAL_GPIO_Init+0x23c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d025      	beq.n	8006cb2 <HAL_GPIO_Init+0x21e>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a1a      	ldr	r2, [pc, #104]	@ (8006cd4 <HAL_GPIO_Init+0x240>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d01f      	beq.n	8006cae <HAL_GPIO_Init+0x21a>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a19      	ldr	r2, [pc, #100]	@ (8006cd8 <HAL_GPIO_Init+0x244>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d019      	beq.n	8006caa <HAL_GPIO_Init+0x216>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a18      	ldr	r2, [pc, #96]	@ (8006cdc <HAL_GPIO_Init+0x248>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d013      	beq.n	8006ca6 <HAL_GPIO_Init+0x212>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a17      	ldr	r2, [pc, #92]	@ (8006ce0 <HAL_GPIO_Init+0x24c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d00d      	beq.n	8006ca2 <HAL_GPIO_Init+0x20e>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a16      	ldr	r2, [pc, #88]	@ (8006ce4 <HAL_GPIO_Init+0x250>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d007      	beq.n	8006c9e <HAL_GPIO_Init+0x20a>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a15      	ldr	r2, [pc, #84]	@ (8006ce8 <HAL_GPIO_Init+0x254>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d101      	bne.n	8006c9a <HAL_GPIO_Init+0x206>
 8006c96:	2309      	movs	r3, #9
 8006c98:	e029      	b.n	8006cee <HAL_GPIO_Init+0x25a>
 8006c9a:	230a      	movs	r3, #10
 8006c9c:	e027      	b.n	8006cee <HAL_GPIO_Init+0x25a>
 8006c9e:	2307      	movs	r3, #7
 8006ca0:	e025      	b.n	8006cee <HAL_GPIO_Init+0x25a>
 8006ca2:	2306      	movs	r3, #6
 8006ca4:	e023      	b.n	8006cee <HAL_GPIO_Init+0x25a>
 8006ca6:	2305      	movs	r3, #5
 8006ca8:	e021      	b.n	8006cee <HAL_GPIO_Init+0x25a>
 8006caa:	2304      	movs	r3, #4
 8006cac:	e01f      	b.n	8006cee <HAL_GPIO_Init+0x25a>
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e01d      	b.n	8006cee <HAL_GPIO_Init+0x25a>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e01b      	b.n	8006cee <HAL_GPIO_Init+0x25a>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e019      	b.n	8006cee <HAL_GPIO_Init+0x25a>
 8006cba:	bf00      	nop
 8006cbc:	58000080 	.word	0x58000080
 8006cc0:	58024400 	.word	0x58024400
 8006cc4:	58000400 	.word	0x58000400
 8006cc8:	58020000 	.word	0x58020000
 8006ccc:	58020400 	.word	0x58020400
 8006cd0:	58020800 	.word	0x58020800
 8006cd4:	58020c00 	.word	0x58020c00
 8006cd8:	58021000 	.word	0x58021000
 8006cdc:	58021400 	.word	0x58021400
 8006ce0:	58021800 	.word	0x58021800
 8006ce4:	58021c00 	.word	0x58021c00
 8006ce8:	58022400 	.word	0x58022400
 8006cec:	2300      	movs	r3, #0
 8006cee:	69fa      	ldr	r2, [r7, #28]
 8006cf0:	f002 0203 	and.w	r2, r2, #3
 8006cf4:	0092      	lsls	r2, r2, #2
 8006cf6:	4093      	lsls	r3, r2
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cfe:	4938      	ldr	r1, [pc, #224]	@ (8006de0 <HAL_GPIO_Init+0x34c>)
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	089b      	lsrs	r3, r3, #2
 8006d04:	3302      	adds	r3, #2
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	43db      	mvns	r3, r3
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006d32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	43db      	mvns	r3, r3
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	43db      	mvns	r3, r3
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	4013      	ands	r3, r2
 8006d76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	43db      	mvns	r3, r3
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f47f ae6b 	bne.w	8006aa8 <HAL_GPIO_Init+0x14>
  }
}
 8006dd2:	bf00      	nop
 8006dd4:	bf00      	nop
 8006dd6:	3724      	adds	r7, #36	@ 0x24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	58000400 	.word	0x58000400

08006de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	807b      	strh	r3, [r7, #2]
 8006df0:	4613      	mov	r3, r2
 8006df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006df4:	787b      	ldrb	r3, [r7, #1]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dfa:	887a      	ldrh	r2, [r7, #2]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006e00:	e003      	b.n	8006e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006e02:	887b      	ldrh	r3, [r7, #2]
 8006e04:	041a      	lsls	r2, r3, #16
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	619a      	str	r2, [r3, #24]
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e24:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006e28:	88fb      	ldrh	r3, [r7, #6]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e34:	88fb      	ldrh	r3, [r7, #6]
 8006e36:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e3a:	88fb      	ldrh	r3, [r7, #6]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7f9 fc93 	bl	8000768 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e08b      	b.n	8006f76 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fa fed4 	bl	8001c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2224      	movs	r2, #36	@ 0x24
 8006e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0201 	bic.w	r2, r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006e9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006eac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d107      	bne.n	8006ec6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	e006      	b.n	8006ed4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006ed2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d108      	bne.n	8006eee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006eea:	605a      	str	r2, [r3, #4]
 8006eec:	e007      	b.n	8006efe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006efc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6859      	ldr	r1, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	4b1d      	ldr	r3, [pc, #116]	@ (8006f80 <HAL_I2C_Init+0x134>)
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691a      	ldr	r2, [r3, #16]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	69d9      	ldr	r1, [r3, #28]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a1a      	ldr	r2, [r3, #32]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	02008000 	.word	0x02008000

08006f84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b088      	sub	sp, #32
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	607a      	str	r2, [r7, #4]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	460b      	mov	r3, r1
 8006f92:	817b      	strh	r3, [r7, #10]
 8006f94:	4613      	mov	r3, r2
 8006f96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	f040 80fd 	bne.w	80071a0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d101      	bne.n	8006fb4 <HAL_I2C_Master_Transmit+0x30>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	e0f6      	b.n	80071a2 <HAL_I2C_Master_Transmit+0x21e>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006fbc:	f7fd f838 	bl	8004030 <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	2319      	movs	r3, #25
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 fa0a 	bl	80073e8 <I2C_WaitOnFlagUntilTimeout>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e0e1      	b.n	80071a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2221      	movs	r2, #33	@ 0x21
 8006fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2210      	movs	r2, #16
 8006fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	893a      	ldrh	r2, [r7, #8]
 8006ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800700a:	b29b      	uxth	r3, r3
 800700c:	2bff      	cmp	r3, #255	@ 0xff
 800700e:	d906      	bls.n	800701e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	22ff      	movs	r2, #255	@ 0xff
 8007014:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007016:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	e007      	b.n	800702e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007028:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800702c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	d024      	beq.n	8007080 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703a:	781a      	ldrb	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007050:	b29b      	uxth	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	b29a      	uxth	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800706a:	b2db      	uxtb	r3, r3
 800706c:	3301      	adds	r3, #1
 800706e:	b2da      	uxtb	r2, r3
 8007070:	8979      	ldrh	r1, [r7, #10]
 8007072:	4b4e      	ldr	r3, [pc, #312]	@ (80071ac <HAL_I2C_Master_Transmit+0x228>)
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 fc05 	bl	8007888 <I2C_TransferConfig>
 800707e:	e066      	b.n	800714e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007084:	b2da      	uxtb	r2, r3
 8007086:	8979      	ldrh	r1, [r7, #10]
 8007088:	4b48      	ldr	r3, [pc, #288]	@ (80071ac <HAL_I2C_Master_Transmit+0x228>)
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f000 fbfa 	bl	8007888 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007094:	e05b      	b.n	800714e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	6a39      	ldr	r1, [r7, #32]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 f9fd 	bl	800749a <I2C_WaitOnTXISFlagUntilTimeout>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e07b      	b.n	80071a2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ae:	781a      	ldrb	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070de:	b29b      	uxth	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d034      	beq.n	800714e <HAL_I2C_Master_Transmit+0x1ca>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d130      	bne.n	800714e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	2200      	movs	r2, #0
 80070f4:	2180      	movs	r1, #128	@ 0x80
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f976 	bl	80073e8 <I2C_WaitOnFlagUntilTimeout>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e04d      	b.n	80071a2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710a:	b29b      	uxth	r3, r3
 800710c:	2bff      	cmp	r3, #255	@ 0xff
 800710e:	d90e      	bls.n	800712e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	22ff      	movs	r2, #255	@ 0xff
 8007114:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800711a:	b2da      	uxtb	r2, r3
 800711c:	8979      	ldrh	r1, [r7, #10]
 800711e:	2300      	movs	r3, #0
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 fbae 	bl	8007888 <I2C_TransferConfig>
 800712c:	e00f      	b.n	800714e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800713c:	b2da      	uxtb	r2, r3
 800713e:	8979      	ldrh	r1, [r7, #10]
 8007140:	2300      	movs	r3, #0
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 fb9d 	bl	8007888 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007152:	b29b      	uxth	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d19e      	bne.n	8007096 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	6a39      	ldr	r1, [r7, #32]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f9e3 	bl	8007528 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e01a      	b.n	80071a2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2220      	movs	r2, #32
 8007172:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6859      	ldr	r1, [r3, #4]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	4b0c      	ldr	r3, [pc, #48]	@ (80071b0 <HAL_I2C_Master_Transmit+0x22c>)
 8007180:	400b      	ands	r3, r1
 8007182:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	e000      	b.n	80071a2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80071a0:	2302      	movs	r3, #2
  }
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3718      	adds	r7, #24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	80002000 	.word	0x80002000
 80071b0:	fe00e800 	.word	0xfe00e800

080071b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	607a      	str	r2, [r7, #4]
 80071be:	461a      	mov	r2, r3
 80071c0:	460b      	mov	r3, r1
 80071c2:	817b      	strh	r3, [r7, #10]
 80071c4:	4613      	mov	r3, r2
 80071c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	f040 80db 	bne.w	800738c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_I2C_Master_Receive+0x30>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e0d4      	b.n	800738e <HAL_I2C_Master_Receive+0x1da>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071ec:	f7fc ff20 	bl	8004030 <HAL_GetTick>
 80071f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	2319      	movs	r3, #25
 80071f8:	2201      	movs	r2, #1
 80071fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 f8f2 	bl	80073e8 <I2C_WaitOnFlagUntilTimeout>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e0bf      	b.n	800738e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2222      	movs	r2, #34	@ 0x22
 8007212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2210      	movs	r2, #16
 800721a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	893a      	ldrh	r2, [r7, #8]
 800722e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800723a:	b29b      	uxth	r3, r3
 800723c:	2bff      	cmp	r3, #255	@ 0xff
 800723e:	d90e      	bls.n	800725e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	22ff      	movs	r2, #255	@ 0xff
 8007244:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800724a:	b2da      	uxtb	r2, r3
 800724c:	8979      	ldrh	r1, [r7, #10]
 800724e:	4b52      	ldr	r3, [pc, #328]	@ (8007398 <HAL_I2C_Master_Receive+0x1e4>)
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fb16 	bl	8007888 <I2C_TransferConfig>
 800725c:	e06d      	b.n	800733a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800726c:	b2da      	uxtb	r2, r3
 800726e:	8979      	ldrh	r1, [r7, #10]
 8007270:	4b49      	ldr	r3, [pc, #292]	@ (8007398 <HAL_I2C_Master_Receive+0x1e4>)
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 fb05 	bl	8007888 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800727e:	e05c      	b.n	800733a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	6a39      	ldr	r1, [r7, #32]
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f993 	bl	80075b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e07c      	b.n	800738e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072b0:	3b01      	subs	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072bc:	b29b      	uxth	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d034      	beq.n	800733a <HAL_I2C_Master_Receive+0x186>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d130      	bne.n	800733a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	2200      	movs	r2, #0
 80072e0:	2180      	movs	r1, #128	@ 0x80
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 f880 	bl	80073e8 <I2C_WaitOnFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e04d      	b.n	800738e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	2bff      	cmp	r3, #255	@ 0xff
 80072fa:	d90e      	bls.n	800731a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	22ff      	movs	r2, #255	@ 0xff
 8007300:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007306:	b2da      	uxtb	r2, r3
 8007308:	8979      	ldrh	r1, [r7, #10]
 800730a:	2300      	movs	r3, #0
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 fab8 	bl	8007888 <I2C_TransferConfig>
 8007318:	e00f      	b.n	800733a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007328:	b2da      	uxtb	r2, r3
 800732a:	8979      	ldrh	r1, [r7, #10]
 800732c:	2300      	movs	r3, #0
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 faa7 	bl	8007888 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800733e:	b29b      	uxth	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	d19d      	bne.n	8007280 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	6a39      	ldr	r1, [r7, #32]
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 f8ed 	bl	8007528 <I2C_WaitOnSTOPFlagUntilTimeout>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e01a      	b.n	800738e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2220      	movs	r2, #32
 800735e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6859      	ldr	r1, [r3, #4]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4b0c      	ldr	r3, [pc, #48]	@ (800739c <HAL_I2C_Master_Receive+0x1e8>)
 800736c:	400b      	ands	r3, r1
 800736e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2220      	movs	r2, #32
 8007374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	e000      	b.n	800738e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800738c:	2302      	movs	r3, #2
  }
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	80002400 	.word	0x80002400
 800739c:	fe00e800 	.word	0xfe00e800

080073a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d103      	bne.n	80073be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2200      	movs	r2, #0
 80073bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d007      	beq.n	80073dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	699a      	ldr	r2, [r3, #24]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0201 	orr.w	r2, r2, #1
 80073da:	619a      	str	r2, [r3, #24]
  }
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4613      	mov	r3, r2
 80073f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073f8:	e03b      	b.n	8007472 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 f962 	bl	80076c8 <I2C_IsErrorOccurred>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e041      	b.n	8007492 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007414:	d02d      	beq.n	8007472 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007416:	f7fc fe0b 	bl	8004030 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d302      	bcc.n	800742c <I2C_WaitOnFlagUntilTimeout+0x44>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d122      	bne.n	8007472 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	699a      	ldr	r2, [r3, #24]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	4013      	ands	r3, r2
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	429a      	cmp	r2, r3
 800743a:	bf0c      	ite	eq
 800743c:	2301      	moveq	r3, #1
 800743e:	2300      	movne	r3, #0
 8007440:	b2db      	uxtb	r3, r3
 8007442:	461a      	mov	r2, r3
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	429a      	cmp	r2, r3
 8007448:	d113      	bne.n	8007472 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800744e:	f043 0220 	orr.w	r2, r3, #32
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2220      	movs	r2, #32
 800745a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e00f      	b.n	8007492 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	699a      	ldr	r2, [r3, #24]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	4013      	ands	r3, r2
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	429a      	cmp	r2, r3
 8007480:	bf0c      	ite	eq
 8007482:	2301      	moveq	r3, #1
 8007484:	2300      	movne	r3, #0
 8007486:	b2db      	uxtb	r3, r3
 8007488:	461a      	mov	r2, r3
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	429a      	cmp	r2, r3
 800748e:	d0b4      	beq.n	80073fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074a6:	e033      	b.n	8007510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 f90b 	bl	80076c8 <I2C_IsErrorOccurred>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e031      	b.n	8007520 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c2:	d025      	beq.n	8007510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c4:	f7fc fdb4 	bl	8004030 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d302      	bcc.n	80074da <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d11a      	bne.n	8007510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d013      	beq.n	8007510 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ec:	f043 0220 	orr.w	r2, r3, #32
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e007      	b.n	8007520 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b02      	cmp	r3, #2
 800751c:	d1c4      	bne.n	80074a8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007534:	e02f      	b.n	8007596 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	68b9      	ldr	r1, [r7, #8]
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 f8c4 	bl	80076c8 <I2C_IsErrorOccurred>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e02d      	b.n	80075a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800754a:	f7fc fd71 	bl	8004030 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	429a      	cmp	r2, r3
 8007558:	d302      	bcc.n	8007560 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d11a      	bne.n	8007596 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b20      	cmp	r3, #32
 800756c:	d013      	beq.n	8007596 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007572:	f043 0220 	orr.w	r2, r3, #32
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e007      	b.n	80075a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	f003 0320 	and.w	r3, r3, #32
 80075a0:	2b20      	cmp	r3, #32
 80075a2:	d1c8      	bne.n	8007536 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
	...

080075b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80075c0:	e071      	b.n	80076a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	68b9      	ldr	r1, [r7, #8]
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f87e 	bl	80076c8 <I2C_IsErrorOccurred>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	d13b      	bne.n	800765c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d138      	bne.n	800765c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d105      	bne.n	8007604 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	f003 0310 	and.w	r3, r3, #16
 800760e:	2b10      	cmp	r3, #16
 8007610:	d121      	bne.n	8007656 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2210      	movs	r2, #16
 8007618:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2204      	movs	r2, #4
 800761e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2220      	movs	r2, #32
 8007626:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6859      	ldr	r1, [r3, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	4b24      	ldr	r3, [pc, #144]	@ (80076c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007634:	400b      	ands	r3, r1
 8007636:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	75fb      	strb	r3, [r7, #23]
 8007654:	e002      	b.n	800765c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800765c:	f7fc fce8 	bl	8004030 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	429a      	cmp	r2, r3
 800766a:	d302      	bcc.n	8007672 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d119      	bne.n	80076a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d116      	bne.n	80076a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b04      	cmp	r3, #4
 8007684:	d00f      	beq.n	80076a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800768a:	f043 0220 	orr.w	r2, r3, #32
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2220      	movs	r2, #32
 8007696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f003 0304 	and.w	r3, r3, #4
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	d002      	beq.n	80076ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d083      	beq.n	80075c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	fe00e800 	.word	0xfe00e800

080076c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08a      	sub	sp, #40	@ 0x28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	f003 0310 	and.w	r3, r3, #16
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d068      	beq.n	80077c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2210      	movs	r2, #16
 80076fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80076fc:	e049      	b.n	8007792 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007704:	d045      	beq.n	8007792 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007706:	f7fc fc93 	bl	8004030 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	429a      	cmp	r2, r3
 8007714:	d302      	bcc.n	800771c <I2C_IsErrorOccurred+0x54>
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d13a      	bne.n	8007792 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007726:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800772e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800773a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800773e:	d121      	bne.n	8007784 <I2C_IsErrorOccurred+0xbc>
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007746:	d01d      	beq.n	8007784 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007748:	7cfb      	ldrb	r3, [r7, #19]
 800774a:	2b20      	cmp	r3, #32
 800774c:	d01a      	beq.n	8007784 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800775c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800775e:	f7fc fc67 	bl	8004030 <HAL_GetTick>
 8007762:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007764:	e00e      	b.n	8007784 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007766:	f7fc fc63 	bl	8004030 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b19      	cmp	r3, #25
 8007772:	d907      	bls.n	8007784 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	f043 0320 	orr.w	r3, r3, #32
 800777a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007782:	e006      	b.n	8007792 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	f003 0320 	and.w	r3, r3, #32
 800778e:	2b20      	cmp	r3, #32
 8007790:	d1e9      	bne.n	8007766 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	2b20      	cmp	r3, #32
 800779e:	d003      	beq.n	80077a8 <I2C_IsErrorOccurred+0xe0>
 80077a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0aa      	beq.n	80076fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80077a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d103      	bne.n	80077b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2220      	movs	r2, #32
 80077b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	f043 0304 	orr.w	r3, r3, #4
 80077be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	f043 0301 	orr.w	r3, r3, #1
 80077de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00b      	beq.n	8007812 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	f043 0308 	orr.w	r3, r3, #8
 8007800:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800780a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	f043 0302 	orr.w	r3, r3, #2
 8007822:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800782c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01c      	beq.n	8007876 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f7ff fdaf 	bl	80073a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6859      	ldr	r1, [r3, #4]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	4b0d      	ldr	r3, [pc, #52]	@ (8007884 <I2C_IsErrorOccurred+0x1bc>)
 800784e:	400b      	ands	r3, r1
 8007850:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	431a      	orrs	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2220      	movs	r2, #32
 8007862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007876:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800787a:	4618      	mov	r0, r3
 800787c:	3728      	adds	r7, #40	@ 0x28
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	fe00e800 	.word	0xfe00e800

08007888 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	607b      	str	r3, [r7, #4]
 8007892:	460b      	mov	r3, r1
 8007894:	817b      	strh	r3, [r7, #10]
 8007896:	4613      	mov	r3, r2
 8007898:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800789a:	897b      	ldrh	r3, [r7, #10]
 800789c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80078a0:	7a7b      	ldrb	r3, [r7, #9]
 80078a2:	041b      	lsls	r3, r3, #16
 80078a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078a8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078b6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	0d5b      	lsrs	r3, r3, #21
 80078c2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80078c6:	4b08      	ldr	r3, [pc, #32]	@ (80078e8 <I2C_TransferConfig+0x60>)
 80078c8:	430b      	orrs	r3, r1
 80078ca:	43db      	mvns	r3, r3
 80078cc:	ea02 0103 	and.w	r1, r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80078da:	bf00      	nop
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	03ff63ff 	.word	0x03ff63ff

080078ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b20      	cmp	r3, #32
 8007900:	d138      	bne.n	8007974 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007908:	2b01      	cmp	r3, #1
 800790a:	d101      	bne.n	8007910 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800790c:	2302      	movs	r3, #2
 800790e:	e032      	b.n	8007976 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2224      	movs	r2, #36	@ 0x24
 800791c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 0201 	bic.w	r2, r2, #1
 800792e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800793e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6819      	ldr	r1, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f042 0201 	orr.w	r2, r2, #1
 800795e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2220      	movs	r2, #32
 8007964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	e000      	b.n	8007976 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007974:	2302      	movs	r3, #2
  }
}
 8007976:	4618      	mov	r0, r3
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b20      	cmp	r3, #32
 8007996:	d139      	bne.n	8007a0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d101      	bne.n	80079a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80079a2:	2302      	movs	r3, #2
 80079a4:	e033      	b.n	8007a0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2224      	movs	r2, #36	@ 0x24
 80079b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0201 	bic.w	r2, r2, #1
 80079c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80079d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0201 	orr.w	r2, r2, #1
 80079f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2220      	movs	r2, #32
 80079fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e000      	b.n	8007a0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a0c:	2302      	movs	r3, #2
  }
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
	...

08007a1c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e11a      	b.n	8007c64 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d106      	bne.n	8007a48 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7fa f9a4 	bl	8001d90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d107      	bne.n	8007a6e <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 0201 	bic.w	r2, r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2200      	movs	r2, #0
 8007a74:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d008      	beq.n	8007a90 <HAL_I2S_Init+0x74>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b06      	cmp	r3, #6
 8007a84:	d004      	beq.n	8007a90 <HAL_I2S_Init+0x74>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b0a      	cmp	r3, #10
 8007a8c:	f040 8094 	bne.w	8007bb8 <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d067      	beq.n	8007b68 <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	617b      	str	r3, [r7, #20]
 8007aa4:	e001      	b.n	8007aaa <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	2b30      	cmp	r3, #48	@ 0x30
 8007ab0:	d003      	beq.n	8007aba <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8007ab6:	2bb0      	cmp	r3, #176	@ 0xb0
 8007ab8:	d102      	bne.n	8007ac0 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8007aba:	2301      	movs	r3, #1
 8007abc:	60bb      	str	r3, [r7, #8]
 8007abe:	e001      	b.n	8007ac4 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a68      	ldr	r2, [pc, #416]	@ (8007c6c <HAL_I2S_Init+0x250>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d107      	bne.n	8007ade <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 8007ace:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007ad2:	f04f 0100 	mov.w	r1, #0
 8007ad6:	f002 fca1 	bl	800a41c <HAL_RCCEx_GetPeriphCLKFreq>
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	e006      	b.n	8007aec <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8007ade:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007ae2:	f04f 0100 	mov.w	r1, #0
 8007ae6:	f002 fc99 	bl	800a41c <HAL_RCCEx_GetPeriphCLKFreq>
 8007aea:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007af4:	d113      	bne.n	8007b1e <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8007af6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	fa22 f303 	lsr.w	r3, r2, r3
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	461a      	mov	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b18:	3305      	adds	r3, #5
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	e014      	b.n	8007b48 <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8007b1e:	2220      	movs	r2, #32
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	fa22 f303 	lsr.w	r3, r2, r3
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	fb02 f303 	mul.w	r3, r2, r3
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b44:	3305      	adds	r3, #5
 8007b46:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	4a49      	ldr	r2, [pc, #292]	@ (8007c70 <HAL_I2S_Init+0x254>)
 8007b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b50:	08db      	lsrs	r3, r3, #3
 8007b52:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	085b      	lsrs	r3, r3, #1
 8007b64:	61fb      	str	r3, [r7, #28]
 8007b66:	e003      	b.n	8007b70 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8007b68:	2302      	movs	r3, #2
 8007b6a:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d102      	bne.n	8007b7c <HAL_I2S_Init+0x160>
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d002      	beq.n	8007b82 <HAL_I2S_Init+0x166>
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	2bff      	cmp	r3, #255	@ 0xff
 8007b80:	d907      	bls.n	8007b92 <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b86:	f043 0210 	orr.w	r2, r3, #16
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e068      	b.n	8007c64 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ba2:	4b34      	ldr	r3, [pc, #208]	@ (8007c74 <HAL_I2S_Init+0x258>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	69fa      	ldr	r2, [r7, #28]
 8007ba8:	0411      	lsls	r1, r2, #16
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	0612      	lsls	r2, r2, #24
 8007bae:	4311      	orrs	r1, r2
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	6812      	ldr	r2, [r2, #0]
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8007c78 <HAL_I2S_Init+0x25c>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	6851      	ldr	r1, [r2, #4]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6892      	ldr	r2, [r2, #8]
 8007bca:	4311      	orrs	r1, r2
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	68d2      	ldr	r2, [r2, #12]
 8007bd0:	4311      	orrs	r1, r2
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6992      	ldr	r2, [r2, #24]
 8007bd6:	4311      	orrs	r1, r2
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	6a12      	ldr	r2, [r2, #32]
 8007bdc:	4311      	orrs	r1, r2
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007be2:	4311      	orrs	r1, r2
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6912      	ldr	r2, [r2, #16]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	431a      	orrs	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f042 0201 	orr.w	r2, r2, #1
 8007bf4:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8007bfe:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007c0e:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	69da      	ldr	r2, [r3, #28]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d007      	beq.n	8007c3e <HAL_I2S_Init+0x222>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2b06      	cmp	r3, #6
 8007c34:	d003      	beq.n	8007c3e <HAL_I2S_Init+0x222>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	2b0a      	cmp	r3, #10
 8007c3c:	d10a      	bne.n	8007c54 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3720      	adds	r7, #32
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	58001400 	.word	0x58001400
 8007c70:	cccccccd 	.word	0xcccccccd
 8007c74:	fe00ffff 	.word	0xfe00ffff
 8007c78:	fdff9040 	.word	0xfdff9040

08007c7c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	4613      	mov	r3, r2
 8007c88:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <HAL_I2S_Receive_DMA+0x1e>
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e086      	b.n	8007dac <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d001      	beq.n	8007cae <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 8007caa:	2302      	movs	r3, #2
 8007cac:	e07e      	b.n	8007dac <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <HAL_I2S_Receive_DMA+0x42>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e076      	b.n	8007dac <HAL_I2S_Receive_DMA+0x130>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2204      	movs	r2, #4
 8007cca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->pRxBuffPtr  = pData;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2s->RxXferSize  = Size;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	88fa      	ldrh	r2, [r7, #6]
 8007cde:	871a      	strh	r2, [r3, #56]	@ 0x38
  hi2s->RxXferCount = Size;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	88fa      	ldrh	r2, [r7, #6]
 8007ce4:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	861a      	strh	r2, [r3, #48]	@ 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	865a      	strh	r2, [r3, #50]	@ 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8007db4 <HAL_I2S_Receive_DMA+0x138>)
 8007cfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d04:	4a2c      	ldr	r2, [pc, #176]	@ (8007db8 <HAL_I2S_Receive_DMA+0x13c>)
 8007d06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8007dbc <HAL_I2S_Receive_DMA+0x140>)
 8007d0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3330      	adds	r3, #48	@ 0x30
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d20:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007d26:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8007d28:	f7fc fe1a 	bl	8004960 <HAL_DMA_Start_IT>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d011      	beq.n	8007d56 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d36:	f043 0208 	orr.w	r2, r3, #8
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	651a      	str	r2, [r3, #80]	@ 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    errorcode = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return errorcode;
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
 8007d54:	e02a      	b.n	8007dac <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d107      	bne.n	8007d74 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d72:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d107      	bne.n	8007d92 <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f042 0201 	orr.w	r2, r2, #1
 8007d90:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007da0:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  return errorcode;
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3718      	adds	r7, #24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	08007eb5 	.word	0x08007eb5
 8007db8:	08007e73 	.word	0x08007e73
 8007dbc:	08007ed1 	.word	0x08007ed1

08007dc0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689a      	ldr	r2, [r3, #8]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007dda:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007dea:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00f      	beq.n	8007e14 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fd f81b 	bl	8004e34 <HAL_DMA_Abort>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d007      	beq.n	8007e14 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e08:	f043 0208 	orr.w	r2, r3, #8
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00f      	beq.n	8007e3c <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fd f807 	bl	8004e34 <HAL_DMA_Abort>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d007      	beq.n	8007e3c <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e30:	f043 0208 	orr.w	r2, r3, #8
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 0201 	bic.w	r2, r2, #1
 8007e4a:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return errorcode;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10e      	bne.n	8007ea6 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007e96:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f7f9 fafa 	bl	80014a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007eac:	bf00      	nop
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f7f9 fadc 	bl	8001480 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007ec8:	bf00      	nop
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007edc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007eec:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	865a      	strh	r2, [r3, #50]	@ 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	875a      	strh	r2, [r3, #58]	@ 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f06:	f043 0208 	orr.w	r2, r3, #8
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff ffa5 	bl	8007e5e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e0fe      	b.n	800812c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d106      	bne.n	8007f48 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7fa f9da 	bl	80022fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2203      	movs	r2, #3
 8007f4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f008 fdc1 	bl	8010adc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	7c1a      	ldrb	r2, [r3, #16]
 8007f62:	f88d 2000 	strb.w	r2, [sp]
 8007f66:	3304      	adds	r3, #4
 8007f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f6a:	f008 fd45 	bl	80109f8 <USB_CoreInit>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d005      	beq.n	8007f80 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e0d5      	b.n	800812c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2100      	movs	r1, #0
 8007f86:	4618      	mov	r0, r3
 8007f88:	f008 fdb9 	bl	8010afe <USB_SetCurrentMode>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d005      	beq.n	8007f9e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2202      	movs	r2, #2
 8007f96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e0c6      	b.n	800812c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]
 8007fa2:	e04a      	b.n	800803a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007fa4:	7bfa      	ldrb	r2, [r7, #15]
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	440b      	add	r3, r1
 8007fb2:	3315      	adds	r3, #21
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007fb8:	7bfa      	ldrb	r2, [r7, #15]
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	3314      	adds	r3, #20
 8007fc8:	7bfa      	ldrb	r2, [r7, #15]
 8007fca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007fcc:	7bfa      	ldrb	r2, [r7, #15]
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
 8007fd0:	b298      	uxth	r0, r3
 8007fd2:	6879      	ldr	r1, [r7, #4]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	4413      	add	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	440b      	add	r3, r1
 8007fde:	332e      	adds	r3, #46	@ 0x2e
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007fe4:	7bfa      	ldrb	r2, [r7, #15]
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	3318      	adds	r3, #24
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007ff8:	7bfa      	ldrb	r2, [r7, #15]
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	440b      	add	r3, r1
 8008006:	331c      	adds	r3, #28
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800800c:	7bfa      	ldrb	r2, [r7, #15]
 800800e:	6879      	ldr	r1, [r7, #4]
 8008010:	4613      	mov	r3, r2
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	3320      	adds	r3, #32
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008020:	7bfa      	ldrb	r2, [r7, #15]
 8008022:	6879      	ldr	r1, [r7, #4]
 8008024:	4613      	mov	r3, r2
 8008026:	00db      	lsls	r3, r3, #3
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	440b      	add	r3, r1
 800802e:	3324      	adds	r3, #36	@ 0x24
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	3301      	adds	r3, #1
 8008038:	73fb      	strb	r3, [r7, #15]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	791b      	ldrb	r3, [r3, #4]
 800803e:	7bfa      	ldrb	r2, [r7, #15]
 8008040:	429a      	cmp	r2, r3
 8008042:	d3af      	bcc.n	8007fa4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008044:	2300      	movs	r3, #0
 8008046:	73fb      	strb	r3, [r7, #15]
 8008048:	e044      	b.n	80080d4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800804a:	7bfa      	ldrb	r2, [r7, #15]
 800804c:	6879      	ldr	r1, [r7, #4]
 800804e:	4613      	mov	r3, r2
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	4413      	add	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	440b      	add	r3, r1
 8008058:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800805c:	2200      	movs	r2, #0
 800805e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008060:	7bfa      	ldrb	r2, [r7, #15]
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	4613      	mov	r3, r2
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	4413      	add	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	440b      	add	r3, r1
 800806e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008072:	7bfa      	ldrb	r2, [r7, #15]
 8008074:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008076:	7bfa      	ldrb	r2, [r7, #15]
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	4613      	mov	r3, r2
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	440b      	add	r3, r1
 8008084:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008088:	2200      	movs	r2, #0
 800808a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800808c:	7bfa      	ldrb	r2, [r7, #15]
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	4613      	mov	r3, r2
 8008092:	00db      	lsls	r3, r3, #3
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800809e:	2200      	movs	r2, #0
 80080a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80080a2:	7bfa      	ldrb	r2, [r7, #15]
 80080a4:	6879      	ldr	r1, [r7, #4]
 80080a6:	4613      	mov	r3, r2
 80080a8:	00db      	lsls	r3, r3, #3
 80080aa:	4413      	add	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	440b      	add	r3, r1
 80080b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80080b8:	7bfa      	ldrb	r2, [r7, #15]
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	4613      	mov	r3, r2
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	3301      	adds	r3, #1
 80080d2:	73fb      	strb	r3, [r7, #15]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	791b      	ldrb	r3, [r3, #4]
 80080d8:	7bfa      	ldrb	r2, [r7, #15]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d3b5      	bcc.n	800804a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	7c1a      	ldrb	r2, [r3, #16]
 80080e6:	f88d 2000 	strb.w	r2, [sp]
 80080ea:	3304      	adds	r3, #4
 80080ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080ee:	f008 fd53 	bl	8010b98 <USB_DevInit>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d005      	beq.n	8008104 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e013      	b.n	800812c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	7b1b      	ldrb	r3, [r3, #12]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d102      	bne.n	8008120 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f80a 	bl	8008134 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4618      	mov	r0, r3
 8008126:	f008 ff0e 	bl	8010f46 <USB_DevDisconnect>

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008162:	4b05      	ldr	r3, [pc, #20]	@ (8008178 <HAL_PCDEx_ActivateLPM+0x44>)
 8008164:	4313      	orrs	r3, r2
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	10000003 	.word	0x10000003

0800817c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008184:	4b19      	ldr	r3, [pc, #100]	@ (80081ec <HAL_PWREx_ConfigSupply+0x70>)
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b04      	cmp	r3, #4
 800818e:	d00a      	beq.n	80081a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008190:	4b16      	ldr	r3, [pc, #88]	@ (80081ec <HAL_PWREx_ConfigSupply+0x70>)
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f003 0307 	and.w	r3, r3, #7
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	429a      	cmp	r2, r3
 800819c:	d001      	beq.n	80081a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e01f      	b.n	80081e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e01d      	b.n	80081e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80081a6:	4b11      	ldr	r3, [pc, #68]	@ (80081ec <HAL_PWREx_ConfigSupply+0x70>)
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f023 0207 	bic.w	r2, r3, #7
 80081ae:	490f      	ldr	r1, [pc, #60]	@ (80081ec <HAL_PWREx_ConfigSupply+0x70>)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80081b6:	f7fb ff3b 	bl	8004030 <HAL_GetTick>
 80081ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081bc:	e009      	b.n	80081d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80081be:	f7fb ff37 	bl	8004030 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80081cc:	d901      	bls.n	80081d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e007      	b.n	80081e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081d2:	4b06      	ldr	r3, [pc, #24]	@ (80081ec <HAL_PWREx_ConfigSupply+0x70>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081de:	d1ee      	bne.n	80081be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	58024800 	.word	0x58024800

080081f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80081f4:	4b05      	ldr	r3, [pc, #20]	@ (800820c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	4a04      	ldr	r2, [pc, #16]	@ (800820c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80081fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081fe:	60d3      	str	r3, [r2, #12]
}
 8008200:	bf00      	nop
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	58024800 	.word	0x58024800

08008210 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08c      	sub	sp, #48	@ 0x30
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e3c8      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 8087 	beq.w	800833e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008230:	4b88      	ldr	r3, [pc, #544]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800823a:	4b86      	ldr	r3, [pc, #536]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 800823c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008242:	2b10      	cmp	r3, #16
 8008244:	d007      	beq.n	8008256 <HAL_RCC_OscConfig+0x46>
 8008246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008248:	2b18      	cmp	r3, #24
 800824a:	d110      	bne.n	800826e <HAL_RCC_OscConfig+0x5e>
 800824c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d10b      	bne.n	800826e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008256:	4b7f      	ldr	r3, [pc, #508]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d06c      	beq.n	800833c <HAL_RCC_OscConfig+0x12c>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d168      	bne.n	800833c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e3a2      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008276:	d106      	bne.n	8008286 <HAL_RCC_OscConfig+0x76>
 8008278:	4b76      	ldr	r3, [pc, #472]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a75      	ldr	r2, [pc, #468]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 800827e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	e02e      	b.n	80082e4 <HAL_RCC_OscConfig+0xd4>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10c      	bne.n	80082a8 <HAL_RCC_OscConfig+0x98>
 800828e:	4b71      	ldr	r3, [pc, #452]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a70      	ldr	r2, [pc, #448]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 8008294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	4b6e      	ldr	r3, [pc, #440]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a6d      	ldr	r2, [pc, #436]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80082a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	e01d      	b.n	80082e4 <HAL_RCC_OscConfig+0xd4>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082b0:	d10c      	bne.n	80082cc <HAL_RCC_OscConfig+0xbc>
 80082b2:	4b68      	ldr	r3, [pc, #416]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a67      	ldr	r2, [pc, #412]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80082b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	4b65      	ldr	r3, [pc, #404]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a64      	ldr	r2, [pc, #400]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80082c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082c8:	6013      	str	r3, [r2, #0]
 80082ca:	e00b      	b.n	80082e4 <HAL_RCC_OscConfig+0xd4>
 80082cc:	4b61      	ldr	r3, [pc, #388]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a60      	ldr	r2, [pc, #384]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80082d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	4b5e      	ldr	r3, [pc, #376]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a5d      	ldr	r2, [pc, #372]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80082de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80082e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d013      	beq.n	8008314 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ec:	f7fb fea0 	bl	8004030 <HAL_GetTick>
 80082f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082f2:	e008      	b.n	8008306 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082f4:	f7fb fe9c 	bl	8004030 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	2b64      	cmp	r3, #100	@ 0x64
 8008300:	d901      	bls.n	8008306 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e356      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008306:	4b53      	ldr	r3, [pc, #332]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0f0      	beq.n	80082f4 <HAL_RCC_OscConfig+0xe4>
 8008312:	e014      	b.n	800833e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008314:	f7fb fe8c 	bl	8004030 <HAL_GetTick>
 8008318:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800831a:	e008      	b.n	800832e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800831c:	f7fb fe88 	bl	8004030 <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	2b64      	cmp	r3, #100	@ 0x64
 8008328:	d901      	bls.n	800832e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e342      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800832e:	4b49      	ldr	r3, [pc, #292]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1f0      	bne.n	800831c <HAL_RCC_OscConfig+0x10c>
 800833a:	e000      	b.n	800833e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800833c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 808c 	beq.w	8008464 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800834c:	4b41      	ldr	r3, [pc, #260]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008354:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008356:	4b3f      	ldr	r3, [pc, #252]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 8008358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d007      	beq.n	8008372 <HAL_RCC_OscConfig+0x162>
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	2b18      	cmp	r3, #24
 8008366:	d137      	bne.n	80083d8 <HAL_RCC_OscConfig+0x1c8>
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d132      	bne.n	80083d8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008372:	4b38      	ldr	r3, [pc, #224]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0304 	and.w	r3, r3, #4
 800837a:	2b00      	cmp	r3, #0
 800837c:	d005      	beq.n	800838a <HAL_RCC_OscConfig+0x17a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e314      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800838a:	4b32      	ldr	r3, [pc, #200]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f023 0219 	bic.w	r2, r3, #25
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	492f      	ldr	r1, [pc, #188]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 8008398:	4313      	orrs	r3, r2
 800839a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839c:	f7fb fe48 	bl	8004030 <HAL_GetTick>
 80083a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083a2:	e008      	b.n	80083b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083a4:	f7fb fe44 	bl	8004030 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d901      	bls.n	80083b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e2fe      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083b6:	4b27      	ldr	r3, [pc, #156]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 0304 	and.w	r3, r3, #4
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0f0      	beq.n	80083a4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083c2:	4b24      	ldr	r3, [pc, #144]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	061b      	lsls	r3, r3, #24
 80083d0:	4920      	ldr	r1, [pc, #128]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083d6:	e045      	b.n	8008464 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d026      	beq.n	800842e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083e0:	4b1c      	ldr	r3, [pc, #112]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f023 0219 	bic.w	r2, r3, #25
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	4919      	ldr	r1, [pc, #100]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f2:	f7fb fe1d 	bl	8004030 <HAL_GetTick>
 80083f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083f8:	e008      	b.n	800840c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083fa:	f7fb fe19 	bl	8004030 <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	2b02      	cmp	r3, #2
 8008406:	d901      	bls.n	800840c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e2d3      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800840c:	4b11      	ldr	r3, [pc, #68]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0f0      	beq.n	80083fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008418:	4b0e      	ldr	r3, [pc, #56]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	061b      	lsls	r3, r3, #24
 8008426:	490b      	ldr	r1, [pc, #44]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 8008428:	4313      	orrs	r3, r2
 800842a:	604b      	str	r3, [r1, #4]
 800842c:	e01a      	b.n	8008464 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800842e:	4b09      	ldr	r3, [pc, #36]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a08      	ldr	r2, [pc, #32]	@ (8008454 <HAL_RCC_OscConfig+0x244>)
 8008434:	f023 0301 	bic.w	r3, r3, #1
 8008438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800843a:	f7fb fdf9 	bl	8004030 <HAL_GetTick>
 800843e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008440:	e00a      	b.n	8008458 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008442:	f7fb fdf5 	bl	8004030 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	d903      	bls.n	8008458 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e2af      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
 8008454:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008458:	4b96      	ldr	r3, [pc, #600]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0304 	and.w	r3, r3, #4
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1ee      	bne.n	8008442 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0310 	and.w	r3, r3, #16
 800846c:	2b00      	cmp	r3, #0
 800846e:	d06a      	beq.n	8008546 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008470:	4b90      	ldr	r3, [pc, #576]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008478:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800847a:	4b8e      	ldr	r3, [pc, #568]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 800847c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	2b08      	cmp	r3, #8
 8008484:	d007      	beq.n	8008496 <HAL_RCC_OscConfig+0x286>
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	2b18      	cmp	r3, #24
 800848a:	d11b      	bne.n	80084c4 <HAL_RCC_OscConfig+0x2b4>
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	2b01      	cmp	r3, #1
 8008494:	d116      	bne.n	80084c4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008496:	4b87      	ldr	r3, [pc, #540]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d005      	beq.n	80084ae <HAL_RCC_OscConfig+0x29e>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	2b80      	cmp	r3, #128	@ 0x80
 80084a8:	d001      	beq.n	80084ae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e282      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084ae:	4b81      	ldr	r3, [pc, #516]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	061b      	lsls	r3, r3, #24
 80084bc:	497d      	ldr	r1, [pc, #500]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084c2:	e040      	b.n	8008546 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d023      	beq.n	8008514 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80084cc:	4b79      	ldr	r3, [pc, #484]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a78      	ldr	r2, [pc, #480]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 80084d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d8:	f7fb fdaa 	bl	8004030 <HAL_GetTick>
 80084dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084de:	e008      	b.n	80084f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80084e0:	f7fb fda6 	bl	8004030 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d901      	bls.n	80084f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e260      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084f2:	4b70      	ldr	r3, [pc, #448]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0f0      	beq.n	80084e0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084fe:	4b6d      	ldr	r3, [pc, #436]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	061b      	lsls	r3, r3, #24
 800850c:	4969      	ldr	r1, [pc, #420]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 800850e:	4313      	orrs	r3, r2
 8008510:	60cb      	str	r3, [r1, #12]
 8008512:	e018      	b.n	8008546 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008514:	4b67      	ldr	r3, [pc, #412]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a66      	ldr	r2, [pc, #408]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 800851a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800851e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008520:	f7fb fd86 	bl	8004030 <HAL_GetTick>
 8008524:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008526:	e008      	b.n	800853a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008528:	f7fb fd82 	bl	8004030 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d901      	bls.n	800853a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e23c      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800853a:	4b5e      	ldr	r3, [pc, #376]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1f0      	bne.n	8008528 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0308 	and.w	r3, r3, #8
 800854e:	2b00      	cmp	r3, #0
 8008550:	d036      	beq.n	80085c0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d019      	beq.n	800858e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800855a:	4b56      	ldr	r3, [pc, #344]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 800855c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800855e:	4a55      	ldr	r2, [pc, #340]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 8008560:	f043 0301 	orr.w	r3, r3, #1
 8008564:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008566:	f7fb fd63 	bl	8004030 <HAL_GetTick>
 800856a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800856c:	e008      	b.n	8008580 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800856e:	f7fb fd5f 	bl	8004030 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b02      	cmp	r3, #2
 800857a:	d901      	bls.n	8008580 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e219      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008580:	4b4c      	ldr	r3, [pc, #304]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 8008582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0f0      	beq.n	800856e <HAL_RCC_OscConfig+0x35e>
 800858c:	e018      	b.n	80085c0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800858e:	4b49      	ldr	r3, [pc, #292]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 8008590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008592:	4a48      	ldr	r2, [pc, #288]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 8008594:	f023 0301 	bic.w	r3, r3, #1
 8008598:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800859a:	f7fb fd49 	bl	8004030 <HAL_GetTick>
 800859e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80085a0:	e008      	b.n	80085b4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085a2:	f7fb fd45 	bl	8004030 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d901      	bls.n	80085b4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e1ff      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80085b4:	4b3f      	ldr	r3, [pc, #252]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 80085b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1f0      	bne.n	80085a2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0320 	and.w	r3, r3, #32
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d036      	beq.n	800863a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d019      	beq.n	8008608 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80085d4:	4b37      	ldr	r3, [pc, #220]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a36      	ldr	r2, [pc, #216]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 80085da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80085de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085e0:	f7fb fd26 	bl	8004030 <HAL_GetTick>
 80085e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085e6:	e008      	b.n	80085fa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085e8:	f7fb fd22 	bl	8004030 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e1dc      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085fa:	4b2e      	ldr	r3, [pc, #184]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0f0      	beq.n	80085e8 <HAL_RCC_OscConfig+0x3d8>
 8008606:	e018      	b.n	800863a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008608:	4b2a      	ldr	r3, [pc, #168]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a29      	ldr	r2, [pc, #164]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 800860e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008612:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008614:	f7fb fd0c 	bl	8004030 <HAL_GetTick>
 8008618:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800861a:	e008      	b.n	800862e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800861c:	f7fb fd08 	bl	8004030 <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	2b02      	cmp	r3, #2
 8008628:	d901      	bls.n	800862e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e1c2      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800862e:	4b21      	ldr	r3, [pc, #132]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1f0      	bne.n	800861c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0304 	and.w	r3, r3, #4
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 8086 	beq.w	8008754 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008648:	4b1b      	ldr	r3, [pc, #108]	@ (80086b8 <HAL_RCC_OscConfig+0x4a8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a1a      	ldr	r2, [pc, #104]	@ (80086b8 <HAL_RCC_OscConfig+0x4a8>)
 800864e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008652:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008654:	f7fb fcec 	bl	8004030 <HAL_GetTick>
 8008658:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800865a:	e008      	b.n	800866e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800865c:	f7fb fce8 	bl	8004030 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	2b64      	cmp	r3, #100	@ 0x64
 8008668:	d901      	bls.n	800866e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e1a2      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800866e:	4b12      	ldr	r3, [pc, #72]	@ (80086b8 <HAL_RCC_OscConfig+0x4a8>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0f0      	beq.n	800865c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d106      	bne.n	8008690 <HAL_RCC_OscConfig+0x480>
 8008682:	4b0c      	ldr	r3, [pc, #48]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 8008684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008686:	4a0b      	ldr	r2, [pc, #44]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 8008688:	f043 0301 	orr.w	r3, r3, #1
 800868c:	6713      	str	r3, [r2, #112]	@ 0x70
 800868e:	e032      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e6>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d111      	bne.n	80086bc <HAL_RCC_OscConfig+0x4ac>
 8008698:	4b06      	ldr	r3, [pc, #24]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 800869a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800869c:	4a05      	ldr	r2, [pc, #20]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 800869e:	f023 0301 	bic.w	r3, r3, #1
 80086a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80086a4:	4b03      	ldr	r3, [pc, #12]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 80086a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a8:	4a02      	ldr	r2, [pc, #8]	@ (80086b4 <HAL_RCC_OscConfig+0x4a4>)
 80086aa:	f023 0304 	bic.w	r3, r3, #4
 80086ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80086b0:	e021      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e6>
 80086b2:	bf00      	nop
 80086b4:	58024400 	.word	0x58024400
 80086b8:	58024800 	.word	0x58024800
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	2b05      	cmp	r3, #5
 80086c2:	d10c      	bne.n	80086de <HAL_RCC_OscConfig+0x4ce>
 80086c4:	4b83      	ldr	r3, [pc, #524]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80086c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c8:	4a82      	ldr	r2, [pc, #520]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80086ca:	f043 0304 	orr.w	r3, r3, #4
 80086ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80086d0:	4b80      	ldr	r3, [pc, #512]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80086d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d4:	4a7f      	ldr	r2, [pc, #508]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80086d6:	f043 0301 	orr.w	r3, r3, #1
 80086da:	6713      	str	r3, [r2, #112]	@ 0x70
 80086dc:	e00b      	b.n	80086f6 <HAL_RCC_OscConfig+0x4e6>
 80086de:	4b7d      	ldr	r3, [pc, #500]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80086e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e2:	4a7c      	ldr	r2, [pc, #496]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80086e4:	f023 0301 	bic.w	r3, r3, #1
 80086e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80086ea:	4b7a      	ldr	r3, [pc, #488]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80086ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ee:	4a79      	ldr	r2, [pc, #484]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80086f0:	f023 0304 	bic.w	r3, r3, #4
 80086f4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d015      	beq.n	800872a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086fe:	f7fb fc97 	bl	8004030 <HAL_GetTick>
 8008702:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008704:	e00a      	b.n	800871c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008706:	f7fb fc93 	bl	8004030 <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008714:	4293      	cmp	r3, r2
 8008716:	d901      	bls.n	800871c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e14b      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800871c:	4b6d      	ldr	r3, [pc, #436]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 800871e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0ee      	beq.n	8008706 <HAL_RCC_OscConfig+0x4f6>
 8008728:	e014      	b.n	8008754 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800872a:	f7fb fc81 	bl	8004030 <HAL_GetTick>
 800872e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008730:	e00a      	b.n	8008748 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008732:	f7fb fc7d 	bl	8004030 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008740:	4293      	cmp	r3, r2
 8008742:	d901      	bls.n	8008748 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008744:	2303      	movs	r3, #3
 8008746:	e135      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008748:	4b62      	ldr	r3, [pc, #392]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 800874a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1ee      	bne.n	8008732 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 812a 	beq.w	80089b2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800875e:	4b5d      	ldr	r3, [pc, #372]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008766:	2b18      	cmp	r3, #24
 8008768:	f000 80ba 	beq.w	80088e0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008770:	2b02      	cmp	r3, #2
 8008772:	f040 8095 	bne.w	80088a0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008776:	4b57      	ldr	r3, [pc, #348]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a56      	ldr	r2, [pc, #344]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 800877c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008782:	f7fb fc55 	bl	8004030 <HAL_GetTick>
 8008786:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008788:	e008      	b.n	800879c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800878a:	f7fb fc51 	bl	8004030 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d901      	bls.n	800879c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e10b      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800879c:	4b4d      	ldr	r3, [pc, #308]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1f0      	bne.n	800878a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087a8:	4b4a      	ldr	r3, [pc, #296]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80087aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80087ac:	4b4a      	ldr	r3, [pc, #296]	@ (80088d8 <HAL_RCC_OscConfig+0x6c8>)
 80087ae:	4013      	ands	r3, r2
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80087b8:	0112      	lsls	r2, r2, #4
 80087ba:	430a      	orrs	r2, r1
 80087bc:	4945      	ldr	r1, [pc, #276]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	628b      	str	r3, [r1, #40]	@ 0x28
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c6:	3b01      	subs	r3, #1
 80087c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087d0:	3b01      	subs	r3, #1
 80087d2:	025b      	lsls	r3, r3, #9
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	431a      	orrs	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087dc:	3b01      	subs	r3, #1
 80087de:	041b      	lsls	r3, r3, #16
 80087e0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80087e4:	431a      	orrs	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ea:	3b01      	subs	r3, #1
 80087ec:	061b      	lsls	r3, r3, #24
 80087ee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087f2:	4938      	ldr	r1, [pc, #224]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80087f8:	4b36      	ldr	r3, [pc, #216]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80087fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fc:	4a35      	ldr	r2, [pc, #212]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80087fe:	f023 0301 	bic.w	r3, r3, #1
 8008802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008804:	4b33      	ldr	r3, [pc, #204]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 8008806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008808:	4b34      	ldr	r3, [pc, #208]	@ (80088dc <HAL_RCC_OscConfig+0x6cc>)
 800880a:	4013      	ands	r3, r2
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008810:	00d2      	lsls	r2, r2, #3
 8008812:	4930      	ldr	r1, [pc, #192]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 8008814:	4313      	orrs	r3, r2
 8008816:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008818:	4b2e      	ldr	r3, [pc, #184]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 800881a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881c:	f023 020c 	bic.w	r2, r3, #12
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008824:	492b      	ldr	r1, [pc, #172]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 8008826:	4313      	orrs	r3, r2
 8008828:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800882a:	4b2a      	ldr	r3, [pc, #168]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 800882c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800882e:	f023 0202 	bic.w	r2, r3, #2
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008836:	4927      	ldr	r1, [pc, #156]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 8008838:	4313      	orrs	r3, r2
 800883a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800883c:	4b25      	ldr	r3, [pc, #148]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 800883e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008840:	4a24      	ldr	r2, [pc, #144]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 8008842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008848:	4b22      	ldr	r3, [pc, #136]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 800884a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884c:	4a21      	ldr	r2, [pc, #132]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 800884e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008854:	4b1f      	ldr	r3, [pc, #124]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 8008856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008858:	4a1e      	ldr	r2, [pc, #120]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 800885a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800885e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008860:	4b1c      	ldr	r3, [pc, #112]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 8008862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008864:	4a1b      	ldr	r2, [pc, #108]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 8008866:	f043 0301 	orr.w	r3, r3, #1
 800886a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800886c:	4b19      	ldr	r3, [pc, #100]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a18      	ldr	r2, [pc, #96]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 8008872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008878:	f7fb fbda 	bl	8004030 <HAL_GetTick>
 800887c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800887e:	e008      	b.n	8008892 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008880:	f7fb fbd6 	bl	8004030 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b02      	cmp	r3, #2
 800888c:	d901      	bls.n	8008892 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e090      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008892:	4b10      	ldr	r3, [pc, #64]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0f0      	beq.n	8008880 <HAL_RCC_OscConfig+0x670>
 800889e:	e088      	b.n	80089b2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088a0:	4b0c      	ldr	r3, [pc, #48]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a0b      	ldr	r2, [pc, #44]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80088a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ac:	f7fb fbc0 	bl	8004030 <HAL_GetTick>
 80088b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088b2:	e008      	b.n	80088c6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088b4:	f7fb fbbc 	bl	8004030 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e076      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088c6:	4b03      	ldr	r3, [pc, #12]	@ (80088d4 <HAL_RCC_OscConfig+0x6c4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1f0      	bne.n	80088b4 <HAL_RCC_OscConfig+0x6a4>
 80088d2:	e06e      	b.n	80089b2 <HAL_RCC_OscConfig+0x7a2>
 80088d4:	58024400 	.word	0x58024400
 80088d8:	fffffc0c 	.word	0xfffffc0c
 80088dc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80088e0:	4b36      	ldr	r3, [pc, #216]	@ (80089bc <HAL_RCC_OscConfig+0x7ac>)
 80088e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80088e6:	4b35      	ldr	r3, [pc, #212]	@ (80089bc <HAL_RCC_OscConfig+0x7ac>)
 80088e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d031      	beq.n	8008958 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f003 0203 	and.w	r2, r3, #3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088fe:	429a      	cmp	r2, r3
 8008900:	d12a      	bne.n	8008958 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	091b      	lsrs	r3, r3, #4
 8008906:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800890e:	429a      	cmp	r2, r3
 8008910:	d122      	bne.n	8008958 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800891c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800891e:	429a      	cmp	r2, r3
 8008920:	d11a      	bne.n	8008958 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	0a5b      	lsrs	r3, r3, #9
 8008926:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800892e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008930:	429a      	cmp	r2, r3
 8008932:	d111      	bne.n	8008958 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	0c1b      	lsrs	r3, r3, #16
 8008938:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008940:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008942:	429a      	cmp	r2, r3
 8008944:	d108      	bne.n	8008958 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	0e1b      	lsrs	r3, r3, #24
 800894a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008952:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008954:	429a      	cmp	r2, r3
 8008956:	d001      	beq.n	800895c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e02b      	b.n	80089b4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800895c:	4b17      	ldr	r3, [pc, #92]	@ (80089bc <HAL_RCC_OscConfig+0x7ac>)
 800895e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008960:	08db      	lsrs	r3, r3, #3
 8008962:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008966:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	429a      	cmp	r2, r3
 8008970:	d01f      	beq.n	80089b2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008972:	4b12      	ldr	r3, [pc, #72]	@ (80089bc <HAL_RCC_OscConfig+0x7ac>)
 8008974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008976:	4a11      	ldr	r2, [pc, #68]	@ (80089bc <HAL_RCC_OscConfig+0x7ac>)
 8008978:	f023 0301 	bic.w	r3, r3, #1
 800897c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800897e:	f7fb fb57 	bl	8004030 <HAL_GetTick>
 8008982:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008984:	bf00      	nop
 8008986:	f7fb fb53 	bl	8004030 <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898e:	4293      	cmp	r3, r2
 8008990:	d0f9      	beq.n	8008986 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008992:	4b0a      	ldr	r3, [pc, #40]	@ (80089bc <HAL_RCC_OscConfig+0x7ac>)
 8008994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008996:	4b0a      	ldr	r3, [pc, #40]	@ (80089c0 <HAL_RCC_OscConfig+0x7b0>)
 8008998:	4013      	ands	r3, r2
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800899e:	00d2      	lsls	r2, r2, #3
 80089a0:	4906      	ldr	r1, [pc, #24]	@ (80089bc <HAL_RCC_OscConfig+0x7ac>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80089a6:	4b05      	ldr	r3, [pc, #20]	@ (80089bc <HAL_RCC_OscConfig+0x7ac>)
 80089a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089aa:	4a04      	ldr	r2, [pc, #16]	@ (80089bc <HAL_RCC_OscConfig+0x7ac>)
 80089ac:	f043 0301 	orr.w	r3, r3, #1
 80089b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3730      	adds	r7, #48	@ 0x30
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	58024400 	.word	0x58024400
 80089c0:	ffff0007 	.word	0xffff0007

080089c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e19c      	b.n	8008d12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089d8:	4b8a      	ldr	r3, [pc, #552]	@ (8008c04 <HAL_RCC_ClockConfig+0x240>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 030f 	and.w	r3, r3, #15
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d910      	bls.n	8008a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089e6:	4b87      	ldr	r3, [pc, #540]	@ (8008c04 <HAL_RCC_ClockConfig+0x240>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f023 020f 	bic.w	r2, r3, #15
 80089ee:	4985      	ldr	r1, [pc, #532]	@ (8008c04 <HAL_RCC_ClockConfig+0x240>)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089f6:	4b83      	ldr	r3, [pc, #524]	@ (8008c04 <HAL_RCC_ClockConfig+0x240>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 030f 	and.w	r3, r3, #15
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d001      	beq.n	8008a08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e184      	b.n	8008d12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0304 	and.w	r3, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d010      	beq.n	8008a36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691a      	ldr	r2, [r3, #16]
 8008a18:	4b7b      	ldr	r3, [pc, #492]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d908      	bls.n	8008a36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a24:	4b78      	ldr	r3, [pc, #480]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	4975      	ldr	r1, [pc, #468]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0308 	and.w	r3, r3, #8
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d010      	beq.n	8008a64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	695a      	ldr	r2, [r3, #20]
 8008a46:	4b70      	ldr	r3, [pc, #448]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d908      	bls.n	8008a64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a52:	4b6d      	ldr	r3, [pc, #436]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	496a      	ldr	r1, [pc, #424]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008a60:	4313      	orrs	r3, r2
 8008a62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0310 	and.w	r3, r3, #16
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d010      	beq.n	8008a92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	699a      	ldr	r2, [r3, #24]
 8008a74:	4b64      	ldr	r3, [pc, #400]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d908      	bls.n	8008a92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a80:	4b61      	ldr	r3, [pc, #388]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	495e      	ldr	r1, [pc, #376]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0320 	and.w	r3, r3, #32
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d010      	beq.n	8008ac0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	69da      	ldr	r2, [r3, #28]
 8008aa2:	4b59      	ldr	r3, [pc, #356]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d908      	bls.n	8008ac0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008aae:	4b56      	ldr	r3, [pc, #344]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	4953      	ldr	r1, [pc, #332]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008abc:	4313      	orrs	r3, r2
 8008abe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d010      	beq.n	8008aee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68da      	ldr	r2, [r3, #12]
 8008ad0:	4b4d      	ldr	r3, [pc, #308]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	f003 030f 	and.w	r3, r3, #15
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d908      	bls.n	8008aee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008adc:	4b4a      	ldr	r3, [pc, #296]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	f023 020f 	bic.w	r2, r3, #15
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	4947      	ldr	r1, [pc, #284]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d055      	beq.n	8008ba6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008afa:	4b43      	ldr	r3, [pc, #268]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	4940      	ldr	r1, [pc, #256]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d107      	bne.n	8008b24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b14:	4b3c      	ldr	r3, [pc, #240]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d121      	bne.n	8008b64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e0f6      	b.n	8008d12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	2b03      	cmp	r3, #3
 8008b2a:	d107      	bne.n	8008b3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b2c:	4b36      	ldr	r3, [pc, #216]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d115      	bne.n	8008b64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e0ea      	b.n	8008d12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d107      	bne.n	8008b54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b44:	4b30      	ldr	r3, [pc, #192]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d109      	bne.n	8008b64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e0de      	b.n	8008d12 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b54:	4b2c      	ldr	r3, [pc, #176]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0304 	and.w	r3, r3, #4
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e0d6      	b.n	8008d12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b64:	4b28      	ldr	r3, [pc, #160]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	f023 0207 	bic.w	r2, r3, #7
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	4925      	ldr	r1, [pc, #148]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b76:	f7fb fa5b 	bl	8004030 <HAL_GetTick>
 8008b7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b7c:	e00a      	b.n	8008b94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b7e:	f7fb fa57 	bl	8004030 <HAL_GetTick>
 8008b82:	4602      	mov	r2, r0
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d901      	bls.n	8008b94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e0be      	b.n	8008d12 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b94:	4b1c      	ldr	r3, [pc, #112]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	00db      	lsls	r3, r3, #3
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d1eb      	bne.n	8008b7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d010      	beq.n	8008bd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68da      	ldr	r2, [r3, #12]
 8008bb6:	4b14      	ldr	r3, [pc, #80]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	f003 030f 	and.w	r3, r3, #15
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d208      	bcs.n	8008bd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bc2:	4b11      	ldr	r3, [pc, #68]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	f023 020f 	bic.w	r2, r3, #15
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	490e      	ldr	r1, [pc, #56]	@ (8008c08 <HAL_RCC_ClockConfig+0x244>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8008c04 <HAL_RCC_ClockConfig+0x240>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 030f 	and.w	r3, r3, #15
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d214      	bcs.n	8008c0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008be2:	4b08      	ldr	r3, [pc, #32]	@ (8008c04 <HAL_RCC_ClockConfig+0x240>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f023 020f 	bic.w	r2, r3, #15
 8008bea:	4906      	ldr	r1, [pc, #24]	@ (8008c04 <HAL_RCC_ClockConfig+0x240>)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bf2:	4b04      	ldr	r3, [pc, #16]	@ (8008c04 <HAL_RCC_ClockConfig+0x240>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 030f 	and.w	r3, r3, #15
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d005      	beq.n	8008c0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e086      	b.n	8008d12 <HAL_RCC_ClockConfig+0x34e>
 8008c04:	52002000 	.word	0x52002000
 8008c08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d010      	beq.n	8008c3a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	691a      	ldr	r2, [r3, #16]
 8008c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d208      	bcs.n	8008c3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c28:	4b3c      	ldr	r3, [pc, #240]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	4939      	ldr	r1, [pc, #228]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008c36:	4313      	orrs	r3, r2
 8008c38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0308 	and.w	r3, r3, #8
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d010      	beq.n	8008c68 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	695a      	ldr	r2, [r3, #20]
 8008c4a:	4b34      	ldr	r3, [pc, #208]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d208      	bcs.n	8008c68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c56:	4b31      	ldr	r3, [pc, #196]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008c58:	69db      	ldr	r3, [r3, #28]
 8008c5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	492e      	ldr	r1, [pc, #184]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008c64:	4313      	orrs	r3, r2
 8008c66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0310 	and.w	r3, r3, #16
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d010      	beq.n	8008c96 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	699a      	ldr	r2, [r3, #24]
 8008c78:	4b28      	ldr	r3, [pc, #160]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008c7a:	69db      	ldr	r3, [r3, #28]
 8008c7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d208      	bcs.n	8008c96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c84:	4b25      	ldr	r3, [pc, #148]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	4922      	ldr	r1, [pc, #136]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0320 	and.w	r3, r3, #32
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d010      	beq.n	8008cc4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69da      	ldr	r2, [r3, #28]
 8008ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d208      	bcs.n	8008cc4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	4917      	ldr	r1, [pc, #92]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008cc4:	f000 f834 	bl	8008d30 <HAL_RCC_GetSysClockFreq>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	4b14      	ldr	r3, [pc, #80]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	0a1b      	lsrs	r3, r3, #8
 8008cd0:	f003 030f 	and.w	r3, r3, #15
 8008cd4:	4912      	ldr	r1, [pc, #72]	@ (8008d20 <HAL_RCC_ClockConfig+0x35c>)
 8008cd6:	5ccb      	ldrb	r3, [r1, r3]
 8008cd8:	f003 031f 	and.w	r3, r3, #31
 8008cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8008d1c <HAL_RCC_ClockConfig+0x358>)
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	f003 030f 	and.w	r3, r3, #15
 8008cea:	4a0d      	ldr	r2, [pc, #52]	@ (8008d20 <HAL_RCC_ClockConfig+0x35c>)
 8008cec:	5cd3      	ldrb	r3, [r2, r3]
 8008cee:	f003 031f 	and.w	r3, r3, #31
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8008d24 <HAL_RCC_ClockConfig+0x360>)
 8008cfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8008d28 <HAL_RCC_ClockConfig+0x364>)
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008d02:	4b0a      	ldr	r3, [pc, #40]	@ (8008d2c <HAL_RCC_ClockConfig+0x368>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fb f948 	bl	8003f9c <HAL_InitTick>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	58024400 	.word	0x58024400
 8008d20:	08021ba4 	.word	0x08021ba4
 8008d24:	24000004 	.word	0x24000004
 8008d28:	24000000 	.word	0x24000000
 8008d2c:	2400001c 	.word	0x2400001c

08008d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b089      	sub	sp, #36	@ 0x24
 8008d34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d36:	4bb3      	ldr	r3, [pc, #716]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d3e:	2b18      	cmp	r3, #24
 8008d40:	f200 8155 	bhi.w	8008fee <HAL_RCC_GetSysClockFreq+0x2be>
 8008d44:	a201      	add	r2, pc, #4	@ (adr r2, 8008d4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4a:	bf00      	nop
 8008d4c:	08008db1 	.word	0x08008db1
 8008d50:	08008fef 	.word	0x08008fef
 8008d54:	08008fef 	.word	0x08008fef
 8008d58:	08008fef 	.word	0x08008fef
 8008d5c:	08008fef 	.word	0x08008fef
 8008d60:	08008fef 	.word	0x08008fef
 8008d64:	08008fef 	.word	0x08008fef
 8008d68:	08008fef 	.word	0x08008fef
 8008d6c:	08008dd7 	.word	0x08008dd7
 8008d70:	08008fef 	.word	0x08008fef
 8008d74:	08008fef 	.word	0x08008fef
 8008d78:	08008fef 	.word	0x08008fef
 8008d7c:	08008fef 	.word	0x08008fef
 8008d80:	08008fef 	.word	0x08008fef
 8008d84:	08008fef 	.word	0x08008fef
 8008d88:	08008fef 	.word	0x08008fef
 8008d8c:	08008ddd 	.word	0x08008ddd
 8008d90:	08008fef 	.word	0x08008fef
 8008d94:	08008fef 	.word	0x08008fef
 8008d98:	08008fef 	.word	0x08008fef
 8008d9c:	08008fef 	.word	0x08008fef
 8008da0:	08008fef 	.word	0x08008fef
 8008da4:	08008fef 	.word	0x08008fef
 8008da8:	08008fef 	.word	0x08008fef
 8008dac:	08008de3 	.word	0x08008de3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008db0:	4b94      	ldr	r3, [pc, #592]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0320 	and.w	r3, r3, #32
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d009      	beq.n	8008dd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008dbc:	4b91      	ldr	r3, [pc, #580]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	08db      	lsrs	r3, r3, #3
 8008dc2:	f003 0303 	and.w	r3, r3, #3
 8008dc6:	4a90      	ldr	r2, [pc, #576]	@ (8009008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008dce:	e111      	b.n	8008ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008dd0:	4b8d      	ldr	r3, [pc, #564]	@ (8009008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008dd2:	61bb      	str	r3, [r7, #24]
      break;
 8008dd4:	e10e      	b.n	8008ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008dd6:	4b8d      	ldr	r3, [pc, #564]	@ (800900c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008dd8:	61bb      	str	r3, [r7, #24]
      break;
 8008dda:	e10b      	b.n	8008ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008ddc:	4b8c      	ldr	r3, [pc, #560]	@ (8009010 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008dde:	61bb      	str	r3, [r7, #24]
      break;
 8008de0:	e108      	b.n	8008ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008de2:	4b88      	ldr	r3, [pc, #544]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de6:	f003 0303 	and.w	r3, r3, #3
 8008dea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008dec:	4b85      	ldr	r3, [pc, #532]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df0:	091b      	lsrs	r3, r3, #4
 8008df2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008df6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008df8:	4b82      	ldr	r3, [pc, #520]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e02:	4b80      	ldr	r3, [pc, #512]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e06:	08db      	lsrs	r3, r3, #3
 8008e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	fb02 f303 	mul.w	r3, r2, r3
 8008e12:	ee07 3a90 	vmov	s15, r3
 8008e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 80e1 	beq.w	8008fe8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	f000 8083 	beq.w	8008f34 <HAL_RCC_GetSysClockFreq+0x204>
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	f200 80a1 	bhi.w	8008f78 <HAL_RCC_GetSysClockFreq+0x248>
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <HAL_RCC_GetSysClockFreq+0x114>
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d056      	beq.n	8008ef0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008e42:	e099      	b.n	8008f78 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e44:	4b6f      	ldr	r3, [pc, #444]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0320 	and.w	r3, r3, #32
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d02d      	beq.n	8008eac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e50:	4b6c      	ldr	r3, [pc, #432]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	08db      	lsrs	r3, r3, #3
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	4a6b      	ldr	r2, [pc, #428]	@ (8009008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e60:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	ee07 3a90 	vmov	s15, r3
 8008e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	ee07 3a90 	vmov	s15, r3
 8008e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e7a:	4b62      	ldr	r3, [pc, #392]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e8e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008eaa:	e087      	b.n	8008fbc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	ee07 3a90 	vmov	s15, r3
 8008eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009018 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ebe:	4b51      	ldr	r3, [pc, #324]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ed2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008eee:	e065      	b.n	8008fbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	ee07 3a90 	vmov	s15, r3
 8008ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008efa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800901c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f02:	4b40      	ldr	r3, [pc, #256]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f0a:	ee07 3a90 	vmov	s15, r3
 8008f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f16:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f32:	e043      	b.n	8008fbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	ee07 3a90 	vmov	s15, r3
 8008f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f3e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009020 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f46:	4b2f      	ldr	r3, [pc, #188]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f5a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f76:	e021      	b.n	8008fbc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	ee07 3a90 	vmov	s15, r3
 8008f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f82:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800901c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f9e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009014 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008fba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008fbc:	4b11      	ldr	r3, [pc, #68]	@ (8009004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc0:	0a5b      	lsrs	r3, r3, #9
 8008fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	ee07 3a90 	vmov	s15, r3
 8008fd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fe0:	ee17 3a90 	vmov	r3, s15
 8008fe4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008fe6:	e005      	b.n	8008ff4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	61bb      	str	r3, [r7, #24]
      break;
 8008fec:	e002      	b.n	8008ff4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008fee:	4b07      	ldr	r3, [pc, #28]	@ (800900c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ff0:	61bb      	str	r3, [r7, #24]
      break;
 8008ff2:	bf00      	nop
  }

  return sysclockfreq;
 8008ff4:	69bb      	ldr	r3, [r7, #24]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3724      	adds	r7, #36	@ 0x24
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	58024400 	.word	0x58024400
 8009008:	03d09000 	.word	0x03d09000
 800900c:	003d0900 	.word	0x003d0900
 8009010:	017d7840 	.word	0x017d7840
 8009014:	46000000 	.word	0x46000000
 8009018:	4c742400 	.word	0x4c742400
 800901c:	4a742400 	.word	0x4a742400
 8009020:	4bbebc20 	.word	0x4bbebc20

08009024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800902a:	f7ff fe81 	bl	8008d30 <HAL_RCC_GetSysClockFreq>
 800902e:	4602      	mov	r2, r0
 8009030:	4b10      	ldr	r3, [pc, #64]	@ (8009074 <HAL_RCC_GetHCLKFreq+0x50>)
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	0a1b      	lsrs	r3, r3, #8
 8009036:	f003 030f 	and.w	r3, r3, #15
 800903a:	490f      	ldr	r1, [pc, #60]	@ (8009078 <HAL_RCC_GetHCLKFreq+0x54>)
 800903c:	5ccb      	ldrb	r3, [r1, r3]
 800903e:	f003 031f 	and.w	r3, r3, #31
 8009042:	fa22 f303 	lsr.w	r3, r2, r3
 8009046:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009048:	4b0a      	ldr	r3, [pc, #40]	@ (8009074 <HAL_RCC_GetHCLKFreq+0x50>)
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	f003 030f 	and.w	r3, r3, #15
 8009050:	4a09      	ldr	r2, [pc, #36]	@ (8009078 <HAL_RCC_GetHCLKFreq+0x54>)
 8009052:	5cd3      	ldrb	r3, [r2, r3]
 8009054:	f003 031f 	and.w	r3, r3, #31
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	fa22 f303 	lsr.w	r3, r2, r3
 800905e:	4a07      	ldr	r2, [pc, #28]	@ (800907c <HAL_RCC_GetHCLKFreq+0x58>)
 8009060:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009062:	4a07      	ldr	r2, [pc, #28]	@ (8009080 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009068:	4b04      	ldr	r3, [pc, #16]	@ (800907c <HAL_RCC_GetHCLKFreq+0x58>)
 800906a:	681b      	ldr	r3, [r3, #0]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	58024400 	.word	0x58024400
 8009078:	08021ba4 	.word	0x08021ba4
 800907c:	24000004 	.word	0x24000004
 8009080:	24000000 	.word	0x24000000

08009084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009088:	f7ff ffcc 	bl	8009024 <HAL_RCC_GetHCLKFreq>
 800908c:	4602      	mov	r2, r0
 800908e:	4b06      	ldr	r3, [pc, #24]	@ (80090a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	091b      	lsrs	r3, r3, #4
 8009094:	f003 0307 	and.w	r3, r3, #7
 8009098:	4904      	ldr	r1, [pc, #16]	@ (80090ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800909a:	5ccb      	ldrb	r3, [r1, r3]
 800909c:	f003 031f 	and.w	r3, r3, #31
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	58024400 	.word	0x58024400
 80090ac:	08021ba4 	.word	0x08021ba4

080090b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80090b4:	f7ff ffb6 	bl	8009024 <HAL_RCC_GetHCLKFreq>
 80090b8:	4602      	mov	r2, r0
 80090ba:	4b06      	ldr	r3, [pc, #24]	@ (80090d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	0a1b      	lsrs	r3, r3, #8
 80090c0:	f003 0307 	and.w	r3, r3, #7
 80090c4:	4904      	ldr	r1, [pc, #16]	@ (80090d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80090c6:	5ccb      	ldrb	r3, [r1, r3]
 80090c8:	f003 031f 	and.w	r3, r3, #31
 80090cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	58024400 	.word	0x58024400
 80090d8:	08021ba4 	.word	0x08021ba4

080090dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090e0:	b0c6      	sub	sp, #280	@ 0x118
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090e8:	2300      	movs	r3, #0
 80090ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090ee:	2300      	movs	r3, #0
 80090f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80090f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009100:	2500      	movs	r5, #0
 8009102:	ea54 0305 	orrs.w	r3, r4, r5
 8009106:	d049      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800910c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800910e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009112:	d02f      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009114:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009118:	d828      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800911a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800911e:	d01a      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009120:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009124:	d822      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009126:	2b00      	cmp	r3, #0
 8009128:	d003      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800912a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800912e:	d007      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009130:	e01c      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009132:	4bab      	ldr	r3, [pc, #684]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009136:	4aaa      	ldr	r2, [pc, #680]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800913c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800913e:	e01a      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009144:	3308      	adds	r3, #8
 8009146:	2102      	movs	r1, #2
 8009148:	4618      	mov	r0, r3
 800914a:	f002 fa49 	bl	800b5e0 <RCCEx_PLL2_Config>
 800914e:	4603      	mov	r3, r0
 8009150:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009154:	e00f      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800915a:	3328      	adds	r3, #40	@ 0x28
 800915c:	2102      	movs	r1, #2
 800915e:	4618      	mov	r0, r3
 8009160:	f002 faf0 	bl	800b744 <RCCEx_PLL3_Config>
 8009164:	4603      	mov	r3, r0
 8009166:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800916a:	e004      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009172:	e000      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009176:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10a      	bne.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800917e:	4b98      	ldr	r3, [pc, #608]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009182:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800918a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800918c:	4a94      	ldr	r2, [pc, #592]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800918e:	430b      	orrs	r3, r1
 8009190:	6513      	str	r3, [r2, #80]	@ 0x50
 8009192:	e003      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009198:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800919c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80091a8:	f04f 0900 	mov.w	r9, #0
 80091ac:	ea58 0309 	orrs.w	r3, r8, r9
 80091b0:	d047      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80091b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d82a      	bhi.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80091bc:	a201      	add	r2, pc, #4	@ (adr r2, 80091c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80091be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c2:	bf00      	nop
 80091c4:	080091d9 	.word	0x080091d9
 80091c8:	080091e7 	.word	0x080091e7
 80091cc:	080091fd 	.word	0x080091fd
 80091d0:	0800921b 	.word	0x0800921b
 80091d4:	0800921b 	.word	0x0800921b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091d8:	4b81      	ldr	r3, [pc, #516]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80091da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091dc:	4a80      	ldr	r2, [pc, #512]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80091de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091e4:	e01a      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ea:	3308      	adds	r3, #8
 80091ec:	2100      	movs	r1, #0
 80091ee:	4618      	mov	r0, r3
 80091f0:	f002 f9f6 	bl	800b5e0 <RCCEx_PLL2_Config>
 80091f4:	4603      	mov	r3, r0
 80091f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091fa:	e00f      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009200:	3328      	adds	r3, #40	@ 0x28
 8009202:	2100      	movs	r1, #0
 8009204:	4618      	mov	r0, r3
 8009206:	f002 fa9d 	bl	800b744 <RCCEx_PLL3_Config>
 800920a:	4603      	mov	r3, r0
 800920c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009210:	e004      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009218:	e000      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800921a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800921c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10a      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009224:	4b6e      	ldr	r3, [pc, #440]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009228:	f023 0107 	bic.w	r1, r3, #7
 800922c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009232:	4a6b      	ldr	r2, [pc, #428]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009234:	430b      	orrs	r3, r1
 8009236:	6513      	str	r3, [r2, #80]	@ 0x50
 8009238:	e003      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800923e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800924e:	f04f 0b00 	mov.w	fp, #0
 8009252:	ea5a 030b 	orrs.w	r3, sl, fp
 8009256:	d05b      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800925c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009260:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009264:	d03b      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009266:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800926a:	d834      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800926c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009270:	d037      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009272:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009276:	d82e      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009278:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800927c:	d033      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800927e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009282:	d828      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009284:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009288:	d01a      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800928a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800928e:	d822      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009290:	2b00      	cmp	r3, #0
 8009292:	d003      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009294:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009298:	d007      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800929a:	e01c      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800929c:	4b50      	ldr	r3, [pc, #320]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800929e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a0:	4a4f      	ldr	r2, [pc, #316]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80092a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092a8:	e01e      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ae:	3308      	adds	r3, #8
 80092b0:	2100      	movs	r1, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f002 f994 	bl	800b5e0 <RCCEx_PLL2_Config>
 80092b8:	4603      	mov	r3, r0
 80092ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80092be:	e013      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092c4:	3328      	adds	r3, #40	@ 0x28
 80092c6:	2100      	movs	r1, #0
 80092c8:	4618      	mov	r0, r3
 80092ca:	f002 fa3b 	bl	800b744 <RCCEx_PLL3_Config>
 80092ce:	4603      	mov	r3, r0
 80092d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092d4:	e008      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092dc:	e004      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80092de:	bf00      	nop
 80092e0:	e002      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80092e2:	bf00      	nop
 80092e4:	e000      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80092e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10b      	bne.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80092f0:	4b3b      	ldr	r3, [pc, #236]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80092f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092f4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80092f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009300:	4a37      	ldr	r2, [pc, #220]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009302:	430b      	orrs	r3, r1
 8009304:	6593      	str	r3, [r2, #88]	@ 0x58
 8009306:	e003      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009308:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800930c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800931c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009320:	2300      	movs	r3, #0
 8009322:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009326:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800932a:	460b      	mov	r3, r1
 800932c:	4313      	orrs	r3, r2
 800932e:	d05d      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009334:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009338:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800933c:	d03b      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800933e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009342:	d834      	bhi.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009344:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009348:	d037      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800934a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800934e:	d82e      	bhi.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009350:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009354:	d033      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009356:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800935a:	d828      	bhi.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800935c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009360:	d01a      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009362:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009366:	d822      	bhi.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800936c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009370:	d007      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009372:	e01c      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009374:	4b1a      	ldr	r3, [pc, #104]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009378:	4a19      	ldr	r2, [pc, #100]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800937a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800937e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009380:	e01e      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009386:	3308      	adds	r3, #8
 8009388:	2100      	movs	r1, #0
 800938a:	4618      	mov	r0, r3
 800938c:	f002 f928 	bl	800b5e0 <RCCEx_PLL2_Config>
 8009390:	4603      	mov	r3, r0
 8009392:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009396:	e013      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939c:	3328      	adds	r3, #40	@ 0x28
 800939e:	2100      	movs	r1, #0
 80093a0:	4618      	mov	r0, r3
 80093a2:	f002 f9cf 	bl	800b744 <RCCEx_PLL3_Config>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093ac:	e008      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093b4:	e004      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80093b6:	bf00      	nop
 80093b8:	e002      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80093ba:	bf00      	nop
 80093bc:	e000      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80093be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10d      	bne.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80093c8:	4b05      	ldr	r3, [pc, #20]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80093ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80093d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80093d8:	4a01      	ldr	r2, [pc, #4]	@ (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80093da:	430b      	orrs	r3, r1
 80093dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80093de:	e005      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x310>
 80093e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80093ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80093f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80093fc:	2300      	movs	r3, #0
 80093fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009402:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009406:	460b      	mov	r3, r1
 8009408:	4313      	orrs	r3, r2
 800940a:	d03a      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800940c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009412:	2b30      	cmp	r3, #48	@ 0x30
 8009414:	d01f      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009416:	2b30      	cmp	r3, #48	@ 0x30
 8009418:	d819      	bhi.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800941a:	2b20      	cmp	r3, #32
 800941c:	d00c      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800941e:	2b20      	cmp	r3, #32
 8009420:	d815      	bhi.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009422:	2b00      	cmp	r3, #0
 8009424:	d019      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009426:	2b10      	cmp	r3, #16
 8009428:	d111      	bne.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800942a:	4baa      	ldr	r3, [pc, #680]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800942c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942e:	4aa9      	ldr	r2, [pc, #676]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009434:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009436:	e011      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800943c:	3308      	adds	r3, #8
 800943e:	2102      	movs	r1, #2
 8009440:	4618      	mov	r0, r3
 8009442:	f002 f8cd 	bl	800b5e0 <RCCEx_PLL2_Config>
 8009446:	4603      	mov	r3, r0
 8009448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800944c:	e006      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009454:	e002      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009456:	bf00      	nop
 8009458:	e000      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800945a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800945c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10a      	bne.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009464:	4b9b      	ldr	r3, [pc, #620]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009468:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800946c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009472:	4a98      	ldr	r2, [pc, #608]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009474:	430b      	orrs	r3, r1
 8009476:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009478:	e003      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800947a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800947e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800948e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009492:	2300      	movs	r3, #0
 8009494:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009498:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800949c:	460b      	mov	r3, r1
 800949e:	4313      	orrs	r3, r2
 80094a0:	d051      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80094a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094ac:	d035      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80094ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094b2:	d82e      	bhi.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80094b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094b8:	d031      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80094ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094be:	d828      	bhi.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80094c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094c4:	d01a      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80094c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094ca:	d822      	bhi.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80094d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094d4:	d007      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80094d6:	e01c      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094d8:	4b7e      	ldr	r3, [pc, #504]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094dc:	4a7d      	ldr	r2, [pc, #500]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80094e4:	e01c      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ea:	3308      	adds	r3, #8
 80094ec:	2100      	movs	r1, #0
 80094ee:	4618      	mov	r0, r3
 80094f0:	f002 f876 	bl	800b5e0 <RCCEx_PLL2_Config>
 80094f4:	4603      	mov	r3, r0
 80094f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80094fa:	e011      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009500:	3328      	adds	r3, #40	@ 0x28
 8009502:	2100      	movs	r1, #0
 8009504:	4618      	mov	r0, r3
 8009506:	f002 f91d 	bl	800b744 <RCCEx_PLL3_Config>
 800950a:	4603      	mov	r3, r0
 800950c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009510:	e006      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009518:	e002      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800951a:	bf00      	nop
 800951c:	e000      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800951e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009520:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009528:	4b6a      	ldr	r3, [pc, #424]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800952a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800952c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009536:	4a67      	ldr	r2, [pc, #412]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009538:	430b      	orrs	r3, r1
 800953a:	6513      	str	r3, [r2, #80]	@ 0x50
 800953c:	e003      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800953e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009542:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009552:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009556:	2300      	movs	r3, #0
 8009558:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800955c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009560:	460b      	mov	r3, r1
 8009562:	4313      	orrs	r3, r2
 8009564:	d053      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800956a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800956c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009570:	d033      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009572:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009576:	d82c      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009578:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800957c:	d02f      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x502>
 800957e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009582:	d826      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009584:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009588:	d02b      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800958a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800958e:	d820      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009590:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009594:	d012      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800959a:	d81a      	bhi.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800959c:	2b00      	cmp	r3, #0
 800959e:	d022      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80095a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095a4:	d115      	bne.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095aa:	3308      	adds	r3, #8
 80095ac:	2101      	movs	r1, #1
 80095ae:	4618      	mov	r0, r3
 80095b0:	f002 f816 	bl	800b5e0 <RCCEx_PLL2_Config>
 80095b4:	4603      	mov	r3, r0
 80095b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80095ba:	e015      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095c0:	3328      	adds	r3, #40	@ 0x28
 80095c2:	2101      	movs	r1, #1
 80095c4:	4618      	mov	r0, r3
 80095c6:	f002 f8bd 	bl	800b744 <RCCEx_PLL3_Config>
 80095ca:	4603      	mov	r3, r0
 80095cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80095d0:	e00a      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095d8:	e006      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80095da:	bf00      	nop
 80095dc:	e004      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80095de:	bf00      	nop
 80095e0:	e002      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80095e2:	bf00      	nop
 80095e4:	e000      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80095e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d10a      	bne.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80095f0:	4b38      	ldr	r3, [pc, #224]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80095f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80095f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095fe:	4a35      	ldr	r2, [pc, #212]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009600:	430b      	orrs	r3, r1
 8009602:	6513      	str	r3, [r2, #80]	@ 0x50
 8009604:	e003      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009606:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800960a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800960e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800961a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800961e:	2300      	movs	r3, #0
 8009620:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009624:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009628:	460b      	mov	r3, r1
 800962a:	4313      	orrs	r3, r2
 800962c:	d058      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800962e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009632:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009636:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800963a:	d033      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800963c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009640:	d82c      	bhi.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009646:	d02f      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800964c:	d826      	bhi.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800964e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009652:	d02b      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009654:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009658:	d820      	bhi.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800965a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800965e:	d012      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009660:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009664:	d81a      	bhi.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009666:	2b00      	cmp	r3, #0
 8009668:	d022      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800966a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800966e:	d115      	bne.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009674:	3308      	adds	r3, #8
 8009676:	2101      	movs	r1, #1
 8009678:	4618      	mov	r0, r3
 800967a:	f001 ffb1 	bl	800b5e0 <RCCEx_PLL2_Config>
 800967e:	4603      	mov	r3, r0
 8009680:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009684:	e015      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800968a:	3328      	adds	r3, #40	@ 0x28
 800968c:	2101      	movs	r1, #1
 800968e:	4618      	mov	r0, r3
 8009690:	f002 f858 	bl	800b744 <RCCEx_PLL3_Config>
 8009694:	4603      	mov	r3, r0
 8009696:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800969a:	e00a      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80096a2:	e006      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80096a4:	bf00      	nop
 80096a6:	e004      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80096a8:	bf00      	nop
 80096aa:	e002      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80096ac:	bf00      	nop
 80096ae:	e000      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80096b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10e      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80096ba:	4b06      	ldr	r3, [pc, #24]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80096c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80096ca:	4a02      	ldr	r2, [pc, #8]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096cc:	430b      	orrs	r3, r1
 80096ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80096d0:	e006      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80096d2:	bf00      	nop
 80096d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80096ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80096f0:	2300      	movs	r3, #0
 80096f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80096f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4313      	orrs	r3, r2
 80096fe:	d037      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009706:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800970a:	d00e      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800970c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009710:	d816      	bhi.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009712:	2b00      	cmp	r3, #0
 8009714:	d018      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009716:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800971a:	d111      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800971c:	4bc4      	ldr	r3, [pc, #784]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800971e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009720:	4ac3      	ldr	r2, [pc, #780]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009728:	e00f      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800972a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800972e:	3308      	adds	r3, #8
 8009730:	2101      	movs	r1, #1
 8009732:	4618      	mov	r0, r3
 8009734:	f001 ff54 	bl	800b5e0 <RCCEx_PLL2_Config>
 8009738:	4603      	mov	r3, r0
 800973a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800973e:	e004      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009746:	e000      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800974a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009752:	4bb7      	ldr	r3, [pc, #732]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009756:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800975a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800975e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009760:	4ab3      	ldr	r2, [pc, #716]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009762:	430b      	orrs	r3, r1
 8009764:	6513      	str	r3, [r2, #80]	@ 0x50
 8009766:	e003      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009768:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800976c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800977c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009780:	2300      	movs	r3, #0
 8009782:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009786:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800978a:	460b      	mov	r3, r1
 800978c:	4313      	orrs	r3, r2
 800978e:	d039      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009796:	2b03      	cmp	r3, #3
 8009798:	d81c      	bhi.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800979a:	a201      	add	r2, pc, #4	@ (adr r2, 80097a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800979c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a0:	080097dd 	.word	0x080097dd
 80097a4:	080097b1 	.word	0x080097b1
 80097a8:	080097bf 	.word	0x080097bf
 80097ac:	080097dd 	.word	0x080097dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097b0:	4b9f      	ldr	r3, [pc, #636]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b4:	4a9e      	ldr	r2, [pc, #632]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80097bc:	e00f      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c2:	3308      	adds	r3, #8
 80097c4:	2102      	movs	r1, #2
 80097c6:	4618      	mov	r0, r3
 80097c8:	f001 ff0a 	bl	800b5e0 <RCCEx_PLL2_Config>
 80097cc:	4603      	mov	r3, r0
 80097ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80097d2:	e004      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097da:	e000      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80097dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10a      	bne.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80097e6:	4b92      	ldr	r3, [pc, #584]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ea:	f023 0103 	bic.w	r1, r3, #3
 80097ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097f4:	4a8e      	ldr	r2, [pc, #568]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097f6:	430b      	orrs	r3, r1
 80097f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097fa:	e003      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009810:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009814:	2300      	movs	r3, #0
 8009816:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800981a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800981e:	460b      	mov	r3, r1
 8009820:	4313      	orrs	r3, r2
 8009822:	f000 8099 	beq.w	8009958 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009826:	4b83      	ldr	r3, [pc, #524]	@ (8009a34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a82      	ldr	r2, [pc, #520]	@ (8009a34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800982c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009830:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009832:	f7fa fbfd 	bl	8004030 <HAL_GetTick>
 8009836:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800983a:	e00b      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800983c:	f7fa fbf8 	bl	8004030 <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	2b64      	cmp	r3, #100	@ 0x64
 800984a:	d903      	bls.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009852:	e005      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009854:	4b77      	ldr	r3, [pc, #476]	@ (8009a34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800985c:	2b00      	cmp	r3, #0
 800985e:	d0ed      	beq.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009864:	2b00      	cmp	r3, #0
 8009866:	d173      	bne.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009868:	4b71      	ldr	r3, [pc, #452]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800986a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800986c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009870:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009874:	4053      	eors	r3, r2
 8009876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800987a:	2b00      	cmp	r3, #0
 800987c:	d015      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800987e:	4b6c      	ldr	r3, [pc, #432]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009886:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800988a:	4b69      	ldr	r3, [pc, #420]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800988c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800988e:	4a68      	ldr	r2, [pc, #416]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009894:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009896:	4b66      	ldr	r3, [pc, #408]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800989a:	4a65      	ldr	r2, [pc, #404]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800989c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098a0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80098a2:	4a63      	ldr	r2, [pc, #396]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80098aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80098b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098b6:	d118      	bne.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098b8:	f7fa fbba 	bl	8004030 <HAL_GetTick>
 80098bc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098c0:	e00d      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098c2:	f7fa fbb5 	bl	8004030 <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80098cc:	1ad2      	subs	r2, r2, r3
 80098ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d903      	bls.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80098dc:	e005      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098de:	4b54      	ldr	r3, [pc, #336]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098e2:	f003 0302 	and.w	r3, r3, #2
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d0eb      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80098ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d129      	bne.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80098fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009902:	d10e      	bne.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009904:	4b4a      	ldr	r3, [pc, #296]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800990c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009910:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009914:	091a      	lsrs	r2, r3, #4
 8009916:	4b48      	ldr	r3, [pc, #288]	@ (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009918:	4013      	ands	r3, r2
 800991a:	4a45      	ldr	r2, [pc, #276]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800991c:	430b      	orrs	r3, r1
 800991e:	6113      	str	r3, [r2, #16]
 8009920:	e005      	b.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009922:	4b43      	ldr	r3, [pc, #268]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	4a42      	ldr	r2, [pc, #264]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009928:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800992c:	6113      	str	r3, [r2, #16]
 800992e:	4b40      	ldr	r3, [pc, #256]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009930:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009936:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800993a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800993e:	4a3c      	ldr	r2, [pc, #240]	@ (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009940:	430b      	orrs	r3, r1
 8009942:	6713      	str	r3, [r2, #112]	@ 0x70
 8009944:	e008      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009946:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800994a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800994e:	e003      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009954:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	f002 0301 	and.w	r3, r2, #1
 8009964:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009968:	2300      	movs	r3, #0
 800996a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800996e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009972:	460b      	mov	r3, r1
 8009974:	4313      	orrs	r3, r2
 8009976:	f000 808f 	beq.w	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800997a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009980:	2b28      	cmp	r3, #40	@ 0x28
 8009982:	d871      	bhi.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009984:	a201      	add	r2, pc, #4	@ (adr r2, 800998c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998a:	bf00      	nop
 800998c:	08009a71 	.word	0x08009a71
 8009990:	08009a69 	.word	0x08009a69
 8009994:	08009a69 	.word	0x08009a69
 8009998:	08009a69 	.word	0x08009a69
 800999c:	08009a69 	.word	0x08009a69
 80099a0:	08009a69 	.word	0x08009a69
 80099a4:	08009a69 	.word	0x08009a69
 80099a8:	08009a69 	.word	0x08009a69
 80099ac:	08009a3d 	.word	0x08009a3d
 80099b0:	08009a69 	.word	0x08009a69
 80099b4:	08009a69 	.word	0x08009a69
 80099b8:	08009a69 	.word	0x08009a69
 80099bc:	08009a69 	.word	0x08009a69
 80099c0:	08009a69 	.word	0x08009a69
 80099c4:	08009a69 	.word	0x08009a69
 80099c8:	08009a69 	.word	0x08009a69
 80099cc:	08009a53 	.word	0x08009a53
 80099d0:	08009a69 	.word	0x08009a69
 80099d4:	08009a69 	.word	0x08009a69
 80099d8:	08009a69 	.word	0x08009a69
 80099dc:	08009a69 	.word	0x08009a69
 80099e0:	08009a69 	.word	0x08009a69
 80099e4:	08009a69 	.word	0x08009a69
 80099e8:	08009a69 	.word	0x08009a69
 80099ec:	08009a71 	.word	0x08009a71
 80099f0:	08009a69 	.word	0x08009a69
 80099f4:	08009a69 	.word	0x08009a69
 80099f8:	08009a69 	.word	0x08009a69
 80099fc:	08009a69 	.word	0x08009a69
 8009a00:	08009a69 	.word	0x08009a69
 8009a04:	08009a69 	.word	0x08009a69
 8009a08:	08009a69 	.word	0x08009a69
 8009a0c:	08009a71 	.word	0x08009a71
 8009a10:	08009a69 	.word	0x08009a69
 8009a14:	08009a69 	.word	0x08009a69
 8009a18:	08009a69 	.word	0x08009a69
 8009a1c:	08009a69 	.word	0x08009a69
 8009a20:	08009a69 	.word	0x08009a69
 8009a24:	08009a69 	.word	0x08009a69
 8009a28:	08009a69 	.word	0x08009a69
 8009a2c:	08009a71 	.word	0x08009a71
 8009a30:	58024400 	.word	0x58024400
 8009a34:	58024800 	.word	0x58024800
 8009a38:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a40:	3308      	adds	r3, #8
 8009a42:	2101      	movs	r1, #1
 8009a44:	4618      	mov	r0, r3
 8009a46:	f001 fdcb 	bl	800b5e0 <RCCEx_PLL2_Config>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a50:	e00f      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a56:	3328      	adds	r3, #40	@ 0x28
 8009a58:	2101      	movs	r1, #1
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f001 fe72 	bl	800b744 <RCCEx_PLL3_Config>
 8009a60:	4603      	mov	r3, r0
 8009a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a66:	e004      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a6e:	e000      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10a      	bne.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009a7a:	4bbf      	ldr	r3, [pc, #764]	@ (8009d78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a88:	4abb      	ldr	r2, [pc, #748]	@ (8009d78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a8a:	430b      	orrs	r3, r1
 8009a8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a8e:	e003      	b.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f002 0302 	and.w	r3, r2, #2
 8009aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009aae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	d041      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009abe:	2b05      	cmp	r3, #5
 8009ac0:	d824      	bhi.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac8:	08009b15 	.word	0x08009b15
 8009acc:	08009ae1 	.word	0x08009ae1
 8009ad0:	08009af7 	.word	0x08009af7
 8009ad4:	08009b15 	.word	0x08009b15
 8009ad8:	08009b15 	.word	0x08009b15
 8009adc:	08009b15 	.word	0x08009b15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f001 fd79 	bl	800b5e0 <RCCEx_PLL2_Config>
 8009aee:	4603      	mov	r3, r0
 8009af0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009af4:	e00f      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009afa:	3328      	adds	r3, #40	@ 0x28
 8009afc:	2101      	movs	r1, #1
 8009afe:	4618      	mov	r0, r3
 8009b00:	f001 fe20 	bl	800b744 <RCCEx_PLL3_Config>
 8009b04:	4603      	mov	r3, r0
 8009b06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b0a:	e004      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b12:	e000      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10a      	bne.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b1e:	4b96      	ldr	r3, [pc, #600]	@ (8009d78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b22:	f023 0107 	bic.w	r1, r3, #7
 8009b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b2c:	4a92      	ldr	r2, [pc, #584]	@ (8009d78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009b2e:	430b      	orrs	r3, r1
 8009b30:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b32:	e003      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b44:	f002 0304 	and.w	r3, r2, #4
 8009b48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b52:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009b56:	460b      	mov	r3, r1
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	d044      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b64:	2b05      	cmp	r3, #5
 8009b66:	d825      	bhi.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009b68:	a201      	add	r2, pc, #4	@ (adr r2, 8009b70 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6e:	bf00      	nop
 8009b70:	08009bbd 	.word	0x08009bbd
 8009b74:	08009b89 	.word	0x08009b89
 8009b78:	08009b9f 	.word	0x08009b9f
 8009b7c:	08009bbd 	.word	0x08009bbd
 8009b80:	08009bbd 	.word	0x08009bbd
 8009b84:	08009bbd 	.word	0x08009bbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	2101      	movs	r1, #1
 8009b90:	4618      	mov	r0, r3
 8009b92:	f001 fd25 	bl	800b5e0 <RCCEx_PLL2_Config>
 8009b96:	4603      	mov	r3, r0
 8009b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009b9c:	e00f      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba2:	3328      	adds	r3, #40	@ 0x28
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f001 fdcc 	bl	800b744 <RCCEx_PLL3_Config>
 8009bac:	4603      	mov	r3, r0
 8009bae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009bb2:	e004      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bba:	e000      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10b      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bc6:	4b6c      	ldr	r3, [pc, #432]	@ (8009d78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bca:	f023 0107 	bic.w	r1, r3, #7
 8009bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bd6:	4a68      	ldr	r2, [pc, #416]	@ (8009d78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009bd8:	430b      	orrs	r3, r1
 8009bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bdc:	e003      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009be2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f002 0320 	and.w	r3, r2, #32
 8009bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009bfc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4313      	orrs	r3, r2
 8009c04:	d055      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c12:	d033      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c18:	d82c      	bhi.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c1e:	d02f      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c24:	d826      	bhi.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009c26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c2a:	d02b      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009c2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c30:	d820      	bhi.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c36:	d012      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009c38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c3c:	d81a      	bhi.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d022      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009c42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c46:	d115      	bne.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f001 fcc5 	bl	800b5e0 <RCCEx_PLL2_Config>
 8009c56:	4603      	mov	r3, r0
 8009c58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c5c:	e015      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c62:	3328      	adds	r3, #40	@ 0x28
 8009c64:	2102      	movs	r1, #2
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 fd6c 	bl	800b744 <RCCEx_PLL3_Config>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c72:	e00a      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c7a:	e006      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009c7c:	bf00      	nop
 8009c7e:	e004      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009c80:	bf00      	nop
 8009c82:	e002      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009c84:	bf00      	nop
 8009c86:	e000      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10b      	bne.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c92:	4b39      	ldr	r3, [pc, #228]	@ (8009d78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ca2:	4a35      	ldr	r2, [pc, #212]	@ (8009d78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009ca4:	430b      	orrs	r3, r1
 8009ca6:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ca8:	e003      	b.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009caa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009cbe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cc8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	d058      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cda:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009cde:	d033      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009ce0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009ce4:	d82c      	bhi.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cea:	d02f      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cf0:	d826      	bhi.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009cf2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cf6:	d02b      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009cf8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cfc:	d820      	bhi.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d02:	d012      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d08:	d81a      	bhi.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d022      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d12:	d115      	bne.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d18:	3308      	adds	r3, #8
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 fc5f 	bl	800b5e0 <RCCEx_PLL2_Config>
 8009d22:	4603      	mov	r3, r0
 8009d24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d28:	e015      	b.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2e:	3328      	adds	r3, #40	@ 0x28
 8009d30:	2102      	movs	r1, #2
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fd06 	bl	800b744 <RCCEx_PLL3_Config>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d3e:	e00a      	b.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d46:	e006      	b.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009d48:	bf00      	nop
 8009d4a:	e004      	b.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009d4c:	bf00      	nop
 8009d4e:	e002      	b.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009d50:	bf00      	nop
 8009d52:	e000      	b.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d10e      	bne.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d5e:	4b06      	ldr	r3, [pc, #24]	@ (8009d78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d62:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d6e:	4a02      	ldr	r2, [pc, #8]	@ (8009d78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009d70:	430b      	orrs	r3, r1
 8009d72:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d74:	e006      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009d76:	bf00      	nop
 8009d78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009d90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d94:	2300      	movs	r3, #0
 8009d96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4313      	orrs	r3, r2
 8009da2:	d055      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009dac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009db0:	d033      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009db2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009db6:	d82c      	bhi.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dbc:	d02f      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dc2:	d826      	bhi.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009dc4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009dc8:	d02b      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009dca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009dce:	d820      	bhi.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009dd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dd4:	d012      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009dd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dda:	d81a      	bhi.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d022      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009de4:	d115      	bne.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dea:	3308      	adds	r3, #8
 8009dec:	2100      	movs	r1, #0
 8009dee:	4618      	mov	r0, r3
 8009df0:	f001 fbf6 	bl	800b5e0 <RCCEx_PLL2_Config>
 8009df4:	4603      	mov	r3, r0
 8009df6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009dfa:	e015      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e00:	3328      	adds	r3, #40	@ 0x28
 8009e02:	2102      	movs	r1, #2
 8009e04:	4618      	mov	r0, r3
 8009e06:	f001 fc9d 	bl	800b744 <RCCEx_PLL3_Config>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e10:	e00a      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e18:	e006      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009e1a:	bf00      	nop
 8009e1c:	e004      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009e1e:	bf00      	nop
 8009e20:	e002      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009e22:	bf00      	nop
 8009e24:	e000      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10b      	bne.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e30:	4ba0      	ldr	r3, [pc, #640]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e34:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e40:	4a9c      	ldr	r2, [pc, #624]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e42:	430b      	orrs	r3, r1
 8009e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e46:	e003      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e58:	f002 0308 	and.w	r3, r2, #8
 8009e5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e60:	2300      	movs	r3, #0
 8009e62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009e66:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	d01e      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e7c:	d10c      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e82:	3328      	adds	r3, #40	@ 0x28
 8009e84:	2102      	movs	r1, #2
 8009e86:	4618      	mov	r0, r3
 8009e88:	f001 fc5c 	bl	800b744 <RCCEx_PLL3_Config>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d002      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009e98:	4b86      	ldr	r3, [pc, #536]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e9c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ea8:	4a82      	ldr	r2, [pc, #520]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009eaa:	430b      	orrs	r3, r1
 8009eac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f002 0310 	and.w	r3, r2, #16
 8009eba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ec4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	d01e      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009eda:	d10c      	bne.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee0:	3328      	adds	r3, #40	@ 0x28
 8009ee2:	2102      	movs	r1, #2
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f001 fc2d 	bl	800b744 <RCCEx_PLL3_Config>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ef6:	4b6f      	ldr	r3, [pc, #444]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009efa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f06:	4a6b      	ldr	r2, [pc, #428]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009f08:	430b      	orrs	r3, r1
 8009f0a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009f18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f1e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009f22:	460b      	mov	r3, r1
 8009f24:	4313      	orrs	r3, r2
 8009f26:	d03e      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f34:	d022      	beq.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009f36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f3a:	d81b      	bhi.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d003      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f44:	d00b      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009f46:	e015      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f4c:	3308      	adds	r3, #8
 8009f4e:	2100      	movs	r1, #0
 8009f50:	4618      	mov	r0, r3
 8009f52:	f001 fb45 	bl	800b5e0 <RCCEx_PLL2_Config>
 8009f56:	4603      	mov	r3, r0
 8009f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f5c:	e00f      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f62:	3328      	adds	r3, #40	@ 0x28
 8009f64:	2102      	movs	r1, #2
 8009f66:	4618      	mov	r0, r3
 8009f68:	f001 fbec 	bl	800b744 <RCCEx_PLL3_Config>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f72:	e004      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f7a:	e000      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10b      	bne.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f86:	4b4b      	ldr	r3, [pc, #300]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f8a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f96:	4a47      	ldr	r2, [pc, #284]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009f98:	430b      	orrs	r3, r1
 8009f9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f9c:	e003      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009fb2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8009fb8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	d03b      	beq.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009fce:	d01f      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009fd0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009fd4:	d818      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fda:	d003      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009fdc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009fe0:	d007      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009fe2:	e011      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fe4:	4b33      	ldr	r3, [pc, #204]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe8:	4a32      	ldr	r2, [pc, #200]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ff0:	e00f      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff6:	3328      	adds	r3, #40	@ 0x28
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f001 fba2 	bl	800b744 <RCCEx_PLL3_Config>
 800a000:	4603      	mov	r3, r0
 800a002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a006:	e004      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a00e:	e000      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a010:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a012:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10b      	bne.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a01a:	4b26      	ldr	r3, [pc, #152]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a01e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a02a:	4a22      	ldr	r2, [pc, #136]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a02c:	430b      	orrs	r3, r1
 800a02e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a030:	e003      	b.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a032:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a036:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a042:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a046:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a048:	2300      	movs	r3, #0
 800a04a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a04c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a050:	460b      	mov	r3, r1
 800a052:	4313      	orrs	r3, r2
 800a054:	d034      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a064:	d007      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a066:	e011      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a068:	4b12      	ldr	r3, [pc, #72]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a06a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06c:	4a11      	ldr	r2, [pc, #68]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a06e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a074:	e00e      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a07a:	3308      	adds	r3, #8
 800a07c:	2102      	movs	r1, #2
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 faae 	bl	800b5e0 <RCCEx_PLL2_Config>
 800a084:	4603      	mov	r3, r0
 800a086:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a08a:	e003      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a092:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10d      	bne.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a09c:	4b05      	ldr	r3, [pc, #20]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a09e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0aa:	4a02      	ldr	r2, [pc, #8]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a0ac:	430b      	orrs	r3, r1
 800a0ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a0b0:	e006      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a0b2:	bf00      	nop
 800a0b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a0cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a0d2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	d00c      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e0:	3328      	adds	r3, #40	@ 0x28
 800a0e2:	2102      	movs	r1, #2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f001 fb2d 	bl	800b744 <RCCEx_PLL3_Config>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a0f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a102:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a104:	2300      	movs	r3, #0
 800a106:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a108:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a10c:	460b      	mov	r3, r1
 800a10e:	4313      	orrs	r3, r2
 800a110:	d036      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a118:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a11c:	d018      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a11e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a122:	d811      	bhi.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a128:	d014      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a12a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a12e:	d80b      	bhi.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a130:	2b00      	cmp	r3, #0
 800a132:	d011      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a138:	d106      	bne.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a13a:	4bb7      	ldr	r3, [pc, #732]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a13e:	4ab6      	ldr	r2, [pc, #728]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a144:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a146:	e008      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a14e:	e004      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a150:	bf00      	nop
 800a152:	e002      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a154:	bf00      	nop
 800a156:	e000      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a15a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10a      	bne.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a162:	4bad      	ldr	r3, [pc, #692]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a166:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a170:	4aa9      	ldr	r2, [pc, #676]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a172:	430b      	orrs	r3, r1
 800a174:	6553      	str	r3, [r2, #84]	@ 0x54
 800a176:	e003      	b.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a178:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a17c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a18c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a18e:	2300      	movs	r3, #0
 800a190:	657b      	str	r3, [r7, #84]	@ 0x54
 800a192:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a196:	460b      	mov	r3, r1
 800a198:	4313      	orrs	r3, r2
 800a19a:	d009      	beq.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a19c:	4b9e      	ldr	r3, [pc, #632]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a19e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1aa:	4a9b      	ldr	r2, [pc, #620]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a1ac:	430b      	orrs	r3, r1
 800a1ae:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a1bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1be:	2300      	movs	r3, #0
 800a1c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	d009      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a1cc:	4b92      	ldr	r3, [pc, #584]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a1ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1d0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a1da:	4a8f      	ldr	r2, [pc, #572]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a1dc:	430b      	orrs	r3, r1
 800a1de:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a1ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	d00e      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a1fc:	4b86      	ldr	r3, [pc, #536]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	4a85      	ldr	r2, [pc, #532]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a202:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a206:	6113      	str	r3, [r2, #16]
 800a208:	4b83      	ldr	r3, [pc, #524]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a20a:	6919      	ldr	r1, [r3, #16]
 800a20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a210:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a214:	4a80      	ldr	r2, [pc, #512]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a216:	430b      	orrs	r3, r1
 800a218:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a226:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a228:	2300      	movs	r3, #0
 800a22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a22c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a230:	460b      	mov	r3, r1
 800a232:	4313      	orrs	r3, r2
 800a234:	d009      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a236:	4b78      	ldr	r3, [pc, #480]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a23a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a244:	4a74      	ldr	r2, [pc, #464]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a246:	430b      	orrs	r3, r1
 800a248:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a252:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a256:	633b      	str	r3, [r7, #48]	@ 0x30
 800a258:	2300      	movs	r3, #0
 800a25a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a25c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a260:	460b      	mov	r3, r1
 800a262:	4313      	orrs	r3, r2
 800a264:	d00a      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a266:	4b6c      	ldr	r3, [pc, #432]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a26a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a276:	4a68      	ldr	r2, [pc, #416]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a278:	430b      	orrs	r3, r1
 800a27a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	2100      	movs	r1, #0
 800a286:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a288:	f003 0301 	and.w	r3, r3, #1
 800a28c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a28e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a292:	460b      	mov	r3, r1
 800a294:	4313      	orrs	r3, r2
 800a296:	d011      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a29c:	3308      	adds	r3, #8
 800a29e:	2100      	movs	r1, #0
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f001 f99d 	bl	800b5e0 <RCCEx_PLL2_Config>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a2ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d003      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	6239      	str	r1, [r7, #32]
 800a2c8:	f003 0302 	and.w	r3, r3, #2
 800a2cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	d011      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2dc:	3308      	adds	r3, #8
 800a2de:	2101      	movs	r1, #1
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f001 f97d 	bl	800b5e0 <RCCEx_PLL2_Config>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a2ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d003      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	2100      	movs	r1, #0
 800a306:	61b9      	str	r1, [r7, #24]
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	61fb      	str	r3, [r7, #28]
 800a30e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a312:	460b      	mov	r3, r1
 800a314:	4313      	orrs	r3, r2
 800a316:	d011      	beq.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a31c:	3308      	adds	r3, #8
 800a31e:	2102      	movs	r1, #2
 800a320:	4618      	mov	r0, r3
 800a322:	f001 f95d 	bl	800b5e0 <RCCEx_PLL2_Config>
 800a326:	4603      	mov	r3, r0
 800a328:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a32c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a330:	2b00      	cmp	r3, #0
 800a332:	d003      	beq.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a338:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a33c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a344:	2100      	movs	r1, #0
 800a346:	6139      	str	r1, [r7, #16]
 800a348:	f003 0308 	and.w	r3, r3, #8
 800a34c:	617b      	str	r3, [r7, #20]
 800a34e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a352:	460b      	mov	r3, r1
 800a354:	4313      	orrs	r3, r2
 800a356:	d011      	beq.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a35c:	3328      	adds	r3, #40	@ 0x28
 800a35e:	2100      	movs	r1, #0
 800a360:	4618      	mov	r0, r3
 800a362:	f001 f9ef 	bl	800b744 <RCCEx_PLL3_Config>
 800a366:	4603      	mov	r3, r0
 800a368:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a36c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a370:	2b00      	cmp	r3, #0
 800a372:	d003      	beq.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a374:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a378:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	2100      	movs	r1, #0
 800a386:	60b9      	str	r1, [r7, #8]
 800a388:	f003 0310 	and.w	r3, r3, #16
 800a38c:	60fb      	str	r3, [r7, #12]
 800a38e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a392:	460b      	mov	r3, r1
 800a394:	4313      	orrs	r3, r2
 800a396:	d011      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a39c:	3328      	adds	r3, #40	@ 0x28
 800a39e:	2101      	movs	r1, #1
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f001 f9cf 	bl	800b744 <RCCEx_PLL3_Config>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a3ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d003      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	6039      	str	r1, [r7, #0]
 800a3c8:	f003 0320 	and.w	r3, r3, #32
 800a3cc:	607b      	str	r3, [r7, #4]
 800a3ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	d011      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3dc:	3328      	adds	r3, #40	@ 0x28
 800a3de:	2102      	movs	r1, #2
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f001 f9af 	bl	800b744 <RCCEx_PLL3_Config>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a3ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d003      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a3fc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a400:	2b00      	cmp	r3, #0
 800a402:	d101      	bne.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	e000      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a410:	46bd      	mov	sp, r7
 800a412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a416:	bf00      	nop
 800a418:	58024400 	.word	0x58024400

0800a41c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b090      	sub	sp, #64	@ 0x40
 800a420:	af00      	add	r7, sp, #0
 800a422:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a42a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a42e:	430b      	orrs	r3, r1
 800a430:	f040 8094 	bne.w	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a434:	4b9b      	ldr	r3, [pc, #620]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a438:	f003 0307 	and.w	r3, r3, #7
 800a43c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a440:	2b04      	cmp	r3, #4
 800a442:	f200 8087 	bhi.w	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a446:	a201      	add	r2, pc, #4	@ (adr r2, 800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44c:	0800a461 	.word	0x0800a461
 800a450:	0800a489 	.word	0x0800a489
 800a454:	0800a4b1 	.word	0x0800a4b1
 800a458:	0800a54d 	.word	0x0800a54d
 800a45c:	0800a4d9 	.word	0x0800a4d9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a460:	4b90      	ldr	r3, [pc, #576]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a468:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a46c:	d108      	bne.n	800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a46e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a472:	4618      	mov	r0, r3
 800a474:	f000 ff62 	bl	800b33c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a47c:	f000 bc93 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a480:	2300      	movs	r3, #0
 800a482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a484:	f000 bc8f 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a488:	4b86      	ldr	r3, [pc, #536]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a490:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a494:	d108      	bne.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a496:	f107 0318 	add.w	r3, r7, #24
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fca6 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4a4:	f000 bc7f 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ac:	f000 bc7b 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4b0:	4b7c      	ldr	r3, [pc, #496]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4bc:	d108      	bne.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4be:	f107 030c 	add.w	r3, r7, #12
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f000 fde6 	bl	800b094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4cc:	f000 bc6b 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d4:	f000 bc67 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4d8:	4b72      	ldr	r3, [pc, #456]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a4da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4e0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4e2:	4b70      	ldr	r3, [pc, #448]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f003 0304 	and.w	r3, r3, #4
 800a4ea:	2b04      	cmp	r3, #4
 800a4ec:	d10c      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d109      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4f4:	4b6b      	ldr	r3, [pc, #428]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	08db      	lsrs	r3, r3, #3
 800a4fa:	f003 0303 	and.w	r3, r3, #3
 800a4fe:	4a6a      	ldr	r2, [pc, #424]	@ (800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a500:	fa22 f303 	lsr.w	r3, r2, r3
 800a504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a506:	e01f      	b.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a508:	4b66      	ldr	r3, [pc, #408]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a514:	d106      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a518:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a51c:	d102      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a51e:	4b63      	ldr	r3, [pc, #396]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a522:	e011      	b.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a524:	4b5f      	ldr	r3, [pc, #380]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a52c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a530:	d106      	bne.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a538:	d102      	bne.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a53a:	4b5d      	ldr	r3, [pc, #372]	@ (800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a53e:	e003      	b.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a540:	2300      	movs	r3, #0
 800a542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a544:	f000 bc2f 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a548:	f000 bc2d 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a54c:	4b59      	ldr	r3, [pc, #356]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a550:	f000 bc29 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a558:	f000 bc25 	b.w	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a55c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a560:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a564:	430b      	orrs	r3, r1
 800a566:	f040 80a7 	bne.w	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a56a:	4b4e      	ldr	r3, [pc, #312]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a56c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a56e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a572:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a576:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a57a:	d054      	beq.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a582:	f200 808b 	bhi.w	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a588:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a58c:	f000 8083 	beq.w	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a592:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a596:	f200 8081 	bhi.w	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5a0:	d02f      	beq.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a5a8:	d878      	bhi.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d004      	beq.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5b6:	d012      	beq.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a5b8:	e070      	b.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5ba:	4b3a      	ldr	r3, [pc, #232]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5c6:	d107      	bne.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 feb5 	bl	800b33c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5d6:	e3e6      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5dc:	e3e3      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5de:	4b31      	ldr	r3, [pc, #196]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5ea:	d107      	bne.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5ec:	f107 0318 	add.w	r3, r7, #24
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 fbfb 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5fa:	e3d4      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a600:	e3d1      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a602:	4b28      	ldr	r3, [pc, #160]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a60a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a60e:	d107      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a610:	f107 030c 	add.w	r3, r7, #12
 800a614:	4618      	mov	r0, r3
 800a616:	f000 fd3d 	bl	800b094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a61e:	e3c2      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a624:	e3bf      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a626:	4b1f      	ldr	r3, [pc, #124]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a62a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a62e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a630:	4b1c      	ldr	r3, [pc, #112]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 0304 	and.w	r3, r3, #4
 800a638:	2b04      	cmp	r3, #4
 800a63a:	d10c      	bne.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a63c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d109      	bne.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a642:	4b18      	ldr	r3, [pc, #96]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	08db      	lsrs	r3, r3, #3
 800a648:	f003 0303 	and.w	r3, r3, #3
 800a64c:	4a16      	ldr	r2, [pc, #88]	@ (800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a64e:	fa22 f303 	lsr.w	r3, r2, r3
 800a652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a654:	e01e      	b.n	800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a656:	4b13      	ldr	r3, [pc, #76]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a65e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a662:	d106      	bne.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a666:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a66a:	d102      	bne.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a66c:	4b0f      	ldr	r3, [pc, #60]	@ (800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a670:	e010      	b.n	800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a672:	4b0c      	ldr	r3, [pc, #48]	@ (800a6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a67a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a67e:	d106      	bne.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a682:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a686:	d102      	bne.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a688:	4b09      	ldr	r3, [pc, #36]	@ (800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a68c:	e002      	b.n	800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a692:	e388      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a694:	e387      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a696:	4b07      	ldr	r3, [pc, #28]	@ (800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a69a:	e384      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a69c:	2300      	movs	r3, #0
 800a69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a0:	e381      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a6a2:	bf00      	nop
 800a6a4:	58024400 	.word	0x58024400
 800a6a8:	03d09000 	.word	0x03d09000
 800a6ac:	003d0900 	.word	0x003d0900
 800a6b0:	017d7840 	.word	0x017d7840
 800a6b4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a6b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6bc:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a6c0:	430b      	orrs	r3, r1
 800a6c2:	f040 809c 	bne.w	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a6c6:	4b9e      	ldr	r3, [pc, #632]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a6c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6ca:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a6ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a6d6:	d054      	beq.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a6de:	f200 808b 	bhi.w	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a6e8:	f000 8083 	beq.w	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a6f2:	f200 8081 	bhi.w	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6fc:	d02f      	beq.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a700:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a704:	d878      	bhi.n	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d004      	beq.n	800a716 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a712:	d012      	beq.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a714:	e070      	b.n	800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a716:	4b8a      	ldr	r3, [pc, #552]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a71e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a722:	d107      	bne.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a728:	4618      	mov	r0, r3
 800a72a:	f000 fe07 	bl	800b33c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a732:	e338      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a734:	2300      	movs	r3, #0
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a738:	e335      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a73a:	4b81      	ldr	r3, [pc, #516]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a742:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a746:	d107      	bne.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a748:	f107 0318 	add.w	r3, r7, #24
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 fb4d 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a756:	e326      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a758:	2300      	movs	r3, #0
 800a75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a75c:	e323      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a75e:	4b78      	ldr	r3, [pc, #480]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a76a:	d107      	bne.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a76c:	f107 030c 	add.w	r3, r7, #12
 800a770:	4618      	mov	r0, r3
 800a772:	f000 fc8f 	bl	800b094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a77a:	e314      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a780:	e311      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a782:	4b6f      	ldr	r3, [pc, #444]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a786:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a78a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a78c:	4b6c      	ldr	r3, [pc, #432]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0304 	and.w	r3, r3, #4
 800a794:	2b04      	cmp	r3, #4
 800a796:	d10c      	bne.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d109      	bne.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a79e:	4b68      	ldr	r3, [pc, #416]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	08db      	lsrs	r3, r3, #3
 800a7a4:	f003 0303 	and.w	r3, r3, #3
 800a7a8:	4a66      	ldr	r2, [pc, #408]	@ (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a7aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7b0:	e01e      	b.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7b2:	4b63      	ldr	r3, [pc, #396]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7be:	d106      	bne.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a7c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7c6:	d102      	bne.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7c8:	4b5f      	ldr	r3, [pc, #380]	@ (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7cc:	e010      	b.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7ce:	4b5c      	ldr	r3, [pc, #368]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7da:	d106      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a7dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7e2:	d102      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7e4:	4b59      	ldr	r3, [pc, #356]	@ (800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7e8:	e002      	b.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a7ee:	e2da      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a7f0:	e2d9      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a7f2:	4b57      	ldr	r3, [pc, #348]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f6:	e2d6      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7fc:	e2d3      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a7fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a802:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a806:	430b      	orrs	r3, r1
 800a808:	f040 80a7 	bne.w	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a80c:	4b4c      	ldr	r3, [pc, #304]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a80e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a810:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a814:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a818:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a81c:	d055      	beq.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a820:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a824:	f200 8096 	bhi.w	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a82e:	f000 8084 	beq.w	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a834:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a838:	f200 808c 	bhi.w	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a83e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a842:	d030      	beq.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a84a:	f200 8083 	bhi.w	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a850:	2b00      	cmp	r3, #0
 800a852:	d004      	beq.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a85a:	d012      	beq.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a85c:	e07a      	b.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a85e:	4b38      	ldr	r3, [pc, #224]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a86a:	d107      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a86c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a870:	4618      	mov	r0, r3
 800a872:	f000 fd63 	bl	800b33c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a87a:	e294      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a880:	e291      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a882:	4b2f      	ldr	r3, [pc, #188]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a88a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a88e:	d107      	bne.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a890:	f107 0318 	add.w	r3, r7, #24
 800a894:	4618      	mov	r0, r3
 800a896:	f000 faa9 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a89e:	e282      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a4:	e27f      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8a6:	4b26      	ldr	r3, [pc, #152]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8b2:	d107      	bne.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8b4:	f107 030c 	add.w	r3, r7, #12
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 fbeb 	bl	800b094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8c2:	e270      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c8:	e26d      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8ca:	4b1d      	ldr	r3, [pc, #116]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a8cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 0304 	and.w	r3, r3, #4
 800a8dc:	2b04      	cmp	r3, #4
 800a8de:	d10c      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d109      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8e6:	4b16      	ldr	r3, [pc, #88]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	08db      	lsrs	r3, r3, #3
 800a8ec:	f003 0303 	and.w	r3, r3, #3
 800a8f0:	4a14      	ldr	r2, [pc, #80]	@ (800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a8f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8f8:	e01e      	b.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8fa:	4b11      	ldr	r3, [pc, #68]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a906:	d106      	bne.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a90a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a90e:	d102      	bne.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a910:	4b0d      	ldr	r3, [pc, #52]	@ (800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a914:	e010      	b.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a916:	4b0a      	ldr	r3, [pc, #40]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a91e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a922:	d106      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a92a:	d102      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a92c:	4b07      	ldr	r3, [pc, #28]	@ (800a94c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a930:	e002      	b.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a932:	2300      	movs	r3, #0
 800a934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a936:	e236      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a938:	e235      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a93a:	4b05      	ldr	r3, [pc, #20]	@ (800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a93e:	e232      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a940:	58024400 	.word	0x58024400
 800a944:	03d09000 	.word	0x03d09000
 800a948:	003d0900 	.word	0x003d0900
 800a94c:	017d7840 	.word	0x017d7840
 800a950:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a954:	2300      	movs	r3, #0
 800a956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a958:	e225      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a95a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a95e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a962:	430b      	orrs	r3, r1
 800a964:	f040 8085 	bne.w	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a968:	4b9c      	ldr	r3, [pc, #624]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a96a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a96c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a970:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a974:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a978:	d06b      	beq.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a980:	d874      	bhi.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a984:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a988:	d056      	beq.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a98c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a990:	d86c      	bhi.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a994:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a998:	d03b      	beq.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a9a0:	d864      	bhi.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9a8:	d021      	beq.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9b0:	d85c      	bhi.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d004      	beq.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9be:	d004      	beq.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a9c0:	e054      	b.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a9c2:	f7fe fb5f 	bl	8009084 <HAL_RCC_GetPCLK1Freq>
 800a9c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9c8:	e1ed      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9ca:	4b84      	ldr	r3, [pc, #528]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9d6:	d107      	bne.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9d8:	f107 0318 	add.w	r3, r7, #24
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f000 fa05 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9e6:	e1de      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ec:	e1db      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9ee:	4b7b      	ldr	r3, [pc, #492]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9fa:	d107      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9fc:	f107 030c 	add.w	r3, r7, #12
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 fb47 	bl	800b094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa0a:	e1cc      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa10:	e1c9      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa12:	4b72      	ldr	r3, [pc, #456]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d109      	bne.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa1e:	4b6f      	ldr	r3, [pc, #444]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	08db      	lsrs	r3, r3, #3
 800aa24:	f003 0303 	and.w	r3, r3, #3
 800aa28:	4a6d      	ldr	r2, [pc, #436]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800aa2a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa30:	e1b9      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa32:	2300      	movs	r3, #0
 800aa34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa36:	e1b6      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa38:	4b68      	ldr	r3, [pc, #416]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa44:	d102      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800aa46:	4b67      	ldr	r3, [pc, #412]	@ (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800aa48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa4a:	e1ac      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa50:	e1a9      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa52:	4b62      	ldr	r3, [pc, #392]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa5e:	d102      	bne.n	800aa66 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800aa60:	4b61      	ldr	r3, [pc, #388]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800aa62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa64:	e19f      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa66:	2300      	movs	r3, #0
 800aa68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa6a:	e19c      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa70:	e199      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aa72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa76:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800aa7a:	430b      	orrs	r3, r1
 800aa7c:	d173      	bne.n	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aa7e:	4b57      	ldr	r3, [pc, #348]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aa80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aa86:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa8e:	d02f      	beq.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800aa90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa96:	d863      	bhi.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800aa98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d004      	beq.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aaa4:	d012      	beq.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800aaa6:	e05b      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aaa8:	4b4c      	ldr	r3, [pc, #304]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aab0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aab4:	d107      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aab6:	f107 0318 	add.w	r3, r7, #24
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 f996 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aac4:	e16f      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaca:	e16c      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aacc:	4b43      	ldr	r3, [pc, #268]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aad4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aad8:	d107      	bne.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aada:	f107 030c 	add.w	r3, r7, #12
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 fad8 	bl	800b094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aae8:	e15d      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aaea:	2300      	movs	r3, #0
 800aaec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaee:	e15a      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aaf0:	4b3a      	ldr	r3, [pc, #232]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aaf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aaf4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aaf8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aafa:	4b38      	ldr	r3, [pc, #224]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 0304 	and.w	r3, r3, #4
 800ab02:	2b04      	cmp	r3, #4
 800ab04:	d10c      	bne.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800ab06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d109      	bne.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab0c:	4b33      	ldr	r3, [pc, #204]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	08db      	lsrs	r3, r3, #3
 800ab12:	f003 0303 	and.w	r3, r3, #3
 800ab16:	4a32      	ldr	r2, [pc, #200]	@ (800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ab18:	fa22 f303 	lsr.w	r3, r2, r3
 800ab1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab1e:	e01e      	b.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab20:	4b2e      	ldr	r3, [pc, #184]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab2c:	d106      	bne.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800ab2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab34:	d102      	bne.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab36:	4b2b      	ldr	r3, [pc, #172]	@ (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ab38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab3a:	e010      	b.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab3c:	4b27      	ldr	r3, [pc, #156]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab48:	d106      	bne.n	800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800ab4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab50:	d102      	bne.n	800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab52:	4b25      	ldr	r3, [pc, #148]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ab54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab56:	e002      	b.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab5c:	e123      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ab5e:	e122      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab64:	e11f      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ab66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab6a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ab6e:	430b      	orrs	r3, r1
 800ab70:	d13c      	bne.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ab72:	4b1a      	ldr	r3, [pc, #104]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab7a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d004      	beq.n	800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800ab82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab88:	d012      	beq.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800ab8a:	e023      	b.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab8c:	4b13      	ldr	r3, [pc, #76]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab98:	d107      	bne.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 fbcc 	bl	800b33c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aba8:	e0fd      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abaa:	2300      	movs	r3, #0
 800abac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abae:	e0fa      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abb0:	4b0a      	ldr	r3, [pc, #40]	@ (800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abbc:	d107      	bne.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abbe:	f107 0318 	add.w	r3, r7, #24
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 f912 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800abc8:	6a3b      	ldr	r3, [r7, #32]
 800abca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abcc:	e0eb      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd2:	e0e8      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd8:	e0e5      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800abda:	bf00      	nop
 800abdc:	58024400 	.word	0x58024400
 800abe0:	03d09000 	.word	0x03d09000
 800abe4:	003d0900 	.word	0x003d0900
 800abe8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800abec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abf0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800abf4:	430b      	orrs	r3, r1
 800abf6:	f040 8085 	bne.w	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800abfa:	4b6d      	ldr	r3, [pc, #436]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800abfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abfe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ac02:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac0a:	d06b      	beq.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800ac0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac12:	d874      	bhi.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ac14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac1a:	d056      	beq.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac22:	d86c      	bhi.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ac24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac2a:	d03b      	beq.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800ac2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac32:	d864      	bhi.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ac34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac3a:	d021      	beq.n	800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac42:	d85c      	bhi.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ac44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d004      	beq.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800ac4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac50:	d004      	beq.n	800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ac52:	e054      	b.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ac54:	f000 f8b4 	bl	800adc0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac58:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac5a:	e0a4      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac5c:	4b54      	ldr	r3, [pc, #336]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac68:	d107      	bne.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac6a:	f107 0318 	add.w	r3, r7, #24
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 f8bc 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac78:	e095      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac7e:	e092      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac80:	4b4b      	ldr	r3, [pc, #300]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac8c:	d107      	bne.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac8e:	f107 030c 	add.w	r3, r7, #12
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 f9fe 	bl	800b094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac9c:	e083      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca2:	e080      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aca4:	4b42      	ldr	r3, [pc, #264]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 0304 	and.w	r3, r3, #4
 800acac:	2b04      	cmp	r3, #4
 800acae:	d109      	bne.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acb0:	4b3f      	ldr	r3, [pc, #252]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	08db      	lsrs	r3, r3, #3
 800acb6:	f003 0303 	and.w	r3, r3, #3
 800acba:	4a3e      	ldr	r2, [pc, #248]	@ (800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800acbc:	fa22 f303 	lsr.w	r3, r2, r3
 800acc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acc2:	e070      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acc8:	e06d      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800acca:	4b39      	ldr	r3, [pc, #228]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acd6:	d102      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800acd8:	4b37      	ldr	r3, [pc, #220]	@ (800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800acda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acdc:	e063      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acde:	2300      	movs	r3, #0
 800ace0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ace2:	e060      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ace4:	4b32      	ldr	r3, [pc, #200]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acf0:	d102      	bne.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800acf2:	4b32      	ldr	r3, [pc, #200]	@ (800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800acf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf6:	e056      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acfc:	e053      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad02:	e050      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ad04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad08:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ad0c:	430b      	orrs	r3, r1
 800ad0e:	d148      	bne.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ad10:	4b27      	ldr	r3, [pc, #156]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad18:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad20:	d02a      	beq.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800ad22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad28:	d838      	bhi.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d004      	beq.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ad30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad36:	d00d      	beq.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ad38:	e030      	b.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad3a:	4b1d      	ldr	r3, [pc, #116]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad46:	d102      	bne.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800ad48:	4b1c      	ldr	r3, [pc, #112]	@ (800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ad4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad4c:	e02b      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad52:	e028      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad54:	4b16      	ldr	r3, [pc, #88]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad60:	d107      	bne.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 fae8 	bl	800b33c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad70:	e019      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad76:	e016      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad78:	4b0d      	ldr	r3, [pc, #52]	@ (800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad84:	d107      	bne.n	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad86:	f107 0318 	add.w	r3, r7, #24
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 f82e 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad94:	e007      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad96:	2300      	movs	r3, #0
 800ad98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad9a:	e004      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada0:	e001      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ada6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3740      	adds	r7, #64	@ 0x40
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	58024400 	.word	0x58024400
 800adb4:	03d09000 	.word	0x03d09000
 800adb8:	003d0900 	.word	0x003d0900
 800adbc:	017d7840 	.word	0x017d7840

0800adc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800adc4:	f7fe f92e 	bl	8009024 <HAL_RCC_GetHCLKFreq>
 800adc8:	4602      	mov	r2, r0
 800adca:	4b06      	ldr	r3, [pc, #24]	@ (800ade4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	091b      	lsrs	r3, r3, #4
 800add0:	f003 0307 	and.w	r3, r3, #7
 800add4:	4904      	ldr	r1, [pc, #16]	@ (800ade8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800add6:	5ccb      	ldrb	r3, [r1, r3]
 800add8:	f003 031f 	and.w	r3, r3, #31
 800addc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	58024400 	.word	0x58024400
 800ade8:	08021ba4 	.word	0x08021ba4

0800adec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800adec:	b480      	push	{r7}
 800adee:	b089      	sub	sp, #36	@ 0x24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adf4:	4ba1      	ldr	r3, [pc, #644]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf8:	f003 0303 	and.w	r3, r3, #3
 800adfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800adfe:	4b9f      	ldr	r3, [pc, #636]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae02:	0b1b      	lsrs	r3, r3, #12
 800ae04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ae0a:	4b9c      	ldr	r3, [pc, #624]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae0e:	091b      	lsrs	r3, r3, #4
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ae16:	4b99      	ldr	r3, [pc, #612]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae1a:	08db      	lsrs	r3, r3, #3
 800ae1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	fb02 f303 	mul.w	r3, r2, r3
 800ae26:	ee07 3a90 	vmov	s15, r3
 800ae2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f000 8111 	beq.w	800b05c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	f000 8083 	beq.w	800af48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	f200 80a1 	bhi.w	800af8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d003      	beq.n	800ae58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d056      	beq.n	800af04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ae56:	e099      	b.n	800af8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae58:	4b88      	ldr	r3, [pc, #544]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0320 	and.w	r3, r3, #32
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d02d      	beq.n	800aec0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae64:	4b85      	ldr	r3, [pc, #532]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	08db      	lsrs	r3, r3, #3
 800ae6a:	f003 0303 	and.w	r3, r3, #3
 800ae6e:	4a84      	ldr	r2, [pc, #528]	@ (800b080 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ae70:	fa22 f303 	lsr.w	r3, r2, r3
 800ae74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	ee07 3a90 	vmov	s15, r3
 800ae7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	ee07 3a90 	vmov	s15, r3
 800ae86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae8e:	4b7b      	ldr	r3, [pc, #492]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aea2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aebe:	e087      	b.n	800afd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	ee07 3a90 	vmov	s15, r3
 800aec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b088 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aed2:	4b6a      	ldr	r3, [pc, #424]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeda:	ee07 3a90 	vmov	s15, r3
 800aede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aee6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aeea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aefa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aefe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af02:	e065      	b.n	800afd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af16:	4b59      	ldr	r3, [pc, #356]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af1e:	ee07 3a90 	vmov	s15, r3
 800af22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af26:	ed97 6a03 	vldr	s12, [r7, #12]
 800af2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af46:	e043      	b.n	800afd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b090 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800af56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af5a:	4b48      	ldr	r3, [pc, #288]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af62:	ee07 3a90 	vmov	s15, r3
 800af66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af8a:	e021      	b.n	800afd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	ee07 3a90 	vmov	s15, r3
 800af92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b08c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af9e:	4b37      	ldr	r3, [pc, #220]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afae:	ed97 6a03 	vldr	s12, [r7, #12]
 800afb2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800afd0:	4b2a      	ldr	r3, [pc, #168]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd4:	0a5b      	lsrs	r3, r3, #9
 800afd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afea:	edd7 6a07 	vldr	s13, [r7, #28]
 800afee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff6:	ee17 2a90 	vmov	r2, s15
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800affe:	4b1f      	ldr	r3, [pc, #124]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b002:	0c1b      	lsrs	r3, r3, #16
 800b004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b008:	ee07 3a90 	vmov	s15, r3
 800b00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b010:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b014:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b018:	edd7 6a07 	vldr	s13, [r7, #28]
 800b01c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b024:	ee17 2a90 	vmov	r2, s15
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b02c:	4b13      	ldr	r3, [pc, #76]	@ (800b07c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b02e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b030:	0e1b      	lsrs	r3, r3, #24
 800b032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b036:	ee07 3a90 	vmov	s15, r3
 800b03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b042:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b046:	edd7 6a07 	vldr	s13, [r7, #28]
 800b04a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b04e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b052:	ee17 2a90 	vmov	r2, s15
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b05a:	e008      	b.n	800b06e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	609a      	str	r2, [r3, #8]
}
 800b06e:	bf00      	nop
 800b070:	3724      	adds	r7, #36	@ 0x24
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	58024400 	.word	0x58024400
 800b080:	03d09000 	.word	0x03d09000
 800b084:	46000000 	.word	0x46000000
 800b088:	4c742400 	.word	0x4c742400
 800b08c:	4a742400 	.word	0x4a742400
 800b090:	4bbebc20 	.word	0x4bbebc20

0800b094 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b094:	b480      	push	{r7}
 800b096:	b089      	sub	sp, #36	@ 0x24
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b09c:	4ba1      	ldr	r3, [pc, #644]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0a0:	f003 0303 	and.w	r3, r3, #3
 800b0a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b0a6:	4b9f      	ldr	r3, [pc, #636]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0aa:	0d1b      	lsrs	r3, r3, #20
 800b0ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b0b2:	4b9c      	ldr	r3, [pc, #624]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b6:	0a1b      	lsrs	r3, r3, #8
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b0be:	4b99      	ldr	r3, [pc, #612]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0c2:	08db      	lsrs	r3, r3, #3
 800b0c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	fb02 f303 	mul.w	r3, r2, r3
 800b0ce:	ee07 3a90 	vmov	s15, r3
 800b0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f000 8111 	beq.w	800b304 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	f000 8083 	beq.w	800b1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	f200 80a1 	bhi.w	800b234 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d003      	beq.n	800b100 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d056      	beq.n	800b1ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b0fe:	e099      	b.n	800b234 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b100:	4b88      	ldr	r3, [pc, #544]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 0320 	and.w	r3, r3, #32
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d02d      	beq.n	800b168 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b10c:	4b85      	ldr	r3, [pc, #532]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	08db      	lsrs	r3, r3, #3
 800b112:	f003 0303 	and.w	r3, r3, #3
 800b116:	4a84      	ldr	r2, [pc, #528]	@ (800b328 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b118:	fa22 f303 	lsr.w	r3, r2, r3
 800b11c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	ee07 3a90 	vmov	s15, r3
 800b124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	ee07 3a90 	vmov	s15, r3
 800b12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b136:	4b7b      	ldr	r3, [pc, #492]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b13e:	ee07 3a90 	vmov	s15, r3
 800b142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b146:	ed97 6a03 	vldr	s12, [r7, #12]
 800b14a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b162:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b166:	e087      	b.n	800b278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	ee07 3a90 	vmov	s15, r3
 800b16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b172:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b330 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b17a:	4b6a      	ldr	r3, [pc, #424]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b17c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b18a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b18e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b19a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b19e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1aa:	e065      	b.n	800b278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	ee07 3a90 	vmov	s15, r3
 800b1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b1ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1be:	4b59      	ldr	r3, [pc, #356]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c6:	ee07 3a90 	vmov	s15, r3
 800b1ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1ee:	e043      	b.n	800b278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	ee07 3a90 	vmov	s15, r3
 800b1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b1fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b202:	4b48      	ldr	r3, [pc, #288]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b212:	ed97 6a03 	vldr	s12, [r7, #12]
 800b216:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b21a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b21e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b22a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b22e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b232:	e021      	b.n	800b278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	ee07 3a90 	vmov	s15, r3
 800b23a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b23e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b246:	4b37      	ldr	r3, [pc, #220]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b24a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b24e:	ee07 3a90 	vmov	s15, r3
 800b252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b256:	ed97 6a03 	vldr	s12, [r7, #12]
 800b25a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b25e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b26a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b26e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b276:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b278:	4b2a      	ldr	r3, [pc, #168]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b27a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b27c:	0a5b      	lsrs	r3, r3, #9
 800b27e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b28e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b292:	edd7 6a07 	vldr	s13, [r7, #28]
 800b296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b29a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b29e:	ee17 2a90 	vmov	r2, s15
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b2a6:	4b1f      	ldr	r3, [pc, #124]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2aa:	0c1b      	lsrs	r3, r3, #16
 800b2ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2b0:	ee07 3a90 	vmov	s15, r3
 800b2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2cc:	ee17 2a90 	vmov	r2, s15
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b2d4:	4b13      	ldr	r3, [pc, #76]	@ (800b324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2d8:	0e1b      	lsrs	r3, r3, #24
 800b2da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2fa:	ee17 2a90 	vmov	r2, s15
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b302:	e008      	b.n	800b316 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	609a      	str	r2, [r3, #8]
}
 800b316:	bf00      	nop
 800b318:	3724      	adds	r7, #36	@ 0x24
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	58024400 	.word	0x58024400
 800b328:	03d09000 	.word	0x03d09000
 800b32c:	46000000 	.word	0x46000000
 800b330:	4c742400 	.word	0x4c742400
 800b334:	4a742400 	.word	0x4a742400
 800b338:	4bbebc20 	.word	0x4bbebc20

0800b33c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b089      	sub	sp, #36	@ 0x24
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b344:	4ba0      	ldr	r3, [pc, #640]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b348:	f003 0303 	and.w	r3, r3, #3
 800b34c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b34e:	4b9e      	ldr	r3, [pc, #632]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b352:	091b      	lsrs	r3, r3, #4
 800b354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b358:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b35a:	4b9b      	ldr	r3, [pc, #620]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b35e:	f003 0301 	and.w	r3, r3, #1
 800b362:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b364:	4b98      	ldr	r3, [pc, #608]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b368:	08db      	lsrs	r3, r3, #3
 800b36a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	fb02 f303 	mul.w	r3, r2, r3
 800b374:	ee07 3a90 	vmov	s15, r3
 800b378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	2b00      	cmp	r3, #0
 800b384:	f000 8111 	beq.w	800b5aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	f000 8083 	beq.w	800b496 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	2b02      	cmp	r3, #2
 800b394:	f200 80a1 	bhi.w	800b4da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d003      	beq.n	800b3a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d056      	beq.n	800b452 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b3a4:	e099      	b.n	800b4da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3a6:	4b88      	ldr	r3, [pc, #544]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 0320 	and.w	r3, r3, #32
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d02d      	beq.n	800b40e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3b2:	4b85      	ldr	r3, [pc, #532]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	08db      	lsrs	r3, r3, #3
 800b3b8:	f003 0303 	and.w	r3, r3, #3
 800b3bc:	4a83      	ldr	r2, [pc, #524]	@ (800b5cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b3be:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	ee07 3a90 	vmov	s15, r3
 800b3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	ee07 3a90 	vmov	s15, r3
 800b3d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3dc:	4b7a      	ldr	r3, [pc, #488]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e4:	ee07 3a90 	vmov	s15, r3
 800b3e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3f0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b404:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b408:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b40c:	e087      	b.n	800b51e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	ee07 3a90 	vmov	s15, r3
 800b414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b418:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b5d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b41c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b420:	4b69      	ldr	r3, [pc, #420]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b428:	ee07 3a90 	vmov	s15, r3
 800b42c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b430:	ed97 6a03 	vldr	s12, [r7, #12]
 800b434:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b43c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b440:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b44c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b450:	e065      	b.n	800b51e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	ee07 3a90 	vmov	s15, r3
 800b458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b5d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b464:	4b58      	ldr	r3, [pc, #352]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b46c:	ee07 3a90 	vmov	s15, r3
 800b470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b474:	ed97 6a03 	vldr	s12, [r7, #12]
 800b478:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b47c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b484:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b48c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b490:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b494:	e043      	b.n	800b51e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	ee07 3a90 	vmov	s15, r3
 800b49c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b5dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b4a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4a8:	4b47      	ldr	r3, [pc, #284]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4b0:	ee07 3a90 	vmov	s15, r3
 800b4b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4bc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4d8:	e021      	b.n	800b51e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	ee07 3a90 	vmov	s15, r3
 800b4e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4e4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b5d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b4e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ec:	4b36      	ldr	r3, [pc, #216]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4f4:	ee07 3a90 	vmov	s15, r3
 800b4f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b500:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b5d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b50c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b514:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b518:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b51c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b51e:	4b2a      	ldr	r3, [pc, #168]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b522:	0a5b      	lsrs	r3, r3, #9
 800b524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b528:	ee07 3a90 	vmov	s15, r3
 800b52c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b534:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b538:	edd7 6a07 	vldr	s13, [r7, #28]
 800b53c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b544:	ee17 2a90 	vmov	r2, s15
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b54c:	4b1e      	ldr	r3, [pc, #120]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b550:	0c1b      	lsrs	r3, r3, #16
 800b552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b556:	ee07 3a90 	vmov	s15, r3
 800b55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b562:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b566:	edd7 6a07 	vldr	s13, [r7, #28]
 800b56a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b56e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b572:	ee17 2a90 	vmov	r2, s15
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b57a:	4b13      	ldr	r3, [pc, #76]	@ (800b5c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b57c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b57e:	0e1b      	lsrs	r3, r3, #24
 800b580:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b584:	ee07 3a90 	vmov	s15, r3
 800b588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b590:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b594:	edd7 6a07 	vldr	s13, [r7, #28]
 800b598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b59c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5a0:	ee17 2a90 	vmov	r2, s15
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b5a8:	e008      	b.n	800b5bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	609a      	str	r2, [r3, #8]
}
 800b5bc:	bf00      	nop
 800b5be:	3724      	adds	r7, #36	@ 0x24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	58024400 	.word	0x58024400
 800b5cc:	03d09000 	.word	0x03d09000
 800b5d0:	46000000 	.word	0x46000000
 800b5d4:	4c742400 	.word	0x4c742400
 800b5d8:	4a742400 	.word	0x4a742400
 800b5dc:	4bbebc20 	.word	0x4bbebc20

0800b5e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b5ee:	4b53      	ldr	r3, [pc, #332]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b5f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5f2:	f003 0303 	and.w	r3, r3, #3
 800b5f6:	2b03      	cmp	r3, #3
 800b5f8:	d101      	bne.n	800b5fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e099      	b.n	800b732 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b5fe:	4b4f      	ldr	r3, [pc, #316]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a4e      	ldr	r2, [pc, #312]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b604:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b60a:	f7f8 fd11 	bl	8004030 <HAL_GetTick>
 800b60e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b610:	e008      	b.n	800b624 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b612:	f7f8 fd0d 	bl	8004030 <HAL_GetTick>
 800b616:	4602      	mov	r2, r0
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	2b02      	cmp	r3, #2
 800b61e:	d901      	bls.n	800b624 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b620:	2303      	movs	r3, #3
 800b622:	e086      	b.n	800b732 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b624:	4b45      	ldr	r3, [pc, #276]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d1f0      	bne.n	800b612 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b630:	4b42      	ldr	r3, [pc, #264]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b634:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	031b      	lsls	r3, r3, #12
 800b63e:	493f      	ldr	r1, [pc, #252]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b640:	4313      	orrs	r3, r2
 800b642:	628b      	str	r3, [r1, #40]	@ 0x28
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	3b01      	subs	r3, #1
 800b64a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	3b01      	subs	r3, #1
 800b654:	025b      	lsls	r3, r3, #9
 800b656:	b29b      	uxth	r3, r3
 800b658:	431a      	orrs	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	3b01      	subs	r3, #1
 800b660:	041b      	lsls	r3, r3, #16
 800b662:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b666:	431a      	orrs	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	3b01      	subs	r3, #1
 800b66e:	061b      	lsls	r3, r3, #24
 800b670:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b674:	4931      	ldr	r1, [pc, #196]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b676:	4313      	orrs	r3, r2
 800b678:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b67a:	4b30      	ldr	r3, [pc, #192]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b67e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	695b      	ldr	r3, [r3, #20]
 800b686:	492d      	ldr	r1, [pc, #180]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b688:	4313      	orrs	r3, r2
 800b68a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b68c:	4b2b      	ldr	r3, [pc, #172]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b690:	f023 0220 	bic.w	r2, r3, #32
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	699b      	ldr	r3, [r3, #24]
 800b698:	4928      	ldr	r1, [pc, #160]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b69a:	4313      	orrs	r3, r2
 800b69c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b69e:	4b27      	ldr	r3, [pc, #156]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6a2:	4a26      	ldr	r2, [pc, #152]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b6a4:	f023 0310 	bic.w	r3, r3, #16
 800b6a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b6aa:	4b24      	ldr	r3, [pc, #144]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b6ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6ae:	4b24      	ldr	r3, [pc, #144]	@ (800b740 <RCCEx_PLL2_Config+0x160>)
 800b6b0:	4013      	ands	r3, r2
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	69d2      	ldr	r2, [r2, #28]
 800b6b6:	00d2      	lsls	r2, r2, #3
 800b6b8:	4920      	ldr	r1, [pc, #128]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b6be:	4b1f      	ldr	r3, [pc, #124]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6c2:	4a1e      	ldr	r2, [pc, #120]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b6c4:	f043 0310 	orr.w	r3, r3, #16
 800b6c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d106      	bne.n	800b6de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b6d0:	4b1a      	ldr	r3, [pc, #104]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b6d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d4:	4a19      	ldr	r2, [pc, #100]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b6d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b6da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6dc:	e00f      	b.n	800b6fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d106      	bne.n	800b6f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b6e4:	4b15      	ldr	r3, [pc, #84]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e8:	4a14      	ldr	r2, [pc, #80]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b6ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b6f0:	e005      	b.n	800b6fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b6f2:	4b12      	ldr	r3, [pc, #72]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b6f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f6:	4a11      	ldr	r2, [pc, #68]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b6f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b6fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b6fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a0e      	ldr	r2, [pc, #56]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b704:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b70a:	f7f8 fc91 	bl	8004030 <HAL_GetTick>
 800b70e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b710:	e008      	b.n	800b724 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b712:	f7f8 fc8d 	bl	8004030 <HAL_GetTick>
 800b716:	4602      	mov	r2, r0
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d901      	bls.n	800b724 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b720:	2303      	movs	r3, #3
 800b722:	e006      	b.n	800b732 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b724:	4b05      	ldr	r3, [pc, #20]	@ (800b73c <RCCEx_PLL2_Config+0x15c>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d0f0      	beq.n	800b712 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b730:	7bfb      	ldrb	r3, [r7, #15]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	58024400 	.word	0x58024400
 800b740:	ffff0007 	.word	0xffff0007

0800b744 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b752:	4b53      	ldr	r3, [pc, #332]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b756:	f003 0303 	and.w	r3, r3, #3
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d101      	bne.n	800b762 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	e099      	b.n	800b896 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b762:	4b4f      	ldr	r3, [pc, #316]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a4e      	ldr	r2, [pc, #312]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b76c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b76e:	f7f8 fc5f 	bl	8004030 <HAL_GetTick>
 800b772:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b774:	e008      	b.n	800b788 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b776:	f7f8 fc5b 	bl	8004030 <HAL_GetTick>
 800b77a:	4602      	mov	r2, r0
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	2b02      	cmp	r3, #2
 800b782:	d901      	bls.n	800b788 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b784:	2303      	movs	r3, #3
 800b786:	e086      	b.n	800b896 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b788:	4b45      	ldr	r3, [pc, #276]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1f0      	bne.n	800b776 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b794:	4b42      	ldr	r3, [pc, #264]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b798:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	051b      	lsls	r3, r3, #20
 800b7a2:	493f      	ldr	r1, [pc, #252]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	628b      	str	r3, [r1, #40]	@ 0x28
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	3b01      	subs	r3, #1
 800b7ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	025b      	lsls	r3, r3, #9
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	431a      	orrs	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	041b      	lsls	r3, r3, #16
 800b7c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b7ca:	431a      	orrs	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	691b      	ldr	r3, [r3, #16]
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	061b      	lsls	r3, r3, #24
 800b7d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b7d8:	4931      	ldr	r1, [pc, #196]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b7de:	4b30      	ldr	r3, [pc, #192]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	695b      	ldr	r3, [r3, #20]
 800b7ea:	492d      	ldr	r1, [pc, #180]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b7f0:	4b2b      	ldr	r3, [pc, #172]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b7f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	4928      	ldr	r1, [pc, #160]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b7fe:	4313      	orrs	r3, r2
 800b800:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b802:	4b27      	ldr	r3, [pc, #156]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b806:	4a26      	ldr	r2, [pc, #152]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b80c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b80e:	4b24      	ldr	r3, [pc, #144]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b812:	4b24      	ldr	r3, [pc, #144]	@ (800b8a4 <RCCEx_PLL3_Config+0x160>)
 800b814:	4013      	ands	r3, r2
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	69d2      	ldr	r2, [r2, #28]
 800b81a:	00d2      	lsls	r2, r2, #3
 800b81c:	4920      	ldr	r1, [pc, #128]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b81e:	4313      	orrs	r3, r2
 800b820:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b822:	4b1f      	ldr	r3, [pc, #124]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b826:	4a1e      	ldr	r2, [pc, #120]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b82c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d106      	bne.n	800b842 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b834:	4b1a      	ldr	r3, [pc, #104]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b838:	4a19      	ldr	r2, [pc, #100]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b83a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b83e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b840:	e00f      	b.n	800b862 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	2b01      	cmp	r3, #1
 800b846:	d106      	bne.n	800b856 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b848:	4b15      	ldr	r3, [pc, #84]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b84c:	4a14      	ldr	r2, [pc, #80]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b84e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b852:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b854:	e005      	b.n	800b862 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b856:	4b12      	ldr	r3, [pc, #72]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85a:	4a11      	ldr	r2, [pc, #68]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b85c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b860:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b862:	4b0f      	ldr	r3, [pc, #60]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a0e      	ldr	r2, [pc, #56]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b86c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b86e:	f7f8 fbdf 	bl	8004030 <HAL_GetTick>
 800b872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b874:	e008      	b.n	800b888 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b876:	f7f8 fbdb 	bl	8004030 <HAL_GetTick>
 800b87a:	4602      	mov	r2, r0
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	2b02      	cmp	r3, #2
 800b882:	d901      	bls.n	800b888 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	e006      	b.n	800b896 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b888:	4b05      	ldr	r3, [pc, #20]	@ (800b8a0 <RCCEx_PLL3_Config+0x15c>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b890:	2b00      	cmp	r3, #0
 800b892:	d0f0      	beq.n	800b876 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b894:	7bfb      	ldrb	r3, [r7, #15]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	58024400 	.word	0x58024400
 800b8a4:	ffff0007 	.word	0xffff0007

0800b8a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b08a      	sub	sp, #40	@ 0x28
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d101      	bne.n	800b8ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e075      	b.n	800b9a6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d105      	bne.n	800b8d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7f6 fbc7 	bl	8002060 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2204      	movs	r2, #4
 800b8d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 f868 	bl	800b9b0 <HAL_SD_InitCard>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d001      	beq.n	800b8ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e05d      	b.n	800b9a6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b8ea:	f107 0308 	add.w	r3, r7, #8
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fdb5 	bl	800c460 <HAL_SD_GetCardStatus>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e052      	b.n	800b9a6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b900:	7e3b      	ldrb	r3, [r7, #24]
 800b902:	b2db      	uxtb	r3, r3
 800b904:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b906:	7e7b      	ldrb	r3, [r7, #25]
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b910:	2b01      	cmp	r3, #1
 800b912:	d10a      	bne.n	800b92a <HAL_SD_Init+0x82>
 800b914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b916:	2b00      	cmp	r3, #0
 800b918:	d102      	bne.n	800b920 <HAL_SD_Init+0x78>
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d004      	beq.n	800b92a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b926:	659a      	str	r2, [r3, #88]	@ 0x58
 800b928:	e00b      	b.n	800b942 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d104      	bne.n	800b93c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b938:	659a      	str	r2, [r3, #88]	@ 0x58
 800b93a:	e002      	b.n	800b942 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fe73 	bl	800c634 <HAL_SD_ConfigWideBusOperation>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e026      	b.n	800b9a6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b958:	f7f8 fb6a 	bl	8004030 <HAL_GetTick>
 800b95c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b95e:	e011      	b.n	800b984 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b960:	f7f8 fb66 	bl	8004030 <HAL_GetTick>
 800b964:	4602      	mov	r2, r0
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b96e:	d109      	bne.n	800b984 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b976:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800b980:	2303      	movs	r3, #3
 800b982:	e010      	b.n	800b9a6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 ff67 	bl	800c858 <HAL_SD_GetCardState>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b04      	cmp	r3, #4
 800b98e:	d1e7      	bne.n	800b960 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3728      	adds	r7, #40	@ 0x28
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
	...

0800b9b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b9b0:	b590      	push	{r4, r7, lr}
 800b9b2:	b08d      	sub	sp, #52	@ 0x34
 800b9b4:	af02      	add	r7, sp, #8
 800b9b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b9c8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b9cc:	f04f 0100 	mov.w	r1, #0
 800b9d0:	f7fe fd24 	bl	800a41c <HAL_RCCEx_GetPeriphCLKFreq>
 800b9d4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d109      	bne.n	800b9f0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b9ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e070      	b.n	800bad2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f2:	0a1b      	lsrs	r3, r3, #8
 800b9f4:	4a39      	ldr	r2, [pc, #228]	@ (800badc <HAL_SD_InitCard+0x12c>)
 800b9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9fa:	091b      	lsrs	r3, r3, #4
 800b9fc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681c      	ldr	r4, [r3, #0]
 800ba02:	466a      	mov	r2, sp
 800ba04:	f107 0318 	add.w	r3, r7, #24
 800ba08:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ba0c:	e882 0003 	stmia.w	r2, {r0, r1}
 800ba10:	f107 030c 	add.w	r3, r7, #12
 800ba14:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ba16:	4620      	mov	r0, r4
 800ba18:	f004 fa24 	bl	800fe64 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f004 fa67 	bl	800fef4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d005      	beq.n	800ba38 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	005b      	lsls	r3, r3, #1
 800ba30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba36:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800ba38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d007      	beq.n	800ba4e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800ba3e:	4a28      	ldr	r2, [pc, #160]	@ (800bae0 <HAL_SD_InitCard+0x130>)
 800ba40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba46:	3301      	adds	r3, #1
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7f8 fafd 	bl	8004048 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fff0 	bl	800ca34 <SD_PowerON>
 800ba54:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d00b      	beq.n	800ba74 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba68:	6a3b      	ldr	r3, [r7, #32]
 800ba6a:	431a      	orrs	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	e02e      	b.n	800bad2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 ff0f 	bl	800c898 <SD_InitCard>
 800ba7a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ba7c:	6a3b      	ldr	r3, [r7, #32]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00b      	beq.n	800ba9a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba8e:	6a3b      	ldr	r3, [r7, #32]
 800ba90:	431a      	orrs	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	e01b      	b.n	800bad2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800baa2:	4618      	mov	r0, r3
 800baa4:	f004 fabc 	bl	8010020 <SDMMC_CmdBlockLength>
 800baa8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00f      	beq.n	800bad0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a0b      	ldr	r2, [pc, #44]	@ (800bae4 <HAL_SD_InitCard+0x134>)
 800bab6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800babc:	6a3b      	ldr	r3, [r7, #32]
 800babe:	431a      	orrs	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800bacc:	2301      	movs	r3, #1
 800bace:	e000      	b.n	800bad2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	372c      	adds	r7, #44	@ 0x2c
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd90      	pop	{r4, r7, pc}
 800bada:	bf00      	nop
 800badc:	014f8b59 	.word	0x014f8b59
 800bae0:	00012110 	.word	0x00012110
 800bae4:	1fe00fff 	.word	0x1fe00fff

0800bae8 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b092      	sub	sp, #72	@ 0x48
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800baf6:	f7f8 fa9b 	bl	8004030 <HAL_GetTick>
 800bafa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d107      	bne.n	800bb1a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb0e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	e167      	b.n	800bdea <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	f040 815a 	bne.w	800bddc <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bb2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	441a      	add	r2, r3
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d907      	bls.n	800bb4c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb40:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e14e      	b.n	800bdea <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2203      	movs	r2, #3
 800bb50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d002      	beq.n	800bb6a <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800bb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb66:	025b      	lsls	r3, r3, #9
 800bb68:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bb6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb6e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	025b      	lsls	r3, r3, #9
 800bb74:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bb76:	2390      	movs	r3, #144	@ 0x90
 800bb78:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bb7a:	2302      	movs	r3, #2
 800bb7c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bb82:	2300      	movs	r3, #0
 800bb84:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f107 0214 	add.w	r2, r7, #20
 800bb8e:	4611      	mov	r1, r2
 800bb90:	4618      	mov	r0, r3
 800bb92:	f004 fa19 	bl	800ffc8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68da      	ldr	r2, [r3, #12]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bba4:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d90a      	bls.n	800bbc2 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2202      	movs	r2, #2
 800bbb0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f004 fa77 	bl	80100ac <SDMMC_CmdReadMultiBlock>
 800bbbe:	6478      	str	r0, [r7, #68]	@ 0x44
 800bbc0:	e009      	b.n	800bbd6 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f004 fa49 	bl	8010066 <SDMMC_CmdReadSingleBlock>
 800bbd4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800bbd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d012      	beq.n	800bc02 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a84      	ldr	r2, [pc, #528]	@ (800bdf4 <HAL_SD_ReadBlocks+0x30c>)
 800bbe2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bbe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbea:	431a      	orrs	r2, r3
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e0f3      	b.n	800bdea <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bc06:	e058      	b.n	800bcba <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d033      	beq.n	800bc7e <HAL_SD_ReadBlocks+0x196>
 800bc16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc18:	2b1f      	cmp	r3, #31
 800bc1a:	d930      	bls.n	800bc7e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc20:	e027      	b.n	800bc72 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f004 f946 	bl	800feb8 <SDMMC_ReadFIFO>
 800bc2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800bc2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc34:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bc36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc38:	3301      	adds	r3, #1
 800bc3a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800bc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc3e:	0a1b      	lsrs	r3, r3, #8
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc44:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc48:	3301      	adds	r3, #1
 800bc4a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800bc4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4e:	0c1b      	lsrs	r3, r3, #16
 800bc50:	b2da      	uxtb	r2, r3
 800bc52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc54:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bc56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc58:	3301      	adds	r3, #1
 800bc5a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800bc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5e:	0e1b      	lsrs	r3, r3, #24
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc64:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800bc66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc68:	3301      	adds	r3, #1
 800bc6a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bc6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc6e:	3301      	adds	r3, #1
 800bc70:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc74:	2b07      	cmp	r3, #7
 800bc76:	d9d4      	bls.n	800bc22 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800bc78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc7a:	3b20      	subs	r3, #32
 800bc7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800bc7e:	f7f8 f9d7 	bl	8004030 <HAL_GetTick>
 800bc82:	4602      	mov	r2, r0
 800bc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d902      	bls.n	800bc94 <HAL_SD_ReadBlocks+0x1ac>
 800bc8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d112      	bne.n	800bcba <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a56      	ldr	r2, [pc, #344]	@ (800bdf4 <HAL_SD_ReadBlocks+0x30c>)
 800bc9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bca0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	e097      	b.n	800bdea <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcc0:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d09f      	beq.n	800bc08 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	68da      	ldr	r2, [r3, #12]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bcd6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d022      	beq.n	800bd2c <HAL_SD_ReadBlocks+0x244>
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d91f      	bls.n	800bd2c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcf0:	2b03      	cmp	r3, #3
 800bcf2:	d01b      	beq.n	800bd2c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f004 fa41 	bl	8010180 <SDMMC_CmdStopTransfer>
 800bcfe:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800bd00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d012      	beq.n	800bd2c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a3a      	ldr	r2, [pc, #232]	@ (800bdf4 <HAL_SD_ReadBlocks+0x30c>)
 800bd0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd14:	431a      	orrs	r2, r3
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2200      	movs	r2, #0
 800bd26:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e05e      	b.n	800bdea <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd32:	f003 0308 	and.w	r3, r3, #8
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d012      	beq.n	800bd60 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a2d      	ldr	r2, [pc, #180]	@ (800bdf4 <HAL_SD_ReadBlocks+0x30c>)
 800bd40:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd46:	f043 0208 	orr.w	r2, r3, #8
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2201      	movs	r2, #1
 800bd52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e044      	b.n	800bdea <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd66:	f003 0302 	and.w	r3, r3, #2
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d012      	beq.n	800bd94 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a20      	ldr	r2, [pc, #128]	@ (800bdf4 <HAL_SD_ReadBlocks+0x30c>)
 800bd74:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd7a:	f043 0202 	orr.w	r2, r3, #2
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	e02a      	b.n	800bdea <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd9a:	f003 0320 	and.w	r3, r3, #32
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d012      	beq.n	800bdc8 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a13      	ldr	r2, [pc, #76]	@ (800bdf4 <HAL_SD_ReadBlocks+0x30c>)
 800bda8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdae:	f043 0220 	orr.w	r2, r3, #32
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e010      	b.n	800bdea <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a0a      	ldr	r2, [pc, #40]	@ (800bdf8 <HAL_SD_ReadBlocks+0x310>)
 800bdce:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	e006      	b.n	800bdea <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bde0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
  }
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3748      	adds	r7, #72	@ 0x48
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	1fe00fff 	.word	0x1fe00fff
 800bdf8:	18000f3a 	.word	0x18000f3a

0800bdfc <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b092      	sub	sp, #72	@ 0x48
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
 800be08:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800be0a:	f7f8 f911 	bl	8004030 <HAL_GetTick>
 800be0e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d107      	bne.n	800be2e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be22:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	e16b      	b.n	800c106 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800be34:	b2db      	uxtb	r3, r3
 800be36:	2b01      	cmp	r3, #1
 800be38:	f040 815e 	bne.w	800c0f8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2200      	movs	r2, #0
 800be40:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800be42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	441a      	add	r2, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d907      	bls.n	800be60 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be54:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	e152      	b.n	800c106 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2203      	movs	r2, #3
 800be64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2200      	movs	r2, #0
 800be6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be74:	2b01      	cmp	r3, #1
 800be76:	d002      	beq.n	800be7e <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800be78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be7a:	025b      	lsls	r3, r3, #9
 800be7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800be7e:	f04f 33ff 	mov.w	r3, #4294967295
 800be82:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	025b      	lsls	r3, r3, #9
 800be88:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800be8a:	2390      	movs	r3, #144	@ 0x90
 800be8c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800be8e:	2300      	movs	r3, #0
 800be90:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800be92:	2300      	movs	r3, #0
 800be94:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800be96:	2300      	movs	r3, #0
 800be98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f107 0218 	add.w	r2, r7, #24
 800bea2:	4611      	mov	r1, r2
 800bea4:	4618      	mov	r0, r3
 800bea6:	f004 f88f 	bl	800ffc8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68da      	ldr	r2, [r3, #12]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800beb8:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d90a      	bls.n	800bed6 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2220      	movs	r2, #32
 800bec4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800becc:	4618      	mov	r0, r3
 800bece:	f004 f933 	bl	8010138 <SDMMC_CmdWriteMultiBlock>
 800bed2:	6478      	str	r0, [r7, #68]	@ 0x44
 800bed4:	e009      	b.n	800beea <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2210      	movs	r2, #16
 800beda:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bee2:	4618      	mov	r0, r3
 800bee4:	f004 f905 	bl	80100f2 <SDMMC_CmdWriteSingleBlock>
 800bee8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800beea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800beec:	2b00      	cmp	r3, #0
 800beee:	d012      	beq.n	800bf16 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a86      	ldr	r2, [pc, #536]	@ (800c110 <HAL_SD_WriteBlocks+0x314>)
 800bef6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800befc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800befe:	431a      	orrs	r2, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	e0f7      	b.n	800c106 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800bf1a:	e05c      	b.n	800bfd6 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d037      	beq.n	800bf9a <HAL_SD_WriteBlocks+0x19e>
 800bf2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf2c:	2b1f      	cmp	r3, #31
 800bf2e:	d934      	bls.n	800bf9a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bf30:	2300      	movs	r3, #0
 800bf32:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf34:	e02b      	b.n	800bf8e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800bf36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bf3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf3e:	3301      	adds	r3, #1
 800bf40:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800bf42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	021a      	lsls	r2, r3, #8
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bf4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf50:	3301      	adds	r3, #1
 800bf52:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800bf54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	041a      	lsls	r2, r3, #16
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bf60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf62:	3301      	adds	r3, #1
 800bf64:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800bf66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	061a      	lsls	r2, r3, #24
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bf72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf74:	3301      	adds	r3, #1
 800bf76:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f107 0214 	add.w	r2, r7, #20
 800bf80:	4611      	mov	r1, r2
 800bf82:	4618      	mov	r0, r3
 800bf84:	f003 ffa5 	bl	800fed2 <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bf88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf90:	2b07      	cmp	r3, #7
 800bf92:	d9d0      	bls.n	800bf36 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800bf94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf96:	3b20      	subs	r3, #32
 800bf98:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800bf9a:	f7f8 f849 	bl	8004030 <HAL_GetTick>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d902      	bls.n	800bfb0 <HAL_SD_WriteBlocks+0x1b4>
 800bfaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d112      	bne.n	800bfd6 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a56      	ldr	r2, [pc, #344]	@ (800c110 <HAL_SD_WriteBlocks+0x314>)
 800bfb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bfbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfbe:	431a      	orrs	r2, r3
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	e097      	b.n	800c106 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfdc:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d09b      	beq.n	800bf1c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68da      	ldr	r2, [r3, #12]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bff2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d022      	beq.n	800c048 <HAL_SD_WriteBlocks+0x24c>
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d91f      	bls.n	800c048 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d01b      	beq.n	800c048 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4618      	mov	r0, r3
 800c016:	f004 f8b3 	bl	8010180 <SDMMC_CmdStopTransfer>
 800c01a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800c01c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d012      	beq.n	800c048 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a3a      	ldr	r2, [pc, #232]	@ (800c110 <HAL_SD_WriteBlocks+0x314>)
 800c028:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c02e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c030:	431a      	orrs	r2, r3
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2201      	movs	r2, #1
 800c03a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2200      	movs	r2, #0
 800c042:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e05e      	b.n	800c106 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c04e:	f003 0308 	and.w	r3, r3, #8
 800c052:	2b00      	cmp	r3, #0
 800c054:	d012      	beq.n	800c07c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a2d      	ldr	r2, [pc, #180]	@ (800c110 <HAL_SD_WriteBlocks+0x314>)
 800c05c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c062:	f043 0208 	orr.w	r2, r3, #8
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2200      	movs	r2, #0
 800c076:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	e044      	b.n	800c106 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c082:	f003 0302 	and.w	r3, r3, #2
 800c086:	2b00      	cmp	r3, #0
 800c088:	d012      	beq.n	800c0b0 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a20      	ldr	r2, [pc, #128]	@ (800c110 <HAL_SD_WriteBlocks+0x314>)
 800c090:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c096:	f043 0202 	orr.w	r2, r3, #2
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e02a      	b.n	800c106 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0b6:	f003 0310 	and.w	r3, r3, #16
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d012      	beq.n	800c0e4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a13      	ldr	r2, [pc, #76]	@ (800c110 <HAL_SD_WriteBlocks+0x314>)
 800c0c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0ca:	f043 0210 	orr.w	r2, r3, #16
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e010      	b.n	800c106 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a0a      	ldr	r2, [pc, #40]	@ (800c114 <HAL_SD_WriteBlocks+0x318>)
 800c0ea:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e006      	b.n	800c106 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0fc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c104:	2301      	movs	r3, #1
  }
}
 800c106:	4618      	mov	r0, r3
 800c108:	3748      	adds	r7, #72	@ 0x48
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	1fe00fff 	.word	0x1fe00fff
 800c114:	18000f3a 	.word	0x18000f3a

0800c118 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c126:	0f9b      	lsrs	r3, r3, #30
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c132:	0e9b      	lsrs	r3, r3, #26
 800c134:	b2db      	uxtb	r3, r3
 800c136:	f003 030f 	and.w	r3, r3, #15
 800c13a:	b2da      	uxtb	r2, r3
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c144:	0e1b      	lsrs	r3, r3, #24
 800c146:	b2db      	uxtb	r3, r3
 800c148:	f003 0303 	and.w	r3, r3, #3
 800c14c:	b2da      	uxtb	r2, r3
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c156:	0c1b      	lsrs	r3, r3, #16
 800c158:	b2da      	uxtb	r2, r3
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c162:	0a1b      	lsrs	r3, r3, #8
 800c164:	b2da      	uxtb	r2, r3
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c178:	0d1b      	lsrs	r3, r3, #20
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c184:	0c1b      	lsrs	r3, r3, #16
 800c186:	b2db      	uxtb	r3, r3
 800c188:	f003 030f 	and.w	r3, r3, #15
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c196:	0bdb      	lsrs	r3, r3, #15
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	f003 0301 	and.w	r3, r3, #1
 800c19e:	b2da      	uxtb	r2, r3
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1a8:	0b9b      	lsrs	r3, r3, #14
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	f003 0301 	and.w	r3, r3, #1
 800c1b0:	b2da      	uxtb	r2, r3
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1ba:	0b5b      	lsrs	r3, r3, #13
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	f003 0301 	and.w	r3, r3, #1
 800c1c2:	b2da      	uxtb	r2, r3
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1cc:	0b1b      	lsrs	r3, r3, #12
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	f003 0301 	and.w	r3, r3, #1
 800c1d4:	b2da      	uxtb	r2, r3
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d163      	bne.n	800c2b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1ec:	009a      	lsls	r2, r3, #2
 800c1ee:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800c1f8:	0f92      	lsrs	r2, r2, #30
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c204:	0edb      	lsrs	r3, r3, #27
 800c206:	b2db      	uxtb	r3, r3
 800c208:	f003 0307 	and.w	r3, r3, #7
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c216:	0e1b      	lsrs	r3, r3, #24
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	f003 0307 	and.w	r3, r3, #7
 800c21e:	b2da      	uxtb	r2, r3
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c228:	0d5b      	lsrs	r3, r3, #21
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	f003 0307 	and.w	r3, r3, #7
 800c230:	b2da      	uxtb	r2, r3
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c23a:	0c9b      	lsrs	r3, r3, #18
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	f003 0307 	and.w	r3, r3, #7
 800c242:	b2da      	uxtb	r2, r3
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c24c:	0bdb      	lsrs	r3, r3, #15
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	f003 0307 	and.w	r3, r3, #7
 800c254:	b2da      	uxtb	r2, r3
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	1c5a      	adds	r2, r3, #1
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	7e1b      	ldrb	r3, [r3, #24]
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	f003 0307 	and.w	r3, r3, #7
 800c26e:	3302      	adds	r3, #2
 800c270:	2201      	movs	r2, #1
 800c272:	fa02 f303 	lsl.w	r3, r2, r3
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c27a:	fb03 f202 	mul.w	r2, r3, r2
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	7a1b      	ldrb	r3, [r3, #8]
 800c286:	b2db      	uxtb	r3, r3
 800c288:	f003 030f 	and.w	r3, r3, #15
 800c28c:	2201      	movs	r2, #1
 800c28e:	409a      	lsls	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800c29c:	0a52      	lsrs	r2, r2, #9
 800c29e:	fb03 f202 	mul.w	r2, r3, r2
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2ac:	655a      	str	r2, [r3, #84]	@ 0x54
 800c2ae:	e031      	b.n	800c314 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d11d      	bne.n	800c2f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2bc:	041b      	lsls	r3, r3, #16
 800c2be:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2c6:	0c1b      	lsrs	r3, r3, #16
 800c2c8:	431a      	orrs	r2, r3
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	691b      	ldr	r3, [r3, #16]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	029a      	lsls	r2, r3, #10
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	655a      	str	r2, [r3, #84]	@ 0x54
 800c2f2:	e00f      	b.n	800c314 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a58      	ldr	r2, [pc, #352]	@ (800c45c <HAL_SD_GetCardCSD+0x344>)
 800c2fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c300:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c310:	2301      	movs	r3, #1
 800c312:	e09d      	b.n	800c450 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c318:	0b9b      	lsrs	r3, r3, #14
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	f003 0301 	and.w	r3, r3, #1
 800c320:	b2da      	uxtb	r2, r3
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c32a:	09db      	lsrs	r3, r3, #7
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c332:	b2da      	uxtb	r2, r3
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c342:	b2da      	uxtb	r2, r3
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c34c:	0fdb      	lsrs	r3, r3, #31
 800c34e:	b2da      	uxtb	r2, r3
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c358:	0f5b      	lsrs	r3, r3, #29
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	f003 0303 	and.w	r3, r3, #3
 800c360:	b2da      	uxtb	r2, r3
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c36a:	0e9b      	lsrs	r3, r3, #26
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	f003 0307 	and.w	r3, r3, #7
 800c372:	b2da      	uxtb	r2, r3
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c37c:	0d9b      	lsrs	r3, r3, #22
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	f003 030f 	and.w	r3, r3, #15
 800c384:	b2da      	uxtb	r2, r3
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c38e:	0d5b      	lsrs	r3, r3, #21
 800c390:	b2db      	uxtb	r3, r3
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	b2da      	uxtb	r2, r3
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3aa:	0c1b      	lsrs	r3, r3, #16
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	f003 0301 	and.w	r3, r3, #1
 800c3b2:	b2da      	uxtb	r2, r3
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3be:	0bdb      	lsrs	r3, r3, #15
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3d2:	0b9b      	lsrs	r3, r3, #14
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	f003 0301 	and.w	r3, r3, #1
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3e6:	0b5b      	lsrs	r3, r3, #13
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3fa:	0b1b      	lsrs	r3, r3, #12
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	f003 0301 	and.w	r3, r3, #1
 800c402:	b2da      	uxtb	r2, r3
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c40e:	0a9b      	lsrs	r3, r3, #10
 800c410:	b2db      	uxtb	r3, r3
 800c412:	f003 0303 	and.w	r3, r3, #3
 800c416:	b2da      	uxtb	r2, r3
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c422:	0a1b      	lsrs	r3, r3, #8
 800c424:	b2db      	uxtb	r3, r3
 800c426:	f003 0303 	and.w	r3, r3, #3
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c436:	085b      	lsrs	r3, r3, #1
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c43e:	b2da      	uxtb	r2, r3
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	2201      	movs	r2, #1
 800c44a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	1fe00fff 	.word	0x1fe00fff

0800c460 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b094      	sub	sp, #80	@ 0x50
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c46a:	2300      	movs	r3, #0
 800c46c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c476:	b2db      	uxtb	r3, r3
 800c478:	2b03      	cmp	r3, #3
 800c47a:	d101      	bne.n	800c480 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	e0a7      	b.n	800c5d0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c480:	f107 0308 	add.w	r3, r7, #8
 800c484:	4619      	mov	r1, r3
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 fb62 	bl	800cb50 <SD_SendSDStatus>
 800c48c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c48e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c490:	2b00      	cmp	r3, #0
 800c492:	d011      	beq.n	800c4b8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a4f      	ldr	r2, [pc, #316]	@ (800c5d8 <HAL_SD_GetCardStatus+0x178>)
 800c49a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4a2:	431a      	orrs	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c4b6:	e070      	b.n	800c59a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	099b      	lsrs	r3, r3, #6
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	f003 0303 	and.w	r3, r3, #3
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	095b      	lsrs	r3, r3, #5
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	b2da      	uxtb	r2, r3
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	0a1b      	lsrs	r3, r3, #8
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	0e1b      	lsrs	r3, r3, #24
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	061a      	lsls	r2, r3, #24
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	021b      	lsls	r3, r3, #8
 800c4fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c4fe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	0a1b      	lsrs	r3, r3, #8
 800c504:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c508:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	0e1b      	lsrs	r3, r3, #24
 800c50e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	b2da      	uxtb	r2, r3
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	0a1b      	lsrs	r3, r3, #8
 800c520:	b2da      	uxtb	r2, r3
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	0d1b      	lsrs	r3, r3, #20
 800c52a:	b2db      	uxtb	r3, r3
 800c52c:	f003 030f 	and.w	r3, r3, #15
 800c530:	b2da      	uxtb	r2, r3
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	0c1b      	lsrs	r3, r3, #16
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c540:	b29a      	uxth	r2, r3
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	b29b      	uxth	r3, r3
 800c546:	b2db      	uxtb	r3, r3
 800c548:	b29b      	uxth	r3, r3
 800c54a:	4313      	orrs	r3, r2
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	0a9b      	lsrs	r3, r3, #10
 800c556:	b2db      	uxtb	r3, r3
 800c558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c55c:	b2da      	uxtb	r2, r3
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	0a1b      	lsrs	r3, r3, #8
 800c566:	b2db      	uxtb	r3, r3
 800c568:	f003 0303 	and.w	r3, r3, #3
 800c56c:	b2da      	uxtb	r2, r3
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	091b      	lsrs	r3, r3, #4
 800c576:	b2db      	uxtb	r3, r3
 800c578:	f003 030f 	and.w	r3, r3, #15
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	b2db      	uxtb	r3, r3
 800c586:	f003 030f 	and.w	r3, r3, #15
 800c58a:	b2da      	uxtb	r2, r3
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	0e1b      	lsrs	r3, r3, #24
 800c594:	b2da      	uxtb	r2, r3
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f003 fd3c 	bl	8010020 <SDMMC_CmdBlockLength>
 800c5a8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c5aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d00d      	beq.n	800c5cc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a08      	ldr	r2, [pc, #32]	@ (800c5d8 <HAL_SD_GetCardStatus+0x178>)
 800c5b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5bc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800c5cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3750      	adds	r7, #80	@ 0x50
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	1fe00fff 	.word	0x1fe00fff

0800c5dc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c634:	b590      	push	{r4, r7, lr}
 800c636:	b08d      	sub	sp, #52	@ 0x34
 800c638:	af02      	add	r7, sp, #8
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800c63e:	2300      	movs	r3, #0
 800c640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2203      	movs	r2, #3
 800c648:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c650:	2b03      	cmp	r3, #3
 800c652:	d02e      	beq.n	800c6b2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c65a:	d106      	bne.n	800c66a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c660:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	635a      	str	r2, [r3, #52]	@ 0x34
 800c668:	e029      	b.n	800c6be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c670:	d10a      	bne.n	800c688 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 fb64 	bl	800cd40 <SD_WideBus_Enable>
 800c678:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	431a      	orrs	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	635a      	str	r2, [r3, #52]	@ 0x34
 800c686:	e01a      	b.n	800c6be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d10a      	bne.n	800c6a4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fba1 	bl	800cdd6 <SD_WideBus_Disable>
 800c694:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	431a      	orrs	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	635a      	str	r2, [r3, #52]	@ 0x34
 800c6a2:	e00c      	b.n	800c6be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	635a      	str	r2, [r3, #52]	@ 0x34
 800c6b0:	e005      	b.n	800c6be <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d007      	beq.n	800c6d6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a5f      	ldr	r2, [pc, #380]	@ (800c848 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c6cc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c6d4:	e096      	b.n	800c804 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c6d6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c6da:	f04f 0100 	mov.w	r1, #0
 800c6de:	f7fd fe9d 	bl	800a41c <HAL_RCCEx_GetPeriphCLKFreq>
 800c6e2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f000 8083 	beq.w	800c7f2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	691b      	ldr	r3, [r3, #16]
 800c700:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	695a      	ldr	r2, [r3, #20]
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	4950      	ldr	r1, [pc, #320]	@ (800c84c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c70a:	fba1 1303 	umull	r1, r3, r1, r3
 800c70e:	0e1b      	lsrs	r3, r3, #24
 800c710:	429a      	cmp	r2, r3
 800c712:	d303      	bcc.n	800c71c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	695b      	ldr	r3, [r3, #20]
 800c718:	61bb      	str	r3, [r7, #24]
 800c71a:	e05a      	b.n	800c7d2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c724:	d103      	bne.n	800c72e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	695b      	ldr	r3, [r3, #20]
 800c72a:	61bb      	str	r3, [r7, #24]
 800c72c:	e051      	b.n	800c7d2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c736:	d126      	bne.n	800c786 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	695b      	ldr	r3, [r3, #20]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d10e      	bne.n	800c75e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	4a43      	ldr	r2, [pc, #268]	@ (800c850 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d906      	bls.n	800c756 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	4a40      	ldr	r2, [pc, #256]	@ (800c84c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c74c:	fba2 2303 	umull	r2, r3, r2, r3
 800c750:	0e5b      	lsrs	r3, r3, #25
 800c752:	61bb      	str	r3, [r7, #24]
 800c754:	e03d      	b.n	800c7d2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	695b      	ldr	r3, [r3, #20]
 800c75a:	61bb      	str	r3, [r7, #24]
 800c75c:	e039      	b.n	800c7d2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	695b      	ldr	r3, [r3, #20]
 800c762:	005b      	lsls	r3, r3, #1
 800c764:	69fa      	ldr	r2, [r7, #28]
 800c766:	fbb2 f3f3 	udiv	r3, r2, r3
 800c76a:	4a39      	ldr	r2, [pc, #228]	@ (800c850 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d906      	bls.n	800c77e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	4a36      	ldr	r2, [pc, #216]	@ (800c84c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c774:	fba2 2303 	umull	r2, r3, r2, r3
 800c778:	0e5b      	lsrs	r3, r3, #25
 800c77a:	61bb      	str	r3, [r7, #24]
 800c77c:	e029      	b.n	800c7d2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	695b      	ldr	r3, [r3, #20]
 800c782:	61bb      	str	r3, [r7, #24]
 800c784:	e025      	b.n	800c7d2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10e      	bne.n	800c7ac <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	4a30      	ldr	r2, [pc, #192]	@ (800c854 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d906      	bls.n	800c7a4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	4a2c      	ldr	r2, [pc, #176]	@ (800c84c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c79a:	fba2 2303 	umull	r2, r3, r2, r3
 800c79e:	0e1b      	lsrs	r3, r3, #24
 800c7a0:	61bb      	str	r3, [r7, #24]
 800c7a2:	e016      	b.n	800c7d2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	695b      	ldr	r3, [r3, #20]
 800c7a8:	61bb      	str	r3, [r7, #24]
 800c7aa:	e012      	b.n	800c7d2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	695b      	ldr	r3, [r3, #20]
 800c7b0:	005b      	lsls	r3, r3, #1
 800c7b2:	69fa      	ldr	r2, [r7, #28]
 800c7b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7b8:	4a26      	ldr	r2, [pc, #152]	@ (800c854 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d906      	bls.n	800c7cc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	4a22      	ldr	r2, [pc, #136]	@ (800c84c <HAL_SD_ConfigWideBusOperation+0x218>)
 800c7c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7c6:	0e1b      	lsrs	r3, r3, #24
 800c7c8:	61bb      	str	r3, [r7, #24]
 800c7ca:	e002      	b.n	800c7d2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	695b      	ldr	r3, [r3, #20]
 800c7d0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681c      	ldr	r4, [r3, #0]
 800c7d6:	466a      	mov	r2, sp
 800c7d8:	f107 0314 	add.w	r3, r7, #20
 800c7dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c7e0:	e882 0003 	stmia.w	r2, {r0, r1}
 800c7e4:	f107 0308 	add.w	r3, r7, #8
 800c7e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f003 fb3a 	bl	800fe64 <SDMMC_Init>
 800c7f0:	e008      	b.n	800c804 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800c7fe:	2301      	movs	r3, #1
 800c800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c80c:	4618      	mov	r0, r3
 800c80e:	f003 fc07 	bl	8010020 <SDMMC_CmdBlockLength>
 800c812:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c814:	6a3b      	ldr	r3, [r7, #32]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00c      	beq.n	800c834 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a0a      	ldr	r2, [pc, #40]	@ (800c848 <HAL_SD_ConfigWideBusOperation+0x214>)
 800c820:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c826:	6a3b      	ldr	r3, [r7, #32]
 800c828:	431a      	orrs	r2, r3
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800c83c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c840:	4618      	mov	r0, r3
 800c842:	372c      	adds	r7, #44	@ 0x2c
 800c844:	46bd      	mov	sp, r7
 800c846:	bd90      	pop	{r4, r7, pc}
 800c848:	1fe00fff 	.word	0x1fe00fff
 800c84c:	55e63b89 	.word	0x55e63b89
 800c850:	02faf080 	.word	0x02faf080
 800c854:	017d7840 	.word	0x017d7840

0800c858 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c860:	2300      	movs	r3, #0
 800c862:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c864:	f107 030c 	add.w	r3, r7, #12
 800c868:	4619      	mov	r1, r3
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 fa40 	bl	800ccf0 <SD_SendStatus>
 800c870:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d005      	beq.n	800c884 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	431a      	orrs	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	0a5b      	lsrs	r3, r3, #9
 800c888:	f003 030f 	and.w	r3, r3, #15
 800c88c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c88e:	693b      	ldr	r3, [r7, #16]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3718      	adds	r7, #24
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b090      	sub	sp, #64	@ 0x40
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800c8a4:	f7f7 fbc4 	bl	8004030 <HAL_GetTick>
 800c8a8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f003 fb31 	bl	800ff16 <SDMMC_GetPowerState>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d102      	bne.n	800c8c0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c8ba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c8be:	e0b5      	b.n	800ca2c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8c4:	2b03      	cmp	r3, #3
 800c8c6:	d02e      	beq.n	800c926 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f003 fd7c 	bl	80103ca <SDMMC_CmdSendCID>
 800c8d2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d001      	beq.n	800c8de <SD_InitCard+0x46>
    {
      return errorstate;
 800c8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8dc:	e0a6      	b.n	800ca2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2100      	movs	r1, #0
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f003 fb5c 	bl	800ffa2 <SDMMC_GetResponse>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2104      	movs	r1, #4
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f003 fb53 	bl	800ffa2 <SDMMC_GetResponse>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2108      	movs	r1, #8
 800c908:	4618      	mov	r0, r3
 800c90a:	f003 fb4a 	bl	800ffa2 <SDMMC_GetResponse>
 800c90e:	4602      	mov	r2, r0
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	210c      	movs	r1, #12
 800c91a:	4618      	mov	r0, r3
 800c91c:	f003 fb41 	bl	800ffa2 <SDMMC_GetResponse>
 800c920:	4602      	mov	r2, r0
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c92a:	2b03      	cmp	r3, #3
 800c92c:	d01d      	beq.n	800c96a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800c92e:	e019      	b.n	800c964 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f107 020a 	add.w	r2, r7, #10
 800c938:	4611      	mov	r1, r2
 800c93a:	4618      	mov	r0, r3
 800c93c:	f003 fd84 	bl	8010448 <SDMMC_CmdSetRelAdd>
 800c940:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800c942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c944:	2b00      	cmp	r3, #0
 800c946:	d001      	beq.n	800c94c <SD_InitCard+0xb4>
      {
        return errorstate;
 800c948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c94a:	e06f      	b.n	800ca2c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800c94c:	f7f7 fb70 	bl	8004030 <HAL_GetTick>
 800c950:	4602      	mov	r2, r0
 800c952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c954:	1ad3      	subs	r3, r2, r3
 800c956:	f241 3287 	movw	r2, #4999	@ 0x1387
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d902      	bls.n	800c964 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800c95e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c962:	e063      	b.n	800ca2c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800c964:	897b      	ldrh	r3, [r7, #10]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d0e2      	beq.n	800c930 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c96e:	2b03      	cmp	r3, #3
 800c970:	d036      	beq.n	800c9e0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c972:	897b      	ldrh	r3, [r7, #10]
 800c974:	461a      	mov	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c982:	041b      	lsls	r3, r3, #16
 800c984:	4619      	mov	r1, r3
 800c986:	4610      	mov	r0, r2
 800c988:	f003 fd3e 	bl	8010408 <SDMMC_CmdSendCSD>
 800c98c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c990:	2b00      	cmp	r3, #0
 800c992:	d001      	beq.n	800c998 <SD_InitCard+0x100>
    {
      return errorstate;
 800c994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c996:	e049      	b.n	800ca2c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2100      	movs	r1, #0
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f003 faff 	bl	800ffa2 <SDMMC_GetResponse>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2104      	movs	r1, #4
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f003 faf6 	bl	800ffa2 <SDMMC_GetResponse>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2108      	movs	r1, #8
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f003 faed 	bl	800ffa2 <SDMMC_GetResponse>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	210c      	movs	r1, #12
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f003 fae4 	bl	800ffa2 <SDMMC_GetResponse>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2104      	movs	r1, #4
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f003 fadb 	bl	800ffa2 <SDMMC_GetResponse>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	0d1a      	lsrs	r2, r3, #20
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c9f4:	f107 030c 	add.w	r3, r7, #12
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7ff fb8c 	bl	800c118 <HAL_SD_GetCardCSD>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d002      	beq.n	800ca0c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca06:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ca0a:	e00f      	b.n	800ca2c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca14:	041b      	lsls	r3, r3, #16
 800ca16:	4619      	mov	r1, r3
 800ca18:	4610      	mov	r0, r2
 800ca1a:	f003 fbed 	bl	80101f8 <SDMMC_CmdSelDesel>
 800ca1e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d001      	beq.n	800ca2a <SD_InitCard+0x192>
  {
    return errorstate;
 800ca26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca28:	e000      	b.n	800ca2c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3740      	adds	r7, #64	@ 0x40
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b086      	sub	sp, #24
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800ca40:	2300      	movs	r3, #0
 800ca42:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800ca44:	2300      	movs	r3, #0
 800ca46:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f003 fbf6 	bl	801023e <SDMMC_CmdGoIdleState>
 800ca52:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d001      	beq.n	800ca5e <SD_PowerON+0x2a>
  {
    return errorstate;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	e072      	b.n	800cb44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f003 fc09 	bl	801027a <SDMMC_CmdOperCond>
 800ca68:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca70:	d10d      	bne.n	800ca8e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f003 fbde 	bl	801023e <SDMMC_CmdGoIdleState>
 800ca82:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d004      	beq.n	800ca94 <SD_PowerON+0x60>
    {
      return errorstate;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	e05a      	b.n	800cb44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2201      	movs	r2, #1
 800ca92:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d137      	bne.n	800cb0c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2100      	movs	r1, #0
 800caa2:	4618      	mov	r0, r3
 800caa4:	f003 fc09 	bl	80102ba <SDMMC_CmdAppCommand>
 800caa8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d02d      	beq.n	800cb0c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cab0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cab4:	e046      	b.n	800cb44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2100      	movs	r1, #0
 800cabc:	4618      	mov	r0, r3
 800cabe:	f003 fbfc 	bl	80102ba <SDMMC_CmdAppCommand>
 800cac2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d001      	beq.n	800cace <SD_PowerON+0x9a>
    {
      return errorstate;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	e03a      	b.n	800cb44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	491e      	ldr	r1, [pc, #120]	@ (800cb4c <SD_PowerON+0x118>)
 800cad4:	4618      	mov	r0, r3
 800cad6:	f003 fc13 	bl	8010300 <SDMMC_CmdAppOperCommand>
 800cada:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d002      	beq.n	800cae8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cae2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cae6:	e02d      	b.n	800cb44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2100      	movs	r1, #0
 800caee:	4618      	mov	r0, r3
 800caf0:	f003 fa57 	bl	800ffa2 <SDMMC_GetResponse>
 800caf4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	0fdb      	lsrs	r3, r3, #31
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d101      	bne.n	800cb02 <SD_PowerON+0xce>
 800cafe:	2301      	movs	r3, #1
 800cb00:	e000      	b.n	800cb04 <SD_PowerON+0xd0>
 800cb02:	2300      	movs	r3, #0
 800cb04:	613b      	str	r3, [r7, #16]

    count++;
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d802      	bhi.n	800cb1c <SD_PowerON+0xe8>
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d0cc      	beq.n	800cab6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d902      	bls.n	800cb2c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cb26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cb2a:	e00b      	b.n	800cb44 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d002      	beq.n	800cb42 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3718      	adds	r7, #24
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	c1100000 	.word	0xc1100000

0800cb50 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b08c      	sub	sp, #48	@ 0x30
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cb5a:	f7f7 fa69 	bl	8004030 <HAL_GetTick>
 800cb5e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2100      	movs	r1, #0
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f003 fa19 	bl	800ffa2 <SDMMC_GetResponse>
 800cb70:	4603      	mov	r3, r0
 800cb72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cb7a:	d102      	bne.n	800cb82 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cb7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cb80:	e0b0      	b.n	800cce4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2140      	movs	r1, #64	@ 0x40
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f003 fa49 	bl	8010020 <SDMMC_CmdBlockLength>
 800cb8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb90:	6a3b      	ldr	r3, [r7, #32]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d005      	beq.n	800cba2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800cb9e:	6a3b      	ldr	r3, [r7, #32]
 800cba0:	e0a0      	b.n	800cce4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbaa:	041b      	lsls	r3, r3, #16
 800cbac:	4619      	mov	r1, r3
 800cbae:	4610      	mov	r0, r2
 800cbb0:	f003 fb83 	bl	80102ba <SDMMC_CmdAppCommand>
 800cbb4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cbb6:	6a3b      	ldr	r3, [r7, #32]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d005      	beq.n	800cbc8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800cbc4:	6a3b      	ldr	r3, [r7, #32]
 800cbc6:	e08d      	b.n	800cce4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cbc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbcc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800cbce:	2340      	movs	r3, #64	@ 0x40
 800cbd0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800cbd2:	2360      	movs	r3, #96	@ 0x60
 800cbd4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cbd6:	2302      	movs	r3, #2
 800cbd8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f107 0208 	add.w	r2, r7, #8
 800cbea:	4611      	mov	r1, r2
 800cbec:	4618      	mov	r0, r3
 800cbee:	f003 f9eb 	bl	800ffc8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f003 fc6b 	bl	80104d2 <SDMMC_CmdStatusRegister>
 800cbfc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cbfe:	6a3b      	ldr	r3, [r7, #32]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d02b      	beq.n	800cc5c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800cc0c:	6a3b      	ldr	r3, [r7, #32]
 800cc0e:	e069      	b.n	800cce4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d013      	beq.n	800cc46 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800cc1e:	2300      	movs	r3, #0
 800cc20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc22:	e00d      	b.n	800cc40 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f003 f945 	bl	800feb8 <SDMMC_ReadFIFO>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc32:	601a      	str	r2, [r3, #0]
        pData++;
 800cc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc36:	3304      	adds	r3, #4
 800cc38:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800cc3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc42:	2b07      	cmp	r3, #7
 800cc44:	d9ee      	bls.n	800cc24 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800cc46:	f7f7 f9f3 	bl	8004030 <HAL_GetTick>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4e:	1ad3      	subs	r3, r2, r3
 800cc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc54:	d102      	bne.n	800cc5c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cc56:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc5a:	e043      	b.n	800cce4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc62:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d0d2      	beq.n	800cc10 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc70:	f003 0308 	and.w	r3, r3, #8
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d001      	beq.n	800cc7c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cc78:	2308      	movs	r3, #8
 800cc7a:	e033      	b.n	800cce4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc82:	f003 0302 	and.w	r3, r3, #2
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d001      	beq.n	800cc8e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cc8a:	2302      	movs	r3, #2
 800cc8c:	e02a      	b.n	800cce4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc94:	f003 0320 	and.w	r3, r3, #32
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d017      	beq.n	800cccc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800cc9c:	2320      	movs	r3, #32
 800cc9e:	e021      	b.n	800cce4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f003 f907 	bl	800feb8 <SDMMC_ReadFIFO>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccae:	601a      	str	r2, [r3, #0]
    pData++;
 800ccb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb2:	3304      	adds	r3, #4
 800ccb4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800ccb6:	f7f7 f9bb 	bl	8004030 <HAL_GetTick>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccc4:	d102      	bne.n	800cccc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ccc6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ccca:	e00b      	b.n	800cce4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d1e2      	bne.n	800cca0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4a03      	ldr	r2, [pc, #12]	@ (800ccec <SD_SendSDStatus+0x19c>)
 800cce0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3730      	adds	r7, #48	@ 0x30
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	18000f3a 	.word	0x18000f3a

0800ccf0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d102      	bne.n	800cd06 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cd00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cd04:	e018      	b.n	800cd38 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd0e:	041b      	lsls	r3, r3, #16
 800cd10:	4619      	mov	r1, r3
 800cd12:	4610      	mov	r0, r2
 800cd14:	f003 fbba 	bl	801048c <SDMMC_CmdSendStatus>
 800cd18:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d001      	beq.n	800cd24 <SD_SendStatus+0x34>
  {
    return errorstate;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	e009      	b.n	800cd38 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2100      	movs	r1, #0
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f003 f939 	bl	800ffa2 <SDMMC_GetResponse>
 800cd30:	4602      	mov	r2, r0
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cd48:	2300      	movs	r3, #0
 800cd4a:	60fb      	str	r3, [r7, #12]
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2100      	movs	r1, #0
 800cd56:	4618      	mov	r0, r3
 800cd58:	f003 f923 	bl	800ffa2 <SDMMC_GetResponse>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cd66:	d102      	bne.n	800cd6e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cd68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cd6c:	e02f      	b.n	800cdce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cd6e:	f107 030c 	add.w	r3, r7, #12
 800cd72:	4619      	mov	r1, r3
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 f879 	bl	800ce6c <SD_FindSCR>
 800cd7a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d001      	beq.n	800cd86 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	e023      	b.n	800cdce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d01c      	beq.n	800cdca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd98:	041b      	lsls	r3, r3, #16
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	4610      	mov	r0, r2
 800cd9e:	f003 fa8c 	bl	80102ba <SDMMC_CmdAppCommand>
 800cda2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d001      	beq.n	800cdae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	e00f      	b.n	800cdce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2102      	movs	r1, #2
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f003 fac3 	bl	8010340 <SDMMC_CmdBusWidth>
 800cdba:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d001      	beq.n	800cdc6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	e003      	b.n	800cdce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	e001      	b.n	800cdce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cdca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3718      	adds	r7, #24
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b086      	sub	sp, #24
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800cdde:	2300      	movs	r3, #0
 800cde0:	60fb      	str	r3, [r7, #12]
 800cde2:	2300      	movs	r3, #0
 800cde4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2100      	movs	r1, #0
 800cdec:	4618      	mov	r0, r3
 800cdee:	f003 f8d8 	bl	800ffa2 <SDMMC_GetResponse>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cdf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cdfc:	d102      	bne.n	800ce04 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cdfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ce02:	e02f      	b.n	800ce64 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ce04:	f107 030c 	add.w	r3, r7, #12
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f82e 	bl	800ce6c <SD_FindSCR>
 800ce10:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	e023      	b.n	800ce64 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d01c      	beq.n	800ce60 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce2e:	041b      	lsls	r3, r3, #16
 800ce30:	4619      	mov	r1, r3
 800ce32:	4610      	mov	r0, r2
 800ce34:	f003 fa41 	bl	80102ba <SDMMC_CmdAppCommand>
 800ce38:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d001      	beq.n	800ce44 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	e00f      	b.n	800ce64 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2100      	movs	r1, #0
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f003 fa78 	bl	8010340 <SDMMC_CmdBusWidth>
 800ce50:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d001      	beq.n	800ce5c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	e003      	b.n	800ce64 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	e001      	b.n	800ce64 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ce60:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b08e      	sub	sp, #56	@ 0x38
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ce76:	f7f7 f8db 	bl	8004030 <HAL_GetTick>
 800ce7a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ce80:	2300      	movs	r3, #0
 800ce82:	60bb      	str	r3, [r7, #8]
 800ce84:	2300      	movs	r3, #0
 800ce86:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2108      	movs	r1, #8
 800ce92:	4618      	mov	r0, r3
 800ce94:	f003 f8c4 	bl	8010020 <SDMMC_CmdBlockLength>
 800ce98:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d001      	beq.n	800cea4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800cea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea2:	e0ad      	b.n	800d000 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceac:	041b      	lsls	r3, r3, #16
 800ceae:	4619      	mov	r1, r3
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	f003 fa02 	bl	80102ba <SDMMC_CmdAppCommand>
 800ceb6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ceb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d001      	beq.n	800cec2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800cebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec0:	e09e      	b.n	800d000 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cec2:	f04f 33ff 	mov.w	r3, #4294967295
 800cec6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cec8:	2308      	movs	r3, #8
 800ceca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800cecc:	2330      	movs	r3, #48	@ 0x30
 800cece:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ced0:	2302      	movs	r3, #2
 800ced2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ced4:	2300      	movs	r3, #0
 800ced6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ced8:	2301      	movs	r3, #1
 800ceda:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f107 0210 	add.w	r2, r7, #16
 800cee4:	4611      	mov	r1, r2
 800cee6:	4618      	mov	r0, r3
 800cee8:	f003 f86e 	bl	800ffc8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f003 fa48 	bl	8010386 <SDMMC_CmdSendSCR>
 800cef6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d027      	beq.n	800cf4e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800cefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf00:	e07e      	b.n	800d000 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d113      	bne.n	800cf38 <SD_FindSCR+0xcc>
 800cf10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d110      	bne.n	800cf38 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f002 ffcc 	bl	800feb8 <SDMMC_ReadFIFO>
 800cf20:	4603      	mov	r3, r0
 800cf22:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f002 ffc5 	bl	800feb8 <SDMMC_ReadFIFO>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	60fb      	str	r3, [r7, #12]
      index++;
 800cf32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf34:	3301      	adds	r3, #1
 800cf36:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800cf38:	f7f7 f87a 	bl	8004030 <HAL_GetTick>
 800cf3c:	4602      	mov	r2, r0
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf46:	d102      	bne.n	800cf4e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cf48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cf4c:	e058      	b.n	800d000 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf54:	f240 532a 	movw	r3, #1322	@ 0x52a
 800cf58:	4013      	ands	r3, r2
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d0d1      	beq.n	800cf02 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf64:	f003 0308 	and.w	r3, r3, #8
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d005      	beq.n	800cf78 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2208      	movs	r2, #8
 800cf72:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cf74:	2308      	movs	r3, #8
 800cf76:	e043      	b.n	800d000 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf7e:	f003 0302 	and.w	r3, r3, #2
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d005      	beq.n	800cf92 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2202      	movs	r2, #2
 800cf8c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf8e:	2302      	movs	r3, #2
 800cf90:	e036      	b.n	800d000 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf98:	f003 0320 	and.w	r3, r3, #32
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d005      	beq.n	800cfac <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2220      	movs	r2, #32
 800cfa6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800cfa8:	2320      	movs	r3, #32
 800cfaa:	e029      	b.n	800d000 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a15      	ldr	r2, [pc, #84]	@ (800d008 <SD_FindSCR+0x19c>)
 800cfb2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	061a      	lsls	r2, r3, #24
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	021b      	lsls	r3, r3, #8
 800cfbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cfc0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	0a1b      	lsrs	r3, r3, #8
 800cfc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800cfca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	0e1b      	lsrs	r3, r3, #24
 800cfd0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800cfd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd4:	601a      	str	r2, [r3, #0]
    scr++;
 800cfd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd8:	3304      	adds	r3, #4
 800cfda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	061a      	lsls	r2, r3, #24
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	021b      	lsls	r3, r3, #8
 800cfe4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cfe8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	0a1b      	lsrs	r3, r3, #8
 800cfee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800cff2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	0e1b      	lsrs	r3, r3, #24
 800cff8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800cffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cffc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3738      	adds	r7, #56	@ 0x38
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	18000f3a 	.word	0x18000f3a

0800d00c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d101      	bne.n	800d01e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d01a:	2301      	movs	r3, #1
 800d01c:	e10f      	b.n	800d23e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a87      	ldr	r2, [pc, #540]	@ (800d248 <HAL_SPI_Init+0x23c>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d00f      	beq.n	800d04e <HAL_SPI_Init+0x42>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a86      	ldr	r2, [pc, #536]	@ (800d24c <HAL_SPI_Init+0x240>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d00a      	beq.n	800d04e <HAL_SPI_Init+0x42>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a84      	ldr	r2, [pc, #528]	@ (800d250 <HAL_SPI_Init+0x244>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d005      	beq.n	800d04e <HAL_SPI_Init+0x42>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	2b0f      	cmp	r3, #15
 800d048:	d901      	bls.n	800d04e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d04a:	2301      	movs	r3, #1
 800d04c:	e0f7      	b.n	800d23e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 fbbc 	bl	800d7cc <SPI_GetPacketSize>
 800d054:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a7b      	ldr	r2, [pc, #492]	@ (800d248 <HAL_SPI_Init+0x23c>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d00c      	beq.n	800d07a <HAL_SPI_Init+0x6e>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a79      	ldr	r2, [pc, #484]	@ (800d24c <HAL_SPI_Init+0x240>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d007      	beq.n	800d07a <HAL_SPI_Init+0x6e>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a78      	ldr	r2, [pc, #480]	@ (800d250 <HAL_SPI_Init+0x244>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d002      	beq.n	800d07a <HAL_SPI_Init+0x6e>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2b08      	cmp	r3, #8
 800d078:	d811      	bhi.n	800d09e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d07e:	4a72      	ldr	r2, [pc, #456]	@ (800d248 <HAL_SPI_Init+0x23c>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d009      	beq.n	800d098 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a70      	ldr	r2, [pc, #448]	@ (800d24c <HAL_SPI_Init+0x240>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d004      	beq.n	800d098 <HAL_SPI_Init+0x8c>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4a6f      	ldr	r2, [pc, #444]	@ (800d250 <HAL_SPI_Init+0x244>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d104      	bne.n	800d0a2 <HAL_SPI_Init+0x96>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2b10      	cmp	r3, #16
 800d09c:	d901      	bls.n	800d0a2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e0cd      	b.n	800d23e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d106      	bne.n	800d0bc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f7f5 f860 	bl	800217c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2202      	movs	r2, #2
 800d0c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f022 0201 	bic.w	r2, r2, #1
 800d0d2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800d0de:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	699b      	ldr	r3, [r3, #24]
 800d0e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d0e8:	d119      	bne.n	800d11e <HAL_SPI_Init+0x112>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d0f2:	d103      	bne.n	800d0fc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d008      	beq.n	800d10e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10c      	bne.n	800d11e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d108:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d10c:	d107      	bne.n	800d11e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d11c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00f      	beq.n	800d14a <HAL_SPI_Init+0x13e>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	2b06      	cmp	r3, #6
 800d130:	d90b      	bls.n	800d14a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	430a      	orrs	r2, r1
 800d146:	601a      	str	r2, [r3, #0]
 800d148:	e007      	b.n	800d15a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d158:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	69da      	ldr	r2, [r3, #28]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d162:	431a      	orrs	r2, r3
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	431a      	orrs	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d16c:	ea42 0103 	orr.w	r1, r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	68da      	ldr	r2, [r3, #12]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	430a      	orrs	r2, r1
 800d17a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d184:	431a      	orrs	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d18a:	431a      	orrs	r2, r3
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	431a      	orrs	r2, r3
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	691b      	ldr	r3, [r3, #16]
 800d196:	431a      	orrs	r2, r3
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	695b      	ldr	r3, [r3, #20]
 800d19c:	431a      	orrs	r2, r3
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a1b      	ldr	r3, [r3, #32]
 800d1a2:	431a      	orrs	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	431a      	orrs	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1ae:	431a      	orrs	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	431a      	orrs	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d1ba:	ea42 0103 	orr.w	r1, r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	430a      	orrs	r2, r1
 800d1c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d113      	bne.n	800d1fa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d1e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d1f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f022 0201 	bic.w	r2, r2, #1
 800d208:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00a      	beq.n	800d22c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	68db      	ldr	r3, [r3, #12]
 800d21c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	430a      	orrs	r2, r1
 800d22a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2201      	movs	r2, #1
 800d238:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	40013000 	.word	0x40013000
 800d24c:	40003800 	.word	0x40003800
 800d250:	40003c00 	.word	0x40003c00

0800d254 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b088      	sub	sp, #32
 800d258:	af02      	add	r7, sp, #8
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	603b      	str	r3, [r7, #0]
 800d260:	4613      	mov	r3, r2
 800d262:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	3320      	adds	r3, #32
 800d26a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d26c:	f7f6 fee0 	bl	8004030 <HAL_GetTick>
 800d270:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d001      	beq.n	800d282 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800d27e:	2302      	movs	r3, #2
 800d280:	e1d1      	b.n	800d626 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <HAL_SPI_Transmit+0x3a>
 800d288:	88fb      	ldrh	r3, [r7, #6]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d101      	bne.n	800d292 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800d28e:	2301      	movs	r3, #1
 800d290:	e1c9      	b.n	800d626 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d101      	bne.n	800d2a0 <HAL_SPI_Transmit+0x4c>
 800d29c:	2302      	movs	r3, #2
 800d29e:	e1c2      	b.n	800d626 <HAL_SPI_Transmit+0x3d2>
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2203      	movs	r2, #3
 800d2ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	88fa      	ldrh	r2, [r7, #6]
 800d2c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	88fa      	ldrh	r2, [r7, #6]
 800d2ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d2f8:	d108      	bne.n	800d30c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	e009      	b.n	800d320 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d31e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	685a      	ldr	r2, [r3, #4]
 800d326:	4b96      	ldr	r3, [pc, #600]	@ (800d580 <HAL_SPI_Transmit+0x32c>)
 800d328:	4013      	ands	r3, r2
 800d32a:	88f9      	ldrh	r1, [r7, #6]
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	6812      	ldr	r2, [r2, #0]
 800d330:	430b      	orrs	r3, r1
 800d332:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f042 0201 	orr.w	r2, r2, #1
 800d342:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d34c:	d107      	bne.n	800d35e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d35c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	2b0f      	cmp	r3, #15
 800d364:	d947      	bls.n	800d3f6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d366:	e03f      	b.n	800d3e8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	695b      	ldr	r3, [r3, #20]
 800d36e:	f003 0302 	and.w	r3, r3, #2
 800d372:	2b02      	cmp	r3, #2
 800d374:	d114      	bne.n	800d3a0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	6812      	ldr	r2, [r2, #0]
 800d380:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d386:	1d1a      	adds	r2, r3, #4
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d392:	b29b      	uxth	r3, r3
 800d394:	3b01      	subs	r3, #1
 800d396:	b29a      	uxth	r2, r3
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d39e:	e023      	b.n	800d3e8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d3a0:	f7f6 fe46 	bl	8004030 <HAL_GetTick>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	1ad3      	subs	r3, r2, r3
 800d3aa:	683a      	ldr	r2, [r7, #0]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d803      	bhi.n	800d3b8 <HAL_SPI_Transmit+0x164>
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b6:	d102      	bne.n	800d3be <HAL_SPI_Transmit+0x16a>
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d114      	bne.n	800d3e8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d3be:	68f8      	ldr	r0, [r7, #12]
 800d3c0:	f000 f936 	bl	800d630 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d3e4:	2303      	movs	r3, #3
 800d3e6:	e11e      	b.n	800d626 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1b9      	bne.n	800d368 <HAL_SPI_Transmit+0x114>
 800d3f4:	e0f1      	b.n	800d5da <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	2b07      	cmp	r3, #7
 800d3fc:	f240 80e6 	bls.w	800d5cc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d400:	e05d      	b.n	800d4be <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	695b      	ldr	r3, [r3, #20]
 800d408:	f003 0302 	and.w	r3, r3, #2
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d132      	bne.n	800d476 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d416:	b29b      	uxth	r3, r3
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d918      	bls.n	800d44e <HAL_SPI_Transmit+0x1fa>
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d420:	2b00      	cmp	r3, #0
 800d422:	d014      	beq.n	800d44e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	6812      	ldr	r2, [r2, #0]
 800d42e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d434:	1d1a      	adds	r2, r3, #4
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d440:	b29b      	uxth	r3, r3
 800d442:	3b02      	subs	r3, #2
 800d444:	b29a      	uxth	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d44c:	e037      	b.n	800d4be <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d452:	881a      	ldrh	r2, [r3, #0]
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d45c:	1c9a      	adds	r2, r3, #2
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d468:	b29b      	uxth	r3, r3
 800d46a:	3b01      	subs	r3, #1
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d474:	e023      	b.n	800d4be <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d476:	f7f6 fddb 	bl	8004030 <HAL_GetTick>
 800d47a:	4602      	mov	r2, r0
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	1ad3      	subs	r3, r2, r3
 800d480:	683a      	ldr	r2, [r7, #0]
 800d482:	429a      	cmp	r2, r3
 800d484:	d803      	bhi.n	800d48e <HAL_SPI_Transmit+0x23a>
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d48c:	d102      	bne.n	800d494 <HAL_SPI_Transmit+0x240>
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d114      	bne.n	800d4be <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	f000 f8cb 	bl	800d630 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d4a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d4ba:	2303      	movs	r3, #3
 800d4bc:	e0b3      	b.n	800d626 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d19b      	bne.n	800d402 <HAL_SPI_Transmit+0x1ae>
 800d4ca:	e086      	b.n	800d5da <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	695b      	ldr	r3, [r3, #20]
 800d4d2:	f003 0302 	and.w	r3, r3, #2
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	d154      	bne.n	800d584 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	2b03      	cmp	r3, #3
 800d4e4:	d918      	bls.n	800d518 <HAL_SPI_Transmit+0x2c4>
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4ea:	2b40      	cmp	r3, #64	@ 0x40
 800d4ec:	d914      	bls.n	800d518 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	6812      	ldr	r2, [r2, #0]
 800d4f8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4fe:	1d1a      	adds	r2, r3, #4
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	3b04      	subs	r3, #4
 800d50e:	b29a      	uxth	r2, r3
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d516:	e059      	b.n	800d5cc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d51e:	b29b      	uxth	r3, r3
 800d520:	2b01      	cmp	r3, #1
 800d522:	d917      	bls.n	800d554 <HAL_SPI_Transmit+0x300>
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d013      	beq.n	800d554 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d530:	881a      	ldrh	r2, [r3, #0]
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d53a:	1c9a      	adds	r2, r3, #2
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d546:	b29b      	uxth	r3, r3
 800d548:	3b02      	subs	r3, #2
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d552:	e03b      	b.n	800d5cc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	3320      	adds	r3, #32
 800d55e:	7812      	ldrb	r2, [r2, #0]
 800d560:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d566:	1c5a      	adds	r2, r3, #1
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d572:	b29b      	uxth	r3, r3
 800d574:	3b01      	subs	r3, #1
 800d576:	b29a      	uxth	r2, r3
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d57e:	e025      	b.n	800d5cc <HAL_SPI_Transmit+0x378>
 800d580:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d584:	f7f6 fd54 	bl	8004030 <HAL_GetTick>
 800d588:	4602      	mov	r2, r0
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	1ad3      	subs	r3, r2, r3
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	429a      	cmp	r2, r3
 800d592:	d803      	bhi.n	800d59c <HAL_SPI_Transmit+0x348>
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59a:	d102      	bne.n	800d5a2 <HAL_SPI_Transmit+0x34e>
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d114      	bne.n	800d5cc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f000 f844 	bl	800d630 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d5c8:	2303      	movs	r3, #3
 800d5ca:	e02c      	b.n	800d626 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f47f af79 	bne.w	800d4cc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	9300      	str	r3, [sp, #0]
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	2108      	movs	r1, #8
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f000 f8c3 	bl	800d770 <SPI_WaitOnFlagUntilTimeout>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d007      	beq.n	800d600 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d5f6:	f043 0220 	orr.w	r2, r3, #32
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f000 f815 	bl	800d630 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2201      	movs	r2, #1
 800d60a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2200      	movs	r2, #0
 800d612:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d001      	beq.n	800d624 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800d620:	2301      	movs	r3, #1
 800d622:	e000      	b.n	800d626 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800d624:	2300      	movs	r3, #0
  }
}
 800d626:	4618      	mov	r0, r3
 800d628:	3718      	adds	r7, #24
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop

0800d630 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d630:	b480      	push	{r7}
 800d632:	b085      	sub	sp, #20
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	699a      	ldr	r2, [r3, #24]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f042 0208 	orr.w	r2, r2, #8
 800d64e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	699a      	ldr	r2, [r3, #24]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f042 0210 	orr.w	r2, r2, #16
 800d65e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f022 0201 	bic.w	r2, r2, #1
 800d66e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6919      	ldr	r1, [r3, #16]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	4b3c      	ldr	r3, [pc, #240]	@ (800d76c <SPI_CloseTransfer+0x13c>)
 800d67c:	400b      	ands	r3, r1
 800d67e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	689a      	ldr	r2, [r3, #8]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d68e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d696:	b2db      	uxtb	r3, r3
 800d698:	2b04      	cmp	r3, #4
 800d69a:	d014      	beq.n	800d6c6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f003 0320 	and.w	r3, r3, #32
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00f      	beq.n	800d6c6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d6ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	699a      	ldr	r2, [r3, #24]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f042 0220 	orr.w	r2, r2, #32
 800d6c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	2b03      	cmp	r3, #3
 800d6d0:	d014      	beq.n	800d6fc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00f      	beq.n	800d6fc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d6e2:	f043 0204 	orr.w	r2, r3, #4
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	699a      	ldr	r2, [r3, #24]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d6fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00f      	beq.n	800d726 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d70c:	f043 0201 	orr.w	r2, r3, #1
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	699a      	ldr	r2, [r3, #24]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d724:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00f      	beq.n	800d750 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d736:	f043 0208 	orr.w	r2, r3, #8
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	699a      	ldr	r2, [r3, #24]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d74e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2200      	movs	r2, #0
 800d754:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2200      	movs	r2, #0
 800d75c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d760:	bf00      	nop
 800d762:	3714      	adds	r7, #20
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr
 800d76c:	fffffc90 	.word	0xfffffc90

0800d770 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	603b      	str	r3, [r7, #0]
 800d77c:	4613      	mov	r3, r2
 800d77e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d780:	e010      	b.n	800d7a4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d782:	f7f6 fc55 	bl	8004030 <HAL_GetTick>
 800d786:	4602      	mov	r2, r0
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	1ad3      	subs	r3, r2, r3
 800d78c:	683a      	ldr	r2, [r7, #0]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d803      	bhi.n	800d79a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d798:	d102      	bne.n	800d7a0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d101      	bne.n	800d7a4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d7a0:	2303      	movs	r3, #3
 800d7a2:	e00f      	b.n	800d7c4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	695a      	ldr	r2, [r3, #20]
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	4013      	ands	r3, r2
 800d7ae:	68ba      	ldr	r2, [r7, #8]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	bf0c      	ite	eq
 800d7b4:	2301      	moveq	r3, #1
 800d7b6:	2300      	movne	r3, #0
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	79fb      	ldrb	r3, [r7, #7]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d0df      	beq.n	800d782 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7d8:	095b      	lsrs	r3, r3, #5
 800d7da:	3301      	adds	r3, #1
 800d7dc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	3307      	adds	r3, #7
 800d7ea:	08db      	lsrs	r3, r3, #3
 800d7ec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b082      	sub	sp, #8
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d101      	bne.n	800d814 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d810:	2301      	movs	r3, #1
 800d812:	e049      	b.n	800d8a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d106      	bne.n	800d82e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7f4 fd0f 	bl	800224c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2202      	movs	r2, #2
 800d832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	3304      	adds	r3, #4
 800d83e:	4619      	mov	r1, r3
 800d840:	4610      	mov	r0, r2
 800d842:	f000 fbbf 	bl	800dfc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2201      	movs	r2, #1
 800d852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2201      	movs	r2, #1
 800d85a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2201      	movs	r2, #1
 800d862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2201      	movs	r2, #1
 800d86a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2201      	movs	r2, #1
 800d872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2201      	movs	r2, #1
 800d87a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2201      	movs	r2, #1
 800d882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2201      	movs	r2, #1
 800d892:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2201      	movs	r2, #1
 800d89a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d101      	bne.n	800d8c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e049      	b.n	800d956 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d106      	bne.n	800d8dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 f841 	bl	800d95e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2202      	movs	r2, #2
 800d8e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	4610      	mov	r0, r2
 800d8f0:	f000 fb68 	bl	800dfc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2201      	movs	r2, #1
 800d910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2201      	movs	r2, #1
 800d928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2201      	movs	r2, #1
 800d938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2201      	movs	r2, #1
 800d940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2201      	movs	r2, #1
 800d948:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2201      	movs	r2, #1
 800d950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d954:	2300      	movs	r3, #0
}
 800d956:	4618      	mov	r0, r3
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d95e:	b480      	push	{r7}
 800d960:	b083      	sub	sp, #12
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d966:	bf00      	nop
 800d968:	370c      	adds	r7, #12
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
	...

0800d974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d109      	bne.n	800d998 <HAL_TIM_PWM_Start+0x24>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	bf14      	ite	ne
 800d990:	2301      	movne	r3, #1
 800d992:	2300      	moveq	r3, #0
 800d994:	b2db      	uxtb	r3, r3
 800d996:	e03c      	b.n	800da12 <HAL_TIM_PWM_Start+0x9e>
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	2b04      	cmp	r3, #4
 800d99c:	d109      	bne.n	800d9b2 <HAL_TIM_PWM_Start+0x3e>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	bf14      	ite	ne
 800d9aa:	2301      	movne	r3, #1
 800d9ac:	2300      	moveq	r3, #0
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	e02f      	b.n	800da12 <HAL_TIM_PWM_Start+0x9e>
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	2b08      	cmp	r3, #8
 800d9b6:	d109      	bne.n	800d9cc <HAL_TIM_PWM_Start+0x58>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	bf14      	ite	ne
 800d9c4:	2301      	movne	r3, #1
 800d9c6:	2300      	moveq	r3, #0
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	e022      	b.n	800da12 <HAL_TIM_PWM_Start+0x9e>
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	2b0c      	cmp	r3, #12
 800d9d0:	d109      	bne.n	800d9e6 <HAL_TIM_PWM_Start+0x72>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	bf14      	ite	ne
 800d9de:	2301      	movne	r3, #1
 800d9e0:	2300      	moveq	r3, #0
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	e015      	b.n	800da12 <HAL_TIM_PWM_Start+0x9e>
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	2b10      	cmp	r3, #16
 800d9ea:	d109      	bne.n	800da00 <HAL_TIM_PWM_Start+0x8c>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	bf14      	ite	ne
 800d9f8:	2301      	movne	r3, #1
 800d9fa:	2300      	moveq	r3, #0
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	e008      	b.n	800da12 <HAL_TIM_PWM_Start+0x9e>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800da06:	b2db      	uxtb	r3, r3
 800da08:	2b01      	cmp	r3, #1
 800da0a:	bf14      	ite	ne
 800da0c:	2301      	movne	r3, #1
 800da0e:	2300      	moveq	r3, #0
 800da10:	b2db      	uxtb	r3, r3
 800da12:	2b00      	cmp	r3, #0
 800da14:	d001      	beq.n	800da1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800da16:	2301      	movs	r3, #1
 800da18:	e0ab      	b.n	800db72 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d104      	bne.n	800da2a <HAL_TIM_PWM_Start+0xb6>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2202      	movs	r2, #2
 800da24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800da28:	e023      	b.n	800da72 <HAL_TIM_PWM_Start+0xfe>
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	2b04      	cmp	r3, #4
 800da2e:	d104      	bne.n	800da3a <HAL_TIM_PWM_Start+0xc6>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2202      	movs	r2, #2
 800da34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800da38:	e01b      	b.n	800da72 <HAL_TIM_PWM_Start+0xfe>
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	2b08      	cmp	r3, #8
 800da3e:	d104      	bne.n	800da4a <HAL_TIM_PWM_Start+0xd6>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2202      	movs	r2, #2
 800da44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da48:	e013      	b.n	800da72 <HAL_TIM_PWM_Start+0xfe>
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	2b0c      	cmp	r3, #12
 800da4e:	d104      	bne.n	800da5a <HAL_TIM_PWM_Start+0xe6>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2202      	movs	r2, #2
 800da54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da58:	e00b      	b.n	800da72 <HAL_TIM_PWM_Start+0xfe>
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	2b10      	cmp	r3, #16
 800da5e:	d104      	bne.n	800da6a <HAL_TIM_PWM_Start+0xf6>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2202      	movs	r2, #2
 800da64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800da68:	e003      	b.n	800da72 <HAL_TIM_PWM_Start+0xfe>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2202      	movs	r2, #2
 800da6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	2201      	movs	r2, #1
 800da78:	6839      	ldr	r1, [r7, #0]
 800da7a:	4618      	mov	r0, r3
 800da7c:	f000 fec2 	bl	800e804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a3d      	ldr	r2, [pc, #244]	@ (800db7c <HAL_TIM_PWM_Start+0x208>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d013      	beq.n	800dab2 <HAL_TIM_PWM_Start+0x13e>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a3c      	ldr	r2, [pc, #240]	@ (800db80 <HAL_TIM_PWM_Start+0x20c>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d00e      	beq.n	800dab2 <HAL_TIM_PWM_Start+0x13e>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a3a      	ldr	r2, [pc, #232]	@ (800db84 <HAL_TIM_PWM_Start+0x210>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d009      	beq.n	800dab2 <HAL_TIM_PWM_Start+0x13e>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a39      	ldr	r2, [pc, #228]	@ (800db88 <HAL_TIM_PWM_Start+0x214>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d004      	beq.n	800dab2 <HAL_TIM_PWM_Start+0x13e>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a37      	ldr	r2, [pc, #220]	@ (800db8c <HAL_TIM_PWM_Start+0x218>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d101      	bne.n	800dab6 <HAL_TIM_PWM_Start+0x142>
 800dab2:	2301      	movs	r3, #1
 800dab4:	e000      	b.n	800dab8 <HAL_TIM_PWM_Start+0x144>
 800dab6:	2300      	movs	r3, #0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d007      	beq.n	800dacc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800daca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a2a      	ldr	r2, [pc, #168]	@ (800db7c <HAL_TIM_PWM_Start+0x208>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d02c      	beq.n	800db30 <HAL_TIM_PWM_Start+0x1bc>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dade:	d027      	beq.n	800db30 <HAL_TIM_PWM_Start+0x1bc>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a2a      	ldr	r2, [pc, #168]	@ (800db90 <HAL_TIM_PWM_Start+0x21c>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d022      	beq.n	800db30 <HAL_TIM_PWM_Start+0x1bc>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a29      	ldr	r2, [pc, #164]	@ (800db94 <HAL_TIM_PWM_Start+0x220>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d01d      	beq.n	800db30 <HAL_TIM_PWM_Start+0x1bc>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a27      	ldr	r2, [pc, #156]	@ (800db98 <HAL_TIM_PWM_Start+0x224>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d018      	beq.n	800db30 <HAL_TIM_PWM_Start+0x1bc>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	4a1f      	ldr	r2, [pc, #124]	@ (800db80 <HAL_TIM_PWM_Start+0x20c>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d013      	beq.n	800db30 <HAL_TIM_PWM_Start+0x1bc>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a23      	ldr	r2, [pc, #140]	@ (800db9c <HAL_TIM_PWM_Start+0x228>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d00e      	beq.n	800db30 <HAL_TIM_PWM_Start+0x1bc>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a1b      	ldr	r2, [pc, #108]	@ (800db84 <HAL_TIM_PWM_Start+0x210>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d009      	beq.n	800db30 <HAL_TIM_PWM_Start+0x1bc>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a1f      	ldr	r2, [pc, #124]	@ (800dba0 <HAL_TIM_PWM_Start+0x22c>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d004      	beq.n	800db30 <HAL_TIM_PWM_Start+0x1bc>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a1e      	ldr	r2, [pc, #120]	@ (800dba4 <HAL_TIM_PWM_Start+0x230>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d115      	bne.n	800db5c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	689a      	ldr	r2, [r3, #8]
 800db36:	4b1c      	ldr	r3, [pc, #112]	@ (800dba8 <HAL_TIM_PWM_Start+0x234>)
 800db38:	4013      	ands	r3, r2
 800db3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2b06      	cmp	r3, #6
 800db40:	d015      	beq.n	800db6e <HAL_TIM_PWM_Start+0x1fa>
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db48:	d011      	beq.n	800db6e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f042 0201 	orr.w	r2, r2, #1
 800db58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db5a:	e008      	b.n	800db6e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f042 0201 	orr.w	r2, r2, #1
 800db6a:	601a      	str	r2, [r3, #0]
 800db6c:	e000      	b.n	800db70 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db70:	2300      	movs	r3, #0
}
 800db72:	4618      	mov	r0, r3
 800db74:	3710      	adds	r7, #16
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	40010000 	.word	0x40010000
 800db80:	40010400 	.word	0x40010400
 800db84:	40014000 	.word	0x40014000
 800db88:	40014400 	.word	0x40014400
 800db8c:	40014800 	.word	0x40014800
 800db90:	40000400 	.word	0x40000400
 800db94:	40000800 	.word	0x40000800
 800db98:	40000c00 	.word	0x40000c00
 800db9c:	40001800 	.word	0x40001800
 800dba0:	4000e000 	.word	0x4000e000
 800dba4:	4000e400 	.word	0x4000e400
 800dba8:	00010007 	.word	0x00010007

0800dbac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b086      	sub	sp, #24
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d101      	bne.n	800dbca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dbc6:	2302      	movs	r3, #2
 800dbc8:	e0ff      	b.n	800ddca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2201      	movs	r2, #1
 800dbce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2b14      	cmp	r3, #20
 800dbd6:	f200 80f0 	bhi.w	800ddba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dbda:	a201      	add	r2, pc, #4	@ (adr r2, 800dbe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe0:	0800dc35 	.word	0x0800dc35
 800dbe4:	0800ddbb 	.word	0x0800ddbb
 800dbe8:	0800ddbb 	.word	0x0800ddbb
 800dbec:	0800ddbb 	.word	0x0800ddbb
 800dbf0:	0800dc75 	.word	0x0800dc75
 800dbf4:	0800ddbb 	.word	0x0800ddbb
 800dbf8:	0800ddbb 	.word	0x0800ddbb
 800dbfc:	0800ddbb 	.word	0x0800ddbb
 800dc00:	0800dcb7 	.word	0x0800dcb7
 800dc04:	0800ddbb 	.word	0x0800ddbb
 800dc08:	0800ddbb 	.word	0x0800ddbb
 800dc0c:	0800ddbb 	.word	0x0800ddbb
 800dc10:	0800dcf7 	.word	0x0800dcf7
 800dc14:	0800ddbb 	.word	0x0800ddbb
 800dc18:	0800ddbb 	.word	0x0800ddbb
 800dc1c:	0800ddbb 	.word	0x0800ddbb
 800dc20:	0800dd39 	.word	0x0800dd39
 800dc24:	0800ddbb 	.word	0x0800ddbb
 800dc28:	0800ddbb 	.word	0x0800ddbb
 800dc2c:	0800ddbb 	.word	0x0800ddbb
 800dc30:	0800dd79 	.word	0x0800dd79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	68b9      	ldr	r1, [r7, #8]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f000 fa6e 	bl	800e11c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	699a      	ldr	r2, [r3, #24]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f042 0208 	orr.w	r2, r2, #8
 800dc4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	699a      	ldr	r2, [r3, #24]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f022 0204 	bic.w	r2, r2, #4
 800dc5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	6999      	ldr	r1, [r3, #24]
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	691a      	ldr	r2, [r3, #16]
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	430a      	orrs	r2, r1
 800dc70:	619a      	str	r2, [r3, #24]
      break;
 800dc72:	e0a5      	b.n	800ddc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68b9      	ldr	r1, [r7, #8]
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f000 fade 	bl	800e23c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	699a      	ldr	r2, [r3, #24]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	699a      	ldr	r2, [r3, #24]
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dc9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	6999      	ldr	r1, [r3, #24]
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	691b      	ldr	r3, [r3, #16]
 800dcaa:	021a      	lsls	r2, r3, #8
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	430a      	orrs	r2, r1
 800dcb2:	619a      	str	r2, [r3, #24]
      break;
 800dcb4:	e084      	b.n	800ddc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	68b9      	ldr	r1, [r7, #8]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f000 fb47 	bl	800e350 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	69da      	ldr	r2, [r3, #28]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f042 0208 	orr.w	r2, r2, #8
 800dcd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	69da      	ldr	r2, [r3, #28]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f022 0204 	bic.w	r2, r2, #4
 800dce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	69d9      	ldr	r1, [r3, #28]
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	691a      	ldr	r2, [r3, #16]
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	430a      	orrs	r2, r1
 800dcf2:	61da      	str	r2, [r3, #28]
      break;
 800dcf4:	e064      	b.n	800ddc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	68b9      	ldr	r1, [r7, #8]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f000 fbaf 	bl	800e460 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	69da      	ldr	r2, [r3, #28]
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	69da      	ldr	r2, [r3, #28]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dd20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	69d9      	ldr	r1, [r3, #28]
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	691b      	ldr	r3, [r3, #16]
 800dd2c:	021a      	lsls	r2, r3, #8
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	430a      	orrs	r2, r1
 800dd34:	61da      	str	r2, [r3, #28]
      break;
 800dd36:	e043      	b.n	800ddc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	68b9      	ldr	r1, [r7, #8]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f000 fbf8 	bl	800e534 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f042 0208 	orr.w	r2, r2, #8
 800dd52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f022 0204 	bic.w	r2, r2, #4
 800dd62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	691a      	ldr	r2, [r3, #16]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	430a      	orrs	r2, r1
 800dd74:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dd76:	e023      	b.n	800ddc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	68b9      	ldr	r1, [r7, #8]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f000 fc3c 	bl	800e5fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dda2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	691b      	ldr	r3, [r3, #16]
 800ddae:	021a      	lsls	r2, r3, #8
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	430a      	orrs	r2, r1
 800ddb6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ddb8:	e002      	b.n	800ddc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	75fb      	strb	r3, [r7, #23]
      break;
 800ddbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ddc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3718      	adds	r7, #24
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop

0800ddd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ddde:	2300      	movs	r3, #0
 800dde0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d101      	bne.n	800ddf0 <HAL_TIM_ConfigClockSource+0x1c>
 800ddec:	2302      	movs	r3, #2
 800ddee:	e0dc      	b.n	800dfaa <HAL_TIM_ConfigClockSource+0x1d6>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2202      	movs	r2, #2
 800ddfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800de08:	68ba      	ldr	r2, [r7, #8]
 800de0a:	4b6a      	ldr	r3, [pc, #424]	@ (800dfb4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800de0c:	4013      	ands	r3, r2
 800de0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	68ba      	ldr	r2, [r7, #8]
 800de1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a64      	ldr	r2, [pc, #400]	@ (800dfb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800de26:	4293      	cmp	r3, r2
 800de28:	f000 80a9 	beq.w	800df7e <HAL_TIM_ConfigClockSource+0x1aa>
 800de2c:	4a62      	ldr	r2, [pc, #392]	@ (800dfb8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	f200 80ae 	bhi.w	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
 800de34:	4a61      	ldr	r2, [pc, #388]	@ (800dfbc <HAL_TIM_ConfigClockSource+0x1e8>)
 800de36:	4293      	cmp	r3, r2
 800de38:	f000 80a1 	beq.w	800df7e <HAL_TIM_ConfigClockSource+0x1aa>
 800de3c:	4a5f      	ldr	r2, [pc, #380]	@ (800dfbc <HAL_TIM_ConfigClockSource+0x1e8>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	f200 80a6 	bhi.w	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
 800de44:	4a5e      	ldr	r2, [pc, #376]	@ (800dfc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800de46:	4293      	cmp	r3, r2
 800de48:	f000 8099 	beq.w	800df7e <HAL_TIM_ConfigClockSource+0x1aa>
 800de4c:	4a5c      	ldr	r2, [pc, #368]	@ (800dfc0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	f200 809e 	bhi.w	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
 800de54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800de58:	f000 8091 	beq.w	800df7e <HAL_TIM_ConfigClockSource+0x1aa>
 800de5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800de60:	f200 8096 	bhi.w	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
 800de64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de68:	f000 8089 	beq.w	800df7e <HAL_TIM_ConfigClockSource+0x1aa>
 800de6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de70:	f200 808e 	bhi.w	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
 800de74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de78:	d03e      	beq.n	800def8 <HAL_TIM_ConfigClockSource+0x124>
 800de7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de7e:	f200 8087 	bhi.w	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
 800de82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de86:	f000 8086 	beq.w	800df96 <HAL_TIM_ConfigClockSource+0x1c2>
 800de8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de8e:	d87f      	bhi.n	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
 800de90:	2b70      	cmp	r3, #112	@ 0x70
 800de92:	d01a      	beq.n	800deca <HAL_TIM_ConfigClockSource+0xf6>
 800de94:	2b70      	cmp	r3, #112	@ 0x70
 800de96:	d87b      	bhi.n	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
 800de98:	2b60      	cmp	r3, #96	@ 0x60
 800de9a:	d050      	beq.n	800df3e <HAL_TIM_ConfigClockSource+0x16a>
 800de9c:	2b60      	cmp	r3, #96	@ 0x60
 800de9e:	d877      	bhi.n	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
 800dea0:	2b50      	cmp	r3, #80	@ 0x50
 800dea2:	d03c      	beq.n	800df1e <HAL_TIM_ConfigClockSource+0x14a>
 800dea4:	2b50      	cmp	r3, #80	@ 0x50
 800dea6:	d873      	bhi.n	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
 800dea8:	2b40      	cmp	r3, #64	@ 0x40
 800deaa:	d058      	beq.n	800df5e <HAL_TIM_ConfigClockSource+0x18a>
 800deac:	2b40      	cmp	r3, #64	@ 0x40
 800deae:	d86f      	bhi.n	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
 800deb0:	2b30      	cmp	r3, #48	@ 0x30
 800deb2:	d064      	beq.n	800df7e <HAL_TIM_ConfigClockSource+0x1aa>
 800deb4:	2b30      	cmp	r3, #48	@ 0x30
 800deb6:	d86b      	bhi.n	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
 800deb8:	2b20      	cmp	r3, #32
 800deba:	d060      	beq.n	800df7e <HAL_TIM_ConfigClockSource+0x1aa>
 800debc:	2b20      	cmp	r3, #32
 800debe:	d867      	bhi.n	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d05c      	beq.n	800df7e <HAL_TIM_ConfigClockSource+0x1aa>
 800dec4:	2b10      	cmp	r3, #16
 800dec6:	d05a      	beq.n	800df7e <HAL_TIM_ConfigClockSource+0x1aa>
 800dec8:	e062      	b.n	800df90 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800deda:	f000 fc73 	bl	800e7c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800deec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	68ba      	ldr	r2, [r7, #8]
 800def4:	609a      	str	r2, [r3, #8]
      break;
 800def6:	e04f      	b.n	800df98 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800df08:	f000 fc5c 	bl	800e7c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	689a      	ldr	r2, [r3, #8]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800df1a:	609a      	str	r2, [r3, #8]
      break;
 800df1c:	e03c      	b.n	800df98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800df2a:	461a      	mov	r2, r3
 800df2c:	f000 fbcc 	bl	800e6c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	2150      	movs	r1, #80	@ 0x50
 800df36:	4618      	mov	r0, r3
 800df38:	f000 fc26 	bl	800e788 <TIM_ITRx_SetConfig>
      break;
 800df3c:	e02c      	b.n	800df98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800df4a:	461a      	mov	r2, r3
 800df4c:	f000 fbeb 	bl	800e726 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2160      	movs	r1, #96	@ 0x60
 800df56:	4618      	mov	r0, r3
 800df58:	f000 fc16 	bl	800e788 <TIM_ITRx_SetConfig>
      break;
 800df5c:	e01c      	b.n	800df98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800df6a:	461a      	mov	r2, r3
 800df6c:	f000 fbac 	bl	800e6c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2140      	movs	r1, #64	@ 0x40
 800df76:	4618      	mov	r0, r3
 800df78:	f000 fc06 	bl	800e788 <TIM_ITRx_SetConfig>
      break;
 800df7c:	e00c      	b.n	800df98 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4619      	mov	r1, r3
 800df88:	4610      	mov	r0, r2
 800df8a:	f000 fbfd 	bl	800e788 <TIM_ITRx_SetConfig>
      break;
 800df8e:	e003      	b.n	800df98 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800df90:	2301      	movs	r3, #1
 800df92:	73fb      	strb	r3, [r7, #15]
      break;
 800df94:	e000      	b.n	800df98 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800df96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2201      	movs	r2, #1
 800df9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dfa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3710      	adds	r7, #16
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	ffceff88 	.word	0xffceff88
 800dfb8:	00100040 	.word	0x00100040
 800dfbc:	00100030 	.word	0x00100030
 800dfc0:	00100020 	.word	0x00100020

0800dfc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4a47      	ldr	r2, [pc, #284]	@ (800e0f4 <TIM_Base_SetConfig+0x130>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d013      	beq.n	800e004 <TIM_Base_SetConfig+0x40>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfe2:	d00f      	beq.n	800e004 <TIM_Base_SetConfig+0x40>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	4a44      	ldr	r2, [pc, #272]	@ (800e0f8 <TIM_Base_SetConfig+0x134>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d00b      	beq.n	800e004 <TIM_Base_SetConfig+0x40>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	4a43      	ldr	r2, [pc, #268]	@ (800e0fc <TIM_Base_SetConfig+0x138>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d007      	beq.n	800e004 <TIM_Base_SetConfig+0x40>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a42      	ldr	r2, [pc, #264]	@ (800e100 <TIM_Base_SetConfig+0x13c>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d003      	beq.n	800e004 <TIM_Base_SetConfig+0x40>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	4a41      	ldr	r2, [pc, #260]	@ (800e104 <TIM_Base_SetConfig+0x140>)
 800e000:	4293      	cmp	r3, r2
 800e002:	d108      	bne.n	800e016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e00a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	68fa      	ldr	r2, [r7, #12]
 800e012:	4313      	orrs	r3, r2
 800e014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4a36      	ldr	r2, [pc, #216]	@ (800e0f4 <TIM_Base_SetConfig+0x130>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d027      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e024:	d023      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	4a33      	ldr	r2, [pc, #204]	@ (800e0f8 <TIM_Base_SetConfig+0x134>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d01f      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4a32      	ldr	r2, [pc, #200]	@ (800e0fc <TIM_Base_SetConfig+0x138>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d01b      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4a31      	ldr	r2, [pc, #196]	@ (800e100 <TIM_Base_SetConfig+0x13c>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d017      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4a30      	ldr	r2, [pc, #192]	@ (800e104 <TIM_Base_SetConfig+0x140>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d013      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4a2f      	ldr	r2, [pc, #188]	@ (800e108 <TIM_Base_SetConfig+0x144>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d00f      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4a2e      	ldr	r2, [pc, #184]	@ (800e10c <TIM_Base_SetConfig+0x148>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d00b      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	4a2d      	ldr	r2, [pc, #180]	@ (800e110 <TIM_Base_SetConfig+0x14c>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d007      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4a2c      	ldr	r2, [pc, #176]	@ (800e114 <TIM_Base_SetConfig+0x150>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d003      	beq.n	800e06e <TIM_Base_SetConfig+0xaa>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4a2b      	ldr	r2, [pc, #172]	@ (800e118 <TIM_Base_SetConfig+0x154>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d108      	bne.n	800e080 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	4313      	orrs	r3, r2
 800e07e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	695b      	ldr	r3, [r3, #20]
 800e08a:	4313      	orrs	r3, r2
 800e08c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	689a      	ldr	r2, [r3, #8]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	4a14      	ldr	r2, [pc, #80]	@ (800e0f4 <TIM_Base_SetConfig+0x130>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d00f      	beq.n	800e0c6 <TIM_Base_SetConfig+0x102>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	4a16      	ldr	r2, [pc, #88]	@ (800e104 <TIM_Base_SetConfig+0x140>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d00b      	beq.n	800e0c6 <TIM_Base_SetConfig+0x102>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4a15      	ldr	r2, [pc, #84]	@ (800e108 <TIM_Base_SetConfig+0x144>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d007      	beq.n	800e0c6 <TIM_Base_SetConfig+0x102>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4a14      	ldr	r2, [pc, #80]	@ (800e10c <TIM_Base_SetConfig+0x148>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d003      	beq.n	800e0c6 <TIM_Base_SetConfig+0x102>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4a13      	ldr	r2, [pc, #76]	@ (800e110 <TIM_Base_SetConfig+0x14c>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d103      	bne.n	800e0ce <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	691a      	ldr	r2, [r3, #16]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f043 0204 	orr.w	r2, r3, #4
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	601a      	str	r2, [r3, #0]
}
 800e0e6:	bf00      	nop
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	40010000 	.word	0x40010000
 800e0f8:	40000400 	.word	0x40000400
 800e0fc:	40000800 	.word	0x40000800
 800e100:	40000c00 	.word	0x40000c00
 800e104:	40010400 	.word	0x40010400
 800e108:	40014000 	.word	0x40014000
 800e10c:	40014400 	.word	0x40014400
 800e110:	40014800 	.word	0x40014800
 800e114:	4000e000 	.word	0x4000e000
 800e118:	4000e400 	.word	0x4000e400

0800e11c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b087      	sub	sp, #28
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6a1b      	ldr	r3, [r3, #32]
 800e12a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6a1b      	ldr	r3, [r3, #32]
 800e130:	f023 0201 	bic.w	r2, r3, #1
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	699b      	ldr	r3, [r3, #24]
 800e142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	4b37      	ldr	r3, [pc, #220]	@ (800e224 <TIM_OC1_SetConfig+0x108>)
 800e148:	4013      	ands	r3, r2
 800e14a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f023 0303 	bic.w	r3, r3, #3
 800e152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	4313      	orrs	r3, r2
 800e15c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	f023 0302 	bic.w	r3, r3, #2
 800e164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	697a      	ldr	r2, [r7, #20]
 800e16c:	4313      	orrs	r3, r2
 800e16e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	4a2d      	ldr	r2, [pc, #180]	@ (800e228 <TIM_OC1_SetConfig+0x10c>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d00f      	beq.n	800e198 <TIM_OC1_SetConfig+0x7c>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	4a2c      	ldr	r2, [pc, #176]	@ (800e22c <TIM_OC1_SetConfig+0x110>)
 800e17c:	4293      	cmp	r3, r2
 800e17e:	d00b      	beq.n	800e198 <TIM_OC1_SetConfig+0x7c>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	4a2b      	ldr	r2, [pc, #172]	@ (800e230 <TIM_OC1_SetConfig+0x114>)
 800e184:	4293      	cmp	r3, r2
 800e186:	d007      	beq.n	800e198 <TIM_OC1_SetConfig+0x7c>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4a2a      	ldr	r2, [pc, #168]	@ (800e234 <TIM_OC1_SetConfig+0x118>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d003      	beq.n	800e198 <TIM_OC1_SetConfig+0x7c>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4a29      	ldr	r2, [pc, #164]	@ (800e238 <TIM_OC1_SetConfig+0x11c>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d10c      	bne.n	800e1b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	f023 0308 	bic.w	r3, r3, #8
 800e19e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	697a      	ldr	r2, [r7, #20]
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	f023 0304 	bic.w	r3, r3, #4
 800e1b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	4a1c      	ldr	r2, [pc, #112]	@ (800e228 <TIM_OC1_SetConfig+0x10c>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d00f      	beq.n	800e1da <TIM_OC1_SetConfig+0xbe>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4a1b      	ldr	r2, [pc, #108]	@ (800e22c <TIM_OC1_SetConfig+0x110>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d00b      	beq.n	800e1da <TIM_OC1_SetConfig+0xbe>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	4a1a      	ldr	r2, [pc, #104]	@ (800e230 <TIM_OC1_SetConfig+0x114>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d007      	beq.n	800e1da <TIM_OC1_SetConfig+0xbe>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	4a19      	ldr	r2, [pc, #100]	@ (800e234 <TIM_OC1_SetConfig+0x118>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d003      	beq.n	800e1da <TIM_OC1_SetConfig+0xbe>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	4a18      	ldr	r2, [pc, #96]	@ (800e238 <TIM_OC1_SetConfig+0x11c>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d111      	bne.n	800e1fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e1e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e1e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	695b      	ldr	r3, [r3, #20]
 800e1ee:	693a      	ldr	r2, [r7, #16]
 800e1f0:	4313      	orrs	r3, r2
 800e1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	699b      	ldr	r3, [r3, #24]
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	693a      	ldr	r2, [r7, #16]
 800e202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	68fa      	ldr	r2, [r7, #12]
 800e208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	697a      	ldr	r2, [r7, #20]
 800e216:	621a      	str	r2, [r3, #32]
}
 800e218:	bf00      	nop
 800e21a:	371c      	adds	r7, #28
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr
 800e224:	fffeff8f 	.word	0xfffeff8f
 800e228:	40010000 	.word	0x40010000
 800e22c:	40010400 	.word	0x40010400
 800e230:	40014000 	.word	0x40014000
 800e234:	40014400 	.word	0x40014400
 800e238:	40014800 	.word	0x40014800

0800e23c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b087      	sub	sp, #28
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6a1b      	ldr	r3, [r3, #32]
 800e24a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6a1b      	ldr	r3, [r3, #32]
 800e250:	f023 0210 	bic.w	r2, r3, #16
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	699b      	ldr	r3, [r3, #24]
 800e262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	4b34      	ldr	r3, [pc, #208]	@ (800e338 <TIM_OC2_SetConfig+0xfc>)
 800e268:	4013      	ands	r3, r2
 800e26a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	021b      	lsls	r3, r3, #8
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	4313      	orrs	r3, r2
 800e27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	f023 0320 	bic.w	r3, r3, #32
 800e286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	011b      	lsls	r3, r3, #4
 800e28e:	697a      	ldr	r2, [r7, #20]
 800e290:	4313      	orrs	r3, r2
 800e292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	4a29      	ldr	r2, [pc, #164]	@ (800e33c <TIM_OC2_SetConfig+0x100>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d003      	beq.n	800e2a4 <TIM_OC2_SetConfig+0x68>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	4a28      	ldr	r2, [pc, #160]	@ (800e340 <TIM_OC2_SetConfig+0x104>)
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d10d      	bne.n	800e2c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e2aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	011b      	lsls	r3, r3, #4
 800e2b2:	697a      	ldr	r2, [r7, #20]
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e2be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4a1e      	ldr	r2, [pc, #120]	@ (800e33c <TIM_OC2_SetConfig+0x100>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d00f      	beq.n	800e2e8 <TIM_OC2_SetConfig+0xac>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	4a1d      	ldr	r2, [pc, #116]	@ (800e340 <TIM_OC2_SetConfig+0x104>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d00b      	beq.n	800e2e8 <TIM_OC2_SetConfig+0xac>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	4a1c      	ldr	r2, [pc, #112]	@ (800e344 <TIM_OC2_SetConfig+0x108>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d007      	beq.n	800e2e8 <TIM_OC2_SetConfig+0xac>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4a1b      	ldr	r2, [pc, #108]	@ (800e348 <TIM_OC2_SetConfig+0x10c>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d003      	beq.n	800e2e8 <TIM_OC2_SetConfig+0xac>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	4a1a      	ldr	r2, [pc, #104]	@ (800e34c <TIM_OC2_SetConfig+0x110>)
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d113      	bne.n	800e310 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e2ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e2f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	695b      	ldr	r3, [r3, #20]
 800e2fc:	009b      	lsls	r3, r3, #2
 800e2fe:	693a      	ldr	r2, [r7, #16]
 800e300:	4313      	orrs	r3, r2
 800e302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	699b      	ldr	r3, [r3, #24]
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	693a      	ldr	r2, [r7, #16]
 800e30c:	4313      	orrs	r3, r2
 800e30e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	693a      	ldr	r2, [r7, #16]
 800e314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	68fa      	ldr	r2, [r7, #12]
 800e31a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	685a      	ldr	r2, [r3, #4]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	697a      	ldr	r2, [r7, #20]
 800e328:	621a      	str	r2, [r3, #32]
}
 800e32a:	bf00      	nop
 800e32c:	371c      	adds	r7, #28
 800e32e:	46bd      	mov	sp, r7
 800e330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e334:	4770      	bx	lr
 800e336:	bf00      	nop
 800e338:	feff8fff 	.word	0xfeff8fff
 800e33c:	40010000 	.word	0x40010000
 800e340:	40010400 	.word	0x40010400
 800e344:	40014000 	.word	0x40014000
 800e348:	40014400 	.word	0x40014400
 800e34c:	40014800 	.word	0x40014800

0800e350 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e350:	b480      	push	{r7}
 800e352:	b087      	sub	sp, #28
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6a1b      	ldr	r3, [r3, #32]
 800e364:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	69db      	ldr	r3, [r3, #28]
 800e376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	4b33      	ldr	r3, [pc, #204]	@ (800e448 <TIM_OC3_SetConfig+0xf8>)
 800e37c:	4013      	ands	r3, r2
 800e37e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f023 0303 	bic.w	r3, r3, #3
 800e386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	68fa      	ldr	r2, [r7, #12]
 800e38e:	4313      	orrs	r3, r2
 800e390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	689b      	ldr	r3, [r3, #8]
 800e39e:	021b      	lsls	r3, r3, #8
 800e3a0:	697a      	ldr	r2, [r7, #20]
 800e3a2:	4313      	orrs	r3, r2
 800e3a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4a28      	ldr	r2, [pc, #160]	@ (800e44c <TIM_OC3_SetConfig+0xfc>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d003      	beq.n	800e3b6 <TIM_OC3_SetConfig+0x66>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4a27      	ldr	r2, [pc, #156]	@ (800e450 <TIM_OC3_SetConfig+0x100>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d10d      	bne.n	800e3d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e3bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	021b      	lsls	r3, r3, #8
 800e3c4:	697a      	ldr	r2, [r7, #20]
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e3d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	4a1d      	ldr	r2, [pc, #116]	@ (800e44c <TIM_OC3_SetConfig+0xfc>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d00f      	beq.n	800e3fa <TIM_OC3_SetConfig+0xaa>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4a1c      	ldr	r2, [pc, #112]	@ (800e450 <TIM_OC3_SetConfig+0x100>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d00b      	beq.n	800e3fa <TIM_OC3_SetConfig+0xaa>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	4a1b      	ldr	r2, [pc, #108]	@ (800e454 <TIM_OC3_SetConfig+0x104>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d007      	beq.n	800e3fa <TIM_OC3_SetConfig+0xaa>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	4a1a      	ldr	r2, [pc, #104]	@ (800e458 <TIM_OC3_SetConfig+0x108>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d003      	beq.n	800e3fa <TIM_OC3_SetConfig+0xaa>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	4a19      	ldr	r2, [pc, #100]	@ (800e45c <TIM_OC3_SetConfig+0x10c>)
 800e3f6:	4293      	cmp	r3, r2
 800e3f8:	d113      	bne.n	800e422 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	695b      	ldr	r3, [r3, #20]
 800e40e:	011b      	lsls	r3, r3, #4
 800e410:	693a      	ldr	r2, [r7, #16]
 800e412:	4313      	orrs	r3, r2
 800e414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	699b      	ldr	r3, [r3, #24]
 800e41a:	011b      	lsls	r3, r3, #4
 800e41c:	693a      	ldr	r2, [r7, #16]
 800e41e:	4313      	orrs	r3, r2
 800e420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	693a      	ldr	r2, [r7, #16]
 800e426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	685a      	ldr	r2, [r3, #4]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	697a      	ldr	r2, [r7, #20]
 800e43a:	621a      	str	r2, [r3, #32]
}
 800e43c:	bf00      	nop
 800e43e:	371c      	adds	r7, #28
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr
 800e448:	fffeff8f 	.word	0xfffeff8f
 800e44c:	40010000 	.word	0x40010000
 800e450:	40010400 	.word	0x40010400
 800e454:	40014000 	.word	0x40014000
 800e458:	40014400 	.word	0x40014400
 800e45c:	40014800 	.word	0x40014800

0800e460 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e460:	b480      	push	{r7}
 800e462:	b087      	sub	sp, #28
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a1b      	ldr	r3, [r3, #32]
 800e46e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6a1b      	ldr	r3, [r3, #32]
 800e474:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	69db      	ldr	r3, [r3, #28]
 800e486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	4b24      	ldr	r3, [pc, #144]	@ (800e51c <TIM_OC4_SetConfig+0xbc>)
 800e48c:	4013      	ands	r3, r2
 800e48e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	021b      	lsls	r3, r3, #8
 800e49e:	68fa      	ldr	r2, [r7, #12]
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e4aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	031b      	lsls	r3, r3, #12
 800e4b2:	693a      	ldr	r2, [r7, #16]
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4a19      	ldr	r2, [pc, #100]	@ (800e520 <TIM_OC4_SetConfig+0xc0>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d00f      	beq.n	800e4e0 <TIM_OC4_SetConfig+0x80>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	4a18      	ldr	r2, [pc, #96]	@ (800e524 <TIM_OC4_SetConfig+0xc4>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d00b      	beq.n	800e4e0 <TIM_OC4_SetConfig+0x80>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	4a17      	ldr	r2, [pc, #92]	@ (800e528 <TIM_OC4_SetConfig+0xc8>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d007      	beq.n	800e4e0 <TIM_OC4_SetConfig+0x80>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	4a16      	ldr	r2, [pc, #88]	@ (800e52c <TIM_OC4_SetConfig+0xcc>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d003      	beq.n	800e4e0 <TIM_OC4_SetConfig+0x80>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4a15      	ldr	r2, [pc, #84]	@ (800e530 <TIM_OC4_SetConfig+0xd0>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d109      	bne.n	800e4f4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e4e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	695b      	ldr	r3, [r3, #20]
 800e4ec:	019b      	lsls	r3, r3, #6
 800e4ee:	697a      	ldr	r2, [r7, #20]
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	697a      	ldr	r2, [r7, #20]
 800e4f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	68fa      	ldr	r2, [r7, #12]
 800e4fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	685a      	ldr	r2, [r3, #4]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	693a      	ldr	r2, [r7, #16]
 800e50c:	621a      	str	r2, [r3, #32]
}
 800e50e:	bf00      	nop
 800e510:	371c      	adds	r7, #28
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr
 800e51a:	bf00      	nop
 800e51c:	feff8fff 	.word	0xfeff8fff
 800e520:	40010000 	.word	0x40010000
 800e524:	40010400 	.word	0x40010400
 800e528:	40014000 	.word	0x40014000
 800e52c:	40014400 	.word	0x40014400
 800e530:	40014800 	.word	0x40014800

0800e534 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e534:	b480      	push	{r7}
 800e536:	b087      	sub	sp, #28
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6a1b      	ldr	r3, [r3, #32]
 800e542:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6a1b      	ldr	r3, [r3, #32]
 800e548:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e55c:	68fa      	ldr	r2, [r7, #12]
 800e55e:	4b21      	ldr	r3, [pc, #132]	@ (800e5e4 <TIM_OC5_SetConfig+0xb0>)
 800e560:	4013      	ands	r3, r2
 800e562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	68fa      	ldr	r2, [r7, #12]
 800e56a:	4313      	orrs	r3, r2
 800e56c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e574:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	689b      	ldr	r3, [r3, #8]
 800e57a:	041b      	lsls	r3, r3, #16
 800e57c:	693a      	ldr	r2, [r7, #16]
 800e57e:	4313      	orrs	r3, r2
 800e580:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	4a18      	ldr	r2, [pc, #96]	@ (800e5e8 <TIM_OC5_SetConfig+0xb4>)
 800e586:	4293      	cmp	r3, r2
 800e588:	d00f      	beq.n	800e5aa <TIM_OC5_SetConfig+0x76>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4a17      	ldr	r2, [pc, #92]	@ (800e5ec <TIM_OC5_SetConfig+0xb8>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d00b      	beq.n	800e5aa <TIM_OC5_SetConfig+0x76>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	4a16      	ldr	r2, [pc, #88]	@ (800e5f0 <TIM_OC5_SetConfig+0xbc>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d007      	beq.n	800e5aa <TIM_OC5_SetConfig+0x76>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	4a15      	ldr	r2, [pc, #84]	@ (800e5f4 <TIM_OC5_SetConfig+0xc0>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d003      	beq.n	800e5aa <TIM_OC5_SetConfig+0x76>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	4a14      	ldr	r2, [pc, #80]	@ (800e5f8 <TIM_OC5_SetConfig+0xc4>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d109      	bne.n	800e5be <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e5b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	695b      	ldr	r3, [r3, #20]
 800e5b6:	021b      	lsls	r3, r3, #8
 800e5b8:	697a      	ldr	r2, [r7, #20]
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	697a      	ldr	r2, [r7, #20]
 800e5c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	68fa      	ldr	r2, [r7, #12]
 800e5c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	685a      	ldr	r2, [r3, #4]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	693a      	ldr	r2, [r7, #16]
 800e5d6:	621a      	str	r2, [r3, #32]
}
 800e5d8:	bf00      	nop
 800e5da:	371c      	adds	r7, #28
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e2:	4770      	bx	lr
 800e5e4:	fffeff8f 	.word	0xfffeff8f
 800e5e8:	40010000 	.word	0x40010000
 800e5ec:	40010400 	.word	0x40010400
 800e5f0:	40014000 	.word	0x40014000
 800e5f4:	40014400 	.word	0x40014400
 800e5f8:	40014800 	.word	0x40014800

0800e5fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b087      	sub	sp, #28
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6a1b      	ldr	r3, [r3, #32]
 800e60a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6a1b      	ldr	r3, [r3, #32]
 800e610:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e624:	68fa      	ldr	r2, [r7, #12]
 800e626:	4b22      	ldr	r3, [pc, #136]	@ (800e6b0 <TIM_OC6_SetConfig+0xb4>)
 800e628:	4013      	ands	r3, r2
 800e62a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	021b      	lsls	r3, r3, #8
 800e632:	68fa      	ldr	r2, [r7, #12]
 800e634:	4313      	orrs	r3, r2
 800e636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e63e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	051b      	lsls	r3, r3, #20
 800e646:	693a      	ldr	r2, [r7, #16]
 800e648:	4313      	orrs	r3, r2
 800e64a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a19      	ldr	r2, [pc, #100]	@ (800e6b4 <TIM_OC6_SetConfig+0xb8>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d00f      	beq.n	800e674 <TIM_OC6_SetConfig+0x78>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4a18      	ldr	r2, [pc, #96]	@ (800e6b8 <TIM_OC6_SetConfig+0xbc>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d00b      	beq.n	800e674 <TIM_OC6_SetConfig+0x78>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4a17      	ldr	r2, [pc, #92]	@ (800e6bc <TIM_OC6_SetConfig+0xc0>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d007      	beq.n	800e674 <TIM_OC6_SetConfig+0x78>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	4a16      	ldr	r2, [pc, #88]	@ (800e6c0 <TIM_OC6_SetConfig+0xc4>)
 800e668:	4293      	cmp	r3, r2
 800e66a:	d003      	beq.n	800e674 <TIM_OC6_SetConfig+0x78>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4a15      	ldr	r2, [pc, #84]	@ (800e6c4 <TIM_OC6_SetConfig+0xc8>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d109      	bne.n	800e688 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e67a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	695b      	ldr	r3, [r3, #20]
 800e680:	029b      	lsls	r3, r3, #10
 800e682:	697a      	ldr	r2, [r7, #20]
 800e684:	4313      	orrs	r3, r2
 800e686:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	697a      	ldr	r2, [r7, #20]
 800e68c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	68fa      	ldr	r2, [r7, #12]
 800e692:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	685a      	ldr	r2, [r3, #4]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	693a      	ldr	r2, [r7, #16]
 800e6a0:	621a      	str	r2, [r3, #32]
}
 800e6a2:	bf00      	nop
 800e6a4:	371c      	adds	r7, #28
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop
 800e6b0:	feff8fff 	.word	0xfeff8fff
 800e6b4:	40010000 	.word	0x40010000
 800e6b8:	40010400 	.word	0x40010400
 800e6bc:	40014000 	.word	0x40014000
 800e6c0:	40014400 	.word	0x40014400
 800e6c4:	40014800 	.word	0x40014800

0800e6c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b087      	sub	sp, #28
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6a1b      	ldr	r3, [r3, #32]
 800e6d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	6a1b      	ldr	r3, [r3, #32]
 800e6de:	f023 0201 	bic.w	r2, r3, #1
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	699b      	ldr	r3, [r3, #24]
 800e6ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e6f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	011b      	lsls	r3, r3, #4
 800e6f8:	693a      	ldr	r2, [r7, #16]
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	f023 030a 	bic.w	r3, r3, #10
 800e704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e706:	697a      	ldr	r2, [r7, #20]
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	4313      	orrs	r3, r2
 800e70c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	693a      	ldr	r2, [r7, #16]
 800e712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	697a      	ldr	r2, [r7, #20]
 800e718:	621a      	str	r2, [r3, #32]
}
 800e71a:	bf00      	nop
 800e71c:	371c      	adds	r7, #28
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr

0800e726 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e726:	b480      	push	{r7}
 800e728:	b087      	sub	sp, #28
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	60f8      	str	r0, [r7, #12]
 800e72e:	60b9      	str	r1, [r7, #8]
 800e730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6a1b      	ldr	r3, [r3, #32]
 800e736:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6a1b      	ldr	r3, [r3, #32]
 800e73c:	f023 0210 	bic.w	r2, r3, #16
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	699b      	ldr	r3, [r3, #24]
 800e748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e750:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	031b      	lsls	r3, r3, #12
 800e756:	693a      	ldr	r2, [r7, #16]
 800e758:	4313      	orrs	r3, r2
 800e75a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e762:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	011b      	lsls	r3, r3, #4
 800e768:	697a      	ldr	r2, [r7, #20]
 800e76a:	4313      	orrs	r3, r2
 800e76c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	693a      	ldr	r2, [r7, #16]
 800e772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	697a      	ldr	r2, [r7, #20]
 800e778:	621a      	str	r2, [r3, #32]
}
 800e77a:	bf00      	nop
 800e77c:	371c      	adds	r7, #28
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
	...

0800e788 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e788:	b480      	push	{r7}
 800e78a:	b085      	sub	sp, #20
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	689b      	ldr	r3, [r3, #8]
 800e796:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e798:	68fa      	ldr	r2, [r7, #12]
 800e79a:	4b09      	ldr	r3, [pc, #36]	@ (800e7c0 <TIM_ITRx_SetConfig+0x38>)
 800e79c:	4013      	ands	r3, r2
 800e79e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e7a0:	683a      	ldr	r2, [r7, #0]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	f043 0307 	orr.w	r3, r3, #7
 800e7aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	68fa      	ldr	r2, [r7, #12]
 800e7b0:	609a      	str	r2, [r3, #8]
}
 800e7b2:	bf00      	nop
 800e7b4:	3714      	adds	r7, #20
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	ffcfff8f 	.word	0xffcfff8f

0800e7c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b087      	sub	sp, #28
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
 800e7d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e7de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	021a      	lsls	r2, r3, #8
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	431a      	orrs	r2, r3
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	697a      	ldr	r2, [r7, #20]
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	697a      	ldr	r2, [r7, #20]
 800e7f6:	609a      	str	r2, [r3, #8]
}
 800e7f8:	bf00      	nop
 800e7fa:	371c      	adds	r7, #28
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e804:	b480      	push	{r7}
 800e806:	b087      	sub	sp, #28
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	f003 031f 	and.w	r3, r3, #31
 800e816:	2201      	movs	r2, #1
 800e818:	fa02 f303 	lsl.w	r3, r2, r3
 800e81c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	6a1a      	ldr	r2, [r3, #32]
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	43db      	mvns	r3, r3
 800e826:	401a      	ands	r2, r3
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	6a1a      	ldr	r2, [r3, #32]
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	f003 031f 	and.w	r3, r3, #31
 800e836:	6879      	ldr	r1, [r7, #4]
 800e838:	fa01 f303 	lsl.w	r3, r1, r3
 800e83c:	431a      	orrs	r2, r3
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	621a      	str	r2, [r3, #32]
}
 800e842:	bf00      	nop
 800e844:	371c      	adds	r7, #28
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr
	...

0800e850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e850:	b480      	push	{r7}
 800e852:	b085      	sub	sp, #20
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e860:	2b01      	cmp	r3, #1
 800e862:	d101      	bne.n	800e868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e864:	2302      	movs	r3, #2
 800e866:	e077      	b.n	800e958 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2201      	movs	r2, #1
 800e86c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2202      	movs	r2, #2
 800e874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4a35      	ldr	r2, [pc, #212]	@ (800e964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d004      	beq.n	800e89c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4a34      	ldr	r2, [pc, #208]	@ (800e968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d108      	bne.n	800e8ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e8a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	68fa      	ldr	r2, [r7, #12]
 800e8aa:	4313      	orrs	r3, r2
 800e8ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	68fa      	ldr	r2, [r7, #12]
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	68fa      	ldr	r2, [r7, #12]
 800e8c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4a25      	ldr	r2, [pc, #148]	@ (800e964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e8ce:	4293      	cmp	r3, r2
 800e8d0:	d02c      	beq.n	800e92c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8da:	d027      	beq.n	800e92c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4a22      	ldr	r2, [pc, #136]	@ (800e96c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d022      	beq.n	800e92c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4a21      	ldr	r2, [pc, #132]	@ (800e970 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d01d      	beq.n	800e92c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4a1f      	ldr	r2, [pc, #124]	@ (800e974 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d018      	beq.n	800e92c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	4a1a      	ldr	r2, [pc, #104]	@ (800e968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e900:	4293      	cmp	r3, r2
 800e902:	d013      	beq.n	800e92c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	4a1b      	ldr	r2, [pc, #108]	@ (800e978 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d00e      	beq.n	800e92c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	4a1a      	ldr	r2, [pc, #104]	@ (800e97c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e914:	4293      	cmp	r3, r2
 800e916:	d009      	beq.n	800e92c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4a18      	ldr	r2, [pc, #96]	@ (800e980 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d004      	beq.n	800e92c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	4a17      	ldr	r2, [pc, #92]	@ (800e984 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e928:	4293      	cmp	r3, r2
 800e92a:	d10c      	bne.n	800e946 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e932:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	68ba      	ldr	r2, [r7, #8]
 800e93a:	4313      	orrs	r3, r2
 800e93c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	68ba      	ldr	r2, [r7, #8]
 800e944:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2201      	movs	r2, #1
 800e94a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3714      	adds	r7, #20
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr
 800e964:	40010000 	.word	0x40010000
 800e968:	40010400 	.word	0x40010400
 800e96c:	40000400 	.word	0x40000400
 800e970:	40000800 	.word	0x40000800
 800e974:	40000c00 	.word	0x40000c00
 800e978:	40001800 	.word	0x40001800
 800e97c:	40014000 	.word	0x40014000
 800e980:	4000e000 	.word	0x4000e000
 800e984:	4000e400 	.word	0x4000e400

0800e988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d101      	bne.n	800e99a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e996:	2301      	movs	r3, #1
 800e998:	e042      	b.n	800ea20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d106      	bne.n	800e9b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f7f3 fa9d 	bl	8001eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2224      	movs	r2, #36	@ 0x24
 800e9b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f022 0201 	bic.w	r2, r2, #1
 800e9c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d002      	beq.n	800e9d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f000 ff22 	bl	800f81c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 f8b3 	bl	800eb44 <UART_SetConfig>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d101      	bne.n	800e9e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	e01b      	b.n	800ea20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	685a      	ldr	r2, [r3, #4]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e9f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	689a      	ldr	r2, [r3, #8]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ea06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f042 0201 	orr.w	r2, r2, #1
 800ea16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 ffa1 	bl	800f960 <UART_CheckIdleState>
 800ea1e:	4603      	mov	r3, r0
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b08a      	sub	sp, #40	@ 0x28
 800ea2c:	af02      	add	r7, sp, #8
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	60b9      	str	r1, [r7, #8]
 800ea32:	603b      	str	r3, [r7, #0]
 800ea34:	4613      	mov	r3, r2
 800ea36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea3e:	2b20      	cmp	r3, #32
 800ea40:	d17b      	bne.n	800eb3a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d002      	beq.n	800ea4e <HAL_UART_Transmit+0x26>
 800ea48:	88fb      	ldrh	r3, [r7, #6]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d101      	bne.n	800ea52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e074      	b.n	800eb3c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2221      	movs	r2, #33	@ 0x21
 800ea5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ea62:	f7f5 fae5 	bl	8004030 <HAL_GetTick>
 800ea66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	88fa      	ldrh	r2, [r7, #6]
 800ea6c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	88fa      	ldrh	r2, [r7, #6]
 800ea74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	689b      	ldr	r3, [r3, #8]
 800ea7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea80:	d108      	bne.n	800ea94 <HAL_UART_Transmit+0x6c>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	691b      	ldr	r3, [r3, #16]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d104      	bne.n	800ea94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	61bb      	str	r3, [r7, #24]
 800ea92:	e003      	b.n	800ea9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ea9c:	e030      	b.n	800eb00 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	9300      	str	r3, [sp, #0]
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	2180      	movs	r1, #128	@ 0x80
 800eaa8:	68f8      	ldr	r0, [r7, #12]
 800eaaa:	f001 f803 	bl	800fab4 <UART_WaitOnFlagUntilTimeout>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d005      	beq.n	800eac0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2220      	movs	r2, #32
 800eab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800eabc:	2303      	movs	r3, #3
 800eabe:	e03d      	b.n	800eb3c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d10b      	bne.n	800eade <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	881b      	ldrh	r3, [r3, #0]
 800eaca:	461a      	mov	r2, r3
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ead4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ead6:	69bb      	ldr	r3, [r7, #24]
 800ead8:	3302      	adds	r3, #2
 800eada:	61bb      	str	r3, [r7, #24]
 800eadc:	e007      	b.n	800eaee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	781a      	ldrb	r2, [r3, #0]
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	3301      	adds	r3, #1
 800eaec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	3b01      	subs	r3, #1
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1c8      	bne.n	800ea9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	9300      	str	r3, [sp, #0]
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	2200      	movs	r2, #0
 800eb14:	2140      	movs	r1, #64	@ 0x40
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	f000 ffcc 	bl	800fab4 <UART_WaitOnFlagUntilTimeout>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d005      	beq.n	800eb2e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2220      	movs	r2, #32
 800eb26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800eb2a:	2303      	movs	r3, #3
 800eb2c:	e006      	b.n	800eb3c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2220      	movs	r2, #32
 800eb32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800eb36:	2300      	movs	r3, #0
 800eb38:	e000      	b.n	800eb3c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800eb3a:	2302      	movs	r3, #2
  }
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3720      	adds	r7, #32
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eb44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb48:	b092      	sub	sp, #72	@ 0x48
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	689a      	ldr	r2, [r3, #8]
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	691b      	ldr	r3, [r3, #16]
 800eb5c:	431a      	orrs	r2, r3
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	431a      	orrs	r2, r3
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	69db      	ldr	r3, [r3, #28]
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	4bbe      	ldr	r3, [pc, #760]	@ (800ee6c <UART_SetConfig+0x328>)
 800eb74:	4013      	ands	r3, r2
 800eb76:	697a      	ldr	r2, [r7, #20]
 800eb78:	6812      	ldr	r2, [r2, #0]
 800eb7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eb7c:	430b      	orrs	r3, r1
 800eb7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	68da      	ldr	r2, [r3, #12]
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	430a      	orrs	r2, r1
 800eb94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	699b      	ldr	r3, [r3, #24]
 800eb9a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4ab3      	ldr	r2, [pc, #716]	@ (800ee70 <UART_SetConfig+0x32c>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d004      	beq.n	800ebb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	6a1b      	ldr	r3, [r3, #32]
 800ebaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ebac:	4313      	orrs	r3, r2
 800ebae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	689a      	ldr	r2, [r3, #8]
 800ebb6:	4baf      	ldr	r3, [pc, #700]	@ (800ee74 <UART_SetConfig+0x330>)
 800ebb8:	4013      	ands	r3, r2
 800ebba:	697a      	ldr	r2, [r7, #20]
 800ebbc:	6812      	ldr	r2, [r2, #0]
 800ebbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ebc0:	430b      	orrs	r3, r1
 800ebc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebca:	f023 010f 	bic.w	r1, r3, #15
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	430a      	orrs	r2, r1
 800ebd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4aa6      	ldr	r2, [pc, #664]	@ (800ee78 <UART_SetConfig+0x334>)
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d177      	bne.n	800ecd4 <UART_SetConfig+0x190>
 800ebe4:	4ba5      	ldr	r3, [pc, #660]	@ (800ee7c <UART_SetConfig+0x338>)
 800ebe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebe8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ebec:	2b28      	cmp	r3, #40	@ 0x28
 800ebee:	d86d      	bhi.n	800eccc <UART_SetConfig+0x188>
 800ebf0:	a201      	add	r2, pc, #4	@ (adr r2, 800ebf8 <UART_SetConfig+0xb4>)
 800ebf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf6:	bf00      	nop
 800ebf8:	0800ec9d 	.word	0x0800ec9d
 800ebfc:	0800eccd 	.word	0x0800eccd
 800ec00:	0800eccd 	.word	0x0800eccd
 800ec04:	0800eccd 	.word	0x0800eccd
 800ec08:	0800eccd 	.word	0x0800eccd
 800ec0c:	0800eccd 	.word	0x0800eccd
 800ec10:	0800eccd 	.word	0x0800eccd
 800ec14:	0800eccd 	.word	0x0800eccd
 800ec18:	0800eca5 	.word	0x0800eca5
 800ec1c:	0800eccd 	.word	0x0800eccd
 800ec20:	0800eccd 	.word	0x0800eccd
 800ec24:	0800eccd 	.word	0x0800eccd
 800ec28:	0800eccd 	.word	0x0800eccd
 800ec2c:	0800eccd 	.word	0x0800eccd
 800ec30:	0800eccd 	.word	0x0800eccd
 800ec34:	0800eccd 	.word	0x0800eccd
 800ec38:	0800ecad 	.word	0x0800ecad
 800ec3c:	0800eccd 	.word	0x0800eccd
 800ec40:	0800eccd 	.word	0x0800eccd
 800ec44:	0800eccd 	.word	0x0800eccd
 800ec48:	0800eccd 	.word	0x0800eccd
 800ec4c:	0800eccd 	.word	0x0800eccd
 800ec50:	0800eccd 	.word	0x0800eccd
 800ec54:	0800eccd 	.word	0x0800eccd
 800ec58:	0800ecb5 	.word	0x0800ecb5
 800ec5c:	0800eccd 	.word	0x0800eccd
 800ec60:	0800eccd 	.word	0x0800eccd
 800ec64:	0800eccd 	.word	0x0800eccd
 800ec68:	0800eccd 	.word	0x0800eccd
 800ec6c:	0800eccd 	.word	0x0800eccd
 800ec70:	0800eccd 	.word	0x0800eccd
 800ec74:	0800eccd 	.word	0x0800eccd
 800ec78:	0800ecbd 	.word	0x0800ecbd
 800ec7c:	0800eccd 	.word	0x0800eccd
 800ec80:	0800eccd 	.word	0x0800eccd
 800ec84:	0800eccd 	.word	0x0800eccd
 800ec88:	0800eccd 	.word	0x0800eccd
 800ec8c:	0800eccd 	.word	0x0800eccd
 800ec90:	0800eccd 	.word	0x0800eccd
 800ec94:	0800eccd 	.word	0x0800eccd
 800ec98:	0800ecc5 	.word	0x0800ecc5
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eca2:	e326      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800eca4:	2304      	movs	r3, #4
 800eca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecaa:	e322      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ecac:	2308      	movs	r3, #8
 800ecae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecb2:	e31e      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ecb4:	2310      	movs	r3, #16
 800ecb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecba:	e31a      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ecbc:	2320      	movs	r3, #32
 800ecbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecc2:	e316      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ecc4:	2340      	movs	r3, #64	@ 0x40
 800ecc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecca:	e312      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800eccc:	2380      	movs	r3, #128	@ 0x80
 800ecce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecd2:	e30e      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4a69      	ldr	r2, [pc, #420]	@ (800ee80 <UART_SetConfig+0x33c>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d130      	bne.n	800ed40 <UART_SetConfig+0x1fc>
 800ecde:	4b67      	ldr	r3, [pc, #412]	@ (800ee7c <UART_SetConfig+0x338>)
 800ece0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ece2:	f003 0307 	and.w	r3, r3, #7
 800ece6:	2b05      	cmp	r3, #5
 800ece8:	d826      	bhi.n	800ed38 <UART_SetConfig+0x1f4>
 800ecea:	a201      	add	r2, pc, #4	@ (adr r2, 800ecf0 <UART_SetConfig+0x1ac>)
 800ecec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecf0:	0800ed09 	.word	0x0800ed09
 800ecf4:	0800ed11 	.word	0x0800ed11
 800ecf8:	0800ed19 	.word	0x0800ed19
 800ecfc:	0800ed21 	.word	0x0800ed21
 800ed00:	0800ed29 	.word	0x0800ed29
 800ed04:	0800ed31 	.word	0x0800ed31
 800ed08:	2300      	movs	r3, #0
 800ed0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed0e:	e2f0      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ed10:	2304      	movs	r3, #4
 800ed12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed16:	e2ec      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ed18:	2308      	movs	r3, #8
 800ed1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed1e:	e2e8      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ed20:	2310      	movs	r3, #16
 800ed22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed26:	e2e4      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ed28:	2320      	movs	r3, #32
 800ed2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed2e:	e2e0      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ed30:	2340      	movs	r3, #64	@ 0x40
 800ed32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed36:	e2dc      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ed38:	2380      	movs	r3, #128	@ 0x80
 800ed3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed3e:	e2d8      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4a4f      	ldr	r2, [pc, #316]	@ (800ee84 <UART_SetConfig+0x340>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d130      	bne.n	800edac <UART_SetConfig+0x268>
 800ed4a:	4b4c      	ldr	r3, [pc, #304]	@ (800ee7c <UART_SetConfig+0x338>)
 800ed4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed4e:	f003 0307 	and.w	r3, r3, #7
 800ed52:	2b05      	cmp	r3, #5
 800ed54:	d826      	bhi.n	800eda4 <UART_SetConfig+0x260>
 800ed56:	a201      	add	r2, pc, #4	@ (adr r2, 800ed5c <UART_SetConfig+0x218>)
 800ed58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed5c:	0800ed75 	.word	0x0800ed75
 800ed60:	0800ed7d 	.word	0x0800ed7d
 800ed64:	0800ed85 	.word	0x0800ed85
 800ed68:	0800ed8d 	.word	0x0800ed8d
 800ed6c:	0800ed95 	.word	0x0800ed95
 800ed70:	0800ed9d 	.word	0x0800ed9d
 800ed74:	2300      	movs	r3, #0
 800ed76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed7a:	e2ba      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ed7c:	2304      	movs	r3, #4
 800ed7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed82:	e2b6      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ed84:	2308      	movs	r3, #8
 800ed86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed8a:	e2b2      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ed8c:	2310      	movs	r3, #16
 800ed8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed92:	e2ae      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ed94:	2320      	movs	r3, #32
 800ed96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed9a:	e2aa      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ed9c:	2340      	movs	r3, #64	@ 0x40
 800ed9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eda2:	e2a6      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800eda4:	2380      	movs	r3, #128	@ 0x80
 800eda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edaa:	e2a2      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a35      	ldr	r2, [pc, #212]	@ (800ee88 <UART_SetConfig+0x344>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d130      	bne.n	800ee18 <UART_SetConfig+0x2d4>
 800edb6:	4b31      	ldr	r3, [pc, #196]	@ (800ee7c <UART_SetConfig+0x338>)
 800edb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edba:	f003 0307 	and.w	r3, r3, #7
 800edbe:	2b05      	cmp	r3, #5
 800edc0:	d826      	bhi.n	800ee10 <UART_SetConfig+0x2cc>
 800edc2:	a201      	add	r2, pc, #4	@ (adr r2, 800edc8 <UART_SetConfig+0x284>)
 800edc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc8:	0800ede1 	.word	0x0800ede1
 800edcc:	0800ede9 	.word	0x0800ede9
 800edd0:	0800edf1 	.word	0x0800edf1
 800edd4:	0800edf9 	.word	0x0800edf9
 800edd8:	0800ee01 	.word	0x0800ee01
 800eddc:	0800ee09 	.word	0x0800ee09
 800ede0:	2300      	movs	r3, #0
 800ede2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ede6:	e284      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ede8:	2304      	movs	r3, #4
 800edea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edee:	e280      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800edf0:	2308      	movs	r3, #8
 800edf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edf6:	e27c      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800edf8:	2310      	movs	r3, #16
 800edfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edfe:	e278      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ee00:	2320      	movs	r3, #32
 800ee02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee06:	e274      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ee08:	2340      	movs	r3, #64	@ 0x40
 800ee0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee0e:	e270      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ee10:	2380      	movs	r3, #128	@ 0x80
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee16:	e26c      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4a1b      	ldr	r2, [pc, #108]	@ (800ee8c <UART_SetConfig+0x348>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d142      	bne.n	800eea8 <UART_SetConfig+0x364>
 800ee22:	4b16      	ldr	r3, [pc, #88]	@ (800ee7c <UART_SetConfig+0x338>)
 800ee24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee26:	f003 0307 	and.w	r3, r3, #7
 800ee2a:	2b05      	cmp	r3, #5
 800ee2c:	d838      	bhi.n	800eea0 <UART_SetConfig+0x35c>
 800ee2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ee34 <UART_SetConfig+0x2f0>)
 800ee30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee34:	0800ee4d 	.word	0x0800ee4d
 800ee38:	0800ee55 	.word	0x0800ee55
 800ee3c:	0800ee5d 	.word	0x0800ee5d
 800ee40:	0800ee65 	.word	0x0800ee65
 800ee44:	0800ee91 	.word	0x0800ee91
 800ee48:	0800ee99 	.word	0x0800ee99
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee52:	e24e      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ee54:	2304      	movs	r3, #4
 800ee56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee5a:	e24a      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ee5c:	2308      	movs	r3, #8
 800ee5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee62:	e246      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ee64:	2310      	movs	r3, #16
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee6a:	e242      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ee6c:	cfff69f3 	.word	0xcfff69f3
 800ee70:	58000c00 	.word	0x58000c00
 800ee74:	11fff4ff 	.word	0x11fff4ff
 800ee78:	40011000 	.word	0x40011000
 800ee7c:	58024400 	.word	0x58024400
 800ee80:	40004400 	.word	0x40004400
 800ee84:	40004800 	.word	0x40004800
 800ee88:	40004c00 	.word	0x40004c00
 800ee8c:	40005000 	.word	0x40005000
 800ee90:	2320      	movs	r3, #32
 800ee92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee96:	e22c      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ee98:	2340      	movs	r3, #64	@ 0x40
 800ee9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee9e:	e228      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800eea0:	2380      	movs	r3, #128	@ 0x80
 800eea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eea6:	e224      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4ab1      	ldr	r2, [pc, #708]	@ (800f174 <UART_SetConfig+0x630>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d176      	bne.n	800efa0 <UART_SetConfig+0x45c>
 800eeb2:	4bb1      	ldr	r3, [pc, #708]	@ (800f178 <UART_SetConfig+0x634>)
 800eeb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eeb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eeba:	2b28      	cmp	r3, #40	@ 0x28
 800eebc:	d86c      	bhi.n	800ef98 <UART_SetConfig+0x454>
 800eebe:	a201      	add	r2, pc, #4	@ (adr r2, 800eec4 <UART_SetConfig+0x380>)
 800eec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec4:	0800ef69 	.word	0x0800ef69
 800eec8:	0800ef99 	.word	0x0800ef99
 800eecc:	0800ef99 	.word	0x0800ef99
 800eed0:	0800ef99 	.word	0x0800ef99
 800eed4:	0800ef99 	.word	0x0800ef99
 800eed8:	0800ef99 	.word	0x0800ef99
 800eedc:	0800ef99 	.word	0x0800ef99
 800eee0:	0800ef99 	.word	0x0800ef99
 800eee4:	0800ef71 	.word	0x0800ef71
 800eee8:	0800ef99 	.word	0x0800ef99
 800eeec:	0800ef99 	.word	0x0800ef99
 800eef0:	0800ef99 	.word	0x0800ef99
 800eef4:	0800ef99 	.word	0x0800ef99
 800eef8:	0800ef99 	.word	0x0800ef99
 800eefc:	0800ef99 	.word	0x0800ef99
 800ef00:	0800ef99 	.word	0x0800ef99
 800ef04:	0800ef79 	.word	0x0800ef79
 800ef08:	0800ef99 	.word	0x0800ef99
 800ef0c:	0800ef99 	.word	0x0800ef99
 800ef10:	0800ef99 	.word	0x0800ef99
 800ef14:	0800ef99 	.word	0x0800ef99
 800ef18:	0800ef99 	.word	0x0800ef99
 800ef1c:	0800ef99 	.word	0x0800ef99
 800ef20:	0800ef99 	.word	0x0800ef99
 800ef24:	0800ef81 	.word	0x0800ef81
 800ef28:	0800ef99 	.word	0x0800ef99
 800ef2c:	0800ef99 	.word	0x0800ef99
 800ef30:	0800ef99 	.word	0x0800ef99
 800ef34:	0800ef99 	.word	0x0800ef99
 800ef38:	0800ef99 	.word	0x0800ef99
 800ef3c:	0800ef99 	.word	0x0800ef99
 800ef40:	0800ef99 	.word	0x0800ef99
 800ef44:	0800ef89 	.word	0x0800ef89
 800ef48:	0800ef99 	.word	0x0800ef99
 800ef4c:	0800ef99 	.word	0x0800ef99
 800ef50:	0800ef99 	.word	0x0800ef99
 800ef54:	0800ef99 	.word	0x0800ef99
 800ef58:	0800ef99 	.word	0x0800ef99
 800ef5c:	0800ef99 	.word	0x0800ef99
 800ef60:	0800ef99 	.word	0x0800ef99
 800ef64:	0800ef91 	.word	0x0800ef91
 800ef68:	2301      	movs	r3, #1
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef6e:	e1c0      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ef70:	2304      	movs	r3, #4
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef76:	e1bc      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ef78:	2308      	movs	r3, #8
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef7e:	e1b8      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ef80:	2310      	movs	r3, #16
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef86:	e1b4      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ef88:	2320      	movs	r3, #32
 800ef8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef8e:	e1b0      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ef90:	2340      	movs	r3, #64	@ 0x40
 800ef92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef96:	e1ac      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800ef98:	2380      	movs	r3, #128	@ 0x80
 800ef9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef9e:	e1a8      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4a75      	ldr	r2, [pc, #468]	@ (800f17c <UART_SetConfig+0x638>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d130      	bne.n	800f00c <UART_SetConfig+0x4c8>
 800efaa:	4b73      	ldr	r3, [pc, #460]	@ (800f178 <UART_SetConfig+0x634>)
 800efac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efae:	f003 0307 	and.w	r3, r3, #7
 800efb2:	2b05      	cmp	r3, #5
 800efb4:	d826      	bhi.n	800f004 <UART_SetConfig+0x4c0>
 800efb6:	a201      	add	r2, pc, #4	@ (adr r2, 800efbc <UART_SetConfig+0x478>)
 800efb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efbc:	0800efd5 	.word	0x0800efd5
 800efc0:	0800efdd 	.word	0x0800efdd
 800efc4:	0800efe5 	.word	0x0800efe5
 800efc8:	0800efed 	.word	0x0800efed
 800efcc:	0800eff5 	.word	0x0800eff5
 800efd0:	0800effd 	.word	0x0800effd
 800efd4:	2300      	movs	r3, #0
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efda:	e18a      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800efdc:	2304      	movs	r3, #4
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efe2:	e186      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800efe4:	2308      	movs	r3, #8
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efea:	e182      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800efec:	2310      	movs	r3, #16
 800efee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eff2:	e17e      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800eff4:	2320      	movs	r3, #32
 800eff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800effa:	e17a      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800effc:	2340      	movs	r3, #64	@ 0x40
 800effe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f002:	e176      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f004:	2380      	movs	r3, #128	@ 0x80
 800f006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f00a:	e172      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a5b      	ldr	r2, [pc, #364]	@ (800f180 <UART_SetConfig+0x63c>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d130      	bne.n	800f078 <UART_SetConfig+0x534>
 800f016:	4b58      	ldr	r3, [pc, #352]	@ (800f178 <UART_SetConfig+0x634>)
 800f018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f01a:	f003 0307 	and.w	r3, r3, #7
 800f01e:	2b05      	cmp	r3, #5
 800f020:	d826      	bhi.n	800f070 <UART_SetConfig+0x52c>
 800f022:	a201      	add	r2, pc, #4	@ (adr r2, 800f028 <UART_SetConfig+0x4e4>)
 800f024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f028:	0800f041 	.word	0x0800f041
 800f02c:	0800f049 	.word	0x0800f049
 800f030:	0800f051 	.word	0x0800f051
 800f034:	0800f059 	.word	0x0800f059
 800f038:	0800f061 	.word	0x0800f061
 800f03c:	0800f069 	.word	0x0800f069
 800f040:	2300      	movs	r3, #0
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f046:	e154      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f048:	2304      	movs	r3, #4
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f04e:	e150      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f050:	2308      	movs	r3, #8
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f056:	e14c      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f058:	2310      	movs	r3, #16
 800f05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f05e:	e148      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f060:	2320      	movs	r3, #32
 800f062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f066:	e144      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f068:	2340      	movs	r3, #64	@ 0x40
 800f06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f06e:	e140      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f070:	2380      	movs	r3, #128	@ 0x80
 800f072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f076:	e13c      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4a41      	ldr	r2, [pc, #260]	@ (800f184 <UART_SetConfig+0x640>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	f040 8082 	bne.w	800f188 <UART_SetConfig+0x644>
 800f084:	4b3c      	ldr	r3, [pc, #240]	@ (800f178 <UART_SetConfig+0x634>)
 800f086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f088:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f08c:	2b28      	cmp	r3, #40	@ 0x28
 800f08e:	d86d      	bhi.n	800f16c <UART_SetConfig+0x628>
 800f090:	a201      	add	r2, pc, #4	@ (adr r2, 800f098 <UART_SetConfig+0x554>)
 800f092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f096:	bf00      	nop
 800f098:	0800f13d 	.word	0x0800f13d
 800f09c:	0800f16d 	.word	0x0800f16d
 800f0a0:	0800f16d 	.word	0x0800f16d
 800f0a4:	0800f16d 	.word	0x0800f16d
 800f0a8:	0800f16d 	.word	0x0800f16d
 800f0ac:	0800f16d 	.word	0x0800f16d
 800f0b0:	0800f16d 	.word	0x0800f16d
 800f0b4:	0800f16d 	.word	0x0800f16d
 800f0b8:	0800f145 	.word	0x0800f145
 800f0bc:	0800f16d 	.word	0x0800f16d
 800f0c0:	0800f16d 	.word	0x0800f16d
 800f0c4:	0800f16d 	.word	0x0800f16d
 800f0c8:	0800f16d 	.word	0x0800f16d
 800f0cc:	0800f16d 	.word	0x0800f16d
 800f0d0:	0800f16d 	.word	0x0800f16d
 800f0d4:	0800f16d 	.word	0x0800f16d
 800f0d8:	0800f14d 	.word	0x0800f14d
 800f0dc:	0800f16d 	.word	0x0800f16d
 800f0e0:	0800f16d 	.word	0x0800f16d
 800f0e4:	0800f16d 	.word	0x0800f16d
 800f0e8:	0800f16d 	.word	0x0800f16d
 800f0ec:	0800f16d 	.word	0x0800f16d
 800f0f0:	0800f16d 	.word	0x0800f16d
 800f0f4:	0800f16d 	.word	0x0800f16d
 800f0f8:	0800f155 	.word	0x0800f155
 800f0fc:	0800f16d 	.word	0x0800f16d
 800f100:	0800f16d 	.word	0x0800f16d
 800f104:	0800f16d 	.word	0x0800f16d
 800f108:	0800f16d 	.word	0x0800f16d
 800f10c:	0800f16d 	.word	0x0800f16d
 800f110:	0800f16d 	.word	0x0800f16d
 800f114:	0800f16d 	.word	0x0800f16d
 800f118:	0800f15d 	.word	0x0800f15d
 800f11c:	0800f16d 	.word	0x0800f16d
 800f120:	0800f16d 	.word	0x0800f16d
 800f124:	0800f16d 	.word	0x0800f16d
 800f128:	0800f16d 	.word	0x0800f16d
 800f12c:	0800f16d 	.word	0x0800f16d
 800f130:	0800f16d 	.word	0x0800f16d
 800f134:	0800f16d 	.word	0x0800f16d
 800f138:	0800f165 	.word	0x0800f165
 800f13c:	2301      	movs	r3, #1
 800f13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f142:	e0d6      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f144:	2304      	movs	r3, #4
 800f146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f14a:	e0d2      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f14c:	2308      	movs	r3, #8
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f152:	e0ce      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f154:	2310      	movs	r3, #16
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f15a:	e0ca      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f15c:	2320      	movs	r3, #32
 800f15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f162:	e0c6      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f164:	2340      	movs	r3, #64	@ 0x40
 800f166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f16a:	e0c2      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f16c:	2380      	movs	r3, #128	@ 0x80
 800f16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f172:	e0be      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f174:	40011400 	.word	0x40011400
 800f178:	58024400 	.word	0x58024400
 800f17c:	40007800 	.word	0x40007800
 800f180:	40007c00 	.word	0x40007c00
 800f184:	40011800 	.word	0x40011800
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	4aad      	ldr	r2, [pc, #692]	@ (800f444 <UART_SetConfig+0x900>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d176      	bne.n	800f280 <UART_SetConfig+0x73c>
 800f192:	4bad      	ldr	r3, [pc, #692]	@ (800f448 <UART_SetConfig+0x904>)
 800f194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f196:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f19a:	2b28      	cmp	r3, #40	@ 0x28
 800f19c:	d86c      	bhi.n	800f278 <UART_SetConfig+0x734>
 800f19e:	a201      	add	r2, pc, #4	@ (adr r2, 800f1a4 <UART_SetConfig+0x660>)
 800f1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a4:	0800f249 	.word	0x0800f249
 800f1a8:	0800f279 	.word	0x0800f279
 800f1ac:	0800f279 	.word	0x0800f279
 800f1b0:	0800f279 	.word	0x0800f279
 800f1b4:	0800f279 	.word	0x0800f279
 800f1b8:	0800f279 	.word	0x0800f279
 800f1bc:	0800f279 	.word	0x0800f279
 800f1c0:	0800f279 	.word	0x0800f279
 800f1c4:	0800f251 	.word	0x0800f251
 800f1c8:	0800f279 	.word	0x0800f279
 800f1cc:	0800f279 	.word	0x0800f279
 800f1d0:	0800f279 	.word	0x0800f279
 800f1d4:	0800f279 	.word	0x0800f279
 800f1d8:	0800f279 	.word	0x0800f279
 800f1dc:	0800f279 	.word	0x0800f279
 800f1e0:	0800f279 	.word	0x0800f279
 800f1e4:	0800f259 	.word	0x0800f259
 800f1e8:	0800f279 	.word	0x0800f279
 800f1ec:	0800f279 	.word	0x0800f279
 800f1f0:	0800f279 	.word	0x0800f279
 800f1f4:	0800f279 	.word	0x0800f279
 800f1f8:	0800f279 	.word	0x0800f279
 800f1fc:	0800f279 	.word	0x0800f279
 800f200:	0800f279 	.word	0x0800f279
 800f204:	0800f261 	.word	0x0800f261
 800f208:	0800f279 	.word	0x0800f279
 800f20c:	0800f279 	.word	0x0800f279
 800f210:	0800f279 	.word	0x0800f279
 800f214:	0800f279 	.word	0x0800f279
 800f218:	0800f279 	.word	0x0800f279
 800f21c:	0800f279 	.word	0x0800f279
 800f220:	0800f279 	.word	0x0800f279
 800f224:	0800f269 	.word	0x0800f269
 800f228:	0800f279 	.word	0x0800f279
 800f22c:	0800f279 	.word	0x0800f279
 800f230:	0800f279 	.word	0x0800f279
 800f234:	0800f279 	.word	0x0800f279
 800f238:	0800f279 	.word	0x0800f279
 800f23c:	0800f279 	.word	0x0800f279
 800f240:	0800f279 	.word	0x0800f279
 800f244:	0800f271 	.word	0x0800f271
 800f248:	2301      	movs	r3, #1
 800f24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f24e:	e050      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f250:	2304      	movs	r3, #4
 800f252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f256:	e04c      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f258:	2308      	movs	r3, #8
 800f25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f25e:	e048      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f260:	2310      	movs	r3, #16
 800f262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f266:	e044      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f268:	2320      	movs	r3, #32
 800f26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f26e:	e040      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f270:	2340      	movs	r3, #64	@ 0x40
 800f272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f276:	e03c      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f278:	2380      	movs	r3, #128	@ 0x80
 800f27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f27e:	e038      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4a71      	ldr	r2, [pc, #452]	@ (800f44c <UART_SetConfig+0x908>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d130      	bne.n	800f2ec <UART_SetConfig+0x7a8>
 800f28a:	4b6f      	ldr	r3, [pc, #444]	@ (800f448 <UART_SetConfig+0x904>)
 800f28c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f28e:	f003 0307 	and.w	r3, r3, #7
 800f292:	2b05      	cmp	r3, #5
 800f294:	d826      	bhi.n	800f2e4 <UART_SetConfig+0x7a0>
 800f296:	a201      	add	r2, pc, #4	@ (adr r2, 800f29c <UART_SetConfig+0x758>)
 800f298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29c:	0800f2b5 	.word	0x0800f2b5
 800f2a0:	0800f2bd 	.word	0x0800f2bd
 800f2a4:	0800f2c5 	.word	0x0800f2c5
 800f2a8:	0800f2cd 	.word	0x0800f2cd
 800f2ac:	0800f2d5 	.word	0x0800f2d5
 800f2b0:	0800f2dd 	.word	0x0800f2dd
 800f2b4:	2302      	movs	r3, #2
 800f2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2ba:	e01a      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f2bc:	2304      	movs	r3, #4
 800f2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2c2:	e016      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f2c4:	2308      	movs	r3, #8
 800f2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2ca:	e012      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f2cc:	2310      	movs	r3, #16
 800f2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2d2:	e00e      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f2d4:	2320      	movs	r3, #32
 800f2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2da:	e00a      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f2dc:	2340      	movs	r3, #64	@ 0x40
 800f2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2e2:	e006      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f2e4:	2380      	movs	r3, #128	@ 0x80
 800f2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2ea:	e002      	b.n	800f2f2 <UART_SetConfig+0x7ae>
 800f2ec:	2380      	movs	r3, #128	@ 0x80
 800f2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	4a55      	ldr	r2, [pc, #340]	@ (800f44c <UART_SetConfig+0x908>)
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	f040 80f8 	bne.w	800f4ee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f2fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f302:	2b20      	cmp	r3, #32
 800f304:	dc46      	bgt.n	800f394 <UART_SetConfig+0x850>
 800f306:	2b02      	cmp	r3, #2
 800f308:	db75      	blt.n	800f3f6 <UART_SetConfig+0x8b2>
 800f30a:	3b02      	subs	r3, #2
 800f30c:	2b1e      	cmp	r3, #30
 800f30e:	d872      	bhi.n	800f3f6 <UART_SetConfig+0x8b2>
 800f310:	a201      	add	r2, pc, #4	@ (adr r2, 800f318 <UART_SetConfig+0x7d4>)
 800f312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f316:	bf00      	nop
 800f318:	0800f39b 	.word	0x0800f39b
 800f31c:	0800f3f7 	.word	0x0800f3f7
 800f320:	0800f3a3 	.word	0x0800f3a3
 800f324:	0800f3f7 	.word	0x0800f3f7
 800f328:	0800f3f7 	.word	0x0800f3f7
 800f32c:	0800f3f7 	.word	0x0800f3f7
 800f330:	0800f3b3 	.word	0x0800f3b3
 800f334:	0800f3f7 	.word	0x0800f3f7
 800f338:	0800f3f7 	.word	0x0800f3f7
 800f33c:	0800f3f7 	.word	0x0800f3f7
 800f340:	0800f3f7 	.word	0x0800f3f7
 800f344:	0800f3f7 	.word	0x0800f3f7
 800f348:	0800f3f7 	.word	0x0800f3f7
 800f34c:	0800f3f7 	.word	0x0800f3f7
 800f350:	0800f3c3 	.word	0x0800f3c3
 800f354:	0800f3f7 	.word	0x0800f3f7
 800f358:	0800f3f7 	.word	0x0800f3f7
 800f35c:	0800f3f7 	.word	0x0800f3f7
 800f360:	0800f3f7 	.word	0x0800f3f7
 800f364:	0800f3f7 	.word	0x0800f3f7
 800f368:	0800f3f7 	.word	0x0800f3f7
 800f36c:	0800f3f7 	.word	0x0800f3f7
 800f370:	0800f3f7 	.word	0x0800f3f7
 800f374:	0800f3f7 	.word	0x0800f3f7
 800f378:	0800f3f7 	.word	0x0800f3f7
 800f37c:	0800f3f7 	.word	0x0800f3f7
 800f380:	0800f3f7 	.word	0x0800f3f7
 800f384:	0800f3f7 	.word	0x0800f3f7
 800f388:	0800f3f7 	.word	0x0800f3f7
 800f38c:	0800f3f7 	.word	0x0800f3f7
 800f390:	0800f3e9 	.word	0x0800f3e9
 800f394:	2b40      	cmp	r3, #64	@ 0x40
 800f396:	d02a      	beq.n	800f3ee <UART_SetConfig+0x8aa>
 800f398:	e02d      	b.n	800f3f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f39a:	f7fb fd11 	bl	800adc0 <HAL_RCCEx_GetD3PCLK1Freq>
 800f39e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f3a0:	e02f      	b.n	800f402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fb fd20 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3b0:	e027      	b.n	800f402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3b2:	f107 0318 	add.w	r3, r7, #24
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7fb fe6c 	bl	800b094 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3c0:	e01f      	b.n	800f402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3c2:	4b21      	ldr	r3, [pc, #132]	@ (800f448 <UART_SetConfig+0x904>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f003 0320 	and.w	r3, r3, #32
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d009      	beq.n	800f3e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3ce:	4b1e      	ldr	r3, [pc, #120]	@ (800f448 <UART_SetConfig+0x904>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	08db      	lsrs	r3, r3, #3
 800f3d4:	f003 0303 	and.w	r3, r3, #3
 800f3d8:	4a1d      	ldr	r2, [pc, #116]	@ (800f450 <UART_SetConfig+0x90c>)
 800f3da:	fa22 f303 	lsr.w	r3, r2, r3
 800f3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f3e0:	e00f      	b.n	800f402 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f3e2:	4b1b      	ldr	r3, [pc, #108]	@ (800f450 <UART_SetConfig+0x90c>)
 800f3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3e6:	e00c      	b.n	800f402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f3e8:	4b1a      	ldr	r3, [pc, #104]	@ (800f454 <UART_SetConfig+0x910>)
 800f3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3ec:	e009      	b.n	800f402 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3f4:	e005      	b.n	800f402 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f400:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f404:	2b00      	cmp	r3, #0
 800f406:	f000 81ee 	beq.w	800f7e6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f40e:	4a12      	ldr	r2, [pc, #72]	@ (800f458 <UART_SetConfig+0x914>)
 800f410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f414:	461a      	mov	r2, r3
 800f416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f418:	fbb3 f3f2 	udiv	r3, r3, r2
 800f41c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	685a      	ldr	r2, [r3, #4]
 800f422:	4613      	mov	r3, r2
 800f424:	005b      	lsls	r3, r3, #1
 800f426:	4413      	add	r3, r2
 800f428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d305      	bcc.n	800f43a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f436:	429a      	cmp	r2, r3
 800f438:	d910      	bls.n	800f45c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f43a:	2301      	movs	r3, #1
 800f43c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f440:	e1d1      	b.n	800f7e6 <UART_SetConfig+0xca2>
 800f442:	bf00      	nop
 800f444:	40011c00 	.word	0x40011c00
 800f448:	58024400 	.word	0x58024400
 800f44c:	58000c00 	.word	0x58000c00
 800f450:	03d09000 	.word	0x03d09000
 800f454:	003d0900 	.word	0x003d0900
 800f458:	08021c30 	.word	0x08021c30
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f45c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f45e:	2200      	movs	r2, #0
 800f460:	60bb      	str	r3, [r7, #8]
 800f462:	60fa      	str	r2, [r7, #12]
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f468:	4ac0      	ldr	r2, [pc, #768]	@ (800f76c <UART_SetConfig+0xc28>)
 800f46a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f46e:	b29b      	uxth	r3, r3
 800f470:	2200      	movs	r2, #0
 800f472:	603b      	str	r3, [r7, #0]
 800f474:	607a      	str	r2, [r7, #4]
 800f476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f47a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f47e:	f7f0 ff9f 	bl	80003c0 <__aeabi_uldivmod>
 800f482:	4602      	mov	r2, r0
 800f484:	460b      	mov	r3, r1
 800f486:	4610      	mov	r0, r2
 800f488:	4619      	mov	r1, r3
 800f48a:	f04f 0200 	mov.w	r2, #0
 800f48e:	f04f 0300 	mov.w	r3, #0
 800f492:	020b      	lsls	r3, r1, #8
 800f494:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f498:	0202      	lsls	r2, r0, #8
 800f49a:	6979      	ldr	r1, [r7, #20]
 800f49c:	6849      	ldr	r1, [r1, #4]
 800f49e:	0849      	lsrs	r1, r1, #1
 800f4a0:	2000      	movs	r0, #0
 800f4a2:	460c      	mov	r4, r1
 800f4a4:	4605      	mov	r5, r0
 800f4a6:	eb12 0804 	adds.w	r8, r2, r4
 800f4aa:	eb43 0905 	adc.w	r9, r3, r5
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	469a      	mov	sl, r3
 800f4b6:	4693      	mov	fp, r2
 800f4b8:	4652      	mov	r2, sl
 800f4ba:	465b      	mov	r3, fp
 800f4bc:	4640      	mov	r0, r8
 800f4be:	4649      	mov	r1, r9
 800f4c0:	f7f0 ff7e 	bl	80003c0 <__aeabi_uldivmod>
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f4d2:	d308      	bcc.n	800f4e6 <UART_SetConfig+0x9a2>
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f4da:	d204      	bcs.n	800f4e6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f4e2:	60da      	str	r2, [r3, #12]
 800f4e4:	e17f      	b.n	800f7e6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f4ec:	e17b      	b.n	800f7e6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	69db      	ldr	r3, [r3, #28]
 800f4f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f4f6:	f040 80bd 	bne.w	800f674 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f4fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f4fe:	2b20      	cmp	r3, #32
 800f500:	dc48      	bgt.n	800f594 <UART_SetConfig+0xa50>
 800f502:	2b00      	cmp	r3, #0
 800f504:	db7b      	blt.n	800f5fe <UART_SetConfig+0xaba>
 800f506:	2b20      	cmp	r3, #32
 800f508:	d879      	bhi.n	800f5fe <UART_SetConfig+0xaba>
 800f50a:	a201      	add	r2, pc, #4	@ (adr r2, 800f510 <UART_SetConfig+0x9cc>)
 800f50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f510:	0800f59b 	.word	0x0800f59b
 800f514:	0800f5a3 	.word	0x0800f5a3
 800f518:	0800f5ff 	.word	0x0800f5ff
 800f51c:	0800f5ff 	.word	0x0800f5ff
 800f520:	0800f5ab 	.word	0x0800f5ab
 800f524:	0800f5ff 	.word	0x0800f5ff
 800f528:	0800f5ff 	.word	0x0800f5ff
 800f52c:	0800f5ff 	.word	0x0800f5ff
 800f530:	0800f5bb 	.word	0x0800f5bb
 800f534:	0800f5ff 	.word	0x0800f5ff
 800f538:	0800f5ff 	.word	0x0800f5ff
 800f53c:	0800f5ff 	.word	0x0800f5ff
 800f540:	0800f5ff 	.word	0x0800f5ff
 800f544:	0800f5ff 	.word	0x0800f5ff
 800f548:	0800f5ff 	.word	0x0800f5ff
 800f54c:	0800f5ff 	.word	0x0800f5ff
 800f550:	0800f5cb 	.word	0x0800f5cb
 800f554:	0800f5ff 	.word	0x0800f5ff
 800f558:	0800f5ff 	.word	0x0800f5ff
 800f55c:	0800f5ff 	.word	0x0800f5ff
 800f560:	0800f5ff 	.word	0x0800f5ff
 800f564:	0800f5ff 	.word	0x0800f5ff
 800f568:	0800f5ff 	.word	0x0800f5ff
 800f56c:	0800f5ff 	.word	0x0800f5ff
 800f570:	0800f5ff 	.word	0x0800f5ff
 800f574:	0800f5ff 	.word	0x0800f5ff
 800f578:	0800f5ff 	.word	0x0800f5ff
 800f57c:	0800f5ff 	.word	0x0800f5ff
 800f580:	0800f5ff 	.word	0x0800f5ff
 800f584:	0800f5ff 	.word	0x0800f5ff
 800f588:	0800f5ff 	.word	0x0800f5ff
 800f58c:	0800f5ff 	.word	0x0800f5ff
 800f590:	0800f5f1 	.word	0x0800f5f1
 800f594:	2b40      	cmp	r3, #64	@ 0x40
 800f596:	d02e      	beq.n	800f5f6 <UART_SetConfig+0xab2>
 800f598:	e031      	b.n	800f5fe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f59a:	f7f9 fd73 	bl	8009084 <HAL_RCC_GetPCLK1Freq>
 800f59e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f5a0:	e033      	b.n	800f60a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5a2:	f7f9 fd85 	bl	80090b0 <HAL_RCC_GetPCLK2Freq>
 800f5a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f5a8:	e02f      	b.n	800f60a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fb fc1c 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5b8:	e027      	b.n	800f60a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5ba:	f107 0318 	add.w	r3, r7, #24
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7fb fd68 	bl	800b094 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f5c4:	69fb      	ldr	r3, [r7, #28]
 800f5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5c8:	e01f      	b.n	800f60a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5ca:	4b69      	ldr	r3, [pc, #420]	@ (800f770 <UART_SetConfig+0xc2c>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f003 0320 	and.w	r3, r3, #32
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d009      	beq.n	800f5ea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f5d6:	4b66      	ldr	r3, [pc, #408]	@ (800f770 <UART_SetConfig+0xc2c>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	08db      	lsrs	r3, r3, #3
 800f5dc:	f003 0303 	and.w	r3, r3, #3
 800f5e0:	4a64      	ldr	r2, [pc, #400]	@ (800f774 <UART_SetConfig+0xc30>)
 800f5e2:	fa22 f303 	lsr.w	r3, r2, r3
 800f5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5e8:	e00f      	b.n	800f60a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f5ea:	4b62      	ldr	r3, [pc, #392]	@ (800f774 <UART_SetConfig+0xc30>)
 800f5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5ee:	e00c      	b.n	800f60a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f5f0:	4b61      	ldr	r3, [pc, #388]	@ (800f778 <UART_SetConfig+0xc34>)
 800f5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5f4:	e009      	b.n	800f60a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5fc:	e005      	b.n	800f60a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f5fe:	2300      	movs	r3, #0
 800f600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f602:	2301      	movs	r3, #1
 800f604:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f608:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	f000 80ea 	beq.w	800f7e6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f616:	4a55      	ldr	r2, [pc, #340]	@ (800f76c <UART_SetConfig+0xc28>)
 800f618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f61c:	461a      	mov	r2, r3
 800f61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f620:	fbb3 f3f2 	udiv	r3, r3, r2
 800f624:	005a      	lsls	r2, r3, #1
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	085b      	lsrs	r3, r3, #1
 800f62c:	441a      	add	r2, r3
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	fbb2 f3f3 	udiv	r3, r2, r3
 800f636:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f63a:	2b0f      	cmp	r3, #15
 800f63c:	d916      	bls.n	800f66c <UART_SetConfig+0xb28>
 800f63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f644:	d212      	bcs.n	800f66c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f648:	b29b      	uxth	r3, r3
 800f64a:	f023 030f 	bic.w	r3, r3, #15
 800f64e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f652:	085b      	lsrs	r3, r3, #1
 800f654:	b29b      	uxth	r3, r3
 800f656:	f003 0307 	and.w	r3, r3, #7
 800f65a:	b29a      	uxth	r2, r3
 800f65c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f65e:	4313      	orrs	r3, r2
 800f660:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f668:	60da      	str	r2, [r3, #12]
 800f66a:	e0bc      	b.n	800f7e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f66c:	2301      	movs	r3, #1
 800f66e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f672:	e0b8      	b.n	800f7e6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f674:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f678:	2b20      	cmp	r3, #32
 800f67a:	dc4b      	bgt.n	800f714 <UART_SetConfig+0xbd0>
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	f2c0 8087 	blt.w	800f790 <UART_SetConfig+0xc4c>
 800f682:	2b20      	cmp	r3, #32
 800f684:	f200 8084 	bhi.w	800f790 <UART_SetConfig+0xc4c>
 800f688:	a201      	add	r2, pc, #4	@ (adr r2, 800f690 <UART_SetConfig+0xb4c>)
 800f68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f68e:	bf00      	nop
 800f690:	0800f71b 	.word	0x0800f71b
 800f694:	0800f723 	.word	0x0800f723
 800f698:	0800f791 	.word	0x0800f791
 800f69c:	0800f791 	.word	0x0800f791
 800f6a0:	0800f72b 	.word	0x0800f72b
 800f6a4:	0800f791 	.word	0x0800f791
 800f6a8:	0800f791 	.word	0x0800f791
 800f6ac:	0800f791 	.word	0x0800f791
 800f6b0:	0800f73b 	.word	0x0800f73b
 800f6b4:	0800f791 	.word	0x0800f791
 800f6b8:	0800f791 	.word	0x0800f791
 800f6bc:	0800f791 	.word	0x0800f791
 800f6c0:	0800f791 	.word	0x0800f791
 800f6c4:	0800f791 	.word	0x0800f791
 800f6c8:	0800f791 	.word	0x0800f791
 800f6cc:	0800f791 	.word	0x0800f791
 800f6d0:	0800f74b 	.word	0x0800f74b
 800f6d4:	0800f791 	.word	0x0800f791
 800f6d8:	0800f791 	.word	0x0800f791
 800f6dc:	0800f791 	.word	0x0800f791
 800f6e0:	0800f791 	.word	0x0800f791
 800f6e4:	0800f791 	.word	0x0800f791
 800f6e8:	0800f791 	.word	0x0800f791
 800f6ec:	0800f791 	.word	0x0800f791
 800f6f0:	0800f791 	.word	0x0800f791
 800f6f4:	0800f791 	.word	0x0800f791
 800f6f8:	0800f791 	.word	0x0800f791
 800f6fc:	0800f791 	.word	0x0800f791
 800f700:	0800f791 	.word	0x0800f791
 800f704:	0800f791 	.word	0x0800f791
 800f708:	0800f791 	.word	0x0800f791
 800f70c:	0800f791 	.word	0x0800f791
 800f710:	0800f783 	.word	0x0800f783
 800f714:	2b40      	cmp	r3, #64	@ 0x40
 800f716:	d037      	beq.n	800f788 <UART_SetConfig+0xc44>
 800f718:	e03a      	b.n	800f790 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f71a:	f7f9 fcb3 	bl	8009084 <HAL_RCC_GetPCLK1Freq>
 800f71e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f720:	e03c      	b.n	800f79c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f722:	f7f9 fcc5 	bl	80090b0 <HAL_RCC_GetPCLK2Freq>
 800f726:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f728:	e038      	b.n	800f79c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f72a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fb fb5c 	bl	800adec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f738:	e030      	b.n	800f79c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f73a:	f107 0318 	add.w	r3, r7, #24
 800f73e:	4618      	mov	r0, r3
 800f740:	f7fb fca8 	bl	800b094 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f748:	e028      	b.n	800f79c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f74a:	4b09      	ldr	r3, [pc, #36]	@ (800f770 <UART_SetConfig+0xc2c>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f003 0320 	and.w	r3, r3, #32
 800f752:	2b00      	cmp	r3, #0
 800f754:	d012      	beq.n	800f77c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f756:	4b06      	ldr	r3, [pc, #24]	@ (800f770 <UART_SetConfig+0xc2c>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	08db      	lsrs	r3, r3, #3
 800f75c:	f003 0303 	and.w	r3, r3, #3
 800f760:	4a04      	ldr	r2, [pc, #16]	@ (800f774 <UART_SetConfig+0xc30>)
 800f762:	fa22 f303 	lsr.w	r3, r2, r3
 800f766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f768:	e018      	b.n	800f79c <UART_SetConfig+0xc58>
 800f76a:	bf00      	nop
 800f76c:	08021c30 	.word	0x08021c30
 800f770:	58024400 	.word	0x58024400
 800f774:	03d09000 	.word	0x03d09000
 800f778:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f77c:	4b24      	ldr	r3, [pc, #144]	@ (800f810 <UART_SetConfig+0xccc>)
 800f77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f780:	e00c      	b.n	800f79c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f782:	4b24      	ldr	r3, [pc, #144]	@ (800f814 <UART_SetConfig+0xcd0>)
 800f784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f786:	e009      	b.n	800f79c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f788:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f78e:	e005      	b.n	800f79c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f790:	2300      	movs	r3, #0
 800f792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f794:	2301      	movs	r3, #1
 800f796:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f79a:	bf00      	nop
    }

    if (pclk != 0U)
 800f79c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d021      	beq.n	800f7e6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7a6:	4a1c      	ldr	r2, [pc, #112]	@ (800f818 <UART_SetConfig+0xcd4>)
 800f7a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7b0:	fbb3 f2f2 	udiv	r2, r3, r2
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	085b      	lsrs	r3, r3, #1
 800f7ba:	441a      	add	r2, r3
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c8:	2b0f      	cmp	r3, #15
 800f7ca:	d909      	bls.n	800f7e0 <UART_SetConfig+0xc9c>
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f7d2:	d205      	bcs.n	800f7e0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d6:	b29a      	uxth	r2, r3
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	60da      	str	r2, [r3, #12]
 800f7de:	e002      	b.n	800f7e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	2200      	movs	r2, #0
 800f800:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f802:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f806:	4618      	mov	r0, r3
 800f808:	3748      	adds	r7, #72	@ 0x48
 800f80a:	46bd      	mov	sp, r7
 800f80c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f810:	03d09000 	.word	0x03d09000
 800f814:	003d0900 	.word	0x003d0900
 800f818:	08021c30 	.word	0x08021c30

0800f81c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b083      	sub	sp, #12
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f828:	f003 0308 	and.w	r3, r3, #8
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d00a      	beq.n	800f846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	430a      	orrs	r2, r1
 800f844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f84a:	f003 0301 	and.w	r3, r3, #1
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d00a      	beq.n	800f868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	430a      	orrs	r2, r1
 800f866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f86c:	f003 0302 	and.w	r3, r3, #2
 800f870:	2b00      	cmp	r3, #0
 800f872:	d00a      	beq.n	800f88a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	430a      	orrs	r2, r1
 800f888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f88e:	f003 0304 	and.w	r3, r3, #4
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00a      	beq.n	800f8ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	430a      	orrs	r2, r1
 800f8aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8b0:	f003 0310 	and.w	r3, r3, #16
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d00a      	beq.n	800f8ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	689b      	ldr	r3, [r3, #8]
 800f8be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	430a      	orrs	r2, r1
 800f8cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8d2:	f003 0320 	and.w	r3, r3, #32
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d00a      	beq.n	800f8f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	689b      	ldr	r3, [r3, #8]
 800f8e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	430a      	orrs	r2, r1
 800f8ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d01a      	beq.n	800f932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	685b      	ldr	r3, [r3, #4]
 800f902:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	430a      	orrs	r2, r1
 800f910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f91a:	d10a      	bne.n	800f932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	430a      	orrs	r2, r1
 800f930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d00a      	beq.n	800f954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	430a      	orrs	r2, r1
 800f952:	605a      	str	r2, [r3, #4]
  }
}
 800f954:	bf00      	nop
 800f956:	370c      	adds	r7, #12
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr

0800f960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b098      	sub	sp, #96	@ 0x60
 800f964:	af02      	add	r7, sp, #8
 800f966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f970:	f7f4 fb5e 	bl	8004030 <HAL_GetTick>
 800f974:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f003 0308 	and.w	r3, r3, #8
 800f980:	2b08      	cmp	r3, #8
 800f982:	d12f      	bne.n	800f9e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f984:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f988:	9300      	str	r3, [sp, #0]
 800f98a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f98c:	2200      	movs	r2, #0
 800f98e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 f88e 	bl	800fab4 <UART_WaitOnFlagUntilTimeout>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d022      	beq.n	800f9e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9a6:	e853 3f00 	ldrex	r3, [r3]
 800f9aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f9ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f9b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800f9be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f9c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f9c4:	e841 2300 	strex	r3, r2, [r1]
 800f9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f9ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d1e6      	bne.n	800f99e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2220      	movs	r2, #32
 800f9d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f9e0:	2303      	movs	r3, #3
 800f9e2:	e063      	b.n	800faac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f003 0304 	and.w	r3, r3, #4
 800f9ee:	2b04      	cmp	r3, #4
 800f9f0:	d149      	bne.n	800fa86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f9f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 f857 	bl	800fab4 <UART_WaitOnFlagUntilTimeout>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d03c      	beq.n	800fa86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa14:	e853 3f00 	ldrex	r3, [r3]
 800fa18:	623b      	str	r3, [r7, #32]
   return(result);
 800fa1a:	6a3b      	ldr	r3, [r7, #32]
 800fa1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fa20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	461a      	mov	r2, r3
 800fa28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800fa2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fa30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa32:	e841 2300 	strex	r3, r2, [r1]
 800fa36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fa38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1e6      	bne.n	800fa0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	3308      	adds	r3, #8
 800fa44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	e853 3f00 	ldrex	r3, [r3]
 800fa4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f023 0301 	bic.w	r3, r3, #1
 800fa54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	3308      	adds	r3, #8
 800fa5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fa5e:	61fa      	str	r2, [r7, #28]
 800fa60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa62:	69b9      	ldr	r1, [r7, #24]
 800fa64:	69fa      	ldr	r2, [r7, #28]
 800fa66:	e841 2300 	strex	r3, r2, [r1]
 800fa6a:	617b      	str	r3, [r7, #20]
   return(result);
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d1e5      	bne.n	800fa3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2220      	movs	r2, #32
 800fa76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa82:	2303      	movs	r3, #3
 800fa84:	e012      	b.n	800faac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2220      	movs	r2, #32
 800fa8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2220      	movs	r2, #32
 800fa92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2200      	movs	r2, #0
 800faa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	3758      	adds	r7, #88	@ 0x58
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	603b      	str	r3, [r7, #0]
 800fac0:	4613      	mov	r3, r2
 800fac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fac4:	e04f      	b.n	800fb66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fac6:	69bb      	ldr	r3, [r7, #24]
 800fac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800facc:	d04b      	beq.n	800fb66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800face:	f7f4 faaf 	bl	8004030 <HAL_GetTick>
 800fad2:	4602      	mov	r2, r0
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	1ad3      	subs	r3, r2, r3
 800fad8:	69ba      	ldr	r2, [r7, #24]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d302      	bcc.n	800fae4 <UART_WaitOnFlagUntilTimeout+0x30>
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d101      	bne.n	800fae8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fae4:	2303      	movs	r3, #3
 800fae6:	e04e      	b.n	800fb86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f003 0304 	and.w	r3, r3, #4
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d037      	beq.n	800fb66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	2b80      	cmp	r3, #128	@ 0x80
 800fafa:	d034      	beq.n	800fb66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	2b40      	cmp	r3, #64	@ 0x40
 800fb00:	d031      	beq.n	800fb66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	69db      	ldr	r3, [r3, #28]
 800fb08:	f003 0308 	and.w	r3, r3, #8
 800fb0c:	2b08      	cmp	r3, #8
 800fb0e:	d110      	bne.n	800fb32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	2208      	movs	r2, #8
 800fb16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	f000 f839 	bl	800fb90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2208      	movs	r2, #8
 800fb22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	e029      	b.n	800fb86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	69db      	ldr	r3, [r3, #28]
 800fb38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fb3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fb40:	d111      	bne.n	800fb66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fb4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fb4c:	68f8      	ldr	r0, [r7, #12]
 800fb4e:	f000 f81f 	bl	800fb90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2220      	movs	r2, #32
 800fb56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fb62:	2303      	movs	r3, #3
 800fb64:	e00f      	b.n	800fb86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	69da      	ldr	r2, [r3, #28]
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	4013      	ands	r3, r2
 800fb70:	68ba      	ldr	r2, [r7, #8]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	bf0c      	ite	eq
 800fb76:	2301      	moveq	r3, #1
 800fb78:	2300      	movne	r3, #0
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	79fb      	ldrb	r3, [r7, #7]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d0a0      	beq.n	800fac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fb84:	2300      	movs	r3, #0
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3710      	adds	r7, #16
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
	...

0800fb90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b095      	sub	sp, #84	@ 0x54
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fba0:	e853 3f00 	ldrex	r3, [r3]
 800fba4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fbac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbb6:	643b      	str	r3, [r7, #64]	@ 0x40
 800fbb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fbbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fbbe:	e841 2300 	strex	r3, r2, [r1]
 800fbc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d1e6      	bne.n	800fb98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	3308      	adds	r3, #8
 800fbd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd2:	6a3b      	ldr	r3, [r7, #32]
 800fbd4:	e853 3f00 	ldrex	r3, [r3]
 800fbd8:	61fb      	str	r3, [r7, #28]
   return(result);
 800fbda:	69fa      	ldr	r2, [r7, #28]
 800fbdc:	4b1e      	ldr	r3, [pc, #120]	@ (800fc58 <UART_EndRxTransfer+0xc8>)
 800fbde:	4013      	ands	r3, r2
 800fbe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	3308      	adds	r3, #8
 800fbe8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fbea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fbec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fbf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fbf2:	e841 2300 	strex	r3, r2, [r1]
 800fbf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d1e5      	bne.n	800fbca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d118      	bne.n	800fc38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	e853 3f00 	ldrex	r3, [r3]
 800fc12:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	f023 0310 	bic.w	r3, r3, #16
 800fc1a:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	461a      	mov	r2, r3
 800fc22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc24:	61bb      	str	r3, [r7, #24]
 800fc26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc28:	6979      	ldr	r1, [r7, #20]
 800fc2a:	69ba      	ldr	r2, [r7, #24]
 800fc2c:	e841 2300 	strex	r3, r2, [r1]
 800fc30:	613b      	str	r3, [r7, #16]
   return(result);
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d1e6      	bne.n	800fc06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2220      	movs	r2, #32
 800fc3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2200      	movs	r2, #0
 800fc44:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fc4c:	bf00      	nop
 800fc4e:	3754      	adds	r7, #84	@ 0x54
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr
 800fc58:	effffffe 	.word	0xeffffffe

0800fc5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b085      	sub	sp, #20
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fc6a:	2b01      	cmp	r3, #1
 800fc6c:	d101      	bne.n	800fc72 <HAL_UARTEx_DisableFifoMode+0x16>
 800fc6e:	2302      	movs	r3, #2
 800fc70:	e027      	b.n	800fcc2 <HAL_UARTEx_DisableFifoMode+0x66>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2201      	movs	r2, #1
 800fc76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2224      	movs	r2, #36	@ 0x24
 800fc7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f022 0201 	bic.w	r2, r2, #1
 800fc98:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fca0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2200      	movs	r2, #0
 800fca6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	68fa      	ldr	r2, [r7, #12]
 800fcae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2220      	movs	r2, #32
 800fcb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fcc0:	2300      	movs	r3, #0
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3714      	adds	r7, #20
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr

0800fcce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b084      	sub	sp, #16
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	6078      	str	r0, [r7, #4]
 800fcd6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d101      	bne.n	800fce6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fce2:	2302      	movs	r3, #2
 800fce4:	e02d      	b.n	800fd42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2201      	movs	r2, #1
 800fcea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2224      	movs	r2, #36	@ 0x24
 800fcf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	681a      	ldr	r2, [r3, #0]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f022 0201 	bic.w	r2, r2, #1
 800fd0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	689b      	ldr	r3, [r3, #8]
 800fd14:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	683a      	ldr	r2, [r7, #0]
 800fd1e:	430a      	orrs	r2, r1
 800fd20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 f850 	bl	800fdc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	68fa      	ldr	r2, [r7, #12]
 800fd2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2220      	movs	r2, #32
 800fd34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd40:	2300      	movs	r3, #0
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3710      	adds	r7, #16
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}

0800fd4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fd4a:	b580      	push	{r7, lr}
 800fd4c:	b084      	sub	sp, #16
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	6078      	str	r0, [r7, #4]
 800fd52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fd5a:	2b01      	cmp	r3, #1
 800fd5c:	d101      	bne.n	800fd62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fd5e:	2302      	movs	r3, #2
 800fd60:	e02d      	b.n	800fdbe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2201      	movs	r2, #1
 800fd66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2224      	movs	r2, #36	@ 0x24
 800fd6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f022 0201 	bic.w	r2, r2, #1
 800fd88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	689b      	ldr	r3, [r3, #8]
 800fd90:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	683a      	ldr	r2, [r7, #0]
 800fd9a:	430a      	orrs	r2, r1
 800fd9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 f812 	bl	800fdc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	68fa      	ldr	r2, [r7, #12]
 800fdaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2220      	movs	r2, #32
 800fdb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fdbc:	2300      	movs	r3, #0
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
	...

0800fdc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b085      	sub	sp, #20
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d108      	bne.n	800fdea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2201      	movs	r2, #1
 800fddc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2201      	movs	r2, #1
 800fde4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fde8:	e031      	b.n	800fe4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fdea:	2310      	movs	r3, #16
 800fdec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fdee:	2310      	movs	r3, #16
 800fdf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	689b      	ldr	r3, [r3, #8]
 800fdf8:	0e5b      	lsrs	r3, r3, #25
 800fdfa:	b2db      	uxtb	r3, r3
 800fdfc:	f003 0307 	and.w	r3, r3, #7
 800fe00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	689b      	ldr	r3, [r3, #8]
 800fe08:	0f5b      	lsrs	r3, r3, #29
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	f003 0307 	and.w	r3, r3, #7
 800fe10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fe12:	7bbb      	ldrb	r3, [r7, #14]
 800fe14:	7b3a      	ldrb	r2, [r7, #12]
 800fe16:	4911      	ldr	r1, [pc, #68]	@ (800fe5c <UARTEx_SetNbDataToProcess+0x94>)
 800fe18:	5c8a      	ldrb	r2, [r1, r2]
 800fe1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fe1e:	7b3a      	ldrb	r2, [r7, #12]
 800fe20:	490f      	ldr	r1, [pc, #60]	@ (800fe60 <UARTEx_SetNbDataToProcess+0x98>)
 800fe22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fe24:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fe30:	7bfb      	ldrb	r3, [r7, #15]
 800fe32:	7b7a      	ldrb	r2, [r7, #13]
 800fe34:	4909      	ldr	r1, [pc, #36]	@ (800fe5c <UARTEx_SetNbDataToProcess+0x94>)
 800fe36:	5c8a      	ldrb	r2, [r1, r2]
 800fe38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fe3c:	7b7a      	ldrb	r2, [r7, #13]
 800fe3e:	4908      	ldr	r1, [pc, #32]	@ (800fe60 <UARTEx_SetNbDataToProcess+0x98>)
 800fe40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fe42:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe46:	b29a      	uxth	r2, r3
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fe4e:	bf00      	nop
 800fe50:	3714      	adds	r7, #20
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr
 800fe5a:	bf00      	nop
 800fe5c:	08021c48 	.word	0x08021c48
 800fe60:	08021c50 	.word	0x08021c50

0800fe64 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fe64:	b084      	sub	sp, #16
 800fe66:	b480      	push	{r7}
 800fe68:	b085      	sub	sp, #20
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	6078      	str	r0, [r7, #4]
 800fe6e:	f107 001c 	add.w	r0, r7, #28
 800fe72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fe76:	2300      	movs	r3, #0
 800fe78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800fe7a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800fe7c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800fe7e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800fe80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800fe82:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800fe84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800fe86:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fe88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800fe8a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	4313      	orrs	r3, r2
 800fe90:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	685a      	ldr	r2, [r3, #4]
 800fe96:	4b07      	ldr	r3, [pc, #28]	@ (800feb4 <SDMMC_Init+0x50>)
 800fe98:	4013      	ands	r3, r2
 800fe9a:	68fa      	ldr	r2, [r7, #12]
 800fe9c:	431a      	orrs	r2, r3
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3714      	adds	r7, #20
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	b004      	add	sp, #16
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	ffc02c00 	.word	0xffc02c00

0800feb8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800feb8:	b480      	push	{r7}
 800feba:	b083      	sub	sp, #12
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	370c      	adds	r7, #12
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr

0800fed2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800fed2:	b480      	push	{r7}
 800fed4:	b083      	sub	sp, #12
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
 800feda:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	681a      	ldr	r2, [r3, #0]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800fee6:	2300      	movs	r3, #0
}
 800fee8:	4618      	mov	r0, r3
 800feea:	370c      	adds	r7, #12
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr

0800fef4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	f043 0203 	orr.w	r2, r3, #3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ff08:	2300      	movs	r3, #0
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	370c      	adds	r7, #12
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr

0800ff16 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800ff16:	b480      	push	{r7}
 800ff18:	b083      	sub	sp, #12
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	f003 0303 	and.w	r3, r3, #3
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	370c      	adds	r7, #12
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr
	...

0800ff34 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b085      	sub	sp, #20
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	681a      	ldr	r2, [r3, #0]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ff52:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ff58:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ff5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ff60:	68fa      	ldr	r2, [r7, #12]
 800ff62:	4313      	orrs	r3, r2
 800ff64:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	68da      	ldr	r2, [r3, #12]
 800ff6a:	4b06      	ldr	r3, [pc, #24]	@ (800ff84 <SDMMC_SendCommand+0x50>)
 800ff6c:	4013      	ands	r3, r2
 800ff6e:	68fa      	ldr	r2, [r7, #12]
 800ff70:	431a      	orrs	r2, r3
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ff76:	2300      	movs	r3, #0
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3714      	adds	r7, #20
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr
 800ff84:	fffee0c0 	.word	0xfffee0c0

0800ff88 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b083      	sub	sp, #12
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	691b      	ldr	r3, [r3, #16]
 800ff94:	b2db      	uxtb	r3, r3
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	370c      	adds	r7, #12
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr

0800ffa2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ffa2:	b480      	push	{r7}
 800ffa4:	b085      	sub	sp, #20
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	6078      	str	r0, [r7, #4]
 800ffaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	3314      	adds	r3, #20
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681b      	ldr	r3, [r3, #0]
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3714      	adds	r7, #20
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr

0800ffc8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b085      	sub	sp, #20
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	685a      	ldr	r2, [r3, #4]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ffee:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800fff4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800fffa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fffc:	68fa      	ldr	r2, [r7, #12]
 800fffe:	4313      	orrs	r3, r2
 8010000:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010006:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	431a      	orrs	r2, r3
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010012:	2300      	movs	r3, #0

}
 8010014:	4618      	mov	r0, r3
 8010016:	3714      	adds	r7, #20
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b088      	sub	sp, #32
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801002e:	2310      	movs	r3, #16
 8010030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010032:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010036:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010038:	2300      	movs	r3, #0
 801003a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801003c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010040:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010042:	f107 0308 	add.w	r3, r7, #8
 8010046:	4619      	mov	r1, r3
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7ff ff73 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801004e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010052:	2110      	movs	r1, #16
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f000 fa5f 	bl	8010518 <SDMMC_GetCmdResp1>
 801005a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801005c:	69fb      	ldr	r3, [r7, #28]
}
 801005e:	4618      	mov	r0, r3
 8010060:	3720      	adds	r7, #32
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}

08010066 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010066:	b580      	push	{r7, lr}
 8010068:	b088      	sub	sp, #32
 801006a:	af00      	add	r7, sp, #0
 801006c:	6078      	str	r0, [r7, #4]
 801006e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010074:	2311      	movs	r3, #17
 8010076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010078:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801007c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801007e:	2300      	movs	r3, #0
 8010080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010082:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010086:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010088:	f107 0308 	add.w	r3, r7, #8
 801008c:	4619      	mov	r1, r3
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7ff ff50 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010098:	2111      	movs	r1, #17
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 fa3c 	bl	8010518 <SDMMC_GetCmdResp1>
 80100a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100a2:	69fb      	ldr	r3, [r7, #28]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3720      	adds	r7, #32
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}

080100ac <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b088      	sub	sp, #32
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80100ba:	2312      	movs	r3, #18
 80100bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80100c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100c4:	2300      	movs	r3, #0
 80100c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100ce:	f107 0308 	add.w	r3, r7, #8
 80100d2:	4619      	mov	r1, r3
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7ff ff2d 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80100da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100de:	2112      	movs	r1, #18
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f000 fa19 	bl	8010518 <SDMMC_GetCmdResp1>
 80100e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100e8:	69fb      	ldr	r3, [r7, #28]
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3720      	adds	r7, #32
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}

080100f2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80100f2:	b580      	push	{r7, lr}
 80100f4:	b088      	sub	sp, #32
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
 80100fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010100:	2318      	movs	r3, #24
 8010102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801010a:	2300      	movs	r3, #0
 801010c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801010e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010112:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010114:	f107 0308 	add.w	r3, r7, #8
 8010118:	4619      	mov	r1, r3
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f7ff ff0a 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010124:	2118      	movs	r1, #24
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 f9f6 	bl	8010518 <SDMMC_GetCmdResp1>
 801012c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801012e:	69fb      	ldr	r3, [r7, #28]
}
 8010130:	4618      	mov	r0, r3
 8010132:	3720      	adds	r7, #32
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b088      	sub	sp, #32
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010146:	2319      	movs	r3, #25
 8010148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801014a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801014e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010150:	2300      	movs	r3, #0
 8010152:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010158:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801015a:	f107 0308 	add.w	r3, r7, #8
 801015e:	4619      	mov	r1, r3
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f7ff fee7 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010166:	f241 3288 	movw	r2, #5000	@ 0x1388
 801016a:	2119      	movs	r1, #25
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 f9d3 	bl	8010518 <SDMMC_GetCmdResp1>
 8010172:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010174:	69fb      	ldr	r3, [r7, #28]
}
 8010176:	4618      	mov	r0, r3
 8010178:	3720      	adds	r7, #32
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}
	...

08010180 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b088      	sub	sp, #32
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010188:	2300      	movs	r3, #0
 801018a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801018c:	230c      	movs	r3, #12
 801018e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010194:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010196:	2300      	movs	r3, #0
 8010198:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801019a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801019e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	68db      	ldr	r3, [r3, #12]
 80101a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	68db      	ldr	r3, [r3, #12]
 80101b0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101b8:	f107 0308 	add.w	r3, r7, #8
 80101bc:	4619      	mov	r1, r3
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f7ff feb8 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80101c4:	4a0b      	ldr	r2, [pc, #44]	@ (80101f4 <SDMMC_CmdStopTransfer+0x74>)
 80101c6:	210c      	movs	r1, #12
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 f9a5 	bl	8010518 <SDMMC_GetCmdResp1>
 80101ce:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80101dc:	69fb      	ldr	r3, [r7, #28]
 80101de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80101e2:	d101      	bne.n	80101e8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80101e4:	2300      	movs	r3, #0
 80101e6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80101e8:	69fb      	ldr	r3, [r7, #28]
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3720      	adds	r7, #32
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	05f5e100 	.word	0x05f5e100

080101f8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b088      	sub	sp, #32
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010206:	2307      	movs	r3, #7
 8010208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801020a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801020e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010210:	2300      	movs	r3, #0
 8010212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010218:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801021a:	f107 0308 	add.w	r3, r7, #8
 801021e:	4619      	mov	r1, r3
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f7ff fe87 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010226:	f241 3288 	movw	r2, #5000	@ 0x1388
 801022a:	2107      	movs	r1, #7
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f000 f973 	bl	8010518 <SDMMC_GetCmdResp1>
 8010232:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010234:	69fb      	ldr	r3, [r7, #28]
}
 8010236:	4618      	mov	r0, r3
 8010238:	3720      	adds	r7, #32
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}

0801023e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801023e:	b580      	push	{r7, lr}
 8010240:	b088      	sub	sp, #32
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010246:	2300      	movs	r3, #0
 8010248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801024a:	2300      	movs	r3, #0
 801024c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801024e:	2300      	movs	r3, #0
 8010250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010252:	2300      	movs	r3, #0
 8010254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801025a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801025c:	f107 0308 	add.w	r3, r7, #8
 8010260:	4619      	mov	r1, r3
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f7ff fe66 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 fb97 	bl	801099c <SDMMC_GetCmdError>
 801026e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010270:	69fb      	ldr	r3, [r7, #28]
}
 8010272:	4618      	mov	r0, r3
 8010274:	3720      	adds	r7, #32
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}

0801027a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801027a:	b580      	push	{r7, lr}
 801027c:	b088      	sub	sp, #32
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010282:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010286:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010288:	2308      	movs	r3, #8
 801028a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801028c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010290:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010292:	2300      	movs	r3, #0
 8010294:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801029a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801029c:	f107 0308 	add.w	r3, r7, #8
 80102a0:	4619      	mov	r1, r3
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f7ff fe46 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f000 fb29 	bl	8010900 <SDMMC_GetCmdResp7>
 80102ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102b0:	69fb      	ldr	r3, [r7, #28]
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	3720      	adds	r7, #32
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}

080102ba <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80102ba:	b580      	push	{r7, lr}
 80102bc:	b088      	sub	sp, #32
 80102be:	af00      	add	r7, sp, #0
 80102c0:	6078      	str	r0, [r7, #4]
 80102c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80102c8:	2337      	movs	r3, #55	@ 0x37
 80102ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102d2:	2300      	movs	r3, #0
 80102d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80102da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102dc:	f107 0308 	add.w	r3, r7, #8
 80102e0:	4619      	mov	r1, r3
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f7ff fe26 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80102e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102ec:	2137      	movs	r1, #55	@ 0x37
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f000 f912 	bl	8010518 <SDMMC_GetCmdResp1>
 80102f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102f6:	69fb      	ldr	r3, [r7, #28]
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3720      	adds	r7, #32
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b088      	sub	sp, #32
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801030e:	2329      	movs	r3, #41	@ 0x29
 8010310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010312:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010316:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010318:	2300      	movs	r3, #0
 801031a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801031c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010320:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010322:	f107 0308 	add.w	r3, r7, #8
 8010326:	4619      	mov	r1, r3
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f7ff fe03 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 fa2e 	bl	8010790 <SDMMC_GetCmdResp3>
 8010334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010336:	69fb      	ldr	r3, [r7, #28]
}
 8010338:	4618      	mov	r0, r3
 801033a:	3720      	adds	r7, #32
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}

08010340 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b088      	sub	sp, #32
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801034e:	2306      	movs	r3, #6
 8010350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010352:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010358:	2300      	movs	r3, #0
 801035a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801035c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010360:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010362:	f107 0308 	add.w	r3, r7, #8
 8010366:	4619      	mov	r1, r3
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f7ff fde3 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801036e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010372:	2106      	movs	r1, #6
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f000 f8cf 	bl	8010518 <SDMMC_GetCmdResp1>
 801037a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801037c:	69fb      	ldr	r3, [r7, #28]
}
 801037e:	4618      	mov	r0, r3
 8010380:	3720      	adds	r7, #32
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}

08010386 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010386:	b580      	push	{r7, lr}
 8010388:	b088      	sub	sp, #32
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801038e:	2300      	movs	r3, #0
 8010390:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010392:	2333      	movs	r3, #51	@ 0x33
 8010394:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010396:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801039a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801039c:	2300      	movs	r3, #0
 801039e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103a6:	f107 0308 	add.w	r3, r7, #8
 80103aa:	4619      	mov	r1, r3
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f7ff fdc1 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80103b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103b6:	2133      	movs	r1, #51	@ 0x33
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f000 f8ad 	bl	8010518 <SDMMC_GetCmdResp1>
 80103be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103c0:	69fb      	ldr	r3, [r7, #28]
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3720      	adds	r7, #32
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}

080103ca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80103ca:	b580      	push	{r7, lr}
 80103cc:	b088      	sub	sp, #32
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80103d2:	2300      	movs	r3, #0
 80103d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80103d6:	2302      	movs	r3, #2
 80103d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80103da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80103de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103e0:	2300      	movs	r3, #0
 80103e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80103e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103ea:	f107 0308 	add.w	r3, r7, #8
 80103ee:	4619      	mov	r1, r3
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f7ff fd9f 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f000 f980 	bl	80106fc <SDMMC_GetCmdResp2>
 80103fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103fe:	69fb      	ldr	r3, [r7, #28]
}
 8010400:	4618      	mov	r0, r3
 8010402:	3720      	adds	r7, #32
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}

08010408 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b088      	sub	sp, #32
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010416:	2309      	movs	r3, #9
 8010418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801041a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801041e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010420:	2300      	movs	r3, #0
 8010422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010428:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801042a:	f107 0308 	add.w	r3, r7, #8
 801042e:	4619      	mov	r1, r3
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f7ff fd7f 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 f960 	bl	80106fc <SDMMC_GetCmdResp2>
 801043c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801043e:	69fb      	ldr	r3, [r7, #28]
}
 8010440:	4618      	mov	r0, r3
 8010442:	3720      	adds	r7, #32
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b088      	sub	sp, #32
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010452:	2300      	movs	r3, #0
 8010454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010456:	2303      	movs	r3, #3
 8010458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801045a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801045e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010460:	2300      	movs	r3, #0
 8010462:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010468:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801046a:	f107 0308 	add.w	r3, r7, #8
 801046e:	4619      	mov	r1, r3
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f7ff fd5f 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010476:	683a      	ldr	r2, [r7, #0]
 8010478:	2103      	movs	r1, #3
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 f9c8 	bl	8010810 <SDMMC_GetCmdResp6>
 8010480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010482:	69fb      	ldr	r3, [r7, #28]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3720      	adds	r7, #32
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b088      	sub	sp, #32
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801049a:	230d      	movs	r3, #13
 801049c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801049e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80104a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104a4:	2300      	movs	r3, #0
 80104a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104ae:	f107 0308 	add.w	r3, r7, #8
 80104b2:	4619      	mov	r1, r3
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f7ff fd3d 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80104ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80104be:	210d      	movs	r1, #13
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f000 f829 	bl	8010518 <SDMMC_GetCmdResp1>
 80104c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104c8:	69fb      	ldr	r3, [r7, #28]
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3720      	adds	r7, #32
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}

080104d2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80104d2:	b580      	push	{r7, lr}
 80104d4:	b088      	sub	sp, #32
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80104da:	2300      	movs	r3, #0
 80104dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80104de:	230d      	movs	r3, #13
 80104e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80104e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104e8:	2300      	movs	r3, #0
 80104ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80104f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104f2:	f107 0308 	add.w	r3, r7, #8
 80104f6:	4619      	mov	r1, r3
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7ff fd1b 	bl	800ff34 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80104fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010502:	210d      	movs	r1, #13
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 f807 	bl	8010518 <SDMMC_GetCmdResp1>
 801050a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801050c:	69fb      	ldr	r3, [r7, #28]
}
 801050e:	4618      	mov	r0, r3
 8010510:	3720      	adds	r7, #32
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
	...

08010518 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b088      	sub	sp, #32
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	460b      	mov	r3, r1
 8010522:	607a      	str	r2, [r7, #4]
 8010524:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010526:	4b70      	ldr	r3, [pc, #448]	@ (80106e8 <SDMMC_GetCmdResp1+0x1d0>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4a70      	ldr	r2, [pc, #448]	@ (80106ec <SDMMC_GetCmdResp1+0x1d4>)
 801052c:	fba2 2303 	umull	r2, r3, r2, r3
 8010530:	0a5a      	lsrs	r2, r3, #9
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	fb02 f303 	mul.w	r3, r2, r3
 8010538:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801053a:	69fb      	ldr	r3, [r7, #28]
 801053c:	1e5a      	subs	r2, r3, #1
 801053e:	61fa      	str	r2, [r7, #28]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d102      	bne.n	801054a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010544:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010548:	e0c9      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801054e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010550:	69ba      	ldr	r2, [r7, #24]
 8010552:	4b67      	ldr	r3, [pc, #412]	@ (80106f0 <SDMMC_GetCmdResp1+0x1d8>)
 8010554:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010556:	2b00      	cmp	r3, #0
 8010558:	d0ef      	beq.n	801053a <SDMMC_GetCmdResp1+0x22>
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010560:	2b00      	cmp	r3, #0
 8010562:	d1ea      	bne.n	801053a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010568:	f003 0304 	and.w	r3, r3, #4
 801056c:	2b00      	cmp	r3, #0
 801056e:	d004      	beq.n	801057a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2204      	movs	r2, #4
 8010574:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010576:	2304      	movs	r3, #4
 8010578:	e0b1      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801057e:	f003 0301 	and.w	r3, r3, #1
 8010582:	2b00      	cmp	r3, #0
 8010584:	d004      	beq.n	8010590 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	2201      	movs	r2, #1
 801058a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801058c:	2301      	movs	r3, #1
 801058e:	e0a6      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	4a58      	ldr	r2, [pc, #352]	@ (80106f4 <SDMMC_GetCmdResp1+0x1dc>)
 8010594:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010596:	68f8      	ldr	r0, [r7, #12]
 8010598:	f7ff fcf6 	bl	800ff88 <SDMMC_GetCommandResponse>
 801059c:	4603      	mov	r3, r0
 801059e:	461a      	mov	r2, r3
 80105a0:	7afb      	ldrb	r3, [r7, #11]
 80105a2:	4293      	cmp	r3, r2
 80105a4:	d001      	beq.n	80105aa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80105a6:	2301      	movs	r3, #1
 80105a8:	e099      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80105aa:	2100      	movs	r1, #0
 80105ac:	68f8      	ldr	r0, [r7, #12]
 80105ae:	f7ff fcf8 	bl	800ffa2 <SDMMC_GetResponse>
 80105b2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80105b4:	697a      	ldr	r2, [r7, #20]
 80105b6:	4b50      	ldr	r3, [pc, #320]	@ (80106f8 <SDMMC_GetCmdResp1+0x1e0>)
 80105b8:	4013      	ands	r3, r2
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d101      	bne.n	80105c2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80105be:	2300      	movs	r3, #0
 80105c0:	e08d      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	da02      	bge.n	80105ce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80105c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80105cc:	e087      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d001      	beq.n	80105dc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80105d8:	2340      	movs	r3, #64	@ 0x40
 80105da:	e080      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d001      	beq.n	80105ea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80105e6:	2380      	movs	r3, #128	@ 0x80
 80105e8:	e079      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d002      	beq.n	80105fa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80105f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80105f8:	e071      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010600:	2b00      	cmp	r3, #0
 8010602:	d002      	beq.n	801060a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010604:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010608:	e069      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010610:	2b00      	cmp	r3, #0
 8010612:	d002      	beq.n	801061a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010614:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010618:	e061      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010620:	2b00      	cmp	r3, #0
 8010622:	d002      	beq.n	801062a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010624:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010628:	e059      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010630:	2b00      	cmp	r3, #0
 8010632:	d002      	beq.n	801063a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010638:	e051      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010640:	2b00      	cmp	r3, #0
 8010642:	d002      	beq.n	801064a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010644:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010648:	e049      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010650:	2b00      	cmp	r3, #0
 8010652:	d002      	beq.n	801065a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010654:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010658:	e041      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010660:	2b00      	cmp	r3, #0
 8010662:	d002      	beq.n	801066a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010664:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010668:	e039      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010670:	2b00      	cmp	r3, #0
 8010672:	d002      	beq.n	801067a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010674:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010678:	e031      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010680:	2b00      	cmp	r3, #0
 8010682:	d002      	beq.n	801068a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010684:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010688:	e029      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010690:	2b00      	cmp	r3, #0
 8010692:	d002      	beq.n	801069a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010694:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010698:	e021      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d002      	beq.n	80106aa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80106a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80106a8:	e019      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d002      	beq.n	80106ba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80106b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80106b8:	e011      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d002      	beq.n	80106ca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80106c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80106c8:	e009      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	f003 0308 	and.w	r3, r3, #8
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d002      	beq.n	80106da <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80106d4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80106d8:	e001      	b.n	80106de <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80106da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3720      	adds	r7, #32
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
 80106e6:	bf00      	nop
 80106e8:	24000000 	.word	0x24000000
 80106ec:	10624dd3 	.word	0x10624dd3
 80106f0:	00200045 	.word	0x00200045
 80106f4:	002000c5 	.word	0x002000c5
 80106f8:	fdffe008 	.word	0xfdffe008

080106fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b085      	sub	sp, #20
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010704:	4b1f      	ldr	r3, [pc, #124]	@ (8010784 <SDMMC_GetCmdResp2+0x88>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	4a1f      	ldr	r2, [pc, #124]	@ (8010788 <SDMMC_GetCmdResp2+0x8c>)
 801070a:	fba2 2303 	umull	r2, r3, r2, r3
 801070e:	0a5b      	lsrs	r3, r3, #9
 8010710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010714:	fb02 f303 	mul.w	r3, r2, r3
 8010718:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	1e5a      	subs	r2, r3, #1
 801071e:	60fa      	str	r2, [r7, #12]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d102      	bne.n	801072a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010724:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010728:	e026      	b.n	8010778 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801072e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010736:	2b00      	cmp	r3, #0
 8010738:	d0ef      	beq.n	801071a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010740:	2b00      	cmp	r3, #0
 8010742:	d1ea      	bne.n	801071a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010748:	f003 0304 	and.w	r3, r3, #4
 801074c:	2b00      	cmp	r3, #0
 801074e:	d004      	beq.n	801075a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2204      	movs	r2, #4
 8010754:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010756:	2304      	movs	r3, #4
 8010758:	e00e      	b.n	8010778 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801075e:	f003 0301 	and.w	r3, r3, #1
 8010762:	2b00      	cmp	r3, #0
 8010764:	d004      	beq.n	8010770 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2201      	movs	r2, #1
 801076a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801076c:	2301      	movs	r3, #1
 801076e:	e003      	b.n	8010778 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	4a06      	ldr	r2, [pc, #24]	@ (801078c <SDMMC_GetCmdResp2+0x90>)
 8010774:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010776:	2300      	movs	r3, #0
}
 8010778:	4618      	mov	r0, r3
 801077a:	3714      	adds	r7, #20
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr
 8010784:	24000000 	.word	0x24000000
 8010788:	10624dd3 	.word	0x10624dd3
 801078c:	002000c5 	.word	0x002000c5

08010790 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010790:	b480      	push	{r7}
 8010792:	b085      	sub	sp, #20
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010798:	4b1a      	ldr	r3, [pc, #104]	@ (8010804 <SDMMC_GetCmdResp3+0x74>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	4a1a      	ldr	r2, [pc, #104]	@ (8010808 <SDMMC_GetCmdResp3+0x78>)
 801079e:	fba2 2303 	umull	r2, r3, r2, r3
 80107a2:	0a5b      	lsrs	r3, r3, #9
 80107a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107a8:	fb02 f303 	mul.w	r3, r2, r3
 80107ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	1e5a      	subs	r2, r3, #1
 80107b2:	60fa      	str	r2, [r7, #12]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d102      	bne.n	80107be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80107bc:	e01b      	b.n	80107f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107c2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d0ef      	beq.n	80107ae <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d1ea      	bne.n	80107ae <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107dc:	f003 0304 	and.w	r3, r3, #4
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d004      	beq.n	80107ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2204      	movs	r2, #4
 80107e8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107ea:	2304      	movs	r3, #4
 80107ec:	e003      	b.n	80107f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	4a06      	ldr	r2, [pc, #24]	@ (801080c <SDMMC_GetCmdResp3+0x7c>)
 80107f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80107f4:	2300      	movs	r3, #0
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3714      	adds	r7, #20
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop
 8010804:	24000000 	.word	0x24000000
 8010808:	10624dd3 	.word	0x10624dd3
 801080c:	002000c5 	.word	0x002000c5

08010810 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b088      	sub	sp, #32
 8010814:	af00      	add	r7, sp, #0
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	460b      	mov	r3, r1
 801081a:	607a      	str	r2, [r7, #4]
 801081c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801081e:	4b35      	ldr	r3, [pc, #212]	@ (80108f4 <SDMMC_GetCmdResp6+0xe4>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	4a35      	ldr	r2, [pc, #212]	@ (80108f8 <SDMMC_GetCmdResp6+0xe8>)
 8010824:	fba2 2303 	umull	r2, r3, r2, r3
 8010828:	0a5b      	lsrs	r3, r3, #9
 801082a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801082e:	fb02 f303 	mul.w	r3, r2, r3
 8010832:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	1e5a      	subs	r2, r3, #1
 8010838:	61fa      	str	r2, [r7, #28]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d102      	bne.n	8010844 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801083e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010842:	e052      	b.n	80108ea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010848:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801084a:	69bb      	ldr	r3, [r7, #24]
 801084c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010850:	2b00      	cmp	r3, #0
 8010852:	d0ef      	beq.n	8010834 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010854:	69bb      	ldr	r3, [r7, #24]
 8010856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801085a:	2b00      	cmp	r3, #0
 801085c:	d1ea      	bne.n	8010834 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010862:	f003 0304 	and.w	r3, r3, #4
 8010866:	2b00      	cmp	r3, #0
 8010868:	d004      	beq.n	8010874 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2204      	movs	r2, #4
 801086e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010870:	2304      	movs	r3, #4
 8010872:	e03a      	b.n	80108ea <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010878:	f003 0301 	and.w	r3, r3, #1
 801087c:	2b00      	cmp	r3, #0
 801087e:	d004      	beq.n	801088a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2201      	movs	r2, #1
 8010884:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010886:	2301      	movs	r3, #1
 8010888:	e02f      	b.n	80108ea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	f7ff fb7c 	bl	800ff88 <SDMMC_GetCommandResponse>
 8010890:	4603      	mov	r3, r0
 8010892:	461a      	mov	r2, r3
 8010894:	7afb      	ldrb	r3, [r7, #11]
 8010896:	4293      	cmp	r3, r2
 8010898:	d001      	beq.n	801089e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801089a:	2301      	movs	r3, #1
 801089c:	e025      	b.n	80108ea <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	4a16      	ldr	r2, [pc, #88]	@ (80108fc <SDMMC_GetCmdResp6+0xec>)
 80108a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80108a4:	2100      	movs	r1, #0
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f7ff fb7b 	bl	800ffa2 <SDMMC_GetResponse>
 80108ac:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d106      	bne.n	80108c6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	0c1b      	lsrs	r3, r3, #16
 80108bc:	b29a      	uxth	r2, r3
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80108c2:	2300      	movs	r3, #0
 80108c4:	e011      	b.n	80108ea <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d002      	beq.n	80108d6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80108d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80108d4:	e009      	b.n	80108ea <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d002      	beq.n	80108e6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80108e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80108e4:	e001      	b.n	80108ea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80108e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3720      	adds	r7, #32
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	24000000 	.word	0x24000000
 80108f8:	10624dd3 	.word	0x10624dd3
 80108fc:	002000c5 	.word	0x002000c5

08010900 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010900:	b480      	push	{r7}
 8010902:	b085      	sub	sp, #20
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010908:	4b22      	ldr	r3, [pc, #136]	@ (8010994 <SDMMC_GetCmdResp7+0x94>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4a22      	ldr	r2, [pc, #136]	@ (8010998 <SDMMC_GetCmdResp7+0x98>)
 801090e:	fba2 2303 	umull	r2, r3, r2, r3
 8010912:	0a5b      	lsrs	r3, r3, #9
 8010914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010918:	fb02 f303 	mul.w	r3, r2, r3
 801091c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	1e5a      	subs	r2, r3, #1
 8010922:	60fa      	str	r2, [r7, #12]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d102      	bne.n	801092e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010928:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801092c:	e02c      	b.n	8010988 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010932:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801093a:	2b00      	cmp	r3, #0
 801093c:	d0ef      	beq.n	801091e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010944:	2b00      	cmp	r3, #0
 8010946:	d1ea      	bne.n	801091e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801094c:	f003 0304 	and.w	r3, r3, #4
 8010950:	2b00      	cmp	r3, #0
 8010952:	d004      	beq.n	801095e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2204      	movs	r2, #4
 8010958:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801095a:	2304      	movs	r3, #4
 801095c:	e014      	b.n	8010988 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010962:	f003 0301 	and.w	r3, r3, #1
 8010966:	2b00      	cmp	r3, #0
 8010968:	d004      	beq.n	8010974 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2201      	movs	r2, #1
 801096e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010970:	2301      	movs	r3, #1
 8010972:	e009      	b.n	8010988 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801097c:	2b00      	cmp	r3, #0
 801097e:	d002      	beq.n	8010986 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2240      	movs	r2, #64	@ 0x40
 8010984:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010986:	2300      	movs	r3, #0

}
 8010988:	4618      	mov	r0, r3
 801098a:	3714      	adds	r7, #20
 801098c:	46bd      	mov	sp, r7
 801098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010992:	4770      	bx	lr
 8010994:	24000000 	.word	0x24000000
 8010998:	10624dd3 	.word	0x10624dd3

0801099c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801099c:	b480      	push	{r7}
 801099e:	b085      	sub	sp, #20
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109a4:	4b11      	ldr	r3, [pc, #68]	@ (80109ec <SDMMC_GetCmdError+0x50>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4a11      	ldr	r2, [pc, #68]	@ (80109f0 <SDMMC_GetCmdError+0x54>)
 80109aa:	fba2 2303 	umull	r2, r3, r2, r3
 80109ae:	0a5b      	lsrs	r3, r3, #9
 80109b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109b4:	fb02 f303 	mul.w	r3, r2, r3
 80109b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	1e5a      	subs	r2, r3, #1
 80109be:	60fa      	str	r2, [r7, #12]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d102      	bne.n	80109ca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80109c8:	e009      	b.n	80109de <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d0f1      	beq.n	80109ba <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4a06      	ldr	r2, [pc, #24]	@ (80109f4 <SDMMC_GetCmdError+0x58>)
 80109da:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80109dc:	2300      	movs	r3, #0
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3714      	adds	r7, #20
 80109e2:	46bd      	mov	sp, r7
 80109e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e8:	4770      	bx	lr
 80109ea:	bf00      	nop
 80109ec:	24000000 	.word	0x24000000
 80109f0:	10624dd3 	.word	0x10624dd3
 80109f4:	002000c5 	.word	0x002000c5

080109f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80109f8:	b084      	sub	sp, #16
 80109fa:	b580      	push	{r7, lr}
 80109fc:	b084      	sub	sp, #16
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
 8010a02:	f107 001c 	add.w	r0, r7, #28
 8010a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010a0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	d121      	bne.n	8010a56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	68da      	ldr	r2, [r3, #12]
 8010a22:	4b2c      	ldr	r3, [pc, #176]	@ (8010ad4 <USB_CoreInit+0xdc>)
 8010a24:	4013      	ands	r3, r2
 8010a26:	687a      	ldr	r2, [r7, #4]
 8010a28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	68db      	ldr	r3, [r3, #12]
 8010a2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010a36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	d105      	bne.n	8010a4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	68db      	ldr	r3, [r3, #12]
 8010a42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f000 faaa 	bl	8010fa4 <USB_CoreReset>
 8010a50:	4603      	mov	r3, r0
 8010a52:	73fb      	strb	r3, [r7, #15]
 8010a54:	e01b      	b.n	8010a8e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	68db      	ldr	r3, [r3, #12]
 8010a5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 fa9e 	bl	8010fa4 <USB_CoreReset>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010a6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d106      	bne.n	8010a82 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8010a80:	e005      	b.n	8010a8e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010a8e:	7fbb      	ldrb	r3, [r7, #30]
 8010a90:	2b01      	cmp	r3, #1
 8010a92:	d116      	bne.n	8010ac2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a98:	b29a      	uxth	r2, r3
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8010ad8 <USB_CoreInit+0xe0>)
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	689b      	ldr	r3, [r3, #8]
 8010aae:	f043 0206 	orr.w	r2, r3, #6
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	689b      	ldr	r3, [r3, #8]
 8010aba:	f043 0220 	orr.w	r2, r3, #32
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3710      	adds	r7, #16
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010ace:	b004      	add	sp, #16
 8010ad0:	4770      	bx	lr
 8010ad2:	bf00      	nop
 8010ad4:	ffbdffbf 	.word	0xffbdffbf
 8010ad8:	03ee0000 	.word	0x03ee0000

08010adc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010adc:	b480      	push	{r7}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	689b      	ldr	r3, [r3, #8]
 8010ae8:	f023 0201 	bic.w	r2, r3, #1
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010af0:	2300      	movs	r3, #0
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	370c      	adds	r7, #12
 8010af6:	46bd      	mov	sp, r7
 8010af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afc:	4770      	bx	lr

08010afe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010afe:	b580      	push	{r7, lr}
 8010b00:	b084      	sub	sp, #16
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	460b      	mov	r3, r1
 8010b08:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	68db      	ldr	r3, [r3, #12]
 8010b12:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010b1a:	78fb      	ldrb	r3, [r7, #3]
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	d115      	bne.n	8010b4c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	68db      	ldr	r3, [r3, #12]
 8010b24:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010b2c:	200a      	movs	r0, #10
 8010b2e:	f7f3 fa8b 	bl	8004048 <HAL_Delay>
      ms += 10U;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	330a      	adds	r3, #10
 8010b36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f000 fa25 	bl	8010f88 <USB_GetMode>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d01e      	beq.n	8010b82 <USB_SetCurrentMode+0x84>
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2bc7      	cmp	r3, #199	@ 0xc7
 8010b48:	d9f0      	bls.n	8010b2c <USB_SetCurrentMode+0x2e>
 8010b4a:	e01a      	b.n	8010b82 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010b4c:	78fb      	ldrb	r3, [r7, #3]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d115      	bne.n	8010b7e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	68db      	ldr	r3, [r3, #12]
 8010b56:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010b5e:	200a      	movs	r0, #10
 8010b60:	f7f3 fa72 	bl	8004048 <HAL_Delay>
      ms += 10U;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	330a      	adds	r3, #10
 8010b68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f000 fa0c 	bl	8010f88 <USB_GetMode>
 8010b70:	4603      	mov	r3, r0
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d005      	beq.n	8010b82 <USB_SetCurrentMode+0x84>
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2bc7      	cmp	r3, #199	@ 0xc7
 8010b7a:	d9f0      	bls.n	8010b5e <USB_SetCurrentMode+0x60>
 8010b7c:	e001      	b.n	8010b82 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010b7e:	2301      	movs	r3, #1
 8010b80:	e005      	b.n	8010b8e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2bc8      	cmp	r3, #200	@ 0xc8
 8010b86:	d101      	bne.n	8010b8c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010b88:	2301      	movs	r3, #1
 8010b8a:	e000      	b.n	8010b8e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010b8c:	2300      	movs	r3, #0
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3710      	adds	r7, #16
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
	...

08010b98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010b98:	b084      	sub	sp, #16
 8010b9a:	b580      	push	{r7, lr}
 8010b9c:	b086      	sub	sp, #24
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
 8010ba2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010baa:	2300      	movs	r3, #0
 8010bac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	613b      	str	r3, [r7, #16]
 8010bb6:	e009      	b.n	8010bcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	693b      	ldr	r3, [r7, #16]
 8010bbc:	3340      	adds	r3, #64	@ 0x40
 8010bbe:	009b      	lsls	r3, r3, #2
 8010bc0:	4413      	add	r3, r2
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	3301      	adds	r3, #1
 8010bca:	613b      	str	r3, [r7, #16]
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	2b0e      	cmp	r3, #14
 8010bd0:	d9f2      	bls.n	8010bb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010bd2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d11c      	bne.n	8010c14 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010be0:	685b      	ldr	r3, [r3, #4]
 8010be2:	68fa      	ldr	r2, [r7, #12]
 8010be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010be8:	f043 0302 	orr.w	r3, r3, #2
 8010bec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010bf2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	601a      	str	r2, [r3, #0]
 8010c12:	e005      	b.n	8010c20 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c18:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010c26:	461a      	mov	r2, r3
 8010c28:	2300      	movs	r3, #0
 8010c2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010c2c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d10d      	bne.n	8010c50 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010c34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d104      	bne.n	8010c46 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010c3c:	2100      	movs	r1, #0
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f000 f968 	bl	8010f14 <USB_SetDevSpeed>
 8010c44:	e008      	b.n	8010c58 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010c46:	2101      	movs	r1, #1
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f000 f963 	bl	8010f14 <USB_SetDevSpeed>
 8010c4e:	e003      	b.n	8010c58 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010c50:	2103      	movs	r1, #3
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f000 f95e 	bl	8010f14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010c58:	2110      	movs	r1, #16
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f000 f8fa 	bl	8010e54 <USB_FlushTxFifo>
 8010c60:	4603      	mov	r3, r0
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d001      	beq.n	8010c6a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8010c66:	2301      	movs	r3, #1
 8010c68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 f924 	bl	8010eb8 <USB_FlushRxFifo>
 8010c70:	4603      	mov	r3, r0
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d001      	beq.n	8010c7a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8010c76:	2301      	movs	r3, #1
 8010c78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c80:	461a      	mov	r2, r3
 8010c82:	2300      	movs	r3, #0
 8010c84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	2300      	movs	r3, #0
 8010c90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c98:	461a      	mov	r2, r3
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	613b      	str	r3, [r7, #16]
 8010ca2:	e043      	b.n	8010d2c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	015a      	lsls	r2, r3, #5
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	4413      	add	r3, r2
 8010cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010cba:	d118      	bne.n	8010cee <USB_DevInit+0x156>
    {
      if (i == 0U)
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d10a      	bne.n	8010cd8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	015a      	lsls	r2, r3, #5
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	4413      	add	r3, r2
 8010cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010cce:	461a      	mov	r2, r3
 8010cd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010cd4:	6013      	str	r3, [r2, #0]
 8010cd6:	e013      	b.n	8010d00 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010cd8:	693b      	ldr	r3, [r7, #16]
 8010cda:	015a      	lsls	r2, r3, #5
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	4413      	add	r3, r2
 8010ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ce4:	461a      	mov	r2, r3
 8010ce6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010cea:	6013      	str	r3, [r2, #0]
 8010cec:	e008      	b.n	8010d00 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	015a      	lsls	r2, r3, #5
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	4413      	add	r3, r2
 8010cf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010cfa:	461a      	mov	r2, r3
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	015a      	lsls	r2, r3, #5
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	4413      	add	r3, r2
 8010d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d0c:	461a      	mov	r2, r3
 8010d0e:	2300      	movs	r3, #0
 8010d10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	015a      	lsls	r2, r3, #5
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	4413      	add	r3, r2
 8010d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d1e:	461a      	mov	r2, r3
 8010d20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010d24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	3301      	adds	r3, #1
 8010d2a:	613b      	str	r3, [r7, #16]
 8010d2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010d30:	461a      	mov	r2, r3
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d3b5      	bcc.n	8010ca4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010d38:	2300      	movs	r3, #0
 8010d3a:	613b      	str	r3, [r7, #16]
 8010d3c:	e043      	b.n	8010dc6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	015a      	lsls	r2, r3, #5
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	4413      	add	r3, r2
 8010d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010d50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010d54:	d118      	bne.n	8010d88 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d10a      	bne.n	8010d72 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	015a      	lsls	r2, r3, #5
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	4413      	add	r3, r2
 8010d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d68:	461a      	mov	r2, r3
 8010d6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010d6e:	6013      	str	r3, [r2, #0]
 8010d70:	e013      	b.n	8010d9a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	015a      	lsls	r2, r3, #5
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	4413      	add	r3, r2
 8010d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d7e:	461a      	mov	r2, r3
 8010d80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010d84:	6013      	str	r3, [r2, #0]
 8010d86:	e008      	b.n	8010d9a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	015a      	lsls	r2, r3, #5
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	4413      	add	r3, r2
 8010d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d94:	461a      	mov	r2, r3
 8010d96:	2300      	movs	r3, #0
 8010d98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	015a      	lsls	r2, r3, #5
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	4413      	add	r3, r2
 8010da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010da6:	461a      	mov	r2, r3
 8010da8:	2300      	movs	r3, #0
 8010daa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	015a      	lsls	r2, r3, #5
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	4413      	add	r3, r2
 8010db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010db8:	461a      	mov	r2, r3
 8010dba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010dbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010dc0:	693b      	ldr	r3, [r7, #16]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	613b      	str	r3, [r7, #16]
 8010dc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010dca:	461a      	mov	r2, r3
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d3b5      	bcc.n	8010d3e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010dd8:	691b      	ldr	r3, [r3, #16]
 8010dda:	68fa      	ldr	r2, [r7, #12]
 8010ddc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010de4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2200      	movs	r2, #0
 8010dea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8010df2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010df4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d105      	bne.n	8010e08 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	699b      	ldr	r3, [r3, #24]
 8010e00:	f043 0210 	orr.w	r2, r3, #16
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	699a      	ldr	r2, [r3, #24]
 8010e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8010e4c <USB_DevInit+0x2b4>)
 8010e0e:	4313      	orrs	r3, r2
 8010e10:	687a      	ldr	r2, [r7, #4]
 8010e12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010e14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d005      	beq.n	8010e28 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	699b      	ldr	r3, [r3, #24]
 8010e20:	f043 0208 	orr.w	r2, r3, #8
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010e28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010e2c:	2b01      	cmp	r3, #1
 8010e2e:	d105      	bne.n	8010e3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	699a      	ldr	r2, [r3, #24]
 8010e34:	4b06      	ldr	r3, [pc, #24]	@ (8010e50 <USB_DevInit+0x2b8>)
 8010e36:	4313      	orrs	r3, r2
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3718      	adds	r7, #24
 8010e42:	46bd      	mov	sp, r7
 8010e44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010e48:	b004      	add	sp, #16
 8010e4a:	4770      	bx	lr
 8010e4c:	803c3800 	.word	0x803c3800
 8010e50:	40000004 	.word	0x40000004

08010e54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010e54:	b480      	push	{r7}
 8010e56:	b085      	sub	sp, #20
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	3301      	adds	r3, #1
 8010e66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010e6e:	d901      	bls.n	8010e74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010e70:	2303      	movs	r3, #3
 8010e72:	e01b      	b.n	8010eac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	691b      	ldr	r3, [r3, #16]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	daf2      	bge.n	8010e62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	019b      	lsls	r3, r3, #6
 8010e84:	f043 0220 	orr.w	r2, r3, #32
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	3301      	adds	r3, #1
 8010e90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010e98:	d901      	bls.n	8010e9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010e9a:	2303      	movs	r3, #3
 8010e9c:	e006      	b.n	8010eac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	691b      	ldr	r3, [r3, #16]
 8010ea2:	f003 0320 	and.w	r3, r3, #32
 8010ea6:	2b20      	cmp	r3, #32
 8010ea8:	d0f0      	beq.n	8010e8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010eaa:	2300      	movs	r3, #0
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3714      	adds	r7, #20
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr

08010eb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b085      	sub	sp, #20
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	3301      	adds	r3, #1
 8010ec8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010ed0:	d901      	bls.n	8010ed6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010ed2:	2303      	movs	r3, #3
 8010ed4:	e018      	b.n	8010f08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	691b      	ldr	r3, [r3, #16]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	daf2      	bge.n	8010ec4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2210      	movs	r2, #16
 8010ee6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	3301      	adds	r3, #1
 8010eec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010ef4:	d901      	bls.n	8010efa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010ef6:	2303      	movs	r3, #3
 8010ef8:	e006      	b.n	8010f08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	691b      	ldr	r3, [r3, #16]
 8010efe:	f003 0310 	and.w	r3, r3, #16
 8010f02:	2b10      	cmp	r3, #16
 8010f04:	d0f0      	beq.n	8010ee8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010f06:	2300      	movs	r3, #0
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3714      	adds	r7, #20
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f12:	4770      	bx	lr

08010f14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010f14:	b480      	push	{r7}
 8010f16:	b085      	sub	sp, #20
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f2a:	681a      	ldr	r2, [r3, #0]
 8010f2c:	78fb      	ldrb	r3, [r7, #3]
 8010f2e:	68f9      	ldr	r1, [r7, #12]
 8010f30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010f34:	4313      	orrs	r3, r2
 8010f36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010f38:	2300      	movs	r3, #0
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3714      	adds	r7, #20
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr

08010f46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010f46:	b480      	push	{r7}
 8010f48:	b085      	sub	sp, #20
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	68fa      	ldr	r2, [r7, #12]
 8010f5c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010f60:	f023 0303 	bic.w	r3, r3, #3
 8010f64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	68fa      	ldr	r2, [r7, #12]
 8010f70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010f74:	f043 0302 	orr.w	r3, r3, #2
 8010f78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010f7a:	2300      	movs	r3, #0
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3714      	adds	r7, #20
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr

08010f88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b083      	sub	sp, #12
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	695b      	ldr	r3, [r3, #20]
 8010f94:	f003 0301 	and.w	r3, r3, #1
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	370c      	adds	r7, #12
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa2:	4770      	bx	lr

08010fa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b085      	sub	sp, #20
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010fac:	2300      	movs	r3, #0
 8010fae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	3301      	adds	r3, #1
 8010fb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010fbc:	d901      	bls.n	8010fc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010fbe:	2303      	movs	r3, #3
 8010fc0:	e01b      	b.n	8010ffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	691b      	ldr	r3, [r3, #16]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	daf2      	bge.n	8010fb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	691b      	ldr	r3, [r3, #16]
 8010fd2:	f043 0201 	orr.w	r2, r3, #1
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	3301      	adds	r3, #1
 8010fde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010fe6:	d901      	bls.n	8010fec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010fe8:	2303      	movs	r3, #3
 8010fea:	e006      	b.n	8010ffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	691b      	ldr	r3, [r3, #16]
 8010ff0:	f003 0301 	and.w	r3, r3, #1
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	d0f0      	beq.n	8010fda <USB_CoreReset+0x36>

  return HAL_OK;
 8010ff8:	2300      	movs	r3, #0
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3714      	adds	r7, #20
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr
	...

08011008 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801100c:	4904      	ldr	r1, [pc, #16]	@ (8011020 <MX_FATFS_Init+0x18>)
 801100e:	4805      	ldr	r0, [pc, #20]	@ (8011024 <MX_FATFS_Init+0x1c>)
 8011010:	f00d ff3a 	bl	801ee88 <FATFS_LinkDriver>
 8011014:	4603      	mov	r3, r0
 8011016:	461a      	mov	r2, r3
 8011018:	4b03      	ldr	r3, [pc, #12]	@ (8011028 <MX_FATFS_Init+0x20>)
 801101a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801101c:	bf00      	nop
 801101e:	bd80      	pop	{r7, pc}
 8011020:	24008764 	.word	0x24008764
 8011024:	08021c58 	.word	0x08021c58
 8011028:	24008760 	.word	0x24008760

0801102c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801102c:	b480      	push	{r7}
 801102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011030:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011032:	4618      	mov	r0, r3
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr

0801103c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b082      	sub	sp, #8
 8011040:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011042:	2300      	movs	r3, #0
 8011044:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011046:	f000 f879 	bl	801113c <BSP_SD_IsDetected>
 801104a:	4603      	mov	r3, r0
 801104c:	2b01      	cmp	r3, #1
 801104e:	d001      	beq.n	8011054 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011050:	2302      	movs	r3, #2
 8011052:	e012      	b.n	801107a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011054:	480b      	ldr	r0, [pc, #44]	@ (8011084 <BSP_SD_Init+0x48>)
 8011056:	f7fa fc27 	bl	800b8a8 <HAL_SD_Init>
 801105a:	4603      	mov	r3, r0
 801105c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801105e:	79fb      	ldrb	r3, [r7, #7]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d109      	bne.n	8011078 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011064:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8011068:	4806      	ldr	r0, [pc, #24]	@ (8011084 <BSP_SD_Init+0x48>)
 801106a:	f7fb fae3 	bl	800c634 <HAL_SD_ConfigWideBusOperation>
 801106e:	4603      	mov	r3, r0
 8011070:	2b00      	cmp	r3, #0
 8011072:	d001      	beq.n	8011078 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011074:	2301      	movs	r3, #1
 8011076:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011078:	79fb      	ldrb	r3, [r7, #7]
}
 801107a:	4618      	mov	r0, r3
 801107c:	3708      	adds	r7, #8
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
 8011082:	bf00      	nop
 8011084:	24000348 	.word	0x24000348

08011088 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b088      	sub	sp, #32
 801108c:	af02      	add	r7, sp, #8
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	607a      	str	r2, [r7, #4]
 8011094:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011096:	2300      	movs	r3, #0
 8011098:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	9300      	str	r3, [sp, #0]
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	68ba      	ldr	r2, [r7, #8]
 80110a2:	68f9      	ldr	r1, [r7, #12]
 80110a4:	4806      	ldr	r0, [pc, #24]	@ (80110c0 <BSP_SD_ReadBlocks+0x38>)
 80110a6:	f7fa fd1f 	bl	800bae8 <HAL_SD_ReadBlocks>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d001      	beq.n	80110b4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80110b0:	2301      	movs	r3, #1
 80110b2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80110b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3718      	adds	r7, #24
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	24000348 	.word	0x24000348

080110c4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b088      	sub	sp, #32
 80110c8:	af02      	add	r7, sp, #8
 80110ca:	60f8      	str	r0, [r7, #12]
 80110cc:	60b9      	str	r1, [r7, #8]
 80110ce:	607a      	str	r2, [r7, #4]
 80110d0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80110d2:	2300      	movs	r3, #0
 80110d4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	9300      	str	r3, [sp, #0]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	68ba      	ldr	r2, [r7, #8]
 80110de:	68f9      	ldr	r1, [r7, #12]
 80110e0:	4806      	ldr	r0, [pc, #24]	@ (80110fc <BSP_SD_WriteBlocks+0x38>)
 80110e2:	f7fa fe8b 	bl	800bdfc <HAL_SD_WriteBlocks>
 80110e6:	4603      	mov	r3, r0
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d001      	beq.n	80110f0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80110ec:	2301      	movs	r3, #1
 80110ee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80110f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3718      	adds	r7, #24
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
 80110fa:	bf00      	nop
 80110fc:	24000348 	.word	0x24000348

08011100 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011104:	4805      	ldr	r0, [pc, #20]	@ (801111c <BSP_SD_GetCardState+0x1c>)
 8011106:	f7fb fba7 	bl	800c858 <HAL_SD_GetCardState>
 801110a:	4603      	mov	r3, r0
 801110c:	2b04      	cmp	r3, #4
 801110e:	bf14      	ite	ne
 8011110:	2301      	movne	r3, #1
 8011112:	2300      	moveq	r3, #0
 8011114:	b2db      	uxtb	r3, r3
}
 8011116:	4618      	mov	r0, r3
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	24000348 	.word	0x24000348

08011120 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011128:	6879      	ldr	r1, [r7, #4]
 801112a:	4803      	ldr	r0, [pc, #12]	@ (8011138 <BSP_SD_GetCardInfo+0x18>)
 801112c:	f7fb fa56 	bl	800c5dc <HAL_SD_GetCardInfo>
}
 8011130:	bf00      	nop
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}
 8011138:	24000348 	.word	0x24000348

0801113c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801113c:	b480      	push	{r7}
 801113e:	b083      	sub	sp, #12
 8011140:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011142:	2301      	movs	r3, #1
 8011144:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8011146:	79fb      	ldrb	r3, [r7, #7]
 8011148:	b2db      	uxtb	r3, r3
}
 801114a:	4618      	mov	r0, r3
 801114c:	370c      	adds	r7, #12
 801114e:	46bd      	mov	sp, r7
 8011150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011154:	4770      	bx	lr
	...

08011158 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	4603      	mov	r3, r0
 8011160:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011162:	4b0b      	ldr	r3, [pc, #44]	@ (8011190 <SD_CheckStatus+0x38>)
 8011164:	2201      	movs	r2, #1
 8011166:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011168:	f7ff ffca 	bl	8011100 <BSP_SD_GetCardState>
 801116c:	4603      	mov	r3, r0
 801116e:	2b00      	cmp	r3, #0
 8011170:	d107      	bne.n	8011182 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011172:	4b07      	ldr	r3, [pc, #28]	@ (8011190 <SD_CheckStatus+0x38>)
 8011174:	781b      	ldrb	r3, [r3, #0]
 8011176:	b2db      	uxtb	r3, r3
 8011178:	f023 0301 	bic.w	r3, r3, #1
 801117c:	b2da      	uxtb	r2, r3
 801117e:	4b04      	ldr	r3, [pc, #16]	@ (8011190 <SD_CheckStatus+0x38>)
 8011180:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011182:	4b03      	ldr	r3, [pc, #12]	@ (8011190 <SD_CheckStatus+0x38>)
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	b2db      	uxtb	r3, r3
}
 8011188:	4618      	mov	r0, r3
 801118a:	3708      	adds	r7, #8
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}
 8011190:	24000021 	.word	0x24000021

08011194 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b082      	sub	sp, #8
 8011198:	af00      	add	r7, sp, #0
 801119a:	4603      	mov	r3, r0
 801119c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801119e:	4b0b      	ldr	r3, [pc, #44]	@ (80111cc <SD_initialize+0x38>)
 80111a0:	2201      	movs	r2, #1
 80111a2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80111a4:	f7ff ff4a 	bl	801103c <BSP_SD_Init>
 80111a8:	4603      	mov	r3, r0
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d107      	bne.n	80111be <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80111ae:	79fb      	ldrb	r3, [r7, #7]
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7ff ffd1 	bl	8011158 <SD_CheckStatus>
 80111b6:	4603      	mov	r3, r0
 80111b8:	461a      	mov	r2, r3
 80111ba:	4b04      	ldr	r3, [pc, #16]	@ (80111cc <SD_initialize+0x38>)
 80111bc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80111be:	4b03      	ldr	r3, [pc, #12]	@ (80111cc <SD_initialize+0x38>)
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	b2db      	uxtb	r3, r3
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	3708      	adds	r7, #8
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}
 80111cc:	24000021 	.word	0x24000021

080111d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	4603      	mov	r3, r0
 80111d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80111da:	79fb      	ldrb	r3, [r7, #7]
 80111dc:	4618      	mov	r0, r3
 80111de:	f7ff ffbb 	bl	8011158 <SD_CheckStatus>
 80111e2:	4603      	mov	r3, r0
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3708      	adds	r7, #8
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b086      	sub	sp, #24
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60b9      	str	r1, [r7, #8]
 80111f4:	607a      	str	r2, [r7, #4]
 80111f6:	603b      	str	r3, [r7, #0]
 80111f8:	4603      	mov	r3, r0
 80111fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80111fc:	2301      	movs	r3, #1
 80111fe:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8011200:	f04f 33ff 	mov.w	r3, #4294967295
 8011204:	683a      	ldr	r2, [r7, #0]
 8011206:	6879      	ldr	r1, [r7, #4]
 8011208:	68b8      	ldr	r0, [r7, #8]
 801120a:	f7ff ff3d 	bl	8011088 <BSP_SD_ReadBlocks>
 801120e:	4603      	mov	r3, r0
 8011210:	2b00      	cmp	r3, #0
 8011212:	d107      	bne.n	8011224 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011214:	bf00      	nop
 8011216:	f7ff ff73 	bl	8011100 <BSP_SD_GetCardState>
 801121a:	4603      	mov	r3, r0
 801121c:	2b00      	cmp	r3, #0
 801121e:	d1fa      	bne.n	8011216 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8011220:	2300      	movs	r3, #0
 8011222:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011224:	7dfb      	ldrb	r3, [r7, #23]
}
 8011226:	4618      	mov	r0, r3
 8011228:	3718      	adds	r7, #24
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}

0801122e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801122e:	b580      	push	{r7, lr}
 8011230:	b086      	sub	sp, #24
 8011232:	af00      	add	r7, sp, #0
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	607a      	str	r2, [r7, #4]
 8011238:	603b      	str	r3, [r7, #0]
 801123a:	4603      	mov	r3, r0
 801123c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801123e:	2301      	movs	r3, #1
 8011240:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8011242:	f04f 33ff 	mov.w	r3, #4294967295
 8011246:	683a      	ldr	r2, [r7, #0]
 8011248:	6879      	ldr	r1, [r7, #4]
 801124a:	68b8      	ldr	r0, [r7, #8]
 801124c:	f7ff ff3a 	bl	80110c4 <BSP_SD_WriteBlocks>
 8011250:	4603      	mov	r3, r0
 8011252:	2b00      	cmp	r3, #0
 8011254:	d107      	bne.n	8011266 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8011256:	bf00      	nop
 8011258:	f7ff ff52 	bl	8011100 <BSP_SD_GetCardState>
 801125c:	4603      	mov	r3, r0
 801125e:	2b00      	cmp	r3, #0
 8011260:	d1fa      	bne.n	8011258 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8011262:	2300      	movs	r3, #0
 8011264:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011266:	7dfb      	ldrb	r3, [r7, #23]
}
 8011268:	4618      	mov	r0, r3
 801126a:	3718      	adds	r7, #24
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b08c      	sub	sp, #48	@ 0x30
 8011274:	af00      	add	r7, sp, #0
 8011276:	4603      	mov	r3, r0
 8011278:	603a      	str	r2, [r7, #0]
 801127a:	71fb      	strb	r3, [r7, #7]
 801127c:	460b      	mov	r3, r1
 801127e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011280:	2301      	movs	r3, #1
 8011282:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011286:	4b25      	ldr	r3, [pc, #148]	@ (801131c <SD_ioctl+0xac>)
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	b2db      	uxtb	r3, r3
 801128c:	f003 0301 	and.w	r3, r3, #1
 8011290:	2b00      	cmp	r3, #0
 8011292:	d001      	beq.n	8011298 <SD_ioctl+0x28>
 8011294:	2303      	movs	r3, #3
 8011296:	e03c      	b.n	8011312 <SD_ioctl+0xa2>

  switch (cmd)
 8011298:	79bb      	ldrb	r3, [r7, #6]
 801129a:	2b03      	cmp	r3, #3
 801129c:	d834      	bhi.n	8011308 <SD_ioctl+0x98>
 801129e:	a201      	add	r2, pc, #4	@ (adr r2, 80112a4 <SD_ioctl+0x34>)
 80112a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a4:	080112b5 	.word	0x080112b5
 80112a8:	080112bd 	.word	0x080112bd
 80112ac:	080112d5 	.word	0x080112d5
 80112b0:	080112ef 	.word	0x080112ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80112b4:	2300      	movs	r3, #0
 80112b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80112ba:	e028      	b.n	801130e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80112bc:	f107 0308 	add.w	r3, r7, #8
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7ff ff2d 	bl	8011120 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80112c6:	6a3a      	ldr	r2, [r7, #32]
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80112cc:	2300      	movs	r3, #0
 80112ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80112d2:	e01c      	b.n	801130e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80112d4:	f107 0308 	add.w	r3, r7, #8
 80112d8:	4618      	mov	r0, r3
 80112da:	f7ff ff21 	bl	8011120 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80112de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112e0:	b29a      	uxth	r2, r3
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80112e6:	2300      	movs	r3, #0
 80112e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80112ec:	e00f      	b.n	801130e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80112ee:	f107 0308 	add.w	r3, r7, #8
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7ff ff14 	bl	8011120 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80112f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112fa:	0a5a      	lsrs	r2, r3, #9
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011300:	2300      	movs	r3, #0
 8011302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011306:	e002      	b.n	801130e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011308:	2304      	movs	r3, #4
 801130a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801130e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011312:	4618      	mov	r0, r3
 8011314:	3730      	adds	r7, #48	@ 0x30
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	24000021 	.word	0x24000021

08011320 <arm_abs_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_abs_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8011320:	b480      	push	{r7}
 8011322:	b08b      	sub	sp, #44	@ 0x2c
 8011324:	af00      	add	r7, sp, #0
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	60b9      	str	r1, [r7, #8]
 801132a:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8011330:	e01e      	b.n	8011370 <arm_abs_q15+0x50>
  {
    /* C = |A| */

    /* Calculate absolute of input (if -1 then saturated to 0x7fff) and store result in destination buffer. */
    in = *pSrc++;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	1c9a      	adds	r2, r3, #2
 8011336:	60fa      	str	r2, [r7, #12]
 8011338:	881b      	ldrh	r3, [r3, #0]
 801133a:	847b      	strh	r3, [r7, #34]	@ 0x22
#if defined (ARM_MATH_DSP)
    *pDst++ = (in > 0) ? in : (q15_t)__QSUB16(0, in);
 801133c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011340:	2b00      	cmp	r3, #0
 8011342:	dc0c      	bgt.n	801135e <arm_abs_q15+0x3e>
 8011344:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011348:	2200      	movs	r2, #0
 801134a:	61fa      	str	r2, [r7, #28]
 801134c:	61bb      	str	r3, [r7, #24]

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	69ba      	ldr	r2, [r7, #24]
 8011352:	fad3 f312 	qsub16	r3, r3, r2
 8011356:	617b      	str	r3, [r7, #20]
  return(result);
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	b21a      	sxth	r2, r3
 801135c:	e001      	b.n	8011362 <arm_abs_q15+0x42>
 801135e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	1c99      	adds	r1, r3, #2
 8011366:	60b9      	str	r1, [r7, #8]
 8011368:	801a      	strh	r2, [r3, #0]
#else
    *pDst++ = (in > 0) ? in : ((in == (q15_t) 0x8000) ? 0x7fff : -in);
#endif

    /* Decrement loop counter */
    blkCnt--;
 801136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801136c:	3b01      	subs	r3, #1
 801136e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (blkCnt > 0U)
 8011370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011372:	2b00      	cmp	r3, #0
 8011374:	d1dd      	bne.n	8011332 <arm_abs_q15+0x12>
  }

}
 8011376:	bf00      	nop
 8011378:	bf00      	nop
 801137a:	372c      	adds	r7, #44	@ 0x2c
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <arm_dot_prod_q15>:
ARM_DSP_ATTRIBUTE void arm_dot_prod_q15(
  const q15_t * pSrcA,
  const q15_t * pSrcB,
        uint32_t blockSize,
        q63_t * result)
{
 8011384:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8011388:	b089      	sub	sp, #36	@ 0x24
 801138a:	af00      	add	r7, sp, #0
 801138c:	60f8      	str	r0, [r7, #12]
 801138e:	60b9      	str	r1, [r7, #8]
 8011390:	607a      	str	r2, [r7, #4]
 8011392:	603b      	str	r3, [r7, #0]
        uint32_t blkCnt;                               /* Loop counter */
        q63_t sum = 0;                                 /* Temporary return variable */
 8011394:	f04f 0200 	mov.w	r2, #0
 8011398:	f04f 0300 	mov.w	r3, #0
 801139c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80113a4:	e01a      	b.n	80113dc <arm_dot_prod_q15+0x58>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */

    /* Calculate dot product and store result in a temporary buffer. */
    sum += (q63_t)((q31_t) *pSrcA++ * *pSrcB++);
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	1c9a      	adds	r2, r3, #2
 80113aa:	60fa      	str	r2, [r7, #12]
 80113ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80113b0:	4619      	mov	r1, r3
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	1c9a      	adds	r2, r3, #2
 80113b6:	60ba      	str	r2, [r7, #8]
 80113b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80113bc:	fb01 f303 	mul.w	r3, r1, r3
 80113c0:	17da      	asrs	r2, r3, #31
 80113c2:	461c      	mov	r4, r3
 80113c4:	4615      	mov	r5, r2
 80113c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80113ca:	eb12 0804 	adds.w	r8, r2, r4
 80113ce:	eb43 0905 	adc.w	r9, r3, r5
 80113d2:	e9c7 8904 	strd	r8, r9, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 80113d6:	69fb      	ldr	r3, [r7, #28]
 80113d8:	3b01      	subs	r3, #1
 80113da:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 80113dc:	69fb      	ldr	r3, [r7, #28]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d1e1      	bne.n	80113a6 <arm_dot_prod_q15+0x22>
  }

  /* Store result in destination buffer in 34.30 format */
  *result = sum;
 80113e2:	6839      	ldr	r1, [r7, #0]
 80113e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80113e8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80113ec:	bf00      	nop
 80113ee:	3724      	adds	r7, #36	@ 0x24
 80113f0:	46bd      	mov	sp, r7
 80113f2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80113f6:	4770      	bx	lr

080113f8 <arm_mult_q15>:
ARM_DSP_ATTRIBUTE void arm_mult_q15(
  const q15_t * pSrcA,
  const q15_t * pSrcB,
        q15_t * pDst,
        uint32_t blockSize)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b089      	sub	sp, #36	@ 0x24
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	60f8      	str	r0, [r7, #12]
 8011400:	60b9      	str	r1, [r7, #8]
 8011402:	607a      	str	r2, [r7, #4]
 8011404:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801140a:	e01b      	b.n	8011444 <arm_mult_q15+0x4c>
  {
    /* C = A * B */

    /* Multiply inputs and store result in destination buffer. */
    *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	1c9a      	adds	r2, r3, #2
 8011410:	60fa      	str	r2, [r7, #12]
 8011412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011416:	4619      	mov	r1, r3
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	1c9a      	adds	r2, r3, #2
 801141c:	60ba      	str	r2, [r7, #8]
 801141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011422:	fb01 f303 	mul.w	r3, r1, r3
 8011426:	13db      	asrs	r3, r3, #15
 8011428:	61bb      	str	r3, [r7, #24]
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	f303 030f 	ssat	r3, #16, r3
 8011430:	617b      	str	r3, [r7, #20]
 8011432:	6979      	ldr	r1, [r7, #20]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	1c9a      	adds	r2, r3, #2
 8011438:	607a      	str	r2, [r7, #4]
 801143a:	b20a      	sxth	r2, r1
 801143c:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 801143e:	69fb      	ldr	r3, [r7, #28]
 8011440:	3b01      	subs	r3, #1
 8011442:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8011444:	69fb      	ldr	r3, [r7, #28]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d1e0      	bne.n	801140c <arm_mult_q15+0x14>
  }

}
 801144a:	bf00      	nop
 801144c:	bf00      	nop
 801144e:	3724      	adds	r7, #36	@ 0x24
 8011450:	46bd      	mov	sp, r7
 8011452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011456:	4770      	bx	lr

08011458 <arm_offset_q31>:
ARM_DSP_ATTRIBUTE void arm_offset_q31(
  const q31_t * pSrc,
        q31_t offset,
        q31_t * pDst,
        uint32_t blockSize)
{
 8011458:	b480      	push	{r7}
 801145a:	b089      	sub	sp, #36	@ 0x24
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	607a      	str	r2, [r7, #4]
 8011464:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801146a:	e013      	b.n	8011494 <arm_offset_q31+0x3c>
  {
    /* C = A + offset */

    /* Add offset and store result in destination buffer. */
#if defined (ARM_MATH_DSP)
    *pDst++ = __QADD(*pSrc++, offset);
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	1d1a      	adds	r2, r3, #4
 8011470:	60fa      	str	r2, [r7, #12]
 8011472:	681a      	ldr	r2, [r3, #0]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	1d19      	adds	r1, r3, #4
 8011478:	6079      	str	r1, [r7, #4]
 801147a:	61ba      	str	r2, [r7, #24]
 801147c:	68ba      	ldr	r2, [r7, #8]
 801147e:	617a      	str	r2, [r7, #20]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011480:	69ba      	ldr	r2, [r7, #24]
 8011482:	6979      	ldr	r1, [r7, #20]
 8011484:	fa81 f282 	qadd	r2, r2, r1
 8011488:	613a      	str	r2, [r7, #16]
  return(result);
 801148a:	693a      	ldr	r2, [r7, #16]
 801148c:	601a      	str	r2, [r3, #0]
#else
    *pDst++ = (q31_t) clip_q63_to_q31((q63_t) * pSrc++ + offset);
#endif

    /* Decrement loop counter */
    blkCnt--;
 801148e:	69fb      	ldr	r3, [r7, #28]
 8011490:	3b01      	subs	r3, #1
 8011492:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d1e8      	bne.n	801146c <arm_offset_q31+0x14>
  }

}
 801149a:	bf00      	nop
 801149c:	bf00      	nop
 801149e:	3724      	adds	r7, #36	@ 0x24
 80114a0:	46bd      	mov	sp, r7
 80114a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a6:	4770      	bx	lr

080114a8 <arm_scale_q15>:
  const q15_t *pSrc,
        q15_t scaleFract,
        int8_t shift,
        q15_t *pDst,
        uint32_t blockSize)
{
 80114a8:	b480      	push	{r7}
 80114aa:	b089      	sub	sp, #36	@ 0x24
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	60f8      	str	r0, [r7, #12]
 80114b0:	607b      	str	r3, [r7, #4]
 80114b2:	460b      	mov	r3, r1
 80114b4:	817b      	strh	r3, [r7, #10]
 80114b6:	4613      	mov	r3, r2
 80114b8:	727b      	strb	r3, [r7, #9]
        uint32_t blkCnt;                               /* Loop counter */
        int8_t kShift = 15 - shift;                    /* Shift to apply after scaling */
 80114ba:	7a7b      	ldrb	r3, [r7, #9]
 80114bc:	f1c3 030f 	rsb	r3, r3, #15
 80114c0:	b2db      	uxtb	r3, r3
 80114c2:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80114c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114c6:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80114c8:	e01b      	b.n	8011502 <arm_scale_q15+0x5a>
  {
    /* C = A * scale */

    /* Scale input and store result in destination buffer. */
    *pDst++ = (q15_t) (__SSAT(((q31_t) *pSrc++ * scaleFract) >> kShift, 16));
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	1c9a      	adds	r2, r3, #2
 80114ce:	60fa      	str	r2, [r7, #12]
 80114d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80114d4:	461a      	mov	r2, r3
 80114d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80114da:	fb03 f202 	mul.w	r2, r3, r2
 80114de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80114e2:	fa42 f303 	asr.w	r3, r2, r3
 80114e6:	617b      	str	r3, [r7, #20]
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	f303 030f 	ssat	r3, #16, r3
 80114ee:	613b      	str	r3, [r7, #16]
 80114f0:	6939      	ldr	r1, [r7, #16]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	1c9a      	adds	r2, r3, #2
 80114f6:	607a      	str	r2, [r7, #4]
 80114f8:	b20a      	sxth	r2, r1
 80114fa:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	3b01      	subs	r3, #1
 8011500:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8011502:	69fb      	ldr	r3, [r7, #28]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d1e0      	bne.n	80114ca <arm_scale_q15+0x22>
  }

}
 8011508:	bf00      	nop
 801150a:	bf00      	nop
 801150c:	3724      	adds	r7, #36	@ 0x24
 801150e:	46bd      	mov	sp, r7
 8011510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011514:	4770      	bx	lr

08011516 <arm_scale_q31>:
  const q31_t *pSrc,
        q31_t scaleFract,
        int8_t shift,
        q31_t *pDst,
        uint32_t blockSize)
{
 8011516:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801151a:	b08f      	sub	sp, #60	@ 0x3c
 801151c:	af00      	add	r7, sp, #0
 801151e:	6278      	str	r0, [r7, #36]	@ 0x24
 8011520:	6239      	str	r1, [r7, #32]
 8011522:	61bb      	str	r3, [r7, #24]
 8011524:	4613      	mov	r3, r2
 8011526:	77fb      	strb	r3, [r7, #31]
        uint32_t blkCnt;                               /* Loop counter */
        q31_t in, out;                                 /* Temporary variables */
        int8_t kShift = shift + 1;                     /* Shift to apply after scaling */
 8011528:	7ffb      	ldrb	r3, [r7, #31]
 801152a:	3301      	adds	r3, #1
 801152c:	b2db      	uxtb	r3, r3
 801152e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        int8_t sign = (kShift & 0x80);
 8011532:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011536:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801153a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801153e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011540:	637b      	str	r3, [r7, #52]	@ 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  if (sign == 0U)
 8011542:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8011546:	2b00      	cmp	r3, #0
 8011548:	d17b      	bne.n	8011642 <arm_scale_q31+0x12c>
  {
    while (blkCnt > 0U)
 801154a:	e044      	b.n	80115d6 <arm_scale_q31+0xc0>
    {
      /* C = A * scale */

      /* Scale input and store result in destination buffer. */
      in = *pSrc++;
 801154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801154e:	1d1a      	adds	r2, r3, #4
 8011550:	627a      	str	r2, [r7, #36]	@ 0x24
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	62bb      	str	r3, [r7, #40]	@ 0x28
      in = ((q63_t) in * scaleFract) >> 32;
 8011556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011558:	17da      	asrs	r2, r3, #31
 801155a:	613b      	str	r3, [r7, #16]
 801155c:	617a      	str	r2, [r7, #20]
 801155e:	6a3b      	ldr	r3, [r7, #32]
 8011560:	17da      	asrs	r2, r3, #31
 8011562:	60bb      	str	r3, [r7, #8]
 8011564:	60fa      	str	r2, [r7, #12]
 8011566:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801156a:	462b      	mov	r3, r5
 801156c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8011570:	4652      	mov	r2, sl
 8011572:	fb02 f203 	mul.w	r2, r2, r3
 8011576:	465b      	mov	r3, fp
 8011578:	4621      	mov	r1, r4
 801157a:	fb01 f303 	mul.w	r3, r1, r3
 801157e:	4413      	add	r3, r2
 8011580:	4622      	mov	r2, r4
 8011582:	4651      	mov	r1, sl
 8011584:	fba2 8901 	umull	r8, r9, r2, r1
 8011588:	444b      	add	r3, r9
 801158a:	4699      	mov	r9, r3
 801158c:	f04f 0200 	mov.w	r2, #0
 8011590:	f04f 0300 	mov.w	r3, #0
 8011594:	464a      	mov	r2, r9
 8011596:	ea4f 73e9 	mov.w	r3, r9, asr #31
 801159a:	4613      	mov	r3, r2
 801159c:	62bb      	str	r3, [r7, #40]	@ 0x28
      out = in << kShift;
 801159e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80115a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80115a4:	fa02 f303 	lsl.w	r3, r2, r3
 80115a8:	633b      	str	r3, [r7, #48]	@ 0x30
      if (in != (out >> kShift))
 80115aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80115ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115b0:	fa42 f303 	asr.w	r3, r2, r3
 80115b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d005      	beq.n	80115c6 <arm_scale_q31+0xb0>
          out = 0x7FFFFFFF ^ (in >> 31);
 80115ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115bc:	17da      	asrs	r2, r3, #31
 80115be:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80115c2:	4053      	eors	r3, r2
 80115c4:	633b      	str	r3, [r7, #48]	@ 0x30
      *pDst++ = out;
 80115c6:	69bb      	ldr	r3, [r7, #24]
 80115c8:	1d1a      	adds	r2, r3, #4
 80115ca:	61ba      	str	r2, [r7, #24]
 80115cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115ce:	601a      	str	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 80115d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115d2:	3b01      	subs	r3, #1
 80115d4:	637b      	str	r3, [r7, #52]	@ 0x34
    while (blkCnt > 0U)
 80115d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d1b7      	bne.n	801154c <arm_scale_q31+0x36>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 80115dc:	e034      	b.n	8011648 <arm_scale_q31+0x132>
      in = *pSrc++;
 80115de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e0:	1d1a      	adds	r2, r3, #4
 80115e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      in = ((q63_t) in * scaleFract) >> 32;
 80115e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115ea:	17da      	asrs	r2, r3, #31
 80115ec:	469a      	mov	sl, r3
 80115ee:	4693      	mov	fp, r2
 80115f0:	6a3b      	ldr	r3, [r7, #32]
 80115f2:	17da      	asrs	r2, r3, #31
 80115f4:	603b      	str	r3, [r7, #0]
 80115f6:	607a      	str	r2, [r7, #4]
 80115f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80115fc:	4603      	mov	r3, r0
 80115fe:	fb03 f20b 	mul.w	r2, r3, fp
 8011602:	460b      	mov	r3, r1
 8011604:	fb0a f303 	mul.w	r3, sl, r3
 8011608:	4413      	add	r3, r2
 801160a:	4602      	mov	r2, r0
 801160c:	fbaa 4502 	umull	r4, r5, sl, r2
 8011610:	442b      	add	r3, r5
 8011612:	461d      	mov	r5, r3
 8011614:	f04f 0200 	mov.w	r2, #0
 8011618:	f04f 0300 	mov.w	r3, #0
 801161c:	002a      	movs	r2, r5
 801161e:	17eb      	asrs	r3, r5, #31
 8011620:	4613      	mov	r3, r2
 8011622:	62bb      	str	r3, [r7, #40]	@ 0x28
      out = in >> -kShift;
 8011624:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011628:	425b      	negs	r3, r3
 801162a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801162c:	fa42 f303 	asr.w	r3, r2, r3
 8011630:	633b      	str	r3, [r7, #48]	@ 0x30
      *pDst++ = out;
 8011632:	69bb      	ldr	r3, [r7, #24]
 8011634:	1d1a      	adds	r2, r3, #4
 8011636:	61ba      	str	r2, [r7, #24]
 8011638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801163a:	601a      	str	r2, [r3, #0]
      blkCnt--;
 801163c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801163e:	3b01      	subs	r3, #1
 8011640:	637b      	str	r3, [r7, #52]	@ 0x34
    while (blkCnt > 0U)
 8011642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011644:	2b00      	cmp	r3, #0
 8011646:	d1ca      	bne.n	80115de <arm_scale_q31+0xc8>
}
 8011648:	bf00      	nop
 801164a:	373c      	adds	r7, #60	@ 0x3c
 801164c:	46bd      	mov	sp, r7
 801164e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011652:	4770      	bx	lr

08011654 <arm_shift_q15>:
ARM_DSP_ATTRIBUTE void arm_shift_q15(
  const q15_t * pSrc,
        int8_t shiftBits,
        q15_t * pDst,
        uint32_t blockSize)
{
 8011654:	b480      	push	{r7}
 8011656:	b089      	sub	sp, #36	@ 0x24
 8011658:	af00      	add	r7, sp, #0
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	607a      	str	r2, [r7, #4]
 801165e:	603b      	str	r3, [r7, #0]
 8011660:	460b      	mov	r3, r1
 8011662:	72fb      	strb	r3, [r7, #11]
        uint32_t blkCnt;                               /* Loop counter */
        uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 8011664:	7afb      	ldrb	r3, [r7, #11]
 8011666:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801166a:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* If the shift value is positive then do right shift else left shift */
  if (sign == 0U)
 8011670:	7efb      	ldrb	r3, [r7, #27]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d12f      	bne.n	80116d6 <arm_shift_q15+0x82>
  {
    while (blkCnt > 0U)
 8011676:	e017      	b.n	80116a8 <arm_shift_q15+0x54>
    {
      /* C = A << shiftBits */

      /* Shift input and store result in destination buffer. */
      *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	1c9a      	adds	r2, r3, #2
 801167c:	60fa      	str	r2, [r7, #12]
 801167e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011682:	461a      	mov	r2, r3
 8011684:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011688:	fa02 f303 	lsl.w	r3, r2, r3
 801168c:	617b      	str	r3, [r7, #20]
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	f303 030f 	ssat	r3, #16, r3
 8011694:	613b      	str	r3, [r7, #16]
 8011696:	6939      	ldr	r1, [r7, #16]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	1c9a      	adds	r2, r3, #2
 801169c:	607a      	str	r2, [r7, #4]
 801169e:	b20a      	sxth	r2, r1
 80116a0:	801a      	strh	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 80116a2:	69fb      	ldr	r3, [r7, #28]
 80116a4:	3b01      	subs	r3, #1
 80116a6:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d1e4      	bne.n	8011678 <arm_shift_q15+0x24>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 80116ae:	e015      	b.n	80116dc <arm_shift_q15+0x88>
      *pDst++ = (*pSrc++ >> -shiftBits);
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	1c9a      	adds	r2, r3, #2
 80116b4:	60fa      	str	r2, [r7, #12]
 80116b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80116ba:	461a      	mov	r2, r3
 80116bc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80116c0:	425b      	negs	r3, r3
 80116c2:	fa42 f103 	asr.w	r1, r2, r3
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	1c9a      	adds	r2, r3, #2
 80116ca:	607a      	str	r2, [r7, #4]
 80116cc:	b20a      	sxth	r2, r1
 80116ce:	801a      	strh	r2, [r3, #0]
      blkCnt--;
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	3b01      	subs	r3, #1
 80116d4:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d1e9      	bne.n	80116b0 <arm_shift_q15+0x5c>
}
 80116dc:	bf00      	nop
 80116de:	3724      	adds	r7, #36	@ 0x24
 80116e0:	46bd      	mov	sp, r7
 80116e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e6:	4770      	bx	lr

080116e8 <arm_shift_q31>:
ARM_DSP_ATTRIBUTE void arm_shift_q31(
  const q31_t * pSrc,
        int8_t shiftBits,
        q31_t * pDst,
        uint32_t blockSize)
{
 80116e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80116ec:	b088      	sub	sp, #32
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	60f8      	str	r0, [r7, #12]
 80116f2:	607a      	str	r2, [r7, #4]
 80116f4:	603b      	str	r3, [r7, #0]
 80116f6:	460b      	mov	r3, r1
 80116f8:	72fb      	strb	r3, [r7, #11]
        uint32_t blkCnt;                               /* Loop counter */
        uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 80116fa:	7afb      	ldrb	r3, [r7, #11]
 80116fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011700:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* If the shift value is positive then do right shift else left shift */
  if (sign == 0U)
 8011706:	7efb      	ldrb	r3, [r7, #27]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d14d      	bne.n	80117a8 <arm_shift_q31+0xc0>
  {
    while (blkCnt > 0U)
 801170c:	e038      	b.n	8011780 <arm_shift_q31+0x98>
    {
      /* C = A << shiftBits */

      /* Shift input and store result in destination buffer. */
      *pDst++ = clip_q63_to_q31((q63_t) *pSrc++ << shiftBits);
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	1d1a      	adds	r2, r3, #4
 8011712:	60fa      	str	r2, [r7, #12]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	17da      	asrs	r2, r3, #31
 8011718:	4698      	mov	r8, r3
 801171a:	4691      	mov	r9, r2
 801171c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011720:	f1a3 0120 	sub.w	r1, r3, #32
 8011724:	f1c3 0220 	rsb	r2, r3, #32
 8011728:	fa09 f503 	lsl.w	r5, r9, r3
 801172c:	fa08 f101 	lsl.w	r1, r8, r1
 8011730:	430d      	orrs	r5, r1
 8011732:	fa28 f202 	lsr.w	r2, r8, r2
 8011736:	4315      	orrs	r5, r2
 8011738:	fa08 f403 	lsl.w	r4, r8, r3
 801173c:	687e      	ldr	r6, [r7, #4]
 801173e:	1d33      	adds	r3, r6, #4
 8011740:	607b      	str	r3, [r7, #4]
 8011742:	e9c7 4504 	strd	r4, r5, [r7, #16]
   * @brief Clips Q63 to Q31 values.
   */
  __STATIC_FORCEINLINE q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 8011746:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801174a:	f04f 0200 	mov.w	r2, #0
 801174e:	f04f 0300 	mov.w	r3, #0
 8011752:	000a      	movs	r2, r1
 8011754:	17cb      	asrs	r3, r1, #31
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	17db      	asrs	r3, r3, #31
      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 801175a:	429a      	cmp	r2, r3
 801175c:	d00b      	beq.n	8011776 <arm_shift_q31+0x8e>
 801175e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011762:	f04f 0200 	mov.w	r2, #0
 8011766:	f04f 0300 	mov.w	r3, #0
 801176a:	17ca      	asrs	r2, r1, #31
 801176c:	17cb      	asrs	r3, r1, #31
 801176e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011772:	4053      	eors	r3, r2
 8011774:	e000      	b.n	8011778 <arm_shift_q31+0x90>
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	6033      	str	r3, [r6, #0]

      /* Decrement loop counter */
      blkCnt--;
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	3b01      	subs	r3, #1
 801177e:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8011780:	69fb      	ldr	r3, [r7, #28]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d1c3      	bne.n	801170e <arm_shift_q31+0x26>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 8011786:	e012      	b.n	80117ae <arm_shift_q31+0xc6>
      *pDst++ = (*pSrc++ >> -shiftBits);
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	1d1a      	adds	r2, r3, #4
 801178c:	60fa      	str	r2, [r7, #12]
 801178e:	6819      	ldr	r1, [r3, #0]
 8011790:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011794:	425a      	negs	r2, r3
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	1d18      	adds	r0, r3, #4
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	fa41 f202 	asr.w	r2, r1, r2
 80117a0:	601a      	str	r2, [r3, #0]
      blkCnt--;
 80117a2:	69fb      	ldr	r3, [r7, #28]
 80117a4:	3b01      	subs	r3, #1
 80117a6:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80117a8:	69fb      	ldr	r3, [r7, #28]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d1ec      	bne.n	8011788 <arm_shift_q31+0xa0>
}
 80117ae:	bf00      	nop
 80117b0:	3720      	adds	r7, #32
 80117b2:	46bd      	mov	sp, r7
 80117b4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80117b8:	4770      	bx	lr

080117ba <arm_cmplx_mag_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_cmplx_mag_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t numSamples)
{
 80117ba:	b580      	push	{r7, lr}
 80117bc:	b08e      	sub	sp, #56	@ 0x38
 80117be:	af00      	add	r7, sp, #0
 80117c0:	60f8      	str	r0, [r7, #12]
 80117c2:	60b9      	str	r1, [r7, #8]
 80117c4:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	637b      	str	r3, [r7, #52]	@ 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80117ca:	e028      	b.n	801181e <arm_cmplx_mag_q15+0x64>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

#if defined (ARM_MATH_DSP)
    in = read_q15x2_ia (&pSrc);
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	3304      	adds	r3, #4
 80117d0:	60fb      	str	r3, [r7, #12]
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	3b04      	subs	r3, #4
 80117d6:	61fb      	str	r3, [r7, #28]
  q15_t const * pQ15)
{
  q31_t val;

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (&val, pQ15, 4);
 80117d8:	69fb      	ldr	r3, [r7, #28]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	617b      	str	r3, [r7, #20]
#else
  val = (pQ15[1] << 16) | (pQ15[0] & 0x0FFFF) ;
#endif

  return (val);
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	633b      	str	r3, [r7, #48]	@ 0x30
    acc0 = __SMUAD(in, in);
 80117e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80117e8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80117ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80117ee:	fb23 f302 	smuad	r3, r3, r2
 80117f2:	623b      	str	r3, [r7, #32]
  return(result);
 80117f4:	6a3b      	ldr	r3, [r7, #32]
 80117f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* store result in 2.14 format in destination buffer. */
    arm_sqrt_q31((uint32_t)acc0  >> 1 , &res);
 80117f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117fa:	085b      	lsrs	r3, r3, #1
 80117fc:	461a      	mov	r2, r3
 80117fe:	f107 0318 	add.w	r3, r7, #24
 8011802:	4619      	mov	r1, r3
 8011804:	4610      	mov	r0, r2
 8011806:	f000 f883 	bl	8011910 <arm_sqrt_q31>
    *pDst++ = res >> 16;
 801180a:	69bb      	ldr	r3, [r7, #24]
 801180c:	1419      	asrs	r1, r3, #16
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	1c9a      	adds	r2, r3, #2
 8011812:	60ba      	str	r2, [r7, #8]
 8011814:	b20a      	sxth	r2, r1
 8011816:	801a      	strh	r2, [r3, #0]
    *pDst++ = res >> 16;
 
#endif

    /* Decrement loop counter */
    blkCnt--;
 8011818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801181a:	3b01      	subs	r3, #1
 801181c:	637b      	str	r3, [r7, #52]	@ 0x34
  while (blkCnt > 0U)
 801181e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011820:	2b00      	cmp	r3, #0
 8011822:	d1d3      	bne.n	80117cc <arm_cmplx_mag_q15+0x12>
  }

}
 8011824:	bf00      	nop
 8011826:	bf00      	nop
 8011828:	3738      	adds	r7, #56	@ 0x38
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}

0801182e <arm_divide_q15>:

ARM_DSP_ATTRIBUTE arm_status arm_divide_q15(q15_t numerator,
  q15_t denominator,
  q15_t *quotient,
  int16_t *shift)
{
 801182e:	b580      	push	{r7, lr}
 8011830:	b088      	sub	sp, #32
 8011832:	af00      	add	r7, sp, #0
 8011834:	60ba      	str	r2, [r7, #8]
 8011836:	607b      	str	r3, [r7, #4]
 8011838:	4603      	mov	r3, r0
 801183a:	81fb      	strh	r3, [r7, #14]
 801183c:	460b      	mov	r3, r1
 801183e:	81bb      	strh	r3, [r7, #12]
  int16_t sign=0;
 8011840:	2300      	movs	r3, #0
 8011842:	837b      	strh	r3, [r7, #26]
  q31_t temp;
  int16_t shiftForNormalizing;

  *shift = 0;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2200      	movs	r2, #0
 8011848:	801a      	strh	r2, [r3, #0]

  sign = (numerator<0) ^ (denominator<0);
 801184a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801184e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011852:	4053      	eors	r3, r2
 8011854:	b21b      	sxth	r3, r3
 8011856:	b29b      	uxth	r3, r3
 8011858:	0bdb      	lsrs	r3, r3, #15
 801185a:	b2db      	uxtb	r3, r3
 801185c:	837b      	strh	r3, [r7, #26]

  if (denominator == 0)
 801185e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d10f      	bne.n	8011886 <arm_divide_q15+0x58>
  {
     if (sign)
 8011866:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d004      	beq.n	8011878 <arm_divide_q15+0x4a>
     {
        *quotient = -32768;
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8011874:	801a      	strh	r2, [r3, #0]
 8011876:	e003      	b.n	8011880 <arm_divide_q15+0x52>
     }
     else
     {
        *quotient = 32767;
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801187e:	801a      	strh	r2, [r3, #0]
     }
     return(ARM_MATH_NANINF);
 8011880:	f06f 0303 	mvn.w	r3, #3
 8011884:	e03f      	b.n	8011906 <arm_divide_q15+0xd8>
  }

  arm_abs_q15(&numerator,&numerator,1);
 8011886:	f107 010e 	add.w	r1, r7, #14
 801188a:	f107 030e 	add.w	r3, r7, #14
 801188e:	2201      	movs	r2, #1
 8011890:	4618      	mov	r0, r3
 8011892:	f7ff fd45 	bl	8011320 <arm_abs_q15>
  arm_abs_q15(&denominator,&denominator,1);
 8011896:	f107 010c 	add.w	r1, r7, #12
 801189a:	f107 030c 	add.w	r3, r7, #12
 801189e:	2201      	movs	r2, #1
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7ff fd3d 	bl	8011320 <arm_abs_q15>
  
  temp = ((q31_t)numerator << 15) / ((q31_t)denominator);
 80118a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80118aa:	03db      	lsls	r3, r3, #15
 80118ac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80118b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80118b4:	61fb      	str	r3, [r7, #28]

  shiftForNormalizing= 17 - __CLZ(temp);
 80118b6:	69fb      	ldr	r3, [r7, #28]
 80118b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d101      	bne.n	80118c4 <arm_divide_q15+0x96>
    return 32U;
 80118c0:	2320      	movs	r3, #32
 80118c2:	e003      	b.n	80118cc <arm_divide_q15+0x9e>
  return __builtin_clz(value);
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	fab3 f383 	clz	r3, r3
 80118ca:	b2db      	uxtb	r3, r3
 80118cc:	f1c3 0311 	rsb	r3, r3, #17
 80118d0:	b29b      	uxth	r3, r3
 80118d2:	833b      	strh	r3, [r7, #24]
  if (shiftForNormalizing > 0)
 80118d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	dd08      	ble.n	80118ee <arm_divide_q15+0xc0>
  {
     *shift = shiftForNormalizing;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	8b3a      	ldrh	r2, [r7, #24]
 80118e0:	801a      	strh	r2, [r3, #0]
     temp = temp >> shiftForNormalizing;
 80118e2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80118e6:	69fa      	ldr	r2, [r7, #28]
 80118e8:	fa42 f303 	asr.w	r3, r2, r3
 80118ec:	61fb      	str	r3, [r7, #28]
  }

  if (sign)
 80118ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d002      	beq.n	80118fc <arm_divide_q15+0xce>
  {
    temp = -temp;
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	425b      	negs	r3, r3
 80118fa:	61fb      	str	r3, [r7, #28]
  }

  *quotient=temp;
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	b21a      	sxth	r2, r3
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	801a      	strh	r2, [r3, #0]

  return(ARM_MATH_SUCCESS);
 8011904:	2300      	movs	r3, #0
}
 8011906:	4618      	mov	r0, r3
 8011908:	3720      	adds	r7, #32
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
	...

08011910 <arm_sqrt_q31>:
 */

ARM_DSP_ATTRIBUTE arm_status arm_sqrt_q31(
  q31_t in,
  q31_t * pOut)
{
 8011910:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011914:	b0bf      	sub	sp, #252	@ 0xfc
 8011916:	af00      	add	r7, sp, #0
 8011918:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
 801191c:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  q31_t number, var1, signBits1 ,temp;
 
  number = in;
 8011920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011924:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

  /* If the input is a positive number then compute the signBits. */
  if (number > 0)
 8011928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801192c:	2b00      	cmp	r3, #0
 801192e:	f340 8270 	ble.w	8011e12 <arm_sqrt_q31+0x502>
  {
    signBits1 = __CLZ(number) - 1;
 8011932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011936:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (value == 0U)
 801193a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801193e:	2b00      	cmp	r3, #0
 8011940:	d101      	bne.n	8011946 <arm_sqrt_q31+0x36>
    return 32U;
 8011942:	2320      	movs	r3, #32
 8011944:	e004      	b.n	8011950 <arm_sqrt_q31+0x40>
  return __builtin_clz(value);
 8011946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801194a:	fab3 f383 	clz	r3, r3
 801194e:	b2db      	uxtb	r3, r3
 8011950:	3b01      	subs	r3, #1
 8011952:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

    /* Shift by the number of signBits1 */
    if ((signBits1 % 2) == 0)
 8011956:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801195a:	f003 0301 	and.w	r3, r3, #1
 801195e:	2b00      	cmp	r3, #0
 8011960:	d108      	bne.n	8011974 <arm_sqrt_q31+0x64>
    {
      number = number << signBits1;
 8011962:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8011966:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801196a:	fa02 f303 	lsl.w	r3, r2, r3
 801196e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8011972:	e007      	b.n	8011984 <arm_sqrt_q31+0x74>
    }
    else
    {
      number = number << (signBits1 - 1);
 8011974:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011978:	1e5a      	subs	r2, r3, #1
 801197a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801197e:	4093      	lsls	r3, r2
 8011980:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    }

    /* Start value for 1/sqrt(x) for the Newton iteration */
    var1 = sqrt_initial_lut_q31[(number>> 26) - (Q28QUARTER >> 26)];
 8011984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011988:	169b      	asrs	r3, r3, #26
 801198a:	f1a3 0208 	sub.w	r2, r3, #8
 801198e:	4bf0      	ldr	r3, [pc, #960]	@ (8011d50 <arm_sqrt_q31+0x440>)
 8011990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011994:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* 0.5 var1 * (3 - number * var1 * var1) */

    /* 1st iteration */

    temp = ((q63_t) var1 * var1) >> 28;
 8011998:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801199c:	17da      	asrs	r2, r3, #31
 801199e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80119a2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80119a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80119aa:	17da      	asrs	r2, r3, #31
 80119ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80119b0:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80119b4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80119b8:	460b      	mov	r3, r1
 80119ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80119be:	fb02 f203 	mul.w	r2, r2, r3
 80119c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80119c6:	e9c7 0134 	strd	r0, r1, [r7, #208]	@ 0xd0
 80119ca:	4601      	mov	r1, r0
 80119cc:	fb01 f303 	mul.w	r3, r1, r3
 80119d0:	4413      	add	r3, r2
 80119d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80119d6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80119da:	fba2 4501 	umull	r4, r5, r2, r1
 80119de:	442b      	add	r3, r5
 80119e0:	461d      	mov	r5, r3
 80119e2:	f04f 0200 	mov.w	r2, #0
 80119e6:	f04f 0300 	mov.w	r3, #0
 80119ea:	0f22      	lsrs	r2, r4, #28
 80119ec:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80119f0:	172b      	asrs	r3, r5, #28
 80119f2:	4613      	mov	r3, r2
 80119f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 80119f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80119fc:	17da      	asrs	r2, r3, #31
 80119fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011a02:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8011a06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011a0a:	17da      	asrs	r2, r3, #31
 8011a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011a10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011a14:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8011a18:	460b      	mov	r3, r1
 8011a1a:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8011a1e:	4622      	mov	r2, r4
 8011a20:	fb02 f203 	mul.w	r2, r2, r3
 8011a24:	e9c7 4530 	strd	r4, r5, [r7, #192]	@ 0xc0
 8011a28:	462b      	mov	r3, r5
 8011a2a:	4604      	mov	r4, r0
 8011a2c:	460d      	mov	r5, r1
 8011a2e:	4621      	mov	r1, r4
 8011a30:	fb01 f303 	mul.w	r3, r1, r3
 8011a34:	4413      	add	r3, r2
 8011a36:	4622      	mov	r2, r4
 8011a38:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8011a3c:	fba2 8901 	umull	r8, r9, r2, r1
 8011a40:	444b      	add	r3, r9
 8011a42:	4699      	mov	r9, r3
 8011a44:	f04f 0200 	mov.w	r2, #0
 8011a48:	f04f 0300 	mov.w	r3, #0
 8011a4c:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 8011a50:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
 8011a54:	ea4f 73e9 	mov.w	r3, r9, asr #31
 8011a58:	4613      	mov	r3, r2
 8011a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 8011a5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011a62:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 8011a66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 8011a6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011a6e:	17da      	asrs	r2, r3, #31
 8011a70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011a72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011a74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011a78:	17da      	asrs	r2, r3, #31
 8011a7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8011a7c:	677a      	str	r2, [r7, #116]	@ 0x74
 8011a7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8011a82:	462b      	mov	r3, r5
 8011a84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8011a88:	4642      	mov	r2, r8
 8011a8a:	fb02 f203 	mul.w	r2, r2, r3
 8011a8e:	464b      	mov	r3, r9
 8011a90:	4621      	mov	r1, r4
 8011a92:	fb01 f303 	mul.w	r3, r1, r3
 8011a96:	4413      	add	r3, r2
 8011a98:	4622      	mov	r2, r4
 8011a9a:	4641      	mov	r1, r8
 8011a9c:	fba2 ab01 	umull	sl, fp, r2, r1
 8011aa0:	445b      	add	r3, fp
 8011aa2:	469b      	mov	fp, r3
 8011aa4:	f04f 0200 	mov.w	r2, #0
 8011aa8:	f04f 0300 	mov.w	r3, #0
 8011aac:	ea4f 725a 	mov.w	r2, sl, lsr #29
 8011ab0:	ea42 02cb 	orr.w	r2, r2, fp, lsl #3
 8011ab4:	ea4f 736b 	mov.w	r3, fp, asr #29
 8011ab8:	4613      	mov	r3, r2
 8011aba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    
    /* 2nd iteration */
    temp = ((q63_t) var1 * var1) >> 28;
 8011abe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011ac2:	17da      	asrs	r2, r3, #31
 8011ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011ac6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011ac8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011acc:	17da      	asrs	r2, r3, #31
 8011ace:	663b      	str	r3, [r7, #96]	@ 0x60
 8011ad0:	667a      	str	r2, [r7, #100]	@ 0x64
 8011ad2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8011ad6:	462b      	mov	r3, r5
 8011ad8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8011adc:	4642      	mov	r2, r8
 8011ade:	fb02 f203 	mul.w	r2, r2, r3
 8011ae2:	464b      	mov	r3, r9
 8011ae4:	4621      	mov	r1, r4
 8011ae6:	fb01 f303 	mul.w	r3, r1, r3
 8011aea:	4413      	add	r3, r2
 8011aec:	4622      	mov	r2, r4
 8011aee:	4641      	mov	r1, r8
 8011af0:	fba2 1201 	umull	r1, r2, r2, r1
 8011af4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8011af8:	460a      	mov	r2, r1
 8011afa:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8011afe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8011b02:	4413      	add	r3, r2
 8011b04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011b08:	f04f 0200 	mov.w	r2, #0
 8011b0c:	f04f 0300 	mov.w	r3, #0
 8011b10:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8011b14:	4621      	mov	r1, r4
 8011b16:	0f0a      	lsrs	r2, r1, #28
 8011b18:	4629      	mov	r1, r5
 8011b1a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8011b1e:	4629      	mov	r1, r5
 8011b20:	170b      	asrs	r3, r1, #28
 8011b22:	4613      	mov	r3, r2
 8011b24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 8011b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011b2c:	17da      	asrs	r2, r3, #31
 8011b2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011b30:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8011b32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011b36:	17da      	asrs	r2, r3, #31
 8011b38:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b3a:	657a      	str	r2, [r7, #84]	@ 0x54
 8011b3c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8011b40:	462b      	mov	r3, r5
 8011b42:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8011b46:	4642      	mov	r2, r8
 8011b48:	fb02 f203 	mul.w	r2, r2, r3
 8011b4c:	464b      	mov	r3, r9
 8011b4e:	4621      	mov	r1, r4
 8011b50:	fb01 f303 	mul.w	r3, r1, r3
 8011b54:	4413      	add	r3, r2
 8011b56:	4622      	mov	r2, r4
 8011b58:	4641      	mov	r1, r8
 8011b5a:	fba2 1201 	umull	r1, r2, r2, r1
 8011b5e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8011b62:	460a      	mov	r2, r1
 8011b64:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8011b68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011b6c:	4413      	add	r3, r2
 8011b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011b72:	f04f 0200 	mov.w	r2, #0
 8011b76:	f04f 0300 	mov.w	r3, #0
 8011b7a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8011b7e:	4621      	mov	r1, r4
 8011b80:	0fca      	lsrs	r2, r1, #31
 8011b82:	4629      	mov	r1, r5
 8011b84:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8011b88:	4629      	mov	r1, r5
 8011b8a:	17cb      	asrs	r3, r1, #31
 8011b8c:	4613      	mov	r3, r2
 8011b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 8011b92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011b96:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 8011b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 8011b9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011ba2:	17da      	asrs	r2, r3, #31
 8011ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011ba6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8011ba8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011bac:	17da      	asrs	r2, r3, #31
 8011bae:	643b      	str	r3, [r7, #64]	@ 0x40
 8011bb0:	647a      	str	r2, [r7, #68]	@ 0x44
 8011bb2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8011bb6:	462b      	mov	r3, r5
 8011bb8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8011bbc:	4642      	mov	r2, r8
 8011bbe:	fb02 f203 	mul.w	r2, r2, r3
 8011bc2:	464b      	mov	r3, r9
 8011bc4:	4621      	mov	r1, r4
 8011bc6:	fb01 f303 	mul.w	r3, r1, r3
 8011bca:	4413      	add	r3, r2
 8011bcc:	4622      	mov	r2, r4
 8011bce:	4641      	mov	r1, r8
 8011bd0:	fba2 1201 	umull	r1, r2, r2, r1
 8011bd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011bd8:	460a      	mov	r2, r1
 8011bda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8011bde:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8011be2:	4413      	add	r3, r2
 8011be4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011be8:	f04f 0200 	mov.w	r2, #0
 8011bec:	f04f 0300 	mov.w	r3, #0
 8011bf0:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8011bf4:	4621      	mov	r1, r4
 8011bf6:	0f4a      	lsrs	r2, r1, #29
 8011bf8:	4629      	mov	r1, r5
 8011bfa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8011bfe:	4629      	mov	r1, r5
 8011c00:	174b      	asrs	r3, r1, #29
 8011c02:	4613      	mov	r3, r2
 8011c04:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* 3rd iteration */
    temp = ((q63_t) var1 * var1) >> 28;
 8011c08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011c0c:	17da      	asrs	r2, r3, #31
 8011c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011c12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011c16:	17da      	asrs	r2, r3, #31
 8011c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8011c1a:	637a      	str	r2, [r7, #52]	@ 0x34
 8011c1c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8011c20:	462b      	mov	r3, r5
 8011c22:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8011c26:	4642      	mov	r2, r8
 8011c28:	fb02 f203 	mul.w	r2, r2, r3
 8011c2c:	464b      	mov	r3, r9
 8011c2e:	4621      	mov	r1, r4
 8011c30:	fb01 f303 	mul.w	r3, r1, r3
 8011c34:	4413      	add	r3, r2
 8011c36:	4622      	mov	r2, r4
 8011c38:	4641      	mov	r1, r8
 8011c3a:	fba2 1201 	umull	r1, r2, r2, r1
 8011c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011c42:	460a      	mov	r2, r1
 8011c44:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8011c48:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011c4c:	4413      	add	r3, r2
 8011c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011c52:	f04f 0200 	mov.w	r2, #0
 8011c56:	f04f 0300 	mov.w	r3, #0
 8011c5a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8011c5e:	4621      	mov	r1, r4
 8011c60:	0f0a      	lsrs	r2, r1, #28
 8011c62:	4629      	mov	r1, r5
 8011c64:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8011c68:	4629      	mov	r1, r5
 8011c6a:	170b      	asrs	r3, r1, #28
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 8011c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011c76:	17da      	asrs	r2, r3, #31
 8011c78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011c7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011c80:	17da      	asrs	r2, r3, #31
 8011c82:	623b      	str	r3, [r7, #32]
 8011c84:	627a      	str	r2, [r7, #36]	@ 0x24
 8011c86:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8011c8a:	462b      	mov	r3, r5
 8011c8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011c90:	4642      	mov	r2, r8
 8011c92:	fb02 f203 	mul.w	r2, r2, r3
 8011c96:	464b      	mov	r3, r9
 8011c98:	4621      	mov	r1, r4
 8011c9a:	fb01 f303 	mul.w	r3, r1, r3
 8011c9e:	4413      	add	r3, r2
 8011ca0:	4622      	mov	r2, r4
 8011ca2:	4641      	mov	r1, r8
 8011ca4:	fba2 1201 	umull	r1, r2, r2, r1
 8011ca8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8011cac:	460a      	mov	r2, r1
 8011cae:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8011cb2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011cb6:	4413      	add	r3, r2
 8011cb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011cbc:	f04f 0200 	mov.w	r2, #0
 8011cc0:	f04f 0300 	mov.w	r3, #0
 8011cc4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8011cc8:	4621      	mov	r1, r4
 8011cca:	0fca      	lsrs	r2, r1, #31
 8011ccc:	4629      	mov	r1, r5
 8011cce:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8011cd2:	4629      	mov	r1, r5
 8011cd4:	17cb      	asrs	r3, r1, #31
 8011cd6:	4613      	mov	r3, r2
 8011cd8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 8011cdc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011ce0:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 8011ce4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 8011ce8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011cec:	17da      	asrs	r2, r3, #31
 8011cee:	61bb      	str	r3, [r7, #24]
 8011cf0:	61fa      	str	r2, [r7, #28]
 8011cf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011cf6:	17da      	asrs	r2, r3, #31
 8011cf8:	613b      	str	r3, [r7, #16]
 8011cfa:	617a      	str	r2, [r7, #20]
 8011cfc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011d00:	462b      	mov	r3, r5
 8011d02:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8011d06:	4642      	mov	r2, r8
 8011d08:	fb02 f203 	mul.w	r2, r2, r3
 8011d0c:	464b      	mov	r3, r9
 8011d0e:	4621      	mov	r1, r4
 8011d10:	fb01 f303 	mul.w	r3, r1, r3
 8011d14:	4413      	add	r3, r2
 8011d16:	4622      	mov	r2, r4
 8011d18:	4641      	mov	r1, r8
 8011d1a:	fba2 1201 	umull	r1, r2, r2, r1
 8011d1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011d22:	460a      	mov	r2, r1
 8011d24:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011d28:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011d2c:	4413      	add	r3, r2
 8011d2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011d32:	f04f 0200 	mov.w	r2, #0
 8011d36:	f04f 0300 	mov.w	r3, #0
 8011d3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8011d3e:	4621      	mov	r1, r4
 8011d40:	0f4a      	lsrs	r2, r1, #29
 8011d42:	4629      	mov	r1, r5
 8011d44:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8011d48:	4629      	mov	r1, r5
 8011d4a:	174b      	asrs	r3, r1, #29
 8011d4c:	e002      	b.n	8011d54 <arm_sqrt_q31+0x444>
 8011d4e:	bf00      	nop
 8011d50:	08033a34 	.word	0x08033a34
 8011d54:	4613      	mov	r3, r2
 8011d56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* Multiply the inverse square root with the original value */
    var1 = ((q31_t) (((q63_t) number * var1) >> 28));
 8011d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011d5e:	17da      	asrs	r2, r3, #31
 8011d60:	60bb      	str	r3, [r7, #8]
 8011d62:	60fa      	str	r2, [r7, #12]
 8011d64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011d68:	17da      	asrs	r2, r3, #31
 8011d6a:	603b      	str	r3, [r7, #0]
 8011d6c:	607a      	str	r2, [r7, #4]
 8011d6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011d72:	462b      	mov	r3, r5
 8011d74:	e9d7 8900 	ldrd	r8, r9, [r7]
 8011d78:	4642      	mov	r2, r8
 8011d7a:	fb02 f203 	mul.w	r2, r2, r3
 8011d7e:	464b      	mov	r3, r9
 8011d80:	4621      	mov	r1, r4
 8011d82:	fb01 f303 	mul.w	r3, r1, r3
 8011d86:	4413      	add	r3, r2
 8011d88:	4622      	mov	r2, r4
 8011d8a:	4641      	mov	r1, r8
 8011d8c:	fba2 1201 	umull	r1, r2, r2, r1
 8011d90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011d94:	460a      	mov	r2, r1
 8011d96:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8011d9a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011d9e:	4413      	add	r3, r2
 8011da0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011da4:	f04f 0200 	mov.w	r2, #0
 8011da8:	f04f 0300 	mov.w	r3, #0
 8011dac:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8011db0:	4621      	mov	r1, r4
 8011db2:	0f0a      	lsrs	r2, r1, #28
 8011db4:	4629      	mov	r1, r5
 8011db6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8011dba:	4629      	mov	r1, r5
 8011dbc:	170b      	asrs	r3, r1, #28
 8011dbe:	4613      	mov	r3, r2
 8011dc0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* Shift the output down accordingly */
    if ((signBits1 % 2) == 0)
 8011dc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011dc8:	f003 0301 	and.w	r3, r3, #1
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d10c      	bne.n	8011dea <arm_sqrt_q31+0x4da>
    {
      var1 = var1 >> (signBits1 / 2);
 8011dd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	da00      	bge.n	8011dda <arm_sqrt_q31+0x4ca>
 8011dd8:	3301      	adds	r3, #1
 8011dda:	105b      	asrs	r3, r3, #1
 8011ddc:	461a      	mov	r2, r3
 8011dde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011de2:	4113      	asrs	r3, r2
 8011de4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8011de8:	e00c      	b.n	8011e04 <arm_sqrt_q31+0x4f4>
    }
    else
    {
      var1 = var1 >> ((signBits1 - 1) / 2);
 8011dea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011dee:	3b01      	subs	r3, #1
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	da00      	bge.n	8011df6 <arm_sqrt_q31+0x4e6>
 8011df4:	3301      	adds	r3, #1
 8011df6:	105b      	asrs	r3, r3, #1
 8011df8:	461a      	mov	r2, r3
 8011dfa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011dfe:	4113      	asrs	r3, r2
 8011e00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    }
    *pOut = var1;
 8011e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011e08:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8011e0c:	601a      	str	r2, [r3, #0]

    return (ARM_MATH_SUCCESS);
 8011e0e:	2300      	movs	r3, #0
 8011e10:	e00b      	b.n	8011e2a <arm_sqrt_q31+0x51a>
  }
  /* If the number is a negative number then store zero as its square root value */
  else
  {
    *pOut = 0;
 8011e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011e16:	2200      	movs	r2, #0
 8011e18:	601a      	str	r2, [r3, #0]

    if (number==0)
 8011e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d101      	bne.n	8011e26 <arm_sqrt_q31+0x516>
    {
       return (ARM_MATH_SUCCESS);
 8011e22:	2300      	movs	r3, #0
 8011e24:	e001      	b.n	8011e2a <arm_sqrt_q31+0x51a>
    }
    else
    {
       return (ARM_MATH_ARGUMENT_ERROR);
 8011e26:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	37fc      	adds	r7, #252	@ 0xfc
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011e34:	4770      	bx	lr
 8011e36:	bf00      	nop

08011e38 <arm_scalar_log_q31>:
/* 1.0 / Log2[Exp[1]] in Q31 */
#define LOG_Q31_INVLOG2EXP 0x58b90bfbuL

/* Clay Turner algorithm */
static uint32_t arm_scalar_log_q31(uint32_t src)
{
 8011e38:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011e3c:	b08d      	sub	sp, #52	@ 0x34
 8011e3e:	af00      	add	r7, sp, #0
 8011e40:	60f8      	str	r0, [r7, #12]
 8011e42:	68f9      	ldr	r1, [r7, #12]
 8011e44:	6139      	str	r1, [r7, #16]
  if (value == 0U)
 8011e46:	6939      	ldr	r1, [r7, #16]
 8011e48:	2900      	cmp	r1, #0
 8011e4a:	d101      	bne.n	8011e50 <arm_scalar_log_q31+0x18>
    return 32U;
 8011e4c:	2120      	movs	r1, #32
 8011e4e:	e003      	b.n	8011e58 <arm_scalar_log_q31+0x20>
  return __builtin_clz(value);
 8011e50:	6939      	ldr	r1, [r7, #16]
 8011e52:	fab1 f181 	clz	r1, r1
 8011e56:	b2c9      	uxtb	r1, r1
   int32_t i;

   int32_t c = __CLZ(src);
 8011e58:	61f9      	str	r1, [r7, #28]
   int32_t normalization=0;
 8011e5a:	2100      	movs	r1, #0
 8011e5c:	61b9      	str	r1, [r7, #24]

   /* 0.5 in q26 */
   uint32_t inc = LOQ_Q31_Q32_HALF >> (LOG_Q31_INTEGER_PART + 1);
 8011e5e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8011e62:	62b9      	str	r1, [r7, #40]	@ 0x28

   /* Will compute y = log2(x) for 1 <= x < 2.0 */
   uint32_t x;

   /* q26 */
   uint32_t y=0;
 8011e64:	2100      	movs	r1, #0
 8011e66:	6239      	str	r1, [r7, #32]
   /* q26 */
   int32_t tmp;


   /* Normalize and convert to q30 format */
   x = src;
 8011e68:	68f9      	ldr	r1, [r7, #12]
 8011e6a:	6279      	str	r1, [r7, #36]	@ 0x24
   if ((c-1) < 0)
 8011e6c:	69f9      	ldr	r1, [r7, #28]
 8011e6e:	2900      	cmp	r1, #0
 8011e70:	dc07      	bgt.n	8011e82 <arm_scalar_log_q31+0x4a>
   {
     x = x >> (1-c);
 8011e72:	69f9      	ldr	r1, [r7, #28]
 8011e74:	f1c1 0101 	rsb	r1, r1, #1
 8011e78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011e7a:	fa20 f101 	lsr.w	r1, r0, r1
 8011e7e:	6279      	str	r1, [r7, #36]	@ 0x24
 8011e80:	e005      	b.n	8011e8e <arm_scalar_log_q31+0x56>
   }
   else
   {
     x = x << (c-1);
 8011e82:	69f9      	ldr	r1, [r7, #28]
 8011e84:	3901      	subs	r1, #1
 8011e86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011e88:	fa00 f101 	lsl.w	r1, r0, r1
 8011e8c:	6279      	str	r1, [r7, #36]	@ 0x24
   }
   normalization = c;
 8011e8e:	69f9      	ldr	r1, [r7, #28]
 8011e90:	61b9      	str	r1, [r7, #24]
   /* Compute the Log2. Result is in q26
      because we know 0 <= y < 1.0 but
      do not want to use q32 to allow
      following computation with less instructions.
   */
   for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 8011e92:	2100      	movs	r1, #0
 8011e94:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8011e96:	e02d      	b.n	8011ef4 <arm_scalar_log_q31+0xbc>
   {
      x = ((int64_t)x*x)  >> (LOG_Q31_ACCURACY - 1);
 8011e98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011e9a:	2000      	movs	r0, #0
 8011e9c:	468a      	mov	sl, r1
 8011e9e:	4683      	mov	fp, r0
 8011ea0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011ea2:	2000      	movs	r0, #0
 8011ea4:	6039      	str	r1, [r7, #0]
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6839      	ldr	r1, [r7, #0]
 8011eaa:	fb01 f00b 	mul.w	r0, r1, fp
 8011eae:	6879      	ldr	r1, [r7, #4]
 8011eb0:	fb0a f101 	mul.w	r1, sl, r1
 8011eb4:	4401      	add	r1, r0
 8011eb6:	6838      	ldr	r0, [r7, #0]
 8011eb8:	fbaa 4500 	umull	r4, r5, sl, r0
 8011ebc:	4429      	add	r1, r5
 8011ebe:	460d      	mov	r5, r1
 8011ec0:	f04f 0000 	mov.w	r0, #0
 8011ec4:	f04f 0100 	mov.w	r1, #0
 8011ec8:	0fa0      	lsrs	r0, r4, #30
 8011eca:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
 8011ece:	17a9      	asrs	r1, r5, #30
 8011ed0:	4601      	mov	r1, r0
 8011ed2:	6279      	str	r1, [r7, #36]	@ 0x24

      if (x >= LOQ_Q31_THRESHOLD)
 8011ed4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011ed6:	2900      	cmp	r1, #0
 8011ed8:	da06      	bge.n	8011ee8 <arm_scalar_log_q31+0xb0>
      {
         y += inc ;
 8011eda:	6a38      	ldr	r0, [r7, #32]
 8011edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011ede:	4401      	add	r1, r0
 8011ee0:	6239      	str	r1, [r7, #32]
         x = x >> 1;
 8011ee2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011ee4:	0849      	lsrs	r1, r1, #1
 8011ee6:	6279      	str	r1, [r7, #36]	@ 0x24
      }
      inc = inc >> 1;
 8011ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011eea:	0849      	lsrs	r1, r1, #1
 8011eec:	62b9      	str	r1, [r7, #40]	@ 0x28
   for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 8011eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ef0:	3101      	adds	r1, #1
 8011ef2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8011ef4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ef6:	291e      	cmp	r1, #30
 8011ef8:	ddce      	ble.n	8011e98 <arm_scalar_log_q31+0x60>
      We compute (y - normalisation) * (1 / Log2[e]).

   */

   /* q26 */
   tmp = (int32_t)y - (normalization << (LOG_Q31_ACCURACY - LOG_Q31_INTEGER_PART));
 8011efa:	6a38      	ldr	r0, [r7, #32]
 8011efc:	69b9      	ldr	r1, [r7, #24]
 8011efe:	0689      	lsls	r1, r1, #26
 8011f00:	1a41      	subs	r1, r0, r1
 8011f02:	6179      	str	r1, [r7, #20]


   /* q5.26 */
   y = ((int64_t)tmp * LOG_Q31_INVLOG2EXP) >> 31;
 8011f04:	6979      	ldr	r1, [r7, #20]
 8011f06:	17c8      	asrs	r0, r1, #31
 8011f08:	4688      	mov	r8, r1
 8011f0a:	4681      	mov	r9, r0
 8011f0c:	490e      	ldr	r1, [pc, #56]	@ (8011f48 <arm_scalar_log_q31+0x110>)
 8011f0e:	fb01 f009 	mul.w	r0, r1, r9
 8011f12:	2100      	movs	r1, #0
 8011f14:	fb01 f108 	mul.w	r1, r1, r8
 8011f18:	4401      	add	r1, r0
 8011f1a:	480b      	ldr	r0, [pc, #44]	@ (8011f48 <arm_scalar_log_q31+0x110>)
 8011f1c:	fba8 2300 	umull	r2, r3, r8, r0
 8011f20:	4419      	add	r1, r3
 8011f22:	460b      	mov	r3, r1
 8011f24:	f04f 0000 	mov.w	r0, #0
 8011f28:	f04f 0100 	mov.w	r1, #0
 8011f2c:	0fd0      	lsrs	r0, r2, #31
 8011f2e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011f32:	17d9      	asrs	r1, r3, #31
 8011f34:	4603      	mov	r3, r0
 8011f36:	623b      	str	r3, [r7, #32]



   return(y);
 8011f38:	6a3b      	ldr	r3, [r7, #32]

}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3734      	adds	r7, #52	@ 0x34
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop
 8011f48:	58b90bfb 	.word	0x58b90bfb

08011f4c <arm_vlog_q31>:
 */
ARM_DSP_ATTRIBUTE void arm_vlog_q31(
  const q31_t * pSrc,
        q31_t * pDst,
        uint32_t blockSize)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b086      	sub	sp, #24
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	60f8      	str	r0, [r7, #12]
 8011f54:	60b9      	str	r1, [r7, #8]
 8011f56:	607a      	str	r2, [r7, #4]
      blkCnt--;
  }

  blkCnt = blockSize & 3;
  #else
  blkCnt = blockSize;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	617b      	str	r3, [r7, #20]
  #endif

  while (blkCnt > 0U)
 8011f5c:	e00f      	b.n	8011f7e <arm_vlog_q31+0x32>
  {
     *pDst++=arm_scalar_log_q31(*pSrc++);
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	1d1a      	adds	r2, r3, #4
 8011f62:	60fa      	str	r2, [r7, #12]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7ff ff66 	bl	8011e38 <arm_scalar_log_q31>
 8011f6c:	4601      	mov	r1, r0
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	1d1a      	adds	r2, r3, #4
 8011f72:	60ba      	str	r2, [r7, #8]
 8011f74:	460a      	mov	r2, r1
 8011f76:	601a      	str	r2, [r3, #0]

     blkCnt--;
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	3b01      	subs	r3, #1
 8011f7c:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8011f7e:	697b      	ldr	r3, [r7, #20]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d1ec      	bne.n	8011f5e <arm_vlog_q31+0x12>
  }

}
 8011f84:	bf00      	nop
 8011f86:	bf00      	nop
 8011f88:	3718      	adds	r7, #24
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}

08011f8e <arm_mat_vec_mult_q15>:
    }
}

#else
ARM_DSP_ATTRIBUTE void arm_mat_vec_mult_q15(const arm_matrix_instance_q15 *pSrcMat, const q15_t *pVec, q15_t *pDst)
{
 8011f8e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011f92:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f9c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011fa0:	6018      	str	r0, [r3, #0]
 8011fa2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fa6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011faa:	6019      	str	r1, [r3, #0]
 8011fac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fb0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8011fb4:	601a      	str	r2, [r3, #0]
    uint32_t numRows = pSrcMat->numRows;
 8011fb6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	881b      	ldrh	r3, [r3, #0]
 8011fc2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    uint32_t numCols = pSrcMat->numCols;
 8011fc6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	885b      	ldrh	r3, [r3, #2]
 8011fd2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    const q15_t *pSrcA = pSrcMat->pData;
 8011fd6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fda:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    uint16_t i, row, colCnt; /* loop counters */
    q31_t matData, matData2, vecData, vecData2;


    /* Process 4 rows at a time */
    row = numRows >> 2;
 8011fe6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8011fea:	089b      	lsrs	r3, r3, #2
 8011fec:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    i = 0u;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
    px = pDst;
 8011ff6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ffa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c

    /* The following loop performs the dot-product of each row in pSrcA with the vector */
    /* row loop */
    while (row > 0) {
 8012004:	e34b      	b.n	801269e <arm_mat_vec_mult_q15+0x710>
        /* Initialize accumulators */
        q63_t sum1 = 0;
 8012006:	f04f 0200 	mov.w	r2, #0
 801200a:	f04f 0300 	mov.w	r3, #0
 801200e:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
        q63_t sum2 = 0;
 8012012:	f04f 0200 	mov.w	r2, #0
 8012016:	f04f 0300 	mov.w	r3, #0
 801201a:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
        q63_t sum3 = 0;
 801201e:	f04f 0200 	mov.w	r2, #0
 8012022:	f04f 0300 	mov.w	r3, #0
 8012026:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
        q63_t sum4 = 0;
 801202a:	f04f 0200 	mov.w	r2, #0
 801202e:	f04f 0300 	mov.w	r3, #0
 8012032:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0

        /* For every row wise process, the pInVec pointer is set
         ** to the starting address of the vector */
        pInVec = pVec;
 8012036:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801203a:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 801203e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012042:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	6013      	str	r3, [r2, #0]

        /* Loop unrolling: process 2 columns per iteration */
        colCnt = numCols >> 1;
 801204a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 801204e:	085b      	lsrs	r3, r3, #1
 8012050:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216

        /* Initialize pointers to the starting address of the column being processed */
        pInA1 = pSrcA + i;
 8012054:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8012058:	005a      	lsls	r2, r3, #1
 801205a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 801205e:	441a      	add	r2, r3
 8012060:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012064:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012068:	601a      	str	r2, [r3, #0]
        pInA2 = pInA1 + numCols;
 801206a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801206e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8012078:	005b      	lsls	r3, r3, #1
 801207a:	441a      	add	r2, r3
 801207c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012080:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8012084:	601a      	str	r2, [r3, #0]
        pInA3 = pInA2 + numCols;
 8012086:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801208a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8012094:	005b      	lsls	r3, r3, #1
 8012096:	441a      	add	r2, r3
 8012098:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801209c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80120a0:	601a      	str	r2, [r3, #0]
        pInA4 = pInA3 + numCols;
 80120a2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80120aa:	681a      	ldr	r2, [r3, #0]
 80120ac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80120b0:	005b      	lsls	r3, r3, #1
 80120b2:	441a      	add	r2, r3
 80120b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120b8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80120bc:	601a      	str	r2, [r3, #0]

        // Main loop: matrix-vector multiplication
        while (colCnt > 0u) {
 80120be:	e16b      	b.n	8012398 <arm_mat_vec_mult_q15+0x40a>
            // Read 2 values from vector
            vecData = read_q15x2_ia (&pInVec);
 80120c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120c4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	1d1a      	adds	r2, r3, #4
 80120cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80120d4:	601a      	str	r2, [r3, #0]
 80120d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120da:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	3b04      	subs	r3, #4
 80120e2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  memcpy (&val, pQ15, 4);
 80120e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	461a      	mov	r2, r3
 80120ee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80120f6:	601a      	str	r2, [r3, #0]
  return (val);
 80120f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120fc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

            // Read 8 values from the matrix - 2 values from each of 4 rows, and do multiply accumulate
            matData =  read_q15x2_ia (&pInA1);
 8012106:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801210a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	1d1a      	adds	r2, r3, #4
 8012112:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012116:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801211a:	601a      	str	r2, [r3, #0]
 801211c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012120:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	3b04      	subs	r3, #4
 8012128:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  memcpy (&val, pQ15, 4);
 801212c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	461a      	mov	r2, r3
 8012134:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012138:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801213c:	601a      	str	r2, [r3, #0]
  return (val);
 801213e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012142:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum1 = __SMLALD(matData, vecData, sum1);
 801214c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8012150:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8012154:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8012158:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
 801215c:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 8012160:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
  llr.w64 = acc;
 8012164:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8012168:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 801216c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012170:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8012174:	6819      	ldr	r1, [r3, #0]
 8012176:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801217a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801217e:	685a      	ldr	r2, [r3, #4]
 8012180:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8012184:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8012188:	fbc0 12c3 	smlald	r1, r2, r0, r3
 801218c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012190:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8012194:	6019      	str	r1, [r3, #0]
 8012196:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801219a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801219e:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 80121a0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 80121a4:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
            matData = read_q15x2_ia (&pInA2);
 80121a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80121ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	1d1a      	adds	r2, r3, #4
 80121b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80121b8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80121bc:	601a      	str	r2, [r3, #0]
 80121be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80121c2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	3b04      	subs	r3, #4
 80121ca:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  memcpy (&val, pQ15, 4);
 80121ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	461a      	mov	r2, r3
 80121d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80121da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80121de:	601a      	str	r2, [r3, #0]
  return (val);
 80121e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80121e4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum2 = __SMLALD(matData, vecData, sum2);
 80121ee:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 80121f2:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 80121f6:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80121fa:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170
 80121fe:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
 8012202:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
  llr.w64 = acc;
 8012206:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 801220a:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 801220e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012212:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8012216:	6819      	ldr	r1, [r3, #0]
 8012218:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801221c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8012220:	685a      	ldr	r2, [r3, #4]
 8012222:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 8012226:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801222a:	fbc0 12c3 	smlald	r1, r2, r0, r3
 801222e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012232:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8012236:	6019      	str	r1, [r3, #0]
 8012238:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801223c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8012240:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8012242:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8012246:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
            matData = read_q15x2_ia (&pInA3);
 801224a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801224e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	1d1a      	adds	r2, r3, #4
 8012256:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801225a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801225e:	601a      	str	r2, [r3, #0]
 8012260:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012264:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	3b04      	subs	r3, #4
 801226c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  memcpy (&val, pQ15, 4);
 8012270:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	461a      	mov	r2, r3
 8012278:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801227c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8012280:	601a      	str	r2, [r3, #0]
  return (val);
 8012282:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012286:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum3 = __SMLALD(matData, vecData, sum3);
 8012290:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8012294:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8012298:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 801229c:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
 80122a0:	f8c7 1184 	str.w	r1, [r7, #388]	@ 0x184
 80122a4:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
  llr.w64 = acc;
 80122a8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 80122ac:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80122b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80122b4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80122b8:	6819      	ldr	r1, [r3, #0]
 80122ba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80122be:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80122c2:	685a      	ldr	r2, [r3, #4]
 80122c4:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 80122c8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80122cc:	fbc0 12c3 	smlald	r1, r2, r0, r3
 80122d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80122d4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80122d8:	6019      	str	r1, [r3, #0]
 80122da:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80122de:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80122e2:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 80122e4:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80122e8:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
            matData = read_q15x2_ia (&pInA4);
 80122ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80122f0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	1d1a      	adds	r2, r3, #4
 80122f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80122fc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8012300:	601a      	str	r2, [r3, #0]
 8012302:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012306:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	3b04      	subs	r3, #4
 801230e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  memcpy (&val, pQ15, 4);
 8012312:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	461a      	mov	r2, r3
 801231a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801231e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8012322:	601a      	str	r2, [r3, #0]
  return (val);
 8012324:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012328:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum4 = __SMLALD(matData, vecData, sum4);
 8012332:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8012336:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 801233a:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 801233e:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
 8012342:	f8c7 119c 	str.w	r1, [r7, #412]	@ 0x19c
 8012346:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
  llr.w64 = acc;
 801234a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 801234e:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8012352:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012356:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801235a:	6819      	ldr	r1, [r3, #0]
 801235c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012360:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8012364:	685a      	ldr	r2, [r3, #4]
 8012366:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 801236a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 801236e:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8012372:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012376:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801237a:	6019      	str	r1, [r3, #0]
 801237c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012380:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8012384:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8012386:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 801238a:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0

            // Decrement the loop counter
            colCnt--;
 801238e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8012392:	3b01      	subs	r3, #1
 8012394:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0u) {
 8012398:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801239c:	2b00      	cmp	r3, #0
 801239e:	f47f ae8f 	bne.w	80120c0 <arm_mat_vec_mult_q15+0x132>
        }

        /* process any remaining columns */
        colCnt = numCols & 1u;
 80123a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	f003 0301 	and.w	r3, r3, #1
 80123ac:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        if (numCols & 1u) {
 80123b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80123b4:	f003 0301 	and.w	r3, r3, #1
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	f000 80f1 	beq.w	80125a0 <arm_mat_vec_mult_q15+0x612>
            vecData = *pInVec++;
 80123be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123c2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80123c6:	6819      	ldr	r1, [r3, #0]
 80123c8:	1c8a      	adds	r2, r1, #2
 80123ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123ce:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80123d2:	601a      	str	r2, [r3, #0]
 80123d4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80123d8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
            sum1 += (q63_t)*pInA1++ * vecData;
 80123dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80123e4:	6819      	ldr	r1, [r3, #0]
 80123e6:	1c8a      	adds	r2, r1, #2
 80123e8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80123f0:	601a      	str	r2, [r3, #0]
 80123f2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80123f6:	b21b      	sxth	r3, r3
 80123f8:	17da      	asrs	r2, r3, #31
 80123fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80123fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80123fe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012402:	17da      	asrs	r2, r3, #31
 8012404:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012406:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012408:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 801240c:	460b      	mov	r3, r1
 801240e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012410:	fb02 f203 	mul.w	r2, r2, r3
 8012414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012416:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
 801241a:	4601      	mov	r1, r0
 801241c:	fb01 f303 	mul.w	r3, r1, r3
 8012420:	4413      	add	r3, r2
 8012422:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8012424:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012426:	fba2 1201 	umull	r1, r2, r2, r1
 801242a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801242e:	460a      	mov	r2, r1
 8012430:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012434:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012438:	4413      	add	r3, r2
 801243a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801243e:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8012442:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8012446:	1851      	adds	r1, r2, r1
 8012448:	6239      	str	r1, [r7, #32]
 801244a:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 801244e:	414b      	adcs	r3, r1
 8012450:	627b      	str	r3, [r7, #36]	@ 0x24
 8012452:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012456:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
            sum2 += (q63_t)*pInA2++ * vecData;
 801245a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801245e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8012462:	6819      	ldr	r1, [r3, #0]
 8012464:	1c8a      	adds	r2, r1, #2
 8012466:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801246a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801246e:	601a      	str	r2, [r3, #0]
 8012470:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012474:	b21b      	sxth	r3, r3
 8012476:	17da      	asrs	r2, r3, #31
 8012478:	663b      	str	r3, [r7, #96]	@ 0x60
 801247a:	667a      	str	r2, [r7, #100]	@ 0x64
 801247c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012480:	17da      	asrs	r2, r3, #31
 8012482:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012484:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8012486:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801248a:	460b      	mov	r3, r1
 801248c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801248e:	fb02 f203 	mul.w	r2, r2, r3
 8012492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012494:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 8012498:	4601      	mov	r1, r0
 801249a:	fb01 f303 	mul.w	r3, r1, r3
 801249e:	4413      	add	r3, r2
 80124a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80124a2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80124a4:	fba2 1201 	umull	r1, r2, r2, r1
 80124a8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80124aa:	460a      	mov	r2, r1
 80124ac:	67ba      	str	r2, [r7, #120]	@ 0x78
 80124ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80124b0:	4413      	add	r3, r2
 80124b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80124b4:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80124b8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80124ba:	1851      	adds	r1, r2, r1
 80124bc:	61b9      	str	r1, [r7, #24]
 80124be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80124c0:	414b      	adcs	r3, r1
 80124c2:	61fb      	str	r3, [r7, #28]
 80124c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80124c8:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
            sum3 += (q63_t)*pInA3++ * vecData;
 80124cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124d0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80124d4:	6819      	ldr	r1, [r3, #0]
 80124d6:	1c8a      	adds	r2, r1, #2
 80124d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124dc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80124e0:	601a      	str	r2, [r3, #0]
 80124e2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80124e6:	b21b      	sxth	r3, r3
 80124e8:	17da      	asrs	r2, r3, #31
 80124ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80124ec:	657a      	str	r2, [r7, #84]	@ 0x54
 80124ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80124f2:	17da      	asrs	r2, r3, #31
 80124f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80124f6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80124f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80124fc:	460b      	mov	r3, r1
 80124fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012500:	fb02 f203 	mul.w	r2, r2, r3
 8012504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012506:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 801250a:	4601      	mov	r1, r0
 801250c:	fb01 f303 	mul.w	r3, r1, r3
 8012510:	4413      	add	r3, r2
 8012512:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012514:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012516:	fba2 ab01 	umull	sl, fp, r2, r1
 801251a:	445b      	add	r3, fp
 801251c:	469b      	mov	fp, r3
 801251e:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8012522:	eb12 010a 	adds.w	r1, r2, sl
 8012526:	6139      	str	r1, [r7, #16]
 8012528:	eb43 030b 	adc.w	r3, r3, fp
 801252c:	617b      	str	r3, [r7, #20]
 801252e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012532:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
            sum4 += (q63_t)*pInA4++ * vecData;
 8012536:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801253a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801253e:	6819      	ldr	r1, [r3, #0]
 8012540:	1c8a      	adds	r2, r1, #2
 8012542:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012546:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801254a:	601a      	str	r2, [r3, #0]
 801254c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012550:	b21b      	sxth	r3, r3
 8012552:	17da      	asrs	r2, r3, #31
 8012554:	643b      	str	r3, [r7, #64]	@ 0x40
 8012556:	647a      	str	r2, [r7, #68]	@ 0x44
 8012558:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801255c:	17da      	asrs	r2, r3, #31
 801255e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012560:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8012562:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8012566:	460b      	mov	r3, r1
 8012568:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801256a:	fb02 f203 	mul.w	r2, r2, r3
 801256e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012570:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8012574:	4601      	mov	r1, r0
 8012576:	fb01 f303 	mul.w	r3, r1, r3
 801257a:	4413      	add	r3, r2
 801257c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801257e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012580:	fba2 8901 	umull	r8, r9, r2, r1
 8012584:	444b      	add	r3, r9
 8012586:	4699      	mov	r9, r3
 8012588:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 801258c:	eb12 0108 	adds.w	r1, r2, r8
 8012590:	60b9      	str	r1, [r7, #8]
 8012592:	eb43 0309 	adc.w	r3, r3, r9
 8012596:	60fb      	str	r3, [r7, #12]
 8012598:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801259c:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
        }

        /* Saturate and store the result in the destination buffer */
        *px++ = (q15_t)(__SSAT((sum1 >> 15), 16));
 80125a0:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80125a4:	f04f 0000 	mov.w	r0, #0
 80125a8:	f04f 0100 	mov.w	r1, #0
 80125ac:	0bd0      	lsrs	r0, r2, #15
 80125ae:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80125b2:	13d9      	asrs	r1, r3, #15
 80125b4:	4603      	mov	r3, r0
 80125b6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80125ba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80125be:	f303 030f 	ssat	r3, #16, r3
 80125c2:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80125c6:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 80125ca:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80125ce:	1c93      	adds	r3, r2, #2
 80125d0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80125d4:	b20b      	sxth	r3, r1
 80125d6:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum2 >> 15), 16));
 80125d8:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80125dc:	f04f 0000 	mov.w	r0, #0
 80125e0:	f04f 0100 	mov.w	r1, #0
 80125e4:	0bd0      	lsrs	r0, r2, #15
 80125e6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80125ea:	13d9      	asrs	r1, r3, #15
 80125ec:	4603      	mov	r3, r0
 80125ee:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80125f2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80125f6:	f303 030f 	ssat	r3, #16, r3
 80125fa:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80125fe:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 8012602:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8012606:	1c93      	adds	r3, r2, #2
 8012608:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 801260c:	b20b      	sxth	r3, r1
 801260e:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum3 >> 15), 16));
 8012610:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8012614:	f04f 0000 	mov.w	r0, #0
 8012618:	f04f 0100 	mov.w	r1, #0
 801261c:	0bd0      	lsrs	r0, r2, #15
 801261e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8012622:	13d9      	asrs	r1, r3, #15
 8012624:	4603      	mov	r3, r0
 8012626:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 801262a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 801262e:	f303 030f 	ssat	r3, #16, r3
 8012632:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8012636:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 801263a:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801263e:	1c93      	adds	r3, r2, #2
 8012640:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8012644:	b20b      	sxth	r3, r1
 8012646:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum4 >> 15), 16));
 8012648:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 801264c:	f04f 0000 	mov.w	r0, #0
 8012650:	f04f 0100 	mov.w	r1, #0
 8012654:	0bd0      	lsrs	r0, r2, #15
 8012656:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 801265a:	13d9      	asrs	r1, r3, #15
 801265c:	4603      	mov	r3, r0
 801265e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8012662:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8012666:	f303 030f 	ssat	r3, #16, r3
 801266a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 801266e:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8012672:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8012676:	1c93      	adds	r3, r2, #2
 8012678:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 801267c:	b20b      	sxth	r3, r1
 801267e:	8013      	strh	r3, [r2, #0]

        i = i + numCols * 4;
 8012680:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8012684:	b29b      	uxth	r3, r3
 8012686:	009b      	lsls	r3, r3, #2
 8012688:	b29a      	uxth	r2, r3
 801268a:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 801268e:	4413      	add	r3, r2
 8012690:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a

        /* Decrement the row loop counter */
        row--;
 8012694:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8012698:	3b01      	subs	r3, #1
 801269a:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 801269e:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	f47f acaf 	bne.w	8012006 <arm_mat_vec_mult_q15+0x78>
    }

    /* process any remaining rows */
    row = numRows & 3u;
 80126a8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	f003 0303 	and.w	r3, r3, #3
 80126b2:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 80126b6:	e1a3      	b.n	8012a00 <arm_mat_vec_mult_q15+0xa72>

        q63_t sum = 0;
 80126b8:	f04f 0200 	mov.w	r2, #0
 80126bc:	f04f 0300 	mov.w	r3, #0
 80126c0:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
        pInVec = pVec;
 80126c4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80126c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80126cc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80126d0:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 80126d4:	6812      	ldr	r2, [r2, #0]
 80126d6:	601a      	str	r2, [r3, #0]
        pInA1 = pSrcA + i;
 80126d8:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 80126dc:	005b      	lsls	r3, r3, #1
 80126de:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80126e2:	441a      	add	r2, r3
 80126e4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80126e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80126ec:	601a      	str	r2, [r3, #0]

        // loop unrolling - process 4 elements at a time
        colCnt = numCols >> 2;
 80126ee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80126f2:	089b      	lsrs	r3, r3, #2
 80126f4:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216

        while (colCnt > 0) {
 80126f8:	e104      	b.n	8012904 <arm_mat_vec_mult_q15+0x976>
            vecData = read_q15x2_ia (&pInVec);
 80126fa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80126fe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	1d1a      	adds	r2, r3, #4
 8012706:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801270a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801270e:	601a      	str	r2, [r3, #0]
 8012710:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012714:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	1f1a      	subs	r2, r3, #4
 801271c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012720:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8012724:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8012726:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801272a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	461a      	mov	r2, r3
 8012734:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012738:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801273c:	601a      	str	r2, [r3, #0]
  return (val);
 801273e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012742:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
            vecData2 = read_q15x2_ia (&pInVec);
 801274c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012750:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	1d1a      	adds	r2, r3, #4
 8012758:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801275c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012760:	601a      	str	r2, [r3, #0]
 8012762:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012766:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	1f1a      	subs	r2, r3, #4
 801276e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012772:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012776:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8012778:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801277c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	461a      	mov	r2, r3
 8012786:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801278a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801278e:	601a      	str	r2, [r3, #0]
  return (val);
 8012790:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012794:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
            matData = read_q15x2_ia (&pInA1);
 801279e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80127a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	1d1a      	adds	r2, r3, #4
 80127aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80127ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80127b2:	601a      	str	r2, [r3, #0]
 80127b4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80127b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	1f1a      	subs	r2, r3, #4
 80127c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80127c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80127c8:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80127ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80127ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	461a      	mov	r2, r3
 80127d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80127dc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80127e0:	601a      	str	r2, [r3, #0]
  return (val);
 80127e2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80127e6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            matData2 = read_q15x2_ia (&pInA1);
 80127f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80127f4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	1d1a      	adds	r2, r3, #4
 80127fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012800:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012804:	601a      	str	r2, [r3, #0]
 8012806:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801280a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	1f1a      	subs	r2, r3, #4
 8012812:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801281a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801281c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012820:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	461a      	mov	r2, r3
 801282a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801282e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8012832:	601a      	str	r2, [r3, #0]
  return (val);
 8012834:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012838:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
            sum = __SMLALD(matData, vecData, sum);
 8012842:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8012846:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 801284a:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 801284e:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 8012852:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 8012856:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
  llr.w64 = acc;
 801285a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 801285e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8012862:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012866:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 801286a:	681a      	ldr	r2, [r3, #0]
 801286c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012870:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 801287a:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 801287e:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8012882:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8012886:	f5a1 71c0 	sub.w	r1, r1, #384	@ 0x180
 801288a:	600a      	str	r2, [r1, #0]
 801288c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8012890:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8012894:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8012896:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 801289a:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            sum = __SMLALD(matData2, vecData2, sum);
 801289e:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 80128a2:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 80128a6:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80128aa:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
 80128ae:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 80128b2:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
  llr.w64 = acc;
 80128b6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80128ba:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80128be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80128c2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80128cc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80128d0:	685b      	ldr	r3, [r3, #4]
 80128d2:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80128d6:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80128da:	fbc1 23c0 	smlald	r2, r3, r1, r0
 80128de:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 80128e2:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 80128e6:	600a      	str	r2, [r1, #0]
 80128e8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80128ec:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80128f0:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 80128f2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80128f6:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            colCnt--;
 80128fa:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80128fe:	3b01      	subs	r3, #1
 8012900:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 8012904:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8012908:	2b00      	cmp	r3, #0
 801290a:	f47f aef6 	bne.w	80126fa <arm_mat_vec_mult_q15+0x76c>
        }

        // process remainder of row
        colCnt = numCols & 3u;
 801290e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8012912:	b29b      	uxth	r3, r3
 8012914:	f003 0303 	and.w	r3, r3, #3
 8012918:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 801291c:	e043      	b.n	80129a6 <arm_mat_vec_mult_q15+0xa18>
            sum += (q63_t)*pInA1++ * *pInVec++;
 801291e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012922:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	1c99      	adds	r1, r3, #2
 801292a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801292e:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8012932:	6011      	str	r1, [r2, #0]
 8012934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012938:	b21b      	sxth	r3, r3
 801293a:	17da      	asrs	r2, r3, #31
 801293c:	633b      	str	r3, [r7, #48]	@ 0x30
 801293e:	637a      	str	r2, [r7, #52]	@ 0x34
 8012940:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012944:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	1c99      	adds	r1, r3, #2
 801294c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8012950:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8012954:	6011      	str	r1, [r2, #0]
 8012956:	f9b3 3000 	ldrsh.w	r3, [r3]
 801295a:	b21b      	sxth	r3, r3
 801295c:	17da      	asrs	r2, r3, #31
 801295e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012960:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012962:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8012966:	464b      	mov	r3, r9
 8012968:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 801296c:	4652      	mov	r2, sl
 801296e:	fb02 f203 	mul.w	r2, r2, r3
 8012972:	465b      	mov	r3, fp
 8012974:	4641      	mov	r1, r8
 8012976:	fb01 f303 	mul.w	r3, r1, r3
 801297a:	4413      	add	r3, r2
 801297c:	4642      	mov	r2, r8
 801297e:	4651      	mov	r1, sl
 8012980:	fba2 4501 	umull	r4, r5, r2, r1
 8012984:	442b      	add	r3, r5
 8012986:	461d      	mov	r5, r3
 8012988:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 801298c:	1911      	adds	r1, r2, r4
 801298e:	6039      	str	r1, [r7, #0]
 8012990:	416b      	adcs	r3, r5
 8012992:	607b      	str	r3, [r7, #4]
 8012994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012998:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            colCnt--;
 801299c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80129a0:	3b01      	subs	r3, #1
 80129a2:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 80129a6:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d1b7      	bne.n	801291e <arm_mat_vec_mult_q15+0x990>
        }
        *px++ = (q15_t)(__SSAT((sum >> 15), 16));
 80129ae:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80129b2:	f04f 0200 	mov.w	r2, #0
 80129b6:	f04f 0300 	mov.w	r3, #0
 80129ba:	0bc2      	lsrs	r2, r0, #15
 80129bc:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80129c0:	13cb      	asrs	r3, r1, #15
 80129c2:	4613      	mov	r3, r2
 80129c4:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80129c8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80129cc:	f303 030f 	ssat	r3, #16, r3
 80129d0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80129d4:	f8d7 11d4 	ldr.w	r1, [r7, #468]	@ 0x1d4
 80129d8:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80129dc:	1c9a      	adds	r2, r3, #2
 80129de:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 80129e2:	b20a      	sxth	r2, r1
 80129e4:	801a      	strh	r2, [r3, #0]
        i = i + numCols;
 80129e6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80129ea:	b29a      	uxth	r2, r3
 80129ec:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 80129f0:	4413      	add	r3, r2
 80129f2:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
        row--;
 80129f6:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80129fa:	3b01      	subs	r3, #1
 80129fc:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 8012a00:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	f47f ae57 	bne.w	80126b8 <arm_mat_vec_mult_q15+0x72a>
    }
}
 8012a0a:	bf00      	nop
 8012a0c:	bf00      	nop
 8012a0e:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 8012a12:	46bd      	mov	sp, r7
 8012a14:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8012a18:	4770      	bx	lr

08012a1a <arm_absmax_q15>:
ARM_DSP_ATTRIBUTE void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 8012a1a:	b480      	push	{r7}
 8012a1c:	b09d      	sub	sp, #116	@ 0x74
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	60f8      	str	r0, [r7, #12]
 8012a22:	60b9      	str	r1, [r7, #8]
 8012a24:	607a      	str	r2, [r7, #4]
 8012a26:	603b      	str	r3, [r7, #0]
        q15_t cur_absmax, out;                     /* Temporary variables to store the output value. */\
        uint32_t blkCnt, outIndex;                     /* Loop counter */                                   \
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
 8012a28:	2300      	movs	r3, #0
 8012a2a:	667b      	str	r3, [r7, #100]	@ 0x64
  /* Load first input value that act as reference value for comparison */                                  \
  out = *pSrc++;                                                                                            \
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	1c9a      	adds	r2, r3, #2
 8012a30:	60fa      	str	r2, [r7, #12]
 8012a32:	881b      	ldrh	r3, [r3, #0]
 8012a34:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 8012a38:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	dc0c      	bgt.n	8012a5a <arm_absmax_q15+0x40>
 8012a40:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012a44:	2200      	movs	r2, #0
 8012a46:	65ba      	str	r2, [r7, #88]	@ 0x58
 8012a48:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012a4e:	fad3 f312 	qsub16	r3, r3, r2
 8012a52:	653b      	str	r3, [r7, #80]	@ 0x50
  return(result);
 8012a54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012a56:	b21b      	sxth	r3, r3
 8012a58:	e001      	b.n	8012a5e <arm_absmax_q15+0x44>
 8012a5a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012a5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
 8012a62:	2300      	movs	r3, #0
 8012a64:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	3b01      	subs	r3, #1
 8012a6a:	089b      	lsrs	r3, r3, #2
 8012a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8012a6e:	e0a5      	b.n	8012bbc <arm_absmax_q15+0x1a2>
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	1c9a      	adds	r2, r3, #2
 8012a74:	60fa      	str	r2, [r7, #12]
 8012a76:	881b      	ldrh	r3, [r3, #0]
 8012a78:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8012a7c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	dc0c      	bgt.n	8012a9e <arm_absmax_q15+0x84>
 8012a84:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012a88:	2200      	movs	r2, #0
 8012a8a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8012a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012a92:	fad3 f312 	qsub16	r3, r3, r2
 8012a96:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8012a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a9a:	b21b      	sxth	r3, r3
 8012a9c:	e001      	b.n	8012aa2 <arm_absmax_q15+0x88>
 8012a9e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012aa2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 8012aa6:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8012aaa:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	dd06      	ble.n	8012ac0 <arm_absmax_q15+0xa6>
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
 8012ab2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8012ab6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 1U;                                                                                \
 8012aba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012abc:	3301      	adds	r3, #1
 8012abe:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	1c9a      	adds	r2, r3, #2
 8012ac4:	60fa      	str	r2, [r7, #12]
 8012ac6:	881b      	ldrh	r3, [r3, #0]
 8012ac8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8012acc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	dc0c      	bgt.n	8012aee <arm_absmax_q15+0xd4>
 8012ad4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012ad8:	2200      	movs	r2, #0
 8012ada:	643a      	str	r2, [r7, #64]	@ 0x40
 8012adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ae0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012ae2:	fad3 f312 	qsub16	r3, r3, r2
 8012ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8012ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aea:	b21b      	sxth	r3, r3
 8012aec:	e001      	b.n	8012af2 <arm_absmax_q15+0xd8>
 8012aee:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012af2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 8012af6:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8012afa:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012afe:	429a      	cmp	r2, r3
 8012b00:	dd06      	ble.n	8012b10 <arm_absmax_q15+0xf6>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8012b02:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8012b06:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 2U;                                                                                \
 8012b0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012b0c:	3302      	adds	r3, #2
 8012b0e:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	1c9a      	adds	r2, r3, #2
 8012b14:	60fa      	str	r2, [r7, #12]
 8012b16:	881b      	ldrh	r3, [r3, #0]
 8012b18:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8012b1c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	dc0c      	bgt.n	8012b3e <arm_absmax_q15+0x124>
 8012b24:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012b28:	2200      	movs	r2, #0
 8012b2a:	637a      	str	r2, [r7, #52]	@ 0x34
 8012b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b32:	fad3 f312 	qsub16	r3, r3, r2
 8012b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8012b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b3a:	b21b      	sxth	r3, r3
 8012b3c:	e001      	b.n	8012b42 <arm_absmax_q15+0x128>
 8012b3e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012b42:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 8012b46:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8012b4a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	dd06      	ble.n	8012b60 <arm_absmax_q15+0x146>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8012b52:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8012b56:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 3U;                                                                                \
 8012b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012b5c:	3303      	adds	r3, #3
 8012b5e:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	1c9a      	adds	r2, r3, #2
 8012b64:	60fa      	str	r2, [r7, #12]
 8012b66:	881b      	ldrh	r3, [r3, #0]
 8012b68:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8012b6c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	dc0c      	bgt.n	8012b8e <arm_absmax_q15+0x174>
 8012b74:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012b78:	2200      	movs	r2, #0
 8012b7a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b82:	fad3 f312 	qsub16	r3, r3, r2
 8012b86:	623b      	str	r3, [r7, #32]
  return(result);
 8012b88:	6a3b      	ldr	r3, [r7, #32]
 8012b8a:	b21b      	sxth	r3, r3
 8012b8c:	e001      	b.n	8012b92 <arm_absmax_q15+0x178>
 8012b8e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012b92:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 8012b96:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8012b9a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	dd06      	ble.n	8012bb0 <arm_absmax_q15+0x196>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8012ba2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8012ba6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 4U;                                                                                \
 8012baa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012bac:	3304      	adds	r3, #4
 8012bae:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    index += 4U;                                                                                            \
 8012bb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012bb2:	3304      	adds	r3, #4
 8012bb4:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 8012bb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012bb8:	3b01      	subs	r3, #1
 8012bba:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 8012bbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	f47f af56 	bne.w	8012a70 <arm_absmax_q15+0x56>
  }                                                                                                         \
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	3b01      	subs	r3, #1
 8012bc8:	f003 0303 	and.w	r3, r3, #3
 8012bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8012bce:	e02b      	b.n	8012c28 <arm_absmax_q15+0x20e>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	1c9a      	adds	r2, r3, #2
 8012bd4:	60fa      	str	r2, [r7, #12]
 8012bd6:	881b      	ldrh	r3, [r3, #0]
 8012bd8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8012bdc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	dc0c      	bgt.n	8012bfe <arm_absmax_q15+0x1e4>
 8012be4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012be8:	2200      	movs	r2, #0
 8012bea:	61fa      	str	r2, [r7, #28]
 8012bec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012bee:	69fb      	ldr	r3, [r7, #28]
 8012bf0:	69ba      	ldr	r2, [r7, #24]
 8012bf2:	fad3 f312 	qsub16	r3, r3, r2
 8012bf6:	617b      	str	r3, [r7, #20]
  return(result);
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	b21b      	sxth	r3, r3
 8012bfc:	e001      	b.n	8012c02 <arm_absmax_q15+0x1e8>
 8012bfe:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012c02:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 8012c06:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8012c0a:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	dd07      	ble.n	8012c22 <arm_absmax_q15+0x208>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8012c12:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8012c16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = blockSize - blkCnt;                                                                        \
 8012c1a:	68ba      	ldr	r2, [r7, #8]
 8012c1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012c1e:	1ad3      	subs	r3, r2, r3
 8012c20:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 8012c22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012c24:	3b01      	subs	r3, #1
 8012c26:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 8012c28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d1d0      	bne.n	8012bd0 <arm_absmax_q15+0x1b6>
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8012c34:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;  
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012c3a:	601a      	str	r2, [r3, #0]
}
 8012c3c:	bf00      	nop
 8012c3e:	3774      	adds	r7, #116	@ 0x74
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr

08012c48 <arm_copy_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_copy_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b087      	sub	sp, #28
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	60f8      	str	r0, [r7, #12]
 8012c50:	60b9      	str	r1, [r7, #8]
 8012c52:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8012c58:	e00b      	b.n	8012c72 <arm_copy_q15+0x2a>
  {
    /* C = A */

    /* Copy and store result in destination buffer */
    *pDst++ = *pSrc++;
 8012c5a:	68fa      	ldr	r2, [r7, #12]
 8012c5c:	1c93      	adds	r3, r2, #2
 8012c5e:	60fb      	str	r3, [r7, #12]
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	1c99      	adds	r1, r3, #2
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	f9b2 2000 	ldrsh.w	r2, [r2]
 8012c6a:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	3b01      	subs	r3, #1
 8012c70:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d1f0      	bne.n	8012c5a <arm_copy_q15+0x12>
  }
}
 8012c78:	bf00      	nop
 8012c7a:	bf00      	nop
 8012c7c:	371c      	adds	r7, #28
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c84:	4770      	bx	lr

08012c86 <arm_bitreversal_16>:

ARM_DSP_ATTRIBUTE void arm_bitreversal_16(
        uint16_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8012c86:	b480      	push	{r7}
 8012c88:	b089      	sub	sp, #36	@ 0x24
 8012c8a:	af00      	add	r7, sp, #0
 8012c8c:	60f8      	str	r0, [r7, #12]
 8012c8e:	460b      	mov	r3, r1
 8012c90:	607a      	str	r2, [r7, #4]
 8012c92:	817b      	strh	r3, [r7, #10]
  uint16_t a, b, tmp;
  uint32_t i;

  for (i = 0; i < bitRevLen; )
 8012c94:	2300      	movs	r3, #0
 8012c96:	61fb      	str	r3, [r7, #28]
 8012c98:	e041      	b.n	8012d1e <arm_bitreversal_16+0x98>
  {
     a = pBitRevTab[i    ] >> 2;
 8012c9a:	69fb      	ldr	r3, [r7, #28]
 8012c9c:	005b      	lsls	r3, r3, #1
 8012c9e:	687a      	ldr	r2, [r7, #4]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	881b      	ldrh	r3, [r3, #0]
 8012ca4:	089b      	lsrs	r3, r3, #2
 8012ca6:	837b      	strh	r3, [r7, #26]
     b = pBitRevTab[i + 1] >> 2;
 8012ca8:	69fb      	ldr	r3, [r7, #28]
 8012caa:	3301      	adds	r3, #1
 8012cac:	005b      	lsls	r3, r3, #1
 8012cae:	687a      	ldr	r2, [r7, #4]
 8012cb0:	4413      	add	r3, r2
 8012cb2:	881b      	ldrh	r3, [r3, #0]
 8012cb4:	089b      	lsrs	r3, r3, #2
 8012cb6:	833b      	strh	r3, [r7, #24]

     //real
     tmp = pSrc[a];
 8012cb8:	8b7b      	ldrh	r3, [r7, #26]
 8012cba:	005b      	lsls	r3, r3, #1
 8012cbc:	68fa      	ldr	r2, [r7, #12]
 8012cbe:	4413      	add	r3, r2
 8012cc0:	881b      	ldrh	r3, [r3, #0]
 8012cc2:	82fb      	strh	r3, [r7, #22]
     pSrc[a] = pSrc[b];
 8012cc4:	8b3b      	ldrh	r3, [r7, #24]
 8012cc6:	005b      	lsls	r3, r3, #1
 8012cc8:	68fa      	ldr	r2, [r7, #12]
 8012cca:	441a      	add	r2, r3
 8012ccc:	8b7b      	ldrh	r3, [r7, #26]
 8012cce:	005b      	lsls	r3, r3, #1
 8012cd0:	68f9      	ldr	r1, [r7, #12]
 8012cd2:	440b      	add	r3, r1
 8012cd4:	8812      	ldrh	r2, [r2, #0]
 8012cd6:	801a      	strh	r2, [r3, #0]
     pSrc[b] = tmp;
 8012cd8:	8b3b      	ldrh	r3, [r7, #24]
 8012cda:	005b      	lsls	r3, r3, #1
 8012cdc:	68fa      	ldr	r2, [r7, #12]
 8012cde:	4413      	add	r3, r2
 8012ce0:	8afa      	ldrh	r2, [r7, #22]
 8012ce2:	801a      	strh	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8012ce4:	8b7b      	ldrh	r3, [r7, #26]
 8012ce6:	3301      	adds	r3, #1
 8012ce8:	005b      	lsls	r3, r3, #1
 8012cea:	68fa      	ldr	r2, [r7, #12]
 8012cec:	4413      	add	r3, r2
 8012cee:	881b      	ldrh	r3, [r3, #0]
 8012cf0:	82fb      	strh	r3, [r7, #22]
     pSrc[a+1] = pSrc[b+1];
 8012cf2:	8b3b      	ldrh	r3, [r7, #24]
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	005b      	lsls	r3, r3, #1
 8012cf8:	68fa      	ldr	r2, [r7, #12]
 8012cfa:	441a      	add	r2, r3
 8012cfc:	8b7b      	ldrh	r3, [r7, #26]
 8012cfe:	3301      	adds	r3, #1
 8012d00:	005b      	lsls	r3, r3, #1
 8012d02:	68f9      	ldr	r1, [r7, #12]
 8012d04:	440b      	add	r3, r1
 8012d06:	8812      	ldrh	r2, [r2, #0]
 8012d08:	801a      	strh	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8012d0a:	8b3b      	ldrh	r3, [r7, #24]
 8012d0c:	3301      	adds	r3, #1
 8012d0e:	005b      	lsls	r3, r3, #1
 8012d10:	68fa      	ldr	r2, [r7, #12]
 8012d12:	4413      	add	r3, r2
 8012d14:	8afa      	ldrh	r2, [r7, #22]
 8012d16:	801a      	strh	r2, [r3, #0]

    i += 2;
 8012d18:	69fb      	ldr	r3, [r7, #28]
 8012d1a:	3302      	adds	r3, #2
 8012d1c:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8012d1e:	897b      	ldrh	r3, [r7, #10]
 8012d20:	69fa      	ldr	r2, [r7, #28]
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d3b9      	bcc.n	8012c9a <arm_bitreversal_16+0x14>
  }
}
 8012d26:	bf00      	nop
 8012d28:	bf00      	nop
 8012d2a:	3724      	adds	r7, #36	@ 0x24
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d32:	4770      	bx	lr

08012d34 <arm_cfft_q15>:
ARM_DSP_ATTRIBUTE void arm_cfft_q15(
  const arm_cfft_instance_q15 * S,
        q15_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b086      	sub	sp, #24
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	60f8      	str	r0, [r7, #12]
 8012d3c:	60b9      	str	r1, [r7, #8]
 8012d3e:	4611      	mov	r1, r2
 8012d40:	461a      	mov	r2, r3
 8012d42:	460b      	mov	r3, r1
 8012d44:	71fb      	strb	r3, [r7, #7]
 8012d46:	4613      	mov	r3, r2
 8012d48:	71bb      	strb	r3, [r7, #6]
  uint32_t L = S->fftLen;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	881b      	ldrh	r3, [r3, #0]
 8012d4e:	617b      	str	r3, [r7, #20]

  if (ifftFlag == 1U)
 8012d50:	79fb      	ldrb	r3, [r7, #7]
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	d14c      	bne.n	8012df0 <arm_cfft_q15+0xbc>
  {
     switch (L)
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012d5c:	d038      	beq.n	8012dd0 <arm_cfft_q15+0x9c>
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012d64:	f200 808f 	bhi.w	8012e86 <arm_cfft_q15+0x152>
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012d6e:	d037      	beq.n	8012de0 <arm_cfft_q15+0xac>
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012d76:	f200 8086 	bhi.w	8012e86 <arm_cfft_q15+0x152>
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012d80:	d026      	beq.n	8012dd0 <arm_cfft_q15+0x9c>
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012d88:	d87d      	bhi.n	8012e86 <arm_cfft_q15+0x152>
 8012d8a:	697b      	ldr	r3, [r7, #20]
 8012d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d90:	d026      	beq.n	8012de0 <arm_cfft_q15+0xac>
 8012d92:	697b      	ldr	r3, [r7, #20]
 8012d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d98:	d875      	bhi.n	8012e86 <arm_cfft_q15+0x152>
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012da0:	d016      	beq.n	8012dd0 <arm_cfft_q15+0x9c>
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012da8:	d86d      	bhi.n	8012e86 <arm_cfft_q15+0x152>
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	2b80      	cmp	r3, #128	@ 0x80
 8012dae:	d017      	beq.n	8012de0 <arm_cfft_q15+0xac>
 8012db0:	697b      	ldr	r3, [r7, #20]
 8012db2:	2b80      	cmp	r3, #128	@ 0x80
 8012db4:	d867      	bhi.n	8012e86 <arm_cfft_q15+0x152>
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	2b40      	cmp	r3, #64	@ 0x40
 8012dba:	d009      	beq.n	8012dd0 <arm_cfft_q15+0x9c>
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	2b40      	cmp	r3, #64	@ 0x40
 8012dc0:	d861      	bhi.n	8012e86 <arm_cfft_q15+0x152>
 8012dc2:	697b      	ldr	r3, [r7, #20]
 8012dc4:	2b10      	cmp	r3, #16
 8012dc6:	d003      	beq.n	8012dd0 <arm_cfft_q15+0x9c>
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	2b20      	cmp	r3, #32
 8012dcc:	d008      	beq.n	8012de0 <arm_cfft_q15+0xac>
 8012dce:	e05a      	b.n	8012e86 <arm_cfft_q15+0x152>
     case 16:
     case 64:
     case 256:
     case 1024:
     case 4096:
       arm_radix4_butterfly_inverse_q15 ( p1, L, (q15_t*)S->pTwiddle, 1 );
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	685a      	ldr	r2, [r3, #4]
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	6979      	ldr	r1, [r7, #20]
 8012dd8:	68b8      	ldr	r0, [r7, #8]
 8012dda:	f001 ffdf 	bl	8014d9c <arm_radix4_butterfly_inverse_q15>
       break;
 8012dde:	e052      	b.n	8012e86 <arm_cfft_q15+0x152>

     case 32:
     case 128:
     case 512:
     case 2048:
       arm_cfft_radix4by2_inverse_q15 ( p1, L, S->pTwiddle );
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	461a      	mov	r2, r3
 8012de6:	6979      	ldr	r1, [r7, #20]
 8012de8:	68b8      	ldr	r0, [r7, #8]
 8012dea:	f000 f9a7 	bl	801313c <arm_cfft_radix4by2_inverse_q15>
       break;
 8012dee:	e04a      	b.n	8012e86 <arm_cfft_q15+0x152>
     }
  }
  else
  {
     switch (L)
 8012df0:	697b      	ldr	r3, [r7, #20]
 8012df2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012df6:	d036      	beq.n	8012e66 <arm_cfft_q15+0x132>
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012dfe:	d842      	bhi.n	8012e86 <arm_cfft_q15+0x152>
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012e06:	d036      	beq.n	8012e76 <arm_cfft_q15+0x142>
 8012e08:	697b      	ldr	r3, [r7, #20]
 8012e0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012e0e:	d83a      	bhi.n	8012e86 <arm_cfft_q15+0x152>
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012e16:	d026      	beq.n	8012e66 <arm_cfft_q15+0x132>
 8012e18:	697b      	ldr	r3, [r7, #20]
 8012e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012e1e:	d832      	bhi.n	8012e86 <arm_cfft_q15+0x152>
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e26:	d026      	beq.n	8012e76 <arm_cfft_q15+0x142>
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e2e:	d82a      	bhi.n	8012e86 <arm_cfft_q15+0x152>
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012e36:	d016      	beq.n	8012e66 <arm_cfft_q15+0x132>
 8012e38:	697b      	ldr	r3, [r7, #20]
 8012e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012e3e:	d822      	bhi.n	8012e86 <arm_cfft_q15+0x152>
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	2b80      	cmp	r3, #128	@ 0x80
 8012e44:	d017      	beq.n	8012e76 <arm_cfft_q15+0x142>
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	2b80      	cmp	r3, #128	@ 0x80
 8012e4a:	d81c      	bhi.n	8012e86 <arm_cfft_q15+0x152>
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	2b40      	cmp	r3, #64	@ 0x40
 8012e50:	d009      	beq.n	8012e66 <arm_cfft_q15+0x132>
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	2b40      	cmp	r3, #64	@ 0x40
 8012e56:	d816      	bhi.n	8012e86 <arm_cfft_q15+0x152>
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	2b10      	cmp	r3, #16
 8012e5c:	d003      	beq.n	8012e66 <arm_cfft_q15+0x132>
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	2b20      	cmp	r3, #32
 8012e62:	d008      	beq.n	8012e76 <arm_cfft_q15+0x142>
 8012e64:	e00f      	b.n	8012e86 <arm_cfft_q15+0x152>
     case 16:
     case 64:
     case 256:
     case 1024:
     case 4096:
       arm_radix4_butterfly_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	685a      	ldr	r2, [r3, #4]
 8012e6a:	2301      	movs	r3, #1
 8012e6c:	6979      	ldr	r1, [r7, #20]
 8012e6e:	68b8      	ldr	r0, [r7, #8]
 8012e70:	f000 fab0 	bl	80133d4 <arm_radix4_butterfly_q15>
       break;
 8012e74:	e007      	b.n	8012e86 <arm_cfft_q15+0x152>

     case 32:
     case 128:
     case 512:
     case 2048:
       arm_cfft_radix4by2_q15  ( p1, L, S->pTwiddle );
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	685b      	ldr	r3, [r3, #4]
 8012e7a:	461a      	mov	r2, r3
 8012e7c:	6979      	ldr	r1, [r7, #20]
 8012e7e:	68b8      	ldr	r0, [r7, #8]
 8012e80:	f000 f810 	bl	8012ea4 <arm_cfft_radix4by2_q15>
       break;
 8012e84:	bf00      	nop
     }
  }

  if ( bitReverseFlag )
 8012e86:	79bb      	ldrb	r3, [r7, #6]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d007      	beq.n	8012e9c <arm_cfft_q15+0x168>
    arm_bitreversal_16 ((uint16_t*) p1, S->bitRevLength, S->pBitRevTable);
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	8999      	ldrh	r1, [r3, #12]
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	689b      	ldr	r3, [r3, #8]
 8012e94:	461a      	mov	r2, r3
 8012e96:	68b8      	ldr	r0, [r7, #8]
 8012e98:	f7ff fef5 	bl	8012c86 <arm_bitreversal_16>
}
 8012e9c:	bf00      	nop
 8012e9e:	3718      	adds	r7, #24
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <arm_cfft_radix4by2_q15>:

ARM_DSP_ATTRIBUTE void arm_cfft_radix4by2_q15(
        q15_t * pSrc,
        uint32_t fftLen,
  const q15_t * pCoef)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b0b0      	sub	sp, #192	@ 0xc0
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	60f8      	str	r0, [r7, #12]
 8012eac:	60b9      	str	r1, [r7, #8]
 8012eae:	607a      	str	r2, [r7, #4]
        uint32_t n2;
        q15_t p0, p1, p2, p3;
#if defined (ARM_MATH_DSP)
        q31_t T, S, R;
        q31_t coeff, out1, out2;
  const q15_t *pC = pCoef;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	633b      	str	r3, [r7, #48]	@ 0x30
        q15_t *pSi = pSrc;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        q15_t *pSl = pSrc + fftLen;
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	005b      	lsls	r3, r3, #1
 8012ebc:	68fa      	ldr	r2, [r7, #12]
 8012ebe:	4413      	add	r3, r2
 8012ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        uint32_t l;
        q15_t xt, yt, cosVal, sinVal;
#endif

  n2 = fftLen >> 1U;
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	085b      	lsrs	r3, r3, #1
 8012ec6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

#if defined (ARM_MATH_DSP)

  for (i = n2; i > 0; i--)
 8012eca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012ece:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012ed2:	e0a9      	b.n	8013028 <arm_cfft_radix4by2_q15+0x184>
  {
      coeff = read_q15x2_ia (&pC);
 8012ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ed6:	3304      	adds	r3, #4
 8012ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 8012eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012edc:	3b04      	subs	r3, #4
 8012ede:	637b      	str	r3, [r7, #52]	@ 0x34
  memcpy (&val, pQ15, 4);
 8012ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8012ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      T = read_q15x2 (pSi);
 8012eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012eee:	63bb      	str	r3, [r7, #56]	@ 0x38
  memcpy (&val, pQ15, 4);
 8012ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	623b      	str	r3, [r7, #32]
  return (val);
 8012ef6:	6a3b      	ldr	r3, [r7, #32]
 8012ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012efc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8012f02:	2300      	movs	r3, #0
 8012f04:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012f0a:	fa93 f322 	shadd16	r3, r3, r2
 8012f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8012f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      S = read_q15x2 (pSl);
 8012f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f18:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 8012f1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	61fb      	str	r3, [r7, #28]
  return (val);
 8012f20:	69fb      	ldr	r3, [r7, #28]
 8012f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      S = __SHADD16(S, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012f26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012f2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012f34:	fa93 f322 	shadd16	r3, r3, r2
 8012f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8012f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      R = __QSUB16(T, S);
 8012f40:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012f44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012f48:	663a      	str	r2, [r7, #96]	@ 0x60
 8012f4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012f4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012f4e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012f50:	fad3 f312 	qsub16	r3, r3, r2
 8012f54:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8012f56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012f58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

      write_q15x2_ia (&pSi, __SHADD16(T, S));
 8012f5c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012f60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012f64:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012f66:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012f6a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012f6c:	fa93 f322 	shadd16	r3, r3, r2
 8012f70:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8012f72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012f74:	461a      	mov	r2, r3
 8012f76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012f7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8012f7c:	673a      	str	r2, [r7, #112]	@ 0x70
 */
__STATIC_FORCEINLINE void write_q15x2_ia (
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
 8012f7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012f80:	61bb      	str	r3, [r7, #24]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8012f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	69ba      	ldr	r2, [r7, #24]
 8012f88:	601a      	str	r2, [r3, #0]
#else
  (*pQ15)[0] = (q15_t)(val & 0x0FFFF);
  (*pQ15)[1] = (q15_t)((val >> 16) & 0x0FFFF);
#endif

 *pQ15 += 2;
 8012f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	1d1a      	adds	r2, r3, #4
 8012f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012f92:	601a      	str	r2, [r3, #0]
}
 8012f94:	bf00      	nop

#ifndef ARM_MATH_BIG_ENDIAN
      out1 = __SMUAD(coeff, R) >> 16U;
 8012f96:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012f9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012fa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012fa8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012faa:	fb23 f302 	smuad	r3, r3, r2
 8012fae:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 8012fb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012fb2:	0c1b      	lsrs	r3, r3, #16
 8012fb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      out2 = __SMUSDX(coeff, R);
 8012fb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012fbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012fc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012fcc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012fd0:	fb43 f312 	smusdx	r3, r3, r2
 8012fd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8012fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012fdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
#else
      out1 = __SMUSDX(R, coeff) >> 16U;
      out2 = __SMUAD(coeff, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      write_q15x2_ia (&pSl, (q31_t)__PKHBT( out1, out2, 0 ) );
 8012fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012fe4:	b29a      	uxth	r2, r3
 8012fe6:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8012fea:	4b53      	ldr	r3, [pc, #332]	@ (8013138 <arm_cfft_radix4by2_q15+0x294>)
 8012fec:	400b      	ands	r3, r1
 8012fee:	4313      	orrs	r3, r2
 8012ff0:	461a      	mov	r2, r3
 8012ff2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012ff6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012ffa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
  q31_t val = value;
 8012ffe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013002:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8013004:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	697a      	ldr	r2, [r7, #20]
 801300c:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801300e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	1d1a      	adds	r2, r3, #4
 8013016:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801301a:	601a      	str	r2, [r3, #0]
}
 801301c:	bf00      	nop
  for (i = n2; i > 0; i--)
 801301e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013022:	3b01      	subs	r3, #1
 8013024:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8013028:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801302c:	2b00      	cmp	r3, #0
 801302e:	f47f af51 	bne.w	8012ed4 <arm_cfft_radix4by2_q15+0x30>
  }

#endif /* #if defined (ARM_MATH_DSP) */

  /* first col */
  arm_radix4_butterfly_q15( pSrc,          n2, (q15_t*)pCoef, 2U);
 8013032:	2302      	movs	r3, #2
 8013034:	687a      	ldr	r2, [r7, #4]
 8013036:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 801303a:	68f8      	ldr	r0, [r7, #12]
 801303c:	f000 f9ca 	bl	80133d4 <arm_radix4_butterfly_q15>

  /* second col */
  arm_radix4_butterfly_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 8013040:	68bb      	ldr	r3, [r7, #8]
 8013042:	005b      	lsls	r3, r3, #1
 8013044:	68fa      	ldr	r2, [r7, #12]
 8013046:	18d0      	adds	r0, r2, r3
 8013048:	2302      	movs	r3, #2
 801304a:	687a      	ldr	r2, [r7, #4]
 801304c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8013050:	f000 f9c0 	bl	80133d4 <arm_radix4_butterfly_q15>

  n2 = fftLen >> 1U;
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	085b      	lsrs	r3, r3, #1
 8013058:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  for (i = 0; i < n2; i++)
 801305c:	2300      	movs	r3, #0
 801305e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8013062:	e05e      	b.n	8013122 <arm_cfft_radix4by2_q15+0x27e>
  {
     p0 = pSrc[4 * i + 0];
 8013064:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013068:	00db      	lsls	r3, r3, #3
 801306a:	68fa      	ldr	r2, [r7, #12]
 801306c:	4413      	add	r3, r2
 801306e:	881b      	ldrh	r3, [r3, #0]
 8013070:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 = pSrc[4 * i + 1];
 8013074:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013078:	00db      	lsls	r3, r3, #3
 801307a:	3302      	adds	r3, #2
 801307c:	68fa      	ldr	r2, [r7, #12]
 801307e:	4413      	add	r3, r2
 8013080:	881b      	ldrh	r3, [r3, #0]
 8013082:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 = pSrc[4 * i + 2];
 8013086:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801308a:	00db      	lsls	r3, r3, #3
 801308c:	3304      	adds	r3, #4
 801308e:	68fa      	ldr	r2, [r7, #12]
 8013090:	4413      	add	r3, r2
 8013092:	881b      	ldrh	r3, [r3, #0]
 8013094:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 = pSrc[4 * i + 3];
 8013098:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801309c:	00db      	lsls	r3, r3, #3
 801309e:	3306      	adds	r3, #6
 80130a0:	68fa      	ldr	r2, [r7, #12]
 80130a2:	4413      	add	r3, r2
 80130a4:	881b      	ldrh	r3, [r3, #0]
 80130a6:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     p0 <<= 1U;
 80130aa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 80130ae:	005b      	lsls	r3, r3, #1
 80130b0:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 <<= 1U;
 80130b4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 80130b8:	005b      	lsls	r3, r3, #1
 80130ba:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 <<= 1U;
 80130be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80130c2:	005b      	lsls	r3, r3, #1
 80130c4:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 <<= 1U;
 80130c8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80130cc:	005b      	lsls	r3, r3, #1
 80130ce:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     pSrc[4 * i + 0] = p0;
 80130d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80130d6:	00db      	lsls	r3, r3, #3
 80130d8:	68fa      	ldr	r2, [r7, #12]
 80130da:	4413      	add	r3, r2
 80130dc:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 80130e0:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 1] = p1;
 80130e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80130e6:	00db      	lsls	r3, r3, #3
 80130e8:	3302      	adds	r3, #2
 80130ea:	68fa      	ldr	r2, [r7, #12]
 80130ec:	4413      	add	r3, r2
 80130ee:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 80130f2:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 2] = p2;
 80130f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80130f8:	00db      	lsls	r3, r3, #3
 80130fa:	3304      	adds	r3, #4
 80130fc:	68fa      	ldr	r2, [r7, #12]
 80130fe:	4413      	add	r3, r2
 8013100:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 8013104:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 3] = p3;
 8013106:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801310a:	00db      	lsls	r3, r3, #3
 801310c:	3306      	adds	r3, #6
 801310e:	68fa      	ldr	r2, [r7, #12]
 8013110:	4413      	add	r3, r2
 8013112:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8013116:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < n2; i++)
 8013118:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801311c:	3301      	adds	r3, #1
 801311e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8013122:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8013126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801312a:	429a      	cmp	r2, r3
 801312c:	d39a      	bcc.n	8013064 <arm_cfft_radix4by2_q15+0x1c0>
  }

}
 801312e:	bf00      	nop
 8013130:	bf00      	nop
 8013132:	37c0      	adds	r7, #192	@ 0xc0
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}
 8013138:	ffff0000 	.word	0xffff0000

0801313c <arm_cfft_radix4by2_inverse_q15>:

ARM_DSP_ATTRIBUTE void arm_cfft_radix4by2_inverse_q15(
        q15_t * pSrc,
        uint32_t fftLen,
  const q15_t * pCoef)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b0b0      	sub	sp, #192	@ 0xc0
 8013140:	af00      	add	r7, sp, #0
 8013142:	60f8      	str	r0, [r7, #12]
 8013144:	60b9      	str	r1, [r7, #8]
 8013146:	607a      	str	r2, [r7, #4]
        uint32_t n2;
        q15_t p0, p1, p2, p3;
#if defined (ARM_MATH_DSP)
        q31_t T, S, R;
        q31_t coeff, out1, out2;
  const q15_t *pC = pCoef;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	633b      	str	r3, [r7, #48]	@ 0x30
        q15_t *pSi = pSrc;
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        q15_t *pSl = pSrc + fftLen;
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	005b      	lsls	r3, r3, #1
 8013154:	68fa      	ldr	r2, [r7, #12]
 8013156:	4413      	add	r3, r2
 8013158:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        uint32_t l;
        q15_t xt, yt, cosVal, sinVal;
#endif

  n2 = fftLen >> 1U;
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	085b      	lsrs	r3, r3, #1
 801315e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

#if defined (ARM_MATH_DSP)

  for (i = n2; i > 0; i--)
 8013162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8013166:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801316a:	e0a9      	b.n	80132c0 <arm_cfft_radix4by2_inverse_q15+0x184>
  {
     coeff = read_q15x2_ia (&pC);
 801316c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801316e:	3304      	adds	r3, #4
 8013170:	633b      	str	r3, [r7, #48]	@ 0x30
 8013172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013174:	3b04      	subs	r3, #4
 8013176:	637b      	str	r3, [r7, #52]	@ 0x34
  memcpy (&val, pQ15, 4);
 8013178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 801317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

     T = read_q15x2 (pSi);
 8013184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013186:	63bb      	str	r3, [r7, #56]	@ 0x38
  memcpy (&val, pQ15, 4);
 8013188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	623b      	str	r3, [r7, #32]
  return (val);
 801318e:	6a3b      	ldr	r3, [r7, #32]
 8013190:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
     T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8013194:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8013198:	647b      	str	r3, [r7, #68]	@ 0x44
 801319a:	2300      	movs	r3, #0
 801319c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801319e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80131a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80131a2:	fa93 f322 	shadd16	r3, r3, r2
 80131a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80131a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

     S = read_q15x2 (pSl);
 80131ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 80131b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	61fb      	str	r3, [r7, #28]
  return (val);
 80131b8:	69fb      	ldr	r3, [r7, #28]
 80131ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
     S = __SHADD16(S, 0); /* this is just a SIMD arithmetic shift right by 1 */
 80131be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80131c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80131c4:	2300      	movs	r3, #0
 80131c6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80131c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80131cc:	fa93 f322 	shadd16	r3, r3, r2
 80131d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 80131d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

     R = __QSUB16(T, S);
 80131d8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80131dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80131e0:	663a      	str	r2, [r7, #96]	@ 0x60
 80131e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80131e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80131e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80131e8:	fad3 f312 	qsub16	r3, r3, r2
 80131ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 80131ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80131f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

     write_q15x2_ia (&pSi, __SHADD16(T, S));
 80131f4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80131f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80131fc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80131fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013202:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013204:	fa93 f322 	shadd16	r3, r3, r2
 8013208:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 801320a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801320c:	461a      	mov	r2, r3
 801320e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013212:	677b      	str	r3, [r7, #116]	@ 0x74
 8013214:	673a      	str	r2, [r7, #112]	@ 0x70
  q31_t val = value;
 8013216:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013218:	61bb      	str	r3, [r7, #24]
  memcpy (*pQ15, &val, 4);
 801321a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	69ba      	ldr	r2, [r7, #24]
 8013220:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013222:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	1d1a      	adds	r2, r3, #4
 8013228:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801322a:	601a      	str	r2, [r3, #0]
}
 801322c:	bf00      	nop

#ifndef ARM_MATH_BIG_ENDIAN
     out1 = __SMUSD(coeff, R) >> 16U;
 801322e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8013232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013236:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801323a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801323c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013240:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013242:	fb43 f302 	smusd	r3, r3, r2
 8013246:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 8013248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801324a:	0c1b      	lsrs	r3, r3, #16
 801324c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
     out2 = __SMUADX(coeff, R);
 8013250:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8013254:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013258:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801325c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013260:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013264:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013268:	fb23 f312 	smuadx	r3, r3, r2
 801326c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8013270:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
#else
     out1 = __SMUADX(R, coeff) >> 16U;
     out2 = __SMUSD(__QSUB(0, coeff), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

     write_q15x2_ia (&pSl, (q31_t)__PKHBT( out1, out2, 0 ));
 8013278:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801327c:	b29a      	uxth	r2, r3
 801327e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8013282:	4b53      	ldr	r3, [pc, #332]	@ (80133d0 <arm_cfft_radix4by2_inverse_q15+0x294>)
 8013284:	400b      	ands	r3, r1
 8013286:	4313      	orrs	r3, r2
 8013288:	461a      	mov	r2, r3
 801328a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801328e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013292:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
  q31_t val = value;
 8013296:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801329a:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 801329c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	697a      	ldr	r2, [r7, #20]
 80132a4:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80132a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	1d1a      	adds	r2, r3, #4
 80132ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80132b2:	601a      	str	r2, [r3, #0]
}
 80132b4:	bf00      	nop
  for (i = n2; i > 0; i--)
 80132b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80132ba:	3b01      	subs	r3, #1
 80132bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80132c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	f47f af51 	bne.w	801316c <arm_cfft_radix4by2_inverse_q15+0x30>
  }

#endif /* #if defined (ARM_MATH_DSP) */

  /* first col */
  arm_radix4_butterfly_inverse_q15( pSrc,          n2, (q15_t*)pCoef, 2U);
 80132ca:	2302      	movs	r3, #2
 80132cc:	687a      	ldr	r2, [r7, #4]
 80132ce:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80132d2:	68f8      	ldr	r0, [r7, #12]
 80132d4:	f001 fd62 	bl	8014d9c <arm_radix4_butterfly_inverse_q15>

  /* second col */
  arm_radix4_butterfly_inverse_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 80132d8:	68bb      	ldr	r3, [r7, #8]
 80132da:	005b      	lsls	r3, r3, #1
 80132dc:	68fa      	ldr	r2, [r7, #12]
 80132de:	18d0      	adds	r0, r2, r3
 80132e0:	2302      	movs	r3, #2
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80132e8:	f001 fd58 	bl	8014d9c <arm_radix4_butterfly_inverse_q15>

  n2 = fftLen >> 1U;
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	085b      	lsrs	r3, r3, #1
 80132f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  for (i = 0; i < n2; i++)
 80132f4:	2300      	movs	r3, #0
 80132f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80132fa:	e05e      	b.n	80133ba <arm_cfft_radix4by2_inverse_q15+0x27e>
  {
     p0 = pSrc[4 * i + 0];
 80132fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013300:	00db      	lsls	r3, r3, #3
 8013302:	68fa      	ldr	r2, [r7, #12]
 8013304:	4413      	add	r3, r2
 8013306:	881b      	ldrh	r3, [r3, #0]
 8013308:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 = pSrc[4 * i + 1];
 801330c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013310:	00db      	lsls	r3, r3, #3
 8013312:	3302      	adds	r3, #2
 8013314:	68fa      	ldr	r2, [r7, #12]
 8013316:	4413      	add	r3, r2
 8013318:	881b      	ldrh	r3, [r3, #0]
 801331a:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 = pSrc[4 * i + 2];
 801331e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013322:	00db      	lsls	r3, r3, #3
 8013324:	3304      	adds	r3, #4
 8013326:	68fa      	ldr	r2, [r7, #12]
 8013328:	4413      	add	r3, r2
 801332a:	881b      	ldrh	r3, [r3, #0]
 801332c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 = pSrc[4 * i + 3];
 8013330:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013334:	00db      	lsls	r3, r3, #3
 8013336:	3306      	adds	r3, #6
 8013338:	68fa      	ldr	r2, [r7, #12]
 801333a:	4413      	add	r3, r2
 801333c:	881b      	ldrh	r3, [r3, #0]
 801333e:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     p0 <<= 1U;
 8013342:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8013346:	005b      	lsls	r3, r3, #1
 8013348:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 <<= 1U;
 801334c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8013350:	005b      	lsls	r3, r3, #1
 8013352:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 <<= 1U;
 8013356:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801335a:	005b      	lsls	r3, r3, #1
 801335c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 <<= 1U;
 8013360:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8013364:	005b      	lsls	r3, r3, #1
 8013366:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     pSrc[4 * i + 0] = p0;
 801336a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801336e:	00db      	lsls	r3, r3, #3
 8013370:	68fa      	ldr	r2, [r7, #12]
 8013372:	4413      	add	r3, r2
 8013374:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 8013378:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 1] = p1;
 801337a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801337e:	00db      	lsls	r3, r3, #3
 8013380:	3302      	adds	r3, #2
 8013382:	68fa      	ldr	r2, [r7, #12]
 8013384:	4413      	add	r3, r2
 8013386:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 801338a:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 2] = p2;
 801338c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013390:	00db      	lsls	r3, r3, #3
 8013392:	3304      	adds	r3, #4
 8013394:	68fa      	ldr	r2, [r7, #12]
 8013396:	4413      	add	r3, r2
 8013398:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 801339c:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 3] = p3;
 801339e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80133a2:	00db      	lsls	r3, r3, #3
 80133a4:	3306      	adds	r3, #6
 80133a6:	68fa      	ldr	r2, [r7, #12]
 80133a8:	4413      	add	r3, r2
 80133aa:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 80133ae:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < n2; i++)
 80133b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80133b4:	3301      	adds	r3, #1
 80133b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80133ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80133be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d39a      	bcc.n	80132fc <arm_cfft_radix4by2_inverse_q15+0x1c0>
  }
}
 80133c6:	bf00      	nop
 80133c8:	bf00      	nop
 80133ca:	37c0      	adds	r7, #192	@ 0xc0
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	ffff0000 	.word	0xffff0000

080133d4 <arm_radix4_butterfly_q15>:
ARM_DSP_ATTRIBUTE void arm_radix4_butterfly_q15(
        q15_t * pSrc16,
        uint32_t fftLen,
  const q15_t * pCoef16,
        uint32_t twidCoefModifier)
{
 80133d4:	b490      	push	{r4, r7}
 80133d6:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 80133da:	af00      	add	r7, sp, #0
 80133dc:	f507 6481 	add.w	r4, r7, #1032	@ 0x408
 80133e0:	f5a4 747f 	sub.w	r4, r4, #1020	@ 0x3fc
 80133e4:	6020      	str	r0, [r4, #0]
 80133e6:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 80133ea:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
 80133ee:	6001      	str	r1, [r0, #0]
 80133f0:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 80133f4:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 80133f8:	600a      	str	r2, [r1, #0]
 80133fa:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80133fe:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8013402:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 8013404:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013408:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
  n1 = n2;
 8013412:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013416:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 801341a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 801341e:	089b      	lsrs	r3, r3, #2
 8013420:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404

  /* Index for twiddle coefficient */
  ic = 0U;
 8013424:	2300      	movs	r3, #0
 8013426:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  /* Index for input read and output write */
  j = n2;
 801342a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 801342e:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  pSi0 = pSrc16;
 8013432:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013436:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 801343a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801343e:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8013442:	6812      	ldr	r2, [r2, #0]
 8013444:	601a      	str	r2, [r3, #0]
  pSi1 = pSi0 + 2 * n2;
 8013446:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801344a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 801344e:	681a      	ldr	r2, [r3, #0]
 8013450:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013454:	009b      	lsls	r3, r3, #2
 8013456:	441a      	add	r2, r3
 8013458:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801345c:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013460:	601a      	str	r2, [r3, #0]
  pSi2 = pSi1 + 2 * n2;
 8013462:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013466:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801346a:	681a      	ldr	r2, [r3, #0]
 801346c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013470:	009b      	lsls	r3, r3, #2
 8013472:	441a      	add	r2, r3
 8013474:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013478:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801347c:	601a      	str	r2, [r3, #0]
  pSi3 = pSi2 + 2 * n2;
 801347e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013482:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013486:	681a      	ldr	r2, [r3, #0]
 8013488:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 801348c:	009b      	lsls	r3, r3, #2
 801348e:	441a      	add	r2, r3
 8013490:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013494:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013498:	601a      	str	r2, [r3, #0]
  {
    /*  Butterfly implementation */

    /* Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = read_q15x2 (pSi0);
 801349a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801349e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80134a2:	681a      	ldr	r2, [r3, #0]
 80134a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134a8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80134ac:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80134ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134b2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	461a      	mov	r2, r3
 80134bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134c0:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80134c4:	601a      	str	r2, [r3, #0]
  return (val);
 80134c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134ca:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 80134d4:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80134d8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80134e0:	601a      	str	r2, [r3, #0]
 80134e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134e6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80134ea:	2200      	movs	r2, #0
 80134ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80134ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134f2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80134fc:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 8013500:	6812      	ldr	r2, [r2, #0]
 8013502:	fa93 f222 	shadd16	r2, r3, r2
 8013506:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801350a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801350e:	601a      	str	r2, [r3, #0]
  return(result);
 8013510:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013514:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0); /* it turns out doing this twice is 2 cycles, the alternative takes 3 cycles */
 801351e:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013522:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013526:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801352a:	601a      	str	r2, [r3, #0]
 801352c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013530:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8013534:	2200      	movs	r2, #0
 8013536:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013538:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801353c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013546:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 801354a:	6812      	ldr	r2, [r2, #0]
 801354c:	fa93 f222 	shadd16	r2, r3, r2
 8013550:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013554:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8013558:	601a      	str	r2, [r3, #0]
  return(result);
 801355a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801355e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    in = ((int16_t) (T & 0xFFFF)) >> 2;       // alternative code that takes 3 cycles
     T = ((T >> 2) & 0xFFFF0000) | (in & 0xFFFF);
*/

    /* Read yc (real), xc(imag) input */
    S = read_q15x2 (pSi2);
 8013568:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801356c:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013570:	681a      	ldr	r2, [r3, #0]
 8013572:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013576:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 801357a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801357c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013580:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	461a      	mov	r2, r3
 801358a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801358e:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8013592:	601a      	str	r2, [r3, #0]
  return (val);
 8013594:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013598:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 80135a2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80135a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135aa:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80135ae:	601a      	str	r2, [r3, #0]
 80135b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135b4:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80135b8:	2200      	movs	r2, #0
 80135ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80135bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135c0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80135ca:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80135ce:	6812      	ldr	r2, [r2, #0]
 80135d0:	fa93 f222 	shadd16	r2, r3, r2
 80135d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135d8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80135dc:	601a      	str	r2, [r3, #0]
  return(result);
 80135de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135e2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 80135ec:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80135f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135f4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80135f8:	601a      	str	r2, [r3, #0]
 80135fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135fe:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8013602:	2200      	movs	r2, #0
 8013604:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013606:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801360a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013614:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8013618:	6812      	ldr	r2, [r2, #0]
 801361a:	fa93 f222 	shadd16	r2, r3, r2
 801361e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013622:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8013626:	601a      	str	r2, [r3, #0]
  return(result);
 8013628:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801362c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 8013636:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 801363a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801363e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013642:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8013646:	6019      	str	r1, [r3, #0]
 8013648:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801364c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8013650:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013652:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013656:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013660:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8013664:	6812      	ldr	r2, [r2, #0]
 8013666:	fa93 f212 	qadd16	r2, r3, r2
 801366a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801366e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8013672:	601a      	str	r2, [r3, #0]
  return(result);
 8013674:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013678:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 8013682:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8013686:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801368a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801368e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8013692:	6019      	str	r1, [r3, #0]
 8013694:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013698:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 801369c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801369e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136a2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80136ac:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80136b0:	6812      	ldr	r2, [r2, #0]
 80136b2:	fad3 f212 	qsub16	r2, r3, r2
 80136b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136ba:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80136be:	601a      	str	r2, [r3, #0]
  return(result);
 80136c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136c4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = read_q15x2 (pSi1);
 80136ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136d2:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80136d6:	681a      	ldr	r2, [r3, #0]
 80136d8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136dc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80136e0:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80136e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136e6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	461a      	mov	r2, r3
 80136f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136f4:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 80136f8:	601a      	str	r2, [r3, #0]
  return (val);
 80136fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136fe:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8013708:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801370c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013710:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8013714:	601a      	str	r2, [r3, #0]
 8013716:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801371a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801371e:	2200      	movs	r2, #0
 8013720:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013722:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013726:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013730:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8013734:	6812      	ldr	r2, [r2, #0]
 8013736:	fa93 f222 	shadd16	r2, r3, r2
 801373a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801373e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8013742:	601a      	str	r2, [r3, #0]
  return(result);
 8013744:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013748:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8013752:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013756:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801375a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801375e:	601a      	str	r2, [r3, #0]
 8013760:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013764:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8013768:	2200      	movs	r2, #0
 801376a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801376c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013770:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801377a:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 801377e:	6812      	ldr	r2, [r2, #0]
 8013780:	fa93 f222 	shadd16	r2, r3, r2
 8013784:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013788:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801378c:	601a      	str	r2, [r3, #0]
  return(result);
 801378e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013792:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yd (real), xd(imag) input */
    U = read_q15x2 (pSi3);
 801379c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80137a0:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80137aa:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80137ae:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80137b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80137b4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	461a      	mov	r2, r3
 80137be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80137c2:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 80137c6:	601a      	str	r2, [r3, #0]
  return (val);
 80137c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80137cc:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 80137d6:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80137da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80137de:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80137e2:	601a      	str	r2, [r3, #0]
 80137e4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80137e8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80137ec:	2200      	movs	r2, #0
 80137ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80137f4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80137fe:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8013802:	6812      	ldr	r2, [r2, #0]
 8013804:	fa93 f222 	shadd16	r2, r3, r2
 8013808:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801380c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8013810:	601a      	str	r2, [r3, #0]
  return(result);
 8013812:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013816:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8013820:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8013824:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013828:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801382c:	601a      	str	r2, [r3, #0]
 801382e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013832:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8013836:	2200      	movs	r2, #0
 8013838:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801383a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801383e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013848:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 801384c:	6812      	ldr	r2, [r2, #0]
 801384e:	fa93 f222 	shadd16	r2, r3, r2
 8013852:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013856:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801385a:	601a      	str	r2, [r3, #0]
  return(result);
 801385c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013860:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 801386a:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 801386e:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8013872:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013876:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801387a:	6019      	str	r1, [r3, #0]
 801387c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013880:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8013884:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013886:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801388a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013894:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8013898:	6812      	ldr	r2, [r2, #0]
 801389a:	fa93 f212 	qadd16	r2, r3, r2
 801389e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80138a2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80138a6:	601a      	str	r2, [r3, #0]
  return(result);
 80138a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80138ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&pSi0, __SHADD16(R, T));
 80138b6:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80138ba:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80138be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80138c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80138c6:	6019      	str	r1, [r3, #0]
 80138c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80138cc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80138d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80138d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80138d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80138e0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80138e4:	6812      	ldr	r2, [r2, #0]
 80138e6:	fa93 f222 	shadd16	r2, r3, r2
 80138ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80138ee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80138f2:	601a      	str	r2, [r3, #0]
  return(result);
 80138f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80138f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	4619      	mov	r1, r3
 8013900:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013904:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013908:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 801390c:	601a      	str	r2, [r3, #0]
 801390e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013912:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8013916:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8013918:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801391c:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8013920:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013924:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8013928:	6812      	ldr	r2, [r2, #0]
 801392a:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801392c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013930:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801393c:	f5a2 7276 	sub.w	r2, r2, #984	@ 0x3d8
 8013940:	6812      	ldr	r2, [r2, #0]
 8013942:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013944:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013948:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	1d1a      	adds	r2, r3, #4
 8013952:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013956:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	601a      	str	r2, [r3, #0]
}
 801395e:	bf00      	nop

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 8013960:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8013964:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013968:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801396c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013970:	6019      	str	r1, [r3, #0]
 8013972:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013976:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801397a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801397c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013980:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801398a:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 801398e:	6812      	ldr	r2, [r2, #0]
 8013990:	fad3 f212 	qsub16	r2, r3, r2
 8013994:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013998:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801399c:	601a      	str	r2, [r3, #0]
  return(result);
 801399e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80139a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 80139ac:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 80139b0:	00db      	lsls	r3, r3, #3
 80139b2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80139b6:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 80139ba:	6812      	ldr	r2, [r2, #0]
 80139bc:	441a      	add	r2, r3
 80139be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80139c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80139c6:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80139c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80139cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	461a      	mov	r2, r3
 80139d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80139da:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 80139de:	601a      	str	r2, [r3, #0]
  return (val);
 80139e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80139e4:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc

#ifndef ARM_MATH_BIG_ENDIAN
    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUAD(C2, R) >> 16U;
 80139ee:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 80139f2:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80139f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80139fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80139fe:	6019      	str	r1, [r3, #0]
 8013a00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013a08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013a0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013a18:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8013a1c:	6812      	ldr	r2, [r2, #0]
 8013a1e:	fb23 f202 	smuad	r2, r3, r2
 8013a22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a26:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8013a2a:	601a      	str	r2, [r3, #0]
  return(result);
 8013a2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	0c1b      	lsrs	r3, r3, #16
 8013a38:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUSDX(C2, R);
 8013a3c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 8013a40:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8013a44:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8013a48:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a4c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013a50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013a52:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8013a56:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013a5a:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8013a5e:	6812      	ldr	r2, [r2, #0]
 8013a60:	fb43 f212 	smusdx	r2, r3, r2
 8013a64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013a6c:	601a      	str	r2, [r3, #0]
  return(result);
 8013a6e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    out2 = __SMUAD(C2, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = read_q15x2 (pSi1);
 8013a7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a80:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
  memcpy (&val, pQ15, 4);
 8013a8a:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	461a      	mov	r2, r3
 8013a92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a96:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8013a9a:	601a      	str	r2, [r3, #0]
  return (val);
 8013a9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013aa0:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8013aaa:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8013aae:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013ab8:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8013abc:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 8013ac0:	fa93 f322 	shadd16	r3, r3, r2
 8013ac4:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
  return(result);
 8013ac8:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8013acc:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8013ad0:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8013ad4:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8013ad8:	2300      	movs	r3, #0
 8013ada:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013ade:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8013ae2:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 8013ae6:	fa93 f322 	shadd16	r3, r3, r2
 8013aea:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
  return(result);
 8013aee:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8013af2:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    write_q15x2_ia (&pSi1, (q31_t) __PKHBT( out1, out2, 0 ));
 8013af6:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8013afa:	b29a      	uxth	r2, r3
 8013afc:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8013b00:	4bd7      	ldr	r3, [pc, #860]	@ (8013e60 <arm_radix4_butterfly_q15+0xa8c>)
 8013b02:	400b      	ands	r3, r1
 8013b04:	4313      	orrs	r3, r2
 8013b06:	461a      	mov	r2, r3
 8013b08:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8013b0c:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8013b10:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
  q31_t val = value;
 8013b14:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b18:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 8013b1c:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8013b20:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8013b22:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013b2c:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 8013b30:	6812      	ldr	r2, [r2, #0]
 8013b32:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013b34:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	1d1a      	adds	r2, r3, #4
 8013b3c:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8013b40:	601a      	str	r2, [r3, #0]
}
 8013b42:	bf00      	nop

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = read_q15x2 (pSi3);
 8013b44:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b48:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
  memcpy (&val, pQ15, 4);
 8013b52:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	461a      	mov	r2, r3
 8013b5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b5e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8013b62:	601a      	str	r2, [r3, #0]
  return (val);
 8013b64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b68:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8013b72:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8013b76:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013b80:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8013b84:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8013b88:	fa93 f322 	shadd16	r3, r3, r2
 8013b8c:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
  return(result);
 8013b90:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8013b94:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8013b98:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8013b9c:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013ba6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8013baa:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8013bae:	fa93 f322 	shadd16	r3, r3, r2
 8013bb2:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
  return(result);
 8013bb6:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8013bba:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 8013bbe:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013bc2:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8013bc6:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8013bca:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013bce:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8013bd2:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8013bd6:	fad3 f312 	qsub16	r3, r3, r2
 8013bda:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
  return(result);
 8013bde:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8013be2:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QASX(S, T);
 8013be6:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013bea:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8013bee:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 8013bf2:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013bf6:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8013bfa:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 8013bfe:	faa3 f312 	qasx	r3, r3, r2
 8013c02:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
  return(result);
 8013c06:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8013c0a:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QSAX(S, T);
 8013c0e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013c12:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8013c16:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 8013c1a:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013c1e:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8013c22:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8013c26:	fae3 f312 	qsax	r3, r3, r2
 8013c2a:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  return(result);
 8013c2e:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8013c32:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QASX(S, T);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 8013c36:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8013c3a:	009b      	lsls	r3, r3, #2
 8013c3c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013c40:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8013c44:	6812      	ldr	r2, [r2, #0]
 8013c46:	4413      	add	r3, r2
 8013c48:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
  memcpy (&val, pQ15, 4);
 8013c4c:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	461a      	mov	r2, r3
 8013c54:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c58:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8013c5c:	601a      	str	r2, [r3, #0]
  return (val);
 8013c5e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c62:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUAD(C1, S) >> 16U;
 8013c6c:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8013c70:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8013c74:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8013c78:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013c7c:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8013c80:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8013c84:	fb23 f302 	smuad	r3, r3, r2
 8013c88:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  return(result);
 8013c8c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8013c90:	0c1b      	lsrs	r3, r3, #16
 8013c92:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUSDX(C1, S);
 8013c96:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8013c9a:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8013c9e:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 8013ca2:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013ca6:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8013caa:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8013cae:	fb43 f312 	smusdx	r3, r3, r2
 8013cb2:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  return(result);
 8013cb6:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8013cba:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out2 = __SMUAD(C1, S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xb', yb') in little endian format */
    write_q15x2_ia (&pSi2, __PKHBT( out1, out2, 0 ));
 8013cbe:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8013cc2:	b29a      	uxth	r2, r3
 8013cc4:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8013cc8:	4b65      	ldr	r3, [pc, #404]	@ (8013e60 <arm_radix4_butterfly_q15+0xa8c>)
 8013cca:	400b      	ands	r3, r1
 8013ccc:	4313      	orrs	r3, r2
 8013cce:	461a      	mov	r2, r3
 8013cd0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8013cd4:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8013cd8:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
  q31_t val = value;
 8013cdc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ce0:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 8013ce4:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 8013ce8:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8013cea:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013cf4:	f5a2 727c 	sub.w	r2, r2, #1008	@ 0x3f0
 8013cf8:	6812      	ldr	r2, [r2, #0]
 8013cfa:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013cfc:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	1d1a      	adds	r2, r3, #4
 8013d04:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8013d08:	601a      	str	r2, [r3, #0]
}
 8013d0a:	bf00      	nop

    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 8013d0c:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013d10:	4613      	mov	r3, r2
 8013d12:	005b      	lsls	r3, r3, #1
 8013d14:	4413      	add	r3, r2
 8013d16:	009b      	lsls	r3, r3, #2
 8013d18:	461a      	mov	r2, r3
 8013d1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d1e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	4413      	add	r3, r2
 8013d26:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  memcpy (&val, pQ15, 4);
 8013d2a:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	461a      	mov	r2, r3
 8013d32:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d36:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8013d3a:	601a      	str	r2, [r3, #0]
  return (val);
 8013d3c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d40:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUAD(C3, R) >> 16U;
 8013d4a:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8013d4e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8013d52:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8013d56:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013d5a:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8013d5e:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8013d62:	fb23 f302 	smuad	r3, r3, r2
 8013d66:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  return(result);
 8013d6a:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013d6e:	0c1b      	lsrs	r3, r3, #16
 8013d70:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUSDX(C3, R);
 8013d74:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8013d78:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8013d7c:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 8013d80:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013d84:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8013d88:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8013d8c:	fb43 f312 	smusdx	r3, r3, r2
 8013d90:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
  return(result);
 8013d94:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8013d98:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out2 = __SMUAD(C3, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xd', yd') in little endian format */
    write_q15x2_ia (&pSi3, __PKHBT( out1, out2, 0 ));
 8013d9c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8013da0:	b29a      	uxth	r2, r3
 8013da2:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8013da6:	4b2e      	ldr	r3, [pc, #184]	@ (8013e60 <arm_radix4_butterfly_q15+0xa8c>)
 8013da8:	400b      	ands	r3, r1
 8013daa:	4313      	orrs	r3, r2
 8013dac:	461a      	mov	r2, r3
 8013dae:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8013db2:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8013db6:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
  q31_t val = value;
 8013dba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dbe:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 8013dc2:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 8013dc6:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8013dc8:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013dd2:	f5a2 727e 	sub.w	r2, r2, #1016	@ 0x3f8
 8013dd6:	6812      	ldr	r2, [r2, #0]
 8013dd8:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013dda:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	1d1a      	adds	r2, r3, #4
 8013de2:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8013de6:	601a      	str	r2, [r3, #0]
}
 8013de8:	bf00      	nop

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 8013dea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dee:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8013df2:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	4413      	add	r3, r2
 8013dfa:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  } while (--j);
 8013dfe:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013e02:	3b01      	subs	r3, #1
 8013e04:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8013e08:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	f47f ab44 	bne.w	801349a <arm_radix4_butterfly_q15+0xc6>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 8013e12:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e16:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8013e1a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013e1e:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8013e22:	6812      	ldr	r2, [r2, #0]
 8013e24:	0092      	lsls	r2, r2, #2
 8013e26:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8013e28:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e2c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	089b      	lsrs	r3, r3, #2
 8013e34:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8013e38:	f000 bcc6 	b.w	80147c8 <arm_radix4_butterfly_q15+0x13f4>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 8013e3c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013e40:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
    n2 >>= 2U;
 8013e44:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013e48:	089b      	lsrs	r3, r3, #2
 8013e4a:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    ic = 0U;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

    for (j = 0U; j <= (n2 - 1U); j++)
 8013e54:	2300      	movs	r3, #0
 8013e56:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8013e5a:	f000 bc9d 	b.w	8014798 <arm_radix4_butterfly_q15+0x13c4>
 8013e5e:	bf00      	nop
 8013e60:	ffff0000 	.word	0xffff0000
    {
      /*  index calculation for the coefficients */
      C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 8013e64:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8013e68:	009b      	lsls	r3, r3, #2
 8013e6a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013e6e:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8013e72:	6812      	ldr	r2, [r2, #0]
 8013e74:	441a      	add	r2, r3
 8013e76:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e7a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8013e7e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013e80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e84:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	461a      	mov	r2, r3
 8013e8e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e92:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8013e96:	601a      	str	r2, [r3, #0]
  return (val);
 8013e98:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e9c:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
      C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8013ea6:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8013eaa:	00db      	lsls	r3, r3, #3
 8013eac:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013eb0:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8013eb4:	6812      	ldr	r2, [r2, #0]
 8013eb6:	441a      	add	r2, r3
 8013eb8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ebc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8013ec0:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013ec2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ec6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	461a      	mov	r2, r3
 8013ed0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ed4:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8013ed8:	601a      	str	r2, [r3, #0]
  return (val);
 8013eda:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ede:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
      C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 8013ee8:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013eec:	4613      	mov	r3, r2
 8013eee:	005b      	lsls	r3, r3, #1
 8013ef0:	4413      	add	r3, r2
 8013ef2:	009b      	lsls	r3, r3, #2
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013efa:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	441a      	add	r2, r3
 8013f02:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f06:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8013f0a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013f0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f10:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	461a      	mov	r2, r3
 8013f1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f1e:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8013f22:	601a      	str	r2, [r3, #0]
  return (val);
 8013f24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f28:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 8013f32:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f36:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8013f3a:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	4413      	add	r3, r2
 8013f42:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

      pSi0 = pSrc16 + 2 * j;
 8013f46:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013f4a:	009b      	lsls	r3, r3, #2
 8013f4c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013f50:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8013f54:	6812      	ldr	r2, [r2, #0]
 8013f56:	441a      	add	r2, r3
 8013f58:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f5c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013f60:	601a      	str	r2, [r3, #0]
      pSi1 = pSi0 + 2 * n2;
 8013f62:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f66:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013f6a:	681a      	ldr	r2, [r3, #0]
 8013f6c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013f70:	009b      	lsls	r3, r3, #2
 8013f72:	441a      	add	r2, r3
 8013f74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f78:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013f7c:	601a      	str	r2, [r3, #0]
      pSi2 = pSi1 + 2 * n2;
 8013f7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f82:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013f86:	681a      	ldr	r2, [r3, #0]
 8013f88:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013f8c:	009b      	lsls	r3, r3, #2
 8013f8e:	441a      	add	r2, r3
 8013f90:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f94:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013f98:	601a      	str	r2, [r3, #0]
      pSi3 = pSi2 + 2 * n2;
 8013f9a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f9e:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013fa2:	681a      	ldr	r2, [r3, #0]
 8013fa4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013fa8:	009b      	lsls	r3, r3, #2
 8013faa:	441a      	add	r2, r3
 8013fac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fb0:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013fb4:	601a      	str	r2, [r3, #0]

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 8013fb6:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013fba:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8013fbe:	e3dc      	b.n	801477a <arm_radix4_butterfly_q15+0x13a6>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = read_q15x2 (pSi0);
 8013fc0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fc4:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013fc8:	681a      	ldr	r2, [r3, #0]
 8013fca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fce:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8013fd2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013fd4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fd8:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	461a      	mov	r2, r3
 8013fe2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fe6:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8013fea:	601a      	str	r2, [r3, #0]
  return (val);
 8013fec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ff0:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yc (real), xc(imag) input */
        S = read_q15x2 (pSi2);
 8013ffa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ffe:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014002:	681a      	ldr	r2, [r3, #0]
 8014004:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014008:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 801400c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801400e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014012:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	461a      	mov	r2, r3
 801401c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014020:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8014024:	601a      	str	r2, [r3, #0]
  return (val);
 8014026:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801402a:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 8014034:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014038:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801403c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014040:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8014044:	6019      	str	r1, [r3, #0]
 8014046:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801404a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 801404e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014050:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014054:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801405e:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8014062:	6812      	ldr	r2, [r2, #0]
 8014064:	fa93 f212 	qadd16	r2, r3, r2
 8014068:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801406c:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8014070:	601a      	str	r2, [r3, #0]
  return(result);
 8014072:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014076:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 8014080:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014084:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014088:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801408c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8014090:	6019      	str	r1, [r3, #0]
 8014092:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014096:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 801409a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801409c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140a0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80140aa:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 80140ae:	6812      	ldr	r2, [r2, #0]
 80140b0:	fad3 f212 	qsub16	r2, r3, r2
 80140b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140b8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80140bc:	601a      	str	r2, [r3, #0]
  return(result);
 80140be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140c2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 80140cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140d0:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80140d4:	681a      	ldr	r2, [r3, #0]
 80140d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140da:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80140de:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80140e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140e4:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	461a      	mov	r2, r3
 80140ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140f2:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80140f6:	601a      	str	r2, [r3, #0]
  return (val);
 80140f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140fc:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8014106:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801410a:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801410e:	681a      	ldr	r2, [r3, #0]
 8014110:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014114:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8014118:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801411a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801411e:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	461a      	mov	r2, r3
 8014128:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801412c:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8014130:	601a      	str	r2, [r3, #0]
  return (val);
 8014132:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014136:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 8014140:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014144:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014148:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801414c:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8014150:	6019      	str	r1, [r3, #0]
 8014152:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014156:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 801415a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801415c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014160:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801416a:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 801416e:	6812      	ldr	r2, [r2, #0]
 8014170:	fa93 f212 	qadd16	r2, r3, r2
 8014174:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014178:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 801417c:	601a      	str	r2, [r3, #0]
  return(result);
 801417e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014182:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 801418c:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8014190:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014194:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014198:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 801419c:	6019      	str	r1, [r3, #0]
 801419e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141a2:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 80141a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80141a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141ac:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80141b6:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 80141ba:	6812      	ldr	r2, [r2, #0]
 80141bc:	fa93 f222 	shadd16	r2, r3, r2
 80141c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141c4:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80141c8:	601a      	str	r2, [r3, #0]
  return(result);
 80141ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141ce:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out1 = __SHADD16(out1, 0);
 80141d8:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 80141dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141e0:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80141e4:	601a      	str	r2, [r3, #0]
 80141e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141ea:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80141ee:	2200      	movs	r2, #0
 80141f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80141f2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141f6:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014200:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 8014204:	6812      	ldr	r2, [r2, #0]
 8014206:	fa93 f222 	shadd16	r2, r3, r2
 801420a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801420e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8014212:	601a      	str	r2, [r3, #0]
  return(result);
 8014214:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014218:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        write_q15x2 (pSi0, out1);
 8014222:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014226:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 801422a:	681a      	ldr	r2, [r3, #0]
 801422c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014230:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8014234:	601a      	str	r2, [r3, #0]
 8014236:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801423a:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 801423e:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8014242:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE void write_q15x2 (
  q15_t * pQ15,
  q31_t   value)
{
  q31_t val = value;
 8014244:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014248:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 801424c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014250:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8014254:	6812      	ldr	r2, [r2, #0]
 8014256:	601a      	str	r2, [r3, #0]

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (pQ15, &val, 4);
 8014258:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801425c:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8014260:	681a      	ldr	r2, [r3, #0]
 8014262:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014266:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	601a      	str	r2, [r3, #0]
#else
  pQ15[0] = (q15_t)(val & 0x0FFFF);
  pQ15[1] = (q15_t)(val >> 16);
#endif
}
 801426e:	bf00      	nop
        pSi0 += 2 * n1;
 8014270:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014274:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8014278:	681a      	ldr	r2, [r3, #0]
 801427a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 801427e:	009b      	lsls	r3, r3, #2
 8014280:	441a      	add	r2, r3
 8014282:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014286:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 801428a:	601a      	str	r2, [r3, #0]

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 801428c:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8014290:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014294:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014298:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 801429c:	6019      	str	r1, [r3, #0]
 801429e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142a2:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80142a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80142a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142ac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80142b6:	f5a2 721a 	sub.w	r2, r2, #616	@ 0x268
 80142ba:	6812      	ldr	r2, [r2, #0]
 80142bc:	fad3 f222 	shsub16	r2, r3, r2
 80142c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142c4:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80142c8:	601a      	str	r2, [r3, #0]
  return(result);
 80142ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142ce:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

#ifndef ARM_MATH_BIG_ENDIAN
        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUAD(C2, R) >> 16U;
 80142d8:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 80142dc:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80142e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142e4:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80142e8:	6019      	str	r1, [r3, #0]
 80142ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142ee:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80142f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80142f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142f8:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014302:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 8014306:	6812      	ldr	r2, [r2, #0]
 8014308:	fb23 f202 	smuad	r2, r3, r2
 801430c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014310:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8014314:	601a      	str	r2, [r3, #0]
  return(result);
 8014316:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801431a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	0c1b      	lsrs	r3, r3, #16
 8014322:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUSDX(C2, R);
 8014326:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 801432a:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 801432e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014332:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8014336:	6019      	str	r1, [r3, #0]
 8014338:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801433c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8014340:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014342:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014346:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014350:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8014354:	6812      	ldr	r2, [r2, #0]
 8014356:	fb43 f212 	smusdx	r2, r3, r2
 801435a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801435e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8014362:	601a      	str	r2, [r3, #0]
  return(result);
 8014364:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014368:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C2, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8014372:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014376:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014380:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8014384:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014386:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801438a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	461a      	mov	r2, r3
 8014394:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014398:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 801439c:	601a      	str	r2, [r3, #0]
  return (val);
 801439e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143a2:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        write_q15x2 (pSi1, __PKHBT( out1, out2, 0 ));
 80143ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143b0:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80143b4:	681a      	ldr	r2, [r3, #0]
 80143b6:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80143ba:	b299      	uxth	r1, r3
 80143bc:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 80143c0:	4bd9      	ldr	r3, [pc, #868]	@ (8014728 <arm_radix4_butterfly_q15+0x1354>)
 80143c2:	4003      	ands	r3, r0
 80143c4:	430b      	orrs	r3, r1
 80143c6:	4619      	mov	r1, r3
 80143c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143cc:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80143d0:	601a      	str	r2, [r3, #0]
 80143d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143d6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80143da:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80143dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143e0:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80143e4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80143e8:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 80143ec:	6812      	ldr	r2, [r2, #0]
 80143ee:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 80143f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143f4:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80143f8:	681a      	ldr	r2, [r3, #0]
 80143fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143fe:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	601a      	str	r2, [r3, #0]
}
 8014406:	bf00      	nop
        pSi1 += 2 * n1;
 8014408:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801440c:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014410:	681a      	ldr	r2, [r3, #0]
 8014412:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8014416:	009b      	lsls	r3, r3, #2
 8014418:	441a      	add	r2, r3
 801441a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801441e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014422:	601a      	str	r2, [r3, #0]

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8014424:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014428:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801442c:	681a      	ldr	r2, [r3, #0]
 801442e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014432:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8014436:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014438:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801443c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	461a      	mov	r2, r3
 8014446:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801444a:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 801444e:	601a      	str	r2, [r3, #0]
  return (val);
 8014450:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014454:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 801445e:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014462:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014466:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801446a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 801446e:	6019      	str	r1, [r3, #0]
 8014470:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014474:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8014478:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801447a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801447e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014488:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 801448c:	6812      	ldr	r2, [r2, #0]
 801448e:	fad3 f212 	qsub16	r2, r3, r2
 8014492:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014496:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 801449a:	601a      	str	r2, [r3, #0]
  return(result);
 801449c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144a0:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHASX(S, T);
 80144aa:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80144ae:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80144b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144b6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80144ba:	6019      	str	r1, [r3, #0]
 80144bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144c0:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80144c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80144c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144ca:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80144d4:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 80144d8:	6812      	ldr	r2, [r2, #0]
 80144da:	faa3 f222 	shasx	r2, r3, r2
 80144de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144e2:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80144e6:	601a      	str	r2, [r3, #0]
  return(result);
 80144e8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144ec:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHSAX(S, T);
 80144f6:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80144fa:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80144fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014502:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8014506:	6019      	str	r1, [r3, #0]
 8014508:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801450c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8014510:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014512:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014516:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014520:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8014524:	6812      	ldr	r2, [r2, #0]
 8014526:	fae3 f222 	shsax	r2, r3, r2
 801452a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801452e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8014532:	601a      	str	r2, [r3, #0]
  return(result);
 8014534:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014538:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8


        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUAD(C1, S) >> 16U;
 8014542:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8014546:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801454a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801454e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8014552:	6019      	str	r1, [r3, #0]
 8014554:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014558:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801455c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801455e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014562:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801456c:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8014570:	6812      	ldr	r2, [r2, #0]
 8014572:	fb23 f202 	smuad	r2, r3, r2
 8014576:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801457a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 801457e:	601a      	str	r2, [r3, #0]
  return(result);
 8014580:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014584:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	0c1b      	lsrs	r3, r3, #16
 801458c:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUSDX(C1, S);
 8014590:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8014594:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014598:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801459c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80145a0:	6019      	str	r1, [r3, #0]
 80145a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80145aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80145ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145b0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80145ba:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 80145be:	6812      	ldr	r2, [r2, #0]
 80145c0:	fb43 f212 	smusdx	r2, r3, r2
 80145c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145c8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80145cc:	601a      	str	r2, [r3, #0]
  return(result);
 80145ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145d2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C1, S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        write_q15x2 (pSi2, __PKHBT( out1, out2, 0 ));
 80145dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145e0:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 80145e4:	681a      	ldr	r2, [r3, #0]
 80145e6:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80145ea:	b299      	uxth	r1, r3
 80145ec:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 80145f0:	4b4d      	ldr	r3, [pc, #308]	@ (8014728 <arm_radix4_butterfly_q15+0x1354>)
 80145f2:	4003      	ands	r3, r0
 80145f4:	430b      	orrs	r3, r1
 80145f6:	4619      	mov	r1, r3
 80145f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145fc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8014600:	601a      	str	r2, [r3, #0]
 8014602:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014606:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 801460a:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 801460c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014610:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8014614:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014618:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
 801461c:	6812      	ldr	r2, [r2, #0]
 801461e:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8014620:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014624:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8014628:	681a      	ldr	r2, [r3, #0]
 801462a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801462e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	601a      	str	r2, [r3, #0]
}
 8014636:	bf00      	nop
        pSi2 += 2 * n1;
 8014638:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801463c:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014640:	681a      	ldr	r2, [r3, #0]
 8014642:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8014646:	009b      	lsls	r3, r3, #2
 8014648:	441a      	add	r2, r3
 801464a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801464e:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014652:	601a      	str	r2, [r3, #0]

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
        out1 = __SMUAD(C3, R) >> 16U;
 8014654:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8014658:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 801465c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014660:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8014664:	6019      	str	r1, [r3, #0]
 8014666:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801466a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801466e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014670:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014674:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801467e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8014682:	6812      	ldr	r2, [r2, #0]
 8014684:	fb23 f202 	smuad	r2, r3, r2
 8014688:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801468c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8014690:	601a      	str	r2, [r3, #0]
  return(result);
 8014692:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014696:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	0c1b      	lsrs	r3, r3, #16
 801469e:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUSDX(C3, R);
 80146a2:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 80146a6:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80146aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80146b2:	6019      	str	r1, [r3, #0]
 80146b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146b8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80146bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80146be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146c2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80146cc:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 80146d0:	6812      	ldr	r2, [r2, #0]
 80146d2:	fb43 f212 	smusdx	r2, r3, r2
 80146d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146da:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80146de:	601a      	str	r2, [r3, #0]
  return(result);
 80146e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146e4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C3, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        write_q15x2 (pSi3, __PKHBT( out1, out2, 0 ));
 80146ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146f2:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80146f6:	681a      	ldr	r2, [r3, #0]
 80146f8:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80146fc:	b299      	uxth	r1, r3
 80146fe:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8014702:	4b09      	ldr	r3, [pc, #36]	@ (8014728 <arm_radix4_butterfly_q15+0x1354>)
 8014704:	4003      	ands	r3, r0
 8014706:	430b      	orrs	r3, r1
 8014708:	4619      	mov	r1, r3
 801470a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801470e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8014712:	601a      	str	r2, [r3, #0]
 8014714:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014718:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 801471c:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 801471e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014722:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8014726:	e001      	b.n	801472c <arm_radix4_butterfly_q15+0x1358>
 8014728:	ffff0000 	.word	0xffff0000
 801472c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014730:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 8014734:	6812      	ldr	r2, [r2, #0]
 8014736:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8014738:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801473c:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8014740:	681a      	ldr	r2, [r3, #0]
 8014742:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014746:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	601a      	str	r2, [r3, #0]
}
 801474e:	bf00      	nop
        pSi3 += 2 * n1;
 8014750:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014754:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8014758:	681a      	ldr	r2, [r3, #0]
 801475a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 801475e:	009b      	lsls	r3, r3, #2
 8014760:	441a      	add	r2, r3
 8014762:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014766:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801476a:	601a      	str	r2, [r3, #0]
      for (i0 = j; i0 < fftLen; i0 += n1)
 801476c:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8014770:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8014774:	4413      	add	r3, r2
 8014776:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 801477a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801477e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8014782:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	429a      	cmp	r2, r3
 801478a:	f4ff ac19 	bcc.w	8013fc0 <arm_radix4_butterfly_q15+0xbec>
    for (j = 0U; j <= (n2 - 1U); j++)
 801478e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8014792:	3301      	adds	r3, #1
 8014794:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8014798:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 801479c:	3b01      	subs	r3, #1
 801479e:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 80147a2:	429a      	cmp	r2, r3
 80147a4:	f67f ab5e 	bls.w	8013e64 <arm_radix4_butterfly_q15+0xa90>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 80147a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147ac:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80147b0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80147b4:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 80147b8:	6812      	ldr	r2, [r2, #0]
 80147ba:	0092      	lsls	r2, r2, #2
 80147bc:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 80147be:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80147c2:	089b      	lsrs	r3, r3, #2
 80147c4:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 80147c8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80147cc:	2b04      	cmp	r3, #4
 80147ce:	f63f ab35 	bhi.w	8013e3c <arm_radix4_butterfly_q15+0xa68>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 80147d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147d6:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	089b      	lsrs	r3, r3, #2
 80147de:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  ptr1 = &pSrc16[0];
 80147e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147e6:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80147ea:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80147ee:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 80147f2:	6812      	ldr	r2, [r2, #0]
 80147f4:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = read_q15x2_ia (&ptr1);
 80147f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147fa:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	1d1a      	adds	r2, r3, #4
 8014802:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014806:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801480a:	601a      	str	r2, [r3, #0]
 801480c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014810:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	1f1a      	subs	r2, r3, #4
 8014818:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801481c:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8014820:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014822:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014826:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	461a      	mov	r2, r3
 8014830:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014834:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8014838:	601a      	str	r2, [r3, #0]
  return (val);
 801483a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801483e:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

    /* Read xb (real), yb(imag) input */
    xbyb = read_q15x2_ia (&ptr1);
 8014848:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801484c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	1d1a      	adds	r2, r3, #4
 8014854:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014858:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801485c:	601a      	str	r2, [r3, #0]
 801485e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014862:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	1f1a      	subs	r2, r3, #4
 801486a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801486e:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8014872:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014874:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014878:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	461a      	mov	r2, r3
 8014882:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014886:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 801488a:	601a      	str	r2, [r3, #0]
  return (val);
 801488c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014890:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4

    /* Read xc (real), yc(imag) input */
    xcyc = read_q15x2_ia (&ptr1);
 801489a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801489e:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	1d1a      	adds	r2, r3, #4
 80148a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148aa:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80148ae:	601a      	str	r2, [r3, #0]
 80148b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148b4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	1f1a      	subs	r2, r3, #4
 80148bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148c0:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80148c4:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80148c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148ca:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	461a      	mov	r2, r3
 80148d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148d8:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80148dc:	601a      	str	r2, [r3, #0]
  return (val);
 80148de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148e2:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

    /* Read xd (real), yd(imag) input */
    xdyd = read_q15x2_ia (&ptr1);
 80148ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148f0:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	1d1a      	adds	r2, r3, #4
 80148f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148fc:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014900:	601a      	str	r2, [r3, #0]
 8014902:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014906:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	1f1a      	subs	r2, r3, #4
 801490e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014912:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8014916:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014918:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801491c:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	461a      	mov	r2, r3
 8014926:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801492a:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 801492e:	601a      	str	r2, [r3, #0]
  return (val);
 8014930:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014934:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 801493e:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 8014942:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8014946:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801494a:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 801494e:	6019      	str	r1, [r3, #0]
 8014950:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014954:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8014958:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801495a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801495e:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014968:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 801496c:	6812      	ldr	r2, [r2, #0]
 801496e:	fa93 f212 	qadd16	r2, r3, r2
 8014972:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014976:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 801497a:	601a      	str	r2, [r3, #0]
  return(result);
 801497c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014980:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 801498a:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 801498e:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8014992:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014996:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 801499a:	6019      	str	r1, [r3, #0]
 801499c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149a0:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 80149a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80149a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149aa:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80149b4:	f5a2 724f 	sub.w	r2, r2, #828	@ 0x33c
 80149b8:	6812      	ldr	r2, [r2, #0]
 80149ba:	fa93 f212 	qadd16	r2, r3, r2
 80149be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149c2:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 80149c6:	601a      	str	r2, [r3, #0]
  return(result);
 80149c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149cc:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* pointer updation for writing */
    ptr1 = ptr1 - 8U;
 80149d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149da:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	f1a3 0210 	sub.w	r2, r3, #16
 80149e4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149e8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80149ec:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&ptr1, __SHADD16(R, T));
 80149ee:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80149f2:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80149f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149fa:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80149fe:	6019      	str	r1, [r3, #0]
 8014a00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a04:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8014a08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014a0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a0e:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014a18:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 8014a1c:	6812      	ldr	r2, [r2, #0]
 8014a1e:	fa93 f222 	shadd16	r2, r3, r2
 8014a22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a26:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8014a2a:	601a      	str	r2, [r3, #0]
  return(result);
 8014a2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a30:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	4619      	mov	r1, r3
 8014a38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a3c:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014a40:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8014a44:	601a      	str	r2, [r3, #0]
 8014a46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a4a:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8014a4e:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014a50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a54:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8014a58:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014a5c:	f5a2 724a 	sub.w	r2, r2, #808	@ 0x328
 8014a60:	6812      	ldr	r2, [r2, #0]
 8014a62:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014a64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a68:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014a74:	f5a2 7261 	sub.w	r2, r2, #900	@ 0x384
 8014a78:	6812      	ldr	r2, [r2, #0]
 8014a7a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014a7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a80:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	1d1a      	adds	r2, r3, #4
 8014a8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a8e:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	601a      	str	r2, [r3, #0]
}
 8014a96:	bf00      	nop

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8014a98:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8014a9c:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8014aa0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014aa4:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8014aa8:	6019      	str	r1, [r3, #0]
 8014aaa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014aae:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8014ab2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014ab4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ab8:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014ac2:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 8014ac6:	6812      	ldr	r2, [r2, #0]
 8014ac8:	fa93 f212 	qadd16	r2, r3, r2
 8014acc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ad0:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8014ad4:	601a      	str	r2, [r3, #0]
  return(result);
 8014ad6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ada:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    write_q15x2_ia (&ptr1, __SHSUB16(R, T));
 8014ae4:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8014ae8:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014aec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014af0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8014af4:	6019      	str	r1, [r3, #0]
 8014af6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014afa:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8014afe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014b00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b04:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014b0e:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 8014b12:	6812      	ldr	r2, [r2, #0]
 8014b14:	fad3 f222 	shsub16	r2, r3, r2
 8014b18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b1c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8014b20:	601a      	str	r2, [r3, #0]
  return(result);
 8014b22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b26:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	4619      	mov	r1, r3
 8014b2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b32:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8014b36:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8014b3a:	601a      	str	r2, [r3, #0]
 8014b3c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b40:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8014b44:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014b46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b4a:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 8014b4e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014b52:	f5a2 7242 	sub.w	r2, r2, #776	@ 0x308
 8014b56:	6812      	ldr	r2, [r2, #0]
 8014b58:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014b5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b5e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014b6a:	f5a2 7262 	sub.w	r2, r2, #904	@ 0x388
 8014b6e:	6812      	ldr	r2, [r2, #0]
 8014b70:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014b72:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b76:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	1d1a      	adds	r2, r3, #4
 8014b80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b84:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	601a      	str	r2, [r3, #0]
}
 8014b8c:	bf00      	nop

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 8014b8e:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 8014b92:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8014b96:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b9a:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8014b9e:	6019      	str	r1, [r3, #0]
 8014ba0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ba4:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8014ba8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014baa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bae:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014bb8:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 8014bbc:	6812      	ldr	r2, [r2, #0]
 8014bbe:	fad3 f212 	qsub16	r2, r3, r2
 8014bc2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bc6:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8014bca:	601a      	str	r2, [r3, #0]
  return(result);
 8014bcc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bd0:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 8014bda:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8014bde:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8014be2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014be6:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8014bea:	6019      	str	r1, [r3, #0]
 8014bec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bf0:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8014bf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014bf6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bfa:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014c04:	f5a2 723c 	sub.w	r2, r2, #752	@ 0x2f0
 8014c08:	6812      	ldr	r2, [r2, #0]
 8014c0a:	fad3 f212 	qsub16	r2, r3, r2
 8014c0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c12:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8014c16:	601a      	str	r2, [r3, #0]
  return(result);
 8014c18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c1c:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
 8014c26:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8014c2a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014c2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c32:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014c36:	6019      	str	r1, [r3, #0]
 8014c38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c3c:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8014c40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014c42:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c46:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014c50:	f5a2 7239 	sub.w	r2, r2, #740	@ 0x2e4
 8014c54:	6812      	ldr	r2, [r2, #0]
 8014c56:	fae3 f222 	shsax	r2, r3, r2
 8014c5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c5e:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8014c62:	601a      	str	r2, [r3, #0]
  return(result);
 8014c64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c68:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	4619      	mov	r1, r3
 8014c70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c74:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8014c78:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8014c7c:	601a      	str	r2, [r3, #0]
 8014c7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c82:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014c86:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014c88:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c8c:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8014c90:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014c94:	f5a2 7237 	sub.w	r2, r2, #732	@ 0x2dc
 8014c98:	6812      	ldr	r2, [r2, #0]
 8014c9a:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014c9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ca0:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014cac:	f5a2 7263 	sub.w	r2, r2, #908	@ 0x38c
 8014cb0:	6812      	ldr	r2, [r2, #0]
 8014cb2:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014cb4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cb8:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	1d1a      	adds	r2, r3, #4
 8014cc2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cc6:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	601a      	str	r2, [r3, #0]
}
 8014cce:	bf00      	nop

    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
 8014cd0:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8014cd4:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014cd8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cdc:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8014ce0:	6019      	str	r1, [r3, #0]
 8014ce2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ce6:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8014cea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014cec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cf0:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014cfa:	f5a2 7234 	sub.w	r2, r2, #720	@ 0x2d0
 8014cfe:	6812      	ldr	r2, [r2, #0]
 8014d00:	faa3 f222 	shasx	r2, r3, r2
 8014d04:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d08:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8014d0c:	601a      	str	r2, [r3, #0]
  return(result);
 8014d0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d12:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	4619      	mov	r1, r3
 8014d1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d1e:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014d22:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8014d26:	601a      	str	r2, [r3, #0]
 8014d28:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d2c:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8014d30:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014d32:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d36:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8014d3a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014d3e:	f5a2 7232 	sub.w	r2, r2, #712	@ 0x2c8
 8014d42:	6812      	ldr	r2, [r2, #0]
 8014d44:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014d46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d4a:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014d56:	f5a2 7264 	sub.w	r2, r2, #912	@ 0x390
 8014d5a:	6812      	ldr	r2, [r2, #0]
 8014d5c:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014d5e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d62:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	1d1a      	adds	r2, r3, #4
 8014d6c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d70:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	601a      	str	r2, [r3, #0]
}
 8014d78:	bf00      	nop
    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

  } while (--j);
 8014d7a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8014d7e:	3b01      	subs	r3, #1
 8014d80:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8014d84:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	f47f ad34 	bne.w	80147f6 <arm_radix4_butterfly_q15+0x1422>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 8014d8e:	bf00      	nop
 8014d90:	bf00      	nop
 8014d92:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bc90      	pop	{r4, r7}
 8014d9a:	4770      	bx	lr

08014d9c <arm_radix4_butterfly_inverse_q15>:
ARM_DSP_ATTRIBUTE void arm_radix4_butterfly_inverse_q15(
        q15_t * pSrc16,
        uint32_t fftLen,
  const q15_t * pCoef16,
        uint32_t twidCoefModifier)
{
 8014d9c:	b490      	push	{r4, r7}
 8014d9e:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8014da2:	af00      	add	r7, sp, #0
 8014da4:	f507 6481 	add.w	r4, r7, #1032	@ 0x408
 8014da8:	f5a4 747f 	sub.w	r4, r4, #1020	@ 0x3fc
 8014dac:	6020      	str	r0, [r4, #0]
 8014dae:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 8014db2:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
 8014db6:	6001      	str	r1, [r0, #0]
 8014db8:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8014dbc:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8014dc0:	600a      	str	r2, [r1, #0]
 8014dc2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014dc6:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8014dca:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 8014dcc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dd0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
  n1 = n2;
 8014dda:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014dde:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 8014de2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014de6:	089b      	lsrs	r3, r3, #2
 8014de8:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404

  /* Index for twiddle coefficient */
  ic = 0U;
 8014dec:	2300      	movs	r3, #0
 8014dee:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  /* Index for input read and output write */
  j = n2;
 8014df2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014df6:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  pSi0 = pSrc16;
 8014dfa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dfe:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8014e02:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014e06:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8014e0a:	6812      	ldr	r2, [r2, #0]
 8014e0c:	601a      	str	r2, [r3, #0]
  pSi1 = pSi0 + 2 * n2;
 8014e0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e12:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8014e16:	681a      	ldr	r2, [r3, #0]
 8014e18:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014e1c:	009b      	lsls	r3, r3, #2
 8014e1e:	441a      	add	r2, r3
 8014e20:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e24:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014e28:	601a      	str	r2, [r3, #0]
  pSi2 = pSi1 + 2 * n2;
 8014e2a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e2e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014e32:	681a      	ldr	r2, [r3, #0]
 8014e34:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014e38:	009b      	lsls	r3, r3, #2
 8014e3a:	441a      	add	r2, r3
 8014e3c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e40:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014e44:	601a      	str	r2, [r3, #0]
  pSi3 = pSi2 + 2 * n2;
 8014e46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e4a:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014e4e:	681a      	ldr	r2, [r3, #0]
 8014e50:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014e54:	009b      	lsls	r3, r3, #2
 8014e56:	441a      	add	r2, r3
 8014e58:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e5c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8014e60:	601a      	str	r2, [r3, #0]
  {
    /*  Butterfly implementation */

    /*  Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = read_q15x2 (pSi0);
 8014e62:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e66:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8014e6a:	681a      	ldr	r2, [r3, #0]
 8014e6c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e70:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8014e74:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014e76:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e7a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	461a      	mov	r2, r3
 8014e84:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e88:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8014e8c:	601a      	str	r2, [r3, #0]
  return (val);
 8014e8e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e92:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014e9c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014ea0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ea4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8014ea8:	601a      	str	r2, [r3, #0]
 8014eaa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014eae:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014eb6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014eba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014ec4:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 8014ec8:	6812      	ldr	r2, [r2, #0]
 8014eca:	fa93 f222 	shadd16	r2, r3, r2
 8014ece:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ed2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8014ed6:	601a      	str	r2, [r3, #0]
  return(result);
 8014ed8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014edc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014ee6:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014eea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014eee:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8014ef2:	601a      	str	r2, [r3, #0]
 8014ef4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ef8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8014efc:	2200      	movs	r2, #0
 8014efe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014f00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f04:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014f0e:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 8014f12:	6812      	ldr	r2, [r2, #0]
 8014f14:	fa93 f222 	shadd16	r2, r3, r2
 8014f18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f1c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8014f20:	601a      	str	r2, [r3, #0]
  return(result);
 8014f22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f26:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yc (real), xc(imag) input */
    S = read_q15x2 (pSi2);
 8014f30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f34:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014f38:	681a      	ldr	r2, [r3, #0]
 8014f3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f3e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8014f42:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014f44:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f48:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	461a      	mov	r2, r3
 8014f52:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f56:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8014f5a:	601a      	str	r2, [r3, #0]
  return (val);
 8014f5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f60:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 8014f6a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014f6e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f72:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8014f76:	601a      	str	r2, [r3, #0]
 8014f78:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f7c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8014f80:	2200      	movs	r2, #0
 8014f82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014f84:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f88:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014f92:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8014f96:	6812      	ldr	r2, [r2, #0]
 8014f98:	fa93 f222 	shadd16	r2, r3, r2
 8014f9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fa0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8014fa4:	601a      	str	r2, [r3, #0]
  return(result);
 8014fa6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014faa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 8014fb4:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014fb8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fbc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8014fc0:	601a      	str	r2, [r3, #0]
 8014fc2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fc6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8014fca:	2200      	movs	r2, #0
 8014fcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014fce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fd2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014fdc:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8014fe0:	6812      	ldr	r2, [r2, #0]
 8014fe2:	fa93 f222 	shadd16	r2, r3, r2
 8014fe6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fea:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8014fee:	601a      	str	r2, [r3, #0]
  return(result);
 8014ff0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ff4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 8014ffe:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8015002:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015006:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801500a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 801500e:	6019      	str	r1, [r3, #0]
 8015010:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015014:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8015018:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801501a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801501e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015028:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 801502c:	6812      	ldr	r2, [r2, #0]
 801502e:	fa93 f212 	qadd16	r2, r3, r2
 8015032:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015036:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801503a:	601a      	str	r2, [r3, #0]
  return(result);
 801503c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015040:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 801504a:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 801504e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015052:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015056:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 801505a:	6019      	str	r1, [r3, #0]
 801505c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015060:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8015064:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015066:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801506a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015074:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8015078:	6812      	ldr	r2, [r2, #0]
 801507a:	fad3 f212 	qsub16	r2, r3, r2
 801507e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015082:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8015086:	601a      	str	r2, [r3, #0]
  return(result);
 8015088:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801508c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = read_q15x2 (pSi1);
 8015096:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801509a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801509e:	681a      	ldr	r2, [r3, #0]
 80150a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150a4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80150a8:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80150aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150ae:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	461a      	mov	r2, r3
 80150b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150bc:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 80150c0:	601a      	str	r2, [r3, #0]
  return (val);
 80150c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150c6:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 80150d0:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80150d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150d8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80150dc:	601a      	str	r2, [r3, #0]
 80150de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150e2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80150e6:	2200      	movs	r2, #0
 80150e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80150ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150ee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80150f8:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 80150fc:	6812      	ldr	r2, [r2, #0]
 80150fe:	fa93 f222 	shadd16	r2, r3, r2
 8015102:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015106:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801510a:	601a      	str	r2, [r3, #0]
  return(result);
 801510c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015110:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 801511a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801511e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015122:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8015126:	601a      	str	r2, [r3, #0]
 8015128:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801512c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8015130:	2200      	movs	r2, #0
 8015132:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015134:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015138:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015142:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8015146:	6812      	ldr	r2, [r2, #0]
 8015148:	fa93 f222 	shadd16	r2, r3, r2
 801514c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015150:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8015154:	601a      	str	r2, [r3, #0]
  return(result);
 8015156:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801515a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yd (real), xd(imag) input */
    U = read_q15x2 (pSi3);
 8015164:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015168:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801516c:	681a      	ldr	r2, [r3, #0]
 801516e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015172:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8015176:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015178:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801517c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	461a      	mov	r2, r3
 8015186:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801518a:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 801518e:	601a      	str	r2, [r3, #0]
  return (val);
 8015190:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015194:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 801519e:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80151a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151a6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80151aa:	601a      	str	r2, [r3, #0]
 80151ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151b0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80151b4:	2200      	movs	r2, #0
 80151b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80151b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80151c6:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80151ca:	6812      	ldr	r2, [r2, #0]
 80151cc:	fa93 f222 	shadd16	r2, r3, r2
 80151d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151d4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80151d8:	601a      	str	r2, [r3, #0]
  return(result);
 80151da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151de:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 80151e8:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80151ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151f0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80151f4:	601a      	str	r2, [r3, #0]
 80151f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151fa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80151fe:	2200      	movs	r2, #0
 8015200:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015202:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015206:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015210:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8015214:	6812      	ldr	r2, [r2, #0]
 8015216:	fa93 f222 	shadd16	r2, r3, r2
 801521a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801521e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8015222:	601a      	str	r2, [r3, #0]
  return(result);
 8015224:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015228:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 8015232:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8015236:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 801523a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801523e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015242:	6019      	str	r1, [r3, #0]
 8015244:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015248:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801524c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801524e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015252:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801525c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8015260:	6812      	ldr	r2, [r2, #0]
 8015262:	fa93 f212 	qadd16	r2, r3, r2
 8015266:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801526a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 801526e:	601a      	str	r2, [r3, #0]
  return(result);
 8015270:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015274:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&pSi0, __SHADD16(R, T));
 801527e:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8015282:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015286:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801528a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801528e:	6019      	str	r1, [r3, #0]
 8015290:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015294:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015298:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801529a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801529e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80152a8:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80152ac:	6812      	ldr	r2, [r2, #0]
 80152ae:	fa93 f222 	shadd16	r2, r3, r2
 80152b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152b6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152ba:	601a      	str	r2, [r3, #0]
  return(result);
 80152bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152c0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	4619      	mov	r1, r3
 80152c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80152d0:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 80152d4:	601a      	str	r2, [r3, #0]
 80152d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80152de:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80152e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152e4:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 80152e8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80152ec:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80152f0:	6812      	ldr	r2, [r2, #0]
 80152f2:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80152f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80152f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015304:	f5a2 7276 	sub.w	r2, r2, #984	@ 0x3d8
 8015308:	6812      	ldr	r2, [r2, #0]
 801530a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801530c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015310:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	1d1a      	adds	r2, r3, #4
 801531a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801531e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	601a      	str	r2, [r3, #0]
}
 8015326:	bf00      	nop

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 8015328:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 801532c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015330:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015334:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015338:	6019      	str	r1, [r3, #0]
 801533a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801533e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015342:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015344:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015348:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015352:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8015356:	6812      	ldr	r2, [r2, #0]
 8015358:	fad3 f212 	qsub16	r2, r3, r2
 801535c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015360:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015364:	601a      	str	r2, [r3, #0]
  return(result);
 8015366:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801536a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8015374:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015378:	00db      	lsls	r3, r3, #3
 801537a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801537e:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8015382:	6812      	ldr	r2, [r2, #0]
 8015384:	441a      	add	r2, r3
 8015386:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801538a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801538e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015390:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015394:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	461a      	mov	r2, r3
 801539e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153a2:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 80153a6:	601a      	str	r2, [r3, #0]
  return (val);
 80153a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153ac:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc

#ifndef ARM_MATH_BIG_ENDIAN
    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUSD(C2, R) >> 16U;
 80153b6:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 80153ba:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80153be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80153c6:	6019      	str	r1, [r3, #0]
 80153c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80153d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80153d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80153e0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80153e4:	6812      	ldr	r2, [r2, #0]
 80153e6:	fb43 f202 	smusd	r2, r3, r2
 80153ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80153f2:	601a      	str	r2, [r3, #0]
  return(result);
 80153f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	0c1b      	lsrs	r3, r3, #16
 8015400:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUADX(C2, R);
 8015404:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 8015408:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 801540c:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8015410:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015414:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8015418:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801541a:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801541e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015422:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8015426:	6812      	ldr	r2, [r2, #0]
 8015428:	fb23 f212 	smuadx	r2, r3, r2
 801542c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015430:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8015434:	601a      	str	r2, [r3, #0]
  return(result);
 8015436:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801543a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    out2 = __SMUSD(__QSUB16(0, C2), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = read_q15x2 (pSi1);
 8015444:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015448:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
  memcpy (&val, pQ15, 4);
 8015452:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	461a      	mov	r2, r3
 801545a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801545e:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8015462:	601a      	str	r2, [r3, #0]
  return (val);
 8015464:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015468:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8015472:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8015476:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 801547a:	2300      	movs	r3, #0
 801547c:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015480:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8015484:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 8015488:	fa93 f322 	shadd16	r3, r3, r2
 801548c:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
  return(result);
 8015490:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 8015494:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8015498:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 801549c:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80154a0:	2300      	movs	r3, #0
 80154a2:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80154a6:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80154aa:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 80154ae:	fa93 f322 	shadd16	r3, r3, r2
 80154b2:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
  return(result);
 80154b6:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 80154ba:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    write_q15x2_ia (&pSi1, (q31_t) __PKHBT( out1, out2, 0 ));
 80154be:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80154c2:	b29a      	uxth	r2, r3
 80154c4:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 80154c8:	4bd7      	ldr	r3, [pc, #860]	@ (8015828 <arm_radix4_butterfly_inverse_q15+0xa8c>)
 80154ca:	400b      	ands	r3, r1
 80154cc:	4313      	orrs	r3, r2
 80154ce:	461a      	mov	r2, r3
 80154d0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80154d4:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 80154d8:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
  q31_t val = value;
 80154dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154e0:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 80154e4:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 80154e8:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80154ea:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80154f4:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 80154f8:	6812      	ldr	r2, [r2, #0]
 80154fa:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80154fc:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	1d1a      	adds	r2, r3, #4
 8015504:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8015508:	601a      	str	r2, [r3, #0]
}
 801550a:	bf00      	nop

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = read_q15x2 (pSi3);
 801550c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015510:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
  memcpy (&val, pQ15, 4);
 801551a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	461a      	mov	r2, r3
 8015522:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015526:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801552a:	601a      	str	r2, [r3, #0]
  return (val);
 801552c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015530:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 801553a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 801553e:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8015542:	2300      	movs	r3, #0
 8015544:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015548:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 801554c:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8015550:	fa93 f322 	shadd16	r3, r3, r2
 8015554:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
  return(result);
 8015558:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 801555c:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8015560:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8015564:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8015568:	2300      	movs	r3, #0
 801556a:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801556e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8015572:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8015576:	fa93 f322 	shadd16	r3, r3, r2
 801557a:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
  return(result);
 801557e:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8015582:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 8015586:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801558a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 801558e:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 8015592:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015596:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 801559a:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 801559e:	fad3 f312 	qsub16	r3, r3, r2
 80155a2:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
  return(result);
 80155a6:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80155aa:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QSAX(S, T);
 80155ae:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80155b2:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80155b6:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 80155ba:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80155be:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80155c2:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 80155c6:	fae3 f312 	qsax	r3, r3, r2
 80155ca:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
  return(result);
 80155ce:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 80155d2:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
    /* S = packed((ya-yc) + (xb- xd),  (xa-xc) - (yb-yd)) */
    S = __QASX(S, T);
 80155d6:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80155da:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80155de:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 80155e2:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80155e6:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 80155ea:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 80155ee:	faa3 f312 	qasx	r3, r3, r2
 80155f2:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  return(result);
 80155f6:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80155fa:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QSAX(S, T);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 80155fe:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015602:	009b      	lsls	r3, r3, #2
 8015604:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015608:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 801560c:	6812      	ldr	r2, [r2, #0]
 801560e:	4413      	add	r3, r2
 8015610:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
  memcpy (&val, pQ15, 4);
 8015614:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	461a      	mov	r2, r3
 801561c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015620:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8015624:	601a      	str	r2, [r3, #0]
  return (val);
 8015626:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801562a:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUSD(C1, S) >> 16U;
 8015634:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8015638:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 801563c:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8015640:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015644:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8015648:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 801564c:	fb43 f302 	smusd	r3, r3, r2
 8015650:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  return(result);
 8015654:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8015658:	0c1b      	lsrs	r3, r3, #16
 801565a:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUADX(C1, S);
 801565e:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8015662:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8015666:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 801566a:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801566e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8015672:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8015676:	fb23 f312 	smuadx	r3, r3, r2
 801567a:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  return(result);
 801567e:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8015682:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out2 = __SMUSD(__QSUB16(0, C1), S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xb', yb') in little endian format */
    write_q15x2_ia (&pSi2, __PKHBT( out1, out2, 0 ));
 8015686:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 801568a:	b29a      	uxth	r2, r3
 801568c:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8015690:	4b65      	ldr	r3, [pc, #404]	@ (8015828 <arm_radix4_butterfly_inverse_q15+0xa8c>)
 8015692:	400b      	ands	r3, r1
 8015694:	4313      	orrs	r3, r2
 8015696:	461a      	mov	r2, r3
 8015698:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 801569c:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80156a0:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
  q31_t val = value;
 80156a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156a8:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 80156ac:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 80156b0:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80156b2:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80156bc:	f5a2 727c 	sub.w	r2, r2, #1008	@ 0x3f0
 80156c0:	6812      	ldr	r2, [r2, #0]
 80156c2:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80156c4:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	1d1a      	adds	r2, r3, #4
 80156cc:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80156d0:	601a      	str	r2, [r3, #0]
}
 80156d2:	bf00      	nop

    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 80156d4:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80156d8:	4613      	mov	r3, r2
 80156da:	005b      	lsls	r3, r3, #1
 80156dc:	4413      	add	r3, r2
 80156de:	009b      	lsls	r3, r3, #2
 80156e0:	461a      	mov	r2, r3
 80156e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156e6:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	4413      	add	r3, r2
 80156ee:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  memcpy (&val, pQ15, 4);
 80156f2:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	461a      	mov	r2, r3
 80156fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156fe:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8015702:	601a      	str	r2, [r3, #0]
  return (val);
 8015704:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015708:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUSD(C3, R) >> 16U;
 8015712:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8015716:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 801571a:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 801571e:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015722:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8015726:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 801572a:	fb43 f302 	smusd	r3, r3, r2
 801572e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  return(result);
 8015732:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8015736:	0c1b      	lsrs	r3, r3, #16
 8015738:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUADX(C3, R);
 801573c:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8015740:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8015744:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 8015748:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801574c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8015750:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8015754:	fb23 f312 	smuadx	r3, r3, r2
 8015758:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
  return(result);
 801575c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8015760:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out2 = __SMUSD(__QSUB16(0, C3), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xd', yd') in little endian format */
    write_q15x2_ia (&pSi3, __PKHBT( out1, out2, 0 ));
 8015764:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015768:	b29a      	uxth	r2, r3
 801576a:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 801576e:	4b2e      	ldr	r3, [pc, #184]	@ (8015828 <arm_radix4_butterfly_inverse_q15+0xa8c>)
 8015770:	400b      	ands	r3, r1
 8015772:	4313      	orrs	r3, r2
 8015774:	461a      	mov	r2, r3
 8015776:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801577a:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 801577e:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
  q31_t val = value;
 8015782:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015786:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 801578a:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 801578e:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8015790:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801579a:	f5a2 727e 	sub.w	r2, r2, #1016	@ 0x3f8
 801579e:	6812      	ldr	r2, [r2, #0]
 80157a0:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80157a2:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	1d1a      	adds	r2, r3, #4
 80157aa:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 80157ae:	601a      	str	r2, [r3, #0]
}
 80157b0:	bf00      	nop

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 80157b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157b6:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80157ba:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	4413      	add	r3, r2
 80157c2:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  } while (--j);
 80157c6:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80157ca:	3b01      	subs	r3, #1
 80157cc:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 80157d0:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	f47f ab44 	bne.w	8014e62 <arm_radix4_butterfly_inverse_q15+0xc6>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 80157da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157de:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80157e2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80157e6:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 80157ea:	6812      	ldr	r2, [r2, #0]
 80157ec:	0092      	lsls	r2, r2, #2
 80157ee:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 80157f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157f4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	089b      	lsrs	r3, r3, #2
 80157fc:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8015800:	f000 bcc6 	b.w	8016190 <arm_radix4_butterfly_inverse_q15+0x13f4>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 8015804:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015808:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
    n2 >>= 2U;
 801580c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015810:	089b      	lsrs	r3, r3, #2
 8015812:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    ic = 0U;
 8015816:	2300      	movs	r3, #0
 8015818:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

    for (j = 0U; j <= (n2 - 1U); j++)
 801581c:	2300      	movs	r3, #0
 801581e:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8015822:	f000 bc9d 	b.w	8016160 <arm_radix4_butterfly_inverse_q15+0x13c4>
 8015826:	bf00      	nop
 8015828:	ffff0000 	.word	0xffff0000
    {
      /*  index calculation for the coefficients */
      C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 801582c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015830:	009b      	lsls	r3, r3, #2
 8015832:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015836:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 801583a:	6812      	ldr	r2, [r2, #0]
 801583c:	441a      	add	r2, r3
 801583e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015842:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8015846:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015848:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801584c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	461a      	mov	r2, r3
 8015856:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801585a:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 801585e:	601a      	str	r2, [r3, #0]
  return (val);
 8015860:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015864:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
      C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 801586e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015872:	00db      	lsls	r3, r3, #3
 8015874:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015878:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 801587c:	6812      	ldr	r2, [r2, #0]
 801587e:	441a      	add	r2, r3
 8015880:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015884:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8015888:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801588a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801588e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	461a      	mov	r2, r3
 8015898:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801589c:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 80158a0:	601a      	str	r2, [r3, #0]
  return (val);
 80158a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158a6:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
      C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 80158b0:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80158b4:	4613      	mov	r3, r2
 80158b6:	005b      	lsls	r3, r3, #1
 80158b8:	4413      	add	r3, r2
 80158ba:	009b      	lsls	r3, r3, #2
 80158bc:	461a      	mov	r2, r3
 80158be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158c2:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	441a      	add	r2, r3
 80158ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158ce:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80158d2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80158d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158d8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	461a      	mov	r2, r3
 80158e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158e6:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 80158ea:	601a      	str	r2, [r3, #0]
  return (val);
 80158ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158f0:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 80158fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158fe:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8015902:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	4413      	add	r3, r2
 801590a:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

      pSi0 = pSrc16 + 2 * j;
 801590e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8015912:	009b      	lsls	r3, r3, #2
 8015914:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015918:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 801591c:	6812      	ldr	r2, [r2, #0]
 801591e:	441a      	add	r2, r3
 8015920:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015924:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015928:	601a      	str	r2, [r3, #0]
      pSi1 = pSi0 + 2 * n2;
 801592a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801592e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015932:	681a      	ldr	r2, [r3, #0]
 8015934:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015938:	009b      	lsls	r3, r3, #2
 801593a:	441a      	add	r2, r3
 801593c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015940:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015944:	601a      	str	r2, [r3, #0]
      pSi2 = pSi1 + 2 * n2;
 8015946:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801594a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801594e:	681a      	ldr	r2, [r3, #0]
 8015950:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015954:	009b      	lsls	r3, r3, #2
 8015956:	441a      	add	r2, r3
 8015958:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801595c:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015960:	601a      	str	r2, [r3, #0]
      pSi3 = pSi2 + 2 * n2;
 8015962:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015966:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801596a:	681a      	ldr	r2, [r3, #0]
 801596c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015970:	009b      	lsls	r3, r3, #2
 8015972:	441a      	add	r2, r3
 8015974:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015978:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801597c:	601a      	str	r2, [r3, #0]

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 801597e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8015982:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8015986:	e3dc      	b.n	8016142 <arm_radix4_butterfly_inverse_q15+0x13a6>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = read_q15x2 (pSi0);
 8015988:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801598c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015990:	681a      	ldr	r2, [r3, #0]
 8015992:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015996:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 801599a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801599c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159a0:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	461a      	mov	r2, r3
 80159aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159ae:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 80159b2:	601a      	str	r2, [r3, #0]
  return (val);
 80159b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159b8:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yc (real), xc(imag) input */
        S = read_q15x2 (pSi2);
 80159c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159c6:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 80159ca:	681a      	ldr	r2, [r3, #0]
 80159cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159d0:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80159d4:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80159d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159da:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	461a      	mov	r2, r3
 80159e4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159e8:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80159ec:	601a      	str	r2, [r3, #0]
  return (val);
 80159ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159f2:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 80159fc:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8015a00:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015a04:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a08:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8015a0c:	6019      	str	r1, [r3, #0]
 8015a0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a12:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8015a16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015a18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a1c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015a26:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8015a2a:	6812      	ldr	r2, [r2, #0]
 8015a2c:	fa93 f212 	qadd16	r2, r3, r2
 8015a30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a34:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8015a38:	601a      	str	r2, [r3, #0]
  return(result);
 8015a3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a3e:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 8015a48:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8015a4c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015a50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a54:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8015a58:	6019      	str	r1, [r3, #0]
 8015a5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a5e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8015a62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015a64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a68:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015a72:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 8015a76:	6812      	ldr	r2, [r2, #0]
 8015a78:	fad3 f212 	qsub16	r2, r3, r2
 8015a7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a80:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8015a84:	601a      	str	r2, [r3, #0]
  return(result);
 8015a86:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a8a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8015a94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a98:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015a9c:	681a      	ldr	r2, [r3, #0]
 8015a9e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015aa2:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8015aa6:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015aa8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015aac:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	461a      	mov	r2, r3
 8015ab6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015aba:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8015abe:	601a      	str	r2, [r3, #0]
  return (val);
 8015ac0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ac4:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8015ace:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ad2:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015ad6:	681a      	ldr	r2, [r3, #0]
 8015ad8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015adc:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8015ae0:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015ae2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ae6:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	461a      	mov	r2, r3
 8015af0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015af4:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8015af8:	601a      	str	r2, [r3, #0]
  return (val);
 8015afa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015afe:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 8015b08:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8015b0c:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8015b10:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b14:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8015b18:	6019      	str	r1, [r3, #0]
 8015b1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b1e:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8015b22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015b24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b28:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015b32:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 8015b36:	6812      	ldr	r2, [r2, #0]
 8015b38:	fa93 f212 	qadd16	r2, r3, r2
 8015b3c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b40:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8015b44:	601a      	str	r2, [r3, #0]
  return(result);
 8015b46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b4a:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 8015b54:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8015b58:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015b5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b60:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8015b64:	6019      	str	r1, [r3, #0]
 8015b66:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b6a:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8015b6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015b70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b74:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015b7e:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 8015b82:	6812      	ldr	r2, [r2, #0]
 8015b84:	fa93 f222 	shadd16	r2, r3, r2
 8015b88:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b8c:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8015b90:	601a      	str	r2, [r3, #0]
  return(result);
 8015b92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b96:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out1 = __SHADD16(out1, 0);
 8015ba0:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8015ba4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ba8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8015bac:	601a      	str	r2, [r3, #0]
 8015bae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bb2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015bba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bbe:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015bc8:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 8015bcc:	6812      	ldr	r2, [r2, #0]
 8015bce:	fa93 f222 	shadd16	r2, r3, r2
 8015bd2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bd6:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8015bda:	601a      	str	r2, [r3, #0]
  return(result);
 8015bdc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015be0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        write_q15x2 (pSi0, out1);
 8015bea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bee:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015bf2:	681a      	ldr	r2, [r3, #0]
 8015bf4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bf8:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8015bfc:	601a      	str	r2, [r3, #0]
 8015bfe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c02:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8015c06:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8015c0a:	601a      	str	r2, [r3, #0]
  q31_t val = value;
 8015c0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c10:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8015c14:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015c18:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8015c1c:	6812      	ldr	r2, [r2, #0]
 8015c1e:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015c20:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c24:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c2e:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	601a      	str	r2, [r3, #0]
}
 8015c36:	bf00      	nop
        pSi0 += 2 * n1;
 8015c38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c3c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015c40:	681a      	ldr	r2, [r3, #0]
 8015c42:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015c46:	009b      	lsls	r3, r3, #2
 8015c48:	441a      	add	r2, r3
 8015c4a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c4e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015c52:	601a      	str	r2, [r3, #0]

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 8015c54:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8015c58:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015c5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c60:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8015c64:	6019      	str	r1, [r3, #0]
 8015c66:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c6a:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8015c6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015c70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c74:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015c7e:	f5a2 721a 	sub.w	r2, r2, #616	@ 0x268
 8015c82:	6812      	ldr	r2, [r2, #0]
 8015c84:	fad3 f222 	shsub16	r2, r3, r2
 8015c88:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c8c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8015c90:	601a      	str	r2, [r3, #0]
  return(result);
 8015c92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c96:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

#ifndef ARM_MATH_BIG_ENDIAN
        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUSD(C2, R) >> 16U;
 8015ca0:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8015ca4:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015ca8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cac:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8015cb0:	6019      	str	r1, [r3, #0]
 8015cb2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cb6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8015cba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015cbc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cc0:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015cca:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 8015cce:	6812      	ldr	r2, [r2, #0]
 8015cd0:	fb43 f202 	smusd	r2, r3, r2
 8015cd4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cd8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8015cdc:	601a      	str	r2, [r3, #0]
  return(result);
 8015cde:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ce2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	0c1b      	lsrs	r3, r3, #16
 8015cea:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUADX(C2, R);
 8015cee:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8015cf2:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015cf6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cfa:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8015cfe:	6019      	str	r1, [r3, #0]
 8015d00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d04:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8015d08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015d0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d0e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015d18:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8015d1c:	6812      	ldr	r2, [r2, #0]
 8015d1e:	fb23 f212 	smuadx	r2, r3, r2
 8015d22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d26:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8015d2a:	601a      	str	r2, [r3, #0]
  return(result);
 8015d2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d30:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C2), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8015d3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d3e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015d42:	681a      	ldr	r2, [r3, #0]
 8015d44:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d48:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8015d4c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015d4e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d52:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	461a      	mov	r2, r3
 8015d5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d60:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8015d64:	601a      	str	r2, [r3, #0]
  return (val);
 8015d66:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d6a:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        write_q15x2 (pSi1, __PKHBT( out1, out2, 0 ));
 8015d74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d78:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015d7c:	681a      	ldr	r2, [r3, #0]
 8015d7e:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015d82:	b299      	uxth	r1, r3
 8015d84:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8015d88:	4bd9      	ldr	r3, [pc, #868]	@ (80160f0 <arm_radix4_butterfly_inverse_q15+0x1354>)
 8015d8a:	4003      	ands	r3, r0
 8015d8c:	430b      	orrs	r3, r1
 8015d8e:	4619      	mov	r1, r3
 8015d90:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d94:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8015d98:	601a      	str	r2, [r3, #0]
 8015d9a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d9e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8015da2:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015da4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015da8:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8015dac:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015db0:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8015db4:	6812      	ldr	r2, [r2, #0]
 8015db6:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015db8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dbc:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8015dc0:	681a      	ldr	r2, [r3, #0]
 8015dc2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dc6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	601a      	str	r2, [r3, #0]
}
 8015dce:	bf00      	nop
        pSi1 += 2 * n1;
 8015dd0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dd4:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015dd8:	681a      	ldr	r2, [r3, #0]
 8015dda:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015dde:	009b      	lsls	r3, r3, #2
 8015de0:	441a      	add	r2, r3
 8015de2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015de6:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015dea:	601a      	str	r2, [r3, #0]

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8015dec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015df0:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015df4:	681a      	ldr	r2, [r3, #0]
 8015df6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dfa:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8015dfe:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015e00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e04:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	461a      	mov	r2, r3
 8015e0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e12:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8015e16:	601a      	str	r2, [r3, #0]
  return (val);
 8015e18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e1c:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 8015e26:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8015e2a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8015e2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e32:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8015e36:	6019      	str	r1, [r3, #0]
 8015e38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e3c:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8015e40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015e42:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e46:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015e50:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8015e54:	6812      	ldr	r2, [r2, #0]
 8015e56:	fad3 f212 	qsub16	r2, r3, r2
 8015e5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e5e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8015e62:	601a      	str	r2, [r3, #0]
  return(result);
 8015e64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e68:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHSAX(S, T);
 8015e72:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8015e76:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015e7a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e7e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015e82:	6019      	str	r1, [r3, #0]
 8015e84:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e88:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8015e8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015e8e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e92:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015e9c:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 8015ea0:	6812      	ldr	r2, [r2, #0]
 8015ea2:	fae3 f222 	shsax	r2, r3, r2
 8015ea6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015eaa:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8015eae:	601a      	str	r2, [r3, #0]
  return(result);
 8015eb0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015eb4:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHASX(S, T);
 8015ebe:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8015ec2:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015ec6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015eca:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8015ece:	6019      	str	r1, [r3, #0]
 8015ed0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ed4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8015ed8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015eda:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ede:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015ee8:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8015eec:	6812      	ldr	r2, [r2, #0]
 8015eee:	faa3 f222 	shasx	r2, r3, r2
 8015ef2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ef6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015efa:	601a      	str	r2, [r3, #0]
  return(result);
 8015efc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f00:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUSD(C1, S) >> 16U;
 8015f0a:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8015f0e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015f12:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f16:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8015f1a:	6019      	str	r1, [r3, #0]
 8015f1c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f20:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8015f24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015f26:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f2a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015f34:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8015f38:	6812      	ldr	r2, [r2, #0]
 8015f3a:	fb43 f202 	smusd	r2, r3, r2
 8015f3e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f42:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8015f46:	601a      	str	r2, [r3, #0]
  return(result);
 8015f48:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f4c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	0c1b      	lsrs	r3, r3, #16
 8015f54:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUADX(C1, S);
 8015f58:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8015f5c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015f60:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f64:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8015f68:	6019      	str	r1, [r3, #0]
 8015f6a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8015f72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015f74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f78:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015f82:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 8015f86:	6812      	ldr	r2, [r2, #0]
 8015f88:	fb23 f212 	smuadx	r2, r3, r2
 8015f8c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f90:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8015f94:	601a      	str	r2, [r3, #0]
  return(result);
 8015f96:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f9a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C1), S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        write_q15x2 (pSi2, __PKHBT( out1, out2, 0 ));
 8015fa4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fa8:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015fac:	681a      	ldr	r2, [r3, #0]
 8015fae:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015fb2:	b299      	uxth	r1, r3
 8015fb4:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8015fb8:	4b4d      	ldr	r3, [pc, #308]	@ (80160f0 <arm_radix4_butterfly_inverse_q15+0x1354>)
 8015fba:	4003      	ands	r3, r0
 8015fbc:	430b      	orrs	r3, r1
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fc4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8015fc8:	601a      	str	r2, [r3, #0]
 8015fca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8015fd2:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015fd4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fd8:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8015fdc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015fe0:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
 8015fe4:	6812      	ldr	r2, [r2, #0]
 8015fe6:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015fe8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fec:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8015ff0:	681a      	ldr	r2, [r3, #0]
 8015ff2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ff6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	601a      	str	r2, [r3, #0]
}
 8015ffe:	bf00      	nop
        pSi2 += 2 * n1;
 8016000:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016004:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8016008:	681a      	ldr	r2, [r3, #0]
 801600a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 801600e:	009b      	lsls	r3, r3, #2
 8016010:	441a      	add	r2, r3
 8016012:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016016:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801601a:	601a      	str	r2, [r3, #0]

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
        out1 = __SMUSD(C3, R) >> 16U;
 801601c:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8016020:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8016024:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016028:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 801602c:	6019      	str	r1, [r3, #0]
 801602e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016032:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8016036:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016038:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801603c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016046:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 801604a:	6812      	ldr	r2, [r2, #0]
 801604c:	fb43 f202 	smusd	r2, r3, r2
 8016050:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016054:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8016058:	601a      	str	r2, [r3, #0]
  return(result);
 801605a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801605e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	0c1b      	lsrs	r3, r3, #16
 8016066:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUADX(C3, R);
 801606a:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 801606e:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8016072:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016076:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801607a:	6019      	str	r1, [r3, #0]
 801607c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016080:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8016084:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016086:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801608a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016094:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 8016098:	6812      	ldr	r2, [r2, #0]
 801609a:	fb23 f212 	smuadx	r2, r3, r2
 801609e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160a2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80160a6:	601a      	str	r2, [r3, #0]
  return(result);
 80160a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160ac:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C3), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        write_q15x2 (pSi3, __PKHBT( out1, out2, 0 ));
 80160b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160ba:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80160be:	681a      	ldr	r2, [r3, #0]
 80160c0:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80160c4:	b299      	uxth	r1, r3
 80160c6:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 80160ca:	4b09      	ldr	r3, [pc, #36]	@ (80160f0 <arm_radix4_butterfly_inverse_q15+0x1354>)
 80160cc:	4003      	ands	r3, r0
 80160ce:	430b      	orrs	r3, r1
 80160d0:	4619      	mov	r1, r3
 80160d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160d6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80160da:	601a      	str	r2, [r3, #0]
 80160dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160e0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80160e4:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80160e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160ea:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 80160ee:	e001      	b.n	80160f4 <arm_radix4_butterfly_inverse_q15+0x1358>
 80160f0:	ffff0000 	.word	0xffff0000
 80160f4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80160f8:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 80160fc:	6812      	ldr	r2, [r2, #0]
 80160fe:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8016100:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016104:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8016108:	681a      	ldr	r2, [r3, #0]
 801610a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801610e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	601a      	str	r2, [r3, #0]
}
 8016116:	bf00      	nop
        pSi3 += 2 * n1;
 8016118:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801611c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8016120:	681a      	ldr	r2, [r3, #0]
 8016122:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8016126:	009b      	lsls	r3, r3, #2
 8016128:	441a      	add	r2, r3
 801612a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801612e:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8016132:	601a      	str	r2, [r3, #0]
      for (i0 = j; i0 < fftLen; i0 += n1)
 8016134:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8016138:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 801613c:	4413      	add	r3, r2
 801613e:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8016142:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016146:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801614a:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	429a      	cmp	r2, r3
 8016152:	f4ff ac19 	bcc.w	8015988 <arm_radix4_butterfly_inverse_q15+0xbec>
    for (j = 0U; j <= (n2 - 1U); j++)
 8016156:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 801615a:	3301      	adds	r3, #1
 801615c:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8016160:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8016164:	3b01      	subs	r3, #1
 8016166:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 801616a:	429a      	cmp	r2, r3
 801616c:	f67f ab5e 	bls.w	801582c <arm_radix4_butterfly_inverse_q15+0xa90>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 8016170:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016174:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8016178:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801617c:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8016180:	6812      	ldr	r2, [r2, #0]
 8016182:	0092      	lsls	r2, r2, #2
 8016184:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8016186:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 801618a:	089b      	lsrs	r3, r3, #2
 801618c:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8016190:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8016194:	2b04      	cmp	r3, #4
 8016196:	f63f ab35 	bhi.w	8015804 <arm_radix4_butterfly_inverse_q15+0xa68>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 801619a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801619e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	089b      	lsrs	r3, r3, #2
 80161a6:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  ptr1 = &pSrc16[0];
 80161aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161ae:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80161b2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80161b6:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 80161ba:	6812      	ldr	r2, [r2, #0]
 80161bc:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = read_q15x2_ia (&ptr1);
 80161be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161c2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	1d1a      	adds	r2, r3, #4
 80161ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161ce:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80161d2:	601a      	str	r2, [r3, #0]
 80161d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161d8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	1f1a      	subs	r2, r3, #4
 80161e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161e4:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80161e8:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80161ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161ee:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	461a      	mov	r2, r3
 80161f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161fc:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8016200:	601a      	str	r2, [r3, #0]
  return (val);
 8016202:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016206:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

    /* Read xb (real), yb(imag) input */
    xbyb = read_q15x2_ia (&ptr1);
 8016210:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016214:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	1d1a      	adds	r2, r3, #4
 801621c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016220:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8016224:	601a      	str	r2, [r3, #0]
 8016226:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801622a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	1f1a      	subs	r2, r3, #4
 8016232:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016236:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 801623a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801623c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016240:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	461a      	mov	r2, r3
 801624a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801624e:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8016252:	601a      	str	r2, [r3, #0]
  return (val);
 8016254:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016258:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4

    /* Read xc (real), yc(imag) input */
    xcyc = read_q15x2_ia (&ptr1);
 8016262:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016266:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	1d1a      	adds	r2, r3, #4
 801626e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016272:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8016276:	601a      	str	r2, [r3, #0]
 8016278:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801627c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	1f1a      	subs	r2, r3, #4
 8016284:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016288:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 801628c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801628e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016292:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	461a      	mov	r2, r3
 801629c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162a0:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80162a4:	601a      	str	r2, [r3, #0]
  return (val);
 80162a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162aa:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

    /* Read xd (real), yd(imag) input */
    xdyd = read_q15x2_ia (&ptr1);
 80162b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162b8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	1d1a      	adds	r2, r3, #4
 80162c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162c4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80162c8:	601a      	str	r2, [r3, #0]
 80162ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162ce:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	1f1a      	subs	r2, r3, #4
 80162d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162da:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80162de:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80162e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162e4:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	461a      	mov	r2, r3
 80162ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162f2:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80162f6:	601a      	str	r2, [r3, #0]
  return (val);
 80162f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162fc:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 8016306:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 801630a:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 801630e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016312:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8016316:	6019      	str	r1, [r3, #0]
 8016318:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801631c:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8016320:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016322:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016326:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016330:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 8016334:	6812      	ldr	r2, [r2, #0]
 8016336:	fa93 f212 	qadd16	r2, r3, r2
 801633a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801633e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8016342:	601a      	str	r2, [r3, #0]
  return(result);
 8016344:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016348:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8016352:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8016356:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 801635a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801635e:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8016362:	6019      	str	r1, [r3, #0]
 8016364:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016368:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 801636c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801636e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016372:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801637c:	f5a2 724f 	sub.w	r2, r2, #828	@ 0x33c
 8016380:	6812      	ldr	r2, [r2, #0]
 8016382:	fa93 f212 	qadd16	r2, r3, r2
 8016386:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801638a:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 801638e:	601a      	str	r2, [r3, #0]
  return(result);
 8016390:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016394:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* pointer updation for writing */
    ptr1 = ptr1 - 8U;
 801639e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163a2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	f1a3 0210 	sub.w	r2, r3, #16
 80163ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163b0:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80163b4:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&ptr1, __SHADD16(R, T));
 80163b6:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80163ba:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80163be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163c2:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80163c6:	6019      	str	r1, [r3, #0]
 80163c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163cc:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 80163d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80163d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163d6:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80163e0:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 80163e4:	6812      	ldr	r2, [r2, #0]
 80163e6:	fa93 f222 	shadd16	r2, r3, r2
 80163ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163ee:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80163f2:	601a      	str	r2, [r3, #0]
  return(result);
 80163f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163f8:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	4619      	mov	r1, r3
 8016400:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016404:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8016408:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 801640c:	601a      	str	r2, [r3, #0]
 801640e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016412:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8016416:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8016418:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801641c:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8016420:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016424:	f5a2 724a 	sub.w	r2, r2, #808	@ 0x328
 8016428:	6812      	ldr	r2, [r2, #0]
 801642a:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801642c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016430:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801643c:	f5a2 7261 	sub.w	r2, r2, #900	@ 0x384
 8016440:	6812      	ldr	r2, [r2, #0]
 8016442:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8016444:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016448:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	1d1a      	adds	r2, r3, #4
 8016452:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016456:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	601a      	str	r2, [r3, #0]
}
 801645e:	bf00      	nop

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8016460:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8016464:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8016468:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801646c:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8016470:	6019      	str	r1, [r3, #0]
 8016472:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016476:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 801647a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801647c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016480:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801648a:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 801648e:	6812      	ldr	r2, [r2, #0]
 8016490:	fa93 f212 	qadd16	r2, r3, r2
 8016494:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016498:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 801649c:	601a      	str	r2, [r3, #0]
  return(result);
 801649e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80164a2:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    write_q15x2_ia (&ptr1, __SHSUB16(R, T));
 80164ac:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80164b0:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80164b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80164b8:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80164bc:	6019      	str	r1, [r3, #0]
 80164be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80164c2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80164c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80164c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80164cc:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80164d6:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 80164da:	6812      	ldr	r2, [r2, #0]
 80164dc:	fad3 f222 	shsub16	r2, r3, r2
 80164e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80164e4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80164e8:	601a      	str	r2, [r3, #0]
  return(result);
 80164ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80164ee:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	4619      	mov	r1, r3
 80164f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80164fa:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80164fe:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8016502:	601a      	str	r2, [r3, #0]
 8016504:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016508:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 801650c:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 801650e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016512:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 8016516:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801651a:	f5a2 7242 	sub.w	r2, r2, #776	@ 0x308
 801651e:	6812      	ldr	r2, [r2, #0]
 8016520:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8016522:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016526:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016532:	f5a2 7262 	sub.w	r2, r2, #904	@ 0x388
 8016536:	6812      	ldr	r2, [r2, #0]
 8016538:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801653a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801653e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	1d1a      	adds	r2, r3, #4
 8016548:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801654c:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	601a      	str	r2, [r3, #0]
}
 8016554:	bf00      	nop

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 8016556:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 801655a:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 801655e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016562:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8016566:	6019      	str	r1, [r3, #0]
 8016568:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801656c:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8016570:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016572:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016576:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016580:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 8016584:	6812      	ldr	r2, [r2, #0]
 8016586:	fad3 f212 	qsub16	r2, r3, r2
 801658a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801658e:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8016592:	601a      	str	r2, [r3, #0]
  return(result);
 8016594:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016598:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 80165a2:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 80165a6:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 80165aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80165ae:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80165b2:	6019      	str	r1, [r3, #0]
 80165b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80165b8:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80165bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80165be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80165c2:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80165cc:	f5a2 723c 	sub.w	r2, r2, #752	@ 0x2f0
 80165d0:	6812      	ldr	r2, [r2, #0]
 80165d2:	fad3 f212 	qsub16	r2, r3, r2
 80165d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80165da:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80165de:	601a      	str	r2, [r3, #0]
  return(result);
 80165e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80165e4:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
 80165ee:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80165f2:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80165f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80165fa:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80165fe:	6019      	str	r1, [r3, #0]
 8016600:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016604:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8016608:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801660a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801660e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016618:	f5a2 7239 	sub.w	r2, r2, #740	@ 0x2e4
 801661c:	6812      	ldr	r2, [r2, #0]
 801661e:	faa3 f222 	shasx	r2, r3, r2
 8016622:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016626:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 801662a:	601a      	str	r2, [r3, #0]
  return(result);
 801662c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016630:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	4619      	mov	r1, r3
 8016638:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801663c:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8016640:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8016644:	601a      	str	r2, [r3, #0]
 8016646:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801664a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801664e:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8016650:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016654:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8016658:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801665c:	f5a2 7237 	sub.w	r2, r2, #732	@ 0x2dc
 8016660:	6812      	ldr	r2, [r2, #0]
 8016662:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8016664:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016668:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016674:	f5a2 7263 	sub.w	r2, r2, #908	@ 0x38c
 8016678:	6812      	ldr	r2, [r2, #0]
 801667a:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801667c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016680:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	1d1a      	adds	r2, r3, #4
 801668a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801668e:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	601a      	str	r2, [r3, #0]
}
 8016696:	bf00      	nop

    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
 8016698:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 801669c:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80166a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80166a4:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80166a8:	6019      	str	r1, [r3, #0]
 80166aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80166ae:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80166b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80166b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80166b8:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80166c2:	f5a2 7234 	sub.w	r2, r2, #720	@ 0x2d0
 80166c6:	6812      	ldr	r2, [r2, #0]
 80166c8:	fae3 f222 	shsax	r2, r3, r2
 80166cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80166d0:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80166d4:	601a      	str	r2, [r3, #0]
  return(result);
 80166d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80166da:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	4619      	mov	r1, r3
 80166e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80166e6:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 80166ea:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80166ee:	601a      	str	r2, [r3, #0]
 80166f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80166f4:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80166f8:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80166fa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80166fe:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8016702:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016706:	f5a2 7232 	sub.w	r2, r2, #712	@ 0x2c8
 801670a:	6812      	ldr	r2, [r2, #0]
 801670c:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801670e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016712:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801671e:	f5a2 7264 	sub.w	r2, r2, #912	@ 0x390
 8016722:	6812      	ldr	r2, [r2, #0]
 8016724:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8016726:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801672a:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	1d1a      	adds	r2, r3, #4
 8016734:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016738:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	601a      	str	r2, [r3, #0]
}
 8016740:	bf00      	nop
    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

  } while (--j);
 8016742:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8016746:	3b01      	subs	r3, #1
 8016748:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 801674c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8016750:	2b00      	cmp	r3, #0
 8016752:	f47f ad34 	bne.w	80161be <arm_radix4_butterfly_inverse_q15+0x1422>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 8016756:	bf00      	nop
 8016758:	bf00      	nop
 801675a:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 801675e:	46bd      	mov	sp, r7
 8016760:	bc90      	pop	{r4, r7}
 8016762:	4770      	bx	lr

08016764 <arm_mfcc_init_q15>:
  const uint32_t *filterPos,
  const uint32_t *filterLengths,
  const q15_t *filterCoefs,
  const q15_t *windowCoefs
  )
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b086      	sub	sp, #24
 8016768:	af00      	add	r7, sp, #0
 801676a:	60f8      	str	r0, [r7, #12]
 801676c:	60b9      	str	r1, [r7, #8]
 801676e:	607a      	str	r2, [r7, #4]
 8016770:	603b      	str	r3, [r7, #0]
 arm_status status;

 S->fftLen=fftLen;
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	68ba      	ldr	r2, [r7, #8]
 8016776:	615a      	str	r2, [r3, #20]
 S->nbMelFilters=nbMelFilters;
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	687a      	ldr	r2, [r7, #4]
 801677c:	619a      	str	r2, [r3, #24]
 S->nbDctOutputs=nbDctOutputs;
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	683a      	ldr	r2, [r7, #0]
 8016782:	61da      	str	r2, [r3, #28]
 S->dctCoefs=dctCoefs;
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	6a3a      	ldr	r2, [r7, #32]
 8016788:	601a      	str	r2, [r3, #0]
 S->filterPos=filterPos;
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801678e:	60da      	str	r2, [r3, #12]
 S->filterLengths=filterLengths;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016794:	611a      	str	r2, [r3, #16]
 S->filterCoefs=filterCoefs;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801679a:	605a      	str	r2, [r3, #4]
 S->windowCoefs=windowCoefs;
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80167a0:	609a      	str	r2, [r3, #8]

 #if defined(ARM_MFCC_CFFT_BASED)
 status=arm_cfft_init_q15(&(S->cfft),fftLen);
 #else
 RFFT_INIT(fftLen);
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	f103 0020 	add.w	r0, r3, #32
 80167a8:	2301      	movs	r3, #1
 80167aa:	2200      	movs	r2, #0
 80167ac:	68b9      	ldr	r1, [r7, #8]
 80167ae:	f000 fab5 	bl	8016d1c <arm_rfft_init_q15>
 80167b2:	4603      	mov	r3, r0
 80167b4:	75fb      	strb	r3, [r7, #23]
 #endif
 
 return(status);
 80167b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3718      	adds	r7, #24
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}
	...

080167c4 <arm_mfcc_q15>:
  q15_t *pSrc,
  q15_t *pDst,
  q31_t *pTmp
  )
#endif
{
 80167c4:	b5b0      	push	{r4, r5, r7, lr}
 80167c6:	b09a      	sub	sp, #104	@ 0x68
 80167c8:	af02      	add	r7, sp, #8
 80167ca:	60f8      	str	r0, [r7, #12]
 80167cc:	60b9      	str	r1, [r7, #8]
 80167ce:	607a      	str	r2, [r7, #4]
 80167d0:	603b      	str	r3, [r7, #0]
    q15_t m;
    uint32_t index;
    uint32_t fftShift=0;
 80167d2:	2300      	movs	r3, #0
 80167d4:	653b      	str	r3, [r7, #80]	@ 0x50
    q63_t result;
    arm_matrix_instance_q15 pDctMat;
    uint32_t i;
    uint32_t coefsPos;
    uint32_t filterLimit;
    q15_t *pTmp2=(q15_t*)pTmp;
 80167d6:	683b      	ldr	r3, [r7, #0]
 80167d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

    arm_status status = ARM_MATH_SUCCESS;
 80167da:	2300      	movs	r3, #0
 80167dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    
    // q15
    arm_absmax_q15(pSrc,S->fftLen,&m,&index);
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	6959      	ldr	r1, [r3, #20]
 80167e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80167e8:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 80167ec:	68b8      	ldr	r0, [r7, #8]
 80167ee:	f7fc f914 	bl	8012a1a <arm_absmax_q15>

    if ((m != 0) && (m != 0x7FFF))
 80167f2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d025      	beq.n	8016846 <arm_mfcc_q15+0x82>
 80167fa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80167fe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016802:	4293      	cmp	r3, r2
 8016804:	d01f      	beq.n	8016846 <arm_mfcc_q15+0x82>
    {
       q15_t quotient;
       int16_t shift;

       status = arm_divide_q15(0x7FFF,m,&quotient,&shift);
 8016806:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	@ 0x2e
 801680a:	f107 0314 	add.w	r3, r7, #20
 801680e:	f107 0216 	add.w	r2, r7, #22
 8016812:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8016816:	f7fb f80a 	bl	801182e <arm_divide_q15>
 801681a:	4603      	mov	r3, r0
 801681c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
       if (status != ARM_MATH_SUCCESS)
 8016820:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8016824:	2b00      	cmp	r3, #0
 8016826:	d002      	beq.n	801682e <arm_mfcc_q15+0x6a>
       {
          return(status);
 8016828:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801682c:	e0e8      	b.n	8016a00 <arm_mfcc_q15+0x23c>
       }
 
       arm_scale_q15(pSrc,quotient,shift,pSrc,S->fftLen);
 801682e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8016832:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8016836:	b25a      	sxtb	r2, r3
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	695b      	ldr	r3, [r3, #20]
 801683c:	9300      	str	r3, [sp, #0]
 801683e:	68bb      	ldr	r3, [r7, #8]
 8016840:	68b8      	ldr	r0, [r7, #8]
 8016842:	f7fa fe31 	bl	80114a8 <arm_scale_q15>
    }


    // q15
    arm_mult_q15(pSrc,S->windowCoefs, pSrc, S->fftLen);
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	6899      	ldr	r1, [r3, #8]
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	695b      	ldr	r3, [r3, #20]
 801684e:	68ba      	ldr	r2, [r7, #8]
 8016850:	68b8      	ldr	r0, [r7, #8]
 8016852:	f7fa fdd1 	bl	80113f8 <arm_mult_q15>


    /* Compute spectrum magnitude 
    */
    fftShift = 31 - __CLZ(S->fftLen);
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	695b      	ldr	r3, [r3, #20]
 801685a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 801685c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801685e:	2b00      	cmp	r3, #0
 8016860:	d101      	bne.n	8016866 <arm_mfcc_q15+0xa2>
    return 32U;
 8016862:	2320      	movs	r3, #32
 8016864:	e003      	b.n	801686e <arm_mfcc_q15+0xaa>
  return __builtin_clz(value);
 8016866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016868:	fab3 f383 	clz	r3, r3
 801686c:	b2db      	uxtb	r3, r3
 801686e:	f1c3 031f 	rsb	r3, r3, #31
 8016872:	653b      	str	r3, [r7, #80]	@ 0x50
      pTmp2[2*i+1] = 0;
    }
    arm_cfft_q15(&(S->cfft),pTmp2,0,1);
#else
    /* Default RFFT based implementation */
    arm_rfft_q15(&(S->rfft),pSrc,pTmp2);
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	3320      	adds	r3, #32
 8016878:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801687a:	68b9      	ldr	r1, [r7, #8]
 801687c:	4618      	mov	r0, r3
 801687e:	f000 fae4 	bl	8016e4a <arm_rfft_q15>
#endif
#endif
    filterLimit = 1 + (S->fftLen >> 1);
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	695b      	ldr	r3, [r3, #20]
 8016886:	085b      	lsrs	r3, r3, #1
 8016888:	3301      	adds	r3, #1
 801688a:	64bb      	str	r3, [r7, #72]	@ 0x48


    // q15 - fftShift
    arm_cmplx_mag_q15(pTmp2,pSrc,filterLimit);
 801688c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801688e:	68b9      	ldr	r1, [r7, #8]
 8016890:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8016892:	f7fa ff92 	bl	80117ba <arm_cmplx_mag_q15>
    // q14 - fftShift

    /* Apply MEL filters */
    coefsPos = 0;
 8016896:	2300      	movs	r3, #0
 8016898:	65bb      	str	r3, [r7, #88]	@ 0x58
    for(i=0; i<S->nbMelFilters; i++)
 801689a:	2300      	movs	r3, #0
 801689c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801689e:	e046      	b.n	801692e <arm_mfcc_q15+0x16a>
    {
      arm_dot_prod_q15(pSrc+S->filterPos[i],
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	68da      	ldr	r2, [r3, #12]
 80168a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80168a6:	009b      	lsls	r3, r3, #2
 80168a8:	4413      	add	r3, r2
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	005b      	lsls	r3, r3, #1
 80168ae:	68ba      	ldr	r2, [r7, #8]
 80168b0:	18d0      	adds	r0, r2, r3
        &(S->filterCoefs[coefsPos]),
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	685a      	ldr	r2, [r3, #4]
 80168b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80168b8:	005b      	lsls	r3, r3, #1
 80168ba:	18d1      	adds	r1, r2, r3
        S->filterLengths[i],
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	691a      	ldr	r2, [r3, #16]
 80168c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80168c2:	009b      	lsls	r3, r3, #2
 80168c4:	4413      	add	r3, r2
      arm_dot_prod_q15(pSrc+S->filterPos[i],
 80168c6:	681a      	ldr	r2, [r3, #0]
 80168c8:	f107 0320 	add.w	r3, r7, #32
 80168cc:	f7fa fd5a 	bl	8011384 <arm_dot_prod_q15>
        &result);

      coefsPos += S->filterLengths[i];
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	691a      	ldr	r2, [r3, #16]
 80168d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80168d6:	009b      	lsls	r3, r3, #2
 80168d8:	4413      	add	r3, r2
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80168de:	4413      	add	r3, r2
 80168e0:	65bb      	str	r3, [r7, #88]	@ 0x58

      // q34.29 - fftShift
      result += MICRO_Q15;
 80168e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80168e6:	f240 2119 	movw	r1, #537	@ 0x219
 80168ea:	1854      	adds	r4, r2, r1
 80168ec:	f143 0500 	adc.w	r5, r3, #0
 80168f0:	e9c7 4508 	strd	r4, r5, [r7, #32]
      result >>= SHIFT_MELFILTER_SATURATION_Q15;
 80168f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80168f8:	f04f 0200 	mov.w	r2, #0
 80168fc:	f04f 0300 	mov.w	r3, #0
 8016900:	0a82      	lsrs	r2, r0, #10
 8016902:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8016906:	128b      	asrs	r3, r1, #10
 8016908:	e9c7 2308 	strd	r2, r3, [r7, #32]
      // q34.29 - fftShift - satShift
      pTmp[i] = __SSAT(result,31) ;
 801690c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016910:	4613      	mov	r3, r2
 8016912:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016916:	f303 031e 	ssat	r3, #31, r3
 801691a:	637b      	str	r3, [r7, #52]	@ 0x34
 801691c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801691e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016920:	009b      	lsls	r3, r3, #2
 8016922:	6839      	ldr	r1, [r7, #0]
 8016924:	440b      	add	r3, r1
 8016926:	601a      	str	r2, [r3, #0]
    for(i=0; i<S->nbMelFilters; i++)
 8016928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801692a:	3301      	adds	r3, #1
 801692c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	699b      	ldr	r3, [r3, #24]
 8016932:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8016934:	429a      	cmp	r2, r3
 8016936:	d3b3      	bcc.n	80168a0 <arm_mfcc_q15+0xdc>

    }

    if ((m != 0) && (m != 0x7FFF))
 8016938:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 801693c:	2b00      	cmp	r3, #0
 801693e:	d010      	beq.n	8016962 <arm_mfcc_q15+0x19e>
 8016940:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8016944:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016948:	4293      	cmp	r3, r2
 801694a:	d00a      	beq.n	8016962 <arm_mfcc_q15+0x19e>
    {
      arm_scale_q31(pTmp,m<<16,0,pTmp,S->nbMelFilters);
 801694c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8016950:	0419      	lsls	r1, r3, #16
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	699b      	ldr	r3, [r3, #24]
 8016956:	9300      	str	r3, [sp, #0]
 8016958:	683b      	ldr	r3, [r7, #0]
 801695a:	2200      	movs	r2, #0
 801695c:	6838      	ldr	r0, [r7, #0]
 801695e:	f7fa fdda 	bl	8011516 <arm_scale_q31>
    }
   
    // q34.29 - fftShift - satShift
    /* Compute the log */
    arm_vlog_q31(pTmp,pTmp,S->nbMelFilters);
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	699b      	ldr	r3, [r3, #24]
 8016966:	461a      	mov	r2, r3
 8016968:	6839      	ldr	r1, [r7, #0]
 801696a:	6838      	ldr	r0, [r7, #0]
 801696c:	f7fb faee 	bl	8011f4c <arm_vlog_q31>


    // q5.26
   
    logExponent = fftShift + 2 + SHIFT_MELFILTER_SATURATION_Q15;
 8016970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016972:	330c      	adds	r3, #12
 8016974:	647b      	str	r3, [r7, #68]	@ 0x44
    logExponent = logExponent * LOG2TOLOG_Q15;
 8016976:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016978:	4a23      	ldr	r2, [pc, #140]	@ (8016a08 <arm_mfcc_q15+0x244>)
 801697a:	fb02 f303 	mul.w	r3, r2, r3
 801697e:	647b      	str	r3, [r7, #68]	@ 0x44


    // q8.26
    arm_offset_q31(pTmp,logExponent,pTmp,S->nbMelFilters);
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	699b      	ldr	r3, [r3, #24]
 8016984:	683a      	ldr	r2, [r7, #0]
 8016986:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016988:	6838      	ldr	r0, [r7, #0]
 801698a:	f7fa fd65 	bl	8011458 <arm_offset_q31>
    arm_shift_q31(pTmp,-19,pTmp,S->nbMelFilters);
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	699b      	ldr	r3, [r3, #24]
 8016992:	683a      	ldr	r2, [r7, #0]
 8016994:	f06f 0112 	mvn.w	r1, #18
 8016998:	6838      	ldr	r0, [r7, #0]
 801699a:	f7fa fea5 	bl	80116e8 <arm_shift_q31>
    for(i=0; i<S->nbMelFilters; i++)
 801699e:	2300      	movs	r3, #0
 80169a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80169a2:	e014      	b.n	80169ce <arm_mfcc_q15+0x20a>
    { 
      pSrc[i] = __SSAT((q15_t)pTmp[i],16);
 80169a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80169a6:	009b      	lsls	r3, r3, #2
 80169a8:	683a      	ldr	r2, [r7, #0]
 80169aa:	4413      	add	r3, r2
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	b21b      	sxth	r3, r3
 80169b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80169b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80169b4:	f303 030f 	ssat	r3, #16, r3
 80169b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80169ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80169bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80169be:	005b      	lsls	r3, r3, #1
 80169c0:	68ba      	ldr	r2, [r7, #8]
 80169c2:	4413      	add	r3, r2
 80169c4:	b20a      	sxth	r2, r1
 80169c6:	801a      	strh	r2, [r3, #0]
    for(i=0; i<S->nbMelFilters; i++)
 80169c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80169ca:	3301      	adds	r3, #1
 80169cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	699b      	ldr	r3, [r3, #24]
 80169d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80169d4:	429a      	cmp	r2, r3
 80169d6:	d3e5      	bcc.n	80169a4 <arm_mfcc_q15+0x1e0>
    }

    // q8.7

    pDctMat.numRows=S->nbDctOutputs;
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	69db      	ldr	r3, [r3, #28]
 80169dc:	b29b      	uxth	r3, r3
 80169de:	833b      	strh	r3, [r7, #24]
    pDctMat.numCols=S->nbMelFilters;
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	699b      	ldr	r3, [r3, #24]
 80169e4:	b29b      	uxth	r3, r3
 80169e6:	837b      	strh	r3, [r7, #26]
    pDctMat.pData=(q15_t*)S->dctCoefs;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	61fb      	str	r3, [r7, #28]

    arm_mat_vec_mult_q15(&pDctMat, pSrc, pDst);
 80169ee:	f107 0318 	add.w	r3, r7, #24
 80169f2:	687a      	ldr	r2, [r7, #4]
 80169f4:	68b9      	ldr	r1, [r7, #8]
 80169f6:	4618      	mov	r0, r3
 80169f8:	f7fb fac9 	bl	8011f8e <arm_mat_vec_mult_q15>

    return(status);
 80169fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8016a00:	4618      	mov	r0, r3
 8016a02:	3760      	adds	r7, #96	@ 0x60
 8016a04:	46bd      	mov	sp, r7
 8016a06:	bdb0      	pop	{r4, r5, r7, pc}
 8016a08:	02c5c860 	.word	0x02c5c860

08016a0c <arm_rfft_init_8192_q15>:
  @par
                   This function also initializes Twiddle factor table.

 */

RFFTINIT_Q15(8192,4096,1)
 8016a0c:	b480      	push	{r7}
 8016a0e:	b085      	sub	sp, #20
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	60f8      	str	r0, [r7, #12]
 8016a14:	60b9      	str	r1, [r7, #8]
 8016a16:	607a      	str	r2, [r7, #4]
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8016a1e:	601a      	str	r2, [r3, #0]
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	4a0d      	ldr	r2, [pc, #52]	@ (8016a58 <arm_rfft_init_8192_q15+0x4c>)
 8016a24:	60da      	str	r2, [r3, #12]
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	4a0c      	ldr	r2, [pc, #48]	@ (8016a5c <arm_rfft_init_8192_q15+0x50>)
 8016a2a:	611a      	str	r2, [r3, #16]
 8016a2c:	68bb      	ldr	r3, [r7, #8]
 8016a2e:	b2da      	uxtb	r2, r3
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	711a      	strb	r2, [r3, #4]
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	b2da      	uxtb	r2, r3
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	715a      	strb	r2, [r3, #5]
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	2201      	movs	r2, #1
 8016a40:	609a      	str	r2, [r3, #8]
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	4a06      	ldr	r2, [pc, #24]	@ (8016a60 <arm_rfft_init_8192_q15+0x54>)
 8016a46:	615a      	str	r2, [r3, #20]
 8016a48:	2300      	movs	r3, #0
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	3714      	adds	r7, #20
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a54:	4770      	bx	lr
 8016a56:	bf00      	nop
 8016a58:	0802ba34 	.word	0x0802ba34
 8016a5c:	0802fa34 	.word	0x0802fa34
 8016a60:	08033b34 	.word	0x08033b34

08016a64 <arm_rfft_init_4096_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(4096,2048,2)
 8016a64:	b480      	push	{r7}
 8016a66:	b085      	sub	sp, #20
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	60f8      	str	r0, [r7, #12]
 8016a6c:	60b9      	str	r1, [r7, #8]
 8016a6e:	607a      	str	r2, [r7, #4]
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8016a76:	601a      	str	r2, [r3, #0]
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8016ab0 <arm_rfft_init_4096_q15+0x4c>)
 8016a7c:	60da      	str	r2, [r3, #12]
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	4a0c      	ldr	r2, [pc, #48]	@ (8016ab4 <arm_rfft_init_4096_q15+0x50>)
 8016a82:	611a      	str	r2, [r3, #16]
 8016a84:	68bb      	ldr	r3, [r7, #8]
 8016a86:	b2da      	uxtb	r2, r3
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	711a      	strb	r2, [r3, #4]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	b2da      	uxtb	r2, r3
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	715a      	strb	r2, [r3, #5]
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	2202      	movs	r2, #2
 8016a98:	609a      	str	r2, [r3, #8]
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	4a06      	ldr	r2, [pc, #24]	@ (8016ab8 <arm_rfft_init_4096_q15+0x54>)
 8016a9e:	615a      	str	r2, [r3, #20]
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	3714      	adds	r7, #20
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aac:	4770      	bx	lr
 8016aae:	bf00      	nop
 8016ab0:	0802ba34 	.word	0x0802ba34
 8016ab4:	0802fa34 	.word	0x0802fa34
 8016ab8:	08033b24 	.word	0x08033b24

08016abc <arm_rfft_init_2048_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(2048,1024,4)
 8016abc:	b480      	push	{r7}
 8016abe:	b085      	sub	sp, #20
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	60f8      	str	r0, [r7, #12]
 8016ac4:	60b9      	str	r1, [r7, #8]
 8016ac6:	607a      	str	r2, [r7, #4]
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016ace:	601a      	str	r2, [r3, #0]
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8016b08 <arm_rfft_init_2048_q15+0x4c>)
 8016ad4:	60da      	str	r2, [r3, #12]
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8016b0c <arm_rfft_init_2048_q15+0x50>)
 8016ada:	611a      	str	r2, [r3, #16]
 8016adc:	68bb      	ldr	r3, [r7, #8]
 8016ade:	b2da      	uxtb	r2, r3
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	711a      	strb	r2, [r3, #4]
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	b2da      	uxtb	r2, r3
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	715a      	strb	r2, [r3, #5]
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	2204      	movs	r2, #4
 8016af0:	609a      	str	r2, [r3, #8]
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	4a06      	ldr	r2, [pc, #24]	@ (8016b10 <arm_rfft_init_2048_q15+0x54>)
 8016af6:	615a      	str	r2, [r3, #20]
 8016af8:	2300      	movs	r3, #0
 8016afa:	4618      	mov	r0, r3
 8016afc:	3714      	adds	r7, #20
 8016afe:	46bd      	mov	sp, r7
 8016b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b04:	4770      	bx	lr
 8016b06:	bf00      	nop
 8016b08:	0802ba34 	.word	0x0802ba34
 8016b0c:	0802fa34 	.word	0x0802fa34
 8016b10:	08033b14 	.word	0x08033b14

08016b14 <arm_rfft_init_1024_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(1024,512,8)
 8016b14:	b480      	push	{r7}
 8016b16:	b085      	sub	sp, #20
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	60f8      	str	r0, [r7, #12]
 8016b1c:	60b9      	str	r1, [r7, #8]
 8016b1e:	607a      	str	r2, [r7, #4]
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8016b26:	601a      	str	r2, [r3, #0]
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	4a0d      	ldr	r2, [pc, #52]	@ (8016b60 <arm_rfft_init_1024_q15+0x4c>)
 8016b2c:	60da      	str	r2, [r3, #12]
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	4a0c      	ldr	r2, [pc, #48]	@ (8016b64 <arm_rfft_init_1024_q15+0x50>)
 8016b32:	611a      	str	r2, [r3, #16]
 8016b34:	68bb      	ldr	r3, [r7, #8]
 8016b36:	b2da      	uxtb	r2, r3
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	711a      	strb	r2, [r3, #4]
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	b2da      	uxtb	r2, r3
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	715a      	strb	r2, [r3, #5]
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	2208      	movs	r2, #8
 8016b48:	609a      	str	r2, [r3, #8]
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	4a06      	ldr	r2, [pc, #24]	@ (8016b68 <arm_rfft_init_1024_q15+0x54>)
 8016b4e:	615a      	str	r2, [r3, #20]
 8016b50:	2300      	movs	r3, #0
 8016b52:	4618      	mov	r0, r3
 8016b54:	3714      	adds	r7, #20
 8016b56:	46bd      	mov	sp, r7
 8016b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b5c:	4770      	bx	lr
 8016b5e:	bf00      	nop
 8016b60:	0802ba34 	.word	0x0802ba34
 8016b64:	0802fa34 	.word	0x0802fa34
 8016b68:	08033b04 	.word	0x08033b04

08016b6c <arm_rfft_init_512_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(512,256,16)
 8016b6c:	b480      	push	{r7}
 8016b6e:	b085      	sub	sp, #20
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	60f8      	str	r0, [r7, #12]
 8016b74:	60b9      	str	r1, [r7, #8]
 8016b76:	607a      	str	r2, [r7, #4]
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016b7e:	601a      	str	r2, [r3, #0]
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	4a0d      	ldr	r2, [pc, #52]	@ (8016bb8 <arm_rfft_init_512_q15+0x4c>)
 8016b84:	60da      	str	r2, [r3, #12]
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	4a0c      	ldr	r2, [pc, #48]	@ (8016bbc <arm_rfft_init_512_q15+0x50>)
 8016b8a:	611a      	str	r2, [r3, #16]
 8016b8c:	68bb      	ldr	r3, [r7, #8]
 8016b8e:	b2da      	uxtb	r2, r3
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	711a      	strb	r2, [r3, #4]
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	b2da      	uxtb	r2, r3
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	715a      	strb	r2, [r3, #5]
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	2210      	movs	r2, #16
 8016ba0:	609a      	str	r2, [r3, #8]
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	4a06      	ldr	r2, [pc, #24]	@ (8016bc0 <arm_rfft_init_512_q15+0x54>)
 8016ba6:	615a      	str	r2, [r3, #20]
 8016ba8:	2300      	movs	r3, #0
 8016baa:	4618      	mov	r0, r3
 8016bac:	3714      	adds	r7, #20
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb4:	4770      	bx	lr
 8016bb6:	bf00      	nop
 8016bb8:	0802ba34 	.word	0x0802ba34
 8016bbc:	0802fa34 	.word	0x0802fa34
 8016bc0:	08033af4 	.word	0x08033af4

08016bc4 <arm_rfft_init_256_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(256,128,32)
 8016bc4:	b480      	push	{r7}
 8016bc6:	b085      	sub	sp, #20
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	60f8      	str	r0, [r7, #12]
 8016bcc:	60b9      	str	r1, [r7, #8]
 8016bce:	607a      	str	r2, [r7, #4]
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016bd6:	601a      	str	r2, [r3, #0]
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	4a0d      	ldr	r2, [pc, #52]	@ (8016c10 <arm_rfft_init_256_q15+0x4c>)
 8016bdc:	60da      	str	r2, [r3, #12]
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	4a0c      	ldr	r2, [pc, #48]	@ (8016c14 <arm_rfft_init_256_q15+0x50>)
 8016be2:	611a      	str	r2, [r3, #16]
 8016be4:	68bb      	ldr	r3, [r7, #8]
 8016be6:	b2da      	uxtb	r2, r3
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	711a      	strb	r2, [r3, #4]
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	b2da      	uxtb	r2, r3
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	715a      	strb	r2, [r3, #5]
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	2220      	movs	r2, #32
 8016bf8:	609a      	str	r2, [r3, #8]
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	4a06      	ldr	r2, [pc, #24]	@ (8016c18 <arm_rfft_init_256_q15+0x54>)
 8016bfe:	615a      	str	r2, [r3, #20]
 8016c00:	2300      	movs	r3, #0
 8016c02:	4618      	mov	r0, r3
 8016c04:	3714      	adds	r7, #20
 8016c06:	46bd      	mov	sp, r7
 8016c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c0c:	4770      	bx	lr
 8016c0e:	bf00      	nop
 8016c10:	0802ba34 	.word	0x0802ba34
 8016c14:	0802fa34 	.word	0x0802fa34
 8016c18:	08033ae4 	.word	0x08033ae4

08016c1c <arm_rfft_init_128_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(128,64,64)
 8016c1c:	b480      	push	{r7}
 8016c1e:	b085      	sub	sp, #20
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	60f8      	str	r0, [r7, #12]
 8016c24:	60b9      	str	r1, [r7, #8]
 8016c26:	607a      	str	r2, [r7, #4]
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	2280      	movs	r2, #128	@ 0x80
 8016c2c:	601a      	str	r2, [r3, #0]
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	4a0c      	ldr	r2, [pc, #48]	@ (8016c64 <arm_rfft_init_128_q15+0x48>)
 8016c32:	60da      	str	r2, [r3, #12]
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	4a0c      	ldr	r2, [pc, #48]	@ (8016c68 <arm_rfft_init_128_q15+0x4c>)
 8016c38:	611a      	str	r2, [r3, #16]
 8016c3a:	68bb      	ldr	r3, [r7, #8]
 8016c3c:	b2da      	uxtb	r2, r3
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	711a      	strb	r2, [r3, #4]
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	b2da      	uxtb	r2, r3
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	715a      	strb	r2, [r3, #5]
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	2240      	movs	r2, #64	@ 0x40
 8016c4e:	609a      	str	r2, [r3, #8]
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	4a06      	ldr	r2, [pc, #24]	@ (8016c6c <arm_rfft_init_128_q15+0x50>)
 8016c54:	615a      	str	r2, [r3, #20]
 8016c56:	2300      	movs	r3, #0
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3714      	adds	r7, #20
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c62:	4770      	bx	lr
 8016c64:	0802ba34 	.word	0x0802ba34
 8016c68:	0802fa34 	.word	0x0802fa34
 8016c6c:	08033ad4 	.word	0x08033ad4

08016c70 <arm_rfft_init_64_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(64,32,128)
 8016c70:	b480      	push	{r7}
 8016c72:	b085      	sub	sp, #20
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	60f8      	str	r0, [r7, #12]
 8016c78:	60b9      	str	r1, [r7, #8]
 8016c7a:	607a      	str	r2, [r7, #4]
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	2240      	movs	r2, #64	@ 0x40
 8016c80:	601a      	str	r2, [r3, #0]
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	4a0c      	ldr	r2, [pc, #48]	@ (8016cb8 <arm_rfft_init_64_q15+0x48>)
 8016c86:	60da      	str	r2, [r3, #12]
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8016cbc <arm_rfft_init_64_q15+0x4c>)
 8016c8c:	611a      	str	r2, [r3, #16]
 8016c8e:	68bb      	ldr	r3, [r7, #8]
 8016c90:	b2da      	uxtb	r2, r3
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	711a      	strb	r2, [r3, #4]
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	b2da      	uxtb	r2, r3
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	715a      	strb	r2, [r3, #5]
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	2280      	movs	r2, #128	@ 0x80
 8016ca2:	609a      	str	r2, [r3, #8]
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	4a06      	ldr	r2, [pc, #24]	@ (8016cc0 <arm_rfft_init_64_q15+0x50>)
 8016ca8:	615a      	str	r2, [r3, #20]
 8016caa:	2300      	movs	r3, #0
 8016cac:	4618      	mov	r0, r3
 8016cae:	3714      	adds	r7, #20
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb6:	4770      	bx	lr
 8016cb8:	0802ba34 	.word	0x0802ba34
 8016cbc:	0802fa34 	.word	0x0802fa34
 8016cc0:	08033ac4 	.word	0x08033ac4

08016cc4 <arm_rfft_init_32_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(32,16,256)
 8016cc4:	b480      	push	{r7}
 8016cc6:	b085      	sub	sp, #20
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	60f8      	str	r0, [r7, #12]
 8016ccc:	60b9      	str	r1, [r7, #8]
 8016cce:	607a      	str	r2, [r7, #4]
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	2220      	movs	r2, #32
 8016cd4:	601a      	str	r2, [r3, #0]
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8016d10 <arm_rfft_init_32_q15+0x4c>)
 8016cda:	60da      	str	r2, [r3, #12]
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	4a0d      	ldr	r2, [pc, #52]	@ (8016d14 <arm_rfft_init_32_q15+0x50>)
 8016ce0:	611a      	str	r2, [r3, #16]
 8016ce2:	68bb      	ldr	r3, [r7, #8]
 8016ce4:	b2da      	uxtb	r2, r3
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	711a      	strb	r2, [r3, #4]
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	b2da      	uxtb	r2, r3
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	715a      	strb	r2, [r3, #5]
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016cf8:	609a      	str	r2, [r3, #8]
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	4a06      	ldr	r2, [pc, #24]	@ (8016d18 <arm_rfft_init_32_q15+0x54>)
 8016cfe:	615a      	str	r2, [r3, #20]
 8016d00:	2300      	movs	r3, #0
 8016d02:	4618      	mov	r0, r3
 8016d04:	3714      	adds	r7, #20
 8016d06:	46bd      	mov	sp, r7
 8016d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0c:	4770      	bx	lr
 8016d0e:	bf00      	nop
 8016d10:	0802ba34 	.word	0x0802ba34
 8016d14:	0802fa34 	.word	0x0802fa34
 8016d18:	08033ab4 	.word	0x08033ab4

08016d1c <arm_rfft_init_q15>:
ARM_DSP_ATTRIBUTE arm_status arm_rfft_init_q15(
    arm_rfft_instance_q15 * S,
    uint32_t fftLenReal,
    uint32_t ifftFlagR,
    uint32_t bitReverseFlag)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b086      	sub	sp, #24
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	60f8      	str	r0, [r7, #12]
 8016d24:	60b9      	str	r1, [r7, #8]
 8016d26:	607a      	str	r2, [r7, #4]
 8016d28:	603b      	str	r3, [r7, #0]
     /*  Initialise the default arm status */
    arm_status status = ARM_MATH_ARGUMENT_ERROR;
 8016d2a:	23ff      	movs	r3, #255	@ 0xff
 8016d2c:	75fb      	strb	r3, [r7, #23]

    /*  Initialization of coef modifier depending on the FFT length */
    switch (fftLenReal)
 8016d2e:	68bb      	ldr	r3, [r7, #8]
 8016d30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016d34:	d038      	beq.n	8016da8 <arm_rfft_init_q15+0x8c>
 8016d36:	68bb      	ldr	r3, [r7, #8]
 8016d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016d3c:	d87c      	bhi.n	8016e38 <arm_rfft_init_q15+0x11c>
 8016d3e:	68bb      	ldr	r3, [r7, #8]
 8016d40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016d44:	d038      	beq.n	8016db8 <arm_rfft_init_q15+0x9c>
 8016d46:	68bb      	ldr	r3, [r7, #8]
 8016d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016d4c:	d874      	bhi.n	8016e38 <arm_rfft_init_q15+0x11c>
 8016d4e:	68bb      	ldr	r3, [r7, #8]
 8016d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016d54:	d038      	beq.n	8016dc8 <arm_rfft_init_q15+0xac>
 8016d56:	68bb      	ldr	r3, [r7, #8]
 8016d58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016d5c:	d86c      	bhi.n	8016e38 <arm_rfft_init_q15+0x11c>
 8016d5e:	68bb      	ldr	r3, [r7, #8]
 8016d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016d64:	d038      	beq.n	8016dd8 <arm_rfft_init_q15+0xbc>
 8016d66:	68bb      	ldr	r3, [r7, #8]
 8016d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016d6c:	d864      	bhi.n	8016e38 <arm_rfft_init_q15+0x11c>
 8016d6e:	68bb      	ldr	r3, [r7, #8]
 8016d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016d74:	d038      	beq.n	8016de8 <arm_rfft_init_q15+0xcc>
 8016d76:	68bb      	ldr	r3, [r7, #8]
 8016d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016d7c:	d85c      	bhi.n	8016e38 <arm_rfft_init_q15+0x11c>
 8016d7e:	68bb      	ldr	r3, [r7, #8]
 8016d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016d84:	d038      	beq.n	8016df8 <arm_rfft_init_q15+0xdc>
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016d8c:	d854      	bhi.n	8016e38 <arm_rfft_init_q15+0x11c>
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	2b80      	cmp	r3, #128	@ 0x80
 8016d92:	d039      	beq.n	8016e08 <arm_rfft_init_q15+0xec>
 8016d94:	68bb      	ldr	r3, [r7, #8]
 8016d96:	2b80      	cmp	r3, #128	@ 0x80
 8016d98:	d84e      	bhi.n	8016e38 <arm_rfft_init_q15+0x11c>
 8016d9a:	68bb      	ldr	r3, [r7, #8]
 8016d9c:	2b20      	cmp	r3, #32
 8016d9e:	d043      	beq.n	8016e28 <arm_rfft_init_q15+0x10c>
 8016da0:	68bb      	ldr	r3, [r7, #8]
 8016da2:	2b40      	cmp	r3, #64	@ 0x40
 8016da4:	d038      	beq.n	8016e18 <arm_rfft_init_q15+0xfc>
 8016da6:	e047      	b.n	8016e38 <arm_rfft_init_q15+0x11c>
    {
    case 8192U:
        status = arm_rfft_init_8192_q15( S,ifftFlagR,bitReverseFlag );
 8016da8:	683a      	ldr	r2, [r7, #0]
 8016daa:	6879      	ldr	r1, [r7, #4]
 8016dac:	68f8      	ldr	r0, [r7, #12]
 8016dae:	f7ff fe2d 	bl	8016a0c <arm_rfft_init_8192_q15>
 8016db2:	4603      	mov	r3, r0
 8016db4:	75fb      	strb	r3, [r7, #23]
        break;
 8016db6:	e042      	b.n	8016e3e <arm_rfft_init_q15+0x122>
    case 4096U:
        status = arm_rfft_init_4096_q15( S,ifftFlagR,bitReverseFlag );
 8016db8:	683a      	ldr	r2, [r7, #0]
 8016dba:	6879      	ldr	r1, [r7, #4]
 8016dbc:	68f8      	ldr	r0, [r7, #12]
 8016dbe:	f7ff fe51 	bl	8016a64 <arm_rfft_init_4096_q15>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	75fb      	strb	r3, [r7, #23]
        break;
 8016dc6:	e03a      	b.n	8016e3e <arm_rfft_init_q15+0x122>
    case 2048U:
        status = arm_rfft_init_2048_q15( S,ifftFlagR,bitReverseFlag );
 8016dc8:	683a      	ldr	r2, [r7, #0]
 8016dca:	6879      	ldr	r1, [r7, #4]
 8016dcc:	68f8      	ldr	r0, [r7, #12]
 8016dce:	f7ff fe75 	bl	8016abc <arm_rfft_init_2048_q15>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	75fb      	strb	r3, [r7, #23]
        break;
 8016dd6:	e032      	b.n	8016e3e <arm_rfft_init_q15+0x122>
    case 1024U:
        status = arm_rfft_init_1024_q15( S,ifftFlagR,bitReverseFlag );
 8016dd8:	683a      	ldr	r2, [r7, #0]
 8016dda:	6879      	ldr	r1, [r7, #4]
 8016ddc:	68f8      	ldr	r0, [r7, #12]
 8016dde:	f7ff fe99 	bl	8016b14 <arm_rfft_init_1024_q15>
 8016de2:	4603      	mov	r3, r0
 8016de4:	75fb      	strb	r3, [r7, #23]
        break;
 8016de6:	e02a      	b.n	8016e3e <arm_rfft_init_q15+0x122>
    case 512U:
        status = arm_rfft_init_512_q15( S,ifftFlagR,bitReverseFlag );
 8016de8:	683a      	ldr	r2, [r7, #0]
 8016dea:	6879      	ldr	r1, [r7, #4]
 8016dec:	68f8      	ldr	r0, [r7, #12]
 8016dee:	f7ff febd 	bl	8016b6c <arm_rfft_init_512_q15>
 8016df2:	4603      	mov	r3, r0
 8016df4:	75fb      	strb	r3, [r7, #23]
        break;
 8016df6:	e022      	b.n	8016e3e <arm_rfft_init_q15+0x122>
    case 256U:
        status = arm_rfft_init_256_q15( S,ifftFlagR,bitReverseFlag );
 8016df8:	683a      	ldr	r2, [r7, #0]
 8016dfa:	6879      	ldr	r1, [r7, #4]
 8016dfc:	68f8      	ldr	r0, [r7, #12]
 8016dfe:	f7ff fee1 	bl	8016bc4 <arm_rfft_init_256_q15>
 8016e02:	4603      	mov	r3, r0
 8016e04:	75fb      	strb	r3, [r7, #23]
        break;
 8016e06:	e01a      	b.n	8016e3e <arm_rfft_init_q15+0x122>
    case 128U:
        status = arm_rfft_init_128_q15( S,ifftFlagR,bitReverseFlag );
 8016e08:	683a      	ldr	r2, [r7, #0]
 8016e0a:	6879      	ldr	r1, [r7, #4]
 8016e0c:	68f8      	ldr	r0, [r7, #12]
 8016e0e:	f7ff ff05 	bl	8016c1c <arm_rfft_init_128_q15>
 8016e12:	4603      	mov	r3, r0
 8016e14:	75fb      	strb	r3, [r7, #23]
        break;
 8016e16:	e012      	b.n	8016e3e <arm_rfft_init_q15+0x122>
    case 64U:
        status = arm_rfft_init_64_q15( S,ifftFlagR,bitReverseFlag );
 8016e18:	683a      	ldr	r2, [r7, #0]
 8016e1a:	6879      	ldr	r1, [r7, #4]
 8016e1c:	68f8      	ldr	r0, [r7, #12]
 8016e1e:	f7ff ff27 	bl	8016c70 <arm_rfft_init_64_q15>
 8016e22:	4603      	mov	r3, r0
 8016e24:	75fb      	strb	r3, [r7, #23]
        break;
 8016e26:	e00a      	b.n	8016e3e <arm_rfft_init_q15+0x122>
   case 32U:
        status = arm_rfft_init_32_q15( S,ifftFlagR,bitReverseFlag );
 8016e28:	683a      	ldr	r2, [r7, #0]
 8016e2a:	6879      	ldr	r1, [r7, #4]
 8016e2c:	68f8      	ldr	r0, [r7, #12]
 8016e2e:	f7ff ff49 	bl	8016cc4 <arm_rfft_init_32_q15>
 8016e32:	4603      	mov	r3, r0
 8016e34:	75fb      	strb	r3, [r7, #23]
        break;
 8016e36:	e002      	b.n	8016e3e <arm_rfft_init_q15+0x122>
    default:
        /*  Reporting argument error if rfftSize is not valid value */
        status = ARM_MATH_ARGUMENT_ERROR;
 8016e38:	23ff      	movs	r3, #255	@ 0xff
 8016e3a:	75fb      	strb	r3, [r7, #23]
        break;
 8016e3c:	bf00      	nop
    }

    /* return the status of RFFT Init function */
    return (status);
 8016e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	3718      	adds	r7, #24
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}

08016e4a <arm_rfft_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_rfft_q15(
  const arm_rfft_instance_q15 * S,
        q15_t * pSrc,
        q15_t * pDst)
{
 8016e4a:	b580      	push	{r7, lr}
 8016e4c:	b088      	sub	sp, #32
 8016e4e:	af02      	add	r7, sp, #8
 8016e50:	60f8      	str	r0, [r7, #12]
 8016e52:	60b9      	str	r1, [r7, #8]
 8016e54:	607a      	str	r2, [r7, #4]
#if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  const arm_cfft_instance_q15 *S_CFFT = &(S->cfftInst);
#else
  const arm_cfft_instance_q15 *S_CFFT = S->pCfft;
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	695b      	ldr	r3, [r3, #20]
 8016e5a:	617b      	str	r3, [r7, #20]
#endif
        uint32_t L2 = S->fftLenReal >> 1U;
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	085b      	lsrs	r3, r3, #1
 8016e62:	613b      	str	r3, [r7, #16]

  /* Calculation of RIFFT of input */
  if (S->ifftFlagR == 1U)
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	791b      	ldrb	r3, [r3, #4]
 8016e68:	2b01      	cmp	r3, #1
 8016e6a:	d11d      	bne.n	8016ea8 <arm_rfft_q15+0x5e>
  {
     /*  Real IFFT core process */
     arm_split_rifft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	68da      	ldr	r2, [r3, #12]
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	6919      	ldr	r1, [r3, #16]
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	689b      	ldr	r3, [r3, #8]
 8016e78:	9301      	str	r3, [sp, #4]
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	9300      	str	r3, [sp, #0]
 8016e7e:	460b      	mov	r3, r1
 8016e80:	6939      	ldr	r1, [r7, #16]
 8016e82:	68b8      	ldr	r0, [r7, #8]
 8016e84:	f000 f951 	bl	801712a <arm_split_rifft_q15>

     /* Complex IFFT process */
     arm_cfft_q15 (S_CFFT, pDst, S->ifftFlagR, S->bitReverseFlagR);
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	791a      	ldrb	r2, [r3, #4]
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	795b      	ldrb	r3, [r3, #5]
 8016e90:	6879      	ldr	r1, [r7, #4]
 8016e92:	6978      	ldr	r0, [r7, #20]
 8016e94:	f7fb ff4e 	bl	8012d34 <arm_cfft_q15>

     arm_shift_q15(pDst, 1, pDst, S->fftLenReal);
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	687a      	ldr	r2, [r7, #4]
 8016e9e:	2101      	movs	r1, #1
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f7fa fbd7 	bl	8011654 <arm_shift_q15>

     /*  Real FFT core process */
     arm_split_rfft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
  }

}
 8016ea6:	e015      	b.n	8016ed4 <arm_rfft_q15+0x8a>
     arm_cfft_q15 (S_CFFT, pSrc, S->ifftFlagR, S->bitReverseFlagR);
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	791a      	ldrb	r2, [r3, #4]
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	795b      	ldrb	r3, [r3, #5]
 8016eb0:	68b9      	ldr	r1, [r7, #8]
 8016eb2:	6978      	ldr	r0, [r7, #20]
 8016eb4:	f7fb ff3e 	bl	8012d34 <arm_cfft_q15>
     arm_split_rfft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	68da      	ldr	r2, [r3, #12]
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	6919      	ldr	r1, [r3, #16]
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	689b      	ldr	r3, [r3, #8]
 8016ec4:	9301      	str	r3, [sp, #4]
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	9300      	str	r3, [sp, #0]
 8016eca:	460b      	mov	r3, r1
 8016ecc:	6939      	ldr	r1, [r7, #16]
 8016ece:	68b8      	ldr	r0, [r7, #8]
 8016ed0:	f000 f804 	bl	8016edc <arm_split_rfft_q15>
}
 8016ed4:	bf00      	nop
 8016ed6:	3718      	adds	r7, #24
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd80      	pop	{r7, pc}

08016edc <arm_split_rfft_q15>:
        uint32_t fftLen,
  const q15_t * pATable,
  const q15_t * pBTable,
        q15_t * pDst,
        uint32_t modifier)
{       
 8016edc:	b480      	push	{r7}
 8016ede:	b0ad      	sub	sp, #180	@ 0xb4
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	60f8      	str	r0, [r7, #12]
 8016ee4:	60b9      	str	r1, [r7, #8]
 8016ee6:	607a      	str	r2, [r7, #4]
 8016ee8:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_DSP)
        q15_t *pD1, *pD2;
#endif

  /* Init coefficient pointers */
  pCoefA = &pATable[modifier * 2];
 8016eea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016eee:	009b      	lsls	r3, r3, #2
 8016ef0:	687a      	ldr	r2, [r7, #4]
 8016ef2:	4413      	add	r3, r2
 8016ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pCoefB = &pBTable[modifier * 2];
 8016ef8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016efc:	009b      	lsls	r3, r3, #2
 8016efe:	683a      	ldr	r2, [r7, #0]
 8016f00:	4413      	add	r3, r2
 8016f02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  pSrc1 = &pSrc[2];
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	3304      	adds	r3, #4
 8016f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  pSrc2 = &pSrc[(2U * fftLen) - 2U];
 8016f0c:	68ba      	ldr	r2, [r7, #8]
 8016f0e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8016f12:	4413      	add	r3, r2
 8016f14:	009b      	lsls	r3, r3, #2
 8016f16:	68fa      	ldr	r2, [r7, #12]
 8016f18:	4413      	add	r3, r2
 8016f1a:	637b      	str	r3, [r7, #52]	@ 0x34

#if defined (ARM_MATH_DSP)

    i = 1U;
 8016f1c:	2301      	movs	r3, #1
 8016f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pD1 = pDst + 2;
 8016f22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016f26:	3304      	adds	r3, #4
 8016f28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    pD2 = pDst + (4U * fftLen) - 2;
 8016f2c:	68bb      	ldr	r3, [r7, #8]
 8016f2e:	00db      	lsls	r3, r3, #3
 8016f30:	3b04      	subs	r3, #4
 8016f32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8016f36:	4413      	add	r3, r2
 8016f38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    for (i = fftLen - 1; i > 0; i--)
 8016f3c:	68bb      	ldr	r3, [r7, #8]
 8016f3e:	3b01      	subs	r3, #1
 8016f40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016f44:	e0ba      	b.n	80170bc <arm_split_rfft_q15+0x1e0>
         */


#ifndef ARM_MATH_BIG_ENDIAN
        /* pSrc[2 * i] * pATable[2 * i] - pSrc[2 * i + 1] * pATable[2 * i + 1] */
        outR = __SMUSD(read_q15x2 (pSrc1), read_q15x2((q15_t *) pCoefA));
 8016f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  memcpy (&val, pQ15, 4);
 8016f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  return (val);
 8016f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f52:	461a      	mov	r2, r3
 8016f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016f58:	643b      	str	r3, [r7, #64]	@ 0x40
  memcpy (&val, pQ15, 4);
 8016f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return (val);
 8016f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f62:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8016f64:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016f6a:	fb43 f302 	smusd	r3, r3, r2
 8016f6e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8016f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016f72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        /* -(pSrc[2 * i + 1] * pATable[2 * i + 1] - pSrc[2 * i] * pATable[2 * i]) */
        outR = -(__SMUSD(read_q15x2 (pSrc1), read_q15x2((q15_t *) pCoefA)));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* pSrc[2 * n - 2 * i] * pBTable[2 * i] + pSrc[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
        outR = __SMLAD(read_q15x2 (pSrc2), read_q15x2((q15_t *) pCoefB), outR) >> 16U;
 8016f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f78:	653b      	str	r3, [r7, #80]	@ 0x50
  memcpy (&val, pQ15, 4);
 8016f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (val);
 8016f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f82:	4619      	mov	r1, r3
 8016f84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016f88:	657b      	str	r3, [r7, #84]	@ 0x54
  memcpy (&val, pQ15, 4);
 8016f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8016f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f92:	461a      	mov	r2, r3
 8016f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016f98:	6679      	str	r1, [r7, #100]	@ 0x64
 8016f9a:	663a      	str	r2, [r7, #96]	@ 0x60
 8016f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016f9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016fa0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8016fa2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8016fa4:	fb23 1302 	smlad	r3, r3, r2, r1
 8016fa8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8016faa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016fac:	0c1b      	lsrs	r3, r3, #16
 8016fae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        /* pIn[2 * n - 2 * i] * pBTable[2 * i + 1] - pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
#ifndef ARM_MATH_BIG_ENDIAN
        outI = __SMUSDX(read_q15x2_da (&pSrc2), read_q15x2((q15_t *) pCoefB));
 8016fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016fb4:	3b04      	subs	r3, #4
 8016fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8016fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016fba:	3304      	adds	r3, #4
 8016fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
  memcpy (&val, pQ15, 4);
 8016fbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	623b      	str	r3, [r7, #32]
  return (val);
 8016fc4:	6a3b      	ldr	r3, [r7, #32]
 8016fc6:	461a      	mov	r2, r3
 8016fc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016fcc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  memcpy (&val, pQ15, 4);
 8016fce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	61fb      	str	r3, [r7, #28]
  return (val);
 8016fd4:	69fb      	ldr	r3, [r7, #28]
 8016fd6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8016fd8:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016fda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016fdc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016fde:	fb43 f312 	smusdx	r3, r3, r2
 8016fe2:	673b      	str	r3, [r7, #112]	@ 0x70
  return(result);
 8016fe4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016fe6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
#else
        outI = __SMUSDX(read_q15x2 ((q15_t *) pCoefB), read_q15x2_da (&pSrc2));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* (pIn[2 * i + 1] * pATable[2 * i] + pIn[2 * i] * pATable[2 * i + 1] */
        outI = __SMLADX(read_q15x2_ia (&pSrc1), read_q15x2 ((q15_t *) pCoefA), outI);
 8016fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016fec:	3304      	adds	r3, #4
 8016fee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ff2:	3b04      	subs	r3, #4
 8016ff4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memcpy (&val, pQ15, 4);
 8016ff6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	61bb      	str	r3, [r7, #24]
  return (val);
 8016ffc:	69bb      	ldr	r3, [r7, #24]
 8016ffe:	4619      	mov	r1, r3
 8017000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8017004:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  memcpy (&val, pQ15, 4);
 8017008:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	617b      	str	r3, [r7, #20]
  return (val);
 8017010:	697b      	ldr	r3, [r7, #20]
 8017012:	461a      	mov	r2, r3
 8017014:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017018:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 801701c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8017020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017024:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017028:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801702c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8017030:	fb23 1312 	smladx	r3, r3, r2, r1
 8017034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8017038:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801703c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

        /* write output */
        *pD1++ = (q15_t) outR;
 8017040:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017044:	1c9a      	adds	r2, r3, #2
 8017046:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 801704a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801704e:	b212      	sxth	r2, r2
 8017050:	801a      	strh	r2, [r3, #0]
        *pD1++ = outI >> 16U;
 8017052:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017056:	1419      	asrs	r1, r3, #16
 8017058:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801705c:	1c9a      	adds	r2, r3, #2
 801705e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8017062:	b20a      	sxth	r2, r1
 8017064:	801a      	strh	r2, [r3, #0]

        /* write complex conjugate output */
        pD2[0] = (q15_t) outR;
 8017066:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801706a:	b21a      	sxth	r2, r3
 801706c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017070:	801a      	strh	r2, [r3, #0]
        pD2[1] = -(outI >> 16U);
 8017072:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017076:	141b      	asrs	r3, r3, #16
 8017078:	b29b      	uxth	r3, r3
 801707a:	425b      	negs	r3, r3
 801707c:	b29a      	uxth	r2, r3
 801707e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017082:	3302      	adds	r3, #2
 8017084:	b212      	sxth	r2, r2
 8017086:	801a      	strh	r2, [r3, #0]
        pD2 -= 2;
 8017088:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801708c:	3b04      	subs	r3, #4
 801708e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

        /* update coefficient pointer */
        pCoefB = pCoefB + (2U * modifier);
 8017092:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8017096:	009b      	lsls	r3, r3, #2
 8017098:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801709c:	4413      	add	r3, r2
 801709e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        pCoefA = pCoefA + (2U * modifier);
 80170a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80170a6:	009b      	lsls	r3, r3, #2
 80170a8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80170ac:	4413      	add	r3, r2
 80170ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    for (i = fftLen - 1; i > 0; i--)
 80170b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80170b6:	3b01      	subs	r3, #1
 80170b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80170bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	f47f af40 	bne.w	8016f46 <arm_split_rfft_q15+0x6a>
    }

    pDst[2U * fftLen]      = (pSrc[0] - pSrc[1]) >> 1U;
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170cc:	461a      	mov	r2, r3
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	3302      	adds	r3, #2
 80170d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170d6:	1ad3      	subs	r3, r2, r3
 80170d8:	1059      	asrs	r1, r3, #1
 80170da:	68bb      	ldr	r3, [r7, #8]
 80170dc:	009b      	lsls	r3, r3, #2
 80170de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80170e2:	4413      	add	r3, r2
 80170e4:	b20a      	sxth	r2, r1
 80170e6:	801a      	strh	r2, [r3, #0]
    pDst[2U * fftLen + 1U] = 0;
 80170e8:	68bb      	ldr	r3, [r7, #8]
 80170ea:	009b      	lsls	r3, r3, #2
 80170ec:	3302      	adds	r3, #2
 80170ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80170f2:	4413      	add	r3, r2
 80170f4:	2200      	movs	r2, #0
 80170f6:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1U;
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170fe:	461a      	mov	r2, r3
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	3302      	adds	r3, #2
 8017104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017108:	4413      	add	r3, r2
 801710a:	105b      	asrs	r3, r3, #1
 801710c:	b21a      	sxth	r2, r3
 801710e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017112:	801a      	strh	r2, [r3, #0]
    pDst[1] = 0;
 8017114:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017118:	3302      	adds	r3, #2
 801711a:	2200      	movs	r2, #0
 801711c:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
    pDst[1] = 0;

#endif /* #if defined (ARM_MATH_DSP) */
}
 801711e:	bf00      	nop
 8017120:	37b4      	adds	r7, #180	@ 0xb4
 8017122:	46bd      	mov	sp, r7
 8017124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017128:	4770      	bx	lr

0801712a <arm_split_rifft_q15>:
        uint32_t fftLen,
  const q15_t * pATable,
  const q15_t * pBTable,
        q15_t * pDst,
        uint32_t modifier)
{
 801712a:	b480      	push	{r7}
 801712c:	b0af      	sub	sp, #188	@ 0xbc
 801712e:	af00      	add	r7, sp, #0
 8017130:	60f8      	str	r0, [r7, #12]
 8017132:	60b9      	str	r1, [r7, #8]
 8017134:	607a      	str	r2, [r7, #4]
 8017136:	603b      	str	r3, [r7, #0]
        uint32_t i;                                    /* Loop Counter */
        q31_t outR, outI;                              /* Temporary variables for output */
  const q15_t *pCoefA, *pCoefB;                        /* Temporary pointers for twiddle factors */
        q15_t *pSrc1, *pSrc2;
        q15_t *pDst1 = &pDst[0];
 8017138:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801713c:	63bb      	str	r3, [r7, #56]	@ 0x38

  pCoefA = &pATable[0];
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pCoefB = &pBTable[0];
 8017144:	683b      	ldr	r3, [r7, #0]
 8017146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  pSrc1 = &pSrc[0];
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	643b      	str	r3, [r7, #64]	@ 0x40
  pSrc2 = &pSrc[2 * fftLen];
 801714e:	68bb      	ldr	r3, [r7, #8]
 8017150:	009b      	lsls	r3, r3, #2
 8017152:	68fa      	ldr	r2, [r7, #12]
 8017154:	4413      	add	r3, r2
 8017156:	63fb      	str	r3, [r7, #60]	@ 0x3c

  i = fftLen;
 8017158:	68bb      	ldr	r3, [r7, #8]
 801715a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  while (i > 0U)
 801715e:	e0b5      	b.n	80172cc <arm_split_rifft_q15+0x1a2>

#if defined (ARM_MATH_DSP)

#ifndef ARM_MATH_BIG_ENDIAN
      /* pIn[2 * n - 2 * i] * pBTable[2 * i] - pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
      outR = __SMUSD(read_q15x2(pSrc2), read_q15x2((q15_t *) pCoefB));
 8017160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017162:	647b      	str	r3, [r7, #68]	@ 0x44
  memcpy (&val, pQ15, 4);
 8017164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	637b      	str	r3, [r7, #52]	@ 0x34
  return (val);
 801716a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801716c:	461a      	mov	r2, r3
 801716e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017172:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 8017174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	633b      	str	r3, [r7, #48]	@ 0x30
  return (val);
 801717a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801717c:	657a      	str	r2, [r7, #84]	@ 0x54
 801717e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8017180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017182:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8017184:	fb43 f302 	smusd	r3, r3, r2
 8017188:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 801718a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801718c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      /* -(-pIn[2 * n - 2 * i] * pBTable[2 * i] + pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1])) */
      outR = -(__SMUSD(read_q15x2(pSrc2), read_q15x2((q15_t *) pCoefB)));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      /* pIn[2 * i] * pATable[2 * i] + pIn[2 * i + 1] * pATable[2 * i + 1] + pIn[2 * n - 2 * i] * pBTable[2 * i] */
      outR = __SMLAD(read_q15x2(pSrc1), read_q15x2 ((q15_t *) pCoefA), outR) >> 16U;
 8017190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017192:	65bb      	str	r3, [r7, #88]	@ 0x58
  memcpy (&val, pQ15, 4);
 8017194:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return (val);
 801719a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801719c:	4619      	mov	r1, r3
 801719e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80171a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  memcpy (&val, pQ15, 4);
 80171a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (val);
 80171aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80171ac:	461a      	mov	r2, r3
 80171ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80171b2:	66f9      	str	r1, [r7, #108]	@ 0x6c
 80171b4:	66ba      	str	r2, [r7, #104]	@ 0x68
 80171b6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80171b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80171ba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80171bc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80171be:	fb23 1302 	smlad	r3, r3, r2, r1
 80171c2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80171c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80171c6:	0c1b      	lsrs	r3, r3, #16
 80171c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      /* -pIn[2 * n - 2 * i] * pBTable[2 * i + 1] + pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
      outI = __SMUADX(read_q15x2_da (&pSrc2), read_q15x2((q15_t *) pCoefB));
 80171cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171ce:	3b04      	subs	r3, #4
 80171d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80171d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171d4:	3304      	adds	r3, #4
 80171d6:	673b      	str	r3, [r7, #112]	@ 0x70
  memcpy (&val, pQ15, 4);
 80171d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 80171de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171e0:	461a      	mov	r2, r3
 80171e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80171e6:	677b      	str	r3, [r7, #116]	@ 0x74
  memcpy (&val, pQ15, 4);
 80171e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	623b      	str	r3, [r7, #32]
  return (val);
 80171ee:	6a3b      	ldr	r3, [r7, #32]
 80171f0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80171f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80171f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80171fa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80171fc:	fb23 f312 	smuadx	r3, r3, r2
 8017200:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 8017202:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017204:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8017208:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801720c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  memcpy (&val, pQ15, 4);
 8017210:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	61fb      	str	r3, [r7, #28]
  return (val);
 8017218:	69fb      	ldr	r3, [r7, #28]

      /* pIn[2 * i + 1] * pATable[2 * i] - pIn[2 * i] * pATable[2 * i + 1] */
#ifndef ARM_MATH_BIG_ENDIAN
      outI = __SMLSDX(read_q15x2 ((q15_t *) pCoefA), read_q15x2_ia (&pSrc1), -outI);
 801721a:	4619      	mov	r1, r3
 801721c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801721e:	3304      	adds	r3, #4
 8017220:	643b      	str	r3, [r7, #64]	@ 0x40
 8017222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017224:	3b04      	subs	r3, #4
 8017226:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  memcpy (&val, pQ15, 4);
 801722a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	61bb      	str	r3, [r7, #24]
  return (val);
 8017232:	69bb      	ldr	r3, [r7, #24]
 8017234:	461a      	mov	r2, r3
 8017236:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801723a:	425b      	negs	r3, r3
 801723c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8017240:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8017244:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  __ASM volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017248:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801724c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8017250:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8017254:	fb43 1312 	smlsdx	r3, r3, r2, r1
 8017258:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  return(result);
 801725c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017260:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      outI = __SMLSDX(read_q15x2_ia (&pSrc1), read_q15x2 ((q15_t *) pCoefA), -outI);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      /* write output */
#ifndef ARM_MATH_BIG_ENDIAN
      write_q15x2_ia (&pDst1, __PKHBT(outR, (outI >> 16U), 16));
 8017264:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8017268:	b29a      	uxth	r2, r3
 801726a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801726e:	141b      	asrs	r3, r3, #16
 8017270:	041b      	lsls	r3, r3, #16
 8017272:	4313      	orrs	r3, r2
 8017274:	461a      	mov	r2, r3
 8017276:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801727a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801727e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
  q31_t val = value;
 8017282:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017286:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8017288:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	697a      	ldr	r2, [r7, #20]
 8017290:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8017292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	1d1a      	adds	r2, r3, #4
 801729a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801729e:	601a      	str	r2, [r3, #0]
}
 80172a0:	bf00      	nop
      *pDst1++ = (q15_t) (outI >> 16);

#endif /* #if defined (ARM_MATH_DSP) */

      /* update coefficient pointer */
      pCoefB = pCoefB + (2 * modifier);
 80172a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80172a6:	009b      	lsls	r3, r3, #2
 80172a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80172ac:	4413      	add	r3, r2
 80172ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      pCoefA = pCoefA + (2 * modifier);
 80172b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80172b6:	009b      	lsls	r3, r3, #2
 80172b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80172bc:	4413      	add	r3, r2
 80172be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

      i--;
 80172c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80172c6:	3b01      	subs	r3, #1
 80172c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  while (i > 0U)
 80172cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	f47f af45 	bne.w	8017160 <arm_split_rifft_q15+0x36>
  }

}
 80172d6:	bf00      	nop
 80172d8:	bf00      	nop
 80172da:	37bc      	adds	r7, #188	@ 0xbc
 80172dc:	46bd      	mov	sp, r7
 80172de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e2:	4770      	bx	lr

080172e4 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_fifo_t _cdcd_fifo_cfg;

static bool _prep_out_transaction(uint8_t itf) {
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b086      	sub	sp, #24
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	4603      	mov	r3, r0
 80172ec:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 80172ee:	2300      	movs	r3, #0
 80172f0:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80172f2:	79fb      	ldrb	r3, [r7, #7]
 80172f4:	22a8      	movs	r2, #168	@ 0xa8
 80172f6:	fb02 f303 	mul.w	r3, r2, r3
 80172fa:	4a30      	ldr	r2, [pc, #192]	@ (80173bc <_prep_out_transaction+0xd8>)
 80172fc:	4413      	add	r3, r2
 80172fe:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8017300:	79fb      	ldrb	r3, [r7, #7]
 8017302:	01db      	lsls	r3, r3, #7
 8017304:	4a2e      	ldr	r2, [pc, #184]	@ (80173c0 <_prep_out_transaction+0xdc>)
 8017306:	4413      	add	r3, r2
 8017308:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 801730a:	f001 faa1 	bl	8018850 <tud_mounted>
 801730e:	4603      	mov	r3, r0
 8017310:	2b00      	cmp	r3, #0
 8017312:	d009      	beq.n	8017328 <_prep_out_transaction+0x44>
 8017314:	f001 faae 	bl	8018874 <tud_suspended>
 8017318:	4603      	mov	r3, r0
 801731a:	f083 0301 	eor.w	r3, r3, #1
 801731e:	b2db      	uxtb	r3, r3
 8017320:	2b00      	cmp	r3, #0
 8017322:	d001      	beq.n	8017328 <_prep_out_transaction+0x44>
 8017324:	2301      	movs	r3, #1
 8017326:	e000      	b.n	801732a <_prep_out_transaction+0x46>
 8017328:	2300      	movs	r3, #0
 801732a:	f003 0301 	and.w	r3, r3, #1
 801732e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8017330:	f083 0301 	eor.w	r3, r3, #1
 8017334:	b2db      	uxtb	r3, r3
 8017336:	2b00      	cmp	r3, #0
 8017338:	d103      	bne.n	8017342 <_prep_out_transaction+0x5e>
 801733a:	693b      	ldr	r3, [r7, #16]
 801733c:	78db      	ldrb	r3, [r3, #3]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d101      	bne.n	8017346 <_prep_out_transaction+0x62>
 8017342:	2300      	movs	r3, #0
 8017344:	e035      	b.n	80173b2 <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8017346:	693b      	ldr	r3, [r7, #16]
 8017348:	3310      	adds	r3, #16
 801734a:	4618      	mov	r0, r3
 801734c:	f001 f913 	bl	8018576 <tu_fifo_remaining>
 8017350:	4603      	mov	r3, r0
 8017352:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8017354:	897b      	ldrh	r3, [r7, #10]
 8017356:	2b3f      	cmp	r3, #63	@ 0x3f
 8017358:	d801      	bhi.n	801735e <_prep_out_transaction+0x7a>
 801735a:	2300      	movs	r3, #0
 801735c:	e029      	b.n	80173b2 <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 801735e:	693b      	ldr	r3, [r7, #16]
 8017360:	78da      	ldrb	r2, [r3, #3]
 8017362:	7dfb      	ldrb	r3, [r7, #23]
 8017364:	4611      	mov	r1, r2
 8017366:	4618      	mov	r0, r3
 8017368:	f002 fd28 	bl	8019dbc <usbd_edpt_claim>
 801736c:	4603      	mov	r3, r0
 801736e:	f083 0301 	eor.w	r3, r3, #1
 8017372:	b2db      	uxtb	r3, r3
 8017374:	2b00      	cmp	r3, #0
 8017376:	d001      	beq.n	801737c <_prep_out_transaction+0x98>
 8017378:	2300      	movs	r3, #0
 801737a:	e01a      	b.n	80173b2 <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 801737c:	693b      	ldr	r3, [r7, #16]
 801737e:	3310      	adds	r3, #16
 8017380:	4618      	mov	r0, r3
 8017382:	f001 f8f8 	bl	8018576 <tu_fifo_remaining>
 8017386:	4603      	mov	r3, r0
 8017388:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 801738a:	897b      	ldrh	r3, [r7, #10]
 801738c:	2b3f      	cmp	r3, #63	@ 0x3f
 801738e:	d908      	bls.n	80173a2 <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8017390:	693b      	ldr	r3, [r7, #16]
 8017392:	78d9      	ldrb	r1, [r3, #3]
 8017394:	68fa      	ldr	r2, [r7, #12]
 8017396:	7df8      	ldrb	r0, [r7, #23]
 8017398:	2340      	movs	r3, #64	@ 0x40
 801739a:	f002 fd63 	bl	8019e64 <usbd_edpt_xfer>
 801739e:	4603      	mov	r3, r0
 80173a0:	e007      	b.n	80173b2 <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 80173a2:	693b      	ldr	r3, [r7, #16]
 80173a4:	78da      	ldrb	r2, [r3, #3]
 80173a6:	7dfb      	ldrb	r3, [r7, #23]
 80173a8:	4611      	mov	r1, r2
 80173aa:	4618      	mov	r0, r3
 80173ac:	f002 fd30 	bl	8019e10 <usbd_edpt_release>
    return false;
 80173b0:	2300      	movs	r3, #0
  }
}
 80173b2:	4618      	mov	r0, r3
 80173b4:	3718      	adds	r7, #24
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bd80      	pop	{r7, pc}
 80173ba:	bf00      	nop
 80173bc:	24008768 	.word	0x24008768
 80173c0:	240088b8 	.word	0x240088b8

080173c4 <tud_cdc_n_write_flush>:
  }

  return ret;
}

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b086      	sub	sp, #24
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	4603      	mov	r3, r0
 80173cc:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80173ce:	79fb      	ldrb	r3, [r7, #7]
 80173d0:	22a8      	movs	r2, #168	@ 0xa8
 80173d2:	fb02 f303 	mul.w	r3, r2, r3
 80173d6:	4a39      	ldr	r2, [pc, #228]	@ (80174bc <tud_cdc_n_write_flush+0xf8>)
 80173d8:	4413      	add	r3, r2
 80173da:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 80173dc:	79fb      	ldrb	r3, [r7, #7]
 80173de:	01db      	lsls	r3, r3, #7
 80173e0:	4a37      	ldr	r2, [pc, #220]	@ (80174c0 <tud_cdc_n_write_flush+0xfc>)
 80173e2:	4413      	add	r3, r2
 80173e4:	613b      	str	r3, [r7, #16]
 80173e6:	f001 fa33 	bl	8018850 <tud_mounted>
 80173ea:	4603      	mov	r3, r0
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d009      	beq.n	8017404 <tud_cdc_n_write_flush+0x40>
 80173f0:	f001 fa40 	bl	8018874 <tud_suspended>
 80173f4:	4603      	mov	r3, r0
 80173f6:	f083 0301 	eor.w	r3, r3, #1
 80173fa:	b2db      	uxtb	r3, r3
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d001      	beq.n	8017404 <tud_cdc_n_write_flush+0x40>
 8017400:	2301      	movs	r3, #1
 8017402:	e000      	b.n	8017406 <tud_cdc_n_write_flush+0x42>
 8017404:	2300      	movs	r3, #0
 8017406:	f003 0301 	and.w	r3, r3, #1
 801740a:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 801740c:	f083 0301 	eor.w	r3, r3, #1
 8017410:	b2db      	uxtb	r3, r3
 8017412:	2b00      	cmp	r3, #0
 8017414:	d001      	beq.n	801741a <tud_cdc_n_write_flush+0x56>
 8017416:	2300      	movs	r3, #0
 8017418:	e04c      	b.n	80174b4 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 801741a:	697b      	ldr	r3, [r7, #20]
 801741c:	331c      	adds	r3, #28
 801741e:	4618      	mov	r0, r3
 8017420:	f001 f834 	bl	801848c <tu_fifo_count>
 8017424:	4603      	mov	r3, r0
 8017426:	2b00      	cmp	r3, #0
 8017428:	d101      	bne.n	801742e <tud_cdc_n_write_flush+0x6a>
    return 0;
 801742a:	2300      	movs	r3, #0
 801742c:	e042      	b.n	80174b4 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 801742e:	2300      	movs	r3, #0
 8017430:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8017432:	697b      	ldr	r3, [r7, #20]
 8017434:	789a      	ldrb	r2, [r3, #2]
 8017436:	7bfb      	ldrb	r3, [r7, #15]
 8017438:	4611      	mov	r1, r2
 801743a:	4618      	mov	r0, r3
 801743c:	f002 fcbe 	bl	8019dbc <usbd_edpt_claim>
 8017440:	4603      	mov	r3, r0
 8017442:	f083 0301 	eor.w	r3, r3, #1
 8017446:	b2db      	uxtb	r3, r3
 8017448:	2b00      	cmp	r3, #0
 801744a:	d001      	beq.n	8017450 <tud_cdc_n_write_flush+0x8c>
 801744c:	2300      	movs	r3, #0
 801744e:	e031      	b.n	80174b4 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8017450:	697b      	ldr	r3, [r7, #20]
 8017452:	f103 001c 	add.w	r0, r3, #28
 8017456:	693b      	ldr	r3, [r7, #16]
 8017458:	3340      	adds	r3, #64	@ 0x40
 801745a:	2240      	movs	r2, #64	@ 0x40
 801745c:	4619      	mov	r1, r3
 801745e:	f001 f8e6 	bl	801862e <tu_fifo_read_n>
 8017462:	4603      	mov	r3, r0
 8017464:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8017466:	89bb      	ldrh	r3, [r7, #12]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d01b      	beq.n	80174a4 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 801746c:	697b      	ldr	r3, [r7, #20]
 801746e:	7899      	ldrb	r1, [r3, #2]
 8017470:	693b      	ldr	r3, [r7, #16]
 8017472:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8017476:	89bb      	ldrh	r3, [r7, #12]
 8017478:	7bf8      	ldrb	r0, [r7, #15]
 801747a:	f002 fcf3 	bl	8019e64 <usbd_edpt_xfer>
 801747e:	4603      	mov	r3, r0
 8017480:	f083 0301 	eor.w	r3, r3, #1
 8017484:	b2db      	uxtb	r3, r3
 8017486:	2b00      	cmp	r3, #0
 8017488:	d00a      	beq.n	80174a0 <tud_cdc_n_write_flush+0xdc>
 801748a:	4b0e      	ldr	r3, [pc, #56]	@ (80174c4 <tud_cdc_n_write_flush+0x100>)
 801748c:	60bb      	str	r3, [r7, #8]
 801748e:	68bb      	ldr	r3, [r7, #8]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	f003 0301 	and.w	r3, r3, #1
 8017496:	2b00      	cmp	r3, #0
 8017498:	d000      	beq.n	801749c <tud_cdc_n_write_flush+0xd8>
 801749a:	be00      	bkpt	0x0000
 801749c:	2300      	movs	r3, #0
 801749e:	e009      	b.n	80174b4 <tud_cdc_n_write_flush+0xf0>
    return count;
 80174a0:	89bb      	ldrh	r3, [r7, #12]
 80174a2:	e007      	b.n	80174b4 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 80174a4:	697b      	ldr	r3, [r7, #20]
 80174a6:	789a      	ldrb	r2, [r3, #2]
 80174a8:	7bfb      	ldrb	r3, [r7, #15]
 80174aa:	4611      	mov	r1, r2
 80174ac:	4618      	mov	r0, r3
 80174ae:	f002 fcaf 	bl	8019e10 <usbd_edpt_release>
    return 0;
 80174b2:	2300      	movs	r3, #0
  }
}
 80174b4:	4618      	mov	r0, r3
 80174b6:	3718      	adds	r7, #24
 80174b8:	46bd      	mov	sp, r7
 80174ba:	bd80      	pop	{r7, pc}
 80174bc:	24008768 	.word	0x24008768
 80174c0:	240088b8 	.word	0x240088b8
 80174c4:	e000edf0 	.word	0xe000edf0

080174c8 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b084      	sub	sp, #16
 80174cc:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80174ce:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 80174d2:	2100      	movs	r1, #0
 80174d4:	4822      	ldr	r0, [pc, #136]	@ (8017560 <cdcd_init+0x98>)
 80174d6:	f008 f80d 	bl	801f4f4 <memset>
  tu_memclr(&_cdcd_fifo_cfg, sizeof(_cdcd_fifo_cfg));
 80174da:	2201      	movs	r2, #1
 80174dc:	2100      	movs	r1, #0
 80174de:	4821      	ldr	r0, [pc, #132]	@ (8017564 <cdcd_init+0x9c>)
 80174e0:	f008 f808 	bl	801f4f4 <memset>

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80174e4:	2300      	movs	r3, #0
 80174e6:	71fb      	strb	r3, [r7, #7]
 80174e8:	e031      	b.n	801754e <cdcd_init+0x86>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80174ea:	79fb      	ldrb	r3, [r7, #7]
 80174ec:	22a8      	movs	r2, #168	@ 0xa8
 80174ee:	fb02 f303 	mul.w	r3, r2, r3
 80174f2:	4a1b      	ldr	r2, [pc, #108]	@ (8017560 <cdcd_init+0x98>)
 80174f4:	4413      	add	r3, r2
 80174f6:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 80174f8:	683b      	ldr	r3, [r7, #0]
 80174fa:	22ff      	movs	r2, #255	@ 0xff
 80174fc:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 80174fe:	683b      	ldr	r3, [r7, #0]
 8017500:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8017504:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	2200      	movs	r2, #0
 801750a:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 801750c:	683b      	ldr	r3, [r7, #0]
 801750e:	2200      	movs	r2, #0
 8017510:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8017512:	683b      	ldr	r3, [r7, #0]
 8017514:	2208      	movs	r2, #8
 8017516:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8017518:	683b      	ldr	r3, [r7, #0]
 801751a:	f103 0010 	add.w	r0, r3, #16
 801751e:	683b      	ldr	r3, [r7, #0]
 8017520:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8017524:	2300      	movs	r3, #0
 8017526:	9300      	str	r3, [sp, #0]
 8017528:	2301      	movs	r3, #1
 801752a:	2240      	movs	r2, #64	@ 0x40
 801752c:	f000 fb1c 	bl	8017b68 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8017530:	683b      	ldr	r3, [r7, #0]
 8017532:	f103 001c 	add.w	r0, r3, #28
 8017536:	683b      	ldr	r3, [r7, #0]
 8017538:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 801753c:	2301      	movs	r3, #1
 801753e:	9300      	str	r3, [sp, #0]
 8017540:	2301      	movs	r3, #1
 8017542:	2240      	movs	r2, #64	@ 0x40
 8017544:	f000 fb10 	bl	8017b68 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8017548:	79fb      	ldrb	r3, [r7, #7]
 801754a:	3301      	adds	r3, #1
 801754c:	71fb      	strb	r3, [r7, #7]
 801754e:	79fb      	ldrb	r3, [r7, #7]
 8017550:	2b01      	cmp	r3, #1
 8017552:	d9ca      	bls.n	80174ea <cdcd_init+0x22>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8017554:	bf00      	nop
 8017556:	bf00      	nop
 8017558:	3708      	adds	r7, #8
 801755a:	46bd      	mov	sp, r7
 801755c:	bd80      	pop	{r7, pc}
 801755e:	bf00      	nop
 8017560:	24008768 	.word	0x24008768
 8017564:	240089b8 	.word	0x240089b8

08017568 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8017568:	b480      	push	{r7}
 801756a:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 801756c:	2301      	movs	r3, #1
}
 801756e:	4618      	mov	r0, r3
 8017570:	46bd      	mov	sp, r7
 8017572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017576:	4770      	bx	lr

08017578 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8017578:	b580      	push	{r7, lr}
 801757a:	b084      	sub	sp, #16
 801757c:	af00      	add	r7, sp, #0
 801757e:	4603      	mov	r3, r0
 8017580:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8017582:	2300      	movs	r3, #0
 8017584:	73fb      	strb	r3, [r7, #15]
 8017586:	e02c      	b.n	80175e2 <cdcd_reset+0x6a>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8017588:	7bfb      	ldrb	r3, [r7, #15]
 801758a:	22a8      	movs	r2, #168	@ 0xa8
 801758c:	fb02 f303 	mul.w	r3, r2, r3
 8017590:	4a18      	ldr	r2, [pc, #96]	@ (80175f4 <cdcd_reset+0x7c>)
 8017592:	4413      	add	r3, r2
 8017594:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8017596:	2205      	movs	r2, #5
 8017598:	2100      	movs	r1, #0
 801759a:	68b8      	ldr	r0, [r7, #8]
 801759c:	f007 ffaa 	bl	801f4f4 <memset>
    if (!_cdcd_fifo_cfg.rx_persistent) {
 80175a0:	4b15      	ldr	r3, [pc, #84]	@ (80175f8 <cdcd_reset+0x80>)
 80175a2:	781b      	ldrb	r3, [r3, #0]
 80175a4:	f003 0301 	and.w	r3, r3, #1
 80175a8:	b2db      	uxtb	r3, r3
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d104      	bne.n	80175b8 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 80175ae:	68bb      	ldr	r3, [r7, #8]
 80175b0:	3310      	adds	r3, #16
 80175b2:	4618      	mov	r0, r3
 80175b4:	f001 f8c6 	bl	8018744 <tu_fifo_clear>
    }
    if (!_cdcd_fifo_cfg.tx_persistent) {
 80175b8:	4b0f      	ldr	r3, [pc, #60]	@ (80175f8 <cdcd_reset+0x80>)
 80175ba:	781b      	ldrb	r3, [r3, #0]
 80175bc:	f003 0302 	and.w	r3, r3, #2
 80175c0:	b2db      	uxtb	r3, r3
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d104      	bne.n	80175d0 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 80175c6:	68bb      	ldr	r3, [r7, #8]
 80175c8:	331c      	adds	r3, #28
 80175ca:	4618      	mov	r0, r3
 80175cc:	f001 f8ba 	bl	8018744 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 80175d0:	68bb      	ldr	r3, [r7, #8]
 80175d2:	331c      	adds	r3, #28
 80175d4:	2101      	movs	r1, #1
 80175d6:	4618      	mov	r0, r3
 80175d8:	f001 f8c5 	bl	8018766 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80175dc:	7bfb      	ldrb	r3, [r7, #15]
 80175de:	3301      	adds	r3, #1
 80175e0:	73fb      	strb	r3, [r7, #15]
 80175e2:	7bfb      	ldrb	r3, [r7, #15]
 80175e4:	2b01      	cmp	r3, #1
 80175e6:	d9cf      	bls.n	8017588 <cdcd_reset+0x10>
  }
}
 80175e8:	bf00      	nop
 80175ea:	bf00      	nop
 80175ec:	3710      	adds	r7, #16
 80175ee:	46bd      	mov	sp, r7
 80175f0:	bd80      	pop	{r7, pc}
 80175f2:	bf00      	nop
 80175f4:	24008768 	.word	0x24008768
 80175f8:	240089b8 	.word	0x240089b8

080175fc <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b09a      	sub	sp, #104	@ 0x68
 8017600:	af02      	add	r7, sp, #8
 8017602:	4603      	mov	r3, r0
 8017604:	6039      	str	r1, [r7, #0]
 8017606:	71fb      	strb	r3, [r7, #7]
 8017608:	4613      	mov	r3, r2
 801760a:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	795b      	ldrb	r3, [r3, #5]
 8017610:	2b02      	cmp	r3, #2
 8017612:	d103      	bne.n	801761c <cdcd_open+0x20>
 8017614:	683b      	ldr	r3, [r7, #0]
 8017616:	799b      	ldrb	r3, [r3, #6]
 8017618:	2b02      	cmp	r3, #2
 801761a:	d001      	beq.n	8017620 <cdcd_open+0x24>
 801761c:	2300      	movs	r3, #0
 801761e:	e0da      	b.n	80177d6 <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8017620:	2300      	movs	r3, #0
 8017622:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8017626:	e010      	b.n	801764a <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8017628:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 801762c:	22a8      	movs	r2, #168	@ 0xa8
 801762e:	fb02 f303 	mul.w	r3, r2, r3
 8017632:	4a6b      	ldr	r2, [pc, #428]	@ (80177e0 <cdcd_open+0x1e4>)
 8017634:	4413      	add	r3, r2
 8017636:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8017638:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801763a:	789b      	ldrb	r3, [r3, #2]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d009      	beq.n	8017654 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8017640:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8017644:	3301      	adds	r3, #1
 8017646:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 801764a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 801764e:	2b01      	cmp	r3, #1
 8017650:	d9ea      	bls.n	8017628 <cdcd_open+0x2c>
 8017652:	e000      	b.n	8017656 <cdcd_open+0x5a>
      break;
 8017654:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8017656:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 801765a:	2b01      	cmp	r3, #1
 801765c:	d90a      	bls.n	8017674 <cdcd_open+0x78>
 801765e:	4b61      	ldr	r3, [pc, #388]	@ (80177e4 <cdcd_open+0x1e8>)
 8017660:	647b      	str	r3, [r7, #68]	@ 0x44
 8017662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	f003 0301 	and.w	r3, r3, #1
 801766a:	2b00      	cmp	r3, #0
 801766c:	d000      	beq.n	8017670 <cdcd_open+0x74>
 801766e:	be00      	bkpt	0x0000
 8017670:	2300      	movs	r3, #0
 8017672:	e0b0      	b.n	80177d6 <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8017674:	683b      	ldr	r3, [r7, #0]
 8017676:	789a      	ldrb	r2, [r3, #2]
 8017678:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801767a:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 801767c:	2309      	movs	r3, #9
 801767e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8017686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017688:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 801768a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801768c:	781b      	ldrb	r3, [r3, #0]
 801768e:	461a      	mov	r2, r3
 8017690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017692:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 8017694:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 8017696:	e013      	b.n	80176c0 <cdcd_open+0xc4>
 8017698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801769a:	633b      	str	r3, [r7, #48]	@ 0x30
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 801769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801769e:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 80176a0:	461a      	mov	r2, r3
 80176a2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80176a6:	4413      	add	r3, r2
 80176a8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80176ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 80176b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80176b2:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 80176b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80176b6:	781b      	ldrb	r3, [r3, #0]
 80176b8:	461a      	mov	r2, r3
 80176ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80176bc:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 80176be:	657b      	str	r3, [r7, #84]	@ 0x54
 80176c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80176c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176c6:	3301      	adds	r3, #1
 80176c8:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80176ca:	2b24      	cmp	r3, #36	@ 0x24
 80176cc:	d104      	bne.n	80176d8 <cdcd_open+0xdc>
 80176ce:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80176d2:	88bb      	ldrh	r3, [r7, #4]
 80176d4:	429a      	cmp	r2, r3
 80176d6:	d9df      	bls.n	8017698 <cdcd_open+0x9c>
 80176d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80176dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176de:	3301      	adds	r3, #1
 80176e0:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 80176e2:	2b05      	cmp	r3, #5
 80176e4:	d12f      	bne.n	8017746 <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 80176e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176e8:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 80176ea:	79fb      	ldrb	r3, [r7, #7]
 80176ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80176ee:	4618      	mov	r0, r3
 80176f0:	f002 fb20 	bl	8019d34 <usbd_edpt_open>
 80176f4:	4603      	mov	r3, r0
 80176f6:	f083 0301 	eor.w	r3, r3, #1
 80176fa:	b2db      	uxtb	r3, r3
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d00a      	beq.n	8017716 <cdcd_open+0x11a>
 8017700:	4b38      	ldr	r3, [pc, #224]	@ (80177e4 <cdcd_open+0x1e8>)
 8017702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	f003 0301 	and.w	r3, r3, #1
 801770c:	2b00      	cmp	r3, #0
 801770e:	d000      	beq.n	8017712 <cdcd_open+0x116>
 8017710:	be00      	bkpt	0x0000
 8017712:	2300      	movs	r3, #0
 8017714:	e05f      	b.n	80177d6 <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8017716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017718:	789a      	ldrb	r2, [r3, #2]
 801771a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801771c:	705a      	strb	r2, [r3, #1]
 801771e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017720:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8017722:	69fb      	ldr	r3, [r7, #28]
 8017724:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8017726:	461a      	mov	r2, r3
 8017728:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801772c:	4413      	add	r3, r2
 801772e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8017732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017734:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8017736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017738:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 801773a:	6a3b      	ldr	r3, [r7, #32]
 801773c:	781b      	ldrb	r3, [r3, #0]
 801773e:	461a      	mov	r2, r3
 8017740:	6a3b      	ldr	r3, [r7, #32]
 8017742:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8017744:	657b      	str	r3, [r7, #84]	@ 0x54
 8017746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017748:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 801774a:	69bb      	ldr	r3, [r7, #24]
 801774c:	3301      	adds	r3, #1
 801774e:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8017750:	2b04      	cmp	r3, #4
 8017752:	d139      	bne.n	80177c8 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8017754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017756:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8017758:	2b0a      	cmp	r3, #10
 801775a:	d135      	bne.n	80177c8 <cdcd_open+0x1cc>
 801775c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801775e:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8017764:	461a      	mov	r2, r3
 8017766:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801776a:	4413      	add	r3, r2
 801776c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8017770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017772:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8017774:	697b      	ldr	r3, [r7, #20]
 8017776:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8017778:	693b      	ldr	r3, [r7, #16]
 801777a:	781b      	ldrb	r3, [r3, #0]
 801777c:	461a      	mov	r2, r3
 801777e:	693b      	ldr	r3, [r7, #16]
 8017780:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8017782:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8017784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017786:	3303      	adds	r3, #3
 8017788:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801778a:	3202      	adds	r2, #2
 801778c:	79f8      	ldrb	r0, [r7, #7]
 801778e:	9201      	str	r2, [sp, #4]
 8017790:	9300      	str	r3, [sp, #0]
 8017792:	2302      	movs	r3, #2
 8017794:	2202      	movs	r2, #2
 8017796:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017798:	f002 fa64 	bl	8019c64 <usbd_open_edpt_pair>
 801779c:	4603      	mov	r3, r0
 801779e:	f083 0301 	eor.w	r3, r3, #1
 80177a2:	b2db      	uxtb	r3, r3
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d00a      	beq.n	80177be <cdcd_open+0x1c2>
 80177a8:	4b0e      	ldr	r3, [pc, #56]	@ (80177e4 <cdcd_open+0x1e8>)
 80177aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80177ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	f003 0301 	and.w	r3, r3, #1
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d000      	beq.n	80177ba <cdcd_open+0x1be>
 80177b8:	be00      	bkpt	0x0000
 80177ba:	2300      	movs	r3, #0
 80177bc:	e00b      	b.n	80177d6 <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 80177be:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80177c2:	330e      	adds	r3, #14
 80177c4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 80177c8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80177cc:	4618      	mov	r0, r3
 80177ce:	f7ff fd89 	bl	80172e4 <_prep_out_transaction>

  return drv_len;
 80177d2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 80177d6:	4618      	mov	r0, r3
 80177d8:	3760      	adds	r7, #96	@ 0x60
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd80      	pop	{r7, pc}
 80177de:	bf00      	nop
 80177e0:	24008768 	.word	0x24008768
 80177e4:	e000edf0 	.word	0xe000edf0

080177e8 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 80177e8:	b580      	push	{r7, lr}
 80177ea:	b08a      	sub	sp, #40	@ 0x28
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	4603      	mov	r3, r0
 80177f0:	603a      	str	r2, [r7, #0]
 80177f2:	71fb      	strb	r3, [r7, #7]
 80177f4:	460b      	mov	r3, r1
 80177f6:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80177f8:	683b      	ldr	r3, [r7, #0]
 80177fa:	781b      	ldrb	r3, [r3, #0]
 80177fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017800:	b2db      	uxtb	r3, r3
 8017802:	2b20      	cmp	r3, #32
 8017804:	d001      	beq.n	801780a <cdcd_control_xfer_cb+0x22>
 8017806:	2300      	movs	r3, #0
 8017808:	e0d7      	b.n	80179ba <cdcd_control_xfer_cb+0x1d2>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 801780a:	2300      	movs	r3, #0
 801780c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017810:	e014      	b.n	801783c <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8017812:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017816:	22a8      	movs	r2, #168	@ 0xa8
 8017818:	fb02 f303 	mul.w	r3, r2, r3
 801781c:	4a69      	ldr	r2, [pc, #420]	@ (80179c4 <cdcd_control_xfer_cb+0x1dc>)
 801781e:	4413      	add	r3, r2
 8017820:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8017822:	6a3b      	ldr	r3, [r7, #32]
 8017824:	781b      	ldrb	r3, [r3, #0]
 8017826:	461a      	mov	r2, r3
 8017828:	683b      	ldr	r3, [r7, #0]
 801782a:	889b      	ldrh	r3, [r3, #4]
 801782c:	b29b      	uxth	r3, r3
 801782e:	429a      	cmp	r2, r3
 8017830:	d009      	beq.n	8017846 <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8017832:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017836:	3301      	adds	r3, #1
 8017838:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801783c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017840:	2b01      	cmp	r3, #1
 8017842:	d9e6      	bls.n	8017812 <cdcd_control_xfer_cb+0x2a>
 8017844:	e000      	b.n	8017848 <cdcd_control_xfer_cb+0x60>
      break;
 8017846:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8017848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801784c:	2b01      	cmp	r3, #1
 801784e:	d901      	bls.n	8017854 <cdcd_control_xfer_cb+0x6c>
 8017850:	2300      	movs	r3, #0
 8017852:	e0b2      	b.n	80179ba <cdcd_control_xfer_cb+0x1d2>

  switch (request->bRequest) {
 8017854:	683b      	ldr	r3, [r7, #0]
 8017856:	785b      	ldrb	r3, [r3, #1]
 8017858:	3b20      	subs	r3, #32
 801785a:	2b03      	cmp	r3, #3
 801785c:	f200 80a3 	bhi.w	80179a6 <cdcd_control_xfer_cb+0x1be>
 8017860:	a201      	add	r2, pc, #4	@ (adr r2, 8017868 <cdcd_control_xfer_cb+0x80>)
 8017862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017866:	bf00      	nop
 8017868:	08017879 	.word	0x08017879
 801786c:	080178b5 	.word	0x080178b5
 8017870:	080178cd 	.word	0x080178cd
 8017874:	08017975 	.word	0x08017975
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8017878:	79bb      	ldrb	r3, [r7, #6]
 801787a:	2b01      	cmp	r3, #1
 801787c:	d108      	bne.n	8017890 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 801787e:	6a3b      	ldr	r3, [r7, #32]
 8017880:	f103 0208 	add.w	r2, r3, #8
 8017884:	79f8      	ldrb	r0, [r7, #7]
 8017886:	2307      	movs	r3, #7
 8017888:	6839      	ldr	r1, [r7, #0]
 801788a:	f002 fca5 	bl	801a1d8 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 801788e:	e08c      	b.n	80179aa <cdcd_control_xfer_cb+0x1c2>
      } else if (stage == CONTROL_STAGE_ACK) {
 8017890:	79bb      	ldrb	r3, [r7, #6]
 8017892:	2b03      	cmp	r3, #3
 8017894:	f040 8089 	bne.w	80179aa <cdcd_control_xfer_cb+0x1c2>
        if (tud_cdc_line_coding_cb) {
 8017898:	4b4b      	ldr	r3, [pc, #300]	@ (80179c8 <cdcd_control_xfer_cb+0x1e0>)
 801789a:	2b00      	cmp	r3, #0
 801789c:	f000 8085 	beq.w	80179aa <cdcd_control_xfer_cb+0x1c2>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 80178a0:	6a3b      	ldr	r3, [r7, #32]
 80178a2:	f103 0208 	add.w	r2, r3, #8
 80178a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80178aa:	4611      	mov	r1, r2
 80178ac:	4618      	mov	r0, r3
 80178ae:	f3af 8000 	nop.w
      break;
 80178b2:	e07a      	b.n	80179aa <cdcd_control_xfer_cb+0x1c2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 80178b4:	79bb      	ldrb	r3, [r7, #6]
 80178b6:	2b01      	cmp	r3, #1
 80178b8:	d179      	bne.n	80179ae <cdcd_control_xfer_cb+0x1c6>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80178ba:	6a3b      	ldr	r3, [r7, #32]
 80178bc:	f103 0208 	add.w	r2, r3, #8
 80178c0:	79f8      	ldrb	r0, [r7, #7]
 80178c2:	2307      	movs	r3, #7
 80178c4:	6839      	ldr	r1, [r7, #0]
 80178c6:	f002 fc87 	bl	801a1d8 <tud_control_xfer>
      }
      break;
 80178ca:	e070      	b.n	80179ae <cdcd_control_xfer_cb+0x1c6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 80178cc:	79bb      	ldrb	r3, [r7, #6]
 80178ce:	2b01      	cmp	r3, #1
 80178d0:	d105      	bne.n	80178de <cdcd_control_xfer_cb+0xf6>
        tud_control_status(rhport, request);
 80178d2:	79fb      	ldrb	r3, [r7, #7]
 80178d4:	6839      	ldr	r1, [r7, #0]
 80178d6:	4618      	mov	r0, r3
 80178d8:	f002 fc0c 	bl	801a0f4 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 80178dc:	e069      	b.n	80179b2 <cdcd_control_xfer_cb+0x1ca>
      } else if (stage == CONTROL_STAGE_ACK) {
 80178de:	79bb      	ldrb	r3, [r7, #6]
 80178e0:	2b03      	cmp	r3, #3
 80178e2:	d166      	bne.n	80179b2 <cdcd_control_xfer_cb+0x1ca>
        bool const dtr = tu_bit_test(request->wValue, 0);
 80178e4:	683b      	ldr	r3, [r7, #0]
 80178e6:	885b      	ldrh	r3, [r3, #2]
 80178e8:	b29b      	uxth	r3, r3
 80178ea:	613b      	str	r3, [r7, #16]
 80178ec:	2300      	movs	r3, #0
 80178ee:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80178f0:	7bfb      	ldrb	r3, [r7, #15]
 80178f2:	693a      	ldr	r2, [r7, #16]
 80178f4:	fa22 f303 	lsr.w	r3, r2, r3
 80178f8:	f003 0301 	and.w	r3, r3, #1
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	bf14      	ite	ne
 8017900:	2301      	movne	r3, #1
 8017902:	2300      	moveq	r3, #0
 8017904:	b2db      	uxtb	r3, r3
 8017906:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8017908:	683b      	ldr	r3, [r7, #0]
 801790a:	885b      	ldrh	r3, [r3, #2]
 801790c:	b29b      	uxth	r3, r3
 801790e:	61bb      	str	r3, [r7, #24]
 8017910:	2301      	movs	r3, #1
 8017912:	75fb      	strb	r3, [r7, #23]
 8017914:	7dfb      	ldrb	r3, [r7, #23]
 8017916:	69ba      	ldr	r2, [r7, #24]
 8017918:	fa22 f303 	lsr.w	r3, r2, r3
 801791c:	f003 0301 	and.w	r3, r3, #1
 8017920:	2b00      	cmp	r3, #0
 8017922:	bf14      	ite	ne
 8017924:	2301      	movne	r3, #1
 8017926:	2300      	moveq	r3, #0
 8017928:	b2db      	uxtb	r3, r3
 801792a:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	885b      	ldrh	r3, [r3, #2]
 8017930:	b29b      	uxth	r3, r3
 8017932:	b2da      	uxtb	r2, r3
 8017934:	6a3b      	ldr	r3, [r7, #32]
 8017936:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8017938:	6a3b      	ldr	r3, [r7, #32]
 801793a:	f103 021c 	add.w	r2, r3, #28
 801793e:	7ffb      	ldrb	r3, [r7, #31]
 8017940:	2b00      	cmp	r3, #0
 8017942:	bf14      	ite	ne
 8017944:	2301      	movne	r3, #1
 8017946:	2300      	moveq	r3, #0
 8017948:	b2db      	uxtb	r3, r3
 801794a:	f083 0301 	eor.w	r3, r3, #1
 801794e:	b2db      	uxtb	r3, r3
 8017950:	f003 0301 	and.w	r3, r3, #1
 8017954:	b2db      	uxtb	r3, r3
 8017956:	4619      	mov	r1, r3
 8017958:	4610      	mov	r0, r2
 801795a:	f000 ff04 	bl	8018766 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 801795e:	4b1b      	ldr	r3, [pc, #108]	@ (80179cc <cdcd_control_xfer_cb+0x1e4>)
 8017960:	2b00      	cmp	r3, #0
 8017962:	d026      	beq.n	80179b2 <cdcd_control_xfer_cb+0x1ca>
          tud_cdc_line_state_cb(itf, dtr, rts);
 8017964:	7fba      	ldrb	r2, [r7, #30]
 8017966:	7ff9      	ldrb	r1, [r7, #31]
 8017968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801796c:	4618      	mov	r0, r3
 801796e:	f3af 8000 	nop.w
      break;
 8017972:	e01e      	b.n	80179b2 <cdcd_control_xfer_cb+0x1ca>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 8017974:	79bb      	ldrb	r3, [r7, #6]
 8017976:	2b01      	cmp	r3, #1
 8017978:	d105      	bne.n	8017986 <cdcd_control_xfer_cb+0x19e>
        tud_control_status(rhport, request);
 801797a:	79fb      	ldrb	r3, [r7, #7]
 801797c:	6839      	ldr	r1, [r7, #0]
 801797e:	4618      	mov	r0, r3
 8017980:	f002 fbb8 	bl	801a0f4 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 8017984:	e017      	b.n	80179b6 <cdcd_control_xfer_cb+0x1ce>
      } else if (stage == CONTROL_STAGE_ACK) {
 8017986:	79bb      	ldrb	r3, [r7, #6]
 8017988:	2b03      	cmp	r3, #3
 801798a:	d114      	bne.n	80179b6 <cdcd_control_xfer_cb+0x1ce>
        if (tud_cdc_send_break_cb) {
 801798c:	4b10      	ldr	r3, [pc, #64]	@ (80179d0 <cdcd_control_xfer_cb+0x1e8>)
 801798e:	2b00      	cmp	r3, #0
 8017990:	d011      	beq.n	80179b6 <cdcd_control_xfer_cb+0x1ce>
          tud_cdc_send_break_cb(itf, request->wValue);
 8017992:	683b      	ldr	r3, [r7, #0]
 8017994:	885b      	ldrh	r3, [r3, #2]
 8017996:	b29a      	uxth	r2, r3
 8017998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801799c:	4611      	mov	r1, r2
 801799e:	4618      	mov	r0, r3
 80179a0:	f3af 8000 	nop.w
      break;
 80179a4:	e007      	b.n	80179b6 <cdcd_control_xfer_cb+0x1ce>

    default:
      return false; // stall unsupported request
 80179a6:	2300      	movs	r3, #0
 80179a8:	e007      	b.n	80179ba <cdcd_control_xfer_cb+0x1d2>
      break;
 80179aa:	bf00      	nop
 80179ac:	e004      	b.n	80179b8 <cdcd_control_xfer_cb+0x1d0>
      break;
 80179ae:	bf00      	nop
 80179b0:	e002      	b.n	80179b8 <cdcd_control_xfer_cb+0x1d0>
      break;
 80179b2:	bf00      	nop
 80179b4:	e000      	b.n	80179b8 <cdcd_control_xfer_cb+0x1d0>
      break;
 80179b6:	bf00      	nop
  }

  return true;
 80179b8:	2301      	movs	r3, #1
}
 80179ba:	4618      	mov	r0, r3
 80179bc:	3728      	adds	r7, #40	@ 0x28
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}
 80179c2:	bf00      	nop
 80179c4:	24008768 	.word	0x24008768
	...

080179d4 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b088      	sub	sp, #32
 80179d8:	af00      	add	r7, sp, #0
 80179da:	603b      	str	r3, [r7, #0]
 80179dc:	4603      	mov	r3, r0
 80179de:	71fb      	strb	r3, [r7, #7]
 80179e0:	460b      	mov	r3, r1
 80179e2:	71bb      	strb	r3, [r7, #6]
 80179e4:	4613      	mov	r3, r2
 80179e6:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80179e8:	2300      	movs	r3, #0
 80179ea:	77fb      	strb	r3, [r7, #31]
 80179ec:	e013      	b.n	8017a16 <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 80179ee:	7ffb      	ldrb	r3, [r7, #31]
 80179f0:	22a8      	movs	r2, #168	@ 0xa8
 80179f2:	fb02 f303 	mul.w	r3, r2, r3
 80179f6:	4a56      	ldr	r2, [pc, #344]	@ (8017b50 <cdcd_xfer_cb+0x17c>)
 80179f8:	4413      	add	r3, r2
 80179fa:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 80179fc:	69bb      	ldr	r3, [r7, #24]
 80179fe:	78db      	ldrb	r3, [r3, #3]
 8017a00:	79ba      	ldrb	r2, [r7, #6]
 8017a02:	429a      	cmp	r2, r3
 8017a04:	d00a      	beq.n	8017a1c <cdcd_xfer_cb+0x48>
 8017a06:	69bb      	ldr	r3, [r7, #24]
 8017a08:	789b      	ldrb	r3, [r3, #2]
 8017a0a:	79ba      	ldrb	r2, [r7, #6]
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	d005      	beq.n	8017a1c <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8017a10:	7ffb      	ldrb	r3, [r7, #31]
 8017a12:	3301      	adds	r3, #1
 8017a14:	77fb      	strb	r3, [r7, #31]
 8017a16:	7ffb      	ldrb	r3, [r7, #31]
 8017a18:	2b01      	cmp	r3, #1
 8017a1a:	d9e8      	bls.n	80179ee <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8017a1c:	7ffb      	ldrb	r3, [r7, #31]
 8017a1e:	2b01      	cmp	r3, #1
 8017a20:	d90a      	bls.n	8017a38 <cdcd_xfer_cb+0x64>
 8017a22:	4b4c      	ldr	r3, [pc, #304]	@ (8017b54 <cdcd_xfer_cb+0x180>)
 8017a24:	60fb      	str	r3, [r7, #12]
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	f003 0301 	and.w	r3, r3, #1
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d000      	beq.n	8017a34 <cdcd_xfer_cb+0x60>
 8017a32:	be00      	bkpt	0x0000
 8017a34:	2300      	movs	r3, #0
 8017a36:	e087      	b.n	8017b48 <cdcd_xfer_cb+0x174>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8017a38:	7ffb      	ldrb	r3, [r7, #31]
 8017a3a:	01db      	lsls	r3, r3, #7
 8017a3c:	4a46      	ldr	r2, [pc, #280]	@ (8017b58 <cdcd_xfer_cb+0x184>)
 8017a3e:	4413      	add	r3, r2
 8017a40:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 8017a42:	69bb      	ldr	r3, [r7, #24]
 8017a44:	78db      	ldrb	r3, [r3, #3]
 8017a46:	79ba      	ldrb	r2, [r7, #6]
 8017a48:	429a      	cmp	r2, r3
 8017a4a:	d148      	bne.n	8017ade <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8017a4c:	69bb      	ldr	r3, [r7, #24]
 8017a4e:	3310      	adds	r3, #16
 8017a50:	6939      	ldr	r1, [r7, #16]
 8017a52:	683a      	ldr	r2, [r7, #0]
 8017a54:	b292      	uxth	r2, r2
 8017a56:	4618      	mov	r0, r3
 8017a58:	f000 fe50 	bl	80186fc <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8017a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8017b5c <cdcd_xfer_cb+0x188>)
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d027      	beq.n	8017ab2 <cdcd_xfer_cb+0xde>
 8017a62:	69bb      	ldr	r3, [r7, #24]
 8017a64:	795b      	ldrb	r3, [r3, #5]
 8017a66:	2bff      	cmp	r3, #255	@ 0xff
 8017a68:	d023      	beq.n	8017ab2 <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	617b      	str	r3, [r7, #20]
 8017a6e:	e01c      	b.n	8017aaa <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8017a70:	69bb      	ldr	r3, [r7, #24]
 8017a72:	795a      	ldrb	r2, [r3, #5]
 8017a74:	6939      	ldr	r1, [r7, #16]
 8017a76:	697b      	ldr	r3, [r7, #20]
 8017a78:	440b      	add	r3, r1
 8017a7a:	781b      	ldrb	r3, [r3, #0]
 8017a7c:	429a      	cmp	r2, r3
 8017a7e:	d111      	bne.n	8017aa4 <cdcd_xfer_cb+0xd0>
 8017a80:	69bb      	ldr	r3, [r7, #24]
 8017a82:	3310      	adds	r3, #16
 8017a84:	4618      	mov	r0, r3
 8017a86:	f000 fd33 	bl	80184f0 <tu_fifo_empty>
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	f083 0301 	eor.w	r3, r3, #1
 8017a90:	b2db      	uxtb	r3, r3
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d006      	beq.n	8017aa4 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8017a96:	69bb      	ldr	r3, [r7, #24]
 8017a98:	795a      	ldrb	r2, [r3, #5]
 8017a9a:	7ffb      	ldrb	r3, [r7, #31]
 8017a9c:	4611      	mov	r1, r2
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8017aa4:	697b      	ldr	r3, [r7, #20]
 8017aa6:	3301      	adds	r3, #1
 8017aa8:	617b      	str	r3, [r7, #20]
 8017aaa:	697a      	ldr	r2, [r7, #20]
 8017aac:	683b      	ldr	r3, [r7, #0]
 8017aae:	429a      	cmp	r2, r3
 8017ab0:	d3de      	bcc.n	8017a70 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8017ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8017b60 <cdcd_xfer_cb+0x18c>)
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d00e      	beq.n	8017ad6 <cdcd_xfer_cb+0x102>
 8017ab8:	69bb      	ldr	r3, [r7, #24]
 8017aba:	3310      	adds	r3, #16
 8017abc:	4618      	mov	r0, r3
 8017abe:	f000 fd17 	bl	80184f0 <tu_fifo_empty>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	f083 0301 	eor.w	r3, r3, #1
 8017ac8:	b2db      	uxtb	r3, r3
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d003      	beq.n	8017ad6 <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 8017ace:	7ffb      	ldrb	r3, [r7, #31]
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	f3af 8000 	nop.w
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 8017ad6:	7ffb      	ldrb	r3, [r7, #31]
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f7ff fc03 	bl	80172e4 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 8017ade:	69bb      	ldr	r3, [r7, #24]
 8017ae0:	789b      	ldrb	r3, [r3, #2]
 8017ae2:	79ba      	ldrb	r2, [r7, #6]
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d12e      	bne.n	8017b46 <cdcd_xfer_cb+0x172>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 8017ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8017b64 <cdcd_xfer_cb+0x190>)
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d003      	beq.n	8017af6 <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 8017aee:	7ffb      	ldrb	r3, [r7, #31]
 8017af0:	4618      	mov	r0, r3
 8017af2:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 8017af6:	7ffb      	ldrb	r3, [r7, #31]
 8017af8:	4618      	mov	r0, r3
 8017afa:	f7ff fc63 	bl	80173c4 <tud_cdc_n_write_flush>
 8017afe:	4603      	mov	r3, r0
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d120      	bne.n	8017b46 <cdcd_xfer_cb+0x172>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8017b04:	69bb      	ldr	r3, [r7, #24]
 8017b06:	331c      	adds	r3, #28
 8017b08:	4618      	mov	r0, r3
 8017b0a:	f000 fcbf 	bl	801848c <tu_fifo_count>
 8017b0e:	4603      	mov	r3, r0
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d118      	bne.n	8017b46 <cdcd_xfer_cb+0x172>
 8017b14:	683b      	ldr	r3, [r7, #0]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d015      	beq.n	8017b46 <cdcd_xfer_cb+0x172>
 8017b1a:	683b      	ldr	r3, [r7, #0]
 8017b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d110      	bne.n	8017b46 <cdcd_xfer_cb+0x172>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8017b24:	69bb      	ldr	r3, [r7, #24]
 8017b26:	789a      	ldrb	r2, [r3, #2]
 8017b28:	79fb      	ldrb	r3, [r7, #7]
 8017b2a:	4611      	mov	r1, r2
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	f002 f945 	bl	8019dbc <usbd_edpt_claim>
 8017b32:	4603      	mov	r3, r0
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d006      	beq.n	8017b46 <cdcd_xfer_cb+0x172>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8017b38:	69bb      	ldr	r3, [r7, #24]
 8017b3a:	7899      	ldrb	r1, [r3, #2]
 8017b3c:	79f8      	ldrb	r0, [r7, #7]
 8017b3e:	2300      	movs	r3, #0
 8017b40:	2200      	movs	r2, #0
 8017b42:	f002 f98f 	bl	8019e64 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8017b46:	2301      	movs	r3, #1
}
 8017b48:	4618      	mov	r0, r3
 8017b4a:	3720      	adds	r7, #32
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd80      	pop	{r7, pc}
 8017b50:	24008768 	.word	0x24008768
 8017b54:	e000edf0 	.word	0xe000edf0
 8017b58:	240088b8 	.word	0x240088b8
	...

08017b68 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8017b68:	b480      	push	{r7}
 8017b6a:	b085      	sub	sp, #20
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	60f8      	str	r0, [r7, #12]
 8017b70:	60b9      	str	r1, [r7, #8]
 8017b72:	4611      	mov	r1, r2
 8017b74:	461a      	mov	r2, r3
 8017b76:	460b      	mov	r3, r1
 8017b78:	80fb      	strh	r3, [r7, #6]
 8017b7a:	4613      	mov	r3, r2
 8017b7c:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8017b7e:	88fb      	ldrh	r3, [r7, #6]
 8017b80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017b84:	d901      	bls.n	8017b8a <tu_fifo_config+0x22>
 8017b86:	2300      	movs	r3, #0
 8017b88:	e01b      	b.n	8017bc2 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	68ba      	ldr	r2, [r7, #8]
 8017b8e:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	88fa      	ldrh	r2, [r7, #6]
 8017b94:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8017b96:	88bb      	ldrh	r3, [r7, #4]
 8017b98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017b9c:	b299      	uxth	r1, r3
 8017b9e:	68fa      	ldr	r2, [r7, #12]
 8017ba0:	88d3      	ldrh	r3, [r2, #6]
 8017ba2:	f361 030e 	bfi	r3, r1, #0, #15
 8017ba6:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8017ba8:	68fa      	ldr	r2, [r7, #12]
 8017baa:	79d3      	ldrb	r3, [r2, #7]
 8017bac:	7e39      	ldrb	r1, [r7, #24]
 8017bae:	f361 13c7 	bfi	r3, r1, #7, #1
 8017bb2:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8017bc0:	2301      	movs	r3, #1
}
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	3714      	adds	r7, #20
 8017bc6:	46bd      	mov	sp, r7
 8017bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bcc:	4770      	bx	lr

08017bce <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8017bce:	b580      	push	{r7, lr}
 8017bd0:	b08a      	sub	sp, #40	@ 0x28
 8017bd2:	af00      	add	r7, sp, #0
 8017bd4:	60f8      	str	r0, [r7, #12]
 8017bd6:	60b9      	str	r1, [r7, #8]
 8017bd8:	4613      	mov	r3, r2
 8017bda:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8017bdc:	68bb      	ldr	r3, [r7, #8]
 8017bde:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8017be0:	88fb      	ldrh	r3, [r7, #6]
 8017be2:	089b      	lsrs	r3, r3, #2
 8017be4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8017be6:	e00b      	b.n	8017c00 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8017be8:	6a3b      	ldr	r3, [r7, #32]
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	68fa      	ldr	r2, [r7, #12]
 8017bee:	61ba      	str	r2, [r7, #24]
 8017bf0:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8017bf2:	69bb      	ldr	r3, [r7, #24]
 8017bf4:	697a      	ldr	r2, [r7, #20]
 8017bf6:	601a      	str	r2, [r3, #0]
}
 8017bf8:	bf00      	nop
    ff_buf += 4;
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	3304      	adds	r3, #4
 8017bfe:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8017c00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017c02:	1e5a      	subs	r2, r3, #1
 8017c04:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d1ee      	bne.n	8017be8 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8017c0a:	88fb      	ldrh	r3, [r7, #6]
 8017c0c:	b2db      	uxtb	r3, r3
 8017c0e:	f003 0303 	and.w	r3, r3, #3
 8017c12:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8017c14:	7ffb      	ldrb	r3, [r7, #31]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d009      	beq.n	8017c2e <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8017c1a:	6a3b      	ldr	r3, [r7, #32]
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8017c20:	7ffa      	ldrb	r2, [r7, #31]
 8017c22:	f107 0310 	add.w	r3, r7, #16
 8017c26:	4619      	mov	r1, r3
 8017c28:	68f8      	ldr	r0, [r7, #12]
 8017c2a:	f007 fcf4 	bl	801f616 <memcpy>
  }
}
 8017c2e:	bf00      	nop
 8017c30:	3728      	adds	r7, #40	@ 0x28
 8017c32:	46bd      	mov	sp, r7
 8017c34:	bd80      	pop	{r7, pc}

08017c36 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8017c36:	b580      	push	{r7, lr}
 8017c38:	b08a      	sub	sp, #40	@ 0x28
 8017c3a:	af00      	add	r7, sp, #0
 8017c3c:	60f8      	str	r0, [r7, #12]
 8017c3e:	60b9      	str	r1, [r7, #8]
 8017c40:	4613      	mov	r3, r2
 8017c42:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8017c48:	88fb      	ldrh	r3, [r7, #6]
 8017c4a:	089b      	lsrs	r3, r3, #2
 8017c4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8017c4e:	e008      	b.n	8017c62 <_ff_pull_const_addr+0x2c>
 8017c50:	68bb      	ldr	r3, [r7, #8]
 8017c52:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8017c54:	69bb      	ldr	r3, [r7, #24]
 8017c56:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8017c58:	6a3b      	ldr	r3, [r7, #32]
 8017c5a:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8017c5c:	68bb      	ldr	r3, [r7, #8]
 8017c5e:	3304      	adds	r3, #4
 8017c60:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8017c62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017c64:	1e5a      	subs	r2, r3, #1
 8017c66:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d1f1      	bne.n	8017c50 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8017c6c:	88fb      	ldrh	r3, [r7, #6]
 8017c6e:	b2db      	uxtb	r3, r3
 8017c70:	f003 0303 	and.w	r3, r3, #3
 8017c74:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8017c76:	7ffb      	ldrb	r3, [r7, #31]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d00b      	beq.n	8017c94 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8017c80:	7ffa      	ldrb	r2, [r7, #31]
 8017c82:	f107 0314 	add.w	r3, r7, #20
 8017c86:	68b9      	ldr	r1, [r7, #8]
 8017c88:	4618      	mov	r0, r3
 8017c8a:	f007 fcc4 	bl	801f616 <memcpy>

    *reg_tx = tmp32;
 8017c8e:	697a      	ldr	r2, [r7, #20]
 8017c90:	6a3b      	ldr	r3, [r7, #32]
 8017c92:	601a      	str	r2, [r3, #0]
  }
}
 8017c94:	bf00      	nop
 8017c96:	3728      	adds	r7, #40	@ 0x28
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	bd80      	pop	{r7, pc}

08017c9c <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	b084      	sub	sp, #16
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	60f8      	str	r0, [r7, #12]
 8017ca4:	60b9      	str	r1, [r7, #8]
 8017ca6:	4613      	mov	r3, r2
 8017ca8:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	88fa      	ldrh	r2, [r7, #6]
 8017cb0:	68f9      	ldr	r1, [r7, #12]
 8017cb2:	88c9      	ldrh	r1, [r1, #6]
 8017cb4:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8017cb8:	b289      	uxth	r1, r1
 8017cba:	fb01 f202 	mul.w	r2, r1, r2
 8017cbe:	1898      	adds	r0, r3, r2
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	88db      	ldrh	r3, [r3, #6]
 8017cc4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017cc8:	b29b      	uxth	r3, r3
 8017cca:	461a      	mov	r2, r3
 8017ccc:	68b9      	ldr	r1, [r7, #8]
 8017cce:	f007 fca2 	bl	801f616 <memcpy>
}
 8017cd2:	bf00      	nop
 8017cd4:	3710      	adds	r7, #16
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}

08017cda <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8017cda:	b580      	push	{r7, lr}
 8017cdc:	b08e      	sub	sp, #56	@ 0x38
 8017cde:	af00      	add	r7, sp, #0
 8017ce0:	60f8      	str	r0, [r7, #12]
 8017ce2:	60b9      	str	r1, [r7, #8]
 8017ce4:	4611      	mov	r1, r2
 8017ce6:	461a      	mov	r2, r3
 8017ce8:	460b      	mov	r3, r1
 8017cea:	80fb      	strh	r3, [r7, #6]
 8017cec:	4613      	mov	r3, r2
 8017cee:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	889a      	ldrh	r2, [r3, #4]
 8017cf4:	88bb      	ldrh	r3, [r7, #4]
 8017cf6:	1ad3      	subs	r3, r2, r3
 8017cf8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8017cfa:	88fa      	ldrh	r2, [r7, #6]
 8017cfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017cfe:	1ad3      	subs	r3, r2, r3
 8017d00:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	88db      	ldrh	r3, [r3, #6]
 8017d06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017d0a:	b29b      	uxth	r3, r3
 8017d0c:	461a      	mov	r2, r3
 8017d0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017d10:	fb13 f302 	smulbb	r3, r3, r2
 8017d14:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	88db      	ldrh	r3, [r3, #6]
 8017d1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	461a      	mov	r2, r3
 8017d22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017d24:	fb13 f302 	smulbb	r3, r3, r2
 8017d28:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	88ba      	ldrh	r2, [r7, #4]
 8017d30:	68f9      	ldr	r1, [r7, #12]
 8017d32:	88c9      	ldrh	r1, [r1, #6]
 8017d34:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8017d38:	b289      	uxth	r1, r1
 8017d3a:	fb01 f202 	mul.w	r2, r1, r2
 8017d3e:	4413      	add	r3, r2
 8017d40:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8017d42:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d002      	beq.n	8017d50 <_ff_push_n+0x76>
 8017d4a:	2b01      	cmp	r3, #1
 8017d4c:	d022      	beq.n	8017d94 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8017d4e:	e09e      	b.n	8017e8e <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8017d50:	88fa      	ldrh	r2, [r7, #6]
 8017d52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017d54:	429a      	cmp	r2, r3
 8017d56:	d80d      	bhi.n	8017d74 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8017d58:	88fb      	ldrh	r3, [r7, #6]
 8017d5a:	68fa      	ldr	r2, [r7, #12]
 8017d5c:	88d2      	ldrh	r2, [r2, #6]
 8017d5e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017d62:	b292      	uxth	r2, r2
 8017d64:	fb02 f303 	mul.w	r3, r2, r3
 8017d68:	461a      	mov	r2, r3
 8017d6a:	68b9      	ldr	r1, [r7, #8]
 8017d6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017d6e:	f007 fc52 	bl	801f616 <memcpy>
      break;
 8017d72:	e08c      	b.n	8017e8e <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8017d74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017d76:	461a      	mov	r2, r3
 8017d78:	68b9      	ldr	r1, [r7, #8]
 8017d7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017d7c:	f007 fc4b 	bl	801f616 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	6818      	ldr	r0, [r3, #0]
 8017d84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017d86:	68ba      	ldr	r2, [r7, #8]
 8017d88:	4413      	add	r3, r2
 8017d8a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017d8c:	4619      	mov	r1, r3
 8017d8e:	f007 fc42 	bl	801f616 <memcpy>
      break;
 8017d92:	e07c      	b.n	8017e8e <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8017d94:	88fa      	ldrh	r2, [r7, #6]
 8017d96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017d98:	429a      	cmp	r2, r3
 8017d9a:	d80f      	bhi.n	8017dbc <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	88db      	ldrh	r3, [r3, #6]
 8017da0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017da4:	b29b      	uxth	r3, r3
 8017da6:	461a      	mov	r2, r3
 8017da8:	88fb      	ldrh	r3, [r7, #6]
 8017daa:	fb13 f302 	smulbb	r3, r3, r2
 8017dae:	b29b      	uxth	r3, r3
 8017db0:	461a      	mov	r2, r3
 8017db2:	68b9      	ldr	r1, [r7, #8]
 8017db4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017db6:	f7ff ff0a 	bl	8017bce <_ff_push_const_addr>
      break;
 8017dba:	e067      	b.n	8017e8c <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8017dbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017dbe:	f023 0303 	bic.w	r3, r3, #3
 8017dc2:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8017dc4:	8c3b      	ldrh	r3, [r7, #32]
 8017dc6:	461a      	mov	r2, r3
 8017dc8:	68b9      	ldr	r1, [r7, #8]
 8017dca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017dcc:	f7ff feff 	bl	8017bce <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8017dd0:	8c3b      	ldrh	r3, [r7, #32]
 8017dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017dd4:	4413      	add	r3, r2
 8017dd6:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8017dd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017dda:	b2db      	uxtb	r3, r3
 8017ddc:	f003 0303 	and.w	r3, r3, #3
 8017de0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8017de4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d043      	beq.n	8017e74 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8017dec:	68bb      	ldr	r3, [r7, #8]
 8017dee:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8017df0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017df4:	b29b      	uxth	r3, r3
 8017df6:	f1c3 0304 	rsb	r3, r3, #4
 8017dfa:	b29a      	uxth	r2, r3
 8017dfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017dfe:	837b      	strh	r3, [r7, #26]
 8017e00:	4613      	mov	r3, r2
 8017e02:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8017e04:	8b7a      	ldrh	r2, [r7, #26]
 8017e06:	8b3b      	ldrh	r3, [r7, #24]
 8017e08:	4293      	cmp	r3, r2
 8017e0a:	bf28      	it	cs
 8017e0c:	4613      	movcs	r3, r2
 8017e0e:	b29b      	uxth	r3, r3
 8017e10:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8017e14:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017e18:	b29b      	uxth	r3, r3
 8017e1a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017e1c:	1ad3      	subs	r3, r2, r3
 8017e1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8017e20:	69fb      	ldr	r3, [r7, #28]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8017e26:	f107 0314 	add.w	r3, r7, #20
 8017e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8017e2c:	e007      	b.n	8017e3e <_ff_push_n+0x164>
 8017e2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017e30:	1c53      	adds	r3, r2, #1
 8017e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e36:	1c59      	adds	r1, r3, #1
 8017e38:	6339      	str	r1, [r7, #48]	@ 0x30
 8017e3a:	7812      	ldrb	r2, [r2, #0]
 8017e3c:	701a      	strb	r2, [r3, #0]
 8017e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017e42:	1e5a      	subs	r2, r3, #1
 8017e44:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d1f0      	bne.n	8017e2e <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8017e52:	e007      	b.n	8017e64 <_ff_push_n+0x18a>
 8017e54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017e56:	1c53      	adds	r3, r2, #1
 8017e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e5c:	1c59      	adds	r1, r3, #1
 8017e5e:	6339      	str	r1, [r7, #48]	@ 0x30
 8017e60:	7812      	ldrb	r2, [r2, #0]
 8017e62:	701a      	strb	r2, [r3, #0]
 8017e64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017e68:	1e5a      	subs	r2, r3, #1
 8017e6a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d1f0      	bne.n	8017e54 <_ff_push_n+0x17a>
 8017e72:	e002      	b.n	8017e7a <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8017e7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d005      	beq.n	8017e8c <_ff_push_n+0x1b2>
 8017e80:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017e82:	461a      	mov	r2, r3
 8017e84:	68b9      	ldr	r1, [r7, #8]
 8017e86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017e88:	f7ff fea1 	bl	8017bce <_ff_push_const_addr>
      break;
 8017e8c:	bf00      	nop
  }
}
 8017e8e:	bf00      	nop
 8017e90:	3738      	adds	r7, #56	@ 0x38
 8017e92:	46bd      	mov	sp, r7
 8017e94:	bd80      	pop	{r7, pc}

08017e96 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8017e96:	b580      	push	{r7, lr}
 8017e98:	b084      	sub	sp, #16
 8017e9a:	af00      	add	r7, sp, #0
 8017e9c:	60f8      	str	r0, [r7, #12]
 8017e9e:	60b9      	str	r1, [r7, #8]
 8017ea0:	4613      	mov	r3, r2
 8017ea2:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	88fa      	ldrh	r2, [r7, #6]
 8017eaa:	68f9      	ldr	r1, [r7, #12]
 8017eac:	88c9      	ldrh	r1, [r1, #6]
 8017eae:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8017eb2:	b289      	uxth	r1, r1
 8017eb4:	fb01 f202 	mul.w	r2, r1, r2
 8017eb8:	1899      	adds	r1, r3, r2
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	88db      	ldrh	r3, [r3, #6]
 8017ebe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017ec2:	b29b      	uxth	r3, r3
 8017ec4:	461a      	mov	r2, r3
 8017ec6:	68b8      	ldr	r0, [r7, #8]
 8017ec8:	f007 fba5 	bl	801f616 <memcpy>
}
 8017ecc:	bf00      	nop
 8017ece:	3710      	adds	r7, #16
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	bd80      	pop	{r7, pc}

08017ed4 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b08e      	sub	sp, #56	@ 0x38
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	60f8      	str	r0, [r7, #12]
 8017edc:	60b9      	str	r1, [r7, #8]
 8017ede:	4611      	mov	r1, r2
 8017ee0:	461a      	mov	r2, r3
 8017ee2:	460b      	mov	r3, r1
 8017ee4:	80fb      	strh	r3, [r7, #6]
 8017ee6:	4613      	mov	r3, r2
 8017ee8:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	889a      	ldrh	r2, [r3, #4]
 8017eee:	88bb      	ldrh	r3, [r7, #4]
 8017ef0:	1ad3      	subs	r3, r2, r3
 8017ef2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8017ef4:	88fa      	ldrh	r2, [r7, #6]
 8017ef6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017ef8:	1ad3      	subs	r3, r2, r3
 8017efa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	88db      	ldrh	r3, [r3, #6]
 8017f00:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017f04:	b29b      	uxth	r3, r3
 8017f06:	461a      	mov	r2, r3
 8017f08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017f0a:	fb13 f302 	smulbb	r3, r3, r2
 8017f0e:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	88db      	ldrh	r3, [r3, #6]
 8017f14:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017f18:	b29b      	uxth	r3, r3
 8017f1a:	461a      	mov	r2, r3
 8017f1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017f1e:	fb13 f302 	smulbb	r3, r3, r2
 8017f22:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	88ba      	ldrh	r2, [r7, #4]
 8017f2a:	68f9      	ldr	r1, [r7, #12]
 8017f2c:	88c9      	ldrh	r1, [r1, #6]
 8017f2e:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8017f32:	b289      	uxth	r1, r1
 8017f34:	fb01 f202 	mul.w	r2, r1, r2
 8017f38:	4413      	add	r3, r2
 8017f3a:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8017f3c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d002      	beq.n	8017f4a <_ff_pull_n+0x76>
 8017f44:	2b01      	cmp	r3, #1
 8017f46:	d022      	beq.n	8017f8e <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8017f48:	e0a0      	b.n	801808c <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8017f4a:	88fa      	ldrh	r2, [r7, #6]
 8017f4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017f4e:	429a      	cmp	r2, r3
 8017f50:	d80d      	bhi.n	8017f6e <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8017f52:	88fb      	ldrh	r3, [r7, #6]
 8017f54:	68fa      	ldr	r2, [r7, #12]
 8017f56:	88d2      	ldrh	r2, [r2, #6]
 8017f58:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017f5c:	b292      	uxth	r2, r2
 8017f5e:	fb02 f303 	mul.w	r3, r2, r3
 8017f62:	461a      	mov	r2, r3
 8017f64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017f66:	68b8      	ldr	r0, [r7, #8]
 8017f68:	f007 fb55 	bl	801f616 <memcpy>
    break;
 8017f6c:	e08e      	b.n	801808c <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8017f6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017f70:	461a      	mov	r2, r3
 8017f72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017f74:	68b8      	ldr	r0, [r7, #8]
 8017f76:	f007 fb4e 	bl	801f616 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8017f7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017f7c:	68ba      	ldr	r2, [r7, #8]
 8017f7e:	18d0      	adds	r0, r2, r3
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017f86:	4619      	mov	r1, r3
 8017f88:	f007 fb45 	bl	801f616 <memcpy>
    break;
 8017f8c:	e07e      	b.n	801808c <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8017f8e:	88fa      	ldrh	r2, [r7, #6]
 8017f90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017f92:	429a      	cmp	r2, r3
 8017f94:	d80f      	bhi.n	8017fb6 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	88db      	ldrh	r3, [r3, #6]
 8017f9a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017f9e:	b29b      	uxth	r3, r3
 8017fa0:	461a      	mov	r2, r3
 8017fa2:	88fb      	ldrh	r3, [r7, #6]
 8017fa4:	fb13 f302 	smulbb	r3, r3, r2
 8017fa8:	b29b      	uxth	r3, r3
 8017faa:	461a      	mov	r2, r3
 8017fac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017fae:	68b8      	ldr	r0, [r7, #8]
 8017fb0:	f7ff fe41 	bl	8017c36 <_ff_pull_const_addr>
    break;
 8017fb4:	e069      	b.n	801808a <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8017fb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017fb8:	f023 0303 	bic.w	r3, r3, #3
 8017fbc:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8017fbe:	8c3b      	ldrh	r3, [r7, #32]
 8017fc0:	461a      	mov	r2, r3
 8017fc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017fc4:	68b8      	ldr	r0, [r7, #8]
 8017fc6:	f7ff fe36 	bl	8017c36 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8017fca:	8c3b      	ldrh	r3, [r7, #32]
 8017fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017fce:	4413      	add	r3, r2
 8017fd0:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8017fd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017fd4:	b2db      	uxtb	r3, r3
 8017fd6:	f003 0303 	and.w	r3, r3, #3
 8017fda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8017fde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d045      	beq.n	8018072 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8017fe6:	68bb      	ldr	r3, [r7, #8]
 8017fe8:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8017fea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017fee:	b29b      	uxth	r3, r3
 8017ff0:	f1c3 0304 	rsb	r3, r3, #4
 8017ff4:	b29a      	uxth	r2, r3
 8017ff6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017ff8:	837b      	strh	r3, [r7, #26]
 8017ffa:	4613      	mov	r3, r2
 8017ffc:	833b      	strh	r3, [r7, #24]
 8017ffe:	8b7a      	ldrh	r2, [r7, #26]
 8018000:	8b3b      	ldrh	r3, [r7, #24]
 8018002:	4293      	cmp	r3, r2
 8018004:	bf28      	it	cs
 8018006:	4613      	movcs	r3, r2
 8018008:	b29b      	uxth	r3, r3
 801800a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 801800e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8018012:	b29b      	uxth	r3, r3
 8018014:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8018016:	1ad3      	subs	r3, r2, r3
 8018018:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 801801a:	2300      	movs	r3, #0
 801801c:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 801801e:	f107 0314 	add.w	r3, r7, #20
 8018022:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8018024:	e007      	b.n	8018036 <_ff_pull_n+0x162>
 8018026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018028:	1c53      	adds	r3, r2, #1
 801802a:	633b      	str	r3, [r7, #48]	@ 0x30
 801802c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801802e:	1c59      	adds	r1, r3, #1
 8018030:	62b9      	str	r1, [r7, #40]	@ 0x28
 8018032:	7812      	ldrb	r2, [r2, #0]
 8018034:	701a      	strb	r2, [r3, #0]
 8018036:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801803a:	1e5a      	subs	r2, r3, #1
 801803c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8018040:	2b00      	cmp	r3, #0
 8018042:	d1f0      	bne.n	8018026 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 801804a:	e007      	b.n	801805c <_ff_pull_n+0x188>
 801804c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801804e:	1c53      	adds	r3, r2, #1
 8018050:	633b      	str	r3, [r7, #48]	@ 0x30
 8018052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018054:	1c59      	adds	r1, r3, #1
 8018056:	62b9      	str	r1, [r7, #40]	@ 0x28
 8018058:	7812      	ldrb	r2, [r2, #0]
 801805a:	701a      	strb	r2, [r3, #0]
 801805c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8018060:	1e5a      	subs	r2, r3, #1
 8018062:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8018066:	2b00      	cmp	r3, #0
 8018068:	d1f0      	bne.n	801804c <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 801806a:	697a      	ldr	r2, [r7, #20]
 801806c:	69fb      	ldr	r3, [r7, #28]
 801806e:	601a      	str	r2, [r3, #0]
 8018070:	e002      	b.n	8018078 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8018078:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801807a:	2b00      	cmp	r3, #0
 801807c:	d005      	beq.n	801808a <_ff_pull_n+0x1b6>
 801807e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018080:	461a      	mov	r2, r3
 8018082:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018084:	68b8      	ldr	r0, [r7, #8]
 8018086:	f7ff fdd6 	bl	8017c36 <_ff_pull_const_addr>
    break;
 801808a:	bf00      	nop
  }
}
 801808c:	bf00      	nop
 801808e:	3738      	adds	r7, #56	@ 0x38
 8018090:	46bd      	mov	sp, r7
 8018092:	bd80      	pop	{r7, pc}

08018094 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8018094:	b480      	push	{r7}
 8018096:	b085      	sub	sp, #20
 8018098:	af00      	add	r7, sp, #0
 801809a:	4603      	mov	r3, r0
 801809c:	80fb      	strh	r3, [r7, #6]
 801809e:	460b      	mov	r3, r1
 80180a0:	80bb      	strh	r3, [r7, #4]
 80180a2:	4613      	mov	r3, r2
 80180a4:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 80180a6:	88ba      	ldrh	r2, [r7, #4]
 80180a8:	887b      	ldrh	r3, [r7, #2]
 80180aa:	4413      	add	r3, r2
 80180ac:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 80180ae:	88ba      	ldrh	r2, [r7, #4]
 80180b0:	89fb      	ldrh	r3, [r7, #14]
 80180b2:	429a      	cmp	r2, r3
 80180b4:	d804      	bhi.n	80180c0 <advance_index+0x2c>
 80180b6:	89fa      	ldrh	r2, [r7, #14]
 80180b8:	88fb      	ldrh	r3, [r7, #6]
 80180ba:	005b      	lsls	r3, r3, #1
 80180bc:	429a      	cmp	r2, r3
 80180be:	db08      	blt.n	80180d2 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 80180c0:	88fb      	ldrh	r3, [r7, #6]
 80180c2:	005b      	lsls	r3, r3, #1
 80180c4:	b29b      	uxth	r3, r3
 80180c6:	425b      	negs	r3, r3
 80180c8:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 80180ca:	89fa      	ldrh	r2, [r7, #14]
 80180cc:	89bb      	ldrh	r3, [r7, #12]
 80180ce:	4413      	add	r3, r2
 80180d0:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 80180d2:	89fb      	ldrh	r3, [r7, #14]
}
 80180d4:	4618      	mov	r0, r3
 80180d6:	3714      	adds	r7, #20
 80180d8:	46bd      	mov	sp, r7
 80180da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180de:	4770      	bx	lr

080180e0 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b08a      	sub	sp, #40	@ 0x28
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	60f8      	str	r0, [r7, #12]
 80180e8:	60b9      	str	r1, [r7, #8]
 80180ea:	4611      	mov	r1, r2
 80180ec:	461a      	mov	r2, r3
 80180ee:	460b      	mov	r3, r1
 80180f0:	80fb      	strh	r3, [r7, #6]
 80180f2:	4613      	mov	r3, r2
 80180f4:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	889b      	ldrh	r3, [r3, #4]
 80180fa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80180fc:	88fb      	ldrh	r3, [r7, #6]
 80180fe:	843b      	strh	r3, [r7, #32]
 8018100:	88bb      	ldrh	r3, [r7, #4]
 8018102:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8018104:	8c3a      	ldrh	r2, [r7, #32]
 8018106:	8bfb      	ldrh	r3, [r7, #30]
 8018108:	429a      	cmp	r2, r3
 801810a:	d304      	bcc.n	8018116 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 801810c:	8c3a      	ldrh	r2, [r7, #32]
 801810e:	8bfb      	ldrh	r3, [r7, #30]
 8018110:	1ad3      	subs	r3, r2, r3
 8018112:	b29b      	uxth	r3, r3
 8018114:	e008      	b.n	8018128 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8018116:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018118:	005b      	lsls	r3, r3, #1
 801811a:	b29a      	uxth	r2, r3
 801811c:	8c39      	ldrh	r1, [r7, #32]
 801811e:	8bfb      	ldrh	r3, [r7, #30]
 8018120:	1acb      	subs	r3, r1, r3
 8018122:	b29b      	uxth	r3, r3
 8018124:	4413      	add	r3, r2
 8018126:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8018128:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 801812a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801812c:	2b00      	cmp	r3, #0
 801812e:	d101      	bne.n	8018134 <_tu_fifo_peek+0x54>
 8018130:	2300      	movs	r3, #0
 8018132:	e037      	b.n	80181a4 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	889b      	ldrh	r3, [r3, #4]
 8018138:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801813a:	429a      	cmp	r2, r3
 801813c:	d91b      	bls.n	8018176 <_tu_fifo_peek+0x96>
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	61bb      	str	r3, [r7, #24]
 8018142:	88fb      	ldrh	r3, [r7, #6]
 8018144:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8018146:	69bb      	ldr	r3, [r7, #24]
 8018148:	889b      	ldrh	r3, [r3, #4]
 801814a:	8afa      	ldrh	r2, [r7, #22]
 801814c:	429a      	cmp	r2, r3
 801814e:	d305      	bcc.n	801815c <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8018150:	69bb      	ldr	r3, [r7, #24]
 8018152:	889b      	ldrh	r3, [r3, #4]
 8018154:	8afa      	ldrh	r2, [r7, #22]
 8018156:	1ad3      	subs	r3, r2, r3
 8018158:	82bb      	strh	r3, [r7, #20]
 801815a:	e004      	b.n	8018166 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 801815c:	69bb      	ldr	r3, [r7, #24]
 801815e:	889a      	ldrh	r2, [r3, #4]
 8018160:	8afb      	ldrh	r3, [r7, #22]
 8018162:	4413      	add	r3, r2
 8018164:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8018166:	69bb      	ldr	r3, [r7, #24]
 8018168:	8aba      	ldrh	r2, [r7, #20]
 801816a:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 801816c:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 801816e:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	889b      	ldrh	r3, [r3, #4]
 8018174:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	889b      	ldrh	r3, [r3, #4]
 801817a:	827b      	strh	r3, [r7, #18]
 801817c:	88bb      	ldrh	r3, [r7, #4]
 801817e:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8018180:	e003      	b.n	801818a <_tu_fifo_peek+0xaa>
 8018182:	8a3a      	ldrh	r2, [r7, #16]
 8018184:	8a7b      	ldrh	r3, [r7, #18]
 8018186:	1ad3      	subs	r3, r2, r3
 8018188:	823b      	strh	r3, [r7, #16]
 801818a:	8a7a      	ldrh	r2, [r7, #18]
 801818c:	8a3b      	ldrh	r3, [r7, #16]
 801818e:	429a      	cmp	r2, r3
 8018190:	d9f7      	bls.n	8018182 <_tu_fifo_peek+0xa2>
  return idx;
 8018192:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8018194:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8018196:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018198:	461a      	mov	r2, r3
 801819a:	68b9      	ldr	r1, [r7, #8]
 801819c:	68f8      	ldr	r0, [r7, #12]
 801819e:	f7ff fe7a 	bl	8017e96 <_ff_pull>

  return true;
 80181a2:	2301      	movs	r3, #1
}
 80181a4:	4618      	mov	r0, r3
 80181a6:	3728      	adds	r7, #40	@ 0x28
 80181a8:	46bd      	mov	sp, r7
 80181aa:	bd80      	pop	{r7, pc}

080181ac <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b08c      	sub	sp, #48	@ 0x30
 80181b0:	af02      	add	r7, sp, #8
 80181b2:	60f8      	str	r0, [r7, #12]
 80181b4:	60b9      	str	r1, [r7, #8]
 80181b6:	4611      	mov	r1, r2
 80181b8:	461a      	mov	r2, r3
 80181ba:	460b      	mov	r3, r1
 80181bc:	80fb      	strh	r3, [r7, #6]
 80181be:	4613      	mov	r3, r2
 80181c0:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	889b      	ldrh	r3, [r3, #4]
 80181c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80181c8:	88bb      	ldrh	r3, [r7, #4]
 80181ca:	843b      	strh	r3, [r7, #32]
 80181cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80181ce:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80181d0:	8c3a      	ldrh	r2, [r7, #32]
 80181d2:	8bfb      	ldrh	r3, [r7, #30]
 80181d4:	429a      	cmp	r2, r3
 80181d6:	d304      	bcc.n	80181e2 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80181d8:	8c3a      	ldrh	r2, [r7, #32]
 80181da:	8bfb      	ldrh	r3, [r7, #30]
 80181dc:	1ad3      	subs	r3, r2, r3
 80181de:	b29b      	uxth	r3, r3
 80181e0:	e008      	b.n	80181f4 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80181e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80181e4:	005b      	lsls	r3, r3, #1
 80181e6:	b29a      	uxth	r2, r3
 80181e8:	8c39      	ldrh	r1, [r7, #32]
 80181ea:	8bfb      	ldrh	r3, [r7, #30]
 80181ec:	1acb      	subs	r3, r1, r3
 80181ee:	b29b      	uxth	r3, r3
 80181f0:	4413      	add	r3, r2
 80181f2:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80181f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 80181f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d101      	bne.n	8018200 <_tu_fifo_peek_n+0x54>
 80181fc:	2300      	movs	r3, #0
 80181fe:	e041      	b.n	8018284 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	889b      	ldrh	r3, [r3, #4]
 8018204:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018206:	429a      	cmp	r2, r3
 8018208:	d91b      	bls.n	8018242 <_tu_fifo_peek_n+0x96>
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	61bb      	str	r3, [r7, #24]
 801820e:	88bb      	ldrh	r3, [r7, #4]
 8018210:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8018212:	69bb      	ldr	r3, [r7, #24]
 8018214:	889b      	ldrh	r3, [r3, #4]
 8018216:	8afa      	ldrh	r2, [r7, #22]
 8018218:	429a      	cmp	r2, r3
 801821a:	d305      	bcc.n	8018228 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 801821c:	69bb      	ldr	r3, [r7, #24]
 801821e:	889b      	ldrh	r3, [r3, #4]
 8018220:	8afa      	ldrh	r2, [r7, #22]
 8018222:	1ad3      	subs	r3, r2, r3
 8018224:	82bb      	strh	r3, [r7, #20]
 8018226:	e004      	b.n	8018232 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8018228:	69bb      	ldr	r3, [r7, #24]
 801822a:	889a      	ldrh	r2, [r3, #4]
 801822c:	8afb      	ldrh	r3, [r7, #22]
 801822e:	4413      	add	r3, r2
 8018230:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8018232:	69bb      	ldr	r3, [r7, #24]
 8018234:	8aba      	ldrh	r2, [r7, #20]
 8018236:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8018238:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 801823a:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	889b      	ldrh	r3, [r3, #4]
 8018240:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8018242:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018244:	88fb      	ldrh	r3, [r7, #6]
 8018246:	429a      	cmp	r2, r3
 8018248:	d201      	bcs.n	801824e <_tu_fifo_peek_n+0xa2>
 801824a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801824c:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	889b      	ldrh	r3, [r3, #4]
 8018252:	827b      	strh	r3, [r7, #18]
 8018254:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8018256:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8018258:	e003      	b.n	8018262 <_tu_fifo_peek_n+0xb6>
 801825a:	8a3a      	ldrh	r2, [r7, #16]
 801825c:	8a7b      	ldrh	r3, [r7, #18]
 801825e:	1ad3      	subs	r3, r2, r3
 8018260:	823b      	strh	r3, [r7, #16]
 8018262:	8a7a      	ldrh	r2, [r7, #18]
 8018264:	8a3b      	ldrh	r3, [r7, #16]
 8018266:	429a      	cmp	r2, r3
 8018268:	d9f7      	bls.n	801825a <_tu_fifo_peek_n+0xae>
  return idx;
 801826a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 801826c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 801826e:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8018270:	88fa      	ldrh	r2, [r7, #6]
 8018272:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8018276:	9300      	str	r3, [sp, #0]
 8018278:	460b      	mov	r3, r1
 801827a:	68b9      	ldr	r1, [r7, #8]
 801827c:	68f8      	ldr	r0, [r7, #12]
 801827e:	f7ff fe29 	bl	8017ed4 <_ff_pull_n>

  return n;
 8018282:	88fb      	ldrh	r3, [r7, #6]
}
 8018284:	4618      	mov	r0, r3
 8018286:	3728      	adds	r7, #40	@ 0x28
 8018288:	46bd      	mov	sp, r7
 801828a:	bd80      	pop	{r7, pc}

0801828c <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 801828c:	b580      	push	{r7, lr}
 801828e:	b092      	sub	sp, #72	@ 0x48
 8018290:	af02      	add	r7, sp, #8
 8018292:	60f8      	str	r0, [r7, #12]
 8018294:	60b9      	str	r1, [r7, #8]
 8018296:	4611      	mov	r1, r2
 8018298:	461a      	mov	r2, r3
 801829a:	460b      	mov	r3, r1
 801829c:	80fb      	strh	r3, [r7, #6]
 801829e:	4613      	mov	r3, r2
 80182a0:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80182a2:	88fb      	ldrh	r3, [r7, #6]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d101      	bne.n	80182ac <_tu_fifo_write_n+0x20>
 80182a8:	2300      	movs	r3, #0
 80182aa:	e0bc      	b.n	8018426 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	891b      	ldrh	r3, [r3, #8]
 80182b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	895b      	ldrh	r3, [r3, #10]
 80182b6:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 80182b8:	68bb      	ldr	r3, [r7, #8]
 80182ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	79db      	ldrb	r3, [r3, #7]
 80182c0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80182c4:	b2db      	uxtb	r3, r3
 80182c6:	f083 0301 	eor.w	r3, r3, #1
 80182ca:	b2db      	uxtb	r3, r3
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d036      	beq.n	801833e <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	889b      	ldrh	r3, [r3, #4]
 80182d4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80182d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80182d8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80182da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80182dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80182de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80182e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80182e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80182e4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80182e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80182e8:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 80182ea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80182ec:	8c3b      	ldrh	r3, [r7, #32]
 80182ee:	429a      	cmp	r2, r3
 80182f0:	d304      	bcc.n	80182fc <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 80182f2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80182f4:	8c3b      	ldrh	r3, [r7, #32]
 80182f6:	1ad3      	subs	r3, r2, r3
 80182f8:	b29b      	uxth	r3, r3
 80182fa:	e008      	b.n	801830e <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80182fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80182fe:	005b      	lsls	r3, r3, #1
 8018300:	b29a      	uxth	r2, r3
 8018302:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8018304:	8c3b      	ldrh	r3, [r7, #32]
 8018306:	1acb      	subs	r3, r1, r3
 8018308:	b29b      	uxth	r3, r3
 801830a:	4413      	add	r3, r2
 801830c:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 801830e:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8018310:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8018312:	8bfb      	ldrh	r3, [r7, #30]
 8018314:	429a      	cmp	r2, r3
 8018316:	d904      	bls.n	8018322 <_tu_fifo_write_n+0x96>
 8018318:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 801831a:	8bfb      	ldrh	r3, [r7, #30]
 801831c:	1ad3      	subs	r3, r2, r3
 801831e:	b29b      	uxth	r3, r3
 8018320:	e000      	b.n	8018324 <_tu_fifo_write_n+0x98>
 8018322:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8018324:	867b      	strh	r3, [r7, #50]	@ 0x32
 8018326:	88fb      	ldrh	r3, [r7, #6]
 8018328:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801832a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801832c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 801832e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8018330:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018332:	4293      	cmp	r3, r2
 8018334:	bf28      	it	cs
 8018336:	4613      	movcs	r3, r2
 8018338:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 801833a:	80fb      	strh	r3, [r7, #6]
 801833c:	e04b      	b.n	80183d6 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	889b      	ldrh	r3, [r3, #4]
 8018342:	88fa      	ldrh	r2, [r7, #6]
 8018344:	429a      	cmp	r2, r3
 8018346:	d317      	bcc.n	8018378 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8018348:	797b      	ldrb	r3, [r7, #5]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d10e      	bne.n	801836c <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 801834e:	88fb      	ldrh	r3, [r7, #6]
 8018350:	68fa      	ldr	r2, [r7, #12]
 8018352:	8892      	ldrh	r2, [r2, #4]
 8018354:	1a9b      	subs	r3, r3, r2
 8018356:	68fa      	ldr	r2, [r7, #12]
 8018358:	88d2      	ldrh	r2, [r2, #6]
 801835a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801835e:	b292      	uxth	r2, r2
 8018360:	fb02 f303 	mul.w	r3, r2, r3
 8018364:	461a      	mov	r2, r3
 8018366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018368:	4413      	add	r3, r2
 801836a:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	889b      	ldrh	r3, [r3, #4]
 8018370:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8018372:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018374:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8018376:	e02e      	b.n	80183d6 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	889b      	ldrh	r3, [r3, #4]
 801837c:	83bb      	strh	r3, [r7, #28]
 801837e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018380:	837b      	strh	r3, [r7, #26]
 8018382:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018384:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8018386:	8b7a      	ldrh	r2, [r7, #26]
 8018388:	8b3b      	ldrh	r3, [r7, #24]
 801838a:	429a      	cmp	r2, r3
 801838c:	d304      	bcc.n	8018398 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 801838e:	8b7a      	ldrh	r2, [r7, #26]
 8018390:	8b3b      	ldrh	r3, [r7, #24]
 8018392:	1ad3      	subs	r3, r2, r3
 8018394:	b29b      	uxth	r3, r3
 8018396:	e008      	b.n	80183aa <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8018398:	8bbb      	ldrh	r3, [r7, #28]
 801839a:	005b      	lsls	r3, r3, #1
 801839c:	b29a      	uxth	r2, r3
 801839e:	8b79      	ldrh	r1, [r7, #26]
 80183a0:	8b3b      	ldrh	r3, [r7, #24]
 80183a2:	1acb      	subs	r3, r1, r3
 80183a4:	b29b      	uxth	r3, r3
 80183a6:	4413      	add	r3, r2
 80183a8:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80183aa:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 80183ac:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80183ae:	88fb      	ldrh	r3, [r7, #6]
 80183b0:	441a      	add	r2, r3
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	889b      	ldrh	r3, [r3, #4]
 80183b6:	005b      	lsls	r3, r3, #1
 80183b8:	429a      	cmp	r2, r3
 80183ba:	db0c      	blt.n	80183d6 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	8898      	ldrh	r0, [r3, #4]
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	889a      	ldrh	r2, [r3, #4]
 80183c4:	88fb      	ldrh	r3, [r7, #6]
 80183c6:	1ad3      	subs	r3, r2, r3
 80183c8:	b29a      	uxth	r2, r3
 80183ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80183cc:	4619      	mov	r1, r3
 80183ce:	f7ff fe61 	bl	8018094 <advance_index>
 80183d2:	4603      	mov	r3, r0
 80183d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 80183d6:	88fb      	ldrh	r3, [r7, #6]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d023      	beq.n	8018424 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	889b      	ldrh	r3, [r3, #4]
 80183e0:	82fb      	strh	r3, [r7, #22]
 80183e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80183e4:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 80183e6:	e003      	b.n	80183f0 <_tu_fifo_write_n+0x164>
 80183e8:	8aba      	ldrh	r2, [r7, #20]
 80183ea:	8afb      	ldrh	r3, [r7, #22]
 80183ec:	1ad3      	subs	r3, r2, r3
 80183ee:	82bb      	strh	r3, [r7, #20]
 80183f0:	8afa      	ldrh	r2, [r7, #22]
 80183f2:	8abb      	ldrh	r3, [r7, #20]
 80183f4:	429a      	cmp	r2, r3
 80183f6:	d9f7      	bls.n	80183e8 <_tu_fifo_write_n+0x15c>
  return idx;
 80183f8:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80183fa:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 80183fc:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80183fe:	88fa      	ldrh	r2, [r7, #6]
 8018400:	797b      	ldrb	r3, [r7, #5]
 8018402:	9300      	str	r3, [sp, #0]
 8018404:	460b      	mov	r3, r1
 8018406:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018408:	68f8      	ldr	r0, [r7, #12]
 801840a:	f7ff fc66 	bl	8017cda <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	889b      	ldrh	r3, [r3, #4]
 8018412:	88fa      	ldrh	r2, [r7, #6]
 8018414:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8018416:	4618      	mov	r0, r3
 8018418:	f7ff fe3c 	bl	8018094 <advance_index>
 801841c:	4603      	mov	r3, r0
 801841e:	461a      	mov	r2, r3
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8018424:	88fb      	ldrh	r3, [r7, #6]
}
 8018426:	4618      	mov	r0, r3
 8018428:	3740      	adds	r7, #64	@ 0x40
 801842a:	46bd      	mov	sp, r7
 801842c:	bd80      	pop	{r7, pc}

0801842e <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 801842e:	b580      	push	{r7, lr}
 8018430:	b086      	sub	sp, #24
 8018432:	af02      	add	r7, sp, #8
 8018434:	60f8      	str	r0, [r7, #12]
 8018436:	60b9      	str	r1, [r7, #8]
 8018438:	4611      	mov	r1, r2
 801843a:	461a      	mov	r2, r3
 801843c:	460b      	mov	r3, r1
 801843e:	80fb      	strh	r3, [r7, #6]
 8018440:	4613      	mov	r3, r2
 8018442:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	891b      	ldrh	r3, [r3, #8]
 8018448:	b298      	uxth	r0, r3
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	895b      	ldrh	r3, [r3, #10]
 801844e:	b29b      	uxth	r3, r3
 8018450:	88f9      	ldrh	r1, [r7, #6]
 8018452:	797a      	ldrb	r2, [r7, #5]
 8018454:	9201      	str	r2, [sp, #4]
 8018456:	9300      	str	r3, [sp, #0]
 8018458:	4603      	mov	r3, r0
 801845a:	460a      	mov	r2, r1
 801845c:	68b9      	ldr	r1, [r7, #8]
 801845e:	68f8      	ldr	r0, [r7, #12]
 8018460:	f7ff fea4 	bl	80181ac <_tu_fifo_peek_n>
 8018464:	4603      	mov	r3, r0
 8018466:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	8898      	ldrh	r0, [r3, #4]
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	895b      	ldrh	r3, [r3, #10]
 8018470:	b29b      	uxth	r3, r3
 8018472:	88fa      	ldrh	r2, [r7, #6]
 8018474:	4619      	mov	r1, r3
 8018476:	f7ff fe0d 	bl	8018094 <advance_index>
 801847a:	4603      	mov	r3, r0
 801847c:	461a      	mov	r2, r3
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8018482:	88fb      	ldrh	r3, [r7, #6]
}
 8018484:	4618      	mov	r0, r3
 8018486:	3710      	adds	r7, #16
 8018488:	46bd      	mov	sp, r7
 801848a:	bd80      	pop	{r7, pc}

0801848c <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 801848c:	b480      	push	{r7}
 801848e:	b087      	sub	sp, #28
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	8899      	ldrh	r1, [r3, #4]
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	891b      	ldrh	r3, [r3, #8]
 801849c:	b29a      	uxth	r2, r3
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	895b      	ldrh	r3, [r3, #10]
 80184a2:	b29b      	uxth	r3, r3
 80184a4:	8279      	strh	r1, [r7, #18]
 80184a6:	823a      	strh	r2, [r7, #16]
 80184a8:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 80184aa:	8a3a      	ldrh	r2, [r7, #16]
 80184ac:	89fb      	ldrh	r3, [r7, #14]
 80184ae:	429a      	cmp	r2, r3
 80184b0:	d304      	bcc.n	80184bc <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80184b2:	8a3a      	ldrh	r2, [r7, #16]
 80184b4:	89fb      	ldrh	r3, [r7, #14]
 80184b6:	1ad3      	subs	r3, r2, r3
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	e008      	b.n	80184ce <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80184bc:	8a7b      	ldrh	r3, [r7, #18]
 80184be:	005b      	lsls	r3, r3, #1
 80184c0:	b29a      	uxth	r2, r3
 80184c2:	8a39      	ldrh	r1, [r7, #16]
 80184c4:	89fb      	ldrh	r3, [r7, #14]
 80184c6:	1acb      	subs	r3, r1, r3
 80184c8:	b29b      	uxth	r3, r3
 80184ca:	4413      	add	r3, r2
 80184cc:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80184ce:	687a      	ldr	r2, [r7, #4]
 80184d0:	8892      	ldrh	r2, [r2, #4]
 80184d2:	82fb      	strh	r3, [r7, #22]
 80184d4:	4613      	mov	r3, r2
 80184d6:	82bb      	strh	r3, [r7, #20]
 80184d8:	8afa      	ldrh	r2, [r7, #22]
 80184da:	8abb      	ldrh	r3, [r7, #20]
 80184dc:	4293      	cmp	r3, r2
 80184de:	bf28      	it	cs
 80184e0:	4613      	movcs	r3, r2
 80184e2:	b29b      	uxth	r3, r3
}
 80184e4:	4618      	mov	r0, r3
 80184e6:	371c      	adds	r7, #28
 80184e8:	46bd      	mov	sp, r7
 80184ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ee:	4770      	bx	lr

080184f0 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 80184f0:	b480      	push	{r7}
 80184f2:	b083      	sub	sp, #12
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	891b      	ldrh	r3, [r3, #8]
 80184fc:	b29a      	uxth	r2, r3
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	895b      	ldrh	r3, [r3, #10]
 8018502:	b29b      	uxth	r3, r3
 8018504:	429a      	cmp	r2, r3
 8018506:	bf0c      	ite	eq
 8018508:	2301      	moveq	r3, #1
 801850a:	2300      	movne	r3, #0
 801850c:	b2db      	uxtb	r3, r3
}
 801850e:	4618      	mov	r0, r3
 8018510:	370c      	adds	r7, #12
 8018512:	46bd      	mov	sp, r7
 8018514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018518:	4770      	bx	lr

0801851a <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 801851a:	b480      	push	{r7}
 801851c:	b085      	sub	sp, #20
 801851e:	af00      	add	r7, sp, #0
 8018520:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	8899      	ldrh	r1, [r3, #4]
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	891b      	ldrh	r3, [r3, #8]
 801852a:	b29a      	uxth	r2, r3
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	895b      	ldrh	r3, [r3, #10]
 8018530:	b29b      	uxth	r3, r3
 8018532:	81f9      	strh	r1, [r7, #14]
 8018534:	81ba      	strh	r2, [r7, #12]
 8018536:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8018538:	89ba      	ldrh	r2, [r7, #12]
 801853a:	897b      	ldrh	r3, [r7, #10]
 801853c:	429a      	cmp	r2, r3
 801853e:	d304      	bcc.n	801854a <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8018540:	89ba      	ldrh	r2, [r7, #12]
 8018542:	897b      	ldrh	r3, [r7, #10]
 8018544:	1ad3      	subs	r3, r2, r3
 8018546:	b29b      	uxth	r3, r3
 8018548:	e008      	b.n	801855c <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 801854a:	89fb      	ldrh	r3, [r7, #14]
 801854c:	005b      	lsls	r3, r3, #1
 801854e:	b29a      	uxth	r2, r3
 8018550:	89b9      	ldrh	r1, [r7, #12]
 8018552:	897b      	ldrh	r3, [r7, #10]
 8018554:	1acb      	subs	r3, r1, r3
 8018556:	b29b      	uxth	r3, r3
 8018558:	4413      	add	r3, r2
 801855a:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 801855c:	687a      	ldr	r2, [r7, #4]
 801855e:	8892      	ldrh	r2, [r2, #4]
 8018560:	4293      	cmp	r3, r2
 8018562:	bf2c      	ite	cs
 8018564:	2301      	movcs	r3, #1
 8018566:	2300      	movcc	r3, #0
 8018568:	b2db      	uxtb	r3, r3
}
 801856a:	4618      	mov	r0, r3
 801856c:	3714      	adds	r7, #20
 801856e:	46bd      	mov	sp, r7
 8018570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018574:	4770      	bx	lr

08018576 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8018576:	b480      	push	{r7}
 8018578:	b087      	sub	sp, #28
 801857a:	af00      	add	r7, sp, #0
 801857c:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	8899      	ldrh	r1, [r3, #4]
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	891b      	ldrh	r3, [r3, #8]
 8018586:	b29a      	uxth	r2, r3
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	895b      	ldrh	r3, [r3, #10]
 801858c:	b29b      	uxth	r3, r3
 801858e:	82f9      	strh	r1, [r7, #22]
 8018590:	82ba      	strh	r2, [r7, #20]
 8018592:	827b      	strh	r3, [r7, #18]
 8018594:	8afb      	ldrh	r3, [r7, #22]
 8018596:	823b      	strh	r3, [r7, #16]
 8018598:	8abb      	ldrh	r3, [r7, #20]
 801859a:	81fb      	strh	r3, [r7, #14]
 801859c:	8a7b      	ldrh	r3, [r7, #18]
 801859e:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 80185a0:	89fa      	ldrh	r2, [r7, #14]
 80185a2:	89bb      	ldrh	r3, [r7, #12]
 80185a4:	429a      	cmp	r2, r3
 80185a6:	d304      	bcc.n	80185b2 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 80185a8:	89fa      	ldrh	r2, [r7, #14]
 80185aa:	89bb      	ldrh	r3, [r7, #12]
 80185ac:	1ad3      	subs	r3, r2, r3
 80185ae:	b29b      	uxth	r3, r3
 80185b0:	e008      	b.n	80185c4 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80185b2:	8a3b      	ldrh	r3, [r7, #16]
 80185b4:	005b      	lsls	r3, r3, #1
 80185b6:	b29a      	uxth	r2, r3
 80185b8:	89f9      	ldrh	r1, [r7, #14]
 80185ba:	89bb      	ldrh	r3, [r7, #12]
 80185bc:	1acb      	subs	r3, r1, r3
 80185be:	b29b      	uxth	r3, r3
 80185c0:	4413      	add	r3, r2
 80185c2:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80185c4:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 80185c6:	8afa      	ldrh	r2, [r7, #22]
 80185c8:	897b      	ldrh	r3, [r7, #10]
 80185ca:	429a      	cmp	r2, r3
 80185cc:	d904      	bls.n	80185d8 <tu_fifo_remaining+0x62>
 80185ce:	8afa      	ldrh	r2, [r7, #22]
 80185d0:	897b      	ldrh	r3, [r7, #10]
 80185d2:	1ad3      	subs	r3, r2, r3
 80185d4:	b29b      	uxth	r3, r3
 80185d6:	e000      	b.n	80185da <tu_fifo_remaining+0x64>
 80185d8:	2300      	movs	r3, #0
}
 80185da:	4618      	mov	r0, r3
 80185dc:	371c      	adds	r7, #28
 80185de:	46bd      	mov	sp, r7
 80185e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185e4:	4770      	bx	lr

080185e6 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 80185e6:	b580      	push	{r7, lr}
 80185e8:	b084      	sub	sp, #16
 80185ea:	af00      	add	r7, sp, #0
 80185ec:	6078      	str	r0, [r7, #4]
 80185ee:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	891b      	ldrh	r3, [r3, #8]
 80185f4:	b29a      	uxth	r2, r3
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	895b      	ldrh	r3, [r3, #10]
 80185fa:	b29b      	uxth	r3, r3
 80185fc:	6839      	ldr	r1, [r7, #0]
 80185fe:	6878      	ldr	r0, [r7, #4]
 8018600:	f7ff fd6e 	bl	80180e0 <_tu_fifo_peek>
 8018604:	4603      	mov	r3, r0
 8018606:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	8898      	ldrh	r0, [r3, #4]
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	895b      	ldrh	r3, [r3, #10]
 8018610:	b29b      	uxth	r3, r3
 8018612:	7bfa      	ldrb	r2, [r7, #15]
 8018614:	b292      	uxth	r2, r2
 8018616:	4619      	mov	r1, r3
 8018618:	f7ff fd3c 	bl	8018094 <advance_index>
 801861c:	4603      	mov	r3, r0
 801861e:	461a      	mov	r2, r3
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8018624:	7bfb      	ldrb	r3, [r7, #15]
}
 8018626:	4618      	mov	r0, r3
 8018628:	3710      	adds	r7, #16
 801862a:	46bd      	mov	sp, r7
 801862c:	bd80      	pop	{r7, pc}

0801862e <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 801862e:	b580      	push	{r7, lr}
 8018630:	b084      	sub	sp, #16
 8018632:	af00      	add	r7, sp, #0
 8018634:	60f8      	str	r0, [r7, #12]
 8018636:	60b9      	str	r1, [r7, #8]
 8018638:	4613      	mov	r3, r2
 801863a:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 801863c:	88fa      	ldrh	r2, [r7, #6]
 801863e:	2300      	movs	r3, #0
 8018640:	68b9      	ldr	r1, [r7, #8]
 8018642:	68f8      	ldr	r0, [r7, #12]
 8018644:	f7ff fef3 	bl	801842e <_tu_fifo_read_n>
 8018648:	4603      	mov	r3, r0
}
 801864a:	4618      	mov	r0, r3
 801864c:	3710      	adds	r7, #16
 801864e:	46bd      	mov	sp, r7
 8018650:	bd80      	pop	{r7, pc}

08018652 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8018652:	b580      	push	{r7, lr}
 8018654:	b084      	sub	sp, #16
 8018656:	af00      	add	r7, sp, #0
 8018658:	60f8      	str	r0, [r7, #12]
 801865a:	60b9      	str	r1, [r7, #8]
 801865c:	4613      	mov	r3, r2
 801865e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8018660:	88fa      	ldrh	r2, [r7, #6]
 8018662:	2301      	movs	r3, #1
 8018664:	68b9      	ldr	r1, [r7, #8]
 8018666:	68f8      	ldr	r0, [r7, #12]
 8018668:	f7ff fee1 	bl	801842e <_tu_fifo_read_n>
 801866c:	4603      	mov	r3, r0
}
 801866e:	4618      	mov	r0, r3
 8018670:	3710      	adds	r7, #16
 8018672:	46bd      	mov	sp, r7
 8018674:	bd80      	pop	{r7, pc}

08018676 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8018676:	b580      	push	{r7, lr}
 8018678:	b086      	sub	sp, #24
 801867a:	af00      	add	r7, sp, #0
 801867c:	6078      	str	r0, [r7, #4]
 801867e:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	891b      	ldrh	r3, [r3, #8]
 8018684:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8018686:	6878      	ldr	r0, [r7, #4]
 8018688:	f7ff ff47 	bl	801851a <tu_fifo_full>
 801868c:	4603      	mov	r3, r0
 801868e:	2b00      	cmp	r3, #0
 8018690:	d00c      	beq.n	80186ac <tu_fifo_write+0x36>
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	79db      	ldrb	r3, [r3, #7]
 8018696:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801869a:	b2db      	uxtb	r3, r3
 801869c:	f083 0301 	eor.w	r3, r3, #1
 80186a0:	b2db      	uxtb	r3, r3
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d002      	beq.n	80186ac <tu_fifo_write+0x36>
  {
    ret = false;
 80186a6:	2300      	movs	r3, #0
 80186a8:	75fb      	strb	r3, [r7, #23]
 80186aa:	e022      	b.n	80186f2 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	889b      	ldrh	r3, [r3, #4]
 80186b0:	823b      	strh	r3, [r7, #16]
 80186b2:	8abb      	ldrh	r3, [r7, #20]
 80186b4:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 80186b6:	e003      	b.n	80186c0 <tu_fifo_write+0x4a>
 80186b8:	89fa      	ldrh	r2, [r7, #14]
 80186ba:	8a3b      	ldrh	r3, [r7, #16]
 80186bc:	1ad3      	subs	r3, r2, r3
 80186be:	81fb      	strh	r3, [r7, #14]
 80186c0:	8a3a      	ldrh	r2, [r7, #16]
 80186c2:	89fb      	ldrh	r3, [r7, #14]
 80186c4:	429a      	cmp	r2, r3
 80186c6:	d9f7      	bls.n	80186b8 <tu_fifo_write+0x42>
  return idx;
 80186c8:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80186ca:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 80186cc:	8a7b      	ldrh	r3, [r7, #18]
 80186ce:	461a      	mov	r2, r3
 80186d0:	6839      	ldr	r1, [r7, #0]
 80186d2:	6878      	ldr	r0, [r7, #4]
 80186d4:	f7ff fae2 	bl	8017c9c <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	889b      	ldrh	r3, [r3, #4]
 80186dc:	8ab9      	ldrh	r1, [r7, #20]
 80186de:	2201      	movs	r2, #1
 80186e0:	4618      	mov	r0, r3
 80186e2:	f7ff fcd7 	bl	8018094 <advance_index>
 80186e6:	4603      	mov	r3, r0
 80186e8:	461a      	mov	r2, r3
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	811a      	strh	r2, [r3, #8]

    ret = true;
 80186ee:	2301      	movs	r3, #1
 80186f0:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 80186f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80186f4:	4618      	mov	r0, r3
 80186f6:	3718      	adds	r7, #24
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd80      	pop	{r7, pc}

080186fc <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b084      	sub	sp, #16
 8018700:	af00      	add	r7, sp, #0
 8018702:	60f8      	str	r0, [r7, #12]
 8018704:	60b9      	str	r1, [r7, #8]
 8018706:	4613      	mov	r3, r2
 8018708:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 801870a:	88fa      	ldrh	r2, [r7, #6]
 801870c:	2300      	movs	r3, #0
 801870e:	68b9      	ldr	r1, [r7, #8]
 8018710:	68f8      	ldr	r0, [r7, #12]
 8018712:	f7ff fdbb 	bl	801828c <_tu_fifo_write_n>
 8018716:	4603      	mov	r3, r0
}
 8018718:	4618      	mov	r0, r3
 801871a:	3710      	adds	r7, #16
 801871c:	46bd      	mov	sp, r7
 801871e:	bd80      	pop	{r7, pc}

08018720 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b084      	sub	sp, #16
 8018724:	af00      	add	r7, sp, #0
 8018726:	60f8      	str	r0, [r7, #12]
 8018728:	60b9      	str	r1, [r7, #8]
 801872a:	4613      	mov	r3, r2
 801872c:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 801872e:	88fa      	ldrh	r2, [r7, #6]
 8018730:	2301      	movs	r3, #1
 8018732:	68b9      	ldr	r1, [r7, #8]
 8018734:	68f8      	ldr	r0, [r7, #12]
 8018736:	f7ff fda9 	bl	801828c <_tu_fifo_write_n>
 801873a:	4603      	mov	r3, r0
}
 801873c:	4618      	mov	r0, r3
 801873e:	3710      	adds	r7, #16
 8018740:	46bd      	mov	sp, r7
 8018742:	bd80      	pop	{r7, pc}

08018744 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8018744:	b480      	push	{r7}
 8018746:	b083      	sub	sp, #12
 8018748:	af00      	add	r7, sp, #0
 801874a:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	2200      	movs	r2, #0
 8018750:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	2200      	movs	r2, #0
 8018756:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8018758:	2301      	movs	r3, #1
}
 801875a:	4618      	mov	r0, r3
 801875c:	370c      	adds	r7, #12
 801875e:	46bd      	mov	sp, r7
 8018760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018764:	4770      	bx	lr

08018766 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8018766:	b480      	push	{r7}
 8018768:	b083      	sub	sp, #12
 801876a:	af00      	add	r7, sp, #0
 801876c:	6078      	str	r0, [r7, #4]
 801876e:	460b      	mov	r3, r1
 8018770:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8018772:	687a      	ldr	r2, [r7, #4]
 8018774:	79d3      	ldrb	r3, [r2, #7]
 8018776:	78f9      	ldrb	r1, [r7, #3]
 8018778:	f361 13c7 	bfi	r3, r1, #7, #1
 801877c:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 801877e:	2301      	movs	r3, #1
}
 8018780:	4618      	mov	r0, r3
 8018782:	370c      	adds	r7, #12
 8018784:	46bd      	mov	sp, r7
 8018786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801878a:	4770      	bx	lr

0801878c <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 801878c:	b480      	push	{r7}
 801878e:	b083      	sub	sp, #12
 8018790:	af00      	add	r7, sp, #0
 8018792:	4603      	mov	r3, r0
 8018794:	6039      	str	r1, [r7, #0]
 8018796:	71fb      	strb	r3, [r7, #7]
 8018798:	4613      	mov	r3, r2
 801879a:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 801879c:	bf00      	nop
 801879e:	370c      	adds	r7, #12
 80187a0:	46bd      	mov	sp, r7
 80187a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187a6:	4770      	bx	lr

080187a8 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 80187a8:	b480      	push	{r7}
 80187aa:	b083      	sub	sp, #12
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 80187b0:	bf00      	nop
 80187b2:	370c      	adds	r7, #12
 80187b4:	46bd      	mov	sp, r7
 80187b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ba:	4770      	bx	lr

080187bc <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 80187bc:	b480      	push	{r7}
 80187be:	af00      	add	r7, sp, #0
  return NULL;
 80187c0:	2300      	movs	r3, #0
}
 80187c2:	4618      	mov	r0, r3
 80187c4:	46bd      	mov	sp, r7
 80187c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ca:	4770      	bx	lr

080187cc <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 80187cc:	b480      	push	{r7}
 80187ce:	af00      	add	r7, sp, #0
  return NULL;
 80187d0:	2300      	movs	r3, #0
}
 80187d2:	4618      	mov	r0, r3
 80187d4:	46bd      	mov	sp, r7
 80187d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187da:	4770      	bx	lr

080187dc <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 80187dc:	b480      	push	{r7}
 80187de:	b083      	sub	sp, #12
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	4603      	mov	r3, r0
 80187e4:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 80187e6:	2300      	movs	r3, #0
}
 80187e8:	4618      	mov	r0, r3
 80187ea:	370c      	adds	r7, #12
 80187ec:	46bd      	mov	sp, r7
 80187ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f2:	4770      	bx	lr

080187f4 <tud_suspend_cb>:
}

TU_ATTR_WEAK void tud_umount_cb(void) {
}

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 80187f4:	b480      	push	{r7}
 80187f6:	b083      	sub	sp, #12
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	4603      	mov	r3, r0
 80187fc:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 80187fe:	bf00      	nop
 8018800:	370c      	adds	r7, #12
 8018802:	46bd      	mov	sp, r7
 8018804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018808:	4770      	bx	lr

0801880a <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 801880a:	b480      	push	{r7}
 801880c:	af00      	add	r7, sp, #0
}
 801880e:	bf00      	nop
 8018810:	46bd      	mov	sp, r7
 8018812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018816:	4770      	bx	lr

08018818 <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8018818:	b480      	push	{r7}
 801881a:	b083      	sub	sp, #12
 801881c:	af00      	add	r7, sp, #0
 801881e:	4603      	mov	r3, r0
 8018820:	603a      	str	r2, [r7, #0]
 8018822:	71fb      	strb	r3, [r7, #7]
 8018824:	460b      	mov	r3, r1
 8018826:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8018828:	2300      	movs	r3, #0
}
 801882a:	4618      	mov	r0, r3
 801882c:	370c      	adds	r7, #12
 801882e:	46bd      	mov	sp, r7
 8018830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018834:	4770      	bx	lr

08018836 <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8018836:	b480      	push	{r7}
 8018838:	b083      	sub	sp, #12
 801883a:	af00      	add	r7, sp, #0
 801883c:	6078      	str	r0, [r7, #4]
 801883e:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8018840:	2301      	movs	r3, #1
}
 8018842:	4618      	mov	r0, r3
 8018844:	370c      	adds	r7, #12
 8018846:	46bd      	mov	sp, r7
 8018848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801884c:	4770      	bx	lr
	...

08018850 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8018850:	b480      	push	{r7}
 8018852:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8018854:	4b06      	ldr	r3, [pc, #24]	@ (8018870 <tud_mounted+0x20>)
 8018856:	785b      	ldrb	r3, [r3, #1]
 8018858:	b2db      	uxtb	r3, r3
 801885a:	2b00      	cmp	r3, #0
 801885c:	bf14      	ite	ne
 801885e:	2301      	movne	r3, #1
 8018860:	2300      	moveq	r3, #0
 8018862:	b2db      	uxtb	r3, r3
}
 8018864:	4618      	mov	r0, r3
 8018866:	46bd      	mov	sp, r7
 8018868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801886c:	4770      	bx	lr
 801886e:	bf00      	nop
 8018870:	240089bc 	.word	0x240089bc

08018874 <tud_suspended>:

bool tud_suspended(void) {
 8018874:	b480      	push	{r7}
 8018876:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8018878:	4b07      	ldr	r3, [pc, #28]	@ (8018898 <tud_suspended+0x24>)
 801887a:	781b      	ldrb	r3, [r3, #0]
 801887c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018880:	b2db      	uxtb	r3, r3
 8018882:	2b00      	cmp	r3, #0
 8018884:	bf14      	ite	ne
 8018886:	2301      	movne	r3, #1
 8018888:	2300      	moveq	r3, #0
 801888a:	b2db      	uxtb	r3, r3
}
 801888c:	4618      	mov	r0, r3
 801888e:	46bd      	mov	sp, r7
 8018890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018894:	4770      	bx	lr
 8018896:	bf00      	nop
 8018898:	240089bc 	.word	0x240089bc

0801889c <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 801889c:	b480      	push	{r7}
 801889e:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 80188a0:	4b05      	ldr	r3, [pc, #20]	@ (80188b8 <tud_inited+0x1c>)
 80188a2:	781b      	ldrb	r3, [r3, #0]
 80188a4:	2bff      	cmp	r3, #255	@ 0xff
 80188a6:	bf14      	ite	ne
 80188a8:	2301      	movne	r3, #1
 80188aa:	2300      	moveq	r3, #0
 80188ac:	b2db      	uxtb	r3, r3
}
 80188ae:	4618      	mov	r0, r3
 80188b0:	46bd      	mov	sp, r7
 80188b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b6:	4770      	bx	lr
 80188b8:	24000022 	.word	0x24000022

080188bc <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 80188bc:	b580      	push	{r7, lr}
 80188be:	b08c      	sub	sp, #48	@ 0x30
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	4603      	mov	r3, r0
 80188c4:	6039      	str	r1, [r7, #0]
 80188c6:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 80188c8:	f7ff ffe8 	bl	801889c <tud_inited>
 80188cc:	4603      	mov	r3, r0
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d001      	beq.n	80188d6 <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 80188d2:	2301      	movs	r3, #1
 80188d4:	e099      	b.n	8018a0a <tud_rhport_init+0x14e>
  }
  TU_ASSERT(rh_init);
 80188d6:	683b      	ldr	r3, [r7, #0]
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d10a      	bne.n	80188f2 <tud_rhport_init+0x36>
 80188dc:	4b4d      	ldr	r3, [pc, #308]	@ (8018a14 <tud_rhport_init+0x158>)
 80188de:	61bb      	str	r3, [r7, #24]
 80188e0:	69bb      	ldr	r3, [r7, #24]
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	f003 0301 	and.w	r3, r3, #1
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d000      	beq.n	80188ee <tud_rhport_init+0x32>
 80188ec:	be00      	bkpt	0x0000
 80188ee:	2300      	movs	r3, #0
 80188f0:	e08b      	b.n	8018a0a <tud_rhport_init+0x14e>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 80188f2:	2238      	movs	r2, #56	@ 0x38
 80188f4:	2100      	movs	r1, #0
 80188f6:	4848      	ldr	r0, [pc, #288]	@ (8018a18 <tud_rhport_init+0x15c>)
 80188f8:	f006 fdfc 	bl	801f4f4 <memset>
  _usbd_queued_setup = 0;
 80188fc:	4b47      	ldr	r3, [pc, #284]	@ (8018a1c <tud_rhport_init+0x160>)
 80188fe:	2200      	movs	r2, #0
 8018900:	701a      	strb	r2, [r3, #0]
 8018902:	4b47      	ldr	r3, [pc, #284]	@ (8018a20 <tud_rhport_init+0x164>)
 8018904:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8018906:	697b      	ldr	r3, [r7, #20]
 8018908:	3304      	adds	r3, #4
 801890a:	4618      	mov	r0, r3
 801890c:	f7ff ff1a 	bl	8018744 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8018910:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8018912:	4a44      	ldr	r2, [pc, #272]	@ (8018a24 <tud_rhport_init+0x168>)
 8018914:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8018916:	4b43      	ldr	r3, [pc, #268]	@ (8018a24 <tud_rhport_init+0x168>)
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d10a      	bne.n	8018934 <tud_rhport_init+0x78>
 801891e:	4b3d      	ldr	r3, [pc, #244]	@ (8018a14 <tud_rhport_init+0x158>)
 8018920:	61fb      	str	r3, [r7, #28]
 8018922:	69fb      	ldr	r3, [r7, #28]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	f003 0301 	and.w	r3, r3, #1
 801892a:	2b00      	cmp	r3, #0
 801892c:	d000      	beq.n	8018930 <tud_rhport_init+0x74>
 801892e:	be00      	bkpt	0x0000
 8018930:	2300      	movs	r3, #0
 8018932:	e06a      	b.n	8018a0a <tud_rhport_init+0x14e>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8018934:	4b3c      	ldr	r3, [pc, #240]	@ (8018a28 <tud_rhport_init+0x16c>)
 8018936:	2b00      	cmp	r3, #0
 8018938:	d005      	beq.n	8018946 <tud_rhport_init+0x8a>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 801893a:	483c      	ldr	r0, [pc, #240]	@ (8018a2c <tud_rhport_init+0x170>)
 801893c:	f3af 8000 	nop.w
 8018940:	4603      	mov	r3, r0
 8018942:	4a3b      	ldr	r2, [pc, #236]	@ (8018a30 <tud_rhport_init+0x174>)
 8018944:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8018946:	2300      	movs	r3, #0
 8018948:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801894c:	e039      	b.n	80189c2 <tud_rhport_init+0x106>
 801894e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018952:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8018954:	2300      	movs	r3, #0
 8018956:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8018958:	4b34      	ldr	r3, [pc, #208]	@ (8018a2c <tud_rhport_init+0x170>)
 801895a:	781b      	ldrb	r3, [r3, #0]
 801895c:	7cfa      	ldrb	r2, [r7, #19]
 801895e:	429a      	cmp	r2, r3
 8018960:	d206      	bcs.n	8018970 <tud_rhport_init+0xb4>
    driver = &_app_driver[drvid];
 8018962:	4b33      	ldr	r3, [pc, #204]	@ (8018a30 <tud_rhport_init+0x174>)
 8018964:	681a      	ldr	r2, [r3, #0]
 8018966:	7cfb      	ldrb	r3, [r7, #19]
 8018968:	015b      	lsls	r3, r3, #5
 801896a:	4413      	add	r3, r2
 801896c:	60fb      	str	r3, [r7, #12]
 801896e:	e00c      	b.n	801898a <tud_rhport_init+0xce>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8018970:	4b2e      	ldr	r3, [pc, #184]	@ (8018a2c <tud_rhport_init+0x170>)
 8018972:	781b      	ldrb	r3, [r3, #0]
 8018974:	7cfa      	ldrb	r2, [r7, #19]
 8018976:	429a      	cmp	r2, r3
 8018978:	d807      	bhi.n	801898a <tud_rhport_init+0xce>
    driver = &_usbd_driver[drvid - _app_driver_count];
 801897a:	7cfb      	ldrb	r3, [r7, #19]
 801897c:	4a2b      	ldr	r2, [pc, #172]	@ (8018a2c <tud_rhport_init+0x170>)
 801897e:	7812      	ldrb	r2, [r2, #0]
 8018980:	1a9b      	subs	r3, r3, r2
 8018982:	015b      	lsls	r3, r3, #5
 8018984:	4a2b      	ldr	r2, [pc, #172]	@ (8018a34 <tud_rhport_init+0x178>)
 8018986:	4413      	add	r3, r2
 8018988:	60fb      	str	r3, [r7, #12]
  return driver;
 801898a:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 801898c:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 801898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018990:	2b00      	cmp	r3, #0
 8018992:	d003      	beq.n	801899c <tud_rhport_init+0xe0>
 8018994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018996:	685b      	ldr	r3, [r3, #4]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d10a      	bne.n	80189b2 <tud_rhport_init+0xf6>
 801899c:	4b1d      	ldr	r3, [pc, #116]	@ (8018a14 <tud_rhport_init+0x158>)
 801899e:	623b      	str	r3, [r7, #32]
 80189a0:	6a3b      	ldr	r3, [r7, #32]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	f003 0301 	and.w	r3, r3, #1
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d000      	beq.n	80189ae <tud_rhport_init+0xf2>
 80189ac:	be00      	bkpt	0x0000
 80189ae:	2300      	movs	r3, #0
 80189b0:	e02b      	b.n	8018a0a <tud_rhport_init+0x14e>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 80189b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189b4:	685b      	ldr	r3, [r3, #4]
 80189b6:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80189b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80189bc:	3301      	adds	r3, #1
 80189be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80189c2:	4b1a      	ldr	r3, [pc, #104]	@ (8018a2c <tud_rhport_init+0x170>)
 80189c4:	781b      	ldrb	r3, [r3, #0]
 80189c6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80189ca:	429a      	cmp	r2, r3
 80189cc:	d9bf      	bls.n	801894e <tud_rhport_init+0x92>
  }

  _usbd_rhport = rhport;
 80189ce:	4a1a      	ldr	r2, [pc, #104]	@ (8018a38 <tud_rhport_init+0x17c>)
 80189d0:	79fb      	ldrb	r3, [r7, #7]
 80189d2:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 80189d4:	79fb      	ldrb	r3, [r7, #7]
 80189d6:	6839      	ldr	r1, [r7, #0]
 80189d8:	4618      	mov	r0, r3
 80189da:	f002 f959 	bl	801ac90 <dcd_init>
 80189de:	4603      	mov	r3, r0
 80189e0:	f083 0301 	eor.w	r3, r3, #1
 80189e4:	b2db      	uxtb	r3, r3
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d00a      	beq.n	8018a00 <tud_rhport_init+0x144>
 80189ea:	4b0a      	ldr	r3, [pc, #40]	@ (8018a14 <tud_rhport_init+0x158>)
 80189ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80189ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	f003 0301 	and.w	r3, r3, #1
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d000      	beq.n	80189fc <tud_rhport_init+0x140>
 80189fa:	be00      	bkpt	0x0000
 80189fc:	2300      	movs	r3, #0
 80189fe:	e004      	b.n	8018a0a <tud_rhport_init+0x14e>
  dcd_int_enable(rhport);
 8018a00:	79fb      	ldrb	r3, [r7, #7]
 8018a02:	4618      	mov	r0, r3
 8018a04:	f002 f9d8 	bl	801adb8 <dcd_int_enable>

  return true;
 8018a08:	2301      	movs	r3, #1
}
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	3730      	adds	r7, #48	@ 0x30
 8018a0e:	46bd      	mov	sp, r7
 8018a10:	bd80      	pop	{r7, pc}
 8018a12:	bf00      	nop
 8018a14:	e000edf0 	.word	0xe000edf0
 8018a18:	240089bc 	.word	0x240089bc
 8018a1c:	240089f4 	.word	0x240089f4
 8018a20:	24000024 	.word	0x24000024
 8018a24:	24008ac0 	.word	0x24008ac0
 8018a28:	00000000 	.word	0x00000000
 8018a2c:	240089fc 	.word	0x240089fc
 8018a30:	240089f8 	.word	0x240089f8
 8018a34:	08033b44 	.word	0x08033b44
 8018a38:	24000022 	.word	0x24000022

08018a3c <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b088      	sub	sp, #32
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	4603      	mov	r3, r0
 8018a44:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8018a46:	2300      	movs	r3, #0
 8018a48:	77fb      	strb	r3, [r7, #31]
 8018a4a:	e033      	b.n	8018ab4 <configuration_reset+0x78>
 8018a4c:	7ffb      	ldrb	r3, [r7, #31]
 8018a4e:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8018a50:	2300      	movs	r3, #0
 8018a52:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8018a54:	4b24      	ldr	r3, [pc, #144]	@ (8018ae8 <configuration_reset+0xac>)
 8018a56:	781b      	ldrb	r3, [r3, #0]
 8018a58:	7cfa      	ldrb	r2, [r7, #19]
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d206      	bcs.n	8018a6c <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8018a5e:	4b23      	ldr	r3, [pc, #140]	@ (8018aec <configuration_reset+0xb0>)
 8018a60:	681a      	ldr	r2, [r3, #0]
 8018a62:	7cfb      	ldrb	r3, [r7, #19]
 8018a64:	015b      	lsls	r3, r3, #5
 8018a66:	4413      	add	r3, r2
 8018a68:	60fb      	str	r3, [r7, #12]
 8018a6a:	e00c      	b.n	8018a86 <configuration_reset+0x4a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8018a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8018ae8 <configuration_reset+0xac>)
 8018a6e:	781b      	ldrb	r3, [r3, #0]
 8018a70:	7cfa      	ldrb	r2, [r7, #19]
 8018a72:	429a      	cmp	r2, r3
 8018a74:	d807      	bhi.n	8018a86 <configuration_reset+0x4a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8018a76:	7cfb      	ldrb	r3, [r7, #19]
 8018a78:	4a1b      	ldr	r2, [pc, #108]	@ (8018ae8 <configuration_reset+0xac>)
 8018a7a:	7812      	ldrb	r2, [r2, #0]
 8018a7c:	1a9b      	subs	r3, r3, r2
 8018a7e:	015b      	lsls	r3, r3, #5
 8018a80:	4a1b      	ldr	r2, [pc, #108]	@ (8018af0 <configuration_reset+0xb4>)
 8018a82:	4413      	add	r3, r2
 8018a84:	60fb      	str	r3, [r7, #12]
  return driver;
 8018a86:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8018a88:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8018a8a:	69bb      	ldr	r3, [r7, #24]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d109      	bne.n	8018aa4 <configuration_reset+0x68>
 8018a90:	4b18      	ldr	r3, [pc, #96]	@ (8018af4 <configuration_reset+0xb8>)
 8018a92:	617b      	str	r3, [r7, #20]
 8018a94:	697b      	ldr	r3, [r7, #20]
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	f003 0301 	and.w	r3, r3, #1
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d01e      	beq.n	8018ade <configuration_reset+0xa2>
 8018aa0:	be00      	bkpt	0x0000
 8018aa2:	e01c      	b.n	8018ade <configuration_reset+0xa2>
    driver->reset(rhport);
 8018aa4:	69bb      	ldr	r3, [r7, #24]
 8018aa6:	68db      	ldr	r3, [r3, #12]
 8018aa8:	79fa      	ldrb	r2, [r7, #7]
 8018aaa:	4610      	mov	r0, r2
 8018aac:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8018aae:	7ffb      	ldrb	r3, [r7, #31]
 8018ab0:	3301      	adds	r3, #1
 8018ab2:	77fb      	strb	r3, [r7, #31]
 8018ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8018ae8 <configuration_reset+0xac>)
 8018ab6:	781b      	ldrb	r3, [r3, #0]
 8018ab8:	7ffa      	ldrb	r2, [r7, #31]
 8018aba:	429a      	cmp	r2, r3
 8018abc:	d9c6      	bls.n	8018a4c <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8018abe:	2238      	movs	r2, #56	@ 0x38
 8018ac0:	2100      	movs	r1, #0
 8018ac2:	480d      	ldr	r0, [pc, #52]	@ (8018af8 <configuration_reset+0xbc>)
 8018ac4:	f006 fd16 	bl	801f4f4 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8018ac8:	2210      	movs	r2, #16
 8018aca:	21ff      	movs	r1, #255	@ 0xff
 8018acc:	480b      	ldr	r0, [pc, #44]	@ (8018afc <configuration_reset+0xc0>)
 8018ace:	f006 fd11 	bl	801f4f4 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8018ad2:	2212      	movs	r2, #18
 8018ad4:	21ff      	movs	r1, #255	@ 0xff
 8018ad6:	480a      	ldr	r0, [pc, #40]	@ (8018b00 <configuration_reset+0xc4>)
 8018ad8:	f006 fd0c 	bl	801f4f4 <memset>
 8018adc:	e000      	b.n	8018ae0 <configuration_reset+0xa4>
    TU_ASSERT(driver,);
 8018ade:	bf00      	nop
}
 8018ae0:	3720      	adds	r7, #32
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bd80      	pop	{r7, pc}
 8018ae6:	bf00      	nop
 8018ae8:	240089fc 	.word	0x240089fc
 8018aec:	240089f8 	.word	0x240089f8
 8018af0:	08033b44 	.word	0x08033b44
 8018af4:	e000edf0 	.word	0xe000edf0
 8018af8:	240089bc 	.word	0x240089bc
 8018afc:	240089c0 	.word	0x240089c0
 8018b00:	240089d0 	.word	0x240089d0

08018b04 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b082      	sub	sp, #8
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	4603      	mov	r3, r0
 8018b0c:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8018b0e:	79fb      	ldrb	r3, [r7, #7]
 8018b10:	4618      	mov	r0, r3
 8018b12:	f7ff ff93 	bl	8018a3c <configuration_reset>
  usbd_control_reset();
 8018b16:	f001 fbcf 	bl	801a2b8 <usbd_control_reset>
}
 8018b1a:	bf00      	nop
 8018b1c:	3708      	adds	r7, #8
 8018b1e:	46bd      	mov	sp, r7
 8018b20:	bd80      	pop	{r7, pc}
	...

08018b24 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8018b24:	b590      	push	{r4, r7, lr}
 8018b26:	b093      	sub	sp, #76	@ 0x4c
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]
 8018b2c:	460b      	mov	r3, r1
 8018b2e:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8018b30:	f7ff feb4 	bl	801889c <tud_inited>
 8018b34:	4603      	mov	r3, r0
 8018b36:	f083 0301 	eor.w	r3, r3, #1
 8018b3a:	b2db      	uxtb	r3, r3
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	f040 8189 	bne.w	8018e54 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8018b42:	4bb1      	ldr	r3, [pc, #708]	@ (8018e08 <tud_task_ext+0x2e4>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	633b      	str	r3, [r7, #48]	@ 0x30
 8018b48:	f107 030c 	add.w	r3, r7, #12
 8018b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8018b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	2000      	movs	r0, #0
 8018b58:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8018b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b5c:	3304      	adds	r3, #4
 8018b5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018b60:	4618      	mov	r0, r3
 8018b62:	f7ff fd40 	bl	80185e6 <tu_fifo_read>
 8018b66:	4603      	mov	r3, r0
 8018b68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8018b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	2001      	movs	r0, #1
 8018b72:	4798      	blx	r3

  return success;
 8018b74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018b78:	f083 0301 	eor.w	r3, r3, #1
 8018b7c:	b2db      	uxtb	r3, r3
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	f040 816a 	bne.w	8018e58 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8018b84:	7b7b      	ldrb	r3, [r7, #13]
 8018b86:	3b01      	subs	r3, #1
 8018b88:	2b07      	cmp	r3, #7
 8018b8a:	f200 814b 	bhi.w	8018e24 <tud_task_ext+0x300>
 8018b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8018b94 <tud_task_ext+0x70>)
 8018b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b94:	08018bb5 	.word	0x08018bb5
 8018b98:	08018bc5 	.word	0x08018bc5
 8018b9c:	08018dd7 	.word	0x08018dd7
 8018ba0:	08018d89 	.word	0x08018d89
 8018ba4:	08018db3 	.word	0x08018db3
 8018ba8:	08018bd3 	.word	0x08018bd3
 8018bac:	08018c83 	.word	0x08018c83
 8018bb0:	08018dc7 	.word	0x08018dc7
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8018bb4:	7b3b      	ldrb	r3, [r7, #12]
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	f7ff ffa4 	bl	8018b04 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8018bbc:	7c3a      	ldrb	r2, [r7, #16]
 8018bbe:	4b93      	ldr	r3, [pc, #588]	@ (8018e0c <tud_task_ext+0x2e8>)
 8018bc0:	709a      	strb	r2, [r3, #2]
        break;
 8018bc2:	e146      	b.n	8018e52 <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8018bc4:	7b3b      	ldrb	r3, [r7, #12]
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	f7ff ff9c 	bl	8018b04 <usbd_reset>
        tud_umount_cb();
 8018bcc:	f7e7 fdc5 	bl	800075a <tud_umount_cb>
        break;
 8018bd0:	e13f      	b.n	8018e52 <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8018bd2:	4b8f      	ldr	r3, [pc, #572]	@ (8018e10 <tud_task_ext+0x2ec>)
 8018bd4:	781b      	ldrb	r3, [r3, #0]
 8018bd6:	b2db      	uxtb	r3, r3
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d10a      	bne.n	8018bf2 <tud_task_ext+0xce>
 8018bdc:	4b8d      	ldr	r3, [pc, #564]	@ (8018e14 <tud_task_ext+0x2f0>)
 8018bde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	f003 0301 	and.w	r3, r3, #1
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	f000 8137 	beq.w	8018e5c <tud_task_ext+0x338>
 8018bee:	be00      	bkpt	0x0000
 8018bf0:	e134      	b.n	8018e5c <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8018bf2:	4b87      	ldr	r3, [pc, #540]	@ (8018e10 <tud_task_ext+0x2ec>)
 8018bf4:	781b      	ldrb	r3, [r3, #0]
 8018bf6:	b2db      	uxtb	r3, r3
 8018bf8:	3b01      	subs	r3, #1
 8018bfa:	b2da      	uxtb	r2, r3
 8018bfc:	4b84      	ldr	r3, [pc, #528]	@ (8018e10 <tud_task_ext+0x2ec>)
 8018bfe:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8018c00:	4b83      	ldr	r3, [pc, #524]	@ (8018e10 <tud_task_ext+0x2ec>)
 8018c02:	781b      	ldrb	r3, [r3, #0]
 8018c04:	b2db      	uxtb	r3, r3
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	f040 8116 	bne.w	8018e38 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8018c0c:	4a7f      	ldr	r2, [pc, #508]	@ (8018e0c <tud_task_ext+0x2e8>)
 8018c0e:	7813      	ldrb	r3, [r2, #0]
 8018c10:	f043 0301 	orr.w	r3, r3, #1
 8018c14:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8018c16:	4a7d      	ldr	r2, [pc, #500]	@ (8018e0c <tud_task_ext+0x2e8>)
 8018c18:	f892 3026 	ldrb.w	r3, [r2, #38]	@ 0x26
 8018c1c:	f023 0301 	bic.w	r3, r3, #1
 8018c20:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8018c24:	4a79      	ldr	r2, [pc, #484]	@ (8018e0c <tud_task_ext+0x2e8>)
 8018c26:	f892 3026 	ldrb.w	r3, [r2, #38]	@ 0x26
 8018c2a:	f023 0304 	bic.w	r3, r3, #4
 8018c2e:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8018c32:	4a76      	ldr	r2, [pc, #472]	@ (8018e0c <tud_task_ext+0x2e8>)
 8018c34:	f892 3027 	ldrb.w	r3, [r2, #39]	@ 0x27
 8018c38:	f023 0301 	bic.w	r3, r3, #1
 8018c3c:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8018c40:	4a72      	ldr	r2, [pc, #456]	@ (8018e0c <tud_task_ext+0x2e8>)
 8018c42:	f892 3027 	ldrb.w	r3, [r2, #39]	@ 0x27
 8018c46:	f023 0304 	bic.w	r3, r3, #4
 8018c4a:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8018c4e:	7b3a      	ldrb	r2, [r7, #12]
 8018c50:	f107 030c 	add.w	r3, r7, #12
 8018c54:	3304      	adds	r3, #4
 8018c56:	4619      	mov	r1, r3
 8018c58:	4610      	mov	r0, r2
 8018c5a:	f000 f91f 	bl	8018e9c <process_control_request>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	f083 0301 	eor.w	r3, r3, #1
 8018c64:	b2db      	uxtb	r3, r3
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	f000 80e8 	beq.w	8018e3c <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8018c6c:	7b3b      	ldrb	r3, [r7, #12]
 8018c6e:	2100      	movs	r1, #0
 8018c70:	4618      	mov	r0, r3
 8018c72:	f002 faa5 	bl	801b1c0 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8018c76:	7b3b      	ldrb	r3, [r7, #12]
 8018c78:	2180      	movs	r1, #128	@ 0x80
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	f002 faa0 	bl	801b1c0 <dcd_edpt_stall>
        }
        break;
 8018c80:	e0dc      	b.n	8018e3c <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8018c82:	7c3b      	ldrb	r3, [r7, #16]
 8018c84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8018c88:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018c8c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018c90:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8018c94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018c98:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 8018c9a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8018c9e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018ca2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8018ca6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018caa:	09db      	lsrs	r3, r3, #7
 8018cac:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 8018cae:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8018cb2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018cb6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018cba:	4954      	ldr	r1, [pc, #336]	@ (8018e0c <tud_task_ext+0x2e8>)
 8018cbc:	0052      	lsls	r2, r2, #1
 8018cbe:	440a      	add	r2, r1
 8018cc0:	4413      	add	r3, r2
 8018cc2:	f103 0220 	add.w	r2, r3, #32
 8018cc6:	7993      	ldrb	r3, [r2, #6]
 8018cc8:	f023 0301 	bic.w	r3, r3, #1
 8018ccc:	7193      	strb	r3, [r2, #6]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8018cce:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018cd2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018cd6:	494d      	ldr	r1, [pc, #308]	@ (8018e0c <tud_task_ext+0x2e8>)
 8018cd8:	0052      	lsls	r2, r2, #1
 8018cda:	440a      	add	r2, r1
 8018cdc:	4413      	add	r3, r2
 8018cde:	f103 0220 	add.w	r2, r3, #32
 8018ce2:	7993      	ldrb	r3, [r2, #6]
 8018ce4:	f023 0304 	bic.w	r3, r3, #4
 8018ce8:	7193      	strb	r3, [r2, #6]

        if (0 == epnum) {
 8018cea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d107      	bne.n	8018d02 <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8018cf2:	7b38      	ldrb	r0, [r7, #12]
 8018cf4:	7c7a      	ldrb	r2, [r7, #17]
 8018cf6:	697b      	ldr	r3, [r7, #20]
 8018cf8:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8018cfc:	f001 fb12 	bl	801a324 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8018d00:	e0a7      	b.n	8018e52 <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8018d02:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018d06:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018d0a:	4940      	ldr	r1, [pc, #256]	@ (8018e0c <tud_task_ext+0x2e8>)
 8018d0c:	0052      	lsls	r2, r2, #1
 8018d0e:	440a      	add	r2, r1
 8018d10:	4413      	add	r3, r2
 8018d12:	3314      	adds	r3, #20
 8018d14:	781b      	ldrb	r3, [r3, #0]
 8018d16:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8018d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8018e18 <tud_task_ext+0x2f4>)
 8018d20:	781b      	ldrb	r3, [r3, #0]
 8018d22:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8018d26:	429a      	cmp	r2, r3
 8018d28:	d207      	bcs.n	8018d3a <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8018d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8018e1c <tud_task_ext+0x2f8>)
 8018d2c:	681a      	ldr	r2, [r3, #0]
 8018d2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018d32:	015b      	lsls	r3, r3, #5
 8018d34:	4413      	add	r3, r2
 8018d36:	623b      	str	r3, [r7, #32]
 8018d38:	e00e      	b.n	8018d58 <tud_task_ext+0x234>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8018d3a:	4b37      	ldr	r3, [pc, #220]	@ (8018e18 <tud_task_ext+0x2f4>)
 8018d3c:	781b      	ldrb	r3, [r3, #0]
 8018d3e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8018d42:	429a      	cmp	r2, r3
 8018d44:	d808      	bhi.n	8018d58 <tud_task_ext+0x234>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8018d46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018d4a:	4a33      	ldr	r2, [pc, #204]	@ (8018e18 <tud_task_ext+0x2f4>)
 8018d4c:	7812      	ldrb	r2, [r2, #0]
 8018d4e:	1a9b      	subs	r3, r3, r2
 8018d50:	015b      	lsls	r3, r3, #5
 8018d52:	4a33      	ldr	r2, [pc, #204]	@ (8018e20 <tud_task_ext+0x2fc>)
 8018d54:	4413      	add	r3, r2
 8018d56:	623b      	str	r3, [r7, #32]
  return driver;
 8018d58:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8018d5a:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 8018d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d109      	bne.n	8018d76 <tud_task_ext+0x252>
 8018d62:	4b2c      	ldr	r3, [pc, #176]	@ (8018e14 <tud_task_ext+0x2f0>)
 8018d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	f003 0301 	and.w	r3, r3, #1
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d076      	beq.n	8018e60 <tud_task_ext+0x33c>
 8018d72:	be00      	bkpt	0x0000
 8018d74:	e074      	b.n	8018e60 <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8018d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018d78:	699c      	ldr	r4, [r3, #24]
 8018d7a:	7b38      	ldrb	r0, [r7, #12]
 8018d7c:	7c7a      	ldrb	r2, [r7, #17]
 8018d7e:	697b      	ldr	r3, [r7, #20]
 8018d80:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8018d84:	47a0      	blx	r4
        break;
 8018d86:	e064      	b.n	8018e52 <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8018d88:	4b20      	ldr	r3, [pc, #128]	@ (8018e0c <tud_task_ext+0x2e8>)
 8018d8a:	781b      	ldrb	r3, [r3, #0]
 8018d8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018d90:	b2db      	uxtb	r3, r3
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d054      	beq.n	8018e40 <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8018d96:	4b1d      	ldr	r3, [pc, #116]	@ (8018e0c <tud_task_ext+0x2e8>)
 8018d98:	781b      	ldrb	r3, [r3, #0]
 8018d9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018d9e:	b2db      	uxtb	r3, r3
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	bf14      	ite	ne
 8018da4:	2301      	movne	r3, #1
 8018da6:	2300      	moveq	r3, #0
 8018da8:	b2db      	uxtb	r3, r3
 8018daa:	4618      	mov	r0, r3
 8018dac:	f7ff fd22 	bl	80187f4 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8018db0:	e046      	b.n	8018e40 <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 8018db2:	4b16      	ldr	r3, [pc, #88]	@ (8018e0c <tud_task_ext+0x2e8>)
 8018db4:	781b      	ldrb	r3, [r3, #0]
 8018db6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018dba:	b2db      	uxtb	r3, r3
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d041      	beq.n	8018e44 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 8018dc0:	f7ff fd23 	bl	801880a <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8018dc4:	e03e      	b.n	8018e44 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) event.func_call.func(event.func_call.param);
 8018dc6:	693b      	ldr	r3, [r7, #16]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d03d      	beq.n	8018e48 <tud_task_ext+0x324>
 8018dcc:	693b      	ldr	r3, [r7, #16]
 8018dce:	697a      	ldr	r2, [r7, #20]
 8018dd0:	4610      	mov	r0, r2
 8018dd2:	4798      	blx	r3
        break;
 8018dd4:	e038      	b.n	8018e48 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8018dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8018e0c <tud_task_ext+0x2e8>)
 8018dd8:	78db      	ldrb	r3, [r3, #3]
 8018dda:	b2db      	uxtb	r3, r3
 8018ddc:	61fb      	str	r3, [r7, #28]
 8018dde:	2300      	movs	r3, #0
 8018de0:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8018de2:	7efb      	ldrb	r3, [r7, #27]
 8018de4:	69fa      	ldr	r2, [r7, #28]
 8018de6:	fa22 f303 	lsr.w	r3, r2, r3
 8018dea:	f003 0301 	and.w	r3, r3, #1
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	bf14      	ite	ne
 8018df2:	2301      	movne	r3, #1
 8018df4:	2300      	moveq	r3, #0
 8018df6:	b2db      	uxtb	r3, r3
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d027      	beq.n	8018e4c <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 8018dfc:	693b      	ldr	r3, [r7, #16]
 8018dfe:	4618      	mov	r0, r3
 8018e00:	f7ff fcd2 	bl	80187a8 <tud_sof_cb>
        }
      break;
 8018e04:	e022      	b.n	8018e4c <tud_task_ext+0x328>
 8018e06:	bf00      	nop
 8018e08:	24008ac0 	.word	0x24008ac0
 8018e0c:	240089bc 	.word	0x240089bc
 8018e10:	240089f4 	.word	0x240089f4
 8018e14:	e000edf0 	.word	0xe000edf0
 8018e18:	240089fc 	.word	0x240089fc
 8018e1c:	240089f8 	.word	0x240089f8
 8018e20:	08033b44 	.word	0x08033b44

      default:
        TU_BREAKPOINT();
 8018e24:	4b10      	ldr	r3, [pc, #64]	@ (8018e68 <tud_task_ext+0x344>)
 8018e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8018e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	f003 0301 	and.w	r3, r3, #1
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d00d      	beq.n	8018e50 <tud_task_ext+0x32c>
 8018e34:	be00      	bkpt	0x0000
        break;
 8018e36:	e00b      	b.n	8018e50 <tud_task_ext+0x32c>
          break;
 8018e38:	bf00      	nop
 8018e3a:	e682      	b.n	8018b42 <tud_task_ext+0x1e>
        break;
 8018e3c:	bf00      	nop
 8018e3e:	e680      	b.n	8018b42 <tud_task_ext+0x1e>
        break;
 8018e40:	bf00      	nop
 8018e42:	e67e      	b.n	8018b42 <tud_task_ext+0x1e>
        break;
 8018e44:	bf00      	nop
 8018e46:	e67c      	b.n	8018b42 <tud_task_ext+0x1e>
        break;
 8018e48:	bf00      	nop
 8018e4a:	e67a      	b.n	8018b42 <tud_task_ext+0x1e>
      break;
 8018e4c:	bf00      	nop
 8018e4e:	e678      	b.n	8018b42 <tud_task_ext+0x1e>
        break;
 8018e50:	bf00      	nop
  while (1) {
 8018e52:	e676      	b.n	8018b42 <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8018e54:	bf00      	nop
 8018e56:	e004      	b.n	8018e62 <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8018e58:	bf00      	nop
 8018e5a:	e002      	b.n	8018e62 <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8018e5c:	bf00      	nop
 8018e5e:	e000      	b.n	8018e62 <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8018e60:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 8018e62:	374c      	adds	r7, #76	@ 0x4c
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bd90      	pop	{r4, r7, pc}
 8018e68:	e000edf0 	.word	0xe000edf0

08018e6c <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8018e6c:	b580      	push	{r7, lr}
 8018e6e:	b084      	sub	sp, #16
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	4603      	mov	r3, r0
 8018e74:	60b9      	str	r1, [r7, #8]
 8018e76:	607a      	str	r2, [r7, #4]
 8018e78:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8018e7a:	68bb      	ldr	r3, [r7, #8]
 8018e7c:	695b      	ldr	r3, [r3, #20]
 8018e7e:	4618      	mov	r0, r3
 8018e80:	f001 fa26 	bl	801a2d0 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8018e84:	68bb      	ldr	r3, [r7, #8]
 8018e86:	695b      	ldr	r3, [r3, #20]
 8018e88:	7bf8      	ldrb	r0, [r7, #15]
 8018e8a:	687a      	ldr	r2, [r7, #4]
 8018e8c:	2101      	movs	r1, #1
 8018e8e:	4798      	blx	r3
 8018e90:	4603      	mov	r3, r0
}
 8018e92:	4618      	mov	r0, r3
 8018e94:	3710      	adds	r7, #16
 8018e96:	46bd      	mov	sp, r7
 8018e98:	bd80      	pop	{r7, pc}
	...

08018e9c <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b09a      	sub	sp, #104	@ 0x68
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	4603      	mov	r3, r0
 8018ea4:	6039      	str	r1, [r7, #0]
 8018ea6:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8018ea8:	2000      	movs	r0, #0
 8018eaa:	f001 fa11 	bl	801a2d0 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8018eae:	683b      	ldr	r3, [r7, #0]
 8018eb0:	781b      	ldrb	r3, [r3, #0]
 8018eb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018eb6:	b2db      	uxtb	r3, r3
 8018eb8:	2b60      	cmp	r3, #96	@ 0x60
 8018eba:	d10a      	bne.n	8018ed2 <process_control_request+0x36>
 8018ebc:	4ba4      	ldr	r3, [pc, #656]	@ (8019150 <process_control_request+0x2b4>)
 8018ebe:	633b      	str	r3, [r7, #48]	@ 0x30
 8018ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	f003 0301 	and.w	r3, r3, #1
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d000      	beq.n	8018ece <process_control_request+0x32>
 8018ecc:	be00      	bkpt	0x0000
 8018ece:	2300      	movs	r3, #0
 8018ed0:	e2b7      	b.n	8019442 <process_control_request+0x5a6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 8018ed2:	683b      	ldr	r3, [r7, #0]
 8018ed4:	781b      	ldrb	r3, [r3, #0]
 8018ed6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018eda:	b2db      	uxtb	r3, r3
 8018edc:	2b40      	cmp	r3, #64	@ 0x40
 8018ede:	d10a      	bne.n	8018ef6 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8018ee0:	489c      	ldr	r0, [pc, #624]	@ (8019154 <process_control_request+0x2b8>)
 8018ee2:	f001 f9f5 	bl	801a2d0 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8018ee6:	79fb      	ldrb	r3, [r7, #7]
 8018ee8:	683a      	ldr	r2, [r7, #0]
 8018eea:	2101      	movs	r1, #1
 8018eec:	4618      	mov	r0, r3
 8018eee:	f7ff fc93 	bl	8018818 <tud_vendor_control_xfer_cb>
 8018ef2:	4603      	mov	r3, r0
 8018ef4:	e2a5      	b.n	8019442 <process_control_request+0x5a6>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 8018ef6:	683b      	ldr	r3, [r7, #0]
 8018ef8:	781b      	ldrb	r3, [r3, #0]
 8018efa:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8018efe:	b2db      	uxtb	r3, r3
 8018f00:	2b02      	cmp	r3, #2
 8018f02:	f000 81c7 	beq.w	8019294 <process_control_request+0x3f8>
 8018f06:	2b02      	cmp	r3, #2
 8018f08:	f300 828e 	bgt.w	8019428 <process_control_request+0x58c>
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d003      	beq.n	8018f18 <process_control_request+0x7c>
 8018f10:	2b01      	cmp	r3, #1
 8018f12:	f000 814f 	beq.w	80191b4 <process_control_request+0x318>
 8018f16:	e287      	b.n	8019428 <process_control_request+0x58c>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8018f18:	683b      	ldr	r3, [r7, #0]
 8018f1a:	781b      	ldrb	r3, [r3, #0]
 8018f1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018f20:	b2db      	uxtb	r3, r3
 8018f22:	2b20      	cmp	r3, #32
 8018f24:	d142      	bne.n	8018fac <process_control_request+0x110>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8018f26:	683b      	ldr	r3, [r7, #0]
 8018f28:	889b      	ldrh	r3, [r3, #4]
 8018f2a:	b29b      	uxth	r3, r3
 8018f2c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8018f2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018f30:	b2db      	uxtb	r3, r3
 8018f32:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8018f36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018f3a:	2b0f      	cmp	r3, #15
 8018f3c:	d901      	bls.n	8018f42 <process_control_request+0xa6>
 8018f3e:	2300      	movs	r3, #0
 8018f40:	e27f      	b.n	8019442 <process_control_request+0x5a6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8018f42:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018f46:	4a84      	ldr	r2, [pc, #528]	@ (8019158 <process_control_request+0x2bc>)
 8018f48:	4413      	add	r3, r2
 8018f4a:	791b      	ldrb	r3, [r3, #4]
 8018f4c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 8018f50:	2300      	movs	r3, #0
 8018f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8018f54:	4b81      	ldr	r3, [pc, #516]	@ (801915c <process_control_request+0x2c0>)
 8018f56:	781b      	ldrb	r3, [r3, #0]
 8018f58:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8018f5c:	429a      	cmp	r2, r3
 8018f5e:	d207      	bcs.n	8018f70 <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 8018f60:	4b7f      	ldr	r3, [pc, #508]	@ (8019160 <process_control_request+0x2c4>)
 8018f62:	681a      	ldr	r2, [r3, #0]
 8018f64:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018f68:	015b      	lsls	r3, r3, #5
 8018f6a:	4413      	add	r3, r2
 8018f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018f6e:	e00e      	b.n	8018f8e <process_control_request+0xf2>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8018f70:	4b7a      	ldr	r3, [pc, #488]	@ (801915c <process_control_request+0x2c0>)
 8018f72:	781b      	ldrb	r3, [r3, #0]
 8018f74:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8018f78:	429a      	cmp	r2, r3
 8018f7a:	d808      	bhi.n	8018f8e <process_control_request+0xf2>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8018f7c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018f80:	4a76      	ldr	r2, [pc, #472]	@ (801915c <process_control_request+0x2c0>)
 8018f82:	7812      	ldrb	r2, [r2, #0]
 8018f84:	1a9b      	subs	r3, r3, r2
 8018f86:	015b      	lsls	r3, r3, #5
 8018f88:	4a76      	ldr	r2, [pc, #472]	@ (8019164 <process_control_request+0x2c8>)
 8018f8a:	4413      	add	r3, r2
 8018f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 8018f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8018f90:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 8018f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d101      	bne.n	8018f9c <process_control_request+0x100>
 8018f98:	2300      	movs	r3, #0
 8018f9a:	e252      	b.n	8019442 <process_control_request+0x5a6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8018f9c:	79fb      	ldrb	r3, [r7, #7]
 8018f9e:	683a      	ldr	r2, [r7, #0]
 8018fa0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018fa2:	4618      	mov	r0, r3
 8018fa4:	f7ff ff62 	bl	8018e6c <invoke_class_control>
 8018fa8:	4603      	mov	r3, r0
 8018faa:	e24a      	b.n	8019442 <process_control_request+0x5a6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8018fac:	683b      	ldr	r3, [r7, #0]
 8018fae:	781b      	ldrb	r3, [r3, #0]
 8018fb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018fb4:	b2db      	uxtb	r3, r3
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d00a      	beq.n	8018fd0 <process_control_request+0x134>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 8018fba:	4b65      	ldr	r3, [pc, #404]	@ (8019150 <process_control_request+0x2b4>)
 8018fbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8018fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	f003 0301 	and.w	r3, r3, #1
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d000      	beq.n	8018fcc <process_control_request+0x130>
 8018fca:	be00      	bkpt	0x0000
        return false;
 8018fcc:	2300      	movs	r3, #0
 8018fce:	e238      	b.n	8019442 <process_control_request+0x5a6>
      }

      switch ( p_request->bRequest ) {
 8018fd0:	683b      	ldr	r3, [r7, #0]
 8018fd2:	785b      	ldrb	r3, [r3, #1]
 8018fd4:	2b09      	cmp	r3, #9
 8018fd6:	f200 80e0 	bhi.w	801919a <process_control_request+0x2fe>
 8018fda:	a201      	add	r2, pc, #4	@ (adr r2, 8018fe0 <process_control_request+0x144>)
 8018fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fe0:	08019169 	.word	0x08019169
 8018fe4:	0801912d 	.word	0x0801912d
 8018fe8:	0801919b 	.word	0x0801919b
 8018fec:	08019107 	.word	0x08019107
 8018ff0:	0801919b 	.word	0x0801919b
 8018ff4:	08019009 	.word	0x08019009
 8018ff8:	080190ed 	.word	0x080190ed
 8018ffc:	0801919b 	.word	0x0801919b
 8019000:	0801902d 	.word	0x0801902d
 8019004:	08019045 	.word	0x08019045
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8019008:	6838      	ldr	r0, [r7, #0]
 801900a:	f001 f971 	bl	801a2f0 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 801900e:	683b      	ldr	r3, [r7, #0]
 8019010:	885b      	ldrh	r3, [r3, #2]
 8019012:	b29b      	uxth	r3, r3
 8019014:	b2da      	uxtb	r2, r3
 8019016:	79fb      	ldrb	r3, [r7, #7]
 8019018:	4611      	mov	r1, r2
 801901a:	4618      	mov	r0, r3
 801901c:	f001 ff1c 	bl	801ae58 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8019020:	4a4d      	ldr	r2, [pc, #308]	@ (8019158 <process_control_request+0x2bc>)
 8019022:	7813      	ldrb	r3, [r2, #0]
 8019024:	f043 0302 	orr.w	r3, r3, #2
 8019028:	7013      	strb	r3, [r2, #0]
        break;
 801902a:	e0c2      	b.n	80191b2 <process_control_request+0x316>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 801902c:	4b4a      	ldr	r3, [pc, #296]	@ (8019158 <process_control_request+0x2bc>)
 801902e:	785b      	ldrb	r3, [r3, #1]
 8019030:	b2db      	uxtb	r3, r3
 8019032:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8019034:	f107 0213 	add.w	r2, r7, #19
 8019038:	79f8      	ldrb	r0, [r7, #7]
 801903a:	2301      	movs	r3, #1
 801903c:	6839      	ldr	r1, [r7, #0]
 801903e:	f001 f8cb 	bl	801a1d8 <tud_control_xfer>
        }
        break;
 8019042:	e0b6      	b.n	80191b2 <process_control_request+0x316>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8019044:	683b      	ldr	r3, [r7, #0]
 8019046:	885b      	ldrh	r3, [r3, #2]
 8019048:	b29b      	uxth	r3, r3
 801904a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 801904e:	4b42      	ldr	r3, [pc, #264]	@ (8019158 <process_control_request+0x2bc>)
 8019050:	785b      	ldrb	r3, [r3, #1]
 8019052:	b2db      	uxtb	r3, r3
 8019054:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8019058:	429a      	cmp	r2, r3
 801905a:	d041      	beq.n	80190e0 <process_control_request+0x244>
            if ( _usbd_dev.cfg_num ) {
 801905c:	4b3e      	ldr	r3, [pc, #248]	@ (8019158 <process_control_request+0x2bc>)
 801905e:	785b      	ldrb	r3, [r3, #1]
 8019060:	b2db      	uxtb	r3, r3
 8019062:	2b00      	cmp	r3, #0
 8019064:	d014      	beq.n	8019090 <process_control_request+0x1f4>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8019066:	79fb      	ldrb	r3, [r7, #7]
 8019068:	2100      	movs	r1, #0
 801906a:	4618      	mov	r0, r3
 801906c:	f001 ff74 	bl	801af58 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8019070:	79fb      	ldrb	r3, [r7, #7]
 8019072:	4618      	mov	r0, r3
 8019074:	f001 ffd8 	bl	801b028 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8019078:	4b37      	ldr	r3, [pc, #220]	@ (8019158 <process_control_request+0x2bc>)
 801907a:	789b      	ldrb	r3, [r3, #2]
 801907c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 8019080:	79fb      	ldrb	r3, [r7, #7]
 8019082:	4618      	mov	r0, r3
 8019084:	f7ff fcda 	bl	8018a3c <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8019088:	4a33      	ldr	r2, [pc, #204]	@ (8019158 <process_control_request+0x2bc>)
 801908a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 801908e:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 8019090:	4a31      	ldr	r2, [pc, #196]	@ (8019158 <process_control_request+0x2bc>)
 8019092:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8019096:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 8019098:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801909c:	2b00      	cmp	r3, #0
 801909e:	d01d      	beq.n	80190dc <process_control_request+0x240>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 80190a0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80190a4:	79fb      	ldrb	r3, [r7, #7]
 80190a6:	4611      	mov	r1, r2
 80190a8:	4618      	mov	r0, r3
 80190aa:	f000 f9d3 	bl	8019454 <process_set_config>
 80190ae:	4603      	mov	r3, r0
 80190b0:	f083 0301 	eor.w	r3, r3, #1
 80190b4:	b2db      	uxtb	r3, r3
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d00d      	beq.n	80190d6 <process_control_request+0x23a>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 80190ba:	4b25      	ldr	r3, [pc, #148]	@ (8019150 <process_control_request+0x2b4>)
 80190bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80190be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	f003 0301 	and.w	r3, r3, #1
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d000      	beq.n	80190cc <process_control_request+0x230>
 80190ca:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 80190cc:	4b22      	ldr	r3, [pc, #136]	@ (8019158 <process_control_request+0x2bc>)
 80190ce:	2200      	movs	r2, #0
 80190d0:	705a      	strb	r2, [r3, #1]
                return false;
 80190d2:	2300      	movs	r3, #0
 80190d4:	e1b5      	b.n	8019442 <process_control_request+0x5a6>
              }
              tud_mount_cb();
 80190d6:	f7e7 fb39 	bl	800074c <tud_mount_cb>
 80190da:	e001      	b.n	80190e0 <process_control_request+0x244>
            } else {
              tud_umount_cb();
 80190dc:	f7e7 fb3d 	bl	800075a <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 80190e0:	79fb      	ldrb	r3, [r7, #7]
 80190e2:	6839      	ldr	r1, [r7, #0]
 80190e4:	4618      	mov	r0, r3
 80190e6:	f001 f805 	bl	801a0f4 <tud_control_status>
        }
        break;
 80190ea:	e062      	b.n	80191b2 <process_control_request+0x316>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80190ec:	79fb      	ldrb	r3, [r7, #7]
 80190ee:	6839      	ldr	r1, [r7, #0]
 80190f0:	4618      	mov	r0, r3
 80190f2:	f000 fae1 	bl	80196b8 <process_get_descriptor>
 80190f6:	4603      	mov	r3, r0
 80190f8:	f083 0301 	eor.w	r3, r3, #1
 80190fc:	b2db      	uxtb	r3, r3
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d056      	beq.n	80191b0 <process_control_request+0x314>
 8019102:	2300      	movs	r3, #0
 8019104:	e19d      	b.n	8019442 <process_control_request+0x5a6>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 8019106:	683b      	ldr	r3, [r7, #0]
 8019108:	885b      	ldrh	r3, [r3, #2]
 801910a:	b29b      	uxth	r3, r3
 801910c:	2b01      	cmp	r3, #1
 801910e:	d10b      	bne.n	8019128 <process_control_request+0x28c>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8019110:	4a11      	ldr	r2, [pc, #68]	@ (8019158 <process_control_request+0x2bc>)
 8019112:	7813      	ldrb	r3, [r2, #0]
 8019114:	f043 0308 	orr.w	r3, r3, #8
 8019118:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 801911a:	79fb      	ldrb	r3, [r7, #7]
 801911c:	6839      	ldr	r1, [r7, #0]
 801911e:	4618      	mov	r0, r3
 8019120:	f000 ffe8 	bl	801a0f4 <tud_control_status>
            break;
 8019124:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 8019126:	e044      	b.n	80191b2 <process_control_request+0x316>
            default: return false;
 8019128:	2300      	movs	r3, #0
 801912a:	e18a      	b.n	8019442 <process_control_request+0x5a6>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 801912c:	683b      	ldr	r3, [r7, #0]
 801912e:	885b      	ldrh	r3, [r3, #2]
 8019130:	b29b      	uxth	r3, r3
 8019132:	2b01      	cmp	r3, #1
 8019134:	d001      	beq.n	801913a <process_control_request+0x29e>
 8019136:	2300      	movs	r3, #0
 8019138:	e183      	b.n	8019442 <process_control_request+0x5a6>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 801913a:	4a07      	ldr	r2, [pc, #28]	@ (8019158 <process_control_request+0x2bc>)
 801913c:	7813      	ldrb	r3, [r2, #0]
 801913e:	f023 0308 	bic.w	r3, r3, #8
 8019142:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8019144:	79fb      	ldrb	r3, [r7, #7]
 8019146:	6839      	ldr	r1, [r7, #0]
 8019148:	4618      	mov	r0, r3
 801914a:	f000 ffd3 	bl	801a0f4 <tud_control_status>
        break;
 801914e:	e030      	b.n	80191b2 <process_control_request+0x316>
 8019150:	e000edf0 	.word	0xe000edf0
 8019154:	08018819 	.word	0x08018819
 8019158:	240089bc 	.word	0x240089bc
 801915c:	240089fc 	.word	0x240089fc
 8019160:	240089f8 	.word	0x240089f8
 8019164:	08033b44 	.word	0x08033b44

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8019168:	4b93      	ldr	r3, [pc, #588]	@ (80193b8 <process_control_request+0x51c>)
 801916a:	781b      	ldrb	r3, [r3, #0]
 801916c:	095b      	lsrs	r3, r3, #5
 801916e:	b2db      	uxtb	r3, r3
 8019170:	f003 0301 	and.w	r3, r3, #1
 8019174:	b29a      	uxth	r2, r3
 8019176:	4b90      	ldr	r3, [pc, #576]	@ (80193b8 <process_control_request+0x51c>)
 8019178:	781b      	ldrb	r3, [r3, #0]
 801917a:	089b      	lsrs	r3, r3, #2
 801917c:	b2db      	uxtb	r3, r3
 801917e:	f003 0302 	and.w	r3, r3, #2
 8019182:	b29b      	uxth	r3, r3
 8019184:	4313      	orrs	r3, r2
 8019186:	b29b      	uxth	r3, r3
 8019188:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 801918a:	f107 0210 	add.w	r2, r7, #16
 801918e:	79f8      	ldrb	r0, [r7, #7]
 8019190:	2302      	movs	r3, #2
 8019192:	6839      	ldr	r1, [r7, #0]
 8019194:	f001 f820 	bl	801a1d8 <tud_control_xfer>
          break;
 8019198:	e00b      	b.n	80191b2 <process_control_request+0x316>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 801919a:	4b88      	ldr	r3, [pc, #544]	@ (80193bc <process_control_request+0x520>)
 801919c:	647b      	str	r3, [r7, #68]	@ 0x44
 801919e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	f003 0301 	and.w	r3, r3, #1
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d000      	beq.n	80191ac <process_control_request+0x310>
 80191aa:	be00      	bkpt	0x0000
 80191ac:	2300      	movs	r3, #0
 80191ae:	e148      	b.n	8019442 <process_control_request+0x5a6>
        break;
 80191b0:	bf00      	nop
      }
    break;
 80191b2:	e145      	b.n	8019440 <process_control_request+0x5a4>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80191b4:	683b      	ldr	r3, [r7, #0]
 80191b6:	889b      	ldrh	r3, [r3, #4]
 80191b8:	b29b      	uxth	r3, r3
 80191ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80191bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80191be:	b2db      	uxtb	r3, r3
 80191c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80191c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80191c8:	2b0f      	cmp	r3, #15
 80191ca:	d901      	bls.n	80191d0 <process_control_request+0x334>
 80191cc:	2300      	movs	r3, #0
 80191ce:	e138      	b.n	8019442 <process_control_request+0x5a6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80191d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80191d4:	4a78      	ldr	r2, [pc, #480]	@ (80193b8 <process_control_request+0x51c>)
 80191d6:	4413      	add	r3, r2
 80191d8:	791b      	ldrb	r3, [r3, #4]
 80191da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 80191de:	2300      	movs	r3, #0
 80191e0:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 80191e2:	4b77      	ldr	r3, [pc, #476]	@ (80193c0 <process_control_request+0x524>)
 80191e4:	781b      	ldrb	r3, [r3, #0]
 80191e6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80191ea:	429a      	cmp	r2, r3
 80191ec:	d207      	bcs.n	80191fe <process_control_request+0x362>
    driver = &_app_driver[drvid];
 80191ee:	4b75      	ldr	r3, [pc, #468]	@ (80193c4 <process_control_request+0x528>)
 80191f0:	681a      	ldr	r2, [r3, #0]
 80191f2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80191f6:	015b      	lsls	r3, r3, #5
 80191f8:	4413      	add	r3, r2
 80191fa:	623b      	str	r3, [r7, #32]
 80191fc:	e00e      	b.n	801921c <process_control_request+0x380>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80191fe:	4b70      	ldr	r3, [pc, #448]	@ (80193c0 <process_control_request+0x524>)
 8019200:	781b      	ldrb	r3, [r3, #0]
 8019202:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8019206:	429a      	cmp	r2, r3
 8019208:	d808      	bhi.n	801921c <process_control_request+0x380>
    driver = &_usbd_driver[drvid - _app_driver_count];
 801920a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801920e:	4a6c      	ldr	r2, [pc, #432]	@ (80193c0 <process_control_request+0x524>)
 8019210:	7812      	ldrb	r2, [r2, #0]
 8019212:	1a9b      	subs	r3, r3, r2
 8019214:	015b      	lsls	r3, r3, #5
 8019216:	4a6c      	ldr	r2, [pc, #432]	@ (80193c8 <process_control_request+0x52c>)
 8019218:	4413      	add	r3, r2
 801921a:	623b      	str	r3, [r7, #32]
  return driver;
 801921c:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 801921e:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8019220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019222:	2b00      	cmp	r3, #0
 8019224:	d101      	bne.n	801922a <process_control_request+0x38e>
 8019226:	2300      	movs	r3, #0
 8019228:	e10b      	b.n	8019442 <process_control_request+0x5a6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 801922a:	79fb      	ldrb	r3, [r7, #7]
 801922c:	683a      	ldr	r2, [r7, #0]
 801922e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019230:	4618      	mov	r0, r3
 8019232:	f7ff fe1b 	bl	8018e6c <invoke_class_control>
 8019236:	4603      	mov	r3, r0
 8019238:	f083 0301 	eor.w	r3, r3, #1
 801923c:	b2db      	uxtb	r3, r3
 801923e:	2b00      	cmp	r3, #0
 8019240:	f000 80fd 	beq.w	801943e <process_control_request+0x5a2>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8019244:	683b      	ldr	r3, [r7, #0]
 8019246:	781b      	ldrb	r3, [r3, #0]
 8019248:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801924c:	b2db      	uxtb	r3, r3
 801924e:	2b00      	cmp	r3, #0
 8019250:	d001      	beq.n	8019256 <process_control_request+0x3ba>
 8019252:	2300      	movs	r3, #0
 8019254:	e0f5      	b.n	8019442 <process_control_request+0x5a6>

        switch(p_request->bRequest) {
 8019256:	683b      	ldr	r3, [r7, #0]
 8019258:	785b      	ldrb	r3, [r3, #1]
 801925a:	3b0a      	subs	r3, #10
 801925c:	2b01      	cmp	r3, #1
 801925e:	d816      	bhi.n	801928e <process_control_request+0x3f2>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8019260:	2000      	movs	r0, #0
 8019262:	f001 f835 	bl	801a2d0 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8019266:	683b      	ldr	r3, [r7, #0]
 8019268:	785b      	ldrb	r3, [r3, #1]
 801926a:	2b0a      	cmp	r3, #10
 801926c:	d109      	bne.n	8019282 <process_control_request+0x3e6>
              uint8_t alternate = 0;
 801926e:	2300      	movs	r3, #0
 8019270:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8019272:	f107 020f 	add.w	r2, r7, #15
 8019276:	79f8      	ldrb	r0, [r7, #7]
 8019278:	2301      	movs	r3, #1
 801927a:	6839      	ldr	r1, [r7, #0]
 801927c:	f000 ffac 	bl	801a1d8 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 8019280:	e007      	b.n	8019292 <process_control_request+0x3f6>
              tud_control_status(rhport, p_request);
 8019282:	79fb      	ldrb	r3, [r7, #7]
 8019284:	6839      	ldr	r1, [r7, #0]
 8019286:	4618      	mov	r0, r3
 8019288:	f000 ff34 	bl	801a0f4 <tud_control_status>
          break;
 801928c:	e001      	b.n	8019292 <process_control_request+0x3f6>

          default: return false;
 801928e:	2300      	movs	r3, #0
 8019290:	e0d7      	b.n	8019442 <process_control_request+0x5a6>
        }
      }
      break;
 8019292:	e0d4      	b.n	801943e <process_control_request+0x5a2>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8019294:	683b      	ldr	r3, [r7, #0]
 8019296:	889b      	ldrh	r3, [r3, #4]
 8019298:	b29b      	uxth	r3, r3
 801929a:	83bb      	strh	r3, [r7, #28]
 801929c:	8bbb      	ldrh	r3, [r7, #28]
 801929e:	b2db      	uxtb	r3, r3
 80192a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80192a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80192a8:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80192aa:	7fbb      	ldrb	r3, [r7, #30]
 80192ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80192b0:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80192b2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80192b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80192ba:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80192bc:	7ffb      	ldrb	r3, [r7, #31]
 80192be:	09db      	lsrs	r3, r3, #7
 80192c0:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80192c2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80192c6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80192ca:	2b08      	cmp	r3, #8
 80192cc:	d90a      	bls.n	80192e4 <process_control_request+0x448>
 80192ce:	4b3b      	ldr	r3, [pc, #236]	@ (80193bc <process_control_request+0x520>)
 80192d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80192d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	f003 0301 	and.w	r3, r3, #1
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d000      	beq.n	80192e0 <process_control_request+0x444>
 80192de:	be00      	bkpt	0x0000
 80192e0:	2300      	movs	r3, #0
 80192e2:	e0ae      	b.n	8019442 <process_control_request+0x5a6>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80192e4:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80192e8:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80192ec:	4932      	ldr	r1, [pc, #200]	@ (80193b8 <process_control_request+0x51c>)
 80192ee:	0052      	lsls	r2, r2, #1
 80192f0:	440a      	add	r2, r1
 80192f2:	4413      	add	r3, r2
 80192f4:	3314      	adds	r3, #20
 80192f6:	781b      	ldrb	r3, [r3, #0]
 80192f8:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 80192fa:	2300      	movs	r3, #0
 80192fc:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 80192fe:	4b30      	ldr	r3, [pc, #192]	@ (80193c0 <process_control_request+0x524>)
 8019300:	781b      	ldrb	r3, [r3, #0]
 8019302:	7efa      	ldrb	r2, [r7, #27]
 8019304:	429a      	cmp	r2, r3
 8019306:	d206      	bcs.n	8019316 <process_control_request+0x47a>
    driver = &_app_driver[drvid];
 8019308:	4b2e      	ldr	r3, [pc, #184]	@ (80193c4 <process_control_request+0x528>)
 801930a:	681a      	ldr	r2, [r3, #0]
 801930c:	7efb      	ldrb	r3, [r7, #27]
 801930e:	015b      	lsls	r3, r3, #5
 8019310:	4413      	add	r3, r2
 8019312:	617b      	str	r3, [r7, #20]
 8019314:	e00c      	b.n	8019330 <process_control_request+0x494>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8019316:	4b2a      	ldr	r3, [pc, #168]	@ (80193c0 <process_control_request+0x524>)
 8019318:	781b      	ldrb	r3, [r3, #0]
 801931a:	7efa      	ldrb	r2, [r7, #27]
 801931c:	429a      	cmp	r2, r3
 801931e:	d807      	bhi.n	8019330 <process_control_request+0x494>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8019320:	7efb      	ldrb	r3, [r7, #27]
 8019322:	4a27      	ldr	r2, [pc, #156]	@ (80193c0 <process_control_request+0x524>)
 8019324:	7812      	ldrb	r2, [r2, #0]
 8019326:	1a9b      	subs	r3, r3, r2
 8019328:	015b      	lsls	r3, r3, #5
 801932a:	4a27      	ldr	r2, [pc, #156]	@ (80193c8 <process_control_request+0x52c>)
 801932c:	4413      	add	r3, r2
 801932e:	617b      	str	r3, [r7, #20]
  return driver;
 8019330:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8019332:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8019334:	683b      	ldr	r3, [r7, #0]
 8019336:	781b      	ldrb	r3, [r3, #0]
 8019338:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801933c:	b2db      	uxtb	r3, r3
 801933e:	2b00      	cmp	r3, #0
 8019340:	d00c      	beq.n	801935c <process_control_request+0x4c0>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8019342:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019344:	2b00      	cmp	r3, #0
 8019346:	d101      	bne.n	801934c <process_control_request+0x4b0>
 8019348:	2300      	movs	r3, #0
 801934a:	e07a      	b.n	8019442 <process_control_request+0x5a6>
        return invoke_class_control(rhport, driver, p_request);
 801934c:	79fb      	ldrb	r3, [r7, #7]
 801934e:	683a      	ldr	r2, [r7, #0]
 8019350:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8019352:	4618      	mov	r0, r3
 8019354:	f7ff fd8a 	bl	8018e6c <invoke_class_control>
 8019358:	4603      	mov	r3, r0
 801935a:	e072      	b.n	8019442 <process_control_request+0x5a6>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 801935c:	683b      	ldr	r3, [r7, #0]
 801935e:	785b      	ldrb	r3, [r3, #1]
 8019360:	2b03      	cmp	r3, #3
 8019362:	d017      	beq.n	8019394 <process_control_request+0x4f8>
 8019364:	2b03      	cmp	r3, #3
 8019366:	dc52      	bgt.n	801940e <process_control_request+0x572>
 8019368:	2b00      	cmp	r3, #0
 801936a:	d002      	beq.n	8019372 <process_control_request+0x4d6>
 801936c:	2b01      	cmp	r3, #1
 801936e:	d011      	beq.n	8019394 <process_control_request+0x4f8>
 8019370:	e04d      	b.n	801940e <process_control_request+0x572>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8019372:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8019376:	79fb      	ldrb	r3, [r7, #7]
 8019378:	4611      	mov	r1, r2
 801937a:	4618      	mov	r0, r3
 801937c:	f000 fe64 	bl	801a048 <usbd_edpt_stalled>
 8019380:	4603      	mov	r3, r0
 8019382:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8019384:	f107 020c 	add.w	r2, r7, #12
 8019388:	79f8      	ldrb	r0, [r7, #7]
 801938a:	2302      	movs	r3, #2
 801938c:	6839      	ldr	r1, [r7, #0]
 801938e:	f000 ff23 	bl	801a1d8 <tud_control_xfer>
          }
          break;
 8019392:	e048      	b.n	8019426 <process_control_request+0x58a>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 8019394:	683b      	ldr	r3, [r7, #0]
 8019396:	885b      	ldrh	r3, [r3, #2]
 8019398:	b29b      	uxth	r3, r3
 801939a:	2b00      	cmp	r3, #0
 801939c:	d11d      	bne.n	80193da <process_control_request+0x53e>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 801939e:	683b      	ldr	r3, [r7, #0]
 80193a0:	785b      	ldrb	r3, [r3, #1]
 80193a2:	2b01      	cmp	r3, #1
 80193a4:	d112      	bne.n	80193cc <process_control_request+0x530>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80193a6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80193aa:	79fb      	ldrb	r3, [r7, #7]
 80193ac:	4611      	mov	r1, r2
 80193ae:	4618      	mov	r0, r3
 80193b0:	f000 fe0c 	bl	8019fcc <usbd_edpt_clear_stall>
 80193b4:	e011      	b.n	80193da <process_control_request+0x53e>
 80193b6:	bf00      	nop
 80193b8:	240089bc 	.word	0x240089bc
 80193bc:	e000edf0 	.word	0xe000edf0
 80193c0:	240089fc 	.word	0x240089fc
 80193c4:	240089f8 	.word	0x240089f8
 80193c8:	08033b44 	.word	0x08033b44
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 80193cc:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80193d0:	79fb      	ldrb	r3, [r7, #7]
 80193d2:	4611      	mov	r1, r2
 80193d4:	4618      	mov	r0, r3
 80193d6:	f000 fdbb 	bl	8019f50 <usbd_edpt_stall>
              }
            }

            if (driver) {
 80193da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d021      	beq.n	8019424 <process_control_request+0x588>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 80193e0:	79fb      	ldrb	r3, [r7, #7]
 80193e2:	683a      	ldr	r2, [r7, #0]
 80193e4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80193e6:	4618      	mov	r0, r3
 80193e8:	f7ff fd40 	bl	8018e6c <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 80193ec:	2000      	movs	r0, #0
 80193ee:	f000 ff6f 	bl	801a2d0 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80193f2:	4b16      	ldr	r3, [pc, #88]	@ (801944c <process_control_request+0x5b0>)
 80193f4:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80193f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80193fc:	b2db      	uxtb	r3, r3
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d110      	bne.n	8019424 <process_control_request+0x588>
 8019402:	79fb      	ldrb	r3, [r7, #7]
 8019404:	6839      	ldr	r1, [r7, #0]
 8019406:	4618      	mov	r0, r3
 8019408:	f000 fe74 	bl	801a0f4 <tud_control_status>
            }
          }
          break;
 801940c:	e00a      	b.n	8019424 <process_control_request+0x588>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 801940e:	4b10      	ldr	r3, [pc, #64]	@ (8019450 <process_control_request+0x5b4>)
 8019410:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	f003 0301 	and.w	r3, r3, #1
 801941a:	2b00      	cmp	r3, #0
 801941c:	d000      	beq.n	8019420 <process_control_request+0x584>
 801941e:	be00      	bkpt	0x0000
            return false;
 8019420:	2300      	movs	r3, #0
 8019422:	e00e      	b.n	8019442 <process_control_request+0x5a6>
          break;
 8019424:	bf00      	nop
        }
      }
    }
    break;
 8019426:	e00b      	b.n	8019440 <process_control_request+0x5a4>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8019428:	4b09      	ldr	r3, [pc, #36]	@ (8019450 <process_control_request+0x5b4>)
 801942a:	637b      	str	r3, [r7, #52]	@ 0x34
 801942c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	f003 0301 	and.w	r3, r3, #1
 8019434:	2b00      	cmp	r3, #0
 8019436:	d000      	beq.n	801943a <process_control_request+0x59e>
 8019438:	be00      	bkpt	0x0000
      return false;
 801943a:	2300      	movs	r3, #0
 801943c:	e001      	b.n	8019442 <process_control_request+0x5a6>
      break;
 801943e:	bf00      	nop
  }

  return true;
 8019440:	2301      	movs	r3, #1
}
 8019442:	4618      	mov	r0, r3
 8019444:	3768      	adds	r7, #104	@ 0x68
 8019446:	46bd      	mov	sp, r7
 8019448:	bd80      	pop	{r7, pc}
 801944a:	bf00      	nop
 801944c:	240089bc 	.word	0x240089bc
 8019450:	e000edf0 	.word	0xe000edf0

08019454 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8019454:	b580      	push	{r7, lr}
 8019456:	b096      	sub	sp, #88	@ 0x58
 8019458:	af00      	add	r7, sp, #0
 801945a:	4603      	mov	r3, r0
 801945c:	460a      	mov	r2, r1
 801945e:	71fb      	strb	r3, [r7, #7]
 8019460:	4613      	mov	r3, r2
 8019462:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8019464:	79bb      	ldrb	r3, [r7, #6]
 8019466:	3b01      	subs	r3, #1
 8019468:	b2db      	uxtb	r3, r3
 801946a:	4618      	mov	r0, r3
 801946c:	f7e9 f992 	bl	8002794 <tud_descriptor_configuration_cb>
 8019470:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8019472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019474:	2b00      	cmp	r3, #0
 8019476:	d003      	beq.n	8019480 <process_set_config+0x2c>
 8019478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801947a:	785b      	ldrb	r3, [r3, #1]
 801947c:	2b02      	cmp	r3, #2
 801947e:	d00a      	beq.n	8019496 <process_set_config+0x42>
 8019480:	4b86      	ldr	r3, [pc, #536]	@ (801969c <process_set_config+0x248>)
 8019482:	623b      	str	r3, [r7, #32]
 8019484:	6a3b      	ldr	r3, [r7, #32]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	f003 0301 	and.w	r3, r3, #1
 801948c:	2b00      	cmp	r3, #0
 801948e:	d000      	beq.n	8019492 <process_set_config+0x3e>
 8019490:	be00      	bkpt	0x0000
 8019492:	2300      	movs	r3, #0
 8019494:	e0fd      	b.n	8019692 <process_set_config+0x23e>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8019496:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019498:	79db      	ldrb	r3, [r3, #7]
 801949a:	115b      	asrs	r3, r3, #5
 801949c:	f003 0301 	and.w	r3, r3, #1
 80194a0:	b2d9      	uxtb	r1, r3
 80194a2:	4a7f      	ldr	r2, [pc, #508]	@ (80196a0 <process_set_config+0x24c>)
 80194a4:	7813      	ldrb	r3, [r2, #0]
 80194a6:	f361 1304 	bfi	r3, r1, #4, #1
 80194aa:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 80194ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80194ae:	79db      	ldrb	r3, [r3, #7]
 80194b0:	119b      	asrs	r3, r3, #6
 80194b2:	f003 0301 	and.w	r3, r3, #1
 80194b6:	b2d9      	uxtb	r1, r3
 80194b8:	4a79      	ldr	r2, [pc, #484]	@ (80196a0 <process_set_config+0x24c>)
 80194ba:	7813      	ldrb	r3, [r2, #0]
 80194bc:	f361 1345 	bfi	r3, r1, #5, #1
 80194c0:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80194c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80194c4:	3309      	adds	r3, #9
 80194c6:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80194c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80194ca:	885b      	ldrh	r3, [r3, #2]
 80194cc:	b29b      	uxth	r3, r3
 80194ce:	461a      	mov	r2, r3
 80194d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80194d2:	4413      	add	r3, r2
 80194d4:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 80194d6:	e0d6      	b.n	8019686 <process_set_config+0x232>
  {
    uint8_t assoc_itf_count = 1;
 80194d8:	2301      	movs	r3, #1
 80194da:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80194de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194e0:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80194e2:	69fb      	ldr	r3, [r7, #28]
 80194e4:	3301      	adds	r3, #1
 80194e6:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 80194e8:	2b0b      	cmp	r3, #11
 80194ea:	d10f      	bne.n	801950c <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 80194ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194ee:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 80194f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80194f2:	78db      	ldrb	r3, [r3, #3]
 80194f4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80194f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194fa:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80194fc:	69bb      	ldr	r3, [r7, #24]
 80194fe:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8019500:	697b      	ldr	r3, [r7, #20]
 8019502:	781b      	ldrb	r3, [r3, #0]
 8019504:	461a      	mov	r2, r3
 8019506:	697b      	ldr	r3, [r7, #20]
 8019508:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 801950a:	657b      	str	r3, [r7, #84]	@ 0x54
 801950c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801950e:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8019510:	693b      	ldr	r3, [r7, #16]
 8019512:	3301      	adds	r3, #1
 8019514:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8019516:	2b04      	cmp	r3, #4
 8019518:	d00a      	beq.n	8019530 <process_set_config+0xdc>
 801951a:	4b60      	ldr	r3, [pc, #384]	@ (801969c <process_set_config+0x248>)
 801951c:	627b      	str	r3, [r7, #36]	@ 0x24
 801951e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	f003 0301 	and.w	r3, r3, #1
 8019526:	2b00      	cmp	r3, #0
 8019528:	d000      	beq.n	801952c <process_set_config+0xd8>
 801952a:	be00      	bkpt	0x0000
 801952c:	2300      	movs	r3, #0
 801952e:	e0b0      	b.n	8019692 <process_set_config+0x23e>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8019530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019532:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8019534:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019538:	1ad3      	subs	r3, r2, r3
 801953a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 801953c:	2300      	movs	r3, #0
 801953e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8019542:	e088      	b.n	8019656 <process_set_config+0x202>
 8019544:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8019548:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 801954a:	2300      	movs	r3, #0
 801954c:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 801954e:	4b55      	ldr	r3, [pc, #340]	@ (80196a4 <process_set_config+0x250>)
 8019550:	781b      	ldrb	r3, [r3, #0]
 8019552:	7bfa      	ldrb	r2, [r7, #15]
 8019554:	429a      	cmp	r2, r3
 8019556:	d206      	bcs.n	8019566 <process_set_config+0x112>
    driver = &_app_driver[drvid];
 8019558:	4b53      	ldr	r3, [pc, #332]	@ (80196a8 <process_set_config+0x254>)
 801955a:	681a      	ldr	r2, [r3, #0]
 801955c:	7bfb      	ldrb	r3, [r7, #15]
 801955e:	015b      	lsls	r3, r3, #5
 8019560:	4413      	add	r3, r2
 8019562:	60bb      	str	r3, [r7, #8]
 8019564:	e00c      	b.n	8019580 <process_set_config+0x12c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8019566:	4b4f      	ldr	r3, [pc, #316]	@ (80196a4 <process_set_config+0x250>)
 8019568:	781b      	ldrb	r3, [r3, #0]
 801956a:	7bfa      	ldrb	r2, [r7, #15]
 801956c:	429a      	cmp	r2, r3
 801956e:	d807      	bhi.n	8019580 <process_set_config+0x12c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8019570:	7bfb      	ldrb	r3, [r7, #15]
 8019572:	4a4c      	ldr	r2, [pc, #304]	@ (80196a4 <process_set_config+0x250>)
 8019574:	7812      	ldrb	r2, [r2, #0]
 8019576:	1a9b      	subs	r3, r3, r2
 8019578:	015b      	lsls	r3, r3, #5
 801957a:	4a4c      	ldr	r2, [pc, #304]	@ (80196ac <process_set_config+0x258>)
 801957c:	4413      	add	r3, r2
 801957e:	60bb      	str	r3, [r7, #8]
  return driver;
 8019580:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8019582:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 8019584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019586:	2b00      	cmp	r3, #0
 8019588:	d10a      	bne.n	80195a0 <process_set_config+0x14c>
 801958a:	4b44      	ldr	r3, [pc, #272]	@ (801969c <process_set_config+0x248>)
 801958c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801958e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	f003 0301 	and.w	r3, r3, #1
 8019596:	2b00      	cmp	r3, #0
 8019598:	d000      	beq.n	801959c <process_set_config+0x148>
 801959a:	be00      	bkpt	0x0000
 801959c:	2300      	movs	r3, #0
 801959e:	e078      	b.n	8019692 <process_set_config+0x23e>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80195a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195a2:	691b      	ldr	r3, [r3, #16]
 80195a4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80195a6:	79f8      	ldrb	r0, [r7, #7]
 80195a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80195aa:	4798      	blx	r3
 80195ac:	4603      	mov	r3, r0
 80195ae:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80195b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80195b2:	2b08      	cmp	r3, #8
 80195b4:	d94a      	bls.n	801964c <process_set_config+0x1f8>
 80195b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80195b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80195ba:	429a      	cmp	r2, r3
 80195bc:	d846      	bhi.n	801964c <process_set_config+0x1f8>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 80195be:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80195c2:	2b01      	cmp	r3, #1
 80195c4:	d107      	bne.n	80195d6 <process_set_config+0x182>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80195c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195c8:	691b      	ldr	r3, [r3, #16]
 80195ca:	4a39      	ldr	r2, [pc, #228]	@ (80196b0 <process_set_config+0x25c>)
 80195cc:	4293      	cmp	r3, r2
 80195ce:	d102      	bne.n	80195d6 <process_set_config+0x182>
 80195d0:	2302      	movs	r3, #2
 80195d2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80195d6:	2300      	movs	r3, #0
 80195d8:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80195dc:	e024      	b.n	8019628 <process_set_config+0x1d4>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80195de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80195e0:	789a      	ldrb	r2, [r3, #2]
 80195e2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80195e6:	4413      	add	r3, r2
 80195e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80195ec:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80195f0:	4a2b      	ldr	r2, [pc, #172]	@ (80196a0 <process_set_config+0x24c>)
 80195f2:	4413      	add	r3, r2
 80195f4:	791b      	ldrb	r3, [r3, #4]
 80195f6:	2bff      	cmp	r3, #255	@ 0xff
 80195f8:	d00a      	beq.n	8019610 <process_set_config+0x1bc>
 80195fa:	4b28      	ldr	r3, [pc, #160]	@ (801969c <process_set_config+0x248>)
 80195fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80195fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	f003 0301 	and.w	r3, r3, #1
 8019606:	2b00      	cmp	r3, #0
 8019608:	d000      	beq.n	801960c <process_set_config+0x1b8>
 801960a:	be00      	bkpt	0x0000
 801960c:	2300      	movs	r3, #0
 801960e:	e040      	b.n	8019692 <process_set_config+0x23e>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8019610:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8019614:	4a22      	ldr	r2, [pc, #136]	@ (80196a0 <process_set_config+0x24c>)
 8019616:	4413      	add	r3, r2
 8019618:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 801961c:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 801961e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8019622:	3301      	adds	r3, #1
 8019624:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8019628:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 801962c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8019630:	429a      	cmp	r2, r3
 8019632:	d3d4      	bcc.n	80195de <process_set_config+0x18a>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8019634:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8019638:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801963a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801963c:	481d      	ldr	r0, [pc, #116]	@ (80196b4 <process_set_config+0x260>)
 801963e:	f002 fe99 	bl	801c374 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8019642:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019644:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019646:	4413      	add	r3, r2
 8019648:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 801964a:	e00b      	b.n	8019664 <process_set_config+0x210>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 801964c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8019650:	3301      	adds	r3, #1
 8019652:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8019656:	4b13      	ldr	r3, [pc, #76]	@ (80196a4 <process_set_config+0x250>)
 8019658:	781b      	ldrb	r3, [r3, #0]
 801965a:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 801965e:	429a      	cmp	r2, r3
 8019660:	f67f af70 	bls.w	8019544 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8019664:	4b0f      	ldr	r3, [pc, #60]	@ (80196a4 <process_set_config+0x250>)
 8019666:	781b      	ldrb	r3, [r3, #0]
 8019668:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 801966c:	429a      	cmp	r2, r3
 801966e:	d90a      	bls.n	8019686 <process_set_config+0x232>
 8019670:	4b0a      	ldr	r3, [pc, #40]	@ (801969c <process_set_config+0x248>)
 8019672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	f003 0301 	and.w	r3, r3, #1
 801967c:	2b00      	cmp	r3, #0
 801967e:	d000      	beq.n	8019682 <process_set_config+0x22e>
 8019680:	be00      	bkpt	0x0000
 8019682:	2300      	movs	r3, #0
 8019684:	e005      	b.n	8019692 <process_set_config+0x23e>
  while( p_desc < desc_end )
 8019686:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801968a:	429a      	cmp	r2, r3
 801968c:	f4ff af24 	bcc.w	80194d8 <process_set_config+0x84>
  }

  return true;
 8019690:	2301      	movs	r3, #1
}
 8019692:	4618      	mov	r0, r3
 8019694:	3758      	adds	r7, #88	@ 0x58
 8019696:	46bd      	mov	sp, r7
 8019698:	bd80      	pop	{r7, pc}
 801969a:	bf00      	nop
 801969c:	e000edf0 	.word	0xe000edf0
 80196a0:	240089bc 	.word	0x240089bc
 80196a4:	240089fc 	.word	0x240089fc
 80196a8:	240089f8 	.word	0x240089f8
 80196ac:	08033b44 	.word	0x08033b44
 80196b0:	080175fd 	.word	0x080175fd
 80196b4:	240089d0 	.word	0x240089d0

080196b8 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b094      	sub	sp, #80	@ 0x50
 80196bc:	af00      	add	r7, sp, #0
 80196be:	4603      	mov	r3, r0
 80196c0:	6039      	str	r1, [r7, #0]
 80196c2:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80196c4:	683b      	ldr	r3, [r7, #0]
 80196c6:	885b      	ldrh	r3, [r3, #2]
 80196c8:	b29b      	uxth	r3, r3
 80196ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80196cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80196ce:	0a1b      	lsrs	r3, r3, #8
 80196d0:	b29b      	uxth	r3, r3
 80196d2:	b2db      	uxtb	r3, r3
 80196d4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 80196d8:	683b      	ldr	r3, [r7, #0]
 80196da:	885b      	ldrh	r3, [r3, #2]
 80196dc:	b29b      	uxth	r3, r3
 80196de:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80196e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80196e2:	b2db      	uxtb	r3, r3
 80196e4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 80196e8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80196ec:	3b01      	subs	r3, #1
 80196ee:	2b0e      	cmp	r3, #14
 80196f0:	f200 80b4 	bhi.w	801985c <process_get_descriptor+0x1a4>
 80196f4:	a201      	add	r2, pc, #4	@ (adr r2, 80196fc <process_get_descriptor+0x44>)
 80196f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196fa:	bf00      	nop
 80196fc:	08019739 	.word	0x08019739
 8019700:	0801979d 	.word	0x0801979d
 8019704:	08019803 	.word	0x08019803
 8019708:	0801985d 	.word	0x0801985d
 801970c:	0801985d 	.word	0x0801985d
 8019710:	08019837 	.word	0x08019837
 8019714:	0801979d 	.word	0x0801979d
 8019718:	0801985d 	.word	0x0801985d
 801971c:	0801985d 	.word	0x0801985d
 8019720:	0801985d 	.word	0x0801985d
 8019724:	0801985d 	.word	0x0801985d
 8019728:	0801985d 	.word	0x0801985d
 801972c:	0801985d 	.word	0x0801985d
 8019730:	0801985d 	.word	0x0801985d
 8019734:	0801976b 	.word	0x0801976b
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8019738:	f7e9 f822 	bl	8002780 <tud_descriptor_device_cb>
 801973c:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 801973e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019740:	2b00      	cmp	r3, #0
 8019742:	d10a      	bne.n	801975a <process_get_descriptor+0xa2>
 8019744:	4b48      	ldr	r3, [pc, #288]	@ (8019868 <process_get_descriptor+0x1b0>)
 8019746:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	f003 0301 	and.w	r3, r3, #1
 8019750:	2b00      	cmp	r3, #0
 8019752:	d000      	beq.n	8019756 <process_get_descriptor+0x9e>
 8019754:	be00      	bkpt	0x0000
 8019756:	2300      	movs	r3, #0
 8019758:	e081      	b.n	801985e <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 801975a:	79f8      	ldrb	r0, [r7, #7]
 801975c:	2312      	movs	r3, #18
 801975e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019760:	6839      	ldr	r1, [r7, #0]
 8019762:	f000 fd39 	bl	801a1d8 <tud_control_xfer>
 8019766:	4603      	mov	r3, r0
 8019768:	e079      	b.n	801985e <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 801976a:	f7ff f827 	bl	80187bc <tud_descriptor_bos_cb>
 801976e:	4603      	mov	r3, r0
 8019770:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8019772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019774:	2b00      	cmp	r3, #0
 8019776:	d101      	bne.n	801977c <process_get_descriptor+0xc4>
 8019778:	2300      	movs	r3, #0
 801977a:	e070      	b.n	801985e <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 801977c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801977e:	3302      	adds	r3, #2
 8019780:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8019782:	6a3b      	ldr	r3, [r7, #32]
 8019784:	881b      	ldrh	r3, [r3, #0]
 8019786:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 801978a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801978c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019790:	79f8      	ldrb	r0, [r7, #7]
 8019792:	6839      	ldr	r1, [r7, #0]
 8019794:	f000 fd20 	bl	801a1d8 <tud_control_xfer>
 8019798:	4603      	mov	r3, r0
 801979a:	e060      	b.n	801985e <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 801979c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80197a0:	2b02      	cmp	r3, #2
 80197a2:	d114      	bne.n	80197ce <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80197a4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80197a8:	4618      	mov	r0, r3
 80197aa:	f7e8 fff3 	bl	8002794 <tud_descriptor_configuration_cb>
 80197ae:	4603      	mov	r3, r0
 80197b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 80197b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d116      	bne.n	80197e6 <process_get_descriptor+0x12e>
 80197b8:	4b2b      	ldr	r3, [pc, #172]	@ (8019868 <process_get_descriptor+0x1b0>)
 80197ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80197bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	f003 0301 	and.w	r3, r3, #1
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d000      	beq.n	80197ca <process_get_descriptor+0x112>
 80197c8:	be00      	bkpt	0x0000
 80197ca:	2300      	movs	r3, #0
 80197cc:	e047      	b.n	801985e <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 80197ce:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80197d2:	4618      	mov	r0, r3
 80197d4:	f7ff f802 	bl	80187dc <tud_descriptor_other_speed_configuration_cb>
 80197d8:	4603      	mov	r3, r0
 80197da:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 80197dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d101      	bne.n	80197e6 <process_get_descriptor+0x12e>
 80197e2:	2300      	movs	r3, #0
 80197e4:	e03b      	b.n	801985e <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 80197e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80197e8:	3302      	adds	r3, #2
 80197ea:	61fb      	str	r3, [r7, #28]
 80197ec:	69fb      	ldr	r3, [r7, #28]
 80197ee:	881b      	ldrh	r3, [r3, #0]
 80197f0:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 80197f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80197f4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80197f6:	79f8      	ldrb	r0, [r7, #7]
 80197f8:	6839      	ldr	r1, [r7, #0]
 80197fa:	f000 fced 	bl	801a1d8 <tud_control_xfer>
 80197fe:	4603      	mov	r3, r0
 8019800:	e02d      	b.n	801985e <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8019802:	683b      	ldr	r3, [r7, #0]
 8019804:	889b      	ldrh	r3, [r3, #4]
 8019806:	b29a      	uxth	r2, r3
 8019808:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801980c:	4611      	mov	r1, r2
 801980e:	4618      	mov	r0, r3
 8019810:	f7e8 ffce 	bl	80027b0 <tud_descriptor_string_cb>
 8019814:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8019816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019818:	2b00      	cmp	r3, #0
 801981a:	d101      	bne.n	8019820 <process_get_descriptor+0x168>
 801981c:	2300      	movs	r3, #0
 801981e:	e01e      	b.n	801985e <process_get_descriptor+0x1a6>
 8019820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019822:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8019824:	69bb      	ldr	r3, [r7, #24]
 8019826:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8019828:	79f8      	ldrb	r0, [r7, #7]
 801982a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801982c:	6839      	ldr	r1, [r7, #0]
 801982e:	f000 fcd3 	bl	801a1d8 <tud_control_xfer>
 8019832:	4603      	mov	r3, r0
 8019834:	e013      	b.n	801985e <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8019836:	f7fe ffc9 	bl	80187cc <tud_descriptor_device_qualifier_cb>
 801983a:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 801983c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801983e:	2b00      	cmp	r3, #0
 8019840:	d101      	bne.n	8019846 <process_get_descriptor+0x18e>
 8019842:	2300      	movs	r3, #0
 8019844:	e00b      	b.n	801985e <process_get_descriptor+0x1a6>
 8019846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019848:	617b      	str	r3, [r7, #20]
 801984a:	697b      	ldr	r3, [r7, #20]
 801984c:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 801984e:	79f8      	ldrb	r0, [r7, #7]
 8019850:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019852:	6839      	ldr	r1, [r7, #0]
 8019854:	f000 fcc0 	bl	801a1d8 <tud_control_xfer>
 8019858:	4603      	mov	r3, r0
 801985a:	e000      	b.n	801985e <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 801985c:	2300      	movs	r3, #0
  }
}
 801985e:	4618      	mov	r0, r3
 8019860:	3750      	adds	r7, #80	@ 0x50
 8019862:	46bd      	mov	sp, r7
 8019864:	bd80      	pop	{r7, pc}
 8019866:	bf00      	nop
 8019868:	e000edf0 	.word	0xe000edf0

0801986c <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 801986c:	b580      	push	{r7, lr}
 801986e:	b0a0      	sub	sp, #128	@ 0x80
 8019870:	af00      	add	r7, sp, #0
 8019872:	6078      	str	r0, [r7, #4]
 8019874:	460b      	mov	r3, r1
 8019876:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8019878:	2300      	movs	r3, #0
 801987a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	785b      	ldrb	r3, [r3, #1]
 8019882:	3b02      	subs	r3, #2
 8019884:	2b04      	cmp	r3, #4
 8019886:	f200 8173 	bhi.w	8019b70 <dcd_event_handler+0x304>
 801988a:	a201      	add	r2, pc, #4	@ (adr r2, 8019890 <dcd_event_handler+0x24>)
 801988c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019890:	080198a5 	.word	0x080198a5
 8019894:	08019915 	.word	0x08019915
 8019898:	080198d1 	.word	0x080198d1
 801989c:	080198f3 	.word	0x080198f3
 80198a0:	08019b3d 	.word	0x08019b3d
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 80198a4:	4aab      	ldr	r2, [pc, #684]	@ (8019b54 <dcd_event_handler+0x2e8>)
 80198a6:	7813      	ldrb	r3, [r2, #0]
 80198a8:	f023 0301 	bic.w	r3, r3, #1
 80198ac:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 80198ae:	4aa9      	ldr	r2, [pc, #676]	@ (8019b54 <dcd_event_handler+0x2e8>)
 80198b0:	7813      	ldrb	r3, [r2, #0]
 80198b2:	f023 0302 	bic.w	r3, r3, #2
 80198b6:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 80198b8:	4ba6      	ldr	r3, [pc, #664]	@ (8019b54 <dcd_event_handler+0x2e8>)
 80198ba:	2200      	movs	r2, #0
 80198bc:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 80198be:	4aa5      	ldr	r2, [pc, #660]	@ (8019b54 <dcd_event_handler+0x2e8>)
 80198c0:	7813      	ldrb	r3, [r2, #0]
 80198c2:	f023 0304 	bic.w	r3, r3, #4
 80198c6:	7013      	strb	r3, [r2, #0]
      send = true;
 80198c8:	2301      	movs	r3, #1
 80198ca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 80198ce:	e158      	b.n	8019b82 <dcd_event_handler+0x316>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 80198d0:	4ba0      	ldr	r3, [pc, #640]	@ (8019b54 <dcd_event_handler+0x2e8>)
 80198d2:	781b      	ldrb	r3, [r3, #0]
 80198d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80198d8:	b2db      	uxtb	r3, r3
 80198da:	2b00      	cmp	r3, #0
 80198dc:	f000 814c 	beq.w	8019b78 <dcd_event_handler+0x30c>
        _usbd_dev.suspended = 1;
 80198e0:	4a9c      	ldr	r2, [pc, #624]	@ (8019b54 <dcd_event_handler+0x2e8>)
 80198e2:	7813      	ldrb	r3, [r2, #0]
 80198e4:	f043 0304 	orr.w	r3, r3, #4
 80198e8:	7013      	strb	r3, [r2, #0]
        send = true;
 80198ea:	2301      	movs	r3, #1
 80198ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 80198f0:	e142      	b.n	8019b78 <dcd_event_handler+0x30c>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 80198f2:	4b98      	ldr	r3, [pc, #608]	@ (8019b54 <dcd_event_handler+0x2e8>)
 80198f4:	781b      	ldrb	r3, [r3, #0]
 80198f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80198fa:	b2db      	uxtb	r3, r3
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	f000 813d 	beq.w	8019b7c <dcd_event_handler+0x310>
        _usbd_dev.suspended = 0;
 8019902:	4a94      	ldr	r2, [pc, #592]	@ (8019b54 <dcd_event_handler+0x2e8>)
 8019904:	7813      	ldrb	r3, [r2, #0]
 8019906:	f023 0304 	bic.w	r3, r3, #4
 801990a:	7013      	strb	r3, [r2, #0]
        send = true;
 801990c:	2301      	movs	r3, #1
 801990e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8019912:	e133      	b.n	8019b7c <dcd_event_handler+0x310>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8019914:	2300      	movs	r3, #0
 8019916:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 801991a:	e038      	b.n	801998e <dcd_event_handler+0x122>
 801991c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8019920:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8019924:	2300      	movs	r3, #0
 8019926:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8019928:	4b8b      	ldr	r3, [pc, #556]	@ (8019b58 <dcd_event_handler+0x2ec>)
 801992a:	781b      	ldrb	r3, [r3, #0]
 801992c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8019930:	429a      	cmp	r2, r3
 8019932:	d207      	bcs.n	8019944 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8019934:	4b89      	ldr	r3, [pc, #548]	@ (8019b5c <dcd_event_handler+0x2f0>)
 8019936:	681a      	ldr	r2, [r3, #0]
 8019938:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801993c:	015b      	lsls	r3, r3, #5
 801993e:	4413      	add	r3, r2
 8019940:	673b      	str	r3, [r7, #112]	@ 0x70
 8019942:	e00e      	b.n	8019962 <dcd_event_handler+0xf6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8019944:	4b84      	ldr	r3, [pc, #528]	@ (8019b58 <dcd_event_handler+0x2ec>)
 8019946:	781b      	ldrb	r3, [r3, #0]
 8019948:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 801994c:	429a      	cmp	r2, r3
 801994e:	d808      	bhi.n	8019962 <dcd_event_handler+0xf6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8019950:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8019954:	4a80      	ldr	r2, [pc, #512]	@ (8019b58 <dcd_event_handler+0x2ec>)
 8019956:	7812      	ldrb	r2, [r2, #0]
 8019958:	1a9b      	subs	r3, r3, r2
 801995a:	015b      	lsls	r3, r3, #5
 801995c:	4a80      	ldr	r2, [pc, #512]	@ (8019b60 <dcd_event_handler+0x2f4>)
 801995e:	4413      	add	r3, r2
 8019960:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8019962:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8019964:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8019966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019968:	2b00      	cmp	r3, #0
 801996a:	d00b      	beq.n	8019984 <dcd_event_handler+0x118>
 801996c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801996e:	69db      	ldr	r3, [r3, #28]
 8019970:	2b00      	cmp	r3, #0
 8019972:	d007      	beq.n	8019984 <dcd_event_handler+0x118>
          driver->sof(event->rhport, event->sof.frame_count);
 8019974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019976:	69db      	ldr	r3, [r3, #28]
 8019978:	687a      	ldr	r2, [r7, #4]
 801997a:	7810      	ldrb	r0, [r2, #0]
 801997c:	687a      	ldr	r2, [r7, #4]
 801997e:	6852      	ldr	r2, [r2, #4]
 8019980:	4611      	mov	r1, r2
 8019982:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8019984:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8019988:	3301      	adds	r3, #1
 801998a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 801998e:	4b72      	ldr	r3, [pc, #456]	@ (8019b58 <dcd_event_handler+0x2ec>)
 8019990:	781b      	ldrb	r3, [r3, #0]
 8019992:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8019996:	429a      	cmp	r2, r3
 8019998:	d9c0      	bls.n	801991c <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 801999a:	4b6e      	ldr	r3, [pc, #440]	@ (8019b54 <dcd_event_handler+0x2e8>)
 801999c:	781b      	ldrb	r3, [r3, #0]
 801999e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80199a2:	b2db      	uxtb	r3, r3
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d05a      	beq.n	8019a5e <dcd_event_handler+0x1f2>
        _usbd_dev.suspended = 0;
 80199a8:	4a6a      	ldr	r2, [pc, #424]	@ (8019b54 <dcd_event_handler+0x2e8>)
 80199aa:	7813      	ldrb	r3, [r2, #0]
 80199ac:	f023 0304 	bic.w	r3, r3, #4
 80199b0:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 80199b2:	f107 0314 	add.w	r3, r7, #20
 80199b6:	2200      	movs	r2, #0
 80199b8:	601a      	str	r2, [r3, #0]
 80199ba:	605a      	str	r2, [r3, #4]
 80199bc:	609a      	str	r2, [r3, #8]
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	781b      	ldrb	r3, [r3, #0]
 80199c2:	753b      	strb	r3, [r7, #20]
 80199c4:	2305      	movs	r3, #5
 80199c6:	757b      	strb	r3, [r7, #21]
 80199c8:	f107 0314 	add.w	r3, r7, #20
 80199cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80199ce:	78fb      	ldrb	r3, [r7, #3]
 80199d0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80199d4:	4b63      	ldr	r3, [pc, #396]	@ (8019b64 <dcd_event_handler+0x2f8>)
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80199da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80199dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80199de:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80199e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 80199e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80199ea:	f083 0301 	eor.w	r3, r3, #1
 80199ee:	b2db      	uxtb	r3, r3
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d003      	beq.n	80199fc <dcd_event_handler+0x190>
    qhdl->interrupt_set(false);
 80199f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	2000      	movs	r0, #0
 80199fa:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 80199fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80199fe:	3304      	adds	r3, #4
 8019a00:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8019a02:	4618      	mov	r0, r3
 8019a04:	f7fe fe37 	bl	8018676 <tu_fifo_write>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8019a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8019a12:	f083 0301 	eor.w	r3, r3, #1
 8019a16:	b2db      	uxtb	r3, r3
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d003      	beq.n	8019a24 <dcd_event_handler+0x1b8>
    qhdl->interrupt_set(true);
 8019a1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	2001      	movs	r0, #1
 8019a22:	4798      	blx	r3
  }

  return success;
 8019a24:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8019a28:	f083 0301 	eor.w	r3, r3, #1
 8019a2c:	b2db      	uxtb	r3, r3
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d009      	beq.n	8019a46 <dcd_event_handler+0x1da>
 8019a32:	4b4d      	ldr	r3, [pc, #308]	@ (8019b68 <dcd_event_handler+0x2fc>)
 8019a34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019a36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	f003 0301 	and.w	r3, r3, #1
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d00c      	beq.n	8019a5c <dcd_event_handler+0x1f0>
 8019a42:	be00      	bkpt	0x0000
 8019a44:	e00a      	b.n	8019a5c <dcd_event_handler+0x1f0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8019a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019a48:	7818      	ldrb	r0, [r3, #0]
 8019a4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019a4c:	785b      	ldrb	r3, [r3, #1]
 8019a4e:	4619      	mov	r1, r3
 8019a50:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8019a54:	461a      	mov	r2, r3
 8019a56:	f7fe fe99 	bl	801878c <tud_event_hook_cb>
  return true;
 8019a5a:	e000      	b.n	8019a5e <dcd_event_handler+0x1f2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8019a5c:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8019a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8019b54 <dcd_event_handler+0x2e8>)
 8019a60:	78db      	ldrb	r3, [r3, #3]
 8019a62:	b2db      	uxtb	r3, r3
 8019a64:	657b      	str	r3, [r7, #84]	@ 0x54
 8019a66:	2300      	movs	r3, #0
 8019a68:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8019a6c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8019a70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019a72:	fa22 f303 	lsr.w	r3, r2, r3
 8019a76:	f003 0301 	and.w	r3, r3, #1
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	bf14      	ite	ne
 8019a7e:	2301      	movne	r3, #1
 8019a80:	2300      	moveq	r3, #0
 8019a82:	b2db      	uxtb	r3, r3
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d07b      	beq.n	8019b80 <dcd_event_handler+0x314>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8019a88:	f107 0308 	add.w	r3, r7, #8
 8019a8c:	2200      	movs	r2, #0
 8019a8e:	601a      	str	r2, [r3, #0]
 8019a90:	605a      	str	r2, [r3, #4]
 8019a92:	609a      	str	r2, [r3, #8]
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	781b      	ldrb	r3, [r3, #0]
 8019a98:	723b      	strb	r3, [r7, #8]
 8019a9a:	2303      	movs	r3, #3
 8019a9c:	727b      	strb	r3, [r7, #9]
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	685b      	ldr	r3, [r3, #4]
 8019aa2:	60fb      	str	r3, [r7, #12]
 8019aa4:	f107 0308 	add.w	r3, r7, #8
 8019aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019aaa:	78fb      	ldrb	r3, [r7, #3]
 8019aac:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8019ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8019b64 <dcd_event_handler+0x2f8>)
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8019ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ab8:	643b      	str	r3, [r7, #64]	@ 0x40
 8019aba:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8019abe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8019ac2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8019ac6:	f083 0301 	eor.w	r3, r3, #1
 8019aca:	b2db      	uxtb	r3, r3
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d003      	beq.n	8019ad8 <dcd_event_handler+0x26c>
    qhdl->interrupt_set(false);
 8019ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	2000      	movs	r0, #0
 8019ad6:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8019ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019ada:	3304      	adds	r3, #4
 8019adc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019ade:	4618      	mov	r0, r3
 8019ae0:	f7fe fdc9 	bl	8018676 <tu_fifo_write>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8019aea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8019aee:	f083 0301 	eor.w	r3, r3, #1
 8019af2:	b2db      	uxtb	r3, r3
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d003      	beq.n	8019b00 <dcd_event_handler+0x294>
    qhdl->interrupt_set(true);
 8019af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	2001      	movs	r0, #1
 8019afe:	4798      	blx	r3
  return success;
 8019b00:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8019b04:	f083 0301 	eor.w	r3, r3, #1
 8019b08:	b2db      	uxtb	r3, r3
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d009      	beq.n	8019b22 <dcd_event_handler+0x2b6>
 8019b0e:	4b16      	ldr	r3, [pc, #88]	@ (8019b68 <dcd_event_handler+0x2fc>)
 8019b10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	f003 0301 	and.w	r3, r3, #1
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d00c      	beq.n	8019b38 <dcd_event_handler+0x2cc>
 8019b1e:	be00      	bkpt	0x0000
 8019b20:	e00a      	b.n	8019b38 <dcd_event_handler+0x2cc>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8019b22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019b24:	7818      	ldrb	r0, [r3, #0]
 8019b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019b28:	785b      	ldrb	r3, [r3, #1]
 8019b2a:	4619      	mov	r1, r3
 8019b2c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8019b30:	461a      	mov	r2, r3
 8019b32:	f7fe fe2b 	bl	801878c <tud_event_hook_cb>
  return true;
 8019b36:	e000      	b.n	8019b3a <dcd_event_handler+0x2ce>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8019b38:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8019b3a:	e021      	b.n	8019b80 <dcd_event_handler+0x314>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8019b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8019b6c <dcd_event_handler+0x300>)
 8019b3e:	781b      	ldrb	r3, [r3, #0]
 8019b40:	b2db      	uxtb	r3, r3
 8019b42:	3301      	adds	r3, #1
 8019b44:	b2da      	uxtb	r2, r3
 8019b46:	4b09      	ldr	r3, [pc, #36]	@ (8019b6c <dcd_event_handler+0x300>)
 8019b48:	701a      	strb	r2, [r3, #0]
      send = true;
 8019b4a:	2301      	movs	r3, #1
 8019b4c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8019b50:	e017      	b.n	8019b82 <dcd_event_handler+0x316>
 8019b52:	bf00      	nop
 8019b54:	240089bc 	.word	0x240089bc
 8019b58:	240089fc 	.word	0x240089fc
 8019b5c:	240089f8 	.word	0x240089f8
 8019b60:	08033b44 	.word	0x08033b44
 8019b64:	24008ac0 	.word	0x24008ac0
 8019b68:	e000edf0 	.word	0xe000edf0
 8019b6c:	240089f4 	.word	0x240089f4

    default:
      send = true;
 8019b70:	2301      	movs	r3, #1
 8019b72:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8019b76:	e004      	b.n	8019b82 <dcd_event_handler+0x316>
      break;
 8019b78:	bf00      	nop
 8019b7a:	e002      	b.n	8019b82 <dcd_event_handler+0x316>
      break;
 8019b7c:	bf00      	nop
 8019b7e:	e000      	b.n	8019b82 <dcd_event_handler+0x316>
      break;
 8019b80:	bf00      	nop
  }

  if (send) {
 8019b82:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d049      	beq.n	8019c1e <dcd_event_handler+0x3b2>
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8019b8e:	78fb      	ldrb	r3, [r7, #3]
 8019b90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8019b94:	4b24      	ldr	r3, [pc, #144]	@ (8019c28 <dcd_event_handler+0x3bc>)
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019b9e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019ba2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8019ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019baa:	f083 0301 	eor.w	r3, r3, #1
 8019bae:	b2db      	uxtb	r3, r3
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d003      	beq.n	8019bbc <dcd_event_handler+0x350>
    qhdl->interrupt_set(false);
 8019bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	2000      	movs	r0, #0
 8019bba:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8019bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bbe:	3304      	adds	r3, #4
 8019bc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	f7fe fd57 	bl	8018676 <tu_fifo_write>
 8019bc8:	4603      	mov	r3, r0
 8019bca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8019bce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019bd2:	f083 0301 	eor.w	r3, r3, #1
 8019bd6:	b2db      	uxtb	r3, r3
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d003      	beq.n	8019be4 <dcd_event_handler+0x378>
    qhdl->interrupt_set(true);
 8019bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	2001      	movs	r0, #1
 8019be2:	4798      	blx	r3
  return success;
 8019be4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019be8:	f083 0301 	eor.w	r3, r3, #1
 8019bec:	b2db      	uxtb	r3, r3
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d009      	beq.n	8019c06 <dcd_event_handler+0x39a>
 8019bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8019c2c <dcd_event_handler+0x3c0>)
 8019bf4:	623b      	str	r3, [r7, #32]
 8019bf6:	6a3b      	ldr	r3, [r7, #32]
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	f003 0301 	and.w	r3, r3, #1
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d00c      	beq.n	8019c1c <dcd_event_handler+0x3b0>
 8019c02:	be00      	bkpt	0x0000
 8019c04:	e00a      	b.n	8019c1c <dcd_event_handler+0x3b0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8019c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c08:	7818      	ldrb	r0, [r3, #0]
 8019c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c0c:	785b      	ldrb	r3, [r3, #1]
 8019c0e:	4619      	mov	r1, r3
 8019c10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019c14:	461a      	mov	r2, r3
 8019c16:	f7fe fdb9 	bl	801878c <tud_event_hook_cb>
  return true;
 8019c1a:	e000      	b.n	8019c1e <dcd_event_handler+0x3b2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8019c1c:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8019c1e:	bf00      	nop
 8019c20:	3780      	adds	r7, #128	@ 0x80
 8019c22:	46bd      	mov	sp, r7
 8019c24:	bd80      	pop	{r7, pc}
 8019c26:	bf00      	nop
 8019c28:	24008ac0 	.word	0x24008ac0
 8019c2c:	e000edf0 	.word	0xe000edf0

08019c30 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8019c30:	b580      	push	{r7, lr}
 8019c32:	b082      	sub	sp, #8
 8019c34:	af00      	add	r7, sp, #0
 8019c36:	4603      	mov	r3, r0
 8019c38:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 8019c3a:	79fb      	ldrb	r3, [r7, #7]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d005      	beq.n	8019c4c <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 8019c40:	4b07      	ldr	r3, [pc, #28]	@ (8019c60 <usbd_int_set+0x30>)
 8019c42:	781b      	ldrb	r3, [r3, #0]
 8019c44:	4618      	mov	r0, r3
 8019c46:	f001 f8b7 	bl	801adb8 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8019c4a:	e004      	b.n	8019c56 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8019c4c:	4b04      	ldr	r3, [pc, #16]	@ (8019c60 <usbd_int_set+0x30>)
 8019c4e:	781b      	ldrb	r3, [r3, #0]
 8019c50:	4618      	mov	r0, r3
 8019c52:	f001 f8d9 	bl	801ae08 <dcd_int_disable>
}
 8019c56:	bf00      	nop
 8019c58:	3708      	adds	r7, #8
 8019c5a:	46bd      	mov	sp, r7
 8019c5c:	bd80      	pop	{r7, pc}
 8019c5e:	bf00      	nop
 8019c60:	24000022 	.word	0x24000022

08019c64 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b08a      	sub	sp, #40	@ 0x28
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	6039      	str	r1, [r7, #0]
 8019c6c:	4611      	mov	r1, r2
 8019c6e:	461a      	mov	r2, r3
 8019c70:	4603      	mov	r3, r0
 8019c72:	71fb      	strb	r3, [r7, #7]
 8019c74:	460b      	mov	r3, r1
 8019c76:	71bb      	strb	r3, [r7, #6]
 8019c78:	4613      	mov	r3, r2
 8019c7a:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8019c80:	e04d      	b.n	8019d1e <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8019c82:	683b      	ldr	r3, [r7, #0]
 8019c84:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8019c86:	6a3b      	ldr	r3, [r7, #32]
 8019c88:	785b      	ldrb	r3, [r3, #1]
 8019c8a:	2b05      	cmp	r3, #5
 8019c8c:	d108      	bne.n	8019ca0 <usbd_open_edpt_pair+0x3c>
 8019c8e:	6a3b      	ldr	r3, [r7, #32]
 8019c90:	78db      	ldrb	r3, [r3, #3]
 8019c92:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8019c96:	b2db      	uxtb	r3, r3
 8019c98:	461a      	mov	r2, r3
 8019c9a:	797b      	ldrb	r3, [r7, #5]
 8019c9c:	4293      	cmp	r3, r2
 8019c9e:	d00a      	beq.n	8019cb6 <usbd_open_edpt_pair+0x52>
 8019ca0:	4b23      	ldr	r3, [pc, #140]	@ (8019d30 <usbd_open_edpt_pair+0xcc>)
 8019ca2:	61bb      	str	r3, [r7, #24]
 8019ca4:	69bb      	ldr	r3, [r7, #24]
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	f003 0301 	and.w	r3, r3, #1
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d000      	beq.n	8019cb2 <usbd_open_edpt_pair+0x4e>
 8019cb0:	be00      	bkpt	0x0000
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	e038      	b.n	8019d28 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8019cb6:	79fb      	ldrb	r3, [r7, #7]
 8019cb8:	6a39      	ldr	r1, [r7, #32]
 8019cba:	4618      	mov	r0, r3
 8019cbc:	f000 f83a 	bl	8019d34 <usbd_edpt_open>
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	f083 0301 	eor.w	r3, r3, #1
 8019cc6:	b2db      	uxtb	r3, r3
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d00a      	beq.n	8019ce2 <usbd_open_edpt_pair+0x7e>
 8019ccc:	4b18      	ldr	r3, [pc, #96]	@ (8019d30 <usbd_open_edpt_pair+0xcc>)
 8019cce:	61fb      	str	r3, [r7, #28]
 8019cd0:	69fb      	ldr	r3, [r7, #28]
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	f003 0301 	and.w	r3, r3, #1
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d000      	beq.n	8019cde <usbd_open_edpt_pair+0x7a>
 8019cdc:	be00      	bkpt	0x0000
 8019cde:	2300      	movs	r3, #0
 8019ce0:	e022      	b.n	8019d28 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8019ce2:	6a3b      	ldr	r3, [r7, #32]
 8019ce4:	789b      	ldrb	r3, [r3, #2]
 8019ce6:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8019ce8:	7dfb      	ldrb	r3, [r7, #23]
 8019cea:	09db      	lsrs	r3, r3, #7
 8019cec:	b2db      	uxtb	r3, r3
 8019cee:	2b01      	cmp	r3, #1
 8019cf0:	d104      	bne.n	8019cfc <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8019cf2:	6a3b      	ldr	r3, [r7, #32]
 8019cf4:	789a      	ldrb	r2, [r3, #2]
 8019cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cf8:	701a      	strb	r2, [r3, #0]
 8019cfa:	e003      	b.n	8019d04 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8019cfc:	6a3b      	ldr	r3, [r7, #32]
 8019cfe:	789a      	ldrb	r2, [r3, #2]
 8019d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d02:	701a      	strb	r2, [r3, #0]
 8019d04:	683b      	ldr	r3, [r7, #0]
 8019d06:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8019d08:	693b      	ldr	r3, [r7, #16]
 8019d0a:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	781b      	ldrb	r3, [r3, #0]
 8019d10:	461a      	mov	r2, r3
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8019d16:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8019d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d1a:	3301      	adds	r3, #1
 8019d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d1e:	79bb      	ldrb	r3, [r7, #6]
 8019d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d22:	429a      	cmp	r2, r3
 8019d24:	dbad      	blt.n	8019c82 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8019d26:	2301      	movs	r3, #1
}
 8019d28:	4618      	mov	r0, r3
 8019d2a:	3728      	adds	r7, #40	@ 0x28
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	bd80      	pop	{r7, pc}
 8019d30:	e000edf0 	.word	0xe000edf0

08019d34 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8019d34:	b580      	push	{r7, lr}
 8019d36:	b086      	sub	sp, #24
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	4603      	mov	r3, r0
 8019d3c:	6039      	str	r1, [r7, #0]
 8019d3e:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8019d40:	4b1b      	ldr	r3, [pc, #108]	@ (8019db0 <usbd_edpt_open+0x7c>)
 8019d42:	781b      	ldrb	r3, [r3, #0]
 8019d44:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8019d46:	683b      	ldr	r3, [r7, #0]
 8019d48:	789b      	ldrb	r3, [r3, #2]
 8019d4a:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8019d4c:	7bfb      	ldrb	r3, [r7, #15]
 8019d4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019d52:	b2db      	uxtb	r3, r3
 8019d54:	2b08      	cmp	r3, #8
 8019d56:	d90a      	bls.n	8019d6e <usbd_edpt_open+0x3a>
 8019d58:	4b16      	ldr	r3, [pc, #88]	@ (8019db4 <usbd_edpt_open+0x80>)
 8019d5a:	613b      	str	r3, [r7, #16]
 8019d5c:	693b      	ldr	r3, [r7, #16]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	f003 0301 	and.w	r3, r3, #1
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d000      	beq.n	8019d6a <usbd_edpt_open+0x36>
 8019d68:	be00      	bkpt	0x0000
 8019d6a:	2300      	movs	r3, #0
 8019d6c:	e01c      	b.n	8019da8 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8019d6e:	4b12      	ldr	r3, [pc, #72]	@ (8019db8 <usbd_edpt_open+0x84>)
 8019d70:	789b      	ldrb	r3, [r3, #2]
 8019d72:	4619      	mov	r1, r3
 8019d74:	6838      	ldr	r0, [r7, #0]
 8019d76:	f002 fa81 	bl	801c27c <tu_edpt_validate>
 8019d7a:	4603      	mov	r3, r0
 8019d7c:	f083 0301 	eor.w	r3, r3, #1
 8019d80:	b2db      	uxtb	r3, r3
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d00a      	beq.n	8019d9c <usbd_edpt_open+0x68>
 8019d86:	4b0b      	ldr	r3, [pc, #44]	@ (8019db4 <usbd_edpt_open+0x80>)
 8019d88:	617b      	str	r3, [r7, #20]
 8019d8a:	697b      	ldr	r3, [r7, #20]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	f003 0301 	and.w	r3, r3, #1
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d000      	beq.n	8019d98 <usbd_edpt_open+0x64>
 8019d96:	be00      	bkpt	0x0000
 8019d98:	2300      	movs	r3, #0
 8019d9a:	e005      	b.n	8019da8 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 8019d9c:	79fb      	ldrb	r3, [r7, #7]
 8019d9e:	6839      	ldr	r1, [r7, #0]
 8019da0:	4618      	mov	r0, r3
 8019da2:	f001 f90f 	bl	801afc4 <dcd_edpt_open>
 8019da6:	4603      	mov	r3, r0
}
 8019da8:	4618      	mov	r0, r3
 8019daa:	3718      	adds	r7, #24
 8019dac:	46bd      	mov	sp, r7
 8019dae:	bd80      	pop	{r7, pc}
 8019db0:	24000022 	.word	0x24000022
 8019db4:	e000edf0 	.word	0xe000edf0
 8019db8:	240089bc 	.word	0x240089bc

08019dbc <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8019dbc:	b580      	push	{r7, lr}
 8019dbe:	b086      	sub	sp, #24
 8019dc0:	af00      	add	r7, sp, #0
 8019dc2:	4603      	mov	r3, r0
 8019dc4:	460a      	mov	r2, r1
 8019dc6:	71fb      	strb	r3, [r7, #7]
 8019dc8:	4613      	mov	r3, r2
 8019dca:	71bb      	strb	r3, [r7, #6]
 8019dcc:	79bb      	ldrb	r3, [r7, #6]
 8019dce:	73bb      	strb	r3, [r7, #14]
 8019dd0:	7bbb      	ldrb	r3, [r7, #14]
 8019dd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019dd6:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8019dd8:	75fb      	strb	r3, [r7, #23]
 8019dda:	79bb      	ldrb	r3, [r7, #6]
 8019ddc:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8019dde:	7bfb      	ldrb	r3, [r7, #15]
 8019de0:	09db      	lsrs	r3, r3, #7
 8019de2:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8019de4:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8019de6:	7dfa      	ldrb	r2, [r7, #23]
 8019de8:	7dbb      	ldrb	r3, [r7, #22]
 8019dea:	0052      	lsls	r2, r2, #1
 8019dec:	4413      	add	r3, r2
 8019dee:	3320      	adds	r3, #32
 8019df0:	4a06      	ldr	r2, [pc, #24]	@ (8019e0c <usbd_edpt_claim+0x50>)
 8019df2:	4413      	add	r3, r2
 8019df4:	3306      	adds	r3, #6
 8019df6:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8019df8:	2100      	movs	r1, #0
 8019dfa:	6938      	ldr	r0, [r7, #16]
 8019dfc:	f002 f9d9 	bl	801c1b2 <tu_edpt_claim>
 8019e00:	4603      	mov	r3, r0
}
 8019e02:	4618      	mov	r0, r3
 8019e04:	3718      	adds	r7, #24
 8019e06:	46bd      	mov	sp, r7
 8019e08:	bd80      	pop	{r7, pc}
 8019e0a:	bf00      	nop
 8019e0c:	240089bc 	.word	0x240089bc

08019e10 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8019e10:	b580      	push	{r7, lr}
 8019e12:	b086      	sub	sp, #24
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	4603      	mov	r3, r0
 8019e18:	460a      	mov	r2, r1
 8019e1a:	71fb      	strb	r3, [r7, #7]
 8019e1c:	4613      	mov	r3, r2
 8019e1e:	71bb      	strb	r3, [r7, #6]
 8019e20:	79bb      	ldrb	r3, [r7, #6]
 8019e22:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8019e24:	7bbb      	ldrb	r3, [r7, #14]
 8019e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019e2a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8019e2c:	75fb      	strb	r3, [r7, #23]
 8019e2e:	79bb      	ldrb	r3, [r7, #6]
 8019e30:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8019e32:	7bfb      	ldrb	r3, [r7, #15]
 8019e34:	09db      	lsrs	r3, r3, #7
 8019e36:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8019e38:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8019e3a:	7dfa      	ldrb	r2, [r7, #23]
 8019e3c:	7dbb      	ldrb	r3, [r7, #22]
 8019e3e:	0052      	lsls	r2, r2, #1
 8019e40:	4413      	add	r3, r2
 8019e42:	3320      	adds	r3, #32
 8019e44:	4a06      	ldr	r2, [pc, #24]	@ (8019e60 <usbd_edpt_release+0x50>)
 8019e46:	4413      	add	r3, r2
 8019e48:	3306      	adds	r3, #6
 8019e4a:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8019e4c:	2100      	movs	r1, #0
 8019e4e:	6938      	ldr	r0, [r7, #16]
 8019e50:	f002 f9e9 	bl	801c226 <tu_edpt_release>
 8019e54:	4603      	mov	r3, r0
}
 8019e56:	4618      	mov	r0, r3
 8019e58:	3718      	adds	r7, #24
 8019e5a:	46bd      	mov	sp, r7
 8019e5c:	bd80      	pop	{r7, pc}
 8019e5e:	bf00      	nop
 8019e60:	240089bc 	.word	0x240089bc

08019e64 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8019e64:	b580      	push	{r7, lr}
 8019e66:	b086      	sub	sp, #24
 8019e68:	af00      	add	r7, sp, #0
 8019e6a:	603a      	str	r2, [r7, #0]
 8019e6c:	461a      	mov	r2, r3
 8019e6e:	4603      	mov	r3, r0
 8019e70:	71fb      	strb	r3, [r7, #7]
 8019e72:	460b      	mov	r3, r1
 8019e74:	71bb      	strb	r3, [r7, #6]
 8019e76:	4613      	mov	r3, r2
 8019e78:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8019e7a:	4b32      	ldr	r3, [pc, #200]	@ (8019f44 <usbd_edpt_xfer+0xe0>)
 8019e7c:	781b      	ldrb	r3, [r3, #0]
 8019e7e:	71fb      	strb	r3, [r7, #7]
 8019e80:	79bb      	ldrb	r3, [r7, #6]
 8019e82:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8019e84:	7abb      	ldrb	r3, [r7, #10]
 8019e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019e8a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8019e8c:	75fb      	strb	r3, [r7, #23]
 8019e8e:	79bb      	ldrb	r3, [r7, #6]
 8019e90:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8019e92:	7afb      	ldrb	r3, [r7, #11]
 8019e94:	09db      	lsrs	r3, r3, #7
 8019e96:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8019e98:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8019e9a:	7dfa      	ldrb	r2, [r7, #23]
 8019e9c:	7dbb      	ldrb	r3, [r7, #22]
 8019e9e:	492a      	ldr	r1, [pc, #168]	@ (8019f48 <usbd_edpt_xfer+0xe4>)
 8019ea0:	0052      	lsls	r2, r2, #1
 8019ea2:	440a      	add	r2, r1
 8019ea4:	4413      	add	r3, r2
 8019ea6:	3320      	adds	r3, #32
 8019ea8:	799b      	ldrb	r3, [r3, #6]
 8019eaa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019eae:	b2db      	uxtb	r3, r3
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d00a      	beq.n	8019eca <usbd_edpt_xfer+0x66>
 8019eb4:	4b25      	ldr	r3, [pc, #148]	@ (8019f4c <usbd_edpt_xfer+0xe8>)
 8019eb6:	60fb      	str	r3, [r7, #12]
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	f003 0301 	and.w	r3, r3, #1
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d000      	beq.n	8019ec6 <usbd_edpt_xfer+0x62>
 8019ec4:	be00      	bkpt	0x0000
 8019ec6:	2300      	movs	r3, #0
 8019ec8:	e038      	b.n	8019f3c <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8019eca:	7dfa      	ldrb	r2, [r7, #23]
 8019ecc:	7dbb      	ldrb	r3, [r7, #22]
 8019ece:	491e      	ldr	r1, [pc, #120]	@ (8019f48 <usbd_edpt_xfer+0xe4>)
 8019ed0:	0052      	lsls	r2, r2, #1
 8019ed2:	440a      	add	r2, r1
 8019ed4:	4413      	add	r3, r2
 8019ed6:	f103 0220 	add.w	r2, r3, #32
 8019eda:	7993      	ldrb	r3, [r2, #6]
 8019edc:	f043 0301 	orr.w	r3, r3, #1
 8019ee0:	7193      	strb	r3, [r2, #6]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8019ee2:	88bb      	ldrh	r3, [r7, #4]
 8019ee4:	79b9      	ldrb	r1, [r7, #6]
 8019ee6:	79f8      	ldrb	r0, [r7, #7]
 8019ee8:	683a      	ldr	r2, [r7, #0]
 8019eea:	f001 f929 	bl	801b140 <dcd_edpt_xfer>
 8019eee:	4603      	mov	r3, r0
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d001      	beq.n	8019ef8 <usbd_edpt_xfer+0x94>
    return true;
 8019ef4:	2301      	movs	r3, #1
 8019ef6:	e021      	b.n	8019f3c <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8019ef8:	7dfa      	ldrb	r2, [r7, #23]
 8019efa:	7dbb      	ldrb	r3, [r7, #22]
 8019efc:	4912      	ldr	r1, [pc, #72]	@ (8019f48 <usbd_edpt_xfer+0xe4>)
 8019efe:	0052      	lsls	r2, r2, #1
 8019f00:	440a      	add	r2, r1
 8019f02:	4413      	add	r3, r2
 8019f04:	f103 0220 	add.w	r2, r3, #32
 8019f08:	7993      	ldrb	r3, [r2, #6]
 8019f0a:	f023 0301 	bic.w	r3, r3, #1
 8019f0e:	7193      	strb	r3, [r2, #6]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8019f10:	7dfa      	ldrb	r2, [r7, #23]
 8019f12:	7dbb      	ldrb	r3, [r7, #22]
 8019f14:	490c      	ldr	r1, [pc, #48]	@ (8019f48 <usbd_edpt_xfer+0xe4>)
 8019f16:	0052      	lsls	r2, r2, #1
 8019f18:	440a      	add	r2, r1
 8019f1a:	4413      	add	r3, r2
 8019f1c:	f103 0220 	add.w	r2, r3, #32
 8019f20:	7993      	ldrb	r3, [r2, #6]
 8019f22:	f023 0304 	bic.w	r3, r3, #4
 8019f26:	7193      	strb	r3, [r2, #6]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8019f28:	4b08      	ldr	r3, [pc, #32]	@ (8019f4c <usbd_edpt_xfer+0xe8>)
 8019f2a:	613b      	str	r3, [r7, #16]
 8019f2c:	693b      	ldr	r3, [r7, #16]
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	f003 0301 	and.w	r3, r3, #1
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d000      	beq.n	8019f3a <usbd_edpt_xfer+0xd6>
 8019f38:	be00      	bkpt	0x0000
    return false;
 8019f3a:	2300      	movs	r3, #0
  }
}
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	3718      	adds	r7, #24
 8019f40:	46bd      	mov	sp, r7
 8019f42:	bd80      	pop	{r7, pc}
 8019f44:	24000022 	.word	0x24000022
 8019f48:	240089bc 	.word	0x240089bc
 8019f4c:	e000edf0 	.word	0xe000edf0

08019f50 <usbd_edpt_stall>:
  uint8_t const dir = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8019f50:	b580      	push	{r7, lr}
 8019f52:	b084      	sub	sp, #16
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	4603      	mov	r3, r0
 8019f58:	460a      	mov	r2, r1
 8019f5a:	71fb      	strb	r3, [r7, #7]
 8019f5c:	4613      	mov	r3, r2
 8019f5e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8019f60:	4b18      	ldr	r3, [pc, #96]	@ (8019fc4 <usbd_edpt_stall+0x74>)
 8019f62:	781b      	ldrb	r3, [r3, #0]
 8019f64:	71fb      	strb	r3, [r7, #7]
 8019f66:	79bb      	ldrb	r3, [r7, #6]
 8019f68:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8019f6a:	7b3b      	ldrb	r3, [r7, #12]
 8019f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019f70:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8019f72:	73fb      	strb	r3, [r7, #15]
 8019f74:	79bb      	ldrb	r3, [r7, #6]
 8019f76:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8019f78:	7b7b      	ldrb	r3, [r7, #13]
 8019f7a:	09db      	lsrs	r3, r3, #7
 8019f7c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8019f7e:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 8019f80:	79ba      	ldrb	r2, [r7, #6]
 8019f82:	79fb      	ldrb	r3, [r7, #7]
 8019f84:	4611      	mov	r1, r2
 8019f86:	4618      	mov	r0, r3
 8019f88:	f001 f91a 	bl	801b1c0 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8019f8c:	7bfa      	ldrb	r2, [r7, #15]
 8019f8e:	7bbb      	ldrb	r3, [r7, #14]
 8019f90:	490d      	ldr	r1, [pc, #52]	@ (8019fc8 <usbd_edpt_stall+0x78>)
 8019f92:	0052      	lsls	r2, r2, #1
 8019f94:	440a      	add	r2, r1
 8019f96:	4413      	add	r3, r2
 8019f98:	f103 0220 	add.w	r2, r3, #32
 8019f9c:	7993      	ldrb	r3, [r2, #6]
 8019f9e:	f043 0302 	orr.w	r3, r3, #2
 8019fa2:	7193      	strb	r3, [r2, #6]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8019fa4:	7bfa      	ldrb	r2, [r7, #15]
 8019fa6:	7bbb      	ldrb	r3, [r7, #14]
 8019fa8:	4907      	ldr	r1, [pc, #28]	@ (8019fc8 <usbd_edpt_stall+0x78>)
 8019faa:	0052      	lsls	r2, r2, #1
 8019fac:	440a      	add	r2, r1
 8019fae:	4413      	add	r3, r2
 8019fb0:	f103 0220 	add.w	r2, r3, #32
 8019fb4:	7993      	ldrb	r3, [r2, #6]
 8019fb6:	f043 0301 	orr.w	r3, r3, #1
 8019fba:	7193      	strb	r3, [r2, #6]
}
 8019fbc:	bf00      	nop
 8019fbe:	3710      	adds	r7, #16
 8019fc0:	46bd      	mov	sp, r7
 8019fc2:	bd80      	pop	{r7, pc}
 8019fc4:	24000022 	.word	0x24000022
 8019fc8:	240089bc 	.word	0x240089bc

08019fcc <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b084      	sub	sp, #16
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	460a      	mov	r2, r1
 8019fd6:	71fb      	strb	r3, [r7, #7]
 8019fd8:	4613      	mov	r3, r2
 8019fda:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8019fdc:	4b18      	ldr	r3, [pc, #96]	@ (801a040 <usbd_edpt_clear_stall+0x74>)
 8019fde:	781b      	ldrb	r3, [r3, #0]
 8019fe0:	71fb      	strb	r3, [r7, #7]
 8019fe2:	79bb      	ldrb	r3, [r7, #6]
 8019fe4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8019fe6:	7b3b      	ldrb	r3, [r7, #12]
 8019fe8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019fec:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8019fee:	73fb      	strb	r3, [r7, #15]
 8019ff0:	79bb      	ldrb	r3, [r7, #6]
 8019ff2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8019ff4:	7b7b      	ldrb	r3, [r7, #13]
 8019ff6:	09db      	lsrs	r3, r3, #7
 8019ff8:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8019ffa:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 8019ffc:	79ba      	ldrb	r2, [r7, #6]
 8019ffe:	79fb      	ldrb	r3, [r7, #7]
 801a000:	4611      	mov	r1, r2
 801a002:	4618      	mov	r0, r3
 801a004:	f001 f90e 	bl	801b224 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 801a008:	7bfa      	ldrb	r2, [r7, #15]
 801a00a:	7bbb      	ldrb	r3, [r7, #14]
 801a00c:	490d      	ldr	r1, [pc, #52]	@ (801a044 <usbd_edpt_clear_stall+0x78>)
 801a00e:	0052      	lsls	r2, r2, #1
 801a010:	440a      	add	r2, r1
 801a012:	4413      	add	r3, r2
 801a014:	f103 0220 	add.w	r2, r3, #32
 801a018:	7993      	ldrb	r3, [r2, #6]
 801a01a:	f023 0302 	bic.w	r3, r3, #2
 801a01e:	7193      	strb	r3, [r2, #6]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 801a020:	7bfa      	ldrb	r2, [r7, #15]
 801a022:	7bbb      	ldrb	r3, [r7, #14]
 801a024:	4907      	ldr	r1, [pc, #28]	@ (801a044 <usbd_edpt_clear_stall+0x78>)
 801a026:	0052      	lsls	r2, r2, #1
 801a028:	440a      	add	r2, r1
 801a02a:	4413      	add	r3, r2
 801a02c:	f103 0220 	add.w	r2, r3, #32
 801a030:	7993      	ldrb	r3, [r2, #6]
 801a032:	f023 0301 	bic.w	r3, r3, #1
 801a036:	7193      	strb	r3, [r2, #6]
}
 801a038:	bf00      	nop
 801a03a:	3710      	adds	r7, #16
 801a03c:	46bd      	mov	sp, r7
 801a03e:	bd80      	pop	{r7, pc}
 801a040:	24000022 	.word	0x24000022
 801a044:	240089bc 	.word	0x240089bc

0801a048 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 801a048:	b480      	push	{r7}
 801a04a:	b085      	sub	sp, #20
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	4603      	mov	r3, r0
 801a050:	460a      	mov	r2, r1
 801a052:	71fb      	strb	r3, [r7, #7]
 801a054:	4613      	mov	r3, r2
 801a056:	71bb      	strb	r3, [r7, #6]
 801a058:	79bb      	ldrb	r3, [r7, #6]
 801a05a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801a05c:	7b3b      	ldrb	r3, [r7, #12]
 801a05e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a062:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 801a064:	73fb      	strb	r3, [r7, #15]
 801a066:	79bb      	ldrb	r3, [r7, #6]
 801a068:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801a06a:	7b7b      	ldrb	r3, [r7, #13]
 801a06c:	09db      	lsrs	r3, r3, #7
 801a06e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 801a070:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 801a072:	7bfa      	ldrb	r2, [r7, #15]
 801a074:	7bbb      	ldrb	r3, [r7, #14]
 801a076:	490a      	ldr	r1, [pc, #40]	@ (801a0a0 <usbd_edpt_stalled+0x58>)
 801a078:	0052      	lsls	r2, r2, #1
 801a07a:	440a      	add	r2, r1
 801a07c:	4413      	add	r3, r2
 801a07e:	3320      	adds	r3, #32
 801a080:	799b      	ldrb	r3, [r3, #6]
 801a082:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a086:	b2db      	uxtb	r3, r3
 801a088:	2b00      	cmp	r3, #0
 801a08a:	bf14      	ite	ne
 801a08c:	2301      	movne	r3, #1
 801a08e:	2300      	moveq	r3, #0
 801a090:	b2db      	uxtb	r3, r3
}
 801a092:	4618      	mov	r0, r3
 801a094:	3714      	adds	r7, #20
 801a096:	46bd      	mov	sp, r7
 801a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a09c:	4770      	bx	lr
 801a09e:	bf00      	nop
 801a0a0:	240089bc 	.word	0x240089bc

0801a0a4 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 801a0a4:	b480      	push	{r7}
 801a0a6:	b083      	sub	sp, #12
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	6039      	str	r1, [r7, #0]
 801a0ae:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 801a0b0:	bf00      	nop
 801a0b2:	370c      	adds	r7, #12
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ba:	4770      	bx	lr

0801a0bc <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	b084      	sub	sp, #16
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	4603      	mov	r3, r0
 801a0c4:	6039      	str	r1, [r7, #0]
 801a0c6:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 801a0c8:	683b      	ldr	r3, [r7, #0]
 801a0ca:	781b      	ldrb	r3, [r3, #0]
 801a0cc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801a0d0:	b2db      	uxtb	r3, r3
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d001      	beq.n	801a0da <status_stage_xact+0x1e>
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	e000      	b.n	801a0dc <status_stage_xact+0x20>
 801a0da:	2380      	movs	r3, #128	@ 0x80
 801a0dc:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 801a0de:	7bf9      	ldrb	r1, [r7, #15]
 801a0e0:	79f8      	ldrb	r0, [r7, #7]
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	2200      	movs	r2, #0
 801a0e6:	f7ff febd 	bl	8019e64 <usbd_edpt_xfer>
 801a0ea:	4603      	mov	r3, r0
}
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	3710      	adds	r7, #16
 801a0f0:	46bd      	mov	sp, r7
 801a0f2:	bd80      	pop	{r7, pc}

0801a0f4 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 801a0f4:	b580      	push	{r7, lr}
 801a0f6:	b082      	sub	sp, #8
 801a0f8:	af00      	add	r7, sp, #0
 801a0fa:	4603      	mov	r3, r0
 801a0fc:	6039      	str	r1, [r7, #0]
 801a0fe:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 801a100:	4b0b      	ldr	r3, [pc, #44]	@ (801a130 <tud_control_status+0x3c>)
 801a102:	683a      	ldr	r2, [r7, #0]
 801a104:	6810      	ldr	r0, [r2, #0]
 801a106:	6851      	ldr	r1, [r2, #4]
 801a108:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 801a10a:	4b09      	ldr	r3, [pc, #36]	@ (801a130 <tud_control_status+0x3c>)
 801a10c:	2200      	movs	r2, #0
 801a10e:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 801a110:	4b07      	ldr	r3, [pc, #28]	@ (801a130 <tud_control_status+0x3c>)
 801a112:	2200      	movs	r2, #0
 801a114:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 801a116:	4b06      	ldr	r3, [pc, #24]	@ (801a130 <tud_control_status+0x3c>)
 801a118:	2200      	movs	r2, #0
 801a11a:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 801a11c:	79fb      	ldrb	r3, [r7, #7]
 801a11e:	6839      	ldr	r1, [r7, #0]
 801a120:	4618      	mov	r0, r3
 801a122:	f7ff ffcb 	bl	801a0bc <status_stage_xact>
 801a126:	4603      	mov	r3, r0
}
 801a128:	4618      	mov	r0, r3
 801a12a:	3708      	adds	r7, #8
 801a12c:	46bd      	mov	sp, r7
 801a12e:	bd80      	pop	{r7, pc}
 801a130:	24008ac4 	.word	0x24008ac4

0801a134 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 801a134:	b580      	push	{r7, lr}
 801a136:	b088      	sub	sp, #32
 801a138:	af00      	add	r7, sp, #0
 801a13a:	4603      	mov	r3, r0
 801a13c:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 801a13e:	4b24      	ldr	r3, [pc, #144]	@ (801a1d0 <data_stage_xact+0x9c>)
 801a140:	899a      	ldrh	r2, [r3, #12]
 801a142:	4b23      	ldr	r3, [pc, #140]	@ (801a1d0 <data_stage_xact+0x9c>)
 801a144:	89db      	ldrh	r3, [r3, #14]
 801a146:	1ad3      	subs	r3, r2, r3
 801a148:	b29b      	uxth	r3, r3
 801a14a:	837b      	strh	r3, [r7, #26]
 801a14c:	2340      	movs	r3, #64	@ 0x40
 801a14e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 801a150:	8b7a      	ldrh	r2, [r7, #26]
 801a152:	8b3b      	ldrh	r3, [r7, #24]
 801a154:	4293      	cmp	r3, r2
 801a156:	bf28      	it	cs
 801a158:	4613      	movcs	r3, r2
 801a15a:	b29b      	uxth	r3, r3
 801a15c:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 801a15e:	2300      	movs	r3, #0
 801a160:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 801a162:	4b1b      	ldr	r3, [pc, #108]	@ (801a1d0 <data_stage_xact+0x9c>)
 801a164:	781b      	ldrb	r3, [r3, #0]
 801a166:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801a16a:	b2db      	uxtb	r3, r3
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d01e      	beq.n	801a1ae <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 801a170:	2380      	movs	r3, #128	@ 0x80
 801a172:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 801a174:	8bbb      	ldrh	r3, [r7, #28]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d019      	beq.n	801a1ae <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 801a17a:	4b15      	ldr	r3, [pc, #84]	@ (801a1d0 <data_stage_xact+0x9c>)
 801a17c:	689a      	ldr	r2, [r3, #8]
 801a17e:	8bbb      	ldrh	r3, [r7, #28]
 801a180:	4914      	ldr	r1, [pc, #80]	@ (801a1d4 <data_stage_xact+0xa0>)
 801a182:	6179      	str	r1, [r7, #20]
 801a184:	2140      	movs	r1, #64	@ 0x40
 801a186:	6139      	str	r1, [r7, #16]
 801a188:	60fa      	str	r2, [r7, #12]
 801a18a:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 801a18c:	693a      	ldr	r2, [r7, #16]
 801a18e:	68bb      	ldr	r3, [r7, #8]
 801a190:	429a      	cmp	r2, r3
 801a192:	d202      	bcs.n	801a19a <data_stage_xact+0x66>
    return -1;
 801a194:	f04f 33ff 	mov.w	r3, #4294967295
 801a198:	e005      	b.n	801a1a6 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 801a19a:	68ba      	ldr	r2, [r7, #8]
 801a19c:	68f9      	ldr	r1, [r7, #12]
 801a19e:	6978      	ldr	r0, [r7, #20]
 801a1a0:	f005 fa39 	bl	801f616 <memcpy>
  return 0;
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d001      	beq.n	801a1ae <data_stage_xact+0x7a>
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	e00b      	b.n	801a1c6 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 801a1ae:	8bbb      	ldrh	r3, [r7, #28]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d001      	beq.n	801a1b8 <data_stage_xact+0x84>
 801a1b4:	4a07      	ldr	r2, [pc, #28]	@ (801a1d4 <data_stage_xact+0xa0>)
 801a1b6:	e000      	b.n	801a1ba <data_stage_xact+0x86>
 801a1b8:	2200      	movs	r2, #0
 801a1ba:	8bbb      	ldrh	r3, [r7, #28]
 801a1bc:	7ff9      	ldrb	r1, [r7, #31]
 801a1be:	79f8      	ldrb	r0, [r7, #7]
 801a1c0:	f7ff fe50 	bl	8019e64 <usbd_edpt_xfer>
 801a1c4:	4603      	mov	r3, r0
}
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	3720      	adds	r7, #32
 801a1ca:	46bd      	mov	sp, r7
 801a1cc:	bd80      	pop	{r7, pc}
 801a1ce:	bf00      	nop
 801a1d0:	24008ac4 	.word	0x24008ac4
 801a1d4:	24008ad8 	.word	0x24008ad8

0801a1d8 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 801a1d8:	b580      	push	{r7, lr}
 801a1da:	b088      	sub	sp, #32
 801a1dc:	af00      	add	r7, sp, #0
 801a1de:	60b9      	str	r1, [r7, #8]
 801a1e0:	607a      	str	r2, [r7, #4]
 801a1e2:	461a      	mov	r2, r3
 801a1e4:	4603      	mov	r3, r0
 801a1e6:	73fb      	strb	r3, [r7, #15]
 801a1e8:	4613      	mov	r3, r2
 801a1ea:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 801a1ec:	4b30      	ldr	r3, [pc, #192]	@ (801a2b0 <tud_control_xfer+0xd8>)
 801a1ee:	68ba      	ldr	r2, [r7, #8]
 801a1f0:	6810      	ldr	r0, [r2, #0]
 801a1f2:	6851      	ldr	r1, [r2, #4]
 801a1f4:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 801a1f6:	4a2e      	ldr	r2, [pc, #184]	@ (801a2b0 <tud_control_xfer+0xd8>)
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 801a1fc:	4b2c      	ldr	r3, [pc, #176]	@ (801a2b0 <tud_control_xfer+0xd8>)
 801a1fe:	2200      	movs	r2, #0
 801a200:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 801a202:	68bb      	ldr	r3, [r7, #8]
 801a204:	88db      	ldrh	r3, [r3, #6]
 801a206:	b29a      	uxth	r2, r3
 801a208:	89bb      	ldrh	r3, [r7, #12]
 801a20a:	827b      	strh	r3, [r7, #18]
 801a20c:	4613      	mov	r3, r2
 801a20e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 801a210:	8a7a      	ldrh	r2, [r7, #18]
 801a212:	8a3b      	ldrh	r3, [r7, #16]
 801a214:	4293      	cmp	r3, r2
 801a216:	bf28      	it	cs
 801a218:	4613      	movcs	r3, r2
 801a21a:	b29a      	uxth	r2, r3
 801a21c:	4b24      	ldr	r3, [pc, #144]	@ (801a2b0 <tud_control_xfer+0xd8>)
 801a21e:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 801a220:	68bb      	ldr	r3, [r7, #8]
 801a222:	88db      	ldrh	r3, [r3, #6]
 801a224:	b29b      	uxth	r3, r3
 801a226:	2b00      	cmp	r3, #0
 801a228:	d026      	beq.n	801a278 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 801a22a:	4b21      	ldr	r3, [pc, #132]	@ (801a2b0 <tud_control_xfer+0xd8>)
 801a22c:	899b      	ldrh	r3, [r3, #12]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d00d      	beq.n	801a24e <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	2b00      	cmp	r3, #0
 801a236:	d10a      	bne.n	801a24e <tud_control_xfer+0x76>
 801a238:	4b1e      	ldr	r3, [pc, #120]	@ (801a2b4 <tud_control_xfer+0xdc>)
 801a23a:	61bb      	str	r3, [r7, #24]
 801a23c:	69bb      	ldr	r3, [r7, #24]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	f003 0301 	and.w	r3, r3, #1
 801a244:	2b00      	cmp	r3, #0
 801a246:	d000      	beq.n	801a24a <tud_control_xfer+0x72>
 801a248:	be00      	bkpt	0x0000
 801a24a:	2300      	movs	r3, #0
 801a24c:	e02b      	b.n	801a2a6 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 801a24e:	7bfb      	ldrb	r3, [r7, #15]
 801a250:	4618      	mov	r0, r3
 801a252:	f7ff ff6f 	bl	801a134 <data_stage_xact>
 801a256:	4603      	mov	r3, r0
 801a258:	f083 0301 	eor.w	r3, r3, #1
 801a25c:	b2db      	uxtb	r3, r3
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d020      	beq.n	801a2a4 <tud_control_xfer+0xcc>
 801a262:	4b14      	ldr	r3, [pc, #80]	@ (801a2b4 <tud_control_xfer+0xdc>)
 801a264:	617b      	str	r3, [r7, #20]
 801a266:	697b      	ldr	r3, [r7, #20]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	f003 0301 	and.w	r3, r3, #1
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d000      	beq.n	801a274 <tud_control_xfer+0x9c>
 801a272:	be00      	bkpt	0x0000
 801a274:	2300      	movs	r3, #0
 801a276:	e016      	b.n	801a2a6 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 801a278:	7bfb      	ldrb	r3, [r7, #15]
 801a27a:	68b9      	ldr	r1, [r7, #8]
 801a27c:	4618      	mov	r0, r3
 801a27e:	f7ff ff1d 	bl	801a0bc <status_stage_xact>
 801a282:	4603      	mov	r3, r0
 801a284:	f083 0301 	eor.w	r3, r3, #1
 801a288:	b2db      	uxtb	r3, r3
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d00a      	beq.n	801a2a4 <tud_control_xfer+0xcc>
 801a28e:	4b09      	ldr	r3, [pc, #36]	@ (801a2b4 <tud_control_xfer+0xdc>)
 801a290:	61fb      	str	r3, [r7, #28]
 801a292:	69fb      	ldr	r3, [r7, #28]
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	f003 0301 	and.w	r3, r3, #1
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d000      	beq.n	801a2a0 <tud_control_xfer+0xc8>
 801a29e:	be00      	bkpt	0x0000
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	e000      	b.n	801a2a6 <tud_control_xfer+0xce>
  }

  return true;
 801a2a4:	2301      	movs	r3, #1
}
 801a2a6:	4618      	mov	r0, r3
 801a2a8:	3720      	adds	r7, #32
 801a2aa:	46bd      	mov	sp, r7
 801a2ac:	bd80      	pop	{r7, pc}
 801a2ae:	bf00      	nop
 801a2b0:	24008ac4 	.word	0x24008ac4
 801a2b4:	e000edf0 	.word	0xe000edf0

0801a2b8 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 801a2b8:	b580      	push	{r7, lr}
 801a2ba:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 801a2bc:	2214      	movs	r2, #20
 801a2be:	2100      	movs	r1, #0
 801a2c0:	4802      	ldr	r0, [pc, #8]	@ (801a2cc <usbd_control_reset+0x14>)
 801a2c2:	f005 f917 	bl	801f4f4 <memset>
}
 801a2c6:	bf00      	nop
 801a2c8:	bd80      	pop	{r7, pc}
 801a2ca:	bf00      	nop
 801a2cc:	24008ac4 	.word	0x24008ac4

0801a2d0 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 801a2d0:	b480      	push	{r7}
 801a2d2:	b083      	sub	sp, #12
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 801a2d8:	4a04      	ldr	r2, [pc, #16]	@ (801a2ec <usbd_control_set_complete_callback+0x1c>)
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	6113      	str	r3, [r2, #16]
}
 801a2de:	bf00      	nop
 801a2e0:	370c      	adds	r7, #12
 801a2e2:	46bd      	mov	sp, r7
 801a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e8:	4770      	bx	lr
 801a2ea:	bf00      	nop
 801a2ec:	24008ac4 	.word	0x24008ac4

0801a2f0 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 801a2f0:	b480      	push	{r7}
 801a2f2:	b083      	sub	sp, #12
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 801a2f8:	4b09      	ldr	r3, [pc, #36]	@ (801a320 <usbd_control_set_request+0x30>)
 801a2fa:	687a      	ldr	r2, [r7, #4]
 801a2fc:	6810      	ldr	r0, [r2, #0]
 801a2fe:	6851      	ldr	r1, [r2, #4]
 801a300:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 801a302:	4b07      	ldr	r3, [pc, #28]	@ (801a320 <usbd_control_set_request+0x30>)
 801a304:	2200      	movs	r2, #0
 801a306:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 801a308:	4b05      	ldr	r3, [pc, #20]	@ (801a320 <usbd_control_set_request+0x30>)
 801a30a:	2200      	movs	r2, #0
 801a30c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 801a30e:	4b04      	ldr	r3, [pc, #16]	@ (801a320 <usbd_control_set_request+0x30>)
 801a310:	2200      	movs	r2, #0
 801a312:	819a      	strh	r2, [r3, #12]
}
 801a314:	bf00      	nop
 801a316:	370c      	adds	r7, #12
 801a318:	46bd      	mov	sp, r7
 801a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a31e:	4770      	bx	lr
 801a320:	24008ac4 	.word	0x24008ac4

0801a324 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 801a324:	b580      	push	{r7, lr}
 801a326:	b088      	sub	sp, #32
 801a328:	af00      	add	r7, sp, #0
 801a32a:	603b      	str	r3, [r7, #0]
 801a32c:	4603      	mov	r3, r0
 801a32e:	71fb      	strb	r3, [r7, #7]
 801a330:	460b      	mov	r3, r1
 801a332:	71bb      	strb	r3, [r7, #6]
 801a334:	4613      	mov	r3, r2
 801a336:	717b      	strb	r3, [r7, #5]
 801a338:	79bb      	ldrb	r3, [r7, #6]
 801a33a:	73fb      	strb	r3, [r7, #15]
 801a33c:	7bfb      	ldrb	r3, [r7, #15]
 801a33e:	09db      	lsrs	r3, r3, #7
 801a340:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 801a342:	4a4f      	ldr	r2, [pc, #316]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a344:	7812      	ldrb	r2, [r2, #0]
 801a346:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801a34a:	b2d2      	uxtb	r2, r2
 801a34c:	4293      	cmp	r3, r2
 801a34e:	d01e      	beq.n	801a38e <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 801a350:	683b      	ldr	r3, [r7, #0]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d00a      	beq.n	801a36c <usbd_control_xfer_cb+0x48>
 801a356:	4b4b      	ldr	r3, [pc, #300]	@ (801a484 <usbd_control_xfer_cb+0x160>)
 801a358:	613b      	str	r3, [r7, #16]
 801a35a:	693b      	ldr	r3, [r7, #16]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	f003 0301 	and.w	r3, r3, #1
 801a362:	2b00      	cmp	r3, #0
 801a364:	d000      	beq.n	801a368 <usbd_control_xfer_cb+0x44>
 801a366:	be00      	bkpt	0x0000
 801a368:	2300      	movs	r3, #0
 801a36a:	e084      	b.n	801a476 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 801a36c:	79fb      	ldrb	r3, [r7, #7]
 801a36e:	4944      	ldr	r1, [pc, #272]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a370:	4618      	mov	r0, r3
 801a372:	f7ff fe97 	bl	801a0a4 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 801a376:	4b42      	ldr	r3, [pc, #264]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a378:	691b      	ldr	r3, [r3, #16]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d005      	beq.n	801a38a <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 801a37e:	4b40      	ldr	r3, [pc, #256]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a380:	691b      	ldr	r3, [r3, #16]
 801a382:	79f8      	ldrb	r0, [r7, #7]
 801a384:	4a3e      	ldr	r2, [pc, #248]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a386:	2103      	movs	r1, #3
 801a388:	4798      	blx	r3
    }

    return true;
 801a38a:	2301      	movs	r3, #1
 801a38c:	e073      	b.n	801a476 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 801a38e:	4b3c      	ldr	r3, [pc, #240]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a390:	781b      	ldrb	r3, [r3, #0]
 801a392:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801a396:	b2db      	uxtb	r3, r3
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d10c      	bne.n	801a3b6 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 801a39c:	4b38      	ldr	r3, [pc, #224]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a39e:	689b      	ldr	r3, [r3, #8]
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d101      	bne.n	801a3a8 <usbd_control_xfer_cb+0x84>
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	e066      	b.n	801a476 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 801a3a8:	4b35      	ldr	r3, [pc, #212]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a3aa:	689b      	ldr	r3, [r3, #8]
 801a3ac:	683a      	ldr	r2, [r7, #0]
 801a3ae:	4936      	ldr	r1, [pc, #216]	@ (801a488 <usbd_control_xfer_cb+0x164>)
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	f005 f930 	bl	801f616 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 801a3b6:	4b32      	ldr	r3, [pc, #200]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a3b8:	89da      	ldrh	r2, [r3, #14]
 801a3ba:	683b      	ldr	r3, [r7, #0]
 801a3bc:	b29b      	uxth	r3, r3
 801a3be:	4413      	add	r3, r2
 801a3c0:	b29a      	uxth	r2, r3
 801a3c2:	4b2f      	ldr	r3, [pc, #188]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a3c4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 801a3c6:	4b2e      	ldr	r3, [pc, #184]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a3c8:	689a      	ldr	r2, [r3, #8]
 801a3ca:	683b      	ldr	r3, [r7, #0]
 801a3cc:	4413      	add	r3, r2
 801a3ce:	4a2c      	ldr	r2, [pc, #176]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a3d0:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 801a3d2:	4b2b      	ldr	r3, [pc, #172]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a3d4:	88da      	ldrh	r2, [r3, #6]
 801a3d6:	4b2a      	ldr	r3, [pc, #168]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a3d8:	89db      	ldrh	r3, [r3, #14]
 801a3da:	429a      	cmp	r2, r3
 801a3dc:	d002      	beq.n	801a3e4 <usbd_control_xfer_cb+0xc0>
 801a3de:	683b      	ldr	r3, [r7, #0]
 801a3e0:	2b3f      	cmp	r3, #63	@ 0x3f
 801a3e2:	d831      	bhi.n	801a448 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 801a3e4:	2301      	movs	r3, #1
 801a3e6:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 801a3e8:	4b25      	ldr	r3, [pc, #148]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a3ea:	691b      	ldr	r3, [r3, #16]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d007      	beq.n	801a400 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 801a3f0:	4b23      	ldr	r3, [pc, #140]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a3f2:	691b      	ldr	r3, [r3, #16]
 801a3f4:	79f8      	ldrb	r0, [r7, #7]
 801a3f6:	4a22      	ldr	r2, [pc, #136]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a3f8:	2102      	movs	r1, #2
 801a3fa:	4798      	blx	r3
 801a3fc:	4603      	mov	r3, r0
 801a3fe:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 801a400:	7ffb      	ldrb	r3, [r7, #31]
 801a402:	2b00      	cmp	r3, #0
 801a404:	d015      	beq.n	801a432 <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 801a406:	79fb      	ldrb	r3, [r7, #7]
 801a408:	491d      	ldr	r1, [pc, #116]	@ (801a480 <usbd_control_xfer_cb+0x15c>)
 801a40a:	4618      	mov	r0, r3
 801a40c:	f7ff fe56 	bl	801a0bc <status_stage_xact>
 801a410:	4603      	mov	r3, r0
 801a412:	f083 0301 	eor.w	r3, r3, #1
 801a416:	b2db      	uxtb	r3, r3
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d02a      	beq.n	801a472 <usbd_control_xfer_cb+0x14e>
 801a41c:	4b19      	ldr	r3, [pc, #100]	@ (801a484 <usbd_control_xfer_cb+0x160>)
 801a41e:	617b      	str	r3, [r7, #20]
 801a420:	697b      	ldr	r3, [r7, #20]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	f003 0301 	and.w	r3, r3, #1
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d000      	beq.n	801a42e <usbd_control_xfer_cb+0x10a>
 801a42c:	be00      	bkpt	0x0000
 801a42e:	2300      	movs	r3, #0
 801a430:	e021      	b.n	801a476 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 801a432:	79fb      	ldrb	r3, [r7, #7]
 801a434:	2100      	movs	r1, #0
 801a436:	4618      	mov	r0, r3
 801a438:	f000 fec2 	bl	801b1c0 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 801a43c:	79fb      	ldrb	r3, [r7, #7]
 801a43e:	2180      	movs	r1, #128	@ 0x80
 801a440:	4618      	mov	r0, r3
 801a442:	f000 febd 	bl	801b1c0 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 801a446:	e014      	b.n	801a472 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 801a448:	79fb      	ldrb	r3, [r7, #7]
 801a44a:	4618      	mov	r0, r3
 801a44c:	f7ff fe72 	bl	801a134 <data_stage_xact>
 801a450:	4603      	mov	r3, r0
 801a452:	f083 0301 	eor.w	r3, r3, #1
 801a456:	b2db      	uxtb	r3, r3
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d00b      	beq.n	801a474 <usbd_control_xfer_cb+0x150>
 801a45c:	4b09      	ldr	r3, [pc, #36]	@ (801a484 <usbd_control_xfer_cb+0x160>)
 801a45e:	61bb      	str	r3, [r7, #24]
 801a460:	69bb      	ldr	r3, [r7, #24]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	f003 0301 	and.w	r3, r3, #1
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d000      	beq.n	801a46e <usbd_control_xfer_cb+0x14a>
 801a46c:	be00      	bkpt	0x0000
 801a46e:	2300      	movs	r3, #0
 801a470:	e001      	b.n	801a476 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 801a472:	bf00      	nop
  }

  return true;
 801a474:	2301      	movs	r3, #1
}
 801a476:	4618      	mov	r0, r3
 801a478:	3720      	adds	r7, #32
 801a47a:	46bd      	mov	sp, r7
 801a47c:	bd80      	pop	{r7, pc}
 801a47e:	bf00      	nop
 801a480:	24008ac4 	.word	0x24008ac4
 801a484:	e000edf0 	.word	0xe000edf0
 801a488:	24008ad8 	.word	0x24008ad8

0801a48c <__NVIC_EnableIRQ>:
{
 801a48c:	b480      	push	{r7}
 801a48e:	b083      	sub	sp, #12
 801a490:	af00      	add	r7, sp, #0
 801a492:	4603      	mov	r3, r0
 801a494:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	db0b      	blt.n	801a4b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a49e:	88fb      	ldrh	r3, [r7, #6]
 801a4a0:	f003 021f 	and.w	r2, r3, #31
 801a4a4:	4907      	ldr	r1, [pc, #28]	@ (801a4c4 <__NVIC_EnableIRQ+0x38>)
 801a4a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a4aa:	095b      	lsrs	r3, r3, #5
 801a4ac:	2001      	movs	r0, #1
 801a4ae:	fa00 f202 	lsl.w	r2, r0, r2
 801a4b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a4b6:	bf00      	nop
 801a4b8:	370c      	adds	r7, #12
 801a4ba:	46bd      	mov	sp, r7
 801a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c0:	4770      	bx	lr
 801a4c2:	bf00      	nop
 801a4c4:	e000e100 	.word	0xe000e100

0801a4c8 <__NVIC_DisableIRQ>:
{
 801a4c8:	b480      	push	{r7}
 801a4ca:	b083      	sub	sp, #12
 801a4cc:	af00      	add	r7, sp, #0
 801a4ce:	4603      	mov	r3, r0
 801a4d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a4d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	db12      	blt.n	801a500 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a4da:	88fb      	ldrh	r3, [r7, #6]
 801a4dc:	f003 021f 	and.w	r2, r3, #31
 801a4e0:	490a      	ldr	r1, [pc, #40]	@ (801a50c <__NVIC_DisableIRQ+0x44>)
 801a4e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a4e6:	095b      	lsrs	r3, r3, #5
 801a4e8:	2001      	movs	r0, #1
 801a4ea:	fa00 f202 	lsl.w	r2, r0, r2
 801a4ee:	3320      	adds	r3, #32
 801a4f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801a4f4:	f3bf 8f4f 	dsb	sy
}
 801a4f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801a4fa:	f3bf 8f6f 	isb	sy
}
 801a4fe:	bf00      	nop
}
 801a500:	bf00      	nop
 801a502:	370c      	adds	r7, #12
 801a504:	46bd      	mov	sp, r7
 801a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a50a:	4770      	bx	lr
 801a50c:	e000e100 	.word	0xe000e100

0801a510 <dma_setup_prepare>:
  (void) dwc2;
  // Internal DMA only
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 801a510:	b480      	push	{r7}
 801a512:	b085      	sub	sp, #20
 801a514:	af00      	add	r7, sp, #0
 801a516:	4603      	mov	r3, r0
 801a518:	71fb      	strb	r3, [r7, #7]
 801a51a:	79fb      	ldrb	r3, [r7, #7]
 801a51c:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801a51e:	7afb      	ldrb	r3, [r7, #11]
 801a520:	2b01      	cmp	r3, #1
 801a522:	d901      	bls.n	801a528 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 801a524:	2300      	movs	r3, #0
 801a526:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801a528:	7afb      	ldrb	r3, [r7, #11]
 801a52a:	4a13      	ldr	r2, [pc, #76]	@ (801a578 <dma_setup_prepare+0x68>)
 801a52c:	011b      	lsls	r3, r3, #4
 801a52e:	4413      	add	r3, r2
 801a530:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801a532:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a538:	4a10      	ldr	r2, [pc, #64]	@ (801a57c <dma_setup_prepare+0x6c>)
 801a53a:	4293      	cmp	r3, r2
 801a53c:	d904      	bls.n	801a548 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 801a544:	2b00      	cmp	r3, #0
 801a546:	db10      	blt.n	801a56a <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	4a0d      	ldr	r2, [pc, #52]	@ (801a580 <dma_setup_prepare+0x70>)
 801a54c:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 801a550:	4a0c      	ldr	r2, [pc, #48]	@ (801a584 <dma_setup_prepare+0x74>)
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 801a55e:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 801a568:	e000      	b.n	801a56c <dma_setup_prepare+0x5c>
      return;
 801a56a:	bf00      	nop
}
 801a56c:	3714      	adds	r7, #20
 801a56e:	46bd      	mov	sp, r7
 801a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a574:	4770      	bx	lr
 801a576:	bf00      	nop
 801a578:	08033b64 	.word	0x08033b64
 801a57c:	4f543009 	.word	0x4f543009
 801a580:	20080008 	.word	0x20080008
 801a584:	24008c40 	.word	0x24008c40

0801a588 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 801a588:	b480      	push	{r7}
 801a58a:	b091      	sub	sp, #68	@ 0x44
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	4603      	mov	r3, r0
 801a590:	71fb      	strb	r3, [r7, #7]
 801a592:	460b      	mov	r3, r1
 801a594:	71bb      	strb	r3, [r7, #6]
 801a596:	4613      	mov	r3, r2
 801a598:	80bb      	strh	r3, [r7, #4]
 801a59a:	79fb      	ldrb	r3, [r7, #7]
 801a59c:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801a59e:	7e7b      	ldrb	r3, [r7, #25]
 801a5a0:	2b01      	cmp	r3, #1
 801a5a2:	d901      	bls.n	801a5a8 <dfifo_alloc+0x20>
    rhport = 0;
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801a5a8:	7e7b      	ldrb	r3, [r7, #25]
 801a5aa:	4a65      	ldr	r2, [pc, #404]	@ (801a740 <dfifo_alloc+0x1b8>)
 801a5ac:	011b      	lsls	r3, r3, #4
 801a5ae:	4413      	add	r3, r2
 801a5b0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801a5b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 801a5b4:	79fb      	ldrb	r3, [r7, #7]
 801a5b6:	011b      	lsls	r3, r3, #4
 801a5b8:	4a61      	ldr	r2, [pc, #388]	@ (801a740 <dfifo_alloc+0x1b8>)
 801a5ba:	4413      	add	r3, r2
 801a5bc:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 801a5be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5c0:	7a1b      	ldrb	r3, [r3, #8]
 801a5c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801a5c6:	79bb      	ldrb	r3, [r7, #6]
 801a5c8:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801a5ca:	7ebb      	ldrb	r3, [r7, #26]
 801a5cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a5d0:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 801a5d2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 801a5d6:	79bb      	ldrb	r3, [r7, #6]
 801a5d8:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801a5da:	7efb      	ldrb	r3, [r7, #27]
 801a5dc:	09db      	lsrs	r3, r3, #7
 801a5de:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 801a5e0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 801a5e4:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 801a5e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801a5ec:	429a      	cmp	r2, r3
 801a5ee:	d30a      	bcc.n	801a606 <dfifo_alloc+0x7e>
 801a5f0:	4b54      	ldr	r3, [pc, #336]	@ (801a744 <dfifo_alloc+0x1bc>)
 801a5f2:	61fb      	str	r3, [r7, #28]
 801a5f4:	69fb      	ldr	r3, [r7, #28]
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	f003 0301 	and.w	r3, r3, #1
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d000      	beq.n	801a602 <dfifo_alloc+0x7a>
 801a600:	be00      	bkpt	0x0000
 801a602:	2300      	movs	r3, #0
 801a604:	e095      	b.n	801a732 <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 801a606:	88bb      	ldrh	r3, [r7, #4]
 801a608:	617b      	str	r3, [r7, #20]
 801a60a:	2304      	movs	r3, #4
 801a60c:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 801a60e:	697a      	ldr	r2, [r7, #20]
 801a610:	693b      	ldr	r3, [r7, #16]
 801a612:	4413      	add	r3, r2
 801a614:	1e5a      	subs	r2, r3, #1
 801a616:	693b      	ldr	r3, [r7, #16]
 801a618:	fbb2 f3f3 	udiv	r3, r2, r3
 801a61c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 801a61e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 801a622:	2b00      	cmp	r3, #0
 801a624:	d12a      	bne.n	801a67c <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 801a626:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a628:	009b      	lsls	r3, r3, #2
 801a62a:	b29b      	uxth	r3, r3
 801a62c:	81fb      	strh	r3, [r7, #14]
 801a62e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801a632:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 801a634:	89fb      	ldrh	r3, [r7, #14]
 801a636:	089b      	lsrs	r3, r3, #2
 801a638:	b29b      	uxth	r3, r3
 801a63a:	f103 0208 	add.w	r2, r3, #8
 801a63e:	7b7b      	ldrb	r3, [r7, #13]
 801a640:	4413      	add	r3, r2
 801a642:	b29b      	uxth	r3, r3
 801a644:	005b      	lsls	r3, r3, #1
 801a646:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 801a648:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 801a64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a64c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a64e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a650:	429a      	cmp	r2, r3
 801a652:	d26d      	bcs.n	801a730 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 801a654:	4b3c      	ldr	r3, [pc, #240]	@ (801a748 <dfifo_alloc+0x1c0>)
 801a656:	889b      	ldrh	r3, [r3, #4]
 801a658:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a65a:	429a      	cmp	r2, r3
 801a65c:	d90a      	bls.n	801a674 <dfifo_alloc+0xec>
 801a65e:	4b39      	ldr	r3, [pc, #228]	@ (801a744 <dfifo_alloc+0x1bc>)
 801a660:	623b      	str	r3, [r7, #32]
 801a662:	6a3b      	ldr	r3, [r7, #32]
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	f003 0301 	and.w	r3, r3, #1
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d000      	beq.n	801a670 <dfifo_alloc+0xe8>
 801a66e:	be00      	bkpt	0x0000
 801a670:	2300      	movs	r3, #0
 801a672:	e05e      	b.n	801a732 <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 801a674:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a678:	625a      	str	r2, [r3, #36]	@ 0x24
 801a67a:	e059      	b.n	801a730 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 801a67c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a67e:	7a5b      	ldrb	r3, [r3, #9]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d016      	beq.n	801a6b2 <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 801a684:	4b30      	ldr	r3, [pc, #192]	@ (801a748 <dfifo_alloc+0x1c0>)
 801a686:	799a      	ldrb	r2, [r3, #6]
 801a688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a68a:	7a5b      	ldrb	r3, [r3, #9]
 801a68c:	429a      	cmp	r2, r3
 801a68e:	d30a      	bcc.n	801a6a6 <dfifo_alloc+0x11e>
 801a690:	4b2c      	ldr	r3, [pc, #176]	@ (801a744 <dfifo_alloc+0x1bc>)
 801a692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	f003 0301 	and.w	r3, r3, #1
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d000      	beq.n	801a6a2 <dfifo_alloc+0x11a>
 801a6a0:	be00      	bkpt	0x0000
 801a6a2:	2300      	movs	r3, #0
 801a6a4:	e045      	b.n	801a732 <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 801a6a6:	4b28      	ldr	r3, [pc, #160]	@ (801a748 <dfifo_alloc+0x1c0>)
 801a6a8:	799b      	ldrb	r3, [r3, #6]
 801a6aa:	3301      	adds	r3, #1
 801a6ac:	b2da      	uxtb	r2, r3
 801a6ae:	4b26      	ldr	r3, [pc, #152]	@ (801a748 <dfifo_alloc+0x1c0>)
 801a6b0:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 801a6b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6b4:	689b      	ldr	r3, [r3, #8]
 801a6b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d102      	bne.n	801a6c4 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 801a6be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a6c0:	005b      	lsls	r3, r3, #1
 801a6c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 801a6c4:	4b20      	ldr	r3, [pc, #128]	@ (801a748 <dfifo_alloc+0x1c0>)
 801a6c6:	889b      	ldrh	r3, [r3, #4]
 801a6c8:	4619      	mov	r1, r3
 801a6ca:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801a6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a6d0:	4413      	add	r3, r2
 801a6d2:	4299      	cmp	r1, r3
 801a6d4:	d20a      	bcs.n	801a6ec <dfifo_alloc+0x164>
 801a6d6:	4b1b      	ldr	r3, [pc, #108]	@ (801a744 <dfifo_alloc+0x1bc>)
 801a6d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	f003 0301 	and.w	r3, r3, #1
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d000      	beq.n	801a6e8 <dfifo_alloc+0x160>
 801a6e6:	be00      	bkpt	0x0000
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	e022      	b.n	801a732 <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 801a6ec:	4b16      	ldr	r3, [pc, #88]	@ (801a748 <dfifo_alloc+0x1c0>)
 801a6ee:	889a      	ldrh	r2, [r3, #4]
 801a6f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a6f2:	1ad3      	subs	r3, r2, r3
 801a6f4:	b29a      	uxth	r2, r3
 801a6f6:	4b14      	ldr	r3, [pc, #80]	@ (801a748 <dfifo_alloc+0x1c0>)
 801a6f8:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 801a6fa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d108      	bne.n	801a714 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 801a702:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a704:	041b      	lsls	r3, r3, #16
 801a706:	4a10      	ldr	r2, [pc, #64]	@ (801a748 <dfifo_alloc+0x1c0>)
 801a708:	8892      	ldrh	r2, [r2, #4]
 801a70a:	4313      	orrs	r3, r2
 801a70c:	461a      	mov	r2, r3
 801a70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a710:	629a      	str	r2, [r3, #40]	@ 0x28
 801a712:	e00d      	b.n	801a730 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 801a714:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a716:	041b      	lsls	r3, r3, #16
 801a718:	4a0b      	ldr	r2, [pc, #44]	@ (801a748 <dfifo_alloc+0x1c0>)
 801a71a:	8892      	ldrh	r2, [r2, #4]
 801a71c:	431a      	orrs	r2, r3
 801a71e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801a722:	3b01      	subs	r3, #1
 801a724:	4611      	mov	r1, r2
 801a726:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a728:	3340      	adds	r3, #64	@ 0x40
 801a72a:	009b      	lsls	r3, r3, #2
 801a72c:	4413      	add	r3, r2
 801a72e:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 801a730:	2301      	movs	r3, #1
}
 801a732:	4618      	mov	r0, r3
 801a734:	3744      	adds	r7, #68	@ 0x44
 801a736:	46bd      	mov	sp, r7
 801a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a73c:	4770      	bx	lr
 801a73e:	bf00      	nop
 801a740:	08033b64 	.word	0x08033b64
 801a744:	e000edf0 	.word	0xe000edf0
 801a748:	24008c38 	.word	0x24008c38

0801a74c <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b088      	sub	sp, #32
 801a750:	af00      	add	r7, sp, #0
 801a752:	4603      	mov	r3, r0
 801a754:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 801a756:	79fb      	ldrb	r3, [r7, #7]
 801a758:	011b      	lsls	r3, r3, #4
 801a75a:	4a25      	ldr	r2, [pc, #148]	@ (801a7f0 <dfifo_device_init+0xa4>)
 801a75c:	4413      	add	r3, r2
 801a75e:	61fb      	str	r3, [r7, #28]
 801a760:	79fb      	ldrb	r3, [r7, #7]
 801a762:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801a764:	7b3b      	ldrb	r3, [r7, #12]
 801a766:	2b01      	cmp	r3, #1
 801a768:	d901      	bls.n	801a76e <dfifo_device_init+0x22>
    rhport = 0;
 801a76a:	2300      	movs	r3, #0
 801a76c:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801a76e:	7b3b      	ldrb	r3, [r7, #12]
 801a770:	4a1f      	ldr	r2, [pc, #124]	@ (801a7f0 <dfifo_device_init+0xa4>)
 801a772:	011b      	lsls	r3, r3, #4
 801a774:	4413      	add	r3, r2
 801a776:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801a778:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 801a77a:	69fb      	ldr	r3, [r7, #28]
 801a77c:	7a1b      	ldrb	r3, [r3, #8]
 801a77e:	2240      	movs	r2, #64	@ 0x40
 801a780:	81fa      	strh	r2, [r7, #14]
 801a782:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 801a784:	89fb      	ldrh	r3, [r7, #14]
 801a786:	089b      	lsrs	r3, r3, #2
 801a788:	b29b      	uxth	r3, r3
 801a78a:	f103 0208 	add.w	r2, r3, #8
 801a78e:	7b7b      	ldrb	r3, [r7, #13]
 801a790:	4413      	add	r3, r2
 801a792:	b29b      	uxth	r3, r3
 801a794:	005b      	lsls	r3, r3, #1
 801a796:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 801a798:	461a      	mov	r2, r3
 801a79a:	69bb      	ldr	r3, [r7, #24]
 801a79c:	625a      	str	r2, [r3, #36]	@ 0x24
 801a79e:	69bb      	ldr	r3, [r7, #24]
 801a7a0:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 801a7a2:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 801a7a4:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 801a7a6:	69fb      	ldr	r3, [r7, #28]
 801a7a8:	68db      	ldr	r3, [r3, #12]
 801a7aa:	089b      	lsrs	r3, r3, #2
 801a7ac:	b29a      	uxth	r2, r3
 801a7ae:	4b11      	ldr	r3, [pc, #68]	@ (801a7f4 <dfifo_device_init+0xa8>)
 801a7b0:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 801a7b2:	7dfb      	ldrb	r3, [r7, #23]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d009      	beq.n	801a7cc <dfifo_device_init+0x80>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 801a7b8:	4b0e      	ldr	r3, [pc, #56]	@ (801a7f4 <dfifo_device_init+0xa8>)
 801a7ba:	889a      	ldrh	r2, [r3, #4]
 801a7bc:	69fb      	ldr	r3, [r7, #28]
 801a7be:	7a1b      	ldrb	r3, [r3, #8]
 801a7c0:	005b      	lsls	r3, r3, #1
 801a7c2:	b29b      	uxth	r3, r3
 801a7c4:	1ad3      	subs	r3, r2, r3
 801a7c6:	b29a      	uxth	r2, r3
 801a7c8:	4b0a      	ldr	r3, [pc, #40]	@ (801a7f4 <dfifo_device_init+0xa8>)
 801a7ca:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 801a7cc:	4b09      	ldr	r3, [pc, #36]	@ (801a7f4 <dfifo_device_init+0xa8>)
 801a7ce:	889b      	ldrh	r3, [r3, #4]
 801a7d0:	461a      	mov	r2, r3
 801a7d2:	4613      	mov	r3, r2
 801a7d4:	041b      	lsls	r3, r3, #16
 801a7d6:	441a      	add	r2, r3
 801a7d8:	69bb      	ldr	r3, [r7, #24]
 801a7da:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 801a7dc:	79fb      	ldrb	r3, [r7, #7]
 801a7de:	2240      	movs	r2, #64	@ 0x40
 801a7e0:	2180      	movs	r1, #128	@ 0x80
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	f7ff fed0 	bl	801a588 <dfifo_alloc>
}
 801a7e8:	bf00      	nop
 801a7ea:	3720      	adds	r7, #32
 801a7ec:	46bd      	mov	sp, r7
 801a7ee:	bd80      	pop	{r7, pc}
 801a7f0:	08033b64 	.word	0x08033b64
 801a7f4:	24008c38 	.word	0x24008c38

0801a7f8 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 801a7f8:	b480      	push	{r7}
 801a7fa:	b08b      	sub	sp, #44	@ 0x2c
 801a7fc:	af00      	add	r7, sp, #0
 801a7fe:	4603      	mov	r3, r0
 801a800:	6039      	str	r1, [r7, #0]
 801a802:	71fb      	strb	r3, [r7, #7]
 801a804:	79fb      	ldrb	r3, [r7, #7]
 801a806:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801a808:	7c7b      	ldrb	r3, [r7, #17]
 801a80a:	2b01      	cmp	r3, #1
 801a80c:	d901      	bls.n	801a812 <edpt_activate+0x1a>
    rhport = 0;
 801a80e:	2300      	movs	r3, #0
 801a810:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801a812:	7c7b      	ldrb	r3, [r7, #17]
 801a814:	4a45      	ldr	r2, [pc, #276]	@ (801a92c <edpt_activate+0x134>)
 801a816:	011b      	lsls	r3, r3, #4
 801a818:	4413      	add	r3, r2
 801a81a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801a81c:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 801a81e:	683b      	ldr	r3, [r7, #0]
 801a820:	789b      	ldrb	r3, [r3, #2]
 801a822:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801a824:	7cbb      	ldrb	r3, [r7, #18]
 801a826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a82a:	b2db      	uxtb	r3, r3
 801a82c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 801a830:	683b      	ldr	r3, [r7, #0]
 801a832:	789b      	ldrb	r3, [r3, #2]
 801a834:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801a836:	7cfb      	ldrb	r3, [r7, #19]
 801a838:	09db      	lsrs	r3, r3, #7
 801a83a:	b2db      	uxtb	r3, r3
 801a83c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 801a840:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 801a844:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801a848:	0052      	lsls	r2, r2, #1
 801a84a:	4413      	add	r3, r2
 801a84c:	011b      	lsls	r3, r3, #4
 801a84e:	4a38      	ldr	r2, [pc, #224]	@ (801a930 <edpt_activate+0x138>)
 801a850:	4413      	add	r3, r2
 801a852:	61fb      	str	r3, [r7, #28]
 801a854:	683b      	ldr	r3, [r7, #0]
 801a856:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 801a858:	697b      	ldr	r3, [r7, #20]
 801a85a:	889b      	ldrh	r3, [r3, #4]
 801a85c:	b29b      	uxth	r3, r3
 801a85e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a862:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 801a864:	69fb      	ldr	r3, [r7, #28]
 801a866:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 801a868:	683b      	ldr	r3, [r7, #0]
 801a86a:	799a      	ldrb	r2, [r3, #6]
 801a86c:	69fb      	ldr	r3, [r7, #28]
 801a86e:	731a      	strb	r2, [r3, #12]
  // Endpoint control
  union {
    uint32_t value;
    dwc2_depctl_t bm;
  } depctl;
  depctl.value = 0;
 801a870:	2300      	movs	r3, #0
 801a872:	60fb      	str	r3, [r7, #12]

  depctl.bm.mps = xfer->max_size;
 801a874:	69fb      	ldr	r3, [r7, #28]
 801a876:	895b      	ldrh	r3, [r3, #10]
 801a878:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a87c:	b29a      	uxth	r2, r3
 801a87e:	89bb      	ldrh	r3, [r7, #12]
 801a880:	f362 030a 	bfi	r3, r2, #0, #11
 801a884:	81bb      	strh	r3, [r7, #12]
  depctl.bm.active = 1;
 801a886:	7b7b      	ldrb	r3, [r7, #13]
 801a888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a88c:	737b      	strb	r3, [r7, #13]
  depctl.bm.type = p_endpoint_desc->bmAttributes.xfer;
 801a88e:	683b      	ldr	r3, [r7, #0]
 801a890:	78db      	ldrb	r3, [r3, #3]
 801a892:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801a896:	b2da      	uxtb	r2, r3
 801a898:	7bbb      	ldrb	r3, [r7, #14]
 801a89a:	f362 0383 	bfi	r3, r2, #2, #2
 801a89e:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 801a8a0:	683b      	ldr	r3, [r7, #0]
 801a8a2:	78db      	ldrb	r3, [r3, #3]
 801a8a4:	f003 0303 	and.w	r3, r3, #3
 801a8a8:	b2db      	uxtb	r3, r3
 801a8aa:	2b01      	cmp	r3, #1
 801a8ac:	d003      	beq.n	801a8b6 <edpt_activate+0xbe>
    depctl.bm.set_data0_iso_even = 1;
 801a8ae:	7bfb      	ldrb	r3, [r7, #15]
 801a8b0:	f043 0310 	orr.w	r3, r3, #16
 801a8b4:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 801a8b6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801a8ba:	2b01      	cmp	r3, #1
 801a8bc:	d108      	bne.n	801a8d0 <edpt_activate+0xd8>
    depctl.bm.tx_fifo_num = epnum;
 801a8be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a8c2:	f003 030f 	and.w	r3, r3, #15
 801a8c6:	b2da      	uxtb	r2, r3
 801a8c8:	89fb      	ldrh	r3, [r7, #14]
 801a8ca:	f362 1389 	bfi	r3, r2, #6, #4
 801a8ce:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 801a8d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801a8d4:	2b01      	cmp	r3, #1
 801a8d6:	bf14      	ite	ne
 801a8d8:	2301      	movne	r3, #1
 801a8da:	2300      	moveq	r3, #0
 801a8dc:	b2db      	uxtb	r3, r3
 801a8de:	461a      	mov	r2, r3
 801a8e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a8e4:	0112      	lsls	r2, r2, #4
 801a8e6:	4413      	add	r3, r2
 801a8e8:	3348      	adds	r3, #72	@ 0x48
 801a8ea:	015b      	lsls	r3, r3, #5
 801a8ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a8ee:	4413      	add	r3, r2
 801a8f0:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 801a8f2:	68fa      	ldr	r2, [r7, #12]
 801a8f4:	69bb      	ldr	r3, [r7, #24]
 801a8f6:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 801a8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8fa:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 801a8fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a902:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 801a906:	2901      	cmp	r1, #1
 801a908:	d101      	bne.n	801a90e <edpt_activate+0x116>
 801a90a:	2100      	movs	r1, #0
 801a90c:	e000      	b.n	801a910 <edpt_activate+0x118>
 801a90e:	2110      	movs	r1, #16
 801a910:	440b      	add	r3, r1
 801a912:	2101      	movs	r1, #1
 801a914:	fa01 f303 	lsl.w	r3, r1, r3
 801a918:	431a      	orrs	r2, r3
 801a91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a91c:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 801a920:	bf00      	nop
 801a922:	372c      	adds	r7, #44	@ 0x2c
 801a924:	46bd      	mov	sp, r7
 801a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a92a:	4770      	bx	lr
 801a92c:	08033b64 	.word	0x08033b64
 801a930:	24008b18 	.word	0x24008b18

0801a934 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 801a934:	b480      	push	{r7}
 801a936:	b089      	sub	sp, #36	@ 0x24
 801a938:	af00      	add	r7, sp, #0
 801a93a:	4603      	mov	r3, r0
 801a93c:	71fb      	strb	r3, [r7, #7]
 801a93e:	460b      	mov	r3, r1
 801a940:	71bb      	strb	r3, [r7, #6]
 801a942:	4613      	mov	r3, r2
 801a944:	717b      	strb	r3, [r7, #5]
 801a946:	79fb      	ldrb	r3, [r7, #7]
 801a948:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801a94a:	7c7b      	ldrb	r3, [r7, #17]
 801a94c:	2b01      	cmp	r3, #1
 801a94e:	d901      	bls.n	801a954 <edpt_disable+0x20>
    rhport = 0;
 801a950:	2300      	movs	r3, #0
 801a952:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801a954:	7c7b      	ldrb	r3, [r7, #17]
 801a956:	4a5b      	ldr	r2, [pc, #364]	@ (801aac4 <edpt_disable+0x190>)
 801a958:	011b      	lsls	r3, r3, #4
 801a95a:	4413      	add	r3, r2
 801a95c:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801a95e:	61fb      	str	r3, [r7, #28]
 801a960:	79bb      	ldrb	r3, [r7, #6]
 801a962:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801a964:	7cbb      	ldrb	r3, [r7, #18]
 801a966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a96a:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 801a96c:	76fb      	strb	r3, [r7, #27]
 801a96e:	79bb      	ldrb	r3, [r7, #6]
 801a970:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801a972:	7cfb      	ldrb	r3, [r7, #19]
 801a974:	09db      	lsrs	r3, r3, #7
 801a976:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 801a978:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 801a97a:	7ebb      	ldrb	r3, [r7, #26]
 801a97c:	2b01      	cmp	r3, #1
 801a97e:	bf14      	ite	ne
 801a980:	2301      	movne	r3, #1
 801a982:	2300      	moveq	r3, #0
 801a984:	b2db      	uxtb	r3, r3
 801a986:	461a      	mov	r2, r3
 801a988:	7efb      	ldrb	r3, [r7, #27]
 801a98a:	0112      	lsls	r2, r2, #4
 801a98c:	4413      	add	r3, r2
 801a98e:	3348      	adds	r3, #72	@ 0x48
 801a990:	015b      	lsls	r3, r3, #5
 801a992:	69fa      	ldr	r2, [r7, #28]
 801a994:	4413      	add	r3, r2
 801a996:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 801a998:	7ebb      	ldrb	r3, [r7, #26]
 801a99a:	2b01      	cmp	r3, #1
 801a99c:	d149      	bne.n	801aa32 <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 801a99e:	7efb      	ldrb	r3, [r7, #27]
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d003      	beq.n	801a9ac <edpt_disable+0x78>
 801a9a4:	697b      	ldr	r3, [r7, #20]
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	db0d      	blt.n	801a9c8 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 801a9ac:	697b      	ldr	r3, [r7, #20]
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	797a      	ldrb	r2, [r7, #5]
 801a9b2:	2a00      	cmp	r2, #0
 801a9b4:	d002      	beq.n	801a9bc <edpt_disable+0x88>
 801a9b6:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 801a9ba:	e001      	b.n	801a9c0 <edpt_disable+0x8c>
 801a9bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801a9c0:	431a      	orrs	r2, r3
 801a9c2:	697b      	ldr	r3, [r7, #20]
 801a9c4:	601a      	str	r2, [r3, #0]
 801a9c6:	e022      	b.n	801aa0e <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 801a9c8:	697b      	ldr	r3, [r7, #20]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801a9d0:	697b      	ldr	r3, [r7, #20]
 801a9d2:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 801a9d4:	bf00      	nop
 801a9d6:	697b      	ldr	r3, [r7, #20]
 801a9d8:	689b      	ldr	r3, [r3, #8]
 801a9da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d0f9      	beq.n	801a9d6 <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 801a9e2:	697b      	ldr	r3, [r7, #20]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	797a      	ldrb	r2, [r7, #5]
 801a9e8:	2a00      	cmp	r2, #0
 801a9ea:	d001      	beq.n	801a9f0 <edpt_disable+0xbc>
 801a9ec:	4a36      	ldr	r2, [pc, #216]	@ (801aac8 <edpt_disable+0x194>)
 801a9ee:	e001      	b.n	801a9f4 <edpt_disable+0xc0>
 801a9f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801a9f4:	431a      	orrs	r2, r3
 801a9f6:	697b      	ldr	r3, [r7, #20]
 801a9f8:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 801a9fa:	bf00      	nop
 801a9fc:	697b      	ldr	r3, [r7, #20]
 801a9fe:	689b      	ldr	r3, [r3, #8]
 801aa00:	f003 0302 	and.w	r3, r3, #2
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d0f9      	beq.n	801a9fc <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 801aa08:	697b      	ldr	r3, [r7, #20]
 801aa0a:	2202      	movs	r2, #2
 801aa0c:	609a      	str	r2, [r3, #8]
 801aa0e:	69fb      	ldr	r3, [r7, #28]
 801aa10:	60fb      	str	r3, [r7, #12]
 801aa12:	7efb      	ldrb	r3, [r7, #27]
 801aa14:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 801aa16:	7afb      	ldrb	r3, [r7, #11]
 801aa18:	019b      	lsls	r3, r3, #6
 801aa1a:	f043 0220 	orr.w	r2, r3, #32
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 801aa22:	bf00      	nop
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	691b      	ldr	r3, [r3, #16]
 801aa28:	f003 0320 	and.w	r3, r3, #32
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d1f9      	bne.n	801aa24 <edpt_disable+0xf0>
}
 801aa30:	e041      	b.n	801aab6 <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 801aa32:	7efb      	ldrb	r3, [r7, #27]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d003      	beq.n	801aa40 <edpt_disable+0x10c>
 801aa38:	697b      	ldr	r3, [r7, #20]
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	db0c      	blt.n	801aa5a <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 801aa40:	697b      	ldr	r3, [r7, #20]
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	797a      	ldrb	r2, [r7, #5]
 801aa46:	2a00      	cmp	r2, #0
 801aa48:	d002      	beq.n	801aa50 <edpt_disable+0x11c>
 801aa4a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 801aa4e:	e000      	b.n	801aa52 <edpt_disable+0x11e>
 801aa50:	2200      	movs	r2, #0
 801aa52:	431a      	orrs	r2, r3
 801aa54:	697b      	ldr	r3, [r7, #20]
 801aa56:	601a      	str	r2, [r3, #0]
 801aa58:	e02d      	b.n	801aab6 <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 801aa5a:	69fb      	ldr	r3, [r7, #28]
 801aa5c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 801aa60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801aa64:	69fb      	ldr	r3, [r7, #28]
 801aa66:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 801aa6a:	bf00      	nop
 801aa6c:	69fb      	ldr	r3, [r7, #28]
 801aa6e:	695b      	ldr	r3, [r3, #20]
 801aa70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d0f9      	beq.n	801aa6c <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 801aa78:	697b      	ldr	r3, [r7, #20]
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	797a      	ldrb	r2, [r7, #5]
 801aa7e:	2a00      	cmp	r2, #0
 801aa80:	d001      	beq.n	801aa86 <edpt_disable+0x152>
 801aa82:	4a11      	ldr	r2, [pc, #68]	@ (801aac8 <edpt_disable+0x194>)
 801aa84:	e001      	b.n	801aa8a <edpt_disable+0x156>
 801aa86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801aa8a:	431a      	orrs	r2, r3
 801aa8c:	697b      	ldr	r3, [r7, #20]
 801aa8e:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 801aa90:	bf00      	nop
 801aa92:	697b      	ldr	r3, [r7, #20]
 801aa94:	689b      	ldr	r3, [r3, #8]
 801aa96:	f003 0302 	and.w	r3, r3, #2
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d0f9      	beq.n	801aa92 <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 801aa9e:	697b      	ldr	r3, [r7, #20]
 801aaa0:	2202      	movs	r2, #2
 801aaa2:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 801aaa4:	69fb      	ldr	r3, [r7, #28]
 801aaa6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 801aaaa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 801aaae:	69fb      	ldr	r3, [r7, #28]
 801aab0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 801aab4:	bf00      	nop
 801aab6:	bf00      	nop
 801aab8:	3724      	adds	r7, #36	@ 0x24
 801aaba:	46bd      	mov	sp, r7
 801aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aac0:	4770      	bx	lr
 801aac2:	bf00      	nop
 801aac4:	08033b64 	.word	0x08033b64
 801aac8:	40200000 	.word	0x40200000

0801aacc <edpt_schedule_packets>:

static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 801aacc:	b580      	push	{r7, lr}
 801aace:	b08e      	sub	sp, #56	@ 0x38
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	4603      	mov	r3, r0
 801aad4:	71fb      	strb	r3, [r7, #7]
 801aad6:	460b      	mov	r3, r1
 801aad8:	71bb      	strb	r3, [r7, #6]
 801aada:	4613      	mov	r3, r2
 801aadc:	717b      	strb	r3, [r7, #5]
 801aade:	79fb      	ldrb	r3, [r7, #7]
 801aae0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801aae4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801aae8:	2b01      	cmp	r3, #1
 801aaea:	d902      	bls.n	801aaf2 <edpt_schedule_packets+0x26>
    rhport = 0;
 801aaec:	2300      	movs	r3, #0
 801aaee:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801aaf2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801aaf6:	4a63      	ldr	r2, [pc, #396]	@ (801ac84 <edpt_schedule_packets+0x1b8>)
 801aaf8:	011b      	lsls	r3, r3, #4
 801aafa:	4413      	add	r3, r2
 801aafc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801aafe:	633b      	str	r3, [r7, #48]	@ 0x30
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 801ab00:	79ba      	ldrb	r2, [r7, #6]
 801ab02:	797b      	ldrb	r3, [r7, #5]
 801ab04:	0052      	lsls	r2, r2, #1
 801ab06:	4413      	add	r3, r2
 801ab08:	011b      	lsls	r3, r3, #4
 801ab0a:	4a5f      	ldr	r2, [pc, #380]	@ (801ac88 <edpt_schedule_packets+0x1bc>)
 801ab0c:	4413      	add	r3, r2
 801ab0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 801ab10:	797b      	ldrb	r3, [r7, #5]
 801ab12:	2b01      	cmp	r3, #1
 801ab14:	bf14      	ite	ne
 801ab16:	2301      	movne	r3, #1
 801ab18:	2300      	moveq	r3, #0
 801ab1a:	b2db      	uxtb	r3, r3
 801ab1c:	461a      	mov	r2, r3
 801ab1e:	79bb      	ldrb	r3, [r7, #6]
 801ab20:	0112      	lsls	r2, r2, #4
 801ab22:	4413      	add	r3, r2
 801ab24:	3348      	adds	r3, #72	@ 0x48
 801ab26:	015b      	lsls	r3, r3, #5
 801ab28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ab2a:	4413      	add	r3, r2
 801ab2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 801ab2e:	79bb      	ldrb	r3, [r7, #6]
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d11c      	bne.n	801ab6e <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 801ab34:	797b      	ldrb	r3, [r7, #5]
 801ab36:	4a55      	ldr	r2, [pc, #340]	@ (801ac8c <edpt_schedule_packets+0x1c0>)
 801ab38:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801ab3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab3e:	895b      	ldrh	r3, [r3, #10]
 801ab40:	843a      	strh	r2, [r7, #32]
 801ab42:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 801ab44:	8c3a      	ldrh	r2, [r7, #32]
 801ab46:	8bfb      	ldrh	r3, [r7, #30]
 801ab48:	4293      	cmp	r3, r2
 801ab4a:	bf28      	it	cs
 801ab4c:	4613      	movcs	r3, r2
 801ab4e:	b29b      	uxth	r3, r3
 801ab50:	86bb      	strh	r3, [r7, #52]	@ 0x34
    _dcd_data.ep0_pending[dir] -= total_bytes;
 801ab52:	797b      	ldrb	r3, [r7, #5]
 801ab54:	4a4d      	ldr	r2, [pc, #308]	@ (801ac8c <edpt_schedule_packets+0x1c0>)
 801ab56:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 801ab5a:	797b      	ldrb	r3, [r7, #5]
 801ab5c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801ab5e:	1a8a      	subs	r2, r1, r2
 801ab60:	b291      	uxth	r1, r2
 801ab62:	4a4a      	ldr	r2, [pc, #296]	@ (801ac8c <edpt_schedule_packets+0x1c0>)
 801ab64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 801ab68:	2301      	movs	r3, #1
 801ab6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801ab6c:	e014      	b.n	801ab98 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 801ab6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab70:	891b      	ldrh	r3, [r3, #8]
 801ab72:	86bb      	strh	r3, [r7, #52]	@ 0x34
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 801ab74:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801ab76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ab78:	8952      	ldrh	r2, [r2, #10]
 801ab7a:	61bb      	str	r3, [r7, #24]
 801ab7c:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 801ab7e:	69ba      	ldr	r2, [r7, #24]
 801ab80:	697b      	ldr	r3, [r7, #20]
 801ab82:	4413      	add	r3, r2
 801ab84:	1e5a      	subs	r2, r3, #1
 801ab86:	697b      	ldr	r3, [r7, #20]
 801ab88:	fbb2 f3f3 	udiv	r3, r2, r3
 801ab8c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    if (num_packets == 0) {
 801ab8e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	d101      	bne.n	801ab98 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 801ab94:	2301      	movs	r3, #1
 801ab96:	86fb      	strh	r3, [r7, #54]	@ 0x36
  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  union {
    uint32_t value;
    dwc2_ep_tsize_t bm;
  } deptsiz;
  deptsiz.value = 0;
 801ab98:	2300      	movs	r3, #0
 801ab9a:	60fb      	str	r3, [r7, #12]
  deptsiz.bm.xfer_size =  total_bytes;
 801ab9c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801ab9e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	f362 0312 	bfi	r3, r2, #0, #19
 801aba8:	60fb      	str	r3, [r7, #12]
  deptsiz.bm.packet_count = num_packets;
 801abaa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801abac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801abb0:	b29a      	uxth	r2, r3
 801abb2:	89fb      	ldrh	r3, [r7, #14]
 801abb4:	f362 03cc 	bfi	r3, r2, #3, #10
 801abb8:	81fb      	strh	r3, [r7, #14]

  dep->tsiz = deptsiz.value;
 801abba:	68fa      	ldr	r2, [r7, #12]
 801abbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abbe:	611a      	str	r2, [r3, #16]
  // control
  union {
    dwc2_depctl_t bm;
    uint32_t value;
  } depctl;
  depctl.value = dep->ctl;
 801abc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	60bb      	str	r3, [r7, #8]

  depctl.bm.clear_nak = 1;
 801abc6:	7afb      	ldrb	r3, [r7, #11]
 801abc8:	f043 0304 	orr.w	r3, r3, #4
 801abcc:	72fb      	strb	r3, [r7, #11]
  depctl.bm.enable = 1;
 801abce:	7afb      	ldrb	r3, [r7, #11]
 801abd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801abd4:	72fb      	strb	r3, [r7, #11]
  if (depctl.bm.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 801abd6:	7abb      	ldrb	r3, [r7, #10]
 801abd8:	f003 030c 	and.w	r3, r3, #12
 801abdc:	b2db      	uxtb	r3, r3
 801abde:	2b04      	cmp	r3, #4
 801abe0:	d118      	bne.n	801ac14 <edpt_schedule_packets+0x148>
 801abe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801abe4:	7b1b      	ldrb	r3, [r3, #12]
 801abe6:	2b01      	cmp	r3, #1
 801abe8:	d114      	bne.n	801ac14 <edpt_schedule_packets+0x148>
    const uint32_t odd_now = (dwc2->dsts_bm.frame_number & 1u);
 801abea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801abec:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 801abf0:	f3c3 230d 	ubfx	r3, r3, #8, #14
 801abf4:	b29b      	uxth	r3, r3
 801abf6:	f003 0301 	and.w	r3, r3, #1
 801abfa:	627b      	str	r3, [r7, #36]	@ 0x24
    if (odd_now) {
 801abfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d004      	beq.n	801ac0c <edpt_schedule_packets+0x140>
      depctl.bm.set_data0_iso_even = 1;
 801ac02:	7afb      	ldrb	r3, [r7, #11]
 801ac04:	f043 0310 	orr.w	r3, r3, #16
 801ac08:	72fb      	strb	r3, [r7, #11]
 801ac0a:	e003      	b.n	801ac14 <edpt_schedule_packets+0x148>
    } else {
      depctl.bm.set_data1_iso_odd = 1;
 801ac0c:	7afb      	ldrb	r3, [r7, #11]
 801ac0e:	f043 0320 	orr.w	r3, r3, #32
 801ac12:	72fb      	strb	r3, [r7, #11]
 801ac14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac16:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 801ac18:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 801ac1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if(is_dma) {
 801ac1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d015      	beq.n	801ac52 <edpt_schedule_packets+0x186>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 801ac26:	797b      	ldrb	r3, [r7, #5]
 801ac28:	2b01      	cmp	r3, #1
 801ac2a:	d109      	bne.n	801ac40 <edpt_schedule_packets+0x174>
 801ac2c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d006      	beq.n	801ac40 <edpt_schedule_packets+0x174>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 801ac32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801ac38:	4611      	mov	r1, r2
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	f7fd fdfb 	bl	8018836 <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 801ac40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	461a      	mov	r2, r3
 801ac46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac48:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 801ac4a:	68ba      	ldr	r2, [r7, #8]
 801ac4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac4e:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 801ac50:	e013      	b.n	801ac7a <edpt_schedule_packets+0x1ae>
    dep->diepctl = depctl.value; // enable endpoint
 801ac52:	68ba      	ldr	r2, [r7, #8]
 801ac54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac56:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 801ac58:	797b      	ldrb	r3, [r7, #5]
 801ac5a:	2b01      	cmp	r3, #1
 801ac5c:	d10d      	bne.n	801ac7a <edpt_schedule_packets+0x1ae>
 801ac5e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d00a      	beq.n	801ac7a <edpt_schedule_packets+0x1ae>
      dwc2->diepempmsk |= (1 << epnum);
 801ac64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac66:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 801ac6a:	79ba      	ldrb	r2, [r7, #6]
 801ac6c:	2101      	movs	r1, #1
 801ac6e:	fa01 f202 	lsl.w	r2, r1, r2
 801ac72:	431a      	orrs	r2, r3
 801ac74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac76:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 801ac7a:	bf00      	nop
 801ac7c:	3738      	adds	r7, #56	@ 0x38
 801ac7e:	46bd      	mov	sp, r7
 801ac80:	bd80      	pop	{r7, pc}
 801ac82:	bf00      	nop
 801ac84:	08033b64 	.word	0x08033b64
 801ac88:	24008b18 	.word	0x24008b18
 801ac8c:	24008c38 	.word	0x24008c38

0801ac90 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 801ac90:	b580      	push	{r7, lr}
 801ac92:	b08a      	sub	sp, #40	@ 0x28
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	4603      	mov	r3, r0
 801ac98:	6039      	str	r1, [r7, #0]
 801ac9a:	71fb      	strb	r3, [r7, #7]
 801ac9c:	79fb      	ldrb	r3, [r7, #7]
 801ac9e:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801aca0:	7bfb      	ldrb	r3, [r7, #15]
 801aca2:	2b01      	cmp	r3, #1
 801aca4:	d901      	bls.n	801acaa <dcd_init+0x1a>
    rhport = 0;
 801aca6:	2300      	movs	r3, #0
 801aca8:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801acaa:	7bfb      	ldrb	r3, [r7, #15]
 801acac:	4a3e      	ldr	r2, [pc, #248]	@ (801ada8 <dcd_init+0x118>)
 801acae:	011b      	lsls	r3, r3, #4
 801acb0:	4413      	add	r3, r2
 801acb2:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801acb4:	623b      	str	r3, [r7, #32]

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 801acb6:	2208      	movs	r2, #8
 801acb8:	2100      	movs	r1, #0
 801acba:	483c      	ldr	r0, [pc, #240]	@ (801adac <dcd_init+0x11c>)
 801acbc:	f004 fc1a 	bl	801f4f4 <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 801acc0:	2101      	movs	r1, #1
 801acc2:	6a38      	ldr	r0, [r7, #32]
 801acc4:	f001 f932 	bl	801bf2c <dwc2_core_is_highspeed>
 801acc8:	4603      	mov	r3, r0
 801acca:	77fb      	strb	r3, [r7, #31]
 801accc:	6a3b      	ldr	r3, [r7, #32]
 801acce:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 801acd0:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 801acd2:	77bb      	strb	r3, [r7, #30]
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 801acd4:	7fba      	ldrb	r2, [r7, #30]
 801acd6:	7ff9      	ldrb	r1, [r7, #31]
 801acd8:	79fb      	ldrb	r3, [r7, #7]
 801acda:	4618      	mov	r0, r3
 801acdc:	f001 f942 	bl	801bf64 <dwc2_core_init>
 801ace0:	4603      	mov	r3, r0
 801ace2:	f083 0301 	eor.w	r3, r3, #1
 801ace6:	b2db      	uxtb	r3, r3
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d00a      	beq.n	801ad02 <dcd_init+0x72>
 801acec:	4b30      	ldr	r3, [pc, #192]	@ (801adb0 <dcd_init+0x120>)
 801acee:	617b      	str	r3, [r7, #20]
 801acf0:	697b      	ldr	r3, [r7, #20]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	f003 0301 	and.w	r3, r3, #1
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d000      	beq.n	801acfe <dcd_init+0x6e>
 801acfc:	be00      	bkpt	0x0000
 801acfe:	2300      	movs	r3, #0
 801ad00:	e04d      	b.n	801ad9e <dcd_init+0x10e>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 801ad02:	6a3b      	ldr	r3, [r7, #32]
 801ad04:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 801ad08:	f023 0303 	bic.w	r3, r3, #3
 801ad0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_highspeed) {
 801ad0e:	7ffb      	ldrb	r3, [r7, #31]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d00b      	beq.n	801ad2c <dcd_init+0x9c>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    if (dwc2->ghwcfg2_bm.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 801ad14:	6a3b      	ldr	r3, [r7, #32]
 801ad16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ad18:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801ad1c:	b2db      	uxtb	r3, r3
 801ad1e:	2b02      	cmp	r3, #2
 801ad20:	d108      	bne.n	801ad34 <dcd_init+0xa4>
      dcfg |= DCFG_XCVRDLY;
 801ad22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801ad28:	627b      	str	r3, [r7, #36]	@ 0x24
 801ad2a:	e003      	b.n	801ad34 <dcd_init+0xa4>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 801ad2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad2e:	f043 0303 	orr.w	r3, r3, #3
 801ad32:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 801ad34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad36:	f043 0304 	orr.w	r3, r3, #4
 801ad3a:	627b      	str	r3, [r7, #36]	@ 0x24
  dwc2->dcfg = dcfg;
 801ad3c:	6a3b      	ldr	r3, [r7, #32]
 801ad3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ad40:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 801ad44:	79fb      	ldrb	r3, [r7, #7]
 801ad46:	4618      	mov	r0, r3
 801ad48:	f000 f8e4 	bl	801af14 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 801ad4c:	6a3b      	ldr	r3, [r7, #32]
 801ad4e:	68db      	ldr	r3, [r3, #12]
 801ad50:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801ad54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801ad58:	6a3b      	ldr	r3, [r7, #32]
 801ad5a:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 801ad5c:	6a3b      	ldr	r3, [r7, #32]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 801ad64:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 801ad68:	6a3b      	ldr	r3, [r7, #32]
 801ad6a:	601a      	str	r2, [r3, #0]

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 801ad6c:	6a3b      	ldr	r3, [r7, #32]
 801ad6e:	699a      	ldr	r2, [r3, #24]
 801ad70:	4b10      	ldr	r3, [pc, #64]	@ (801adb4 <dcd_init+0x124>)
 801ad72:	4313      	orrs	r3, r2
 801ad74:	6a3a      	ldr	r2, [r7, #32]
 801ad76:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 801ad78:	6a3b      	ldr	r3, [r7, #32]
 801ad7a:	689b      	ldr	r3, [r3, #8]
 801ad7c:	61bb      	str	r3, [r7, #24]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 801ad7e:	69bb      	ldr	r3, [r7, #24]
 801ad80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ad84:	61bb      	str	r3, [r7, #24]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 801ad86:	69bb      	ldr	r3, [r7, #24]
 801ad88:	f043 0301 	orr.w	r3, r3, #1
 801ad8c:	61bb      	str	r3, [r7, #24]
  dwc2->gahbcfg = gahbcfg;
 801ad8e:	6a3b      	ldr	r3, [r7, #32]
 801ad90:	69ba      	ldr	r2, [r7, #24]
 801ad92:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 801ad94:	79fb      	ldrb	r3, [r7, #7]
 801ad96:	4618      	mov	r0, r3
 801ad98:	f000 f89a 	bl	801aed0 <dcd_connect>
  return true;
 801ad9c:	2301      	movs	r3, #1
}
 801ad9e:	4618      	mov	r0, r3
 801ada0:	3728      	adds	r7, #40	@ 0x28
 801ada2:	46bd      	mov	sp, r7
 801ada4:	bd80      	pop	{r7, pc}
 801ada6:	bf00      	nop
 801ada8:	08033b64 	.word	0x08033b64
 801adac:	24008c38 	.word	0x24008c38
 801adb0:	e000edf0 	.word	0xe000edf0
 801adb4:	80003804 	.word	0x80003804

0801adb8 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 801adb8:	b580      	push	{r7, lr}
 801adba:	b084      	sub	sp, #16
 801adbc:	af00      	add	r7, sp, #0
 801adbe:	4603      	mov	r3, r0
 801adc0:	71fb      	strb	r3, [r7, #7]
 801adc2:	79fb      	ldrb	r3, [r7, #7]
 801adc4:	73fb      	strb	r3, [r7, #15]
 801adc6:	2301      	movs	r3, #1
 801adc8:	73bb      	strb	r3, [r7, #14]
 801adca:	2301      	movs	r3, #1
 801adcc:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 801adce:	7bfb      	ldrb	r3, [r7, #15]
 801add0:	4a0c      	ldr	r2, [pc, #48]	@ (801ae04 <dcd_int_enable+0x4c>)
 801add2:	011b      	lsls	r3, r3, #4
 801add4:	4413      	add	r3, r2
 801add6:	3304      	adds	r3, #4
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	817b      	strh	r3, [r7, #10]
  if (enabled) {
 801addc:	7b7b      	ldrb	r3, [r7, #13]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d005      	beq.n	801adee <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 801ade2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801ade6:	4618      	mov	r0, r3
 801ade8:	f7ff fb50 	bl	801a48c <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 801adec:	e004      	b.n	801adf8 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 801adee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801adf2:	4618      	mov	r0, r3
 801adf4:	f7ff fb68 	bl	801a4c8 <__NVIC_DisableIRQ>
}
 801adf8:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 801adfa:	bf00      	nop
 801adfc:	3710      	adds	r7, #16
 801adfe:	46bd      	mov	sp, r7
 801ae00:	bd80      	pop	{r7, pc}
 801ae02:	bf00      	nop
 801ae04:	08033b64 	.word	0x08033b64

0801ae08 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 801ae08:	b580      	push	{r7, lr}
 801ae0a:	b084      	sub	sp, #16
 801ae0c:	af00      	add	r7, sp, #0
 801ae0e:	4603      	mov	r3, r0
 801ae10:	71fb      	strb	r3, [r7, #7]
 801ae12:	79fb      	ldrb	r3, [r7, #7]
 801ae14:	73fb      	strb	r3, [r7, #15]
 801ae16:	2301      	movs	r3, #1
 801ae18:	73bb      	strb	r3, [r7, #14]
 801ae1a:	2300      	movs	r3, #0
 801ae1c:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 801ae1e:	7bfb      	ldrb	r3, [r7, #15]
 801ae20:	4a0c      	ldr	r2, [pc, #48]	@ (801ae54 <dcd_int_disable+0x4c>)
 801ae22:	011b      	lsls	r3, r3, #4
 801ae24:	4413      	add	r3, r2
 801ae26:	3304      	adds	r3, #4
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	817b      	strh	r3, [r7, #10]
  if (enabled) {
 801ae2c:	7b7b      	ldrb	r3, [r7, #13]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d005      	beq.n	801ae3e <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 801ae32:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801ae36:	4618      	mov	r0, r3
 801ae38:	f7ff fb28 	bl	801a48c <__NVIC_EnableIRQ>
}
 801ae3c:	e004      	b.n	801ae48 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 801ae3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801ae42:	4618      	mov	r0, r3
 801ae44:	f7ff fb40 	bl	801a4c8 <__NVIC_DisableIRQ>
}
 801ae48:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 801ae4a:	bf00      	nop
 801ae4c:	3710      	adds	r7, #16
 801ae4e:	46bd      	mov	sp, r7
 801ae50:	bd80      	pop	{r7, pc}
 801ae52:	bf00      	nop
 801ae54:	08033b64 	.word	0x08033b64

0801ae58 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 801ae58:	b580      	push	{r7, lr}
 801ae5a:	b084      	sub	sp, #16
 801ae5c:	af00      	add	r7, sp, #0
 801ae5e:	4603      	mov	r3, r0
 801ae60:	460a      	mov	r2, r1
 801ae62:	71fb      	strb	r3, [r7, #7]
 801ae64:	4613      	mov	r3, r2
 801ae66:	71bb      	strb	r3, [r7, #6]
 801ae68:	79fb      	ldrb	r3, [r7, #7]
 801ae6a:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801ae6c:	7a7b      	ldrb	r3, [r7, #9]
 801ae6e:	2b01      	cmp	r3, #1
 801ae70:	d901      	bls.n	801ae76 <dcd_set_address+0x1e>
    rhport = 0;
 801ae72:	2300      	movs	r3, #0
 801ae74:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801ae76:	7a7b      	ldrb	r3, [r7, #9]
 801ae78:	4a14      	ldr	r2, [pc, #80]	@ (801aecc <dcd_set_address+0x74>)
 801ae7a:	011b      	lsls	r3, r3, #4
 801ae7c:	4413      	add	r3, r2
 801ae7e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801ae80:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 801ae88:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 801ae8c:	79bb      	ldrb	r3, [r7, #6]
 801ae8e:	011b      	lsls	r3, r3, #4
 801ae90:	431a      	orrs	r2, r3
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 801ae98:	2300      	movs	r3, #0
 801ae9a:	72fb      	strb	r3, [r7, #11]
 801ae9c:	2301      	movs	r3, #1
 801ae9e:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 801aea0:	7abb      	ldrb	r3, [r7, #10]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d002      	beq.n	801aeac <dcd_set_address+0x54>
 801aea6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 801aeaa:	e000      	b.n	801aeae <dcd_set_address+0x56>
 801aeac:	2300      	movs	r3, #0
 801aeae:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801aeb2:	4313      	orrs	r3, r2
 801aeb4:	b25b      	sxtb	r3, r3
 801aeb6:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 801aeb8:	79f8      	ldrb	r0, [r7, #7]
 801aeba:	2300      	movs	r3, #0
 801aebc:	2200      	movs	r2, #0
 801aebe:	f000 f93f 	bl	801b140 <dcd_edpt_xfer>
}
 801aec2:	bf00      	nop
 801aec4:	3710      	adds	r7, #16
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd80      	pop	{r7, pc}
 801aeca:	bf00      	nop
 801aecc:	08033b64 	.word	0x08033b64

0801aed0 <dcd_connect>:
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport) {
 801aed0:	b480      	push	{r7}
 801aed2:	b085      	sub	sp, #20
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	4603      	mov	r3, r0
 801aed8:	71fb      	strb	r3, [r7, #7]
 801aeda:	79fb      	ldrb	r3, [r7, #7]
 801aedc:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801aede:	7afb      	ldrb	r3, [r7, #11]
 801aee0:	2b01      	cmp	r3, #1
 801aee2:	d901      	bls.n	801aee8 <dcd_connect+0x18>
    rhport = 0;
 801aee4:	2300      	movs	r3, #0
 801aee6:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801aee8:	7afb      	ldrb	r3, [r7, #11]
 801aeea:	4a09      	ldr	r2, [pc, #36]	@ (801af10 <dcd_connect+0x40>)
 801aeec:	011b      	lsls	r3, r3, #4
 801aeee:	4413      	add	r3, r2
 801aef0:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801aef2:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 801aef4:	68fb      	ldr	r3, [r7, #12]
 801aef6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 801aefa:	f023 0202 	bic.w	r2, r3, #2
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 801af04:	bf00      	nop
 801af06:	3714      	adds	r7, #20
 801af08:	46bd      	mov	sp, r7
 801af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af0e:	4770      	bx	lr
 801af10:	08033b64 	.word	0x08033b64

0801af14 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 801af14:	b480      	push	{r7}
 801af16:	b085      	sub	sp, #20
 801af18:	af00      	add	r7, sp, #0
 801af1a:	4603      	mov	r3, r0
 801af1c:	71fb      	strb	r3, [r7, #7]
 801af1e:	79fb      	ldrb	r3, [r7, #7]
 801af20:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801af22:	7afb      	ldrb	r3, [r7, #11]
 801af24:	2b01      	cmp	r3, #1
 801af26:	d901      	bls.n	801af2c <dcd_disconnect+0x18>
    rhport = 0;
 801af28:	2300      	movs	r3, #0
 801af2a:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801af2c:	7afb      	ldrb	r3, [r7, #11]
 801af2e:	4a09      	ldr	r2, [pc, #36]	@ (801af54 <dcd_disconnect+0x40>)
 801af30:	011b      	lsls	r3, r3, #4
 801af32:	4413      	add	r3, r2
 801af34:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801af36:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 801af3e:	f043 0202 	orr.w	r2, r3, #2
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 801af48:	bf00      	nop
 801af4a:	3714      	adds	r7, #20
 801af4c:	46bd      	mov	sp, r7
 801af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af52:	4770      	bx	lr
 801af54:	08033b64 	.word	0x08033b64

0801af58 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 801af58:	b480      	push	{r7}
 801af5a:	b085      	sub	sp, #20
 801af5c:	af00      	add	r7, sp, #0
 801af5e:	4603      	mov	r3, r0
 801af60:	460a      	mov	r2, r1
 801af62:	71fb      	strb	r3, [r7, #7]
 801af64:	4613      	mov	r3, r2
 801af66:	71bb      	strb	r3, [r7, #6]
 801af68:	79fb      	ldrb	r3, [r7, #7]
 801af6a:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801af6c:	7afb      	ldrb	r3, [r7, #11]
 801af6e:	2b01      	cmp	r3, #1
 801af70:	d901      	bls.n	801af76 <dcd_sof_enable+0x1e>
    rhport = 0;
 801af72:	2300      	movs	r3, #0
 801af74:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801af76:	7afb      	ldrb	r3, [r7, #11]
 801af78:	4a10      	ldr	r2, [pc, #64]	@ (801afbc <dcd_sof_enable+0x64>)
 801af7a:	011b      	lsls	r3, r3, #4
 801af7c:	4413      	add	r3, r2
 801af7e:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801af80:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 801af82:	4a0f      	ldr	r2, [pc, #60]	@ (801afc0 <dcd_sof_enable+0x68>)
 801af84:	79bb      	ldrb	r3, [r7, #6]
 801af86:	71d3      	strb	r3, [r2, #7]

  if (en) {
 801af88:	79bb      	ldrb	r3, [r7, #6]
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d009      	beq.n	801afa2 <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	2208      	movs	r2, #8
 801af92:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	699b      	ldr	r3, [r3, #24]
 801af98:	f043 0208 	orr.w	r2, r3, #8
 801af9c:	68fb      	ldr	r3, [r7, #12]
 801af9e:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 801afa0:	e005      	b.n	801afae <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	699b      	ldr	r3, [r3, #24]
 801afa6:	f023 0208 	bic.w	r2, r3, #8
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	619a      	str	r2, [r3, #24]
}
 801afae:	bf00      	nop
 801afb0:	3714      	adds	r7, #20
 801afb2:	46bd      	mov	sp, r7
 801afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb8:	4770      	bx	lr
 801afba:	bf00      	nop
 801afbc:	08033b64 	.word	0x08033b64
 801afc0:	24008c38 	.word	0x24008c38

0801afc4 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 801afc4:	b580      	push	{r7, lr}
 801afc6:	b084      	sub	sp, #16
 801afc8:	af00      	add	r7, sp, #0
 801afca:	4603      	mov	r3, r0
 801afcc:	6039      	str	r1, [r7, #0]
 801afce:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 801afd0:	683b      	ldr	r3, [r7, #0]
 801afd2:	7899      	ldrb	r1, [r3, #2]
 801afd4:	683b      	ldr	r3, [r7, #0]
 801afd6:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 801afd8:	68bb      	ldr	r3, [r7, #8]
 801afda:	889b      	ldrh	r3, [r3, #4]
 801afdc:	b29b      	uxth	r3, r3
 801afde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801afe2:	b29a      	uxth	r2, r3
 801afe4:	79fb      	ldrb	r3, [r7, #7]
 801afe6:	4618      	mov	r0, r3
 801afe8:	f7ff face 	bl	801a588 <dfifo_alloc>
 801afec:	4603      	mov	r3, r0
 801afee:	f083 0301 	eor.w	r3, r3, #1
 801aff2:	b2db      	uxtb	r3, r3
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d00a      	beq.n	801b00e <dcd_edpt_open+0x4a>
 801aff8:	4b0a      	ldr	r3, [pc, #40]	@ (801b024 <dcd_edpt_open+0x60>)
 801affa:	60fb      	str	r3, [r7, #12]
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	f003 0301 	and.w	r3, r3, #1
 801b004:	2b00      	cmp	r3, #0
 801b006:	d000      	beq.n	801b00a <dcd_edpt_open+0x46>
 801b008:	be00      	bkpt	0x0000
 801b00a:	2300      	movs	r3, #0
 801b00c:	e005      	b.n	801b01a <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 801b00e:	79fb      	ldrb	r3, [r7, #7]
 801b010:	6839      	ldr	r1, [r7, #0]
 801b012:	4618      	mov	r0, r3
 801b014:	f7ff fbf0 	bl	801a7f8 <edpt_activate>
  return true;
 801b018:	2301      	movs	r3, #1
}
 801b01a:	4618      	mov	r0, r3
 801b01c:	3710      	adds	r7, #16
 801b01e:	46bd      	mov	sp, r7
 801b020:	bd80      	pop	{r7, pc}
 801b022:	bf00      	nop
 801b024:	e000edf0 	.word	0xe000edf0

0801b028 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 801b028:	b580      	push	{r7, lr}
 801b02a:	b08a      	sub	sp, #40	@ 0x28
 801b02c:	af00      	add	r7, sp, #0
 801b02e:	4603      	mov	r3, r0
 801b030:	71fb      	strb	r3, [r7, #7]
 801b032:	79fb      	ldrb	r3, [r7, #7]
 801b034:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801b036:	7dfb      	ldrb	r3, [r7, #23]
 801b038:	2b01      	cmp	r3, #1
 801b03a:	d901      	bls.n	801b040 <dcd_edpt_close_all+0x18>
    rhport = 0;
 801b03c:	2300      	movs	r3, #0
 801b03e:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801b040:	7dfb      	ldrb	r3, [r7, #23]
 801b042:	4a3c      	ldr	r2, [pc, #240]	@ (801b134 <dcd_edpt_close_all+0x10c>)
 801b044:	011b      	lsls	r3, r3, #4
 801b046:	4413      	add	r3, r2
 801b048:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801b04a:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 801b04c:	79fb      	ldrb	r3, [r7, #7]
 801b04e:	4a39      	ldr	r2, [pc, #228]	@ (801b134 <dcd_edpt_close_all+0x10c>)
 801b050:	011b      	lsls	r3, r3, #4
 801b052:	4413      	add	r3, r2
 801b054:	3308      	adds	r3, #8
 801b056:	781b      	ldrb	r3, [r3, #0]
 801b058:	77fb      	strb	r3, [r7, #31]

  _dcd_data.allocated_epin_count = 0;
 801b05a:	4b37      	ldr	r3, [pc, #220]	@ (801b138 <dcd_edpt_close_all+0x110>)
 801b05c:	2200      	movs	r2, #0
 801b05e:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 801b060:	6a3b      	ldr	r3, [r7, #32]
 801b062:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 801b066:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 801b06a:	2301      	movs	r3, #1
 801b06c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b070:	e034      	b.n	801b0dc <dcd_edpt_close_all+0xb4>
    for (uint8_t d = 0; d < 2; d++) {
 801b072:	2300      	movs	r3, #0
 801b074:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801b078:	e027      	b.n	801b0ca <dcd_edpt_close_all+0xa2>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 801b07a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801b07e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b082:	0112      	lsls	r2, r2, #4
 801b084:	4413      	add	r3, r2
 801b086:	3348      	adds	r3, #72	@ 0x48
 801b088:	015b      	lsls	r3, r3, #5
 801b08a:	6a3a      	ldr	r2, [r7, #32]
 801b08c:	4413      	add	r3, r2
 801b08e:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 801b090:	69bb      	ldr	r3, [r7, #24]
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	2b00      	cmp	r3, #0
 801b096:	da05      	bge.n	801b0a4 <dcd_edpt_close_all+0x7c>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 801b098:	69bb      	ldr	r3, [r7, #24]
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 801b0a0:	69bb      	ldr	r3, [r7, #24]
 801b0a2:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 801b0a4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801b0a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b0ac:	f1c3 0301 	rsb	r3, r3, #1
 801b0b0:	4922      	ldr	r1, [pc, #136]	@ (801b13c <dcd_edpt_close_all+0x114>)
 801b0b2:	0052      	lsls	r2, r2, #1
 801b0b4:	4413      	add	r3, r2
 801b0b6:	011b      	lsls	r3, r3, #4
 801b0b8:	440b      	add	r3, r1
 801b0ba:	330a      	adds	r3, #10
 801b0bc:	2200      	movs	r2, #0
 801b0be:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 801b0c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b0c4:	3301      	adds	r3, #1
 801b0c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801b0ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b0ce:	2b01      	cmp	r3, #1
 801b0d0:	d9d3      	bls.n	801b07a <dcd_edpt_close_all+0x52>
  for (uint8_t n = 1; n < ep_count; n++) {
 801b0d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b0d6:	3301      	adds	r3, #1
 801b0d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b0dc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801b0e0:	7ffb      	ldrb	r3, [r7, #31]
 801b0e2:	429a      	cmp	r2, r3
 801b0e4:	d3c5      	bcc.n	801b072 <dcd_edpt_close_all+0x4a>
 801b0e6:	6a3b      	ldr	r3, [r7, #32]
 801b0e8:	60fb      	str	r3, [r7, #12]
 801b0ea:	2310      	movs	r3, #16
 801b0ec:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 801b0ee:	7afb      	ldrb	r3, [r7, #11]
 801b0f0:	019b      	lsls	r3, r3, #6
 801b0f2:	f043 0220 	orr.w	r2, r3, #32
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 801b0fa:	bf00      	nop
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	691b      	ldr	r3, [r3, #16]
 801b100:	f003 0320 	and.w	r3, r3, #32
 801b104:	2b00      	cmp	r3, #0
 801b106:	d1f9      	bne.n	801b0fc <dcd_edpt_close_all+0xd4>
}
 801b108:	bf00      	nop
 801b10a:	6a3b      	ldr	r3, [r7, #32]
 801b10c:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 801b10e:	693b      	ldr	r3, [r7, #16]
 801b110:	2210      	movs	r2, #16
 801b112:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 801b114:	bf00      	nop
 801b116:	693b      	ldr	r3, [r7, #16]
 801b118:	691b      	ldr	r3, [r3, #16]
 801b11a:	f003 0310 	and.w	r3, r3, #16
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d1f9      	bne.n	801b116 <dcd_edpt_close_all+0xee>
}
 801b122:	bf00      	nop
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  dfifo_device_init(rhport); // re-init dfifo
 801b124:	79fb      	ldrb	r3, [r7, #7]
 801b126:	4618      	mov	r0, r3
 801b128:	f7ff fb10 	bl	801a74c <dfifo_device_init>
}
 801b12c:	bf00      	nop
 801b12e:	3728      	adds	r7, #40	@ 0x28
 801b130:	46bd      	mov	sp, r7
 801b132:	bd80      	pop	{r7, pc}
 801b134:	08033b64 	.word	0x08033b64
 801b138:	24008c38 	.word	0x24008c38
 801b13c:	24008b18 	.word	0x24008b18

0801b140 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 801b140:	b580      	push	{r7, lr}
 801b142:	b086      	sub	sp, #24
 801b144:	af00      	add	r7, sp, #0
 801b146:	603a      	str	r2, [r7, #0]
 801b148:	461a      	mov	r2, r3
 801b14a:	4603      	mov	r3, r0
 801b14c:	71fb      	strb	r3, [r7, #7]
 801b14e:	460b      	mov	r3, r1
 801b150:	71bb      	strb	r3, [r7, #6]
 801b152:	4613      	mov	r3, r2
 801b154:	80bb      	strh	r3, [r7, #4]
 801b156:	79bb      	ldrb	r3, [r7, #6]
 801b158:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801b15a:	7bbb      	ldrb	r3, [r7, #14]
 801b15c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b160:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 801b162:	75fb      	strb	r3, [r7, #23]
 801b164:	79bb      	ldrb	r3, [r7, #6]
 801b166:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801b168:	7bfb      	ldrb	r3, [r7, #15]
 801b16a:	09db      	lsrs	r3, r3, #7
 801b16c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 801b16e:	75bb      	strb	r3, [r7, #22]

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 801b170:	7dfa      	ldrb	r2, [r7, #23]
 801b172:	7dbb      	ldrb	r3, [r7, #22]
 801b174:	0052      	lsls	r2, r2, #1
 801b176:	4413      	add	r3, r2
 801b178:	011b      	lsls	r3, r3, #4
 801b17a:	4a0f      	ldr	r2, [pc, #60]	@ (801b1b8 <dcd_edpt_xfer+0x78>)
 801b17c:	4413      	add	r3, r2
 801b17e:	613b      	str	r3, [r7, #16]
  xfer->buffer = buffer;
 801b180:	693b      	ldr	r3, [r7, #16]
 801b182:	683a      	ldr	r2, [r7, #0]
 801b184:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 801b186:	693b      	ldr	r3, [r7, #16]
 801b188:	2200      	movs	r2, #0
 801b18a:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 801b18c:	693b      	ldr	r3, [r7, #16]
 801b18e:	88ba      	ldrh	r2, [r7, #4]
 801b190:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if (epnum == 0) {
 801b192:	7dfb      	ldrb	r3, [r7, #23]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d104      	bne.n	801b1a2 <dcd_edpt_xfer+0x62>
    _dcd_data.ep0_pending[dir] = total_bytes;
 801b198:	7dbb      	ldrb	r3, [r7, #22]
 801b19a:	4908      	ldr	r1, [pc, #32]	@ (801b1bc <dcd_edpt_xfer+0x7c>)
 801b19c:	88ba      	ldrh	r2, [r7, #4]
 801b19e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir);
 801b1a2:	7dba      	ldrb	r2, [r7, #22]
 801b1a4:	7df9      	ldrb	r1, [r7, #23]
 801b1a6:	79fb      	ldrb	r3, [r7, #7]
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	f7ff fc8f 	bl	801aacc <edpt_schedule_packets>

  return true;
 801b1ae:	2301      	movs	r3, #1
}
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	3718      	adds	r7, #24
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	bd80      	pop	{r7, pc}
 801b1b8:	24008b18 	.word	0x24008b18
 801b1bc:	24008c38 	.word	0x24008c38

0801b1c0 <dcd_edpt_stall>:
  edpt_schedule_packets(rhport, epnum, dir);

  return true;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 801b1c0:	b580      	push	{r7, lr}
 801b1c2:	b086      	sub	sp, #24
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	4603      	mov	r3, r0
 801b1c8:	460a      	mov	r2, r1
 801b1ca:	71fb      	strb	r3, [r7, #7]
 801b1cc:	4613      	mov	r3, r2
 801b1ce:	71bb      	strb	r3, [r7, #6]
 801b1d0:	79fb      	ldrb	r3, [r7, #7]
 801b1d2:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801b1d4:	7cbb      	ldrb	r3, [r7, #18]
 801b1d6:	2b01      	cmp	r3, #1
 801b1d8:	d901      	bls.n	801b1de <dcd_edpt_stall+0x1e>
    rhport = 0;
 801b1da:	2300      	movs	r3, #0
 801b1dc:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801b1de:	7cbb      	ldrb	r3, [r7, #18]
 801b1e0:	4a0f      	ldr	r2, [pc, #60]	@ (801b220 <dcd_edpt_stall+0x60>)
 801b1e2:	011b      	lsls	r3, r3, #4
 801b1e4:	4413      	add	r3, r2
 801b1e6:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801b1e8:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 801b1ea:	79b9      	ldrb	r1, [r7, #6]
 801b1ec:	79fb      	ldrb	r3, [r7, #7]
 801b1ee:	2201      	movs	r2, #1
 801b1f0:	4618      	mov	r0, r3
 801b1f2:	f7ff fb9f 	bl	801a934 <edpt_disable>
 801b1f6:	79bb      	ldrb	r3, [r7, #6]
 801b1f8:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801b1fa:	7cfb      	ldrb	r3, [r7, #19]
 801b1fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b200:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 801b202:	2b00      	cmp	r3, #0
 801b204:	d108      	bne.n	801b218 <dcd_edpt_stall+0x58>
 801b206:	697b      	ldr	r3, [r7, #20]
 801b208:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 801b20a:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d003      	beq.n	801b218 <dcd_edpt_stall+0x58>
    dma_setup_prepare(rhport);
 801b210:	79fb      	ldrb	r3, [r7, #7]
 801b212:	4618      	mov	r0, r3
 801b214:	f7ff f97c 	bl	801a510 <dma_setup_prepare>
  }
}
 801b218:	bf00      	nop
 801b21a:	3718      	adds	r7, #24
 801b21c:	46bd      	mov	sp, r7
 801b21e:	bd80      	pop	{r7, pc}
 801b220:	08033b64 	.word	0x08033b64

0801b224 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 801b224:	b480      	push	{r7}
 801b226:	b087      	sub	sp, #28
 801b228:	af00      	add	r7, sp, #0
 801b22a:	4603      	mov	r3, r0
 801b22c:	460a      	mov	r2, r1
 801b22e:	71fb      	strb	r3, [r7, #7]
 801b230:	4613      	mov	r3, r2
 801b232:	71bb      	strb	r3, [r7, #6]
 801b234:	79fb      	ldrb	r3, [r7, #7]
 801b236:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801b238:	7a7b      	ldrb	r3, [r7, #9]
 801b23a:	2b01      	cmp	r3, #1
 801b23c:	d901      	bls.n	801b242 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 801b23e:	2300      	movs	r3, #0
 801b240:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801b242:	7a7b      	ldrb	r3, [r7, #9]
 801b244:	4a19      	ldr	r2, [pc, #100]	@ (801b2ac <dcd_edpt_clear_stall+0x88>)
 801b246:	011b      	lsls	r3, r3, #4
 801b248:	4413      	add	r3, r2
 801b24a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801b24c:	617b      	str	r3, [r7, #20]
 801b24e:	79bb      	ldrb	r3, [r7, #6]
 801b250:	72bb      	strb	r3, [r7, #10]
 801b252:	7abb      	ldrb	r3, [r7, #10]
 801b254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b258:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 801b25a:	74fb      	strb	r3, [r7, #19]
 801b25c:	79bb      	ldrb	r3, [r7, #6]
 801b25e:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801b260:	7afb      	ldrb	r3, [r7, #11]
 801b262:	09db      	lsrs	r3, r3, #7
 801b264:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 801b266:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 801b268:	7cbb      	ldrb	r3, [r7, #18]
 801b26a:	2b01      	cmp	r3, #1
 801b26c:	bf14      	ite	ne
 801b26e:	2301      	movne	r3, #1
 801b270:	2300      	moveq	r3, #0
 801b272:	b2db      	uxtb	r3, r3
 801b274:	461a      	mov	r2, r3
 801b276:	7cfb      	ldrb	r3, [r7, #19]
 801b278:	0112      	lsls	r2, r2, #4
 801b27a:	4413      	add	r3, r2
 801b27c:	3348      	adds	r3, #72	@ 0x48
 801b27e:	015b      	lsls	r3, r3, #5
 801b280:	697a      	ldr	r2, [r7, #20]
 801b282:	4413      	add	r3, r2
 801b284:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	601a      	str	r2, [r3, #0]
}
 801b29e:	bf00      	nop
 801b2a0:	371c      	adds	r7, #28
 801b2a2:	46bd      	mov	sp, r7
 801b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2a8:	4770      	bx	lr
 801b2aa:	bf00      	nop
 801b2ac:	08033b64 	.word	0x08033b64

0801b2b0 <handle_bus_reset>:
//--------------------------------------------------------------------
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
static void handle_bus_reset(uint8_t rhport) {
 801b2b0:	b580      	push	{r7, lr}
 801b2b2:	b08a      	sub	sp, #40	@ 0x28
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	4603      	mov	r3, r0
 801b2b8:	71fb      	strb	r3, [r7, #7]
 801b2ba:	79fb      	ldrb	r3, [r7, #7]
 801b2bc:	77bb      	strb	r3, [r7, #30]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801b2be:	7fbb      	ldrb	r3, [r7, #30]
 801b2c0:	2b01      	cmp	r3, #1
 801b2c2:	d901      	bls.n	801b2c8 <handle_bus_reset+0x18>
    rhport = 0;
 801b2c4:	2300      	movs	r3, #0
 801b2c6:	77bb      	strb	r3, [r7, #30]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801b2c8:	7fbb      	ldrb	r3, [r7, #30]
 801b2ca:	4a63      	ldr	r2, [pc, #396]	@ (801b458 <handle_bus_reset+0x1a8>)
 801b2cc:	011b      	lsls	r3, r3, #4
 801b2ce:	4413      	add	r3, r2
 801b2d0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 801b2d2:	623b      	str	r3, [r7, #32]
  const uint8_t ep_count =  DWC2_EP_COUNT(dwc2);
 801b2d4:	6a3b      	ldr	r3, [r7, #32]
 801b2d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b2d8:	f3c3 2383 	ubfx	r3, r3, #10, #4
 801b2dc:	b2db      	uxtb	r3, r3
 801b2de:	3301      	adds	r3, #1
 801b2e0:	77fb      	strb	r3, [r7, #31]

  tu_memclr(xfer_status, sizeof(xfer_status));
 801b2e2:	f44f 7290 	mov.w	r2, #288	@ 0x120
 801b2e6:	2100      	movs	r1, #0
 801b2e8:	485c      	ldr	r0, [pc, #368]	@ (801b45c <handle_bus_reset+0x1ac>)
 801b2ea:	f004 f903 	bl	801f4f4 <memset>

  _dcd_data.sof_en = false;
 801b2ee:	4b5c      	ldr	r3, [pc, #368]	@ (801b460 <handle_bus_reset+0x1b0>)
 801b2f0:	2200      	movs	r2, #0
 801b2f2:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 801b2f4:	4b5a      	ldr	r3, [pc, #360]	@ (801b460 <handle_bus_reset+0x1b0>)
 801b2f6:	2200      	movs	r2, #0
 801b2f8:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b300:	e014      	b.n	801b32c <handle_bus_reset+0x7c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 801b302:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b306:	6a3a      	ldr	r2, [r7, #32]
 801b308:	3358      	adds	r3, #88	@ 0x58
 801b30a:	015b      	lsls	r3, r3, #5
 801b30c:	4413      	add	r3, r2
 801b30e:	681a      	ldr	r2, [r3, #0]
 801b310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b314:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 801b318:	6a39      	ldr	r1, [r7, #32]
 801b31a:	3358      	adds	r3, #88	@ 0x58
 801b31c:	015b      	lsls	r3, r3, #5
 801b31e:	440b      	add	r3, r1
 801b320:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 801b322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b326:	3301      	adds	r3, #1
 801b328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b32c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801b330:	7ffb      	ldrb	r3, [r7, #31]
 801b332:	429a      	cmp	r2, r3
 801b334:	d3e5      	bcc.n	801b302 <handle_bus_reset+0x52>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 801b336:	2300      	movs	r3, #0
 801b338:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801b33c:	e01d      	b.n	801b37a <handle_bus_reset+0xca>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 801b33e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b342:	6a3a      	ldr	r2, [r7, #32]
 801b344:	3348      	adds	r3, #72	@ 0x48
 801b346:	015b      	lsls	r3, r3, #5
 801b348:	4413      	add	r3, r2
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	da0f      	bge.n	801b370 <handle_bus_reset+0xc0>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 801b350:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b354:	6a3a      	ldr	r2, [r7, #32]
 801b356:	3348      	adds	r3, #72	@ 0x48
 801b358:	015b      	lsls	r3, r3, #5
 801b35a:	4413      	add	r3, r2
 801b35c:	681a      	ldr	r2, [r3, #0]
 801b35e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b362:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 801b366:	6a39      	ldr	r1, [r7, #32]
 801b368:	3348      	adds	r3, #72	@ 0x48
 801b36a:	015b      	lsls	r3, r3, #5
 801b36c:	440b      	add	r3, r1
 801b36e:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 801b370:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b374:	3301      	adds	r3, #1
 801b376:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801b37a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801b37e:	7ffb      	ldrb	r3, [r7, #31]
 801b380:	429a      	cmp	r2, r3
 801b382:	d3dc      	bcc.n	801b33e <handle_bus_reset+0x8e>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 801b384:	6a3b      	ldr	r3, [r7, #32]
 801b386:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 801b38a:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 801b38e:	6a3b      	ldr	r3, [r7, #32]
 801b390:	2209      	movs	r2, #9
 801b392:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 801b396:	6a3b      	ldr	r3, [r7, #32]
 801b398:	2209      	movs	r2, #9
 801b39a:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 801b39e:	6a3b      	ldr	r3, [r7, #32]
 801b3a0:	613b      	str	r3, [r7, #16]
 801b3a2:	2310      	movs	r3, #16
 801b3a4:	73fb      	strb	r3, [r7, #15]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 801b3a6:	7bfb      	ldrb	r3, [r7, #15]
 801b3a8:	019b      	lsls	r3, r3, #6
 801b3aa:	f043 0220 	orr.w	r2, r3, #32
 801b3ae:	693b      	ldr	r3, [r7, #16]
 801b3b0:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 801b3b2:	bf00      	nop
 801b3b4:	693b      	ldr	r3, [r7, #16]
 801b3b6:	691b      	ldr	r3, [r3, #16]
 801b3b8:	f003 0320 	and.w	r3, r3, #32
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d1f9      	bne.n	801b3b4 <handle_bus_reset+0x104>
}
 801b3c0:	bf00      	nop
 801b3c2:	6a3b      	ldr	r3, [r7, #32]
 801b3c4:	617b      	str	r3, [r7, #20]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 801b3c6:	697b      	ldr	r3, [r7, #20]
 801b3c8:	2210      	movs	r2, #16
 801b3ca:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 801b3cc:	bf00      	nop
 801b3ce:	697b      	ldr	r3, [r7, #20]
 801b3d0:	691b      	ldr	r3, [r3, #16]
 801b3d2:	f003 0310 	and.w	r3, r3, #16
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d1f9      	bne.n	801b3ce <handle_bus_reset+0x11e>
}
 801b3da:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 801b3dc:	79fb      	ldrb	r3, [r7, #7]
 801b3de:	4618      	mov	r0, r3
 801b3e0:	f7ff f9b4 	bl	801a74c <dfifo_device_init>

  // 5. Reset device address
  dwc2->dcfg_bm.address = 0;
 801b3e4:	6a3a      	ldr	r2, [r7, #32]
 801b3e6:	f8d2 3800 	ldr.w	r3, [r2, #2048]	@ 0x800
 801b3ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801b3ee:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 801b3f2:	6a3b      	ldr	r3, [r7, #32]
 801b3f4:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 801b3f8:	f023 0203 	bic.w	r2, r3, #3
 801b3fc:	6a3b      	ldr	r3, [r7, #32]
 801b3fe:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 801b402:	6a3b      	ldr	r3, [r7, #32]
 801b404:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 801b408:	f023 0203 	bic.w	r2, r3, #3
 801b40c:	6a3b      	ldr	r3, [r7, #32]
 801b40e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 801b412:	4b12      	ldr	r3, [pc, #72]	@ (801b45c <handle_bus_reset+0x1ac>)
 801b414:	2240      	movs	r2, #64	@ 0x40
 801b416:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 801b418:	4b10      	ldr	r3, [pc, #64]	@ (801b45c <handle_bus_reset+0x1ac>)
 801b41a:	2240      	movs	r2, #64	@ 0x40
 801b41c:	835a      	strh	r2, [r3, #26]
 801b41e:	6a3b      	ldr	r3, [r7, #32]
 801b420:	61bb      	str	r3, [r7, #24]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 801b422:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 801b424:	2b00      	cmp	r3, #0
 801b426:	d004      	beq.n	801b432 <handle_bus_reset+0x182>
    dma_setup_prepare(rhport);
 801b428:	79fb      	ldrb	r3, [r7, #7]
 801b42a:	4618      	mov	r0, r3
 801b42c:	f7ff f870 	bl	801a510 <dma_setup_prepare>
 801b430:	e007      	b.n	801b442 <handle_bus_reset+0x192>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 801b432:	6a3b      	ldr	r3, [r7, #32]
 801b434:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 801b438:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 801b43c:	6a3b      	ldr	r3, [r7, #32]
 801b43e:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 801b442:	6a3b      	ldr	r3, [r7, #32]
 801b444:	699b      	ldr	r3, [r3, #24]
 801b446:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 801b44a:	6a3b      	ldr	r3, [r7, #32]
 801b44c:	619a      	str	r2, [r3, #24]
}
 801b44e:	bf00      	nop
 801b450:	3728      	adds	r7, #40	@ 0x28
 801b452:	46bd      	mov	sp, r7
 801b454:	bd80      	pop	{r7, pc}
 801b456:	bf00      	nop
 801b458:	08033b64 	.word	0x08033b64
 801b45c:	24008b18 	.word	0x24008b18
 801b460:	24008c38 	.word	0x24008c38

0801b464 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 801b464:	b580      	push	{r7, lr}
 801b466:	b088      	sub	sp, #32
 801b468:	af00      	add	r7, sp, #0
 801b46a:	4603      	mov	r3, r0
 801b46c:	71fb      	strb	r3, [r7, #7]
 801b46e:	79fb      	ldrb	r3, [r7, #7]
 801b470:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801b472:	7dfb      	ldrb	r3, [r7, #23]
 801b474:	2b01      	cmp	r3, #1
 801b476:	d901      	bls.n	801b47c <handle_enum_done+0x18>
    rhport = 0;
 801b478:	2300      	movs	r3, #0
 801b47a:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801b47c:	7dfb      	ldrb	r3, [r7, #23]
 801b47e:	4a18      	ldr	r2, [pc, #96]	@ (801b4e0 <handle_enum_done+0x7c>)
 801b480:	011b      	lsls	r3, r3, #4
 801b482:	4413      	add	r3, r2
 801b484:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 801b486:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dwc2->dsts_bm.enum_speed) {
 801b488:	69bb      	ldr	r3, [r7, #24]
 801b48a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 801b48e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801b492:	b2db      	uxtb	r3, r3
 801b494:	2b00      	cmp	r3, #0
 801b496:	d002      	beq.n	801b49e <handle_enum_done+0x3a>
 801b498:	2b02      	cmp	r3, #2
 801b49a:	d003      	beq.n	801b4a4 <handle_enum_done+0x40>
 801b49c:	e005      	b.n	801b4aa <handle_enum_done+0x46>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 801b49e:	2302      	movs	r3, #2
 801b4a0:	77fb      	strb	r3, [r7, #31]
    break;
 801b4a2:	e005      	b.n	801b4b0 <handle_enum_done+0x4c>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 801b4a4:	2301      	movs	r3, #1
 801b4a6:	77fb      	strb	r3, [r7, #31]
    break;
 801b4a8:	e002      	b.n	801b4b0 <handle_enum_done+0x4c>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	77fb      	strb	r3, [r7, #31]
    break;
 801b4ae:	bf00      	nop
 801b4b0:	79fb      	ldrb	r3, [r7, #7]
 801b4b2:	75bb      	strb	r3, [r7, #22]
 801b4b4:	7ffb      	ldrb	r3, [r7, #31]
 801b4b6:	757b      	strb	r3, [r7, #21]
 801b4b8:	2301      	movs	r3, #1
 801b4ba:	753b      	strb	r3, [r7, #20]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 801b4bc:	7dbb      	ldrb	r3, [r7, #22]
 801b4be:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_BUS_RESET;
 801b4c0:	2301      	movs	r3, #1
 801b4c2:	727b      	strb	r3, [r7, #9]
  event.bus_reset.speed = speed;
 801b4c4:	7d7b      	ldrb	r3, [r7, #21]
 801b4c6:	733b      	strb	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 801b4c8:	7d3a      	ldrb	r2, [r7, #20]
 801b4ca:	f107 0308 	add.w	r3, r7, #8
 801b4ce:	4611      	mov	r1, r2
 801b4d0:	4618      	mov	r0, r3
 801b4d2:	f7fe f9cb 	bl	801986c <dcd_event_handler>
}
 801b4d6:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 801b4d8:	bf00      	nop
 801b4da:	3720      	adds	r7, #32
 801b4dc:	46bd      	mov	sp, r7
 801b4de:	bd80      	pop	{r7, pc}
 801b4e0:	08033b64 	.word	0x08033b64

0801b4e4 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 801b4e4:	b580      	push	{r7, lr}
 801b4e6:	b08c      	sub	sp, #48	@ 0x30
 801b4e8:	af00      	add	r7, sp, #0
 801b4ea:	4603      	mov	r3, r0
 801b4ec:	71fb      	strb	r3, [r7, #7]
 801b4ee:	79fb      	ldrb	r3, [r7, #7]
 801b4f0:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801b4f2:	7cfb      	ldrb	r3, [r7, #19]
 801b4f4:	2b01      	cmp	r3, #1
 801b4f6:	d901      	bls.n	801b4fc <handle_rxflvl_irq+0x18>
    rhport = 0;
 801b4f8:	2300      	movs	r3, #0
 801b4fa:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801b4fc:	7cfb      	ldrb	r3, [r7, #19]
 801b4fe:	4a48      	ldr	r2, [pc, #288]	@ (801b620 <handle_rxflvl_irq+0x13c>)
 801b500:	011b      	lsls	r3, r3, #4
 801b502:	4413      	add	r3, r2
 801b504:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801b506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 801b508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b50a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801b50e:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp_bm = dwc2->grxstsp_bm;
 801b510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b512:	6a1b      	ldr	r3, [r3, #32]
 801b514:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp_bm.ep_ch_num;
 801b516:	7b3b      	ldrb	r3, [r7, #12]
 801b518:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801b51c:	b2db      	uxtb	r3, r3
 801b51e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 801b522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b526:	3358      	adds	r3, #88	@ 0x58
 801b528:	015b      	lsls	r3, r3, #5
 801b52a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b52c:	4413      	add	r3, r2
 801b52e:	623b      	str	r3, [r7, #32]

  switch (grxstsp_bm.packet_status) {
 801b530:	7bbb      	ldrb	r3, [r7, #14]
 801b532:	f3c3 0343 	ubfx	r3, r3, #1, #4
 801b536:	b2db      	uxtb	r3, r3
 801b538:	3b01      	subs	r3, #1
 801b53a:	2b05      	cmp	r3, #5
 801b53c:	d868      	bhi.n	801b610 <handle_rxflvl_irq+0x12c>
 801b53e:	a201      	add	r2, pc, #4	@ (adr r2, 801b544 <handle_rxflvl_irq+0x60>)
 801b540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b544:	0801b611 	.word	0x0801b611
 801b548:	0801b583 	.word	0x0801b583
 801b54c:	0801b611 	.word	0x0801b611
 801b550:	0801b575 	.word	0x0801b575
 801b554:	0801b611 	.word	0x0801b611
 801b558:	0801b55d 	.word	0x0801b55d
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 801b55c:	4b31      	ldr	r3, [pc, #196]	@ (801b624 <handle_rxflvl_irq+0x140>)
 801b55e:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 801b560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b562:	681a      	ldr	r2, [r3, #0]
 801b564:	69fb      	ldr	r3, [r7, #28]
 801b566:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 801b568:	69fb      	ldr	r3, [r7, #28]
 801b56a:	3304      	adds	r3, #4
 801b56c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b56e:	6812      	ldr	r2, [r2, #0]
 801b570:	601a      	str	r2, [r3, #0]
      break;
 801b572:	e050      	b.n	801b616 <handle_rxflvl_irq+0x132>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 801b574:	6a3b      	ldr	r3, [r7, #32]
 801b576:	691b      	ldr	r3, [r3, #16]
 801b578:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 801b57c:	6a3b      	ldr	r3, [r7, #32]
 801b57e:	611a      	str	r2, [r3, #16]
      break;
 801b580:	e049      	b.n	801b616 <handle_rxflvl_irq+0x132>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp_bm.byte_count;
 801b582:	89bb      	ldrh	r3, [r7, #12]
 801b584:	f3c3 130a 	ubfx	r3, r3, #4, #11
 801b588:	b29b      	uxth	r3, r3
 801b58a:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 801b58c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b590:	015b      	lsls	r3, r3, #5
 801b592:	4a25      	ldr	r2, [pc, #148]	@ (801b628 <handle_rxflvl_irq+0x144>)
 801b594:	4413      	add	r3, r2
 801b596:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 801b598:	8b7b      	ldrh	r3, [r7, #26]
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d03a      	beq.n	801b614 <handle_rxflvl_irq+0x130>
        // Read packet off RxFIFO
        if (xfer->ff) {
 801b59e:	697b      	ldr	r3, [r7, #20]
 801b5a0:	685b      	ldr	r3, [r3, #4]
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d007      	beq.n	801b5b6 <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 801b5a6:	697b      	ldr	r3, [r7, #20]
 801b5a8:	685b      	ldr	r3, [r3, #4]
 801b5aa:	8b7a      	ldrh	r2, [r7, #26]
 801b5ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b5ae:	4618      	mov	r0, r3
 801b5b0:	f7fd f8b6 	bl	8018720 <tu_fifo_write_n_const_addr_full_words>
 801b5b4:	e00c      	b.n	801b5d0 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 801b5b6:	697b      	ldr	r3, [r7, #20]
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	8b7a      	ldrh	r2, [r7, #26]
 801b5bc:	4619      	mov	r1, r3
 801b5be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b5c0:	f000 fd5c 	bl	801c07c <dfifo_read_packet>
          xfer->buffer += byte_count;
 801b5c4:	697b      	ldr	r3, [r7, #20]
 801b5c6:	681a      	ldr	r2, [r3, #0]
 801b5c8:	8b7b      	ldrh	r3, [r7, #26]
 801b5ca:	441a      	add	r2, r3
 801b5cc:	697b      	ldr	r3, [r7, #20]
 801b5ce:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 801b5d0:	697b      	ldr	r3, [r7, #20]
 801b5d2:	895b      	ldrh	r3, [r3, #10]
 801b5d4:	8b7a      	ldrh	r2, [r7, #26]
 801b5d6:	429a      	cmp	r2, r3
 801b5d8:	d21c      	bcs.n	801b614 <handle_rxflvl_irq+0x130>
          xfer->total_len -= epout->tsiz_bm.xfer_size;
 801b5da:	6a3b      	ldr	r3, [r7, #32]
 801b5dc:	691b      	ldr	r3, [r3, #16]
 801b5de:	f3c3 0112 	ubfx	r1, r3, #0, #19
 801b5e2:	697b      	ldr	r3, [r7, #20]
 801b5e4:	891a      	ldrh	r2, [r3, #8]
 801b5e6:	b28b      	uxth	r3, r1
 801b5e8:	1ad3      	subs	r3, r2, r3
 801b5ea:	b29a      	uxth	r2, r3
 801b5ec:	697b      	ldr	r3, [r7, #20]
 801b5ee:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 801b5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d10d      	bne.n	801b614 <handle_rxflvl_irq+0x130>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 801b5f8:	697b      	ldr	r3, [r7, #20]
 801b5fa:	891a      	ldrh	r2, [r3, #8]
 801b5fc:	4b0b      	ldr	r3, [pc, #44]	@ (801b62c <handle_rxflvl_irq+0x148>)
 801b5fe:	881b      	ldrh	r3, [r3, #0]
 801b600:	1ad3      	subs	r3, r2, r3
 801b602:	b29a      	uxth	r2, r3
 801b604:	697b      	ldr	r3, [r7, #20]
 801b606:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 801b608:	4b08      	ldr	r3, [pc, #32]	@ (801b62c <handle_rxflvl_irq+0x148>)
 801b60a:	2200      	movs	r2, #0
 801b60c:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 801b60e:	e001      	b.n	801b614 <handle_rxflvl_irq+0x130>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 801b610:	bf00      	nop
 801b612:	e000      	b.n	801b616 <handle_rxflvl_irq+0x132>
      break;
 801b614:	bf00      	nop
  }
}
 801b616:	bf00      	nop
 801b618:	3730      	adds	r7, #48	@ 0x30
 801b61a:	46bd      	mov	sp, r7
 801b61c:	bd80      	pop	{r7, pc}
 801b61e:	bf00      	nop
 801b620:	08033b64 	.word	0x08033b64
 801b624:	24008c40 	.word	0x24008c40
 801b628:	24008b18 	.word	0x24008b18
 801b62c:	24008c38 	.word	0x24008c38

0801b630 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 801b630:	b580      	push	{r7, lr}
 801b632:	b08e      	sub	sp, #56	@ 0x38
 801b634:	af00      	add	r7, sp, #0
 801b636:	4603      	mov	r3, r0
 801b638:	603a      	str	r2, [r7, #0]
 801b63a:	71fb      	strb	r3, [r7, #7]
 801b63c:	460b      	mov	r3, r1
 801b63e:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 801b640:	783b      	ldrb	r3, [r7, #0]
 801b642:	f003 0308 	and.w	r3, r3, #8
 801b646:	b2db      	uxtb	r3, r3
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d01c      	beq.n	801b686 <handle_epout_slave+0x56>
 801b64c:	79fb      	ldrb	r3, [r7, #7]
 801b64e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801b652:	4b34      	ldr	r3, [pc, #208]	@ (801b724 <handle_epout_slave+0xf4>)
 801b654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b656:	2301      	movs	r3, #1
 801b658:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 801b65c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801b660:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 801b662:	2306      	movs	r3, #6
 801b664:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 801b666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b668:	f107 0318 	add.w	r3, r7, #24
 801b66c:	6810      	ldr	r0, [r2, #0]
 801b66e:	6851      	ldr	r1, [r2, #4]
 801b670:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 801b672:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 801b676:	f107 0314 	add.w	r3, r7, #20
 801b67a:	4611      	mov	r1, r2
 801b67c:	4618      	mov	r0, r3
 801b67e:	f7fe f8f5 	bl	801986c <dcd_event_handler>
}
 801b682:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 801b684:	e04a      	b.n	801b71c <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 801b686:	783b      	ldrb	r3, [r7, #0]
 801b688:	f003 0301 	and.w	r3, r3, #1
 801b68c:	b2db      	uxtb	r3, r3
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d044      	beq.n	801b71c <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 801b692:	783b      	ldrb	r3, [r7, #0]
 801b694:	f003 0320 	and.w	r3, r3, #32
 801b698:	b2db      	uxtb	r3, r3
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d13e      	bne.n	801b71c <handle_epout_slave+0xec>
 801b69e:	787b      	ldrb	r3, [r7, #1]
 801b6a0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801b6a4:	b2db      	uxtb	r3, r3
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d138      	bne.n	801b71c <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 801b6aa:	79bb      	ldrb	r3, [r7, #6]
 801b6ac:	015b      	lsls	r3, r3, #5
 801b6ae:	4a1e      	ldr	r2, [pc, #120]	@ (801b728 <handle_epout_slave+0xf8>)
 801b6b0:	4413      	add	r3, r2
 801b6b2:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 801b6b4:	79bb      	ldrb	r3, [r7, #6]
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d10a      	bne.n	801b6d0 <handle_epout_slave+0xa0>
 801b6ba:	4b1c      	ldr	r3, [pc, #112]	@ (801b72c <handle_epout_slave+0xfc>)
 801b6bc:	881b      	ldrh	r3, [r3, #0]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d006      	beq.n	801b6d0 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 801b6c2:	79b9      	ldrb	r1, [r7, #6]
 801b6c4:	79fb      	ldrb	r3, [r7, #7]
 801b6c6:	2200      	movs	r2, #0
 801b6c8:	4618      	mov	r0, r3
 801b6ca:	f7ff f9ff 	bl	801aacc <edpt_schedule_packets>
 801b6ce:	e025      	b.n	801b71c <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 801b6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b6d2:	891b      	ldrh	r3, [r3, #8]
 801b6d4:	461a      	mov	r2, r3
 801b6d6:	79fb      	ldrb	r3, [r7, #7]
 801b6d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801b6dc:	79bb      	ldrb	r3, [r7, #6]
 801b6de:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 801b6e2:	627a      	str	r2, [r7, #36]	@ 0x24
 801b6e4:	2300      	movs	r3, #0
 801b6e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801b6ea:	2301      	movs	r3, #1
 801b6ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 801b6f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801b6f4:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 801b6f6:	2307      	movs	r3, #7
 801b6f8:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 801b6fa:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 801b6fe:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 801b700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b702:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 801b704:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b708:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 801b70a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801b70e:	f107 0308 	add.w	r3, r7, #8
 801b712:	4611      	mov	r1, r2
 801b714:	4618      	mov	r0, r3
 801b716:	f7fe f8a9 	bl	801986c <dcd_event_handler>
}
 801b71a:	bf00      	nop
      }
    }
  }
}
 801b71c:	3738      	adds	r7, #56	@ 0x38
 801b71e:	46bd      	mov	sp, r7
 801b720:	bd80      	pop	{r7, pc}
 801b722:	bf00      	nop
 801b724:	24008c40 	.word	0x24008c40
 801b728:	24008b18 	.word	0x24008b18
 801b72c:	24008c38 	.word	0x24008c38

0801b730 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 801b730:	b580      	push	{r7, lr}
 801b732:	b090      	sub	sp, #64	@ 0x40
 801b734:	af00      	add	r7, sp, #0
 801b736:	4603      	mov	r3, r0
 801b738:	603a      	str	r2, [r7, #0]
 801b73a:	71fb      	strb	r3, [r7, #7]
 801b73c:	460b      	mov	r3, r1
 801b73e:	71bb      	strb	r3, [r7, #6]
 801b740:	79fb      	ldrb	r3, [r7, #7]
 801b742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801b746:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b74a:	2b01      	cmp	r3, #1
 801b74c:	d902      	bls.n	801b754 <handle_epin_slave+0x24>
    rhport = 0;
 801b74e:	2300      	movs	r3, #0
 801b750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801b754:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801b758:	4a5d      	ldr	r2, [pc, #372]	@ (801b8d0 <handle_epin_slave+0x1a0>)
 801b75a:	011b      	lsls	r3, r3, #4
 801b75c:	4413      	add	r3, r2
 801b75e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801b760:	63bb      	str	r3, [r7, #56]	@ 0x38
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 801b762:	79bb      	ldrb	r3, [r7, #6]
 801b764:	3348      	adds	r3, #72	@ 0x48
 801b766:	015b      	lsls	r3, r3, #5
 801b768:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b76a:	4413      	add	r3, r2
 801b76c:	637b      	str	r3, [r7, #52]	@ 0x34
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 801b76e:	79bb      	ldrb	r3, [r7, #6]
 801b770:	015b      	lsls	r3, r3, #5
 801b772:	3310      	adds	r3, #16
 801b774:	4a57      	ldr	r2, [pc, #348]	@ (801b8d4 <handle_epin_slave+0x1a4>)
 801b776:	4413      	add	r3, r2
 801b778:	633b      	str	r3, [r7, #48]	@ 0x30

  if (diepint_bm.xfer_complete) {
 801b77a:	783b      	ldrb	r3, [r7, #0]
 801b77c:	f003 0301 	and.w	r3, r3, #1
 801b780:	b2db      	uxtb	r3, r3
 801b782:	2b00      	cmp	r3, #0
 801b784:	d033      	beq.n	801b7ee <handle_epin_slave+0xbe>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 801b786:	79bb      	ldrb	r3, [r7, #6]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d10a      	bne.n	801b7a2 <handle_epin_slave+0x72>
 801b78c:	4b52      	ldr	r3, [pc, #328]	@ (801b8d8 <handle_epin_slave+0x1a8>)
 801b78e:	885b      	ldrh	r3, [r3, #2]
 801b790:	2b00      	cmp	r3, #0
 801b792:	d006      	beq.n	801b7a2 <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 801b794:	79b9      	ldrb	r1, [r7, #6]
 801b796:	79fb      	ldrb	r3, [r7, #7]
 801b798:	2201      	movs	r2, #1
 801b79a:	4618      	mov	r0, r3
 801b79c:	f7ff f996 	bl	801aacc <edpt_schedule_packets>
 801b7a0:	e025      	b.n	801b7ee <handle_epin_slave+0xbe>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 801b7a2:	79bb      	ldrb	r3, [r7, #6]
 801b7a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b7a8:	b2d9      	uxtb	r1, r3
 801b7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7ac:	891b      	ldrh	r3, [r3, #8]
 801b7ae:	461a      	mov	r2, r3
 801b7b0:	79fb      	ldrb	r3, [r7, #7]
 801b7b2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801b7b6:	460b      	mov	r3, r1
 801b7b8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 801b7bc:	61fa      	str	r2, [r7, #28]
 801b7be:	2300      	movs	r3, #0
 801b7c0:	76fb      	strb	r3, [r7, #27]
 801b7c2:	2301      	movs	r3, #1
 801b7c4:	76bb      	strb	r3, [r7, #26]
  event.rhport = rhport;
 801b7c6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801b7ca:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 801b7cc:	2307      	movs	r3, #7
 801b7ce:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 801b7d0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b7d4:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 801b7d6:	69fb      	ldr	r3, [r7, #28]
 801b7d8:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 801b7da:	7efb      	ldrb	r3, [r7, #27]
 801b7dc:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 801b7de:	7eba      	ldrb	r2, [r7, #26]
 801b7e0:	f107 0308 	add.w	r3, r7, #8
 801b7e4:	4611      	mov	r1, r2
 801b7e6:	4618      	mov	r0, r3
 801b7e8:	f7fe f840 	bl	801986c <dcd_event_handler>
}
 801b7ec:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 801b7ee:	783b      	ldrb	r3, [r7, #0]
 801b7f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801b7f4:	b2db      	uxtb	r3, r3
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d066      	beq.n	801b8c8 <handle_epin_slave+0x198>
 801b7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b7fc:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 801b800:	79ba      	ldrb	r2, [r7, #6]
 801b802:	2101      	movs	r1, #1
 801b804:	fa01 f202 	lsl.w	r2, r1, r2
 801b808:	4013      	ands	r3, r2
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d05c      	beq.n	801b8c8 <handle_epin_slave+0x198>
    const uint16_t remain_packets = epin->tsiz_bm.packet_count;
 801b80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b810:	691b      	ldr	r3, [r3, #16]
 801b812:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 801b816:	b29b      	uxth	r3, r3
 801b818:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 801b81a:	2300      	movs	r3, #0
 801b81c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801b81e:	e03b      	b.n	801b898 <handle_epin_slave+0x168>
      const uint16_t remain_bytes = (uint16_t) epin->tsiz_bm.xfer_size;
 801b820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b822:	691b      	ldr	r3, [r3, #16]
 801b824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b828:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 801b82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b82c:	895a      	ldrh	r2, [r3, #10]
 801b82e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b830:	833b      	strh	r3, [r7, #24]
 801b832:	4613      	mov	r3, r2
 801b834:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 801b836:	8b3a      	ldrh	r2, [r7, #24]
 801b838:	8afb      	ldrh	r3, [r7, #22]
 801b83a:	4293      	cmp	r3, r2
 801b83c:	bf28      	it	cs
 801b83e:	4613      	movcs	r3, r2
 801b840:	b29b      	uxth	r3, r3
 801b842:	857b      	strh	r3, [r7, #42]	@ 0x2a

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 801b844:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 801b846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b848:	699b      	ldr	r3, [r3, #24]
 801b84a:	0099      	lsls	r1, r3, #2
 801b84c:	4b23      	ldr	r3, [pc, #140]	@ (801b8dc <handle_epin_slave+0x1ac>)
 801b84e:	400b      	ands	r3, r1
 801b850:	429a      	cmp	r2, r3
 801b852:	d826      	bhi.n	801b8a2 <handle_epin_slave+0x172>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 801b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b856:	685b      	ldr	r3, [r3, #4]
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d00d      	beq.n	801b878 <handle_epin_slave+0x148>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 801b85c:	79bb      	ldrb	r3, [r7, #6]
 801b85e:	3301      	adds	r3, #1
 801b860:	031b      	lsls	r3, r3, #12
 801b862:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b864:	4413      	add	r3, r2
 801b866:	627b      	str	r3, [r7, #36]	@ 0x24
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 801b868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b86a:	685b      	ldr	r3, [r3, #4]
 801b86c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 801b86e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b870:	4618      	mov	r0, r3
 801b872:	f7fc feee 	bl	8018652 <tu_fifo_read_n_const_addr_full_words>
 801b876:	e00c      	b.n	801b892 <handle_epin_slave+0x162>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 801b878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b87a:	681a      	ldr	r2, [r3, #0]
 801b87c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801b87e:	79b9      	ldrb	r1, [r7, #6]
 801b880:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801b882:	f000 fc4c 	bl	801c11e <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 801b886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b888:	681a      	ldr	r2, [r3, #0]
 801b88a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801b88c:	441a      	add	r2, r3
 801b88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b890:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 801b892:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b894:	3301      	adds	r3, #1
 801b896:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801b898:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801b89a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b89c:	429a      	cmp	r2, r3
 801b89e:	d3bf      	bcc.n	801b820 <handle_epin_slave+0xf0>
 801b8a0:	e000      	b.n	801b8a4 <handle_epin_slave+0x174>
        break;
 801b8a2:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    if (epin->tsiz_bm.xfer_size == 0) {
 801b8a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b8a6:	691b      	ldr	r3, [r3, #16]
 801b8a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d10b      	bne.n	801b8c8 <handle_epin_slave+0x198>
      dwc2->diepempmsk &= ~(1 << epnum);
 801b8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b8b2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 801b8b6:	79ba      	ldrb	r2, [r7, #6]
 801b8b8:	2101      	movs	r1, #1
 801b8ba:	fa01 f202 	lsl.w	r2, r1, r2
 801b8be:	43d2      	mvns	r2, r2
 801b8c0:	401a      	ands	r2, r3
 801b8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b8c4:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 801b8c8:	bf00      	nop
 801b8ca:	3740      	adds	r7, #64	@ 0x40
 801b8cc:	46bd      	mov	sp, r7
 801b8ce:	bd80      	pop	{r7, pc}
 801b8d0:	08033b64 	.word	0x08033b64
 801b8d4:	24008b18 	.word	0x24008b18
 801b8d8:	24008c38 	.word	0x24008c38
 801b8dc:	0003fffc 	.word	0x0003fffc

0801b8e0 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 801b8e0:	b580      	push	{r7, lr}
 801b8e2:	b08a      	sub	sp, #40	@ 0x28
 801b8e4:	af00      	add	r7, sp, #0
 801b8e6:	4603      	mov	r3, r0
 801b8e8:	460a      	mov	r2, r1
 801b8ea:	71fb      	strb	r3, [r7, #7]
 801b8ec:	4613      	mov	r3, r2
 801b8ee:	71bb      	strb	r3, [r7, #6]
 801b8f0:	79fb      	ldrb	r3, [r7, #7]
 801b8f2:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801b8f4:	7bfb      	ldrb	r3, [r7, #15]
 801b8f6:	2b01      	cmp	r3, #1
 801b8f8:	d901      	bls.n	801b8fe <handle_ep_irq+0x1e>
    rhport = 0;
 801b8fa:	2300      	movs	r3, #0
 801b8fc:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801b8fe:	7bfb      	ldrb	r3, [r7, #15]
 801b900:	4a31      	ldr	r2, [pc, #196]	@ (801b9c8 <handle_ep_irq+0xe8>)
 801b902:	011b      	lsls	r3, r3, #4
 801b904:	4413      	add	r3, r2
 801b906:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801b908:	623b      	str	r3, [r7, #32]
 801b90a:	6a3b      	ldr	r3, [r7, #32]
 801b90c:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 801b90e:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 801b910:	77fb      	strb	r3, [r7, #31]
  const uint8_t ep_count = DWC2_EP_COUNT(dwc2);
 801b912:	6a3b      	ldr	r3, [r7, #32]
 801b914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b916:	f3c3 2383 	ubfx	r3, r3, #10, #4
 801b91a:	b2db      	uxtb	r3, r3
 801b91c:	3301      	adds	r3, #1
 801b91e:	77bb      	strb	r3, [r7, #30]
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 801b920:	79bb      	ldrb	r3, [r7, #6]
 801b922:	2b01      	cmp	r3, #1
 801b924:	d101      	bne.n	801b92a <handle_ep_irq+0x4a>
 801b926:	2300      	movs	r3, #0
 801b928:	e000      	b.n	801b92c <handle_ep_irq+0x4c>
 801b92a:	2310      	movs	r3, #16
 801b92c:	777b      	strb	r3, [r7, #29]
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 801b92e:	79bb      	ldrb	r3, [r7, #6]
 801b930:	2b01      	cmp	r3, #1
 801b932:	bf14      	ite	ne
 801b934:	2301      	movne	r3, #1
 801b936:	2300      	moveq	r3, #0
 801b938:	b2db      	uxtb	r3, r3
 801b93a:	025b      	lsls	r3, r3, #9
 801b93c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801b940:	6a3a      	ldr	r2, [r7, #32]
 801b942:	4413      	add	r3, r2
 801b944:	61bb      	str	r3, [r7, #24]

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 801b946:	2300      	movs	r3, #0
 801b948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b94c:	e032      	b.n	801b9b4 <handle_ep_irq+0xd4>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 801b94e:	6a3b      	ldr	r3, [r7, #32]
 801b950:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 801b954:	7f79      	ldrb	r1, [r7, #29]
 801b956:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b95a:	440b      	add	r3, r1
 801b95c:	fa22 f303 	lsr.w	r3, r2, r3
 801b960:	f003 0301 	and.w	r3, r3, #1
 801b964:	2b00      	cmp	r3, #0
 801b966:	d020      	beq.n	801b9aa <handle_ep_irq+0xca>
      dwc2_dep_t* epout = &ep_base[epnum];
 801b968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b96c:	015b      	lsls	r3, r3, #5
 801b96e:	69ba      	ldr	r2, [r7, #24]
 801b970:	4413      	add	r3, r2
 801b972:	617b      	str	r3, [r7, #20]
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 801b974:	697b      	ldr	r3, [r7, #20]
 801b976:	689b      	ldr	r3, [r3, #8]
 801b978:	60bb      	str	r3, [r7, #8]

      epout->intr = intr.value; // Clear interrupt
 801b97a:	68ba      	ldr	r2, [r7, #8]
 801b97c:	697b      	ldr	r3, [r7, #20]
 801b97e:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 801b980:	7ffb      	ldrb	r3, [r7, #31]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d111      	bne.n	801b9aa <handle_ep_irq+0xca>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 801b986:	79bb      	ldrb	r3, [r7, #6]
 801b988:	2b01      	cmp	r3, #1
 801b98a:	d107      	bne.n	801b99c <handle_ep_irq+0xbc>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 801b98c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 801b990:	79fb      	ldrb	r3, [r7, #7]
 801b992:	68ba      	ldr	r2, [r7, #8]
 801b994:	4618      	mov	r0, r3
 801b996:	f7ff fecb 	bl	801b730 <handle_epin_slave>
 801b99a:	e006      	b.n	801b9aa <handle_ep_irq+0xca>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 801b99c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 801b9a0:	79fb      	ldrb	r3, [r7, #7]
 801b9a2:	68ba      	ldr	r2, [r7, #8]
 801b9a4:	4618      	mov	r0, r3
 801b9a6:	f7ff fe43 	bl	801b630 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 801b9aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b9ae:	3301      	adds	r3, #1
 801b9b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b9b4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801b9b8:	7fbb      	ldrb	r3, [r7, #30]
 801b9ba:	429a      	cmp	r2, r3
 801b9bc:	d3c7      	bcc.n	801b94e <handle_ep_irq+0x6e>
        }
        #endif
      }
    }
  }
}
 801b9be:	bf00      	nop
 801b9c0:	bf00      	nop
 801b9c2:	3728      	adds	r7, #40	@ 0x28
 801b9c4:	46bd      	mov	sp, r7
 801b9c6:	bd80      	pop	{r7, pc}
 801b9c8:	08033b64 	.word	0x08033b64

0801b9cc <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 801b9cc:	b580      	push	{r7, lr}
 801b9ce:	b098      	sub	sp, #96	@ 0x60
 801b9d0:	af00      	add	r7, sp, #0
 801b9d2:	4603      	mov	r3, r0
 801b9d4:	71fb      	strb	r3, [r7, #7]
 801b9d6:	79fb      	ldrb	r3, [r7, #7]
 801b9d8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801b9dc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 801b9e0:	2b01      	cmp	r3, #1
 801b9e2:	d902      	bls.n	801b9ea <dcd_int_handler+0x1e>
    rhport = 0;
 801b9e4:	2300      	movs	r3, #0
 801b9e6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801b9ea:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 801b9ee:	4a7d      	ldr	r2, [pc, #500]	@ (801bbe4 <dcd_int_handler+0x218>)
 801b9f0:	011b      	lsls	r3, r3, #4
 801b9f2:	4413      	add	r3, r2
 801b9f4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801b9f6:	65fb      	str	r3, [r7, #92]	@ 0x5c

  const uint32_t gintmask = dwc2->gintmsk;
 801b9f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b9fa:	699b      	ldr	r3, [r3, #24]
 801b9fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 801b9fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ba00:	695b      	ldr	r3, [r3, #20]
 801ba02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ba04:	4013      	ands	r3, r2
 801ba06:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 801ba08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ba0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d007      	beq.n	801ba22 <dcd_int_handler+0x56>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 801ba12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ba14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801ba18:	615a      	str	r2, [r3, #20]
    handle_bus_reset(rhport);
 801ba1a:	79fb      	ldrb	r3, [r7, #7]
 801ba1c:	4618      	mov	r0, r3
 801ba1e:	f7ff fc47 	bl	801b2b0 <handle_bus_reset>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 801ba22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ba24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d007      	beq.n	801ba3c <dcd_int_handler+0x70>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 801ba2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ba2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801ba32:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 801ba34:	79fb      	ldrb	r3, [r7, #7]
 801ba36:	4618      	mov	r0, r3
 801ba38:	f7ff fd14 	bl	801b464 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 801ba3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ba3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d01d      	beq.n	801ba82 <dcd_int_handler+0xb6>
    dwc2->gintsts = GINTSTS_USBSUSP;
 801ba46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ba48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ba4c:	615a      	str	r2, [r3, #20]
 801ba4e:	79fb      	ldrb	r3, [r7, #7]
 801ba50:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 801ba54:	2304      	movs	r3, #4
 801ba56:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 801ba5a:	2301      	movs	r3, #1
 801ba5c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 801ba60:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801ba64:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 801ba68:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 801ba6c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 801ba70:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 801ba74:	f107 0320 	add.w	r3, r7, #32
 801ba78:	4611      	mov	r1, r2
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	f7fd fef6 	bl	801986c <dcd_event_handler>
}
 801ba80:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 801ba82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	da1d      	bge.n	801bac4 <dcd_int_handler+0xf8>
    dwc2->gintsts = GINTSTS_WKUINT;
 801ba88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ba8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801ba8e:	615a      	str	r2, [r3, #20]
 801ba90:	79fb      	ldrb	r3, [r7, #7]
 801ba92:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801ba96:	2305      	movs	r3, #5
 801ba98:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 801ba9c:	2301      	movs	r3, #1
 801ba9e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 801baa2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801baa6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 801baaa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801baae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 801bab2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801bab6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801baba:	4611      	mov	r1, r2
 801babc:	4618      	mov	r0, r3
 801babe:	f7fd fed5 	bl	801986c <dcd_event_handler>
}
 801bac2:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 801bac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bac6:	f003 0304 	and.w	r3, r3, #4
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d022      	beq.n	801bb14 <dcd_int_handler+0x148>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 801bace:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bad0:	685b      	ldr	r3, [r3, #4]
 801bad2:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 801bad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bad6:	f003 0304 	and.w	r3, r3, #4
 801bada:	2b00      	cmp	r3, #0
 801badc:	d017      	beq.n	801bb0e <dcd_int_handler+0x142>
 801bade:	79fb      	ldrb	r3, [r7, #7]
 801bae0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 801bae4:	2302      	movs	r3, #2
 801bae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801baea:	2301      	movs	r3, #1
 801baec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 801baf0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801baf4:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 801baf6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801bafa:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 801bafc:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 801bb00:	f107 0314 	add.w	r3, r7, #20
 801bb04:	4611      	mov	r1, r2
 801bb06:	4618      	mov	r0, r3
 801bb08:	f7fd feb0 	bl	801986c <dcd_event_handler>
}
 801bb0c:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 801bb0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801bb12:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 801bb14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bb16:	f003 0308 	and.w	r3, r3, #8
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d02e      	beq.n	801bb7c <dcd_int_handler+0x1b0>
    dwc2->gintsts = GINTSTS_SOF;
 801bb1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb20:	2208      	movs	r2, #8
 801bb22:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 801bb24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb26:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 801bb2a:	0a1b      	lsrs	r3, r3, #8
 801bb2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801bb30:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 801bb32:	4b2d      	ldr	r3, [pc, #180]	@ (801bbe8 <dcd_int_handler+0x21c>)
 801bb34:	79db      	ldrb	r3, [r3, #7]
 801bb36:	f083 0301 	eor.w	r3, r3, #1
 801bb3a:	b2db      	uxtb	r3, r3
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d005      	beq.n	801bb4c <dcd_int_handler+0x180>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 801bb40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb42:	699b      	ldr	r3, [r3, #24]
 801bb44:	f023 0208 	bic.w	r2, r3, #8
 801bb48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb4a:	619a      	str	r2, [r3, #24]
 801bb4c:	79fb      	ldrb	r3, [r7, #7]
 801bb4e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 801bb52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bb54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801bb56:	2301      	movs	r3, #1
 801bb58:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 801bb5c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 801bb60:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 801bb62:	2303      	movs	r3, #3
 801bb64:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 801bb66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bb68:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 801bb6a:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 801bb6e:	f107 0308 	add.w	r3, r7, #8
 801bb72:	4611      	mov	r1, r2
 801bb74:	4618      	mov	r0, r3
 801bb76:	f7fd fe79 	bl	801986c <dcd_event_handler>
}
 801bb7a:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 801bb7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bb7e:	f003 0310 	and.w	r3, r3, #16
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d015      	beq.n	801bbb2 <dcd_int_handler+0x1e6>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 801bb86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb88:	699b      	ldr	r3, [r3, #24]
 801bb8a:	f023 0210 	bic.w	r2, r3, #16
 801bb8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb90:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 801bb92:	79fb      	ldrb	r3, [r7, #7]
 801bb94:	4618      	mov	r0, r3
 801bb96:	f7ff fca5 	bl	801b4e4 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 801bb9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb9c:	695b      	ldr	r3, [r3, #20]
 801bb9e:	f003 0310 	and.w	r3, r3, #16
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d1f5      	bne.n	801bb92 <dcd_int_handler+0x1c6>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 801bba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bba8:	699b      	ldr	r3, [r3, #24]
 801bbaa:	f043 0210 	orr.w	r2, r3, #16
 801bbae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bbb0:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 801bbb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bbb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d004      	beq.n	801bbc6 <dcd_int_handler+0x1fa>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 801bbbc:	79fb      	ldrb	r3, [r7, #7]
 801bbbe:	2100      	movs	r1, #0
 801bbc0:	4618      	mov	r0, r3
 801bbc2:	f7ff fe8d 	bl	801b8e0 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 801bbc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bbc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d004      	beq.n	801bbda <dcd_int_handler+0x20e>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 801bbd0:	79fb      	ldrb	r3, [r7, #7]
 801bbd2:	2101      	movs	r1, #1
 801bbd4:	4618      	mov	r0, r3
 801bbd6:	f7ff fe83 	bl	801b8e0 <handle_ep_irq>
  }
}
 801bbda:	bf00      	nop
 801bbdc:	3760      	adds	r7, #96	@ 0x60
 801bbde:	46bd      	mov	sp, r7
 801bbe0:	bd80      	pop	{r7, pc}
 801bbe2:	bf00      	nop
 801bbe4:	08033b64 	.word	0x08033b64
 801bbe8:	24008c38 	.word	0x24008c38

0801bbec <dwc2_phy_init>:
}

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 801bbec:	b480      	push	{r7}
 801bbee:	b083      	sub	sp, #12
 801bbf0:	af00      	add	r7, sp, #0
 801bbf2:	6078      	str	r0, [r7, #4]
 801bbf4:	460b      	mov	r3, r1
 801bbf6:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 801bbf8:	78fb      	ldrb	r3, [r7, #3]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d112      	bne.n	801bc24 <dwc2_phy_init+0x38>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bc02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	639a      	str	r2, [r3, #56]	@ 0x38
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB2OTGFSULPILPEN;
    }
    #endif

    #if defined(USB_OTG_HS_PERIPH_BASE) && defined(RCC_AHB1LPENR_USB1OTGHSULPILPEN)
    if ( USB_OTG_HS_PERIPH_BASE == (uint32_t) dwc2 ) {
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	4a0b      	ldr	r2, [pc, #44]	@ (801bc3c <dwc2_phy_init+0x50>)
 801bc0e:	4293      	cmp	r3, r2
 801bc10:	d10e      	bne.n	801bc30 <dwc2_phy_init+0x44>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB1OTGHSULPILPEN;
 801bc12:	4b0b      	ldr	r3, [pc, #44]	@ (801bc40 <dwc2_phy_init+0x54>)
 801bc14:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801bc18:	4a09      	ldr	r2, [pc, #36]	@ (801bc40 <dwc2_phy_init+0x54>)
 801bc1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801bc1e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      #else

      #endif
    }
  }
}
 801bc22:	e005      	b.n	801bc30 <dwc2_phy_init+0x44>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bc28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 801bc30:	bf00      	nop
 801bc32:	370c      	adds	r7, #12
 801bc34:	46bd      	mov	sp, r7
 801bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc3a:	4770      	bx	lr
 801bc3c:	40040000 	.word	0x40040000
 801bc40:	58024400 	.word	0x58024400

0801bc44 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 801bc44:	b480      	push	{r7}
 801bc46:	b085      	sub	sp, #20
 801bc48:	af00      	add	r7, sp, #0
 801bc4a:	6078      	str	r0, [r7, #4]
 801bc4c:	460b      	mov	r3, r1
 801bc4e:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 801bc50:	78fb      	ldrb	r3, [r7, #3]
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d152      	bne.n	801bcfc <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 801bc56:	4b2c      	ldr	r3, [pc, #176]	@ (801bd08 <dwc2_phy_update+0xc4>)
 801bc58:	681b      	ldr	r3, [r3, #0]
 801bc5a:	4a2c      	ldr	r2, [pc, #176]	@ (801bd0c <dwc2_phy_update+0xc8>)
 801bc5c:	4293      	cmp	r3, r2
 801bc5e:	d302      	bcc.n	801bc66 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 801bc60:	2306      	movs	r3, #6
 801bc62:	60fb      	str	r3, [r7, #12]
 801bc64:	e041      	b.n	801bcea <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 801bc66:	4b28      	ldr	r3, [pc, #160]	@ (801bd08 <dwc2_phy_update+0xc4>)
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	4a29      	ldr	r2, [pc, #164]	@ (801bd10 <dwc2_phy_update+0xcc>)
 801bc6c:	4293      	cmp	r3, r2
 801bc6e:	d902      	bls.n	801bc76 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 801bc70:	2307      	movs	r3, #7
 801bc72:	60fb      	str	r3, [r7, #12]
 801bc74:	e039      	b.n	801bcea <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 801bc76:	4b24      	ldr	r3, [pc, #144]	@ (801bd08 <dwc2_phy_update+0xc4>)
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	4a26      	ldr	r2, [pc, #152]	@ (801bd14 <dwc2_phy_update+0xd0>)
 801bc7c:	4293      	cmp	r3, r2
 801bc7e:	d302      	bcc.n	801bc86 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 801bc80:	2308      	movs	r3, #8
 801bc82:	60fb      	str	r3, [r7, #12]
 801bc84:	e031      	b.n	801bcea <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 801bc86:	4b20      	ldr	r3, [pc, #128]	@ (801bd08 <dwc2_phy_update+0xc4>)
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	4a23      	ldr	r2, [pc, #140]	@ (801bd18 <dwc2_phy_update+0xd4>)
 801bc8c:	4293      	cmp	r3, r2
 801bc8e:	d902      	bls.n	801bc96 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 801bc90:	2309      	movs	r3, #9
 801bc92:	60fb      	str	r3, [r7, #12]
 801bc94:	e029      	b.n	801bcea <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 801bc96:	4b1c      	ldr	r3, [pc, #112]	@ (801bd08 <dwc2_phy_update+0xc4>)
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	4a20      	ldr	r2, [pc, #128]	@ (801bd1c <dwc2_phy_update+0xd8>)
 801bc9c:	4293      	cmp	r3, r2
 801bc9e:	d902      	bls.n	801bca6 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 801bca0:	230a      	movs	r3, #10
 801bca2:	60fb      	str	r3, [r7, #12]
 801bca4:	e021      	b.n	801bcea <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 801bca6:	4b18      	ldr	r3, [pc, #96]	@ (801bd08 <dwc2_phy_update+0xc4>)
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	4a1d      	ldr	r2, [pc, #116]	@ (801bd20 <dwc2_phy_update+0xdc>)
 801bcac:	4293      	cmp	r3, r2
 801bcae:	d902      	bls.n	801bcb6 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 801bcb0:	230b      	movs	r3, #11
 801bcb2:	60fb      	str	r3, [r7, #12]
 801bcb4:	e019      	b.n	801bcea <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 801bcb6:	4b14      	ldr	r3, [pc, #80]	@ (801bd08 <dwc2_phy_update+0xc4>)
 801bcb8:	681b      	ldr	r3, [r3, #0]
 801bcba:	4a1a      	ldr	r2, [pc, #104]	@ (801bd24 <dwc2_phy_update+0xe0>)
 801bcbc:	4293      	cmp	r3, r2
 801bcbe:	d302      	bcc.n	801bcc6 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 801bcc0:	230c      	movs	r3, #12
 801bcc2:	60fb      	str	r3, [r7, #12]
 801bcc4:	e011      	b.n	801bcea <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 801bcc6:	4b10      	ldr	r3, [pc, #64]	@ (801bd08 <dwc2_phy_update+0xc4>)
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	4a17      	ldr	r2, [pc, #92]	@ (801bd28 <dwc2_phy_update+0xe4>)
 801bccc:	4293      	cmp	r3, r2
 801bcce:	d302      	bcc.n	801bcd6 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 801bcd0:	230d      	movs	r3, #13
 801bcd2:	60fb      	str	r3, [r7, #12]
 801bcd4:	e009      	b.n	801bcea <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 801bcd6:	4b0c      	ldr	r3, [pc, #48]	@ (801bd08 <dwc2_phy_update+0xc4>)
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	4a14      	ldr	r2, [pc, #80]	@ (801bd2c <dwc2_phy_update+0xe8>)
 801bcdc:	4293      	cmp	r3, r2
 801bcde:	d302      	bcc.n	801bce6 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 801bce0:	230e      	movs	r3, #14
 801bce2:	60fb      	str	r3, [r7, #12]
 801bce4:	e001      	b.n	801bcea <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 801bce6:	230f      	movs	r3, #15
 801bce8:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	68db      	ldr	r3, [r3, #12]
 801bcee:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 801bcf2:	68fb      	ldr	r3, [r7, #12]
 801bcf4:	029b      	lsls	r3, r3, #10
 801bcf6:	431a      	orrs	r2, r3
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	60da      	str	r2, [r3, #12]
  }
}
 801bcfc:	bf00      	nop
 801bcfe:	3714      	adds	r7, #20
 801bd00:	46bd      	mov	sp, r7
 801bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd06:	4770      	bx	lr
 801bd08:	24000000 	.word	0x24000000
 801bd0c:	01e84800 	.word	0x01e84800
 801bd10:	01a39ddf 	.word	0x01a39ddf
 801bd14:	016e3600 	.word	0x016e3600
 801bd18:	014ca43f 	.word	0x014ca43f
 801bd1c:	01312cff 	.word	0x01312cff
 801bd20:	011a499f 	.word	0x011a499f
 801bd24:	01067380 	.word	0x01067380
 801bd28:	00f42400 	.word	0x00f42400
 801bd2c:	00e4e1c0 	.word	0x00e4e1c0

0801bd30 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 801bd30:	b480      	push	{r7}
 801bd32:	b083      	sub	sp, #12
 801bd34:	af00      	add	r7, sp, #0
 801bd36:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	691b      	ldr	r3, [r3, #16]
 801bd3c:	f043 0201 	orr.w	r2, r3, #1
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bd48:	b29b      	uxth	r3, r3
 801bd4a:	f244 2209 	movw	r2, #16905	@ 0x4209
 801bd4e:	4293      	cmp	r3, r2
 801bd50:	d807      	bhi.n	801bd62 <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 801bd52:	bf00      	nop
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	691b      	ldr	r3, [r3, #16]
 801bd58:	f003 0301 	and.w	r3, r3, #1
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d1f9      	bne.n	801bd54 <reset_core+0x24>
 801bd60:	e00e      	b.n	801bd80 <reset_core+0x50>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 801bd62:	bf00      	nop
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	691b      	ldr	r3, [r3, #16]
 801bd68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	d0f9      	beq.n	801bd64 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	691a      	ldr	r2, [r3, #16]
 801bd74:	4b08      	ldr	r3, [pc, #32]	@ (801bd98 <reset_core+0x68>)
 801bd76:	4013      	ands	r3, r2
 801bd78:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 801bd80:	bf00      	nop
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	691b      	ldr	r3, [r3, #16]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	dafb      	bge.n	801bd82 <reset_core+0x52>
}
 801bd8a:	bf00      	nop
 801bd8c:	bf00      	nop
 801bd8e:	370c      	adds	r7, #12
 801bd90:	46bd      	mov	sp, r7
 801bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd96:	4770      	bx	lr
 801bd98:	dffffffe 	.word	0xdffffffe

0801bd9c <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 801bd9c:	b580      	push	{r7, lr}
 801bd9e:	b084      	sub	sp, #16
 801bda0:	af00      	add	r7, sp, #0
 801bda2:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	68db      	ldr	r3, [r3, #12]
 801bda8:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 801bdaa:	68fb      	ldr	r3, [r7, #12]
 801bdac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bdb0:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	68fa      	ldr	r2, [r7, #12]
 801bdb6:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 801bdb8:	2100      	movs	r1, #0
 801bdba:	6878      	ldr	r0, [r7, #4]
 801bdbc:	f7ff ff16 	bl	801bbec <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 801bdc0:	6878      	ldr	r0, [r7, #4]
 801bdc2:	f7ff ffb5 	bl	801bd30 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 801bdc6:	68fb      	ldr	r3, [r7, #12]
 801bdc8:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 801bdcc:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 801bdd4:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	68fa      	ldr	r2, [r7, #12]
 801bdda:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 801bddc:	2100      	movs	r1, #0
 801bdde:	6878      	ldr	r0, [r7, #4]
 801bde0:	f7ff ff30 	bl	801bc44 <dwc2_phy_update>
}
 801bde4:	bf00      	nop
 801bde6:	3710      	adds	r7, #16
 801bde8:	46bd      	mov	sp, r7
 801bdea:	bd80      	pop	{r7, pc}

0801bdec <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 801bdec:	b580      	push	{r7, lr}
 801bdee:	b084      	sub	sp, #16
 801bdf0:	af00      	add	r7, sp, #0
 801bdf2:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	68db      	ldr	r3, [r3, #12]
 801bdf8:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801be00:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801be06:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801be0a:	b2db      	uxtb	r3, r3
 801be0c:	2b02      	cmp	r3, #2
 801be0e:	d114      	bne.n	801be3a <phy_hs_init+0x4e>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 801be10:	68fb      	ldr	r3, [r7, #12]
 801be12:	f043 0310 	orr.w	r3, r3, #16
 801be16:	60fb      	str	r3, [r7, #12]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 801be18:	68fb      	ldr	r3, [r7, #12]
 801be1a:	f023 0308 	bic.w	r3, r3, #8
 801be1e:	60fb      	str	r3, [r7, #12]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 801be20:	68fb      	ldr	r3, [r7, #12]
 801be22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801be26:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 801be2e:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 801be30:	68fb      	ldr	r3, [r7, #12]
 801be32:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 801be36:	60fb      	str	r3, [r7, #12]
 801be38:	e013      	b.n	801be62 <phy_hs_init+0x76>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 801be3a:	68fb      	ldr	r3, [r7, #12]
 801be3c:	f023 0310 	bic.w	r3, r3, #16
 801be40:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.phy_data_width) {
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801be46:	f3c3 3381 	ubfx	r3, r3, #14, #2
 801be4a:	b2db      	uxtb	r3, r3
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d004      	beq.n	801be5a <phy_hs_init+0x6e>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 801be50:	68fb      	ldr	r3, [r7, #12]
 801be52:	f043 0308 	orr.w	r3, r3, #8
 801be56:	60fb      	str	r3, [r7, #12]
 801be58:	e003      	b.n	801be62 <phy_hs_init+0x76>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	f023 0308 	bic.w	r3, r3, #8
 801be60:	60fb      	str	r3, [r7, #12]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	68fa      	ldr	r2, [r7, #12]
 801be66:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801be6c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801be70:	b2db      	uxtb	r3, r3
 801be72:	4619      	mov	r1, r3
 801be74:	6878      	ldr	r0, [r7, #4]
 801be76:	f7ff feb9 	bl	801bbec <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 801be7a:	6878      	ldr	r0, [r7, #4]
 801be7c:	f7ff ff58 	bl	801bd30 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 801be86:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801be8c:	f3c3 3381 	ubfx	r3, r3, #14, #2
 801be90:	b2db      	uxtb	r3, r3
 801be92:	2b00      	cmp	r3, #0
 801be94:	d002      	beq.n	801be9c <phy_hs_init+0xb0>
 801be96:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 801be9a:	e001      	b.n	801bea0 <phy_hs_init+0xb4>
 801be9c:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 801bea0:	68fa      	ldr	r2, [r7, #12]
 801bea2:	4313      	orrs	r3, r2
 801bea4:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	68fa      	ldr	r2, [r7, #12]
 801beaa:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801beb0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801beb4:	b2db      	uxtb	r3, r3
 801beb6:	4619      	mov	r1, r3
 801beb8:	6878      	ldr	r0, [r7, #4]
 801beba:	f7ff fec3 	bl	801bc44 <dwc2_phy_update>
}
 801bebe:	bf00      	nop
 801bec0:	3710      	adds	r7, #16
 801bec2:	46bd      	mov	sp, r7
 801bec4:	bd80      	pop	{r7, pc}
	...

0801bec8 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 801bec8:	b480      	push	{r7}
 801beca:	b085      	sub	sp, #20
 801becc:	af00      	add	r7, sp, #0
 801bece:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801bed4:	4b10      	ldr	r3, [pc, #64]	@ (801bf18 <check_dwc2+0x50>)
 801bed6:	4013      	ands	r3, r2
 801bed8:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	4a0f      	ldr	r2, [pc, #60]	@ (801bf1c <check_dwc2+0x54>)
 801bede:	4293      	cmp	r3, r2
 801bee0:	d012      	beq.n	801bf08 <check_dwc2+0x40>
 801bee2:	68fb      	ldr	r3, [r7, #12]
 801bee4:	4a0e      	ldr	r2, [pc, #56]	@ (801bf20 <check_dwc2+0x58>)
 801bee6:	4293      	cmp	r3, r2
 801bee8:	d00e      	beq.n	801bf08 <check_dwc2+0x40>
 801beea:	68fb      	ldr	r3, [r7, #12]
 801beec:	4a0d      	ldr	r2, [pc, #52]	@ (801bf24 <check_dwc2+0x5c>)
 801beee:	4293      	cmp	r3, r2
 801bef0:	d00a      	beq.n	801bf08 <check_dwc2+0x40>
 801bef2:	4b0d      	ldr	r3, [pc, #52]	@ (801bf28 <check_dwc2+0x60>)
 801bef4:	60bb      	str	r3, [r7, #8]
 801bef6:	68bb      	ldr	r3, [r7, #8]
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	f003 0301 	and.w	r3, r3, #1
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d000      	beq.n	801bf04 <check_dwc2+0x3c>
 801bf02:	be00      	bkpt	0x0000
 801bf04:	2300      	movs	r3, #0
 801bf06:	e000      	b.n	801bf0a <check_dwc2+0x42>
#endif

  return true;
 801bf08:	2301      	movs	r3, #1
}
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	3714      	adds	r7, #20
 801bf0e:	46bd      	mov	sp, r7
 801bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf14:	4770      	bx	lr
 801bf16:	bf00      	nop
 801bf18:	ffff0000 	.word	0xffff0000
 801bf1c:	4f540000 	.word	0x4f540000
 801bf20:	55310000 	.word	0x55310000
 801bf24:	55320000 	.word	0x55320000
 801bf28:	e000edf0 	.word	0xe000edf0

0801bf2c <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 801bf2c:	b480      	push	{r7}
 801bf2e:	b083      	sub	sp, #12
 801bf30:	af00      	add	r7, sp, #0
 801bf32:	6078      	str	r0, [r7, #4]
 801bf34:	460b      	mov	r3, r1
 801bf36:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;

#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 801bf38:	78fb      	ldrb	r3, [r7, #3]
 801bf3a:	2b01      	cmp	r3, #1
 801bf3c:	d101      	bne.n	801bf42 <dwc2_core_is_highspeed+0x16>
    return false;
 801bf3e:	2300      	movs	r3, #0
 801bf40:	e009      	b.n	801bf56 <dwc2_core_is_highspeed+0x2a>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  return dwc2->ghwcfg2_bm.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bf46:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801bf4a:	b2db      	uxtb	r3, r3
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	bf14      	ite	ne
 801bf50:	2301      	movne	r3, #1
 801bf52:	2300      	moveq	r3, #0
 801bf54:	b2db      	uxtb	r3, r3
}
 801bf56:	4618      	mov	r0, r3
 801bf58:	370c      	adds	r7, #12
 801bf5a:	46bd      	mov	sp, r7
 801bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf60:	4770      	bx	lr
	...

0801bf64 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 801bf64:	b580      	push	{r7, lr}
 801bf66:	b088      	sub	sp, #32
 801bf68:	af00      	add	r7, sp, #0
 801bf6a:	4603      	mov	r3, r0
 801bf6c:	71fb      	strb	r3, [r7, #7]
 801bf6e:	460b      	mov	r3, r1
 801bf70:	71bb      	strb	r3, [r7, #6]
 801bf72:	4613      	mov	r3, r2
 801bf74:	717b      	strb	r3, [r7, #5]
 801bf76:	79fb      	ldrb	r3, [r7, #7]
 801bf78:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801bf7a:	7dfb      	ldrb	r3, [r7, #23]
 801bf7c:	2b01      	cmp	r3, #1
 801bf7e:	d901      	bls.n	801bf84 <dwc2_core_init+0x20>
    rhport = 0;
 801bf80:	2300      	movs	r3, #0
 801bf82:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801bf84:	7dfb      	ldrb	r3, [r7, #23]
 801bf86:	4a3b      	ldr	r2, [pc, #236]	@ (801c074 <dwc2_core_init+0x110>)
 801bf88:	011b      	lsls	r3, r3, #4
 801bf8a:	4413      	add	r3, r2
 801bf8c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801bf8e:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 801bf90:	69f8      	ldr	r0, [r7, #28]
 801bf92:	f7ff ff99 	bl	801bec8 <check_dwc2>
 801bf96:	4603      	mov	r3, r0
 801bf98:	f083 0301 	eor.w	r3, r3, #1
 801bf9c:	b2db      	uxtb	r3, r3
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d00a      	beq.n	801bfb8 <dwc2_core_init+0x54>
 801bfa2:	4b35      	ldr	r3, [pc, #212]	@ (801c078 <dwc2_core_init+0x114>)
 801bfa4:	61bb      	str	r3, [r7, #24]
 801bfa6:	69bb      	ldr	r3, [r7, #24]
 801bfa8:	681b      	ldr	r3, [r3, #0]
 801bfaa:	f003 0301 	and.w	r3, r3, #1
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d000      	beq.n	801bfb4 <dwc2_core_init+0x50>
 801bfb2:	be00      	bkpt	0x0000
 801bfb4:	2300      	movs	r3, #0
 801bfb6:	e058      	b.n	801c06a <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 801bfb8:	69fb      	ldr	r3, [r7, #28]
 801bfba:	689b      	ldr	r3, [r3, #8]
 801bfbc:	f023 0201 	bic.w	r2, r3, #1
 801bfc0:	69fb      	ldr	r3, [r7, #28]
 801bfc2:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 801bfc4:	79bb      	ldrb	r3, [r7, #6]
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	d003      	beq.n	801bfd2 <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 801bfca:	69f8      	ldr	r0, [r7, #28]
 801bfcc:	f7ff ff0e 	bl	801bdec <phy_hs_init>
 801bfd0:	e002      	b.n	801bfd8 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 801bfd2:	69f8      	ldr	r0, [r7, #28]
 801bfd4:	f7ff fee2 	bl	801bd9c <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 801bfd8:	69fb      	ldr	r3, [r7, #28]
 801bfda:	68db      	ldr	r3, [r3, #12]
 801bfdc:	f043 0207 	orr.w	r2, r3, #7
 801bfe0:	69fb      	ldr	r3, [r7, #28]
 801bfe2:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 801bfe4:	69fb      	ldr	r3, [r7, #28]
 801bfe6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 801bfea:	f023 020f 	bic.w	r2, r3, #15
 801bfee:	69fb      	ldr	r3, [r7, #28]
 801bff0:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 801bff4:	69fb      	ldr	r3, [r7, #28]
 801bff6:	60fb      	str	r3, [r7, #12]
 801bff8:	2310      	movs	r3, #16
 801bffa:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 801bffc:	7afb      	ldrb	r3, [r7, #11]
 801bffe:	019b      	lsls	r3, r3, #6
 801c000:	f043 0220 	orr.w	r2, r3, #32
 801c004:	68fb      	ldr	r3, [r7, #12]
 801c006:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 801c008:	bf00      	nop
 801c00a:	68fb      	ldr	r3, [r7, #12]
 801c00c:	691b      	ldr	r3, [r3, #16]
 801c00e:	f003 0320 	and.w	r3, r3, #32
 801c012:	2b00      	cmp	r3, #0
 801c014:	d1f9      	bne.n	801c00a <dwc2_core_init+0xa6>
}
 801c016:	bf00      	nop
 801c018:	69fb      	ldr	r3, [r7, #28]
 801c01a:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 801c01c:	693b      	ldr	r3, [r7, #16]
 801c01e:	2210      	movs	r2, #16
 801c020:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 801c022:	bf00      	nop
 801c024:	693b      	ldr	r3, [r7, #16]
 801c026:	691b      	ldr	r3, [r3, #16]
 801c028:	f003 0310 	and.w	r3, r3, #16
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d1f9      	bne.n	801c024 <dwc2_core_init+0xc0>
}
 801c030:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 801c032:	69fb      	ldr	r3, [r7, #28]
 801c034:	f04f 32ff 	mov.w	r2, #4294967295
 801c038:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 801c03a:	69fb      	ldr	r3, [r7, #28]
 801c03c:	f04f 32ff 	mov.w	r2, #4294967295
 801c040:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 801c042:	69fb      	ldr	r3, [r7, #28]
 801c044:	2200      	movs	r2, #0
 801c046:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 801c048:	797b      	ldrb	r3, [r7, #5]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d006      	beq.n	801c05c <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 801c04e:	69fb      	ldr	r3, [r7, #28]
 801c050:	689b      	ldr	r3, [r3, #8]
 801c052:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 801c056:	69fb      	ldr	r3, [r7, #28]
 801c058:	609a      	str	r2, [r3, #8]
 801c05a:	e005      	b.n	801c068 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 801c05c:	69fb      	ldr	r3, [r7, #28]
 801c05e:	699b      	ldr	r3, [r3, #24]
 801c060:	f043 0210 	orr.w	r2, r3, #16
 801c064:	69fb      	ldr	r3, [r7, #28]
 801c066:	619a      	str	r2, [r3, #24]
  }

  return true;
 801c068:	2301      	movs	r3, #1
}
 801c06a:	4618      	mov	r0, r3
 801c06c:	3720      	adds	r7, #32
 801c06e:	46bd      	mov	sp, r7
 801c070:	bd80      	pop	{r7, pc}
 801c072:	bf00      	nop
 801c074:	08033b84 	.word	0x08033b84
 801c078:	e000edf0 	.word	0xe000edf0

0801c07c <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 801c07c:	b480      	push	{r7}
 801c07e:	b08f      	sub	sp, #60	@ 0x3c
 801c080:	af00      	add	r7, sp, #0
 801c082:	60f8      	str	r0, [r7, #12]
 801c084:	60b9      	str	r1, [r7, #8]
 801c086:	4613      	mov	r3, r2
 801c088:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 801c08a:	68fb      	ldr	r3, [r7, #12]
 801c08c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c090:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 801c092:	88fb      	ldrh	r3, [r7, #6]
 801c094:	089b      	lsrs	r3, r3, #2
 801c096:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 801c098:	e00b      	b.n	801c0b2 <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 801c09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	68ba      	ldr	r2, [r7, #8]
 801c0a0:	627a      	str	r2, [r7, #36]	@ 0x24
 801c0a2:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 801c0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0a6:	6a3a      	ldr	r2, [r7, #32]
 801c0a8:	601a      	str	r2, [r3, #0]
}
 801c0aa:	bf00      	nop
    dst += 4;
 801c0ac:	68bb      	ldr	r3, [r7, #8]
 801c0ae:	3304      	adds	r3, #4
 801c0b0:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 801c0b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801c0b4:	1e5a      	subs	r2, r3, #1
 801c0b6:	86fa      	strh	r2, [r7, #54]	@ 0x36
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d1ee      	bne.n	801c09a <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 801c0bc:	88fb      	ldrh	r3, [r7, #6]
 801c0be:	b2db      	uxtb	r3, r3
 801c0c0:	f003 0303 	and.w	r3, r3, #3
 801c0c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 801c0c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d020      	beq.n	801c112 <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 801c0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0d8:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 801c0da:	69fb      	ldr	r3, [r7, #28]
 801c0dc:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 801c0de:	68bb      	ldr	r3, [r7, #8]
 801c0e0:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 801c0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c0e6:	2b01      	cmp	r3, #1
 801c0e8:	d907      	bls.n	801c0fa <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 801c0ea:	68bb      	ldr	r3, [r7, #8]
 801c0ec:	3301      	adds	r3, #1
 801c0ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c0f0:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 801c0f2:	69ba      	ldr	r2, [r7, #24]
 801c0f4:	0a12      	lsrs	r2, r2, #8
 801c0f6:	b2d2      	uxtb	r2, r2
 801c0f8:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 801c0fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c0fe:	2b02      	cmp	r3, #2
 801c100:	d907      	bls.n	801c112 <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 801c102:	68bb      	ldr	r3, [r7, #8]
 801c104:	3302      	adds	r3, #2
 801c106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c108:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 801c10a:	697a      	ldr	r2, [r7, #20]
 801c10c:	0c12      	lsrs	r2, r2, #16
 801c10e:	b2d2      	uxtb	r2, r2
 801c110:	701a      	strb	r2, [r3, #0]
    }
  }
}
 801c112:	bf00      	nop
 801c114:	373c      	adds	r7, #60	@ 0x3c
 801c116:	46bd      	mov	sp, r7
 801c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c11c:	4770      	bx	lr

0801c11e <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 801c11e:	b480      	push	{r7}
 801c120:	b08b      	sub	sp, #44	@ 0x2c
 801c122:	af00      	add	r7, sp, #0
 801c124:	60f8      	str	r0, [r7, #12]
 801c126:	607a      	str	r2, [r7, #4]
 801c128:	461a      	mov	r2, r3
 801c12a:	460b      	mov	r3, r1
 801c12c:	72fb      	strb	r3, [r7, #11]
 801c12e:	4613      	mov	r3, r2
 801c130:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 801c132:	7afb      	ldrb	r3, [r7, #11]
 801c134:	3301      	adds	r3, #1
 801c136:	031b      	lsls	r3, r3, #12
 801c138:	68fa      	ldr	r2, [r7, #12]
 801c13a:	4413      	add	r3, r2
 801c13c:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 801c13e:	893b      	ldrh	r3, [r7, #8]
 801c140:	089b      	lsrs	r3, r3, #2
 801c142:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 801c144:	e008      	b.n	801c158 <dfifo_write_packet+0x3a>
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 801c14a:	697b      	ldr	r3, [r7, #20]
 801c14c:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 801c14e:	69fb      	ldr	r3, [r7, #28]
 801c150:	601a      	str	r2, [r3, #0]
    src += 4;
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	3304      	adds	r3, #4
 801c156:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 801c158:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c15a:	1e5a      	subs	r2, r3, #1
 801c15c:	84fa      	strh	r2, [r7, #38]	@ 0x26
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d1f1      	bne.n	801c146 <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 801c162:	893b      	ldrh	r3, [r7, #8]
 801c164:	b2db      	uxtb	r3, r3
 801c166:	f003 0303 	and.w	r3, r3, #3
 801c16a:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 801c16c:	7efb      	ldrb	r3, [r7, #27]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d019      	beq.n	801c1a6 <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	781b      	ldrb	r3, [r3, #0]
 801c176:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 801c178:	7efb      	ldrb	r3, [r7, #27]
 801c17a:	2b01      	cmp	r3, #1
 801c17c:	d906      	bls.n	801c18c <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	3301      	adds	r3, #1
 801c182:	781b      	ldrb	r3, [r3, #0]
 801c184:	021b      	lsls	r3, r3, #8
 801c186:	6a3a      	ldr	r2, [r7, #32]
 801c188:	4313      	orrs	r3, r2
 801c18a:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 801c18c:	7efb      	ldrb	r3, [r7, #27]
 801c18e:	2b02      	cmp	r3, #2
 801c190:	d906      	bls.n	801c1a0 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	3302      	adds	r3, #2
 801c196:	781b      	ldrb	r3, [r3, #0]
 801c198:	041b      	lsls	r3, r3, #16
 801c19a:	6a3a      	ldr	r2, [r7, #32]
 801c19c:	4313      	orrs	r3, r2
 801c19e:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 801c1a0:	69fb      	ldr	r3, [r7, #28]
 801c1a2:	6a3a      	ldr	r2, [r7, #32]
 801c1a4:	601a      	str	r2, [r3, #0]
  }
}
 801c1a6:	bf00      	nop
 801c1a8:	372c      	adds	r7, #44	@ 0x2c
 801c1aa:	46bd      	mov	sp, r7
 801c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1b0:	4770      	bx	lr

0801c1b2 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 801c1b2:	b480      	push	{r7}
 801c1b4:	b085      	sub	sp, #20
 801c1b6:	af00      	add	r7, sp, #0
 801c1b8:	6078      	str	r0, [r7, #4]
 801c1ba:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	781b      	ldrb	r3, [r3, #0]
 801c1c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c1c4:	b2db      	uxtb	r3, r3
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d106      	bne.n	801c1d8 <tu_edpt_claim+0x26>
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	781b      	ldrb	r3, [r3, #0]
 801c1ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c1d2:	b2db      	uxtb	r3, r3
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	d001      	beq.n	801c1dc <tu_edpt_claim+0x2a>
 801c1d8:	2300      	movs	r3, #0
 801c1da:	e01e      	b.n	801c21a <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	781b      	ldrb	r3, [r3, #0]
 801c1e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c1e4:	b2db      	uxtb	r3, r3
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d108      	bne.n	801c1fc <tu_edpt_claim+0x4a>
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	781b      	ldrb	r3, [r3, #0]
 801c1ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c1f2:	b2db      	uxtb	r3, r3
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	d101      	bne.n	801c1fc <tu_edpt_claim+0x4a>
 801c1f8:	2301      	movs	r3, #1
 801c1fa:	e000      	b.n	801c1fe <tu_edpt_claim+0x4c>
 801c1fc:	2300      	movs	r3, #0
 801c1fe:	73fb      	strb	r3, [r7, #15]
 801c200:	7bfb      	ldrb	r3, [r7, #15]
 801c202:	f003 0301 	and.w	r3, r3, #1
 801c206:	73fb      	strb	r3, [r7, #15]
  if (available) {
 801c208:	7bfb      	ldrb	r3, [r7, #15]
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d004      	beq.n	801c218 <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 801c20e:	687a      	ldr	r2, [r7, #4]
 801c210:	7813      	ldrb	r3, [r2, #0]
 801c212:	f043 0304 	orr.w	r3, r3, #4
 801c216:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 801c218:	7bfb      	ldrb	r3, [r7, #15]
}
 801c21a:	4618      	mov	r0, r3
 801c21c:	3714      	adds	r7, #20
 801c21e:	46bd      	mov	sp, r7
 801c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c224:	4770      	bx	lr

0801c226 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 801c226:	b480      	push	{r7}
 801c228:	b085      	sub	sp, #20
 801c22a:	af00      	add	r7, sp, #0
 801c22c:	6078      	str	r0, [r7, #4]
 801c22e:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	781b      	ldrb	r3, [r3, #0]
 801c234:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c238:	b2db      	uxtb	r3, r3
 801c23a:	2b01      	cmp	r3, #1
 801c23c:	d108      	bne.n	801c250 <tu_edpt_release+0x2a>
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	781b      	ldrb	r3, [r3, #0]
 801c242:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c246:	b2db      	uxtb	r3, r3
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d101      	bne.n	801c250 <tu_edpt_release+0x2a>
 801c24c:	2301      	movs	r3, #1
 801c24e:	e000      	b.n	801c252 <tu_edpt_release+0x2c>
 801c250:	2300      	movs	r3, #0
 801c252:	73fb      	strb	r3, [r7, #15]
 801c254:	7bfb      	ldrb	r3, [r7, #15]
 801c256:	f003 0301 	and.w	r3, r3, #1
 801c25a:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 801c25c:	7bfb      	ldrb	r3, [r7, #15]
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d004      	beq.n	801c26c <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 801c262:	687a      	ldr	r2, [r7, #4]
 801c264:	7813      	ldrb	r3, [r2, #0]
 801c266:	f023 0304 	bic.w	r3, r3, #4
 801c26a:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 801c26c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c26e:	4618      	mov	r0, r3
 801c270:	3714      	adds	r7, #20
 801c272:	46bd      	mov	sp, r7
 801c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c278:	4770      	bx	lr
	...

0801c27c <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed) {
 801c27c:	b480      	push	{r7}
 801c27e:	b08b      	sub	sp, #44	@ 0x2c
 801c280:	af00      	add	r7, sp, #0
 801c282:	6078      	str	r0, [r7, #4]
 801c284:	460b      	mov	r3, r1
 801c286:	70fb      	strb	r3, [r7, #3]
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	889b      	ldrh	r3, [r3, #4]
 801c290:	b29b      	uxth	r3, r3
 801c292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801c296:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 801c298:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	78db      	ldrb	r3, [r3, #3]
 801c29e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801c2a2:	b2db      	uxtb	r3, r3
 801c2a4:	2b03      	cmp	r3, #3
 801c2a6:	d03e      	beq.n	801c326 <tu_edpt_validate+0xaa>
 801c2a8:	2b03      	cmp	r3, #3
 801c2aa:	dc53      	bgt.n	801c354 <tu_edpt_validate+0xd8>
 801c2ac:	2b01      	cmp	r3, #1
 801c2ae:	d002      	beq.n	801c2b6 <tu_edpt_validate+0x3a>
 801c2b0:	2b02      	cmp	r3, #2
 801c2b2:	d018      	beq.n	801c2e6 <tu_edpt_validate+0x6a>
 801c2b4:	e04e      	b.n	801c354 <tu_edpt_validate+0xd8>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 801c2b6:	78fb      	ldrb	r3, [r7, #3]
 801c2b8:	2b02      	cmp	r3, #2
 801c2ba:	d102      	bne.n	801c2c2 <tu_edpt_validate+0x46>
 801c2bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c2c0:	e001      	b.n	801c2c6 <tu_edpt_validate+0x4a>
 801c2c2:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801c2c6:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 801c2c8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c2ca:	8afb      	ldrh	r3, [r7, #22]
 801c2cc:	429a      	cmp	r2, r3
 801c2ce:	d943      	bls.n	801c358 <tu_edpt_validate+0xdc>
 801c2d0:	4b27      	ldr	r3, [pc, #156]	@ (801c370 <tu_edpt_validate+0xf4>)
 801c2d2:	613b      	str	r3, [r7, #16]
 801c2d4:	693b      	ldr	r3, [r7, #16]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	f003 0301 	and.w	r3, r3, #1
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d000      	beq.n	801c2e2 <tu_edpt_validate+0x66>
 801c2e0:	be00      	bkpt	0x0000
 801c2e2:	2300      	movs	r3, #0
 801c2e4:	e03e      	b.n	801c364 <tu_edpt_validate+0xe8>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 801c2e6:	78fb      	ldrb	r3, [r7, #3]
 801c2e8:	2b02      	cmp	r3, #2
 801c2ea:	d10e      	bne.n	801c30a <tu_edpt_validate+0x8e>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 801c2ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c2ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c2f2:	d033      	beq.n	801c35c <tu_edpt_validate+0xe0>
 801c2f4:	4b1e      	ldr	r3, [pc, #120]	@ (801c370 <tu_edpt_validate+0xf4>)
 801c2f6:	61bb      	str	r3, [r7, #24]
 801c2f8:	69bb      	ldr	r3, [r7, #24]
 801c2fa:	681b      	ldr	r3, [r3, #0]
 801c2fc:	f003 0301 	and.w	r3, r3, #1
 801c300:	2b00      	cmp	r3, #0
 801c302:	d000      	beq.n	801c306 <tu_edpt_validate+0x8a>
 801c304:	be00      	bkpt	0x0000
 801c306:	2300      	movs	r3, #0
 801c308:	e02c      	b.n	801c364 <tu_edpt_validate+0xe8>
      } else {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 801c30a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c30c:	2b40      	cmp	r3, #64	@ 0x40
 801c30e:	d925      	bls.n	801c35c <tu_edpt_validate+0xe0>
 801c310:	4b17      	ldr	r3, [pc, #92]	@ (801c370 <tu_edpt_validate+0xf4>)
 801c312:	61fb      	str	r3, [r7, #28]
 801c314:	69fb      	ldr	r3, [r7, #28]
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	f003 0301 	and.w	r3, r3, #1
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d000      	beq.n	801c322 <tu_edpt_validate+0xa6>
 801c320:	be00      	bkpt	0x0000
 801c322:	2300      	movs	r3, #0
 801c324:	e01e      	b.n	801c364 <tu_edpt_validate+0xe8>
      }
      break;

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 801c326:	78fb      	ldrb	r3, [r7, #3]
 801c328:	2b02      	cmp	r3, #2
 801c32a:	d102      	bne.n	801c332 <tu_edpt_validate+0xb6>
 801c32c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c330:	e000      	b.n	801c334 <tu_edpt_validate+0xb8>
 801c332:	2340      	movs	r3, #64	@ 0x40
 801c334:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 801c336:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c338:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c33a:	429a      	cmp	r2, r3
 801c33c:	d910      	bls.n	801c360 <tu_edpt_validate+0xe4>
 801c33e:	4b0c      	ldr	r3, [pc, #48]	@ (801c370 <tu_edpt_validate+0xf4>)
 801c340:	623b      	str	r3, [r7, #32]
 801c342:	6a3b      	ldr	r3, [r7, #32]
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	f003 0301 	and.w	r3, r3, #1
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d000      	beq.n	801c350 <tu_edpt_validate+0xd4>
 801c34e:	be00      	bkpt	0x0000
 801c350:	2300      	movs	r3, #0
 801c352:	e007      	b.n	801c364 <tu_edpt_validate+0xe8>
      break;
    }

    default:
      return false;
 801c354:	2300      	movs	r3, #0
 801c356:	e005      	b.n	801c364 <tu_edpt_validate+0xe8>
      break;
 801c358:	bf00      	nop
 801c35a:	e002      	b.n	801c362 <tu_edpt_validate+0xe6>
      break;
 801c35c:	bf00      	nop
 801c35e:	e000      	b.n	801c362 <tu_edpt_validate+0xe6>
      break;
 801c360:	bf00      	nop
  }

  return true;
 801c362:	2301      	movs	r3, #1
}
 801c364:	4618      	mov	r0, r3
 801c366:	372c      	adds	r7, #44	@ 0x2c
 801c368:	46bd      	mov	sp, r7
 801c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c36e:	4770      	bx	lr
 801c370:	e000edf0 	.word	0xe000edf0

0801c374 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 801c374:	b480      	push	{r7}
 801c376:	b08d      	sub	sp, #52	@ 0x34
 801c378:	af00      	add	r7, sp, #0
 801c37a:	60f8      	str	r0, [r7, #12]
 801c37c:	60b9      	str	r1, [r7, #8]
 801c37e:	4611      	mov	r1, r2
 801c380:	461a      	mov	r2, r3
 801c382:	460b      	mov	r3, r1
 801c384:	80fb      	strh	r3, [r7, #6]
 801c386:	4613      	mov	r3, r2
 801c388:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 801c38a:	68bb      	ldr	r3, [r7, #8]
 801c38c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 801c38e:	88fb      	ldrh	r3, [r7, #6]
 801c390:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c392:	4413      	add	r3, r2
 801c394:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 801c396:	e027      	b.n	801c3e8 <tu_edpt_bind_driver+0x74>
 801c398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c39a:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 801c39c:	6a3b      	ldr	r3, [r7, #32]
 801c39e:	3301      	adds	r3, #1
 801c3a0:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 801c3a2:	2b05      	cmp	r3, #5
 801c3a4:	d116      	bne.n	801c3d4 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 801c3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3a8:	789b      	ldrb	r3, [r3, #2]
 801c3aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c3ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c3b2:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801c3b4:	7fbb      	ldrb	r3, [r7, #30]
 801c3b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c3ba:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 801c3bc:	005b      	lsls	r3, r3, #1
 801c3be:	68fa      	ldr	r2, [r7, #12]
 801c3c0:	4413      	add	r3, r2
 801c3c2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801c3c6:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801c3c8:	7ffa      	ldrb	r2, [r7, #31]
 801c3ca:	09d2      	lsrs	r2, r2, #7
 801c3cc:	b2d2      	uxtb	r2, r2
 801c3ce:	4611      	mov	r1, r2
 801c3d0:	797a      	ldrb	r2, [r7, #5]
 801c3d2:	545a      	strb	r2, [r3, r1]
 801c3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3d6:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 801c3d8:	69bb      	ldr	r3, [r7, #24]
 801c3da:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 801c3dc:	697b      	ldr	r3, [r7, #20]
 801c3de:	781b      	ldrb	r3, [r3, #0]
 801c3e0:	461a      	mov	r2, r3
 801c3e2:	697b      	ldr	r3, [r7, #20]
 801c3e4:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 801c3e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 801c3e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3ec:	429a      	cmp	r2, r3
 801c3ee:	d3d3      	bcc.n	801c398 <tu_edpt_bind_driver+0x24>
  }
}
 801c3f0:	bf00      	nop
 801c3f2:	bf00      	nop
 801c3f4:	3734      	adds	r7, #52	@ 0x34
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3fc:	4770      	bx	lr
	...

0801c400 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801c400:	b580      	push	{r7, lr}
 801c402:	b084      	sub	sp, #16
 801c404:	af00      	add	r7, sp, #0
 801c406:	4603      	mov	r3, r0
 801c408:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801c40a:	79fb      	ldrb	r3, [r7, #7]
 801c40c:	4a08      	ldr	r2, [pc, #32]	@ (801c430 <disk_status+0x30>)
 801c40e:	009b      	lsls	r3, r3, #2
 801c410:	4413      	add	r3, r2
 801c412:	685b      	ldr	r3, [r3, #4]
 801c414:	685b      	ldr	r3, [r3, #4]
 801c416:	79fa      	ldrb	r2, [r7, #7]
 801c418:	4905      	ldr	r1, [pc, #20]	@ (801c430 <disk_status+0x30>)
 801c41a:	440a      	add	r2, r1
 801c41c:	7a12      	ldrb	r2, [r2, #8]
 801c41e:	4610      	mov	r0, r2
 801c420:	4798      	blx	r3
 801c422:	4603      	mov	r3, r0
 801c424:	73fb      	strb	r3, [r7, #15]
  return stat;
 801c426:	7bfb      	ldrb	r3, [r7, #15]
}
 801c428:	4618      	mov	r0, r3
 801c42a:	3710      	adds	r7, #16
 801c42c:	46bd      	mov	sp, r7
 801c42e:	bd80      	pop	{r7, pc}
 801c430:	24008c90 	.word	0x24008c90

0801c434 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801c434:	b580      	push	{r7, lr}
 801c436:	b084      	sub	sp, #16
 801c438:	af00      	add	r7, sp, #0
 801c43a:	4603      	mov	r3, r0
 801c43c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801c43e:	2300      	movs	r3, #0
 801c440:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801c442:	79fb      	ldrb	r3, [r7, #7]
 801c444:	4a0e      	ldr	r2, [pc, #56]	@ (801c480 <disk_initialize+0x4c>)
 801c446:	5cd3      	ldrb	r3, [r2, r3]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d114      	bne.n	801c476 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801c44c:	79fb      	ldrb	r3, [r7, #7]
 801c44e:	4a0c      	ldr	r2, [pc, #48]	@ (801c480 <disk_initialize+0x4c>)
 801c450:	009b      	lsls	r3, r3, #2
 801c452:	4413      	add	r3, r2
 801c454:	685b      	ldr	r3, [r3, #4]
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	79fa      	ldrb	r2, [r7, #7]
 801c45a:	4909      	ldr	r1, [pc, #36]	@ (801c480 <disk_initialize+0x4c>)
 801c45c:	440a      	add	r2, r1
 801c45e:	7a12      	ldrb	r2, [r2, #8]
 801c460:	4610      	mov	r0, r2
 801c462:	4798      	blx	r3
 801c464:	4603      	mov	r3, r0
 801c466:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801c468:	7bfb      	ldrb	r3, [r7, #15]
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d103      	bne.n	801c476 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801c46e:	79fb      	ldrb	r3, [r7, #7]
 801c470:	4a03      	ldr	r2, [pc, #12]	@ (801c480 <disk_initialize+0x4c>)
 801c472:	2101      	movs	r1, #1
 801c474:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801c476:	7bfb      	ldrb	r3, [r7, #15]
}
 801c478:	4618      	mov	r0, r3
 801c47a:	3710      	adds	r7, #16
 801c47c:	46bd      	mov	sp, r7
 801c47e:	bd80      	pop	{r7, pc}
 801c480:	24008c90 	.word	0x24008c90

0801c484 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801c484:	b590      	push	{r4, r7, lr}
 801c486:	b087      	sub	sp, #28
 801c488:	af00      	add	r7, sp, #0
 801c48a:	60b9      	str	r1, [r7, #8]
 801c48c:	607a      	str	r2, [r7, #4]
 801c48e:	603b      	str	r3, [r7, #0]
 801c490:	4603      	mov	r3, r0
 801c492:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801c494:	7bfb      	ldrb	r3, [r7, #15]
 801c496:	4a0a      	ldr	r2, [pc, #40]	@ (801c4c0 <disk_read+0x3c>)
 801c498:	009b      	lsls	r3, r3, #2
 801c49a:	4413      	add	r3, r2
 801c49c:	685b      	ldr	r3, [r3, #4]
 801c49e:	689c      	ldr	r4, [r3, #8]
 801c4a0:	7bfb      	ldrb	r3, [r7, #15]
 801c4a2:	4a07      	ldr	r2, [pc, #28]	@ (801c4c0 <disk_read+0x3c>)
 801c4a4:	4413      	add	r3, r2
 801c4a6:	7a18      	ldrb	r0, [r3, #8]
 801c4a8:	683b      	ldr	r3, [r7, #0]
 801c4aa:	687a      	ldr	r2, [r7, #4]
 801c4ac:	68b9      	ldr	r1, [r7, #8]
 801c4ae:	47a0      	blx	r4
 801c4b0:	4603      	mov	r3, r0
 801c4b2:	75fb      	strb	r3, [r7, #23]
  return res;
 801c4b4:	7dfb      	ldrb	r3, [r7, #23]
}
 801c4b6:	4618      	mov	r0, r3
 801c4b8:	371c      	adds	r7, #28
 801c4ba:	46bd      	mov	sp, r7
 801c4bc:	bd90      	pop	{r4, r7, pc}
 801c4be:	bf00      	nop
 801c4c0:	24008c90 	.word	0x24008c90

0801c4c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801c4c4:	b590      	push	{r4, r7, lr}
 801c4c6:	b087      	sub	sp, #28
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	60b9      	str	r1, [r7, #8]
 801c4cc:	607a      	str	r2, [r7, #4]
 801c4ce:	603b      	str	r3, [r7, #0]
 801c4d0:	4603      	mov	r3, r0
 801c4d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801c4d4:	7bfb      	ldrb	r3, [r7, #15]
 801c4d6:	4a0a      	ldr	r2, [pc, #40]	@ (801c500 <disk_write+0x3c>)
 801c4d8:	009b      	lsls	r3, r3, #2
 801c4da:	4413      	add	r3, r2
 801c4dc:	685b      	ldr	r3, [r3, #4]
 801c4de:	68dc      	ldr	r4, [r3, #12]
 801c4e0:	7bfb      	ldrb	r3, [r7, #15]
 801c4e2:	4a07      	ldr	r2, [pc, #28]	@ (801c500 <disk_write+0x3c>)
 801c4e4:	4413      	add	r3, r2
 801c4e6:	7a18      	ldrb	r0, [r3, #8]
 801c4e8:	683b      	ldr	r3, [r7, #0]
 801c4ea:	687a      	ldr	r2, [r7, #4]
 801c4ec:	68b9      	ldr	r1, [r7, #8]
 801c4ee:	47a0      	blx	r4
 801c4f0:	4603      	mov	r3, r0
 801c4f2:	75fb      	strb	r3, [r7, #23]
  return res;
 801c4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	371c      	adds	r7, #28
 801c4fa:	46bd      	mov	sp, r7
 801c4fc:	bd90      	pop	{r4, r7, pc}
 801c4fe:	bf00      	nop
 801c500:	24008c90 	.word	0x24008c90

0801c504 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801c504:	b580      	push	{r7, lr}
 801c506:	b084      	sub	sp, #16
 801c508:	af00      	add	r7, sp, #0
 801c50a:	4603      	mov	r3, r0
 801c50c:	603a      	str	r2, [r7, #0]
 801c50e:	71fb      	strb	r3, [r7, #7]
 801c510:	460b      	mov	r3, r1
 801c512:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801c514:	79fb      	ldrb	r3, [r7, #7]
 801c516:	4a09      	ldr	r2, [pc, #36]	@ (801c53c <disk_ioctl+0x38>)
 801c518:	009b      	lsls	r3, r3, #2
 801c51a:	4413      	add	r3, r2
 801c51c:	685b      	ldr	r3, [r3, #4]
 801c51e:	691b      	ldr	r3, [r3, #16]
 801c520:	79fa      	ldrb	r2, [r7, #7]
 801c522:	4906      	ldr	r1, [pc, #24]	@ (801c53c <disk_ioctl+0x38>)
 801c524:	440a      	add	r2, r1
 801c526:	7a10      	ldrb	r0, [r2, #8]
 801c528:	79b9      	ldrb	r1, [r7, #6]
 801c52a:	683a      	ldr	r2, [r7, #0]
 801c52c:	4798      	blx	r3
 801c52e:	4603      	mov	r3, r0
 801c530:	73fb      	strb	r3, [r7, #15]
  return res;
 801c532:	7bfb      	ldrb	r3, [r7, #15]
}
 801c534:	4618      	mov	r0, r3
 801c536:	3710      	adds	r7, #16
 801c538:	46bd      	mov	sp, r7
 801c53a:	bd80      	pop	{r7, pc}
 801c53c:	24008c90 	.word	0x24008c90

0801c540 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801c540:	b480      	push	{r7}
 801c542:	b085      	sub	sp, #20
 801c544:	af00      	add	r7, sp, #0
 801c546:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	3301      	adds	r3, #1
 801c54c:	781b      	ldrb	r3, [r3, #0]
 801c54e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801c550:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801c554:	021b      	lsls	r3, r3, #8
 801c556:	b21a      	sxth	r2, r3
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	781b      	ldrb	r3, [r3, #0]
 801c55c:	b21b      	sxth	r3, r3
 801c55e:	4313      	orrs	r3, r2
 801c560:	b21b      	sxth	r3, r3
 801c562:	81fb      	strh	r3, [r7, #14]
	return rv;
 801c564:	89fb      	ldrh	r3, [r7, #14]
}
 801c566:	4618      	mov	r0, r3
 801c568:	3714      	adds	r7, #20
 801c56a:	46bd      	mov	sp, r7
 801c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c570:	4770      	bx	lr

0801c572 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801c572:	b480      	push	{r7}
 801c574:	b085      	sub	sp, #20
 801c576:	af00      	add	r7, sp, #0
 801c578:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	3303      	adds	r3, #3
 801c57e:	781b      	ldrb	r3, [r3, #0]
 801c580:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	021b      	lsls	r3, r3, #8
 801c586:	687a      	ldr	r2, [r7, #4]
 801c588:	3202      	adds	r2, #2
 801c58a:	7812      	ldrb	r2, [r2, #0]
 801c58c:	4313      	orrs	r3, r2
 801c58e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	021b      	lsls	r3, r3, #8
 801c594:	687a      	ldr	r2, [r7, #4]
 801c596:	3201      	adds	r2, #1
 801c598:	7812      	ldrb	r2, [r2, #0]
 801c59a:	4313      	orrs	r3, r2
 801c59c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801c59e:	68fb      	ldr	r3, [r7, #12]
 801c5a0:	021b      	lsls	r3, r3, #8
 801c5a2:	687a      	ldr	r2, [r7, #4]
 801c5a4:	7812      	ldrb	r2, [r2, #0]
 801c5a6:	4313      	orrs	r3, r2
 801c5a8:	60fb      	str	r3, [r7, #12]
	return rv;
 801c5aa:	68fb      	ldr	r3, [r7, #12]
}
 801c5ac:	4618      	mov	r0, r3
 801c5ae:	3714      	adds	r7, #20
 801c5b0:	46bd      	mov	sp, r7
 801c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5b6:	4770      	bx	lr

0801c5b8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801c5b8:	b480      	push	{r7}
 801c5ba:	b083      	sub	sp, #12
 801c5bc:	af00      	add	r7, sp, #0
 801c5be:	6078      	str	r0, [r7, #4]
 801c5c0:	460b      	mov	r3, r1
 801c5c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	1c5a      	adds	r2, r3, #1
 801c5c8:	607a      	str	r2, [r7, #4]
 801c5ca:	887a      	ldrh	r2, [r7, #2]
 801c5cc:	b2d2      	uxtb	r2, r2
 801c5ce:	701a      	strb	r2, [r3, #0]
 801c5d0:	887b      	ldrh	r3, [r7, #2]
 801c5d2:	0a1b      	lsrs	r3, r3, #8
 801c5d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	1c5a      	adds	r2, r3, #1
 801c5da:	607a      	str	r2, [r7, #4]
 801c5dc:	887a      	ldrh	r2, [r7, #2]
 801c5de:	b2d2      	uxtb	r2, r2
 801c5e0:	701a      	strb	r2, [r3, #0]
}
 801c5e2:	bf00      	nop
 801c5e4:	370c      	adds	r7, #12
 801c5e6:	46bd      	mov	sp, r7
 801c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5ec:	4770      	bx	lr

0801c5ee <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801c5ee:	b480      	push	{r7}
 801c5f0:	b083      	sub	sp, #12
 801c5f2:	af00      	add	r7, sp, #0
 801c5f4:	6078      	str	r0, [r7, #4]
 801c5f6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	1c5a      	adds	r2, r3, #1
 801c5fc:	607a      	str	r2, [r7, #4]
 801c5fe:	683a      	ldr	r2, [r7, #0]
 801c600:	b2d2      	uxtb	r2, r2
 801c602:	701a      	strb	r2, [r3, #0]
 801c604:	683b      	ldr	r3, [r7, #0]
 801c606:	0a1b      	lsrs	r3, r3, #8
 801c608:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	1c5a      	adds	r2, r3, #1
 801c60e:	607a      	str	r2, [r7, #4]
 801c610:	683a      	ldr	r2, [r7, #0]
 801c612:	b2d2      	uxtb	r2, r2
 801c614:	701a      	strb	r2, [r3, #0]
 801c616:	683b      	ldr	r3, [r7, #0]
 801c618:	0a1b      	lsrs	r3, r3, #8
 801c61a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	1c5a      	adds	r2, r3, #1
 801c620:	607a      	str	r2, [r7, #4]
 801c622:	683a      	ldr	r2, [r7, #0]
 801c624:	b2d2      	uxtb	r2, r2
 801c626:	701a      	strb	r2, [r3, #0]
 801c628:	683b      	ldr	r3, [r7, #0]
 801c62a:	0a1b      	lsrs	r3, r3, #8
 801c62c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	1c5a      	adds	r2, r3, #1
 801c632:	607a      	str	r2, [r7, #4]
 801c634:	683a      	ldr	r2, [r7, #0]
 801c636:	b2d2      	uxtb	r2, r2
 801c638:	701a      	strb	r2, [r3, #0]
}
 801c63a:	bf00      	nop
 801c63c:	370c      	adds	r7, #12
 801c63e:	46bd      	mov	sp, r7
 801c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c644:	4770      	bx	lr

0801c646 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801c646:	b480      	push	{r7}
 801c648:	b087      	sub	sp, #28
 801c64a:	af00      	add	r7, sp, #0
 801c64c:	60f8      	str	r0, [r7, #12]
 801c64e:	60b9      	str	r1, [r7, #8]
 801c650:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801c652:	68fb      	ldr	r3, [r7, #12]
 801c654:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801c656:	68bb      	ldr	r3, [r7, #8]
 801c658:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d00d      	beq.n	801c67c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801c660:	693a      	ldr	r2, [r7, #16]
 801c662:	1c53      	adds	r3, r2, #1
 801c664:	613b      	str	r3, [r7, #16]
 801c666:	697b      	ldr	r3, [r7, #20]
 801c668:	1c59      	adds	r1, r3, #1
 801c66a:	6179      	str	r1, [r7, #20]
 801c66c:	7812      	ldrb	r2, [r2, #0]
 801c66e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	3b01      	subs	r3, #1
 801c674:	607b      	str	r3, [r7, #4]
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d1f1      	bne.n	801c660 <mem_cpy+0x1a>
	}
}
 801c67c:	bf00      	nop
 801c67e:	371c      	adds	r7, #28
 801c680:	46bd      	mov	sp, r7
 801c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c686:	4770      	bx	lr

0801c688 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801c688:	b480      	push	{r7}
 801c68a:	b087      	sub	sp, #28
 801c68c:	af00      	add	r7, sp, #0
 801c68e:	60f8      	str	r0, [r7, #12]
 801c690:	60b9      	str	r1, [r7, #8]
 801c692:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801c694:	68fb      	ldr	r3, [r7, #12]
 801c696:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801c698:	697b      	ldr	r3, [r7, #20]
 801c69a:	1c5a      	adds	r2, r3, #1
 801c69c:	617a      	str	r2, [r7, #20]
 801c69e:	68ba      	ldr	r2, [r7, #8]
 801c6a0:	b2d2      	uxtb	r2, r2
 801c6a2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	3b01      	subs	r3, #1
 801c6a8:	607b      	str	r3, [r7, #4]
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d1f3      	bne.n	801c698 <mem_set+0x10>
}
 801c6b0:	bf00      	nop
 801c6b2:	bf00      	nop
 801c6b4:	371c      	adds	r7, #28
 801c6b6:	46bd      	mov	sp, r7
 801c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6bc:	4770      	bx	lr

0801c6be <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801c6be:	b480      	push	{r7}
 801c6c0:	b089      	sub	sp, #36	@ 0x24
 801c6c2:	af00      	add	r7, sp, #0
 801c6c4:	60f8      	str	r0, [r7, #12]
 801c6c6:	60b9      	str	r1, [r7, #8]
 801c6c8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	61fb      	str	r3, [r7, #28]
 801c6ce:	68bb      	ldr	r3, [r7, #8]
 801c6d0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801c6d2:	2300      	movs	r3, #0
 801c6d4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801c6d6:	69fb      	ldr	r3, [r7, #28]
 801c6d8:	1c5a      	adds	r2, r3, #1
 801c6da:	61fa      	str	r2, [r7, #28]
 801c6dc:	781b      	ldrb	r3, [r3, #0]
 801c6de:	4619      	mov	r1, r3
 801c6e0:	69bb      	ldr	r3, [r7, #24]
 801c6e2:	1c5a      	adds	r2, r3, #1
 801c6e4:	61ba      	str	r2, [r7, #24]
 801c6e6:	781b      	ldrb	r3, [r3, #0]
 801c6e8:	1acb      	subs	r3, r1, r3
 801c6ea:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	3b01      	subs	r3, #1
 801c6f0:	607b      	str	r3, [r7, #4]
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	d002      	beq.n	801c6fe <mem_cmp+0x40>
 801c6f8:	697b      	ldr	r3, [r7, #20]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d0eb      	beq.n	801c6d6 <mem_cmp+0x18>

	return r;
 801c6fe:	697b      	ldr	r3, [r7, #20]
}
 801c700:	4618      	mov	r0, r3
 801c702:	3724      	adds	r7, #36	@ 0x24
 801c704:	46bd      	mov	sp, r7
 801c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c70a:	4770      	bx	lr

0801c70c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801c70c:	b480      	push	{r7}
 801c70e:	b083      	sub	sp, #12
 801c710:	af00      	add	r7, sp, #0
 801c712:	6078      	str	r0, [r7, #4]
 801c714:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801c716:	e002      	b.n	801c71e <chk_chr+0x12>
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	3301      	adds	r3, #1
 801c71c:	607b      	str	r3, [r7, #4]
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	781b      	ldrb	r3, [r3, #0]
 801c722:	2b00      	cmp	r3, #0
 801c724:	d005      	beq.n	801c732 <chk_chr+0x26>
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	781b      	ldrb	r3, [r3, #0]
 801c72a:	461a      	mov	r2, r3
 801c72c:	683b      	ldr	r3, [r7, #0]
 801c72e:	4293      	cmp	r3, r2
 801c730:	d1f2      	bne.n	801c718 <chk_chr+0xc>
	return *str;
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	781b      	ldrb	r3, [r3, #0]
}
 801c736:	4618      	mov	r0, r3
 801c738:	370c      	adds	r7, #12
 801c73a:	46bd      	mov	sp, r7
 801c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c740:	4770      	bx	lr
	...

0801c744 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801c744:	b480      	push	{r7}
 801c746:	b085      	sub	sp, #20
 801c748:	af00      	add	r7, sp, #0
 801c74a:	6078      	str	r0, [r7, #4]
 801c74c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801c74e:	2300      	movs	r3, #0
 801c750:	60bb      	str	r3, [r7, #8]
 801c752:	68bb      	ldr	r3, [r7, #8]
 801c754:	60fb      	str	r3, [r7, #12]
 801c756:	e029      	b.n	801c7ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801c758:	4a27      	ldr	r2, [pc, #156]	@ (801c7f8 <chk_lock+0xb4>)
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	011b      	lsls	r3, r3, #4
 801c75e:	4413      	add	r3, r2
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	2b00      	cmp	r3, #0
 801c764:	d01d      	beq.n	801c7a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801c766:	4a24      	ldr	r2, [pc, #144]	@ (801c7f8 <chk_lock+0xb4>)
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	011b      	lsls	r3, r3, #4
 801c76c:	4413      	add	r3, r2
 801c76e:	681a      	ldr	r2, [r3, #0]
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	429a      	cmp	r2, r3
 801c776:	d116      	bne.n	801c7a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801c778:	4a1f      	ldr	r2, [pc, #124]	@ (801c7f8 <chk_lock+0xb4>)
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	011b      	lsls	r3, r3, #4
 801c77e:	4413      	add	r3, r2
 801c780:	3304      	adds	r3, #4
 801c782:	681a      	ldr	r2, [r3, #0]
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801c788:	429a      	cmp	r2, r3
 801c78a:	d10c      	bne.n	801c7a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801c78c:	4a1a      	ldr	r2, [pc, #104]	@ (801c7f8 <chk_lock+0xb4>)
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	011b      	lsls	r3, r3, #4
 801c792:	4413      	add	r3, r2
 801c794:	3308      	adds	r3, #8
 801c796:	681a      	ldr	r2, [r3, #0]
 801c798:	687b      	ldr	r3, [r7, #4]
 801c79a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801c79c:	429a      	cmp	r2, r3
 801c79e:	d102      	bne.n	801c7a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801c7a0:	e007      	b.n	801c7b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801c7a2:	2301      	movs	r3, #1
 801c7a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801c7a6:	68fb      	ldr	r3, [r7, #12]
 801c7a8:	3301      	adds	r3, #1
 801c7aa:	60fb      	str	r3, [r7, #12]
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	2b03      	cmp	r3, #3
 801c7b0:	d9d2      	bls.n	801c758 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	2b04      	cmp	r3, #4
 801c7b6:	d109      	bne.n	801c7cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801c7b8:	68bb      	ldr	r3, [r7, #8]
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d102      	bne.n	801c7c4 <chk_lock+0x80>
 801c7be:	683b      	ldr	r3, [r7, #0]
 801c7c0:	2b02      	cmp	r3, #2
 801c7c2:	d101      	bne.n	801c7c8 <chk_lock+0x84>
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	e010      	b.n	801c7ea <chk_lock+0xa6>
 801c7c8:	2312      	movs	r3, #18
 801c7ca:	e00e      	b.n	801c7ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801c7cc:	683b      	ldr	r3, [r7, #0]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	d108      	bne.n	801c7e4 <chk_lock+0xa0>
 801c7d2:	4a09      	ldr	r2, [pc, #36]	@ (801c7f8 <chk_lock+0xb4>)
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	011b      	lsls	r3, r3, #4
 801c7d8:	4413      	add	r3, r2
 801c7da:	330c      	adds	r3, #12
 801c7dc:	881b      	ldrh	r3, [r3, #0]
 801c7de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c7e2:	d101      	bne.n	801c7e8 <chk_lock+0xa4>
 801c7e4:	2310      	movs	r3, #16
 801c7e6:	e000      	b.n	801c7ea <chk_lock+0xa6>
 801c7e8:	2300      	movs	r3, #0
}
 801c7ea:	4618      	mov	r0, r3
 801c7ec:	3714      	adds	r7, #20
 801c7ee:	46bd      	mov	sp, r7
 801c7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7f4:	4770      	bx	lr
 801c7f6:	bf00      	nop
 801c7f8:	24008c50 	.word	0x24008c50

0801c7fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801c7fc:	b480      	push	{r7}
 801c7fe:	b083      	sub	sp, #12
 801c800:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801c802:	2300      	movs	r3, #0
 801c804:	607b      	str	r3, [r7, #4]
 801c806:	e002      	b.n	801c80e <enq_lock+0x12>
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	3301      	adds	r3, #1
 801c80c:	607b      	str	r3, [r7, #4]
 801c80e:	687b      	ldr	r3, [r7, #4]
 801c810:	2b03      	cmp	r3, #3
 801c812:	d806      	bhi.n	801c822 <enq_lock+0x26>
 801c814:	4a09      	ldr	r2, [pc, #36]	@ (801c83c <enq_lock+0x40>)
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	011b      	lsls	r3, r3, #4
 801c81a:	4413      	add	r3, r2
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d1f2      	bne.n	801c808 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	2b04      	cmp	r3, #4
 801c826:	bf14      	ite	ne
 801c828:	2301      	movne	r3, #1
 801c82a:	2300      	moveq	r3, #0
 801c82c:	b2db      	uxtb	r3, r3
}
 801c82e:	4618      	mov	r0, r3
 801c830:	370c      	adds	r7, #12
 801c832:	46bd      	mov	sp, r7
 801c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c838:	4770      	bx	lr
 801c83a:	bf00      	nop
 801c83c:	24008c50 	.word	0x24008c50

0801c840 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801c840:	b480      	push	{r7}
 801c842:	b085      	sub	sp, #20
 801c844:	af00      	add	r7, sp, #0
 801c846:	6078      	str	r0, [r7, #4]
 801c848:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801c84a:	2300      	movs	r3, #0
 801c84c:	60fb      	str	r3, [r7, #12]
 801c84e:	e01f      	b.n	801c890 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801c850:	4a41      	ldr	r2, [pc, #260]	@ (801c958 <inc_lock+0x118>)
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	011b      	lsls	r3, r3, #4
 801c856:	4413      	add	r3, r2
 801c858:	681a      	ldr	r2, [r3, #0]
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	429a      	cmp	r2, r3
 801c860:	d113      	bne.n	801c88a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801c862:	4a3d      	ldr	r2, [pc, #244]	@ (801c958 <inc_lock+0x118>)
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	011b      	lsls	r3, r3, #4
 801c868:	4413      	add	r3, r2
 801c86a:	3304      	adds	r3, #4
 801c86c:	681a      	ldr	r2, [r3, #0]
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801c872:	429a      	cmp	r2, r3
 801c874:	d109      	bne.n	801c88a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801c876:	4a38      	ldr	r2, [pc, #224]	@ (801c958 <inc_lock+0x118>)
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	011b      	lsls	r3, r3, #4
 801c87c:	4413      	add	r3, r2
 801c87e:	3308      	adds	r3, #8
 801c880:	681a      	ldr	r2, [r3, #0]
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801c886:	429a      	cmp	r2, r3
 801c888:	d006      	beq.n	801c898 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	3301      	adds	r3, #1
 801c88e:	60fb      	str	r3, [r7, #12]
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	2b03      	cmp	r3, #3
 801c894:	d9dc      	bls.n	801c850 <inc_lock+0x10>
 801c896:	e000      	b.n	801c89a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801c898:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	2b04      	cmp	r3, #4
 801c89e:	d132      	bne.n	801c906 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801c8a0:	2300      	movs	r3, #0
 801c8a2:	60fb      	str	r3, [r7, #12]
 801c8a4:	e002      	b.n	801c8ac <inc_lock+0x6c>
 801c8a6:	68fb      	ldr	r3, [r7, #12]
 801c8a8:	3301      	adds	r3, #1
 801c8aa:	60fb      	str	r3, [r7, #12]
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	2b03      	cmp	r3, #3
 801c8b0:	d806      	bhi.n	801c8c0 <inc_lock+0x80>
 801c8b2:	4a29      	ldr	r2, [pc, #164]	@ (801c958 <inc_lock+0x118>)
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	011b      	lsls	r3, r3, #4
 801c8b8:	4413      	add	r3, r2
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	d1f2      	bne.n	801c8a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	2b04      	cmp	r3, #4
 801c8c4:	d101      	bne.n	801c8ca <inc_lock+0x8a>
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	e040      	b.n	801c94c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	681a      	ldr	r2, [r3, #0]
 801c8ce:	4922      	ldr	r1, [pc, #136]	@ (801c958 <inc_lock+0x118>)
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	011b      	lsls	r3, r3, #4
 801c8d4:	440b      	add	r3, r1
 801c8d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	689a      	ldr	r2, [r3, #8]
 801c8dc:	491e      	ldr	r1, [pc, #120]	@ (801c958 <inc_lock+0x118>)
 801c8de:	68fb      	ldr	r3, [r7, #12]
 801c8e0:	011b      	lsls	r3, r3, #4
 801c8e2:	440b      	add	r3, r1
 801c8e4:	3304      	adds	r3, #4
 801c8e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	695a      	ldr	r2, [r3, #20]
 801c8ec:	491a      	ldr	r1, [pc, #104]	@ (801c958 <inc_lock+0x118>)
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	011b      	lsls	r3, r3, #4
 801c8f2:	440b      	add	r3, r1
 801c8f4:	3308      	adds	r3, #8
 801c8f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801c8f8:	4a17      	ldr	r2, [pc, #92]	@ (801c958 <inc_lock+0x118>)
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	011b      	lsls	r3, r3, #4
 801c8fe:	4413      	add	r3, r2
 801c900:	330c      	adds	r3, #12
 801c902:	2200      	movs	r2, #0
 801c904:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801c906:	683b      	ldr	r3, [r7, #0]
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d009      	beq.n	801c920 <inc_lock+0xe0>
 801c90c:	4a12      	ldr	r2, [pc, #72]	@ (801c958 <inc_lock+0x118>)
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	011b      	lsls	r3, r3, #4
 801c912:	4413      	add	r3, r2
 801c914:	330c      	adds	r3, #12
 801c916:	881b      	ldrh	r3, [r3, #0]
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d001      	beq.n	801c920 <inc_lock+0xe0>
 801c91c:	2300      	movs	r3, #0
 801c91e:	e015      	b.n	801c94c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801c920:	683b      	ldr	r3, [r7, #0]
 801c922:	2b00      	cmp	r3, #0
 801c924:	d108      	bne.n	801c938 <inc_lock+0xf8>
 801c926:	4a0c      	ldr	r2, [pc, #48]	@ (801c958 <inc_lock+0x118>)
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	011b      	lsls	r3, r3, #4
 801c92c:	4413      	add	r3, r2
 801c92e:	330c      	adds	r3, #12
 801c930:	881b      	ldrh	r3, [r3, #0]
 801c932:	3301      	adds	r3, #1
 801c934:	b29a      	uxth	r2, r3
 801c936:	e001      	b.n	801c93c <inc_lock+0xfc>
 801c938:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801c93c:	4906      	ldr	r1, [pc, #24]	@ (801c958 <inc_lock+0x118>)
 801c93e:	68fb      	ldr	r3, [r7, #12]
 801c940:	011b      	lsls	r3, r3, #4
 801c942:	440b      	add	r3, r1
 801c944:	330c      	adds	r3, #12
 801c946:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801c948:	68fb      	ldr	r3, [r7, #12]
 801c94a:	3301      	adds	r3, #1
}
 801c94c:	4618      	mov	r0, r3
 801c94e:	3714      	adds	r7, #20
 801c950:	46bd      	mov	sp, r7
 801c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c956:	4770      	bx	lr
 801c958:	24008c50 	.word	0x24008c50

0801c95c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801c95c:	b480      	push	{r7}
 801c95e:	b085      	sub	sp, #20
 801c960:	af00      	add	r7, sp, #0
 801c962:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	3b01      	subs	r3, #1
 801c968:	607b      	str	r3, [r7, #4]
 801c96a:	687b      	ldr	r3, [r7, #4]
 801c96c:	2b03      	cmp	r3, #3
 801c96e:	d825      	bhi.n	801c9bc <dec_lock+0x60>
		n = Files[i].ctr;
 801c970:	4a17      	ldr	r2, [pc, #92]	@ (801c9d0 <dec_lock+0x74>)
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	011b      	lsls	r3, r3, #4
 801c976:	4413      	add	r3, r2
 801c978:	330c      	adds	r3, #12
 801c97a:	881b      	ldrh	r3, [r3, #0]
 801c97c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801c97e:	89fb      	ldrh	r3, [r7, #14]
 801c980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c984:	d101      	bne.n	801c98a <dec_lock+0x2e>
 801c986:	2300      	movs	r3, #0
 801c988:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801c98a:	89fb      	ldrh	r3, [r7, #14]
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d002      	beq.n	801c996 <dec_lock+0x3a>
 801c990:	89fb      	ldrh	r3, [r7, #14]
 801c992:	3b01      	subs	r3, #1
 801c994:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801c996:	4a0e      	ldr	r2, [pc, #56]	@ (801c9d0 <dec_lock+0x74>)
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	011b      	lsls	r3, r3, #4
 801c99c:	4413      	add	r3, r2
 801c99e:	330c      	adds	r3, #12
 801c9a0:	89fa      	ldrh	r2, [r7, #14]
 801c9a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801c9a4:	89fb      	ldrh	r3, [r7, #14]
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d105      	bne.n	801c9b6 <dec_lock+0x5a>
 801c9aa:	4a09      	ldr	r2, [pc, #36]	@ (801c9d0 <dec_lock+0x74>)
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	011b      	lsls	r3, r3, #4
 801c9b0:	4413      	add	r3, r2
 801c9b2:	2200      	movs	r2, #0
 801c9b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801c9b6:	2300      	movs	r3, #0
 801c9b8:	737b      	strb	r3, [r7, #13]
 801c9ba:	e001      	b.n	801c9c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801c9bc:	2302      	movs	r3, #2
 801c9be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801c9c0:	7b7b      	ldrb	r3, [r7, #13]
}
 801c9c2:	4618      	mov	r0, r3
 801c9c4:	3714      	adds	r7, #20
 801c9c6:	46bd      	mov	sp, r7
 801c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9cc:	4770      	bx	lr
 801c9ce:	bf00      	nop
 801c9d0:	24008c50 	.word	0x24008c50

0801c9d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801c9d4:	b480      	push	{r7}
 801c9d6:	b085      	sub	sp, #20
 801c9d8:	af00      	add	r7, sp, #0
 801c9da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801c9dc:	2300      	movs	r3, #0
 801c9de:	60fb      	str	r3, [r7, #12]
 801c9e0:	e010      	b.n	801ca04 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801c9e2:	4a0d      	ldr	r2, [pc, #52]	@ (801ca18 <clear_lock+0x44>)
 801c9e4:	68fb      	ldr	r3, [r7, #12]
 801c9e6:	011b      	lsls	r3, r3, #4
 801c9e8:	4413      	add	r3, r2
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	687a      	ldr	r2, [r7, #4]
 801c9ee:	429a      	cmp	r2, r3
 801c9f0:	d105      	bne.n	801c9fe <clear_lock+0x2a>
 801c9f2:	4a09      	ldr	r2, [pc, #36]	@ (801ca18 <clear_lock+0x44>)
 801c9f4:	68fb      	ldr	r3, [r7, #12]
 801c9f6:	011b      	lsls	r3, r3, #4
 801c9f8:	4413      	add	r3, r2
 801c9fa:	2200      	movs	r2, #0
 801c9fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	3301      	adds	r3, #1
 801ca02:	60fb      	str	r3, [r7, #12]
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	2b03      	cmp	r3, #3
 801ca08:	d9eb      	bls.n	801c9e2 <clear_lock+0xe>
	}
}
 801ca0a:	bf00      	nop
 801ca0c:	bf00      	nop
 801ca0e:	3714      	adds	r7, #20
 801ca10:	46bd      	mov	sp, r7
 801ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca16:	4770      	bx	lr
 801ca18:	24008c50 	.word	0x24008c50

0801ca1c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801ca1c:	b580      	push	{r7, lr}
 801ca1e:	b086      	sub	sp, #24
 801ca20:	af00      	add	r7, sp, #0
 801ca22:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801ca24:	2300      	movs	r3, #0
 801ca26:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	78db      	ldrb	r3, [r3, #3]
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d034      	beq.n	801ca9a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca34:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	7858      	ldrb	r0, [r3, #1]
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ca40:	2301      	movs	r3, #1
 801ca42:	697a      	ldr	r2, [r7, #20]
 801ca44:	f7ff fd3e 	bl	801c4c4 <disk_write>
 801ca48:	4603      	mov	r3, r0
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d002      	beq.n	801ca54 <sync_window+0x38>
			res = FR_DISK_ERR;
 801ca4e:	2301      	movs	r3, #1
 801ca50:	73fb      	strb	r3, [r7, #15]
 801ca52:	e022      	b.n	801ca9a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	2200      	movs	r2, #0
 801ca58:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	6a1b      	ldr	r3, [r3, #32]
 801ca5e:	697a      	ldr	r2, [r7, #20]
 801ca60:	1ad2      	subs	r2, r2, r3
 801ca62:	687b      	ldr	r3, [r7, #4]
 801ca64:	699b      	ldr	r3, [r3, #24]
 801ca66:	429a      	cmp	r2, r3
 801ca68:	d217      	bcs.n	801ca9a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	789b      	ldrb	r3, [r3, #2]
 801ca6e:	613b      	str	r3, [r7, #16]
 801ca70:	e010      	b.n	801ca94 <sync_window+0x78>
					wsect += fs->fsize;
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	699b      	ldr	r3, [r3, #24]
 801ca76:	697a      	ldr	r2, [r7, #20]
 801ca78:	4413      	add	r3, r2
 801ca7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	7858      	ldrb	r0, [r3, #1]
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ca86:	2301      	movs	r3, #1
 801ca88:	697a      	ldr	r2, [r7, #20]
 801ca8a:	f7ff fd1b 	bl	801c4c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801ca8e:	693b      	ldr	r3, [r7, #16]
 801ca90:	3b01      	subs	r3, #1
 801ca92:	613b      	str	r3, [r7, #16]
 801ca94:	693b      	ldr	r3, [r7, #16]
 801ca96:	2b01      	cmp	r3, #1
 801ca98:	d8eb      	bhi.n	801ca72 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801ca9a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ca9c:	4618      	mov	r0, r3
 801ca9e:	3718      	adds	r7, #24
 801caa0:	46bd      	mov	sp, r7
 801caa2:	bd80      	pop	{r7, pc}

0801caa4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801caa4:	b580      	push	{r7, lr}
 801caa6:	b084      	sub	sp, #16
 801caa8:	af00      	add	r7, sp, #0
 801caaa:	6078      	str	r0, [r7, #4]
 801caac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801caae:	2300      	movs	r3, #0
 801cab0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cab6:	683a      	ldr	r2, [r7, #0]
 801cab8:	429a      	cmp	r2, r3
 801caba:	d01b      	beq.n	801caf4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801cabc:	6878      	ldr	r0, [r7, #4]
 801cabe:	f7ff ffad 	bl	801ca1c <sync_window>
 801cac2:	4603      	mov	r3, r0
 801cac4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801cac6:	7bfb      	ldrb	r3, [r7, #15]
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d113      	bne.n	801caf4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	7858      	ldrb	r0, [r3, #1]
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cad6:	2301      	movs	r3, #1
 801cad8:	683a      	ldr	r2, [r7, #0]
 801cada:	f7ff fcd3 	bl	801c484 <disk_read>
 801cade:	4603      	mov	r3, r0
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d004      	beq.n	801caee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801cae4:	f04f 33ff 	mov.w	r3, #4294967295
 801cae8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801caea:	2301      	movs	r3, #1
 801caec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	683a      	ldr	r2, [r7, #0]
 801caf2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801caf4:	7bfb      	ldrb	r3, [r7, #15]
}
 801caf6:	4618      	mov	r0, r3
 801caf8:	3710      	adds	r7, #16
 801cafa:	46bd      	mov	sp, r7
 801cafc:	bd80      	pop	{r7, pc}
	...

0801cb00 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801cb00:	b580      	push	{r7, lr}
 801cb02:	b084      	sub	sp, #16
 801cb04:	af00      	add	r7, sp, #0
 801cb06:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801cb08:	6878      	ldr	r0, [r7, #4]
 801cb0a:	f7ff ff87 	bl	801ca1c <sync_window>
 801cb0e:	4603      	mov	r3, r0
 801cb10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801cb12:	7bfb      	ldrb	r3, [r7, #15]
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d158      	bne.n	801cbca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	781b      	ldrb	r3, [r3, #0]
 801cb1c:	2b03      	cmp	r3, #3
 801cb1e:	d148      	bne.n	801cbb2 <sync_fs+0xb2>
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	791b      	ldrb	r3, [r3, #4]
 801cb24:	2b01      	cmp	r3, #1
 801cb26:	d144      	bne.n	801cbb2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	3330      	adds	r3, #48	@ 0x30
 801cb2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801cb30:	2100      	movs	r1, #0
 801cb32:	4618      	mov	r0, r3
 801cb34:	f7ff fda8 	bl	801c688 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	3330      	adds	r3, #48	@ 0x30
 801cb3c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cb40:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801cb44:	4618      	mov	r0, r3
 801cb46:	f7ff fd37 	bl	801c5b8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	3330      	adds	r3, #48	@ 0x30
 801cb4e:	4921      	ldr	r1, [pc, #132]	@ (801cbd4 <sync_fs+0xd4>)
 801cb50:	4618      	mov	r0, r3
 801cb52:	f7ff fd4c 	bl	801c5ee <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	3330      	adds	r3, #48	@ 0x30
 801cb5a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801cb5e:	491e      	ldr	r1, [pc, #120]	@ (801cbd8 <sync_fs+0xd8>)
 801cb60:	4618      	mov	r0, r3
 801cb62:	f7ff fd44 	bl	801c5ee <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	3330      	adds	r3, #48	@ 0x30
 801cb6a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	691b      	ldr	r3, [r3, #16]
 801cb72:	4619      	mov	r1, r3
 801cb74:	4610      	mov	r0, r2
 801cb76:	f7ff fd3a 	bl	801c5ee <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	3330      	adds	r3, #48	@ 0x30
 801cb7e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	68db      	ldr	r3, [r3, #12]
 801cb86:	4619      	mov	r1, r3
 801cb88:	4610      	mov	r0, r2
 801cb8a:	f7ff fd30 	bl	801c5ee <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	69db      	ldr	r3, [r3, #28]
 801cb92:	1c5a      	adds	r2, r3, #1
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	7858      	ldrb	r0, [r3, #1]
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801cba6:	2301      	movs	r3, #1
 801cba8:	f7ff fc8c 	bl	801c4c4 <disk_write>
			fs->fsi_flag = 0;
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	2200      	movs	r2, #0
 801cbb0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	785b      	ldrb	r3, [r3, #1]
 801cbb6:	2200      	movs	r2, #0
 801cbb8:	2100      	movs	r1, #0
 801cbba:	4618      	mov	r0, r3
 801cbbc:	f7ff fca2 	bl	801c504 <disk_ioctl>
 801cbc0:	4603      	mov	r3, r0
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d001      	beq.n	801cbca <sync_fs+0xca>
 801cbc6:	2301      	movs	r3, #1
 801cbc8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801cbca:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbcc:	4618      	mov	r0, r3
 801cbce:	3710      	adds	r7, #16
 801cbd0:	46bd      	mov	sp, r7
 801cbd2:	bd80      	pop	{r7, pc}
 801cbd4:	41615252 	.word	0x41615252
 801cbd8:	61417272 	.word	0x61417272

0801cbdc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801cbdc:	b480      	push	{r7}
 801cbde:	b083      	sub	sp, #12
 801cbe0:	af00      	add	r7, sp, #0
 801cbe2:	6078      	str	r0, [r7, #4]
 801cbe4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801cbe6:	683b      	ldr	r3, [r7, #0]
 801cbe8:	3b02      	subs	r3, #2
 801cbea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	695b      	ldr	r3, [r3, #20]
 801cbf0:	3b02      	subs	r3, #2
 801cbf2:	683a      	ldr	r2, [r7, #0]
 801cbf4:	429a      	cmp	r2, r3
 801cbf6:	d301      	bcc.n	801cbfc <clust2sect+0x20>
 801cbf8:	2300      	movs	r3, #0
 801cbfa:	e008      	b.n	801cc0e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	895b      	ldrh	r3, [r3, #10]
 801cc00:	461a      	mov	r2, r3
 801cc02:	683b      	ldr	r3, [r7, #0]
 801cc04:	fb03 f202 	mul.w	r2, r3, r2
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cc0c:	4413      	add	r3, r2
}
 801cc0e:	4618      	mov	r0, r3
 801cc10:	370c      	adds	r7, #12
 801cc12:	46bd      	mov	sp, r7
 801cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc18:	4770      	bx	lr

0801cc1a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801cc1a:	b580      	push	{r7, lr}
 801cc1c:	b086      	sub	sp, #24
 801cc1e:	af00      	add	r7, sp, #0
 801cc20:	6078      	str	r0, [r7, #4]
 801cc22:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	681b      	ldr	r3, [r3, #0]
 801cc28:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801cc2a:	683b      	ldr	r3, [r7, #0]
 801cc2c:	2b01      	cmp	r3, #1
 801cc2e:	d904      	bls.n	801cc3a <get_fat+0x20>
 801cc30:	693b      	ldr	r3, [r7, #16]
 801cc32:	695b      	ldr	r3, [r3, #20]
 801cc34:	683a      	ldr	r2, [r7, #0]
 801cc36:	429a      	cmp	r2, r3
 801cc38:	d302      	bcc.n	801cc40 <get_fat+0x26>
		val = 1;	/* Internal error */
 801cc3a:	2301      	movs	r3, #1
 801cc3c:	617b      	str	r3, [r7, #20]
 801cc3e:	e08e      	b.n	801cd5e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801cc40:	f04f 33ff 	mov.w	r3, #4294967295
 801cc44:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801cc46:	693b      	ldr	r3, [r7, #16]
 801cc48:	781b      	ldrb	r3, [r3, #0]
 801cc4a:	2b03      	cmp	r3, #3
 801cc4c:	d061      	beq.n	801cd12 <get_fat+0xf8>
 801cc4e:	2b03      	cmp	r3, #3
 801cc50:	dc7b      	bgt.n	801cd4a <get_fat+0x130>
 801cc52:	2b01      	cmp	r3, #1
 801cc54:	d002      	beq.n	801cc5c <get_fat+0x42>
 801cc56:	2b02      	cmp	r3, #2
 801cc58:	d041      	beq.n	801ccde <get_fat+0xc4>
 801cc5a:	e076      	b.n	801cd4a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801cc5c:	683b      	ldr	r3, [r7, #0]
 801cc5e:	60fb      	str	r3, [r7, #12]
 801cc60:	68fb      	ldr	r3, [r7, #12]
 801cc62:	085b      	lsrs	r3, r3, #1
 801cc64:	68fa      	ldr	r2, [r7, #12]
 801cc66:	4413      	add	r3, r2
 801cc68:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801cc6a:	693b      	ldr	r3, [r7, #16]
 801cc6c:	6a1a      	ldr	r2, [r3, #32]
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	0a5b      	lsrs	r3, r3, #9
 801cc72:	4413      	add	r3, r2
 801cc74:	4619      	mov	r1, r3
 801cc76:	6938      	ldr	r0, [r7, #16]
 801cc78:	f7ff ff14 	bl	801caa4 <move_window>
 801cc7c:	4603      	mov	r3, r0
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	d166      	bne.n	801cd50 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801cc82:	68fb      	ldr	r3, [r7, #12]
 801cc84:	1c5a      	adds	r2, r3, #1
 801cc86:	60fa      	str	r2, [r7, #12]
 801cc88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cc8c:	693a      	ldr	r2, [r7, #16]
 801cc8e:	4413      	add	r3, r2
 801cc90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801cc94:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801cc96:	693b      	ldr	r3, [r7, #16]
 801cc98:	6a1a      	ldr	r2, [r3, #32]
 801cc9a:	68fb      	ldr	r3, [r7, #12]
 801cc9c:	0a5b      	lsrs	r3, r3, #9
 801cc9e:	4413      	add	r3, r2
 801cca0:	4619      	mov	r1, r3
 801cca2:	6938      	ldr	r0, [r7, #16]
 801cca4:	f7ff fefe 	bl	801caa4 <move_window>
 801cca8:	4603      	mov	r3, r0
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d152      	bne.n	801cd54 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ccb4:	693a      	ldr	r2, [r7, #16]
 801ccb6:	4413      	add	r3, r2
 801ccb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ccbc:	021b      	lsls	r3, r3, #8
 801ccbe:	68ba      	ldr	r2, [r7, #8]
 801ccc0:	4313      	orrs	r3, r2
 801ccc2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801ccc4:	683b      	ldr	r3, [r7, #0]
 801ccc6:	f003 0301 	and.w	r3, r3, #1
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d002      	beq.n	801ccd4 <get_fat+0xba>
 801ccce:	68bb      	ldr	r3, [r7, #8]
 801ccd0:	091b      	lsrs	r3, r3, #4
 801ccd2:	e002      	b.n	801ccda <get_fat+0xc0>
 801ccd4:	68bb      	ldr	r3, [r7, #8]
 801ccd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ccda:	617b      	str	r3, [r7, #20]
			break;
 801ccdc:	e03f      	b.n	801cd5e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801ccde:	693b      	ldr	r3, [r7, #16]
 801cce0:	6a1a      	ldr	r2, [r3, #32]
 801cce2:	683b      	ldr	r3, [r7, #0]
 801cce4:	0a1b      	lsrs	r3, r3, #8
 801cce6:	4413      	add	r3, r2
 801cce8:	4619      	mov	r1, r3
 801ccea:	6938      	ldr	r0, [r7, #16]
 801ccec:	f7ff feda 	bl	801caa4 <move_window>
 801ccf0:	4603      	mov	r3, r0
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d130      	bne.n	801cd58 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801ccf6:	693b      	ldr	r3, [r7, #16]
 801ccf8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ccfc:	683b      	ldr	r3, [r7, #0]
 801ccfe:	005b      	lsls	r3, r3, #1
 801cd00:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801cd04:	4413      	add	r3, r2
 801cd06:	4618      	mov	r0, r3
 801cd08:	f7ff fc1a 	bl	801c540 <ld_word>
 801cd0c:	4603      	mov	r3, r0
 801cd0e:	617b      	str	r3, [r7, #20]
			break;
 801cd10:	e025      	b.n	801cd5e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801cd12:	693b      	ldr	r3, [r7, #16]
 801cd14:	6a1a      	ldr	r2, [r3, #32]
 801cd16:	683b      	ldr	r3, [r7, #0]
 801cd18:	09db      	lsrs	r3, r3, #7
 801cd1a:	4413      	add	r3, r2
 801cd1c:	4619      	mov	r1, r3
 801cd1e:	6938      	ldr	r0, [r7, #16]
 801cd20:	f7ff fec0 	bl	801caa4 <move_window>
 801cd24:	4603      	mov	r3, r0
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	d118      	bne.n	801cd5c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801cd2a:	693b      	ldr	r3, [r7, #16]
 801cd2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801cd30:	683b      	ldr	r3, [r7, #0]
 801cd32:	009b      	lsls	r3, r3, #2
 801cd34:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801cd38:	4413      	add	r3, r2
 801cd3a:	4618      	mov	r0, r3
 801cd3c:	f7ff fc19 	bl	801c572 <ld_dword>
 801cd40:	4603      	mov	r3, r0
 801cd42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801cd46:	617b      	str	r3, [r7, #20]
			break;
 801cd48:	e009      	b.n	801cd5e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801cd4a:	2301      	movs	r3, #1
 801cd4c:	617b      	str	r3, [r7, #20]
 801cd4e:	e006      	b.n	801cd5e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801cd50:	bf00      	nop
 801cd52:	e004      	b.n	801cd5e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801cd54:	bf00      	nop
 801cd56:	e002      	b.n	801cd5e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801cd58:	bf00      	nop
 801cd5a:	e000      	b.n	801cd5e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801cd5c:	bf00      	nop
		}
	}

	return val;
 801cd5e:	697b      	ldr	r3, [r7, #20]
}
 801cd60:	4618      	mov	r0, r3
 801cd62:	3718      	adds	r7, #24
 801cd64:	46bd      	mov	sp, r7
 801cd66:	bd80      	pop	{r7, pc}

0801cd68 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801cd68:	b590      	push	{r4, r7, lr}
 801cd6a:	b089      	sub	sp, #36	@ 0x24
 801cd6c:	af00      	add	r7, sp, #0
 801cd6e:	60f8      	str	r0, [r7, #12]
 801cd70:	60b9      	str	r1, [r7, #8]
 801cd72:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801cd74:	2302      	movs	r3, #2
 801cd76:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801cd78:	68bb      	ldr	r3, [r7, #8]
 801cd7a:	2b01      	cmp	r3, #1
 801cd7c:	f240 80d9 	bls.w	801cf32 <put_fat+0x1ca>
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	695b      	ldr	r3, [r3, #20]
 801cd84:	68ba      	ldr	r2, [r7, #8]
 801cd86:	429a      	cmp	r2, r3
 801cd88:	f080 80d3 	bcs.w	801cf32 <put_fat+0x1ca>
		switch (fs->fs_type) {
 801cd8c:	68fb      	ldr	r3, [r7, #12]
 801cd8e:	781b      	ldrb	r3, [r3, #0]
 801cd90:	2b03      	cmp	r3, #3
 801cd92:	f000 8096 	beq.w	801cec2 <put_fat+0x15a>
 801cd96:	2b03      	cmp	r3, #3
 801cd98:	f300 80cb 	bgt.w	801cf32 <put_fat+0x1ca>
 801cd9c:	2b01      	cmp	r3, #1
 801cd9e:	d002      	beq.n	801cda6 <put_fat+0x3e>
 801cda0:	2b02      	cmp	r3, #2
 801cda2:	d06e      	beq.n	801ce82 <put_fat+0x11a>
 801cda4:	e0c5      	b.n	801cf32 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801cda6:	68bb      	ldr	r3, [r7, #8]
 801cda8:	61bb      	str	r3, [r7, #24]
 801cdaa:	69bb      	ldr	r3, [r7, #24]
 801cdac:	085b      	lsrs	r3, r3, #1
 801cdae:	69ba      	ldr	r2, [r7, #24]
 801cdb0:	4413      	add	r3, r2
 801cdb2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	6a1a      	ldr	r2, [r3, #32]
 801cdb8:	69bb      	ldr	r3, [r7, #24]
 801cdba:	0a5b      	lsrs	r3, r3, #9
 801cdbc:	4413      	add	r3, r2
 801cdbe:	4619      	mov	r1, r3
 801cdc0:	68f8      	ldr	r0, [r7, #12]
 801cdc2:	f7ff fe6f 	bl	801caa4 <move_window>
 801cdc6:	4603      	mov	r3, r0
 801cdc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801cdca:	7ffb      	ldrb	r3, [r7, #31]
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	f040 80a9 	bne.w	801cf24 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801cdd2:	68fb      	ldr	r3, [r7, #12]
 801cdd4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801cdd8:	69bb      	ldr	r3, [r7, #24]
 801cdda:	1c59      	adds	r1, r3, #1
 801cddc:	61b9      	str	r1, [r7, #24]
 801cdde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cde2:	4413      	add	r3, r2
 801cde4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801cde6:	68bb      	ldr	r3, [r7, #8]
 801cde8:	f003 0301 	and.w	r3, r3, #1
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d00d      	beq.n	801ce0c <put_fat+0xa4>
 801cdf0:	697b      	ldr	r3, [r7, #20]
 801cdf2:	781b      	ldrb	r3, [r3, #0]
 801cdf4:	b25b      	sxtb	r3, r3
 801cdf6:	f003 030f 	and.w	r3, r3, #15
 801cdfa:	b25a      	sxtb	r2, r3
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	b25b      	sxtb	r3, r3
 801ce00:	011b      	lsls	r3, r3, #4
 801ce02:	b25b      	sxtb	r3, r3
 801ce04:	4313      	orrs	r3, r2
 801ce06:	b25b      	sxtb	r3, r3
 801ce08:	b2db      	uxtb	r3, r3
 801ce0a:	e001      	b.n	801ce10 <put_fat+0xa8>
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	b2db      	uxtb	r3, r3
 801ce10:	697a      	ldr	r2, [r7, #20]
 801ce12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801ce14:	68fb      	ldr	r3, [r7, #12]
 801ce16:	2201      	movs	r2, #1
 801ce18:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801ce1a:	68fb      	ldr	r3, [r7, #12]
 801ce1c:	6a1a      	ldr	r2, [r3, #32]
 801ce1e:	69bb      	ldr	r3, [r7, #24]
 801ce20:	0a5b      	lsrs	r3, r3, #9
 801ce22:	4413      	add	r3, r2
 801ce24:	4619      	mov	r1, r3
 801ce26:	68f8      	ldr	r0, [r7, #12]
 801ce28:	f7ff fe3c 	bl	801caa4 <move_window>
 801ce2c:	4603      	mov	r3, r0
 801ce2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ce30:	7ffb      	ldrb	r3, [r7, #31]
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d178      	bne.n	801cf28 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801ce36:	68fb      	ldr	r3, [r7, #12]
 801ce38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ce3c:	69bb      	ldr	r3, [r7, #24]
 801ce3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ce42:	4413      	add	r3, r2
 801ce44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801ce46:	68bb      	ldr	r3, [r7, #8]
 801ce48:	f003 0301 	and.w	r3, r3, #1
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	d003      	beq.n	801ce58 <put_fat+0xf0>
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	091b      	lsrs	r3, r3, #4
 801ce54:	b2db      	uxtb	r3, r3
 801ce56:	e00e      	b.n	801ce76 <put_fat+0x10e>
 801ce58:	697b      	ldr	r3, [r7, #20]
 801ce5a:	781b      	ldrb	r3, [r3, #0]
 801ce5c:	b25b      	sxtb	r3, r3
 801ce5e:	f023 030f 	bic.w	r3, r3, #15
 801ce62:	b25a      	sxtb	r2, r3
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	0a1b      	lsrs	r3, r3, #8
 801ce68:	b25b      	sxtb	r3, r3
 801ce6a:	f003 030f 	and.w	r3, r3, #15
 801ce6e:	b25b      	sxtb	r3, r3
 801ce70:	4313      	orrs	r3, r2
 801ce72:	b25b      	sxtb	r3, r3
 801ce74:	b2db      	uxtb	r3, r3
 801ce76:	697a      	ldr	r2, [r7, #20]
 801ce78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801ce7a:	68fb      	ldr	r3, [r7, #12]
 801ce7c:	2201      	movs	r2, #1
 801ce7e:	70da      	strb	r2, [r3, #3]
			break;
 801ce80:	e057      	b.n	801cf32 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801ce82:	68fb      	ldr	r3, [r7, #12]
 801ce84:	6a1a      	ldr	r2, [r3, #32]
 801ce86:	68bb      	ldr	r3, [r7, #8]
 801ce88:	0a1b      	lsrs	r3, r3, #8
 801ce8a:	4413      	add	r3, r2
 801ce8c:	4619      	mov	r1, r3
 801ce8e:	68f8      	ldr	r0, [r7, #12]
 801ce90:	f7ff fe08 	bl	801caa4 <move_window>
 801ce94:	4603      	mov	r3, r0
 801ce96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ce98:	7ffb      	ldrb	r3, [r7, #31]
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d146      	bne.n	801cf2c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801ce9e:	68fb      	ldr	r3, [r7, #12]
 801cea0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801cea4:	68bb      	ldr	r3, [r7, #8]
 801cea6:	005b      	lsls	r3, r3, #1
 801cea8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801ceac:	4413      	add	r3, r2
 801ceae:	687a      	ldr	r2, [r7, #4]
 801ceb0:	b292      	uxth	r2, r2
 801ceb2:	4611      	mov	r1, r2
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	f7ff fb7f 	bl	801c5b8 <st_word>
			fs->wflag = 1;
 801ceba:	68fb      	ldr	r3, [r7, #12]
 801cebc:	2201      	movs	r2, #1
 801cebe:	70da      	strb	r2, [r3, #3]
			break;
 801cec0:	e037      	b.n	801cf32 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801cec2:	68fb      	ldr	r3, [r7, #12]
 801cec4:	6a1a      	ldr	r2, [r3, #32]
 801cec6:	68bb      	ldr	r3, [r7, #8]
 801cec8:	09db      	lsrs	r3, r3, #7
 801ceca:	4413      	add	r3, r2
 801cecc:	4619      	mov	r1, r3
 801cece:	68f8      	ldr	r0, [r7, #12]
 801ced0:	f7ff fde8 	bl	801caa4 <move_window>
 801ced4:	4603      	mov	r3, r0
 801ced6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ced8:	7ffb      	ldrb	r3, [r7, #31]
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d128      	bne.n	801cf30 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801cee4:	68fb      	ldr	r3, [r7, #12]
 801cee6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ceea:	68bb      	ldr	r3, [r7, #8]
 801ceec:	009b      	lsls	r3, r3, #2
 801ceee:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801cef2:	4413      	add	r3, r2
 801cef4:	4618      	mov	r0, r3
 801cef6:	f7ff fb3c 	bl	801c572 <ld_dword>
 801cefa:	4603      	mov	r3, r0
 801cefc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801cf00:	4323      	orrs	r3, r4
 801cf02:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801cf04:	68fb      	ldr	r3, [r7, #12]
 801cf06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801cf0a:	68bb      	ldr	r3, [r7, #8]
 801cf0c:	009b      	lsls	r3, r3, #2
 801cf0e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801cf12:	4413      	add	r3, r2
 801cf14:	6879      	ldr	r1, [r7, #4]
 801cf16:	4618      	mov	r0, r3
 801cf18:	f7ff fb69 	bl	801c5ee <st_dword>
			fs->wflag = 1;
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	2201      	movs	r2, #1
 801cf20:	70da      	strb	r2, [r3, #3]
			break;
 801cf22:	e006      	b.n	801cf32 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801cf24:	bf00      	nop
 801cf26:	e004      	b.n	801cf32 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801cf28:	bf00      	nop
 801cf2a:	e002      	b.n	801cf32 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801cf2c:	bf00      	nop
 801cf2e:	e000      	b.n	801cf32 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801cf30:	bf00      	nop
		}
	}
	return res;
 801cf32:	7ffb      	ldrb	r3, [r7, #31]
}
 801cf34:	4618      	mov	r0, r3
 801cf36:	3724      	adds	r7, #36	@ 0x24
 801cf38:	46bd      	mov	sp, r7
 801cf3a:	bd90      	pop	{r4, r7, pc}

0801cf3c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801cf3c:	b580      	push	{r7, lr}
 801cf3e:	b088      	sub	sp, #32
 801cf40:	af00      	add	r7, sp, #0
 801cf42:	60f8      	str	r0, [r7, #12]
 801cf44:	60b9      	str	r1, [r7, #8]
 801cf46:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801cf48:	2300      	movs	r3, #0
 801cf4a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801cf4c:	68fb      	ldr	r3, [r7, #12]
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801cf52:	68bb      	ldr	r3, [r7, #8]
 801cf54:	2b01      	cmp	r3, #1
 801cf56:	d904      	bls.n	801cf62 <remove_chain+0x26>
 801cf58:	69bb      	ldr	r3, [r7, #24]
 801cf5a:	695b      	ldr	r3, [r3, #20]
 801cf5c:	68ba      	ldr	r2, [r7, #8]
 801cf5e:	429a      	cmp	r2, r3
 801cf60:	d301      	bcc.n	801cf66 <remove_chain+0x2a>
 801cf62:	2302      	movs	r3, #2
 801cf64:	e04b      	b.n	801cffe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	d00c      	beq.n	801cf86 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801cf6c:	f04f 32ff 	mov.w	r2, #4294967295
 801cf70:	6879      	ldr	r1, [r7, #4]
 801cf72:	69b8      	ldr	r0, [r7, #24]
 801cf74:	f7ff fef8 	bl	801cd68 <put_fat>
 801cf78:	4603      	mov	r3, r0
 801cf7a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801cf7c:	7ffb      	ldrb	r3, [r7, #31]
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d001      	beq.n	801cf86 <remove_chain+0x4a>
 801cf82:	7ffb      	ldrb	r3, [r7, #31]
 801cf84:	e03b      	b.n	801cffe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801cf86:	68b9      	ldr	r1, [r7, #8]
 801cf88:	68f8      	ldr	r0, [r7, #12]
 801cf8a:	f7ff fe46 	bl	801cc1a <get_fat>
 801cf8e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801cf90:	697b      	ldr	r3, [r7, #20]
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d031      	beq.n	801cffa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801cf96:	697b      	ldr	r3, [r7, #20]
 801cf98:	2b01      	cmp	r3, #1
 801cf9a:	d101      	bne.n	801cfa0 <remove_chain+0x64>
 801cf9c:	2302      	movs	r3, #2
 801cf9e:	e02e      	b.n	801cffe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801cfa0:	697b      	ldr	r3, [r7, #20]
 801cfa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cfa6:	d101      	bne.n	801cfac <remove_chain+0x70>
 801cfa8:	2301      	movs	r3, #1
 801cfaa:	e028      	b.n	801cffe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801cfac:	2200      	movs	r2, #0
 801cfae:	68b9      	ldr	r1, [r7, #8]
 801cfb0:	69b8      	ldr	r0, [r7, #24]
 801cfb2:	f7ff fed9 	bl	801cd68 <put_fat>
 801cfb6:	4603      	mov	r3, r0
 801cfb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801cfba:	7ffb      	ldrb	r3, [r7, #31]
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d001      	beq.n	801cfc4 <remove_chain+0x88>
 801cfc0:	7ffb      	ldrb	r3, [r7, #31]
 801cfc2:	e01c      	b.n	801cffe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801cfc4:	69bb      	ldr	r3, [r7, #24]
 801cfc6:	691a      	ldr	r2, [r3, #16]
 801cfc8:	69bb      	ldr	r3, [r7, #24]
 801cfca:	695b      	ldr	r3, [r3, #20]
 801cfcc:	3b02      	subs	r3, #2
 801cfce:	429a      	cmp	r2, r3
 801cfd0:	d20b      	bcs.n	801cfea <remove_chain+0xae>
			fs->free_clst++;
 801cfd2:	69bb      	ldr	r3, [r7, #24]
 801cfd4:	691b      	ldr	r3, [r3, #16]
 801cfd6:	1c5a      	adds	r2, r3, #1
 801cfd8:	69bb      	ldr	r3, [r7, #24]
 801cfda:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801cfdc:	69bb      	ldr	r3, [r7, #24]
 801cfde:	791b      	ldrb	r3, [r3, #4]
 801cfe0:	f043 0301 	orr.w	r3, r3, #1
 801cfe4:	b2da      	uxtb	r2, r3
 801cfe6:	69bb      	ldr	r3, [r7, #24]
 801cfe8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801cfea:	697b      	ldr	r3, [r7, #20]
 801cfec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801cfee:	69bb      	ldr	r3, [r7, #24]
 801cff0:	695b      	ldr	r3, [r3, #20]
 801cff2:	68ba      	ldr	r2, [r7, #8]
 801cff4:	429a      	cmp	r2, r3
 801cff6:	d3c6      	bcc.n	801cf86 <remove_chain+0x4a>
 801cff8:	e000      	b.n	801cffc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801cffa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801cffc:	2300      	movs	r3, #0
}
 801cffe:	4618      	mov	r0, r3
 801d000:	3720      	adds	r7, #32
 801d002:	46bd      	mov	sp, r7
 801d004:	bd80      	pop	{r7, pc}

0801d006 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801d006:	b580      	push	{r7, lr}
 801d008:	b088      	sub	sp, #32
 801d00a:	af00      	add	r7, sp, #0
 801d00c:	6078      	str	r0, [r7, #4]
 801d00e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801d016:	683b      	ldr	r3, [r7, #0]
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d10d      	bne.n	801d038 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801d01c:	693b      	ldr	r3, [r7, #16]
 801d01e:	68db      	ldr	r3, [r3, #12]
 801d020:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801d022:	69bb      	ldr	r3, [r7, #24]
 801d024:	2b00      	cmp	r3, #0
 801d026:	d004      	beq.n	801d032 <create_chain+0x2c>
 801d028:	693b      	ldr	r3, [r7, #16]
 801d02a:	695b      	ldr	r3, [r3, #20]
 801d02c:	69ba      	ldr	r2, [r7, #24]
 801d02e:	429a      	cmp	r2, r3
 801d030:	d31b      	bcc.n	801d06a <create_chain+0x64>
 801d032:	2301      	movs	r3, #1
 801d034:	61bb      	str	r3, [r7, #24]
 801d036:	e018      	b.n	801d06a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801d038:	6839      	ldr	r1, [r7, #0]
 801d03a:	6878      	ldr	r0, [r7, #4]
 801d03c:	f7ff fded 	bl	801cc1a <get_fat>
 801d040:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	2b01      	cmp	r3, #1
 801d046:	d801      	bhi.n	801d04c <create_chain+0x46>
 801d048:	2301      	movs	r3, #1
 801d04a:	e070      	b.n	801d12e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801d04c:	68fb      	ldr	r3, [r7, #12]
 801d04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d052:	d101      	bne.n	801d058 <create_chain+0x52>
 801d054:	68fb      	ldr	r3, [r7, #12]
 801d056:	e06a      	b.n	801d12e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801d058:	693b      	ldr	r3, [r7, #16]
 801d05a:	695b      	ldr	r3, [r3, #20]
 801d05c:	68fa      	ldr	r2, [r7, #12]
 801d05e:	429a      	cmp	r2, r3
 801d060:	d201      	bcs.n	801d066 <create_chain+0x60>
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	e063      	b.n	801d12e <create_chain+0x128>
		scl = clst;
 801d066:	683b      	ldr	r3, [r7, #0]
 801d068:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801d06a:	69bb      	ldr	r3, [r7, #24]
 801d06c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801d06e:	69fb      	ldr	r3, [r7, #28]
 801d070:	3301      	adds	r3, #1
 801d072:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801d074:	693b      	ldr	r3, [r7, #16]
 801d076:	695b      	ldr	r3, [r3, #20]
 801d078:	69fa      	ldr	r2, [r7, #28]
 801d07a:	429a      	cmp	r2, r3
 801d07c:	d307      	bcc.n	801d08e <create_chain+0x88>
				ncl = 2;
 801d07e:	2302      	movs	r3, #2
 801d080:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801d082:	69fa      	ldr	r2, [r7, #28]
 801d084:	69bb      	ldr	r3, [r7, #24]
 801d086:	429a      	cmp	r2, r3
 801d088:	d901      	bls.n	801d08e <create_chain+0x88>
 801d08a:	2300      	movs	r3, #0
 801d08c:	e04f      	b.n	801d12e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801d08e:	69f9      	ldr	r1, [r7, #28]
 801d090:	6878      	ldr	r0, [r7, #4]
 801d092:	f7ff fdc2 	bl	801cc1a <get_fat>
 801d096:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801d098:	68fb      	ldr	r3, [r7, #12]
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	d00e      	beq.n	801d0bc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801d09e:	68fb      	ldr	r3, [r7, #12]
 801d0a0:	2b01      	cmp	r3, #1
 801d0a2:	d003      	beq.n	801d0ac <create_chain+0xa6>
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d0aa:	d101      	bne.n	801d0b0 <create_chain+0xaa>
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	e03e      	b.n	801d12e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801d0b0:	69fa      	ldr	r2, [r7, #28]
 801d0b2:	69bb      	ldr	r3, [r7, #24]
 801d0b4:	429a      	cmp	r2, r3
 801d0b6:	d1da      	bne.n	801d06e <create_chain+0x68>
 801d0b8:	2300      	movs	r3, #0
 801d0ba:	e038      	b.n	801d12e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801d0bc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801d0be:	f04f 32ff 	mov.w	r2, #4294967295
 801d0c2:	69f9      	ldr	r1, [r7, #28]
 801d0c4:	6938      	ldr	r0, [r7, #16]
 801d0c6:	f7ff fe4f 	bl	801cd68 <put_fat>
 801d0ca:	4603      	mov	r3, r0
 801d0cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801d0ce:	7dfb      	ldrb	r3, [r7, #23]
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	d109      	bne.n	801d0e8 <create_chain+0xe2>
 801d0d4:	683b      	ldr	r3, [r7, #0]
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d006      	beq.n	801d0e8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801d0da:	69fa      	ldr	r2, [r7, #28]
 801d0dc:	6839      	ldr	r1, [r7, #0]
 801d0de:	6938      	ldr	r0, [r7, #16]
 801d0e0:	f7ff fe42 	bl	801cd68 <put_fat>
 801d0e4:	4603      	mov	r3, r0
 801d0e6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801d0e8:	7dfb      	ldrb	r3, [r7, #23]
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d116      	bne.n	801d11c <create_chain+0x116>
		fs->last_clst = ncl;
 801d0ee:	693b      	ldr	r3, [r7, #16]
 801d0f0:	69fa      	ldr	r2, [r7, #28]
 801d0f2:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801d0f4:	693b      	ldr	r3, [r7, #16]
 801d0f6:	691a      	ldr	r2, [r3, #16]
 801d0f8:	693b      	ldr	r3, [r7, #16]
 801d0fa:	695b      	ldr	r3, [r3, #20]
 801d0fc:	3b02      	subs	r3, #2
 801d0fe:	429a      	cmp	r2, r3
 801d100:	d804      	bhi.n	801d10c <create_chain+0x106>
 801d102:	693b      	ldr	r3, [r7, #16]
 801d104:	691b      	ldr	r3, [r3, #16]
 801d106:	1e5a      	subs	r2, r3, #1
 801d108:	693b      	ldr	r3, [r7, #16]
 801d10a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801d10c:	693b      	ldr	r3, [r7, #16]
 801d10e:	791b      	ldrb	r3, [r3, #4]
 801d110:	f043 0301 	orr.w	r3, r3, #1
 801d114:	b2da      	uxtb	r2, r3
 801d116:	693b      	ldr	r3, [r7, #16]
 801d118:	711a      	strb	r2, [r3, #4]
 801d11a:	e007      	b.n	801d12c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801d11c:	7dfb      	ldrb	r3, [r7, #23]
 801d11e:	2b01      	cmp	r3, #1
 801d120:	d102      	bne.n	801d128 <create_chain+0x122>
 801d122:	f04f 33ff 	mov.w	r3, #4294967295
 801d126:	e000      	b.n	801d12a <create_chain+0x124>
 801d128:	2301      	movs	r3, #1
 801d12a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801d12c:	69fb      	ldr	r3, [r7, #28]
}
 801d12e:	4618      	mov	r0, r3
 801d130:	3720      	adds	r7, #32
 801d132:	46bd      	mov	sp, r7
 801d134:	bd80      	pop	{r7, pc}

0801d136 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801d136:	b480      	push	{r7}
 801d138:	b087      	sub	sp, #28
 801d13a:	af00      	add	r7, sp, #0
 801d13c:	6078      	str	r0, [r7, #4]
 801d13e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	681b      	ldr	r3, [r3, #0]
 801d144:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d14a:	3304      	adds	r3, #4
 801d14c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801d14e:	683b      	ldr	r3, [r7, #0]
 801d150:	0a5b      	lsrs	r3, r3, #9
 801d152:	68fa      	ldr	r2, [r7, #12]
 801d154:	8952      	ldrh	r2, [r2, #10]
 801d156:	fbb3 f3f2 	udiv	r3, r3, r2
 801d15a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801d15c:	693b      	ldr	r3, [r7, #16]
 801d15e:	1d1a      	adds	r2, r3, #4
 801d160:	613a      	str	r2, [r7, #16]
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801d166:	68bb      	ldr	r3, [r7, #8]
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d101      	bne.n	801d170 <clmt_clust+0x3a>
 801d16c:	2300      	movs	r3, #0
 801d16e:	e010      	b.n	801d192 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801d170:	697a      	ldr	r2, [r7, #20]
 801d172:	68bb      	ldr	r3, [r7, #8]
 801d174:	429a      	cmp	r2, r3
 801d176:	d307      	bcc.n	801d188 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801d178:	697a      	ldr	r2, [r7, #20]
 801d17a:	68bb      	ldr	r3, [r7, #8]
 801d17c:	1ad3      	subs	r3, r2, r3
 801d17e:	617b      	str	r3, [r7, #20]
 801d180:	693b      	ldr	r3, [r7, #16]
 801d182:	3304      	adds	r3, #4
 801d184:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801d186:	e7e9      	b.n	801d15c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801d188:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801d18a:	693b      	ldr	r3, [r7, #16]
 801d18c:	681a      	ldr	r2, [r3, #0]
 801d18e:	697b      	ldr	r3, [r7, #20]
 801d190:	4413      	add	r3, r2
}
 801d192:	4618      	mov	r0, r3
 801d194:	371c      	adds	r7, #28
 801d196:	46bd      	mov	sp, r7
 801d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d19c:	4770      	bx	lr

0801d19e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801d19e:	b580      	push	{r7, lr}
 801d1a0:	b086      	sub	sp, #24
 801d1a2:	af00      	add	r7, sp, #0
 801d1a4:	6078      	str	r0, [r7, #4]
 801d1a6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	681b      	ldr	r3, [r3, #0]
 801d1ac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801d1ae:	683b      	ldr	r3, [r7, #0]
 801d1b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d1b4:	d204      	bcs.n	801d1c0 <dir_sdi+0x22>
 801d1b6:	683b      	ldr	r3, [r7, #0]
 801d1b8:	f003 031f 	and.w	r3, r3, #31
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d001      	beq.n	801d1c4 <dir_sdi+0x26>
		return FR_INT_ERR;
 801d1c0:	2302      	movs	r3, #2
 801d1c2:	e063      	b.n	801d28c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	683a      	ldr	r2, [r7, #0]
 801d1c8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	689b      	ldr	r3, [r3, #8]
 801d1ce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801d1d0:	697b      	ldr	r3, [r7, #20]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d106      	bne.n	801d1e4 <dir_sdi+0x46>
 801d1d6:	693b      	ldr	r3, [r7, #16]
 801d1d8:	781b      	ldrb	r3, [r3, #0]
 801d1da:	2b02      	cmp	r3, #2
 801d1dc:	d902      	bls.n	801d1e4 <dir_sdi+0x46>
		clst = fs->dirbase;
 801d1de:	693b      	ldr	r3, [r7, #16]
 801d1e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d1e2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801d1e4:	697b      	ldr	r3, [r7, #20]
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d10c      	bne.n	801d204 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801d1ea:	683b      	ldr	r3, [r7, #0]
 801d1ec:	095b      	lsrs	r3, r3, #5
 801d1ee:	693a      	ldr	r2, [r7, #16]
 801d1f0:	8912      	ldrh	r2, [r2, #8]
 801d1f2:	4293      	cmp	r3, r2
 801d1f4:	d301      	bcc.n	801d1fa <dir_sdi+0x5c>
 801d1f6:	2302      	movs	r3, #2
 801d1f8:	e048      	b.n	801d28c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801d1fa:	693b      	ldr	r3, [r7, #16]
 801d1fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	61da      	str	r2, [r3, #28]
 801d202:	e029      	b.n	801d258 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801d204:	693b      	ldr	r3, [r7, #16]
 801d206:	895b      	ldrh	r3, [r3, #10]
 801d208:	025b      	lsls	r3, r3, #9
 801d20a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801d20c:	e019      	b.n	801d242 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	6979      	ldr	r1, [r7, #20]
 801d212:	4618      	mov	r0, r3
 801d214:	f7ff fd01 	bl	801cc1a <get_fat>
 801d218:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801d21a:	697b      	ldr	r3, [r7, #20]
 801d21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d220:	d101      	bne.n	801d226 <dir_sdi+0x88>
 801d222:	2301      	movs	r3, #1
 801d224:	e032      	b.n	801d28c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801d226:	697b      	ldr	r3, [r7, #20]
 801d228:	2b01      	cmp	r3, #1
 801d22a:	d904      	bls.n	801d236 <dir_sdi+0x98>
 801d22c:	693b      	ldr	r3, [r7, #16]
 801d22e:	695b      	ldr	r3, [r3, #20]
 801d230:	697a      	ldr	r2, [r7, #20]
 801d232:	429a      	cmp	r2, r3
 801d234:	d301      	bcc.n	801d23a <dir_sdi+0x9c>
 801d236:	2302      	movs	r3, #2
 801d238:	e028      	b.n	801d28c <dir_sdi+0xee>
			ofs -= csz;
 801d23a:	683a      	ldr	r2, [r7, #0]
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	1ad3      	subs	r3, r2, r3
 801d240:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801d242:	683a      	ldr	r2, [r7, #0]
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	429a      	cmp	r2, r3
 801d248:	d2e1      	bcs.n	801d20e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801d24a:	6979      	ldr	r1, [r7, #20]
 801d24c:	6938      	ldr	r0, [r7, #16]
 801d24e:	f7ff fcc5 	bl	801cbdc <clust2sect>
 801d252:	4602      	mov	r2, r0
 801d254:	687b      	ldr	r3, [r7, #4]
 801d256:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	697a      	ldr	r2, [r7, #20]
 801d25c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	69db      	ldr	r3, [r3, #28]
 801d262:	2b00      	cmp	r3, #0
 801d264:	d101      	bne.n	801d26a <dir_sdi+0xcc>
 801d266:	2302      	movs	r3, #2
 801d268:	e010      	b.n	801d28c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	69da      	ldr	r2, [r3, #28]
 801d26e:	683b      	ldr	r3, [r7, #0]
 801d270:	0a5b      	lsrs	r3, r3, #9
 801d272:	441a      	add	r2, r3
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801d278:	693b      	ldr	r3, [r7, #16]
 801d27a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801d27e:	683b      	ldr	r3, [r7, #0]
 801d280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d284:	441a      	add	r2, r3
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801d28a:	2300      	movs	r3, #0
}
 801d28c:	4618      	mov	r0, r3
 801d28e:	3718      	adds	r7, #24
 801d290:	46bd      	mov	sp, r7
 801d292:	bd80      	pop	{r7, pc}

0801d294 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801d294:	b580      	push	{r7, lr}
 801d296:	b086      	sub	sp, #24
 801d298:	af00      	add	r7, sp, #0
 801d29a:	6078      	str	r0, [r7, #4]
 801d29c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	681b      	ldr	r3, [r3, #0]
 801d2a2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	695b      	ldr	r3, [r3, #20]
 801d2a8:	3320      	adds	r3, #32
 801d2aa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	69db      	ldr	r3, [r3, #28]
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d003      	beq.n	801d2bc <dir_next+0x28>
 801d2b4:	68bb      	ldr	r3, [r7, #8]
 801d2b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d2ba:	d301      	bcc.n	801d2c0 <dir_next+0x2c>
 801d2bc:	2304      	movs	r3, #4
 801d2be:	e0aa      	b.n	801d416 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801d2c0:	68bb      	ldr	r3, [r7, #8]
 801d2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	f040 8098 	bne.w	801d3fc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	69db      	ldr	r3, [r3, #28]
 801d2d0:	1c5a      	adds	r2, r3, #1
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	699b      	ldr	r3, [r3, #24]
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	d10b      	bne.n	801d2f6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801d2de:	68bb      	ldr	r3, [r7, #8]
 801d2e0:	095b      	lsrs	r3, r3, #5
 801d2e2:	68fa      	ldr	r2, [r7, #12]
 801d2e4:	8912      	ldrh	r2, [r2, #8]
 801d2e6:	4293      	cmp	r3, r2
 801d2e8:	f0c0 8088 	bcc.w	801d3fc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	2200      	movs	r2, #0
 801d2f0:	61da      	str	r2, [r3, #28]
 801d2f2:	2304      	movs	r3, #4
 801d2f4:	e08f      	b.n	801d416 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801d2f6:	68bb      	ldr	r3, [r7, #8]
 801d2f8:	0a5b      	lsrs	r3, r3, #9
 801d2fa:	68fa      	ldr	r2, [r7, #12]
 801d2fc:	8952      	ldrh	r2, [r2, #10]
 801d2fe:	3a01      	subs	r2, #1
 801d300:	4013      	ands	r3, r2
 801d302:	2b00      	cmp	r3, #0
 801d304:	d17a      	bne.n	801d3fc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801d306:	687a      	ldr	r2, [r7, #4]
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	699b      	ldr	r3, [r3, #24]
 801d30c:	4619      	mov	r1, r3
 801d30e:	4610      	mov	r0, r2
 801d310:	f7ff fc83 	bl	801cc1a <get_fat>
 801d314:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801d316:	697b      	ldr	r3, [r7, #20]
 801d318:	2b01      	cmp	r3, #1
 801d31a:	d801      	bhi.n	801d320 <dir_next+0x8c>
 801d31c:	2302      	movs	r3, #2
 801d31e:	e07a      	b.n	801d416 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801d320:	697b      	ldr	r3, [r7, #20]
 801d322:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d326:	d101      	bne.n	801d32c <dir_next+0x98>
 801d328:	2301      	movs	r3, #1
 801d32a:	e074      	b.n	801d416 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	695b      	ldr	r3, [r3, #20]
 801d330:	697a      	ldr	r2, [r7, #20]
 801d332:	429a      	cmp	r2, r3
 801d334:	d358      	bcc.n	801d3e8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801d336:	683b      	ldr	r3, [r7, #0]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d104      	bne.n	801d346 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	2200      	movs	r2, #0
 801d340:	61da      	str	r2, [r3, #28]
 801d342:	2304      	movs	r3, #4
 801d344:	e067      	b.n	801d416 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801d346:	687a      	ldr	r2, [r7, #4]
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	699b      	ldr	r3, [r3, #24]
 801d34c:	4619      	mov	r1, r3
 801d34e:	4610      	mov	r0, r2
 801d350:	f7ff fe59 	bl	801d006 <create_chain>
 801d354:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801d356:	697b      	ldr	r3, [r7, #20]
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d101      	bne.n	801d360 <dir_next+0xcc>
 801d35c:	2307      	movs	r3, #7
 801d35e:	e05a      	b.n	801d416 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801d360:	697b      	ldr	r3, [r7, #20]
 801d362:	2b01      	cmp	r3, #1
 801d364:	d101      	bne.n	801d36a <dir_next+0xd6>
 801d366:	2302      	movs	r3, #2
 801d368:	e055      	b.n	801d416 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801d36a:	697b      	ldr	r3, [r7, #20]
 801d36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d370:	d101      	bne.n	801d376 <dir_next+0xe2>
 801d372:	2301      	movs	r3, #1
 801d374:	e04f      	b.n	801d416 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801d376:	68f8      	ldr	r0, [r7, #12]
 801d378:	f7ff fb50 	bl	801ca1c <sync_window>
 801d37c:	4603      	mov	r3, r0
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d001      	beq.n	801d386 <dir_next+0xf2>
 801d382:	2301      	movs	r3, #1
 801d384:	e047      	b.n	801d416 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801d386:	68fb      	ldr	r3, [r7, #12]
 801d388:	3330      	adds	r3, #48	@ 0x30
 801d38a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d38e:	2100      	movs	r1, #0
 801d390:	4618      	mov	r0, r3
 801d392:	f7ff f979 	bl	801c688 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801d396:	2300      	movs	r3, #0
 801d398:	613b      	str	r3, [r7, #16]
 801d39a:	6979      	ldr	r1, [r7, #20]
 801d39c:	68f8      	ldr	r0, [r7, #12]
 801d39e:	f7ff fc1d 	bl	801cbdc <clust2sect>
 801d3a2:	4602      	mov	r2, r0
 801d3a4:	68fb      	ldr	r3, [r7, #12]
 801d3a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 801d3a8:	e012      	b.n	801d3d0 <dir_next+0x13c>
						fs->wflag = 1;
 801d3aa:	68fb      	ldr	r3, [r7, #12]
 801d3ac:	2201      	movs	r2, #1
 801d3ae:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801d3b0:	68f8      	ldr	r0, [r7, #12]
 801d3b2:	f7ff fb33 	bl	801ca1c <sync_window>
 801d3b6:	4603      	mov	r3, r0
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d001      	beq.n	801d3c0 <dir_next+0x12c>
 801d3bc:	2301      	movs	r3, #1
 801d3be:	e02a      	b.n	801d416 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801d3c0:	693b      	ldr	r3, [r7, #16]
 801d3c2:	3301      	adds	r3, #1
 801d3c4:	613b      	str	r3, [r7, #16]
 801d3c6:	68fb      	ldr	r3, [r7, #12]
 801d3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d3ca:	1c5a      	adds	r2, r3, #1
 801d3cc:	68fb      	ldr	r3, [r7, #12]
 801d3ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 801d3d0:	68fb      	ldr	r3, [r7, #12]
 801d3d2:	895b      	ldrh	r3, [r3, #10]
 801d3d4:	461a      	mov	r2, r3
 801d3d6:	693b      	ldr	r3, [r7, #16]
 801d3d8:	4293      	cmp	r3, r2
 801d3da:	d3e6      	bcc.n	801d3aa <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801d3dc:	68fb      	ldr	r3, [r7, #12]
 801d3de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d3e0:	693b      	ldr	r3, [r7, #16]
 801d3e2:	1ad2      	subs	r2, r2, r3
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	697a      	ldr	r2, [r7, #20]
 801d3ec:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801d3ee:	6979      	ldr	r1, [r7, #20]
 801d3f0:	68f8      	ldr	r0, [r7, #12]
 801d3f2:	f7ff fbf3 	bl	801cbdc <clust2sect>
 801d3f6:	4602      	mov	r2, r0
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	68ba      	ldr	r2, [r7, #8]
 801d400:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801d408:	68bb      	ldr	r3, [r7, #8]
 801d40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d40e:	441a      	add	r2, r3
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801d414:	2300      	movs	r3, #0
}
 801d416:	4618      	mov	r0, r3
 801d418:	3718      	adds	r7, #24
 801d41a:	46bd      	mov	sp, r7
 801d41c:	bd80      	pop	{r7, pc}

0801d41e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801d41e:	b580      	push	{r7, lr}
 801d420:	b086      	sub	sp, #24
 801d422:	af00      	add	r7, sp, #0
 801d424:	6078      	str	r0, [r7, #4]
 801d426:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	681b      	ldr	r3, [r3, #0]
 801d42c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801d42e:	2100      	movs	r1, #0
 801d430:	6878      	ldr	r0, [r7, #4]
 801d432:	f7ff feb4 	bl	801d19e <dir_sdi>
 801d436:	4603      	mov	r3, r0
 801d438:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d43a:	7dfb      	ldrb	r3, [r7, #23]
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d12b      	bne.n	801d498 <dir_alloc+0x7a>
		n = 0;
 801d440:	2300      	movs	r3, #0
 801d442:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	69db      	ldr	r3, [r3, #28]
 801d448:	4619      	mov	r1, r3
 801d44a:	68f8      	ldr	r0, [r7, #12]
 801d44c:	f7ff fb2a 	bl	801caa4 <move_window>
 801d450:	4603      	mov	r3, r0
 801d452:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801d454:	7dfb      	ldrb	r3, [r7, #23]
 801d456:	2b00      	cmp	r3, #0
 801d458:	d11d      	bne.n	801d496 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	6a1b      	ldr	r3, [r3, #32]
 801d45e:	781b      	ldrb	r3, [r3, #0]
 801d460:	2be5      	cmp	r3, #229	@ 0xe5
 801d462:	d004      	beq.n	801d46e <dir_alloc+0x50>
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	6a1b      	ldr	r3, [r3, #32]
 801d468:	781b      	ldrb	r3, [r3, #0]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d107      	bne.n	801d47e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801d46e:	693b      	ldr	r3, [r7, #16]
 801d470:	3301      	adds	r3, #1
 801d472:	613b      	str	r3, [r7, #16]
 801d474:	693a      	ldr	r2, [r7, #16]
 801d476:	683b      	ldr	r3, [r7, #0]
 801d478:	429a      	cmp	r2, r3
 801d47a:	d102      	bne.n	801d482 <dir_alloc+0x64>
 801d47c:	e00c      	b.n	801d498 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801d47e:	2300      	movs	r3, #0
 801d480:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801d482:	2101      	movs	r1, #1
 801d484:	6878      	ldr	r0, [r7, #4]
 801d486:	f7ff ff05 	bl	801d294 <dir_next>
 801d48a:	4603      	mov	r3, r0
 801d48c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801d48e:	7dfb      	ldrb	r3, [r7, #23]
 801d490:	2b00      	cmp	r3, #0
 801d492:	d0d7      	beq.n	801d444 <dir_alloc+0x26>
 801d494:	e000      	b.n	801d498 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801d496:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801d498:	7dfb      	ldrb	r3, [r7, #23]
 801d49a:	2b04      	cmp	r3, #4
 801d49c:	d101      	bne.n	801d4a2 <dir_alloc+0x84>
 801d49e:	2307      	movs	r3, #7
 801d4a0:	75fb      	strb	r3, [r7, #23]
	return res;
 801d4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 801d4a4:	4618      	mov	r0, r3
 801d4a6:	3718      	adds	r7, #24
 801d4a8:	46bd      	mov	sp, r7
 801d4aa:	bd80      	pop	{r7, pc}

0801d4ac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801d4ac:	b580      	push	{r7, lr}
 801d4ae:	b084      	sub	sp, #16
 801d4b0:	af00      	add	r7, sp, #0
 801d4b2:	6078      	str	r0, [r7, #4]
 801d4b4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801d4b6:	683b      	ldr	r3, [r7, #0]
 801d4b8:	331a      	adds	r3, #26
 801d4ba:	4618      	mov	r0, r3
 801d4bc:	f7ff f840 	bl	801c540 <ld_word>
 801d4c0:	4603      	mov	r3, r0
 801d4c2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	781b      	ldrb	r3, [r3, #0]
 801d4c8:	2b03      	cmp	r3, #3
 801d4ca:	d109      	bne.n	801d4e0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801d4cc:	683b      	ldr	r3, [r7, #0]
 801d4ce:	3314      	adds	r3, #20
 801d4d0:	4618      	mov	r0, r3
 801d4d2:	f7ff f835 	bl	801c540 <ld_word>
 801d4d6:	4603      	mov	r3, r0
 801d4d8:	041b      	lsls	r3, r3, #16
 801d4da:	68fa      	ldr	r2, [r7, #12]
 801d4dc:	4313      	orrs	r3, r2
 801d4de:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801d4e0:	68fb      	ldr	r3, [r7, #12]
}
 801d4e2:	4618      	mov	r0, r3
 801d4e4:	3710      	adds	r7, #16
 801d4e6:	46bd      	mov	sp, r7
 801d4e8:	bd80      	pop	{r7, pc}

0801d4ea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801d4ea:	b580      	push	{r7, lr}
 801d4ec:	b084      	sub	sp, #16
 801d4ee:	af00      	add	r7, sp, #0
 801d4f0:	60f8      	str	r0, [r7, #12]
 801d4f2:	60b9      	str	r1, [r7, #8]
 801d4f4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801d4f6:	68bb      	ldr	r3, [r7, #8]
 801d4f8:	331a      	adds	r3, #26
 801d4fa:	687a      	ldr	r2, [r7, #4]
 801d4fc:	b292      	uxth	r2, r2
 801d4fe:	4611      	mov	r1, r2
 801d500:	4618      	mov	r0, r3
 801d502:	f7ff f859 	bl	801c5b8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801d506:	68fb      	ldr	r3, [r7, #12]
 801d508:	781b      	ldrb	r3, [r3, #0]
 801d50a:	2b03      	cmp	r3, #3
 801d50c:	d109      	bne.n	801d522 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801d50e:	68bb      	ldr	r3, [r7, #8]
 801d510:	f103 0214 	add.w	r2, r3, #20
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	0c1b      	lsrs	r3, r3, #16
 801d518:	b29b      	uxth	r3, r3
 801d51a:	4619      	mov	r1, r3
 801d51c:	4610      	mov	r0, r2
 801d51e:	f7ff f84b 	bl	801c5b8 <st_word>
	}
}
 801d522:	bf00      	nop
 801d524:	3710      	adds	r7, #16
 801d526:	46bd      	mov	sp, r7
 801d528:	bd80      	pop	{r7, pc}

0801d52a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801d52a:	b580      	push	{r7, lr}
 801d52c:	b086      	sub	sp, #24
 801d52e:	af00      	add	r7, sp, #0
 801d530:	6078      	str	r0, [r7, #4]
 801d532:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801d534:	2304      	movs	r3, #4
 801d536:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	681b      	ldr	r3, [r3, #0]
 801d53c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801d53e:	e03c      	b.n	801d5ba <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	69db      	ldr	r3, [r3, #28]
 801d544:	4619      	mov	r1, r3
 801d546:	6938      	ldr	r0, [r7, #16]
 801d548:	f7ff faac 	bl	801caa4 <move_window>
 801d54c:	4603      	mov	r3, r0
 801d54e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801d550:	7dfb      	ldrb	r3, [r7, #23]
 801d552:	2b00      	cmp	r3, #0
 801d554:	d136      	bne.n	801d5c4 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	6a1b      	ldr	r3, [r3, #32]
 801d55a:	781b      	ldrb	r3, [r3, #0]
 801d55c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801d55e:	7bfb      	ldrb	r3, [r7, #15]
 801d560:	2b00      	cmp	r3, #0
 801d562:	d102      	bne.n	801d56a <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801d564:	2304      	movs	r3, #4
 801d566:	75fb      	strb	r3, [r7, #23]
 801d568:	e031      	b.n	801d5ce <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	6a1b      	ldr	r3, [r3, #32]
 801d56e:	330b      	adds	r3, #11
 801d570:	781b      	ldrb	r3, [r3, #0]
 801d572:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d576:	73bb      	strb	r3, [r7, #14]
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	7bba      	ldrb	r2, [r7, #14]
 801d57c:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801d57e:	7bfb      	ldrb	r3, [r7, #15]
 801d580:	2be5      	cmp	r3, #229	@ 0xe5
 801d582:	d011      	beq.n	801d5a8 <dir_read+0x7e>
 801d584:	7bfb      	ldrb	r3, [r7, #15]
 801d586:	2b2e      	cmp	r3, #46	@ 0x2e
 801d588:	d00e      	beq.n	801d5a8 <dir_read+0x7e>
 801d58a:	7bbb      	ldrb	r3, [r7, #14]
 801d58c:	2b0f      	cmp	r3, #15
 801d58e:	d00b      	beq.n	801d5a8 <dir_read+0x7e>
 801d590:	7bbb      	ldrb	r3, [r7, #14]
 801d592:	f023 0320 	bic.w	r3, r3, #32
 801d596:	2b08      	cmp	r3, #8
 801d598:	bf0c      	ite	eq
 801d59a:	2301      	moveq	r3, #1
 801d59c:	2300      	movne	r3, #0
 801d59e:	b2db      	uxtb	r3, r3
 801d5a0:	461a      	mov	r2, r3
 801d5a2:	683b      	ldr	r3, [r7, #0]
 801d5a4:	4293      	cmp	r3, r2
 801d5a6:	d00f      	beq.n	801d5c8 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801d5a8:	2100      	movs	r1, #0
 801d5aa:	6878      	ldr	r0, [r7, #4]
 801d5ac:	f7ff fe72 	bl	801d294 <dir_next>
 801d5b0:	4603      	mov	r3, r0
 801d5b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801d5b4:	7dfb      	ldrb	r3, [r7, #23]
 801d5b6:	2b00      	cmp	r3, #0
 801d5b8:	d108      	bne.n	801d5cc <dir_read+0xa2>
	while (dp->sect) {
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	69db      	ldr	r3, [r3, #28]
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d1be      	bne.n	801d540 <dir_read+0x16>
 801d5c2:	e004      	b.n	801d5ce <dir_read+0xa4>
		if (res != FR_OK) break;
 801d5c4:	bf00      	nop
 801d5c6:	e002      	b.n	801d5ce <dir_read+0xa4>
				break;
 801d5c8:	bf00      	nop
 801d5ca:	e000      	b.n	801d5ce <dir_read+0xa4>
		if (res != FR_OK) break;
 801d5cc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801d5ce:	7dfb      	ldrb	r3, [r7, #23]
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	d002      	beq.n	801d5da <dir_read+0xb0>
 801d5d4:	687b      	ldr	r3, [r7, #4]
 801d5d6:	2200      	movs	r2, #0
 801d5d8:	61da      	str	r2, [r3, #28]
	return res;
 801d5da:	7dfb      	ldrb	r3, [r7, #23]
}
 801d5dc:	4618      	mov	r0, r3
 801d5de:	3718      	adds	r7, #24
 801d5e0:	46bd      	mov	sp, r7
 801d5e2:	bd80      	pop	{r7, pc}

0801d5e4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801d5e4:	b580      	push	{r7, lr}
 801d5e6:	b086      	sub	sp, #24
 801d5e8:	af00      	add	r7, sp, #0
 801d5ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801d5f2:	2100      	movs	r1, #0
 801d5f4:	6878      	ldr	r0, [r7, #4]
 801d5f6:	f7ff fdd2 	bl	801d19e <dir_sdi>
 801d5fa:	4603      	mov	r3, r0
 801d5fc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801d5fe:	7dfb      	ldrb	r3, [r7, #23]
 801d600:	2b00      	cmp	r3, #0
 801d602:	d001      	beq.n	801d608 <dir_find+0x24>
 801d604:	7dfb      	ldrb	r3, [r7, #23]
 801d606:	e03e      	b.n	801d686 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	69db      	ldr	r3, [r3, #28]
 801d60c:	4619      	mov	r1, r3
 801d60e:	6938      	ldr	r0, [r7, #16]
 801d610:	f7ff fa48 	bl	801caa4 <move_window>
 801d614:	4603      	mov	r3, r0
 801d616:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801d618:	7dfb      	ldrb	r3, [r7, #23]
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	d12f      	bne.n	801d67e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	6a1b      	ldr	r3, [r3, #32]
 801d622:	781b      	ldrb	r3, [r3, #0]
 801d624:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801d626:	7bfb      	ldrb	r3, [r7, #15]
 801d628:	2b00      	cmp	r3, #0
 801d62a:	d102      	bne.n	801d632 <dir_find+0x4e>
 801d62c:	2304      	movs	r3, #4
 801d62e:	75fb      	strb	r3, [r7, #23]
 801d630:	e028      	b.n	801d684 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	6a1b      	ldr	r3, [r3, #32]
 801d636:	330b      	adds	r3, #11
 801d638:	781b      	ldrb	r3, [r3, #0]
 801d63a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d63e:	b2da      	uxtb	r2, r3
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	6a1b      	ldr	r3, [r3, #32]
 801d648:	330b      	adds	r3, #11
 801d64a:	781b      	ldrb	r3, [r3, #0]
 801d64c:	f003 0308 	and.w	r3, r3, #8
 801d650:	2b00      	cmp	r3, #0
 801d652:	d10a      	bne.n	801d66a <dir_find+0x86>
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	6a18      	ldr	r0, [r3, #32]
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	3324      	adds	r3, #36	@ 0x24
 801d65c:	220b      	movs	r2, #11
 801d65e:	4619      	mov	r1, r3
 801d660:	f7ff f82d 	bl	801c6be <mem_cmp>
 801d664:	4603      	mov	r3, r0
 801d666:	2b00      	cmp	r3, #0
 801d668:	d00b      	beq.n	801d682 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801d66a:	2100      	movs	r1, #0
 801d66c:	6878      	ldr	r0, [r7, #4]
 801d66e:	f7ff fe11 	bl	801d294 <dir_next>
 801d672:	4603      	mov	r3, r0
 801d674:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801d676:	7dfb      	ldrb	r3, [r7, #23]
 801d678:	2b00      	cmp	r3, #0
 801d67a:	d0c5      	beq.n	801d608 <dir_find+0x24>
 801d67c:	e002      	b.n	801d684 <dir_find+0xa0>
		if (res != FR_OK) break;
 801d67e:	bf00      	nop
 801d680:	e000      	b.n	801d684 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801d682:	bf00      	nop

	return res;
 801d684:	7dfb      	ldrb	r3, [r7, #23]
}
 801d686:	4618      	mov	r0, r3
 801d688:	3718      	adds	r7, #24
 801d68a:	46bd      	mov	sp, r7
 801d68c:	bd80      	pop	{r7, pc}

0801d68e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801d68e:	b580      	push	{r7, lr}
 801d690:	b084      	sub	sp, #16
 801d692:	af00      	add	r7, sp, #0
 801d694:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801d69c:	2101      	movs	r1, #1
 801d69e:	6878      	ldr	r0, [r7, #4]
 801d6a0:	f7ff febd 	bl	801d41e <dir_alloc>
 801d6a4:	4603      	mov	r3, r0
 801d6a6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801d6a8:	7bfb      	ldrb	r3, [r7, #15]
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d11c      	bne.n	801d6e8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	69db      	ldr	r3, [r3, #28]
 801d6b2:	4619      	mov	r1, r3
 801d6b4:	68b8      	ldr	r0, [r7, #8]
 801d6b6:	f7ff f9f5 	bl	801caa4 <move_window>
 801d6ba:	4603      	mov	r3, r0
 801d6bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801d6be:	7bfb      	ldrb	r3, [r7, #15]
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	d111      	bne.n	801d6e8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	6a1b      	ldr	r3, [r3, #32]
 801d6c8:	2220      	movs	r2, #32
 801d6ca:	2100      	movs	r1, #0
 801d6cc:	4618      	mov	r0, r3
 801d6ce:	f7fe ffdb 	bl	801c688 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	6a18      	ldr	r0, [r3, #32]
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	3324      	adds	r3, #36	@ 0x24
 801d6da:	220b      	movs	r2, #11
 801d6dc:	4619      	mov	r1, r3
 801d6de:	f7fe ffb2 	bl	801c646 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801d6e2:	68bb      	ldr	r3, [r7, #8]
 801d6e4:	2201      	movs	r2, #1
 801d6e6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801d6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	3710      	adds	r7, #16
 801d6ee:	46bd      	mov	sp, r7
 801d6f0:	bd80      	pop	{r7, pc}

0801d6f2 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801d6f2:	b580      	push	{r7, lr}
 801d6f4:	b086      	sub	sp, #24
 801d6f6:	af00      	add	r7, sp, #0
 801d6f8:	6078      	str	r0, [r7, #4]
 801d6fa:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801d6fc:	683b      	ldr	r3, [r7, #0]
 801d6fe:	2200      	movs	r2, #0
 801d700:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801d702:	687b      	ldr	r3, [r7, #4]
 801d704:	69db      	ldr	r3, [r3, #28]
 801d706:	2b00      	cmp	r3, #0
 801d708:	d04f      	beq.n	801d7aa <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801d70a:	2300      	movs	r3, #0
 801d70c:	613b      	str	r3, [r7, #16]
 801d70e:	693b      	ldr	r3, [r7, #16]
 801d710:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801d712:	e022      	b.n	801d75a <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 801d714:	687b      	ldr	r3, [r7, #4]
 801d716:	6a1a      	ldr	r2, [r3, #32]
 801d718:	697b      	ldr	r3, [r7, #20]
 801d71a:	1c59      	adds	r1, r3, #1
 801d71c:	6179      	str	r1, [r7, #20]
 801d71e:	4413      	add	r3, r2
 801d720:	781b      	ldrb	r3, [r3, #0]
 801d722:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801d724:	7bfb      	ldrb	r3, [r7, #15]
 801d726:	2b20      	cmp	r3, #32
 801d728:	d016      	beq.n	801d758 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801d72a:	7bfb      	ldrb	r3, [r7, #15]
 801d72c:	2b05      	cmp	r3, #5
 801d72e:	d101      	bne.n	801d734 <get_fileinfo+0x42>
 801d730:	23e5      	movs	r3, #229	@ 0xe5
 801d732:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 801d734:	697b      	ldr	r3, [r7, #20]
 801d736:	2b09      	cmp	r3, #9
 801d738:	d106      	bne.n	801d748 <get_fileinfo+0x56>
 801d73a:	693b      	ldr	r3, [r7, #16]
 801d73c:	1c5a      	adds	r2, r3, #1
 801d73e:	613a      	str	r2, [r7, #16]
 801d740:	683a      	ldr	r2, [r7, #0]
 801d742:	4413      	add	r3, r2
 801d744:	222e      	movs	r2, #46	@ 0x2e
 801d746:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 801d748:	693b      	ldr	r3, [r7, #16]
 801d74a:	1c5a      	adds	r2, r3, #1
 801d74c:	613a      	str	r2, [r7, #16]
 801d74e:	683a      	ldr	r2, [r7, #0]
 801d750:	4413      	add	r3, r2
 801d752:	7bfa      	ldrb	r2, [r7, #15]
 801d754:	725a      	strb	r2, [r3, #9]
 801d756:	e000      	b.n	801d75a <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 801d758:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 801d75a:	697b      	ldr	r3, [r7, #20]
 801d75c:	2b0a      	cmp	r3, #10
 801d75e:	d9d9      	bls.n	801d714 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 801d760:	683a      	ldr	r2, [r7, #0]
 801d762:	693b      	ldr	r3, [r7, #16]
 801d764:	4413      	add	r3, r2
 801d766:	3309      	adds	r3, #9
 801d768:	2200      	movs	r2, #0
 801d76a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	6a1b      	ldr	r3, [r3, #32]
 801d770:	7ada      	ldrb	r2, [r3, #11]
 801d772:	683b      	ldr	r3, [r7, #0]
 801d774:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	6a1b      	ldr	r3, [r3, #32]
 801d77a:	331c      	adds	r3, #28
 801d77c:	4618      	mov	r0, r3
 801d77e:	f7fe fef8 	bl	801c572 <ld_dword>
 801d782:	4602      	mov	r2, r0
 801d784:	683b      	ldr	r3, [r7, #0]
 801d786:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	6a1b      	ldr	r3, [r3, #32]
 801d78c:	3316      	adds	r3, #22
 801d78e:	4618      	mov	r0, r3
 801d790:	f7fe feef 	bl	801c572 <ld_dword>
 801d794:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801d796:	68bb      	ldr	r3, [r7, #8]
 801d798:	b29a      	uxth	r2, r3
 801d79a:	683b      	ldr	r3, [r7, #0]
 801d79c:	80da      	strh	r2, [r3, #6]
 801d79e:	68bb      	ldr	r3, [r7, #8]
 801d7a0:	0c1b      	lsrs	r3, r3, #16
 801d7a2:	b29a      	uxth	r2, r3
 801d7a4:	683b      	ldr	r3, [r7, #0]
 801d7a6:	809a      	strh	r2, [r3, #4]
 801d7a8:	e000      	b.n	801d7ac <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801d7aa:	bf00      	nop
}
 801d7ac:	3718      	adds	r7, #24
 801d7ae:	46bd      	mov	sp, r7
 801d7b0:	bd80      	pop	{r7, pc}
	...

0801d7b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801d7b4:	b580      	push	{r7, lr}
 801d7b6:	b088      	sub	sp, #32
 801d7b8:	af00      	add	r7, sp, #0
 801d7ba:	6078      	str	r0, [r7, #4]
 801d7bc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801d7be:	683b      	ldr	r3, [r7, #0]
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	60fb      	str	r3, [r7, #12]
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	3324      	adds	r3, #36	@ 0x24
 801d7c8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801d7ca:	220b      	movs	r2, #11
 801d7cc:	2120      	movs	r1, #32
 801d7ce:	68b8      	ldr	r0, [r7, #8]
 801d7d0:	f7fe ff5a 	bl	801c688 <mem_set>
	si = i = 0; ni = 8;
 801d7d4:	2300      	movs	r3, #0
 801d7d6:	613b      	str	r3, [r7, #16]
 801d7d8:	693b      	ldr	r3, [r7, #16]
 801d7da:	61fb      	str	r3, [r7, #28]
 801d7dc:	2308      	movs	r3, #8
 801d7de:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801d7e0:	69fb      	ldr	r3, [r7, #28]
 801d7e2:	1c5a      	adds	r2, r3, #1
 801d7e4:	61fa      	str	r2, [r7, #28]
 801d7e6:	68fa      	ldr	r2, [r7, #12]
 801d7e8:	4413      	add	r3, r2
 801d7ea:	781b      	ldrb	r3, [r3, #0]
 801d7ec:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801d7ee:	7efb      	ldrb	r3, [r7, #27]
 801d7f0:	2b20      	cmp	r3, #32
 801d7f2:	d94e      	bls.n	801d892 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801d7f4:	7efb      	ldrb	r3, [r7, #27]
 801d7f6:	2b2f      	cmp	r3, #47	@ 0x2f
 801d7f8:	d006      	beq.n	801d808 <create_name+0x54>
 801d7fa:	7efb      	ldrb	r3, [r7, #27]
 801d7fc:	2b5c      	cmp	r3, #92	@ 0x5c
 801d7fe:	d110      	bne.n	801d822 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801d800:	e002      	b.n	801d808 <create_name+0x54>
 801d802:	69fb      	ldr	r3, [r7, #28]
 801d804:	3301      	adds	r3, #1
 801d806:	61fb      	str	r3, [r7, #28]
 801d808:	68fa      	ldr	r2, [r7, #12]
 801d80a:	69fb      	ldr	r3, [r7, #28]
 801d80c:	4413      	add	r3, r2
 801d80e:	781b      	ldrb	r3, [r3, #0]
 801d810:	2b2f      	cmp	r3, #47	@ 0x2f
 801d812:	d0f6      	beq.n	801d802 <create_name+0x4e>
 801d814:	68fa      	ldr	r2, [r7, #12]
 801d816:	69fb      	ldr	r3, [r7, #28]
 801d818:	4413      	add	r3, r2
 801d81a:	781b      	ldrb	r3, [r3, #0]
 801d81c:	2b5c      	cmp	r3, #92	@ 0x5c
 801d81e:	d0f0      	beq.n	801d802 <create_name+0x4e>
			break;
 801d820:	e038      	b.n	801d894 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801d822:	7efb      	ldrb	r3, [r7, #27]
 801d824:	2b2e      	cmp	r3, #46	@ 0x2e
 801d826:	d003      	beq.n	801d830 <create_name+0x7c>
 801d828:	693a      	ldr	r2, [r7, #16]
 801d82a:	697b      	ldr	r3, [r7, #20]
 801d82c:	429a      	cmp	r2, r3
 801d82e:	d30c      	bcc.n	801d84a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801d830:	697b      	ldr	r3, [r7, #20]
 801d832:	2b0b      	cmp	r3, #11
 801d834:	d002      	beq.n	801d83c <create_name+0x88>
 801d836:	7efb      	ldrb	r3, [r7, #27]
 801d838:	2b2e      	cmp	r3, #46	@ 0x2e
 801d83a:	d001      	beq.n	801d840 <create_name+0x8c>
 801d83c:	2306      	movs	r3, #6
 801d83e:	e044      	b.n	801d8ca <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801d840:	2308      	movs	r3, #8
 801d842:	613b      	str	r3, [r7, #16]
 801d844:	230b      	movs	r3, #11
 801d846:	617b      	str	r3, [r7, #20]
			continue;
 801d848:	e022      	b.n	801d890 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801d84a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801d84e:	2b00      	cmp	r3, #0
 801d850:	da04      	bge.n	801d85c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801d852:	7efb      	ldrb	r3, [r7, #27]
 801d854:	3b80      	subs	r3, #128	@ 0x80
 801d856:	4a1f      	ldr	r2, [pc, #124]	@ (801d8d4 <create_name+0x120>)
 801d858:	5cd3      	ldrb	r3, [r2, r3]
 801d85a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801d85c:	7efb      	ldrb	r3, [r7, #27]
 801d85e:	4619      	mov	r1, r3
 801d860:	481d      	ldr	r0, [pc, #116]	@ (801d8d8 <create_name+0x124>)
 801d862:	f7fe ff53 	bl	801c70c <chk_chr>
 801d866:	4603      	mov	r3, r0
 801d868:	2b00      	cmp	r3, #0
 801d86a:	d001      	beq.n	801d870 <create_name+0xbc>
 801d86c:	2306      	movs	r3, #6
 801d86e:	e02c      	b.n	801d8ca <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801d870:	7efb      	ldrb	r3, [r7, #27]
 801d872:	2b60      	cmp	r3, #96	@ 0x60
 801d874:	d905      	bls.n	801d882 <create_name+0xce>
 801d876:	7efb      	ldrb	r3, [r7, #27]
 801d878:	2b7a      	cmp	r3, #122	@ 0x7a
 801d87a:	d802      	bhi.n	801d882 <create_name+0xce>
 801d87c:	7efb      	ldrb	r3, [r7, #27]
 801d87e:	3b20      	subs	r3, #32
 801d880:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801d882:	693b      	ldr	r3, [r7, #16]
 801d884:	1c5a      	adds	r2, r3, #1
 801d886:	613a      	str	r2, [r7, #16]
 801d888:	68ba      	ldr	r2, [r7, #8]
 801d88a:	4413      	add	r3, r2
 801d88c:	7efa      	ldrb	r2, [r7, #27]
 801d88e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801d890:	e7a6      	b.n	801d7e0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801d892:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801d894:	68fa      	ldr	r2, [r7, #12]
 801d896:	69fb      	ldr	r3, [r7, #28]
 801d898:	441a      	add	r2, r3
 801d89a:	683b      	ldr	r3, [r7, #0]
 801d89c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801d89e:	693b      	ldr	r3, [r7, #16]
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	d101      	bne.n	801d8a8 <create_name+0xf4>
 801d8a4:	2306      	movs	r3, #6
 801d8a6:	e010      	b.n	801d8ca <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801d8a8:	68bb      	ldr	r3, [r7, #8]
 801d8aa:	781b      	ldrb	r3, [r3, #0]
 801d8ac:	2be5      	cmp	r3, #229	@ 0xe5
 801d8ae:	d102      	bne.n	801d8b6 <create_name+0x102>
 801d8b0:	68bb      	ldr	r3, [r7, #8]
 801d8b2:	2205      	movs	r2, #5
 801d8b4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801d8b6:	7efb      	ldrb	r3, [r7, #27]
 801d8b8:	2b20      	cmp	r3, #32
 801d8ba:	d801      	bhi.n	801d8c0 <create_name+0x10c>
 801d8bc:	2204      	movs	r2, #4
 801d8be:	e000      	b.n	801d8c2 <create_name+0x10e>
 801d8c0:	2200      	movs	r2, #0
 801d8c2:	68bb      	ldr	r3, [r7, #8]
 801d8c4:	330b      	adds	r3, #11
 801d8c6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801d8c8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801d8ca:	4618      	mov	r0, r3
 801d8cc:	3720      	adds	r7, #32
 801d8ce:	46bd      	mov	sp, r7
 801d8d0:	bd80      	pop	{r7, pc}
 801d8d2:	bf00      	nop
 801d8d4:	08033ba4 	.word	0x08033ba4
 801d8d8:	08020ae8 	.word	0x08020ae8

0801d8dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801d8dc:	b580      	push	{r7, lr}
 801d8de:	b086      	sub	sp, #24
 801d8e0:	af00      	add	r7, sp, #0
 801d8e2:	6078      	str	r0, [r7, #4]
 801d8e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801d8ea:	693b      	ldr	r3, [r7, #16]
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801d8f0:	e002      	b.n	801d8f8 <follow_path+0x1c>
 801d8f2:	683b      	ldr	r3, [r7, #0]
 801d8f4:	3301      	adds	r3, #1
 801d8f6:	603b      	str	r3, [r7, #0]
 801d8f8:	683b      	ldr	r3, [r7, #0]
 801d8fa:	781b      	ldrb	r3, [r3, #0]
 801d8fc:	2b2f      	cmp	r3, #47	@ 0x2f
 801d8fe:	d0f8      	beq.n	801d8f2 <follow_path+0x16>
 801d900:	683b      	ldr	r3, [r7, #0]
 801d902:	781b      	ldrb	r3, [r3, #0]
 801d904:	2b5c      	cmp	r3, #92	@ 0x5c
 801d906:	d0f4      	beq.n	801d8f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801d908:	693b      	ldr	r3, [r7, #16]
 801d90a:	2200      	movs	r2, #0
 801d90c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801d90e:	683b      	ldr	r3, [r7, #0]
 801d910:	781b      	ldrb	r3, [r3, #0]
 801d912:	2b1f      	cmp	r3, #31
 801d914:	d80a      	bhi.n	801d92c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	2280      	movs	r2, #128	@ 0x80
 801d91a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801d91e:	2100      	movs	r1, #0
 801d920:	6878      	ldr	r0, [r7, #4]
 801d922:	f7ff fc3c 	bl	801d19e <dir_sdi>
 801d926:	4603      	mov	r3, r0
 801d928:	75fb      	strb	r3, [r7, #23]
 801d92a:	e043      	b.n	801d9b4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801d92c:	463b      	mov	r3, r7
 801d92e:	4619      	mov	r1, r3
 801d930:	6878      	ldr	r0, [r7, #4]
 801d932:	f7ff ff3f 	bl	801d7b4 <create_name>
 801d936:	4603      	mov	r3, r0
 801d938:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801d93a:	7dfb      	ldrb	r3, [r7, #23]
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d134      	bne.n	801d9aa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801d940:	6878      	ldr	r0, [r7, #4]
 801d942:	f7ff fe4f 	bl	801d5e4 <dir_find>
 801d946:	4603      	mov	r3, r0
 801d948:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801d94a:	687b      	ldr	r3, [r7, #4]
 801d94c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801d950:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801d952:	7dfb      	ldrb	r3, [r7, #23]
 801d954:	2b00      	cmp	r3, #0
 801d956:	d00a      	beq.n	801d96e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801d958:	7dfb      	ldrb	r3, [r7, #23]
 801d95a:	2b04      	cmp	r3, #4
 801d95c:	d127      	bne.n	801d9ae <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801d95e:	7afb      	ldrb	r3, [r7, #11]
 801d960:	f003 0304 	and.w	r3, r3, #4
 801d964:	2b00      	cmp	r3, #0
 801d966:	d122      	bne.n	801d9ae <follow_path+0xd2>
 801d968:	2305      	movs	r3, #5
 801d96a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801d96c:	e01f      	b.n	801d9ae <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801d96e:	7afb      	ldrb	r3, [r7, #11]
 801d970:	f003 0304 	and.w	r3, r3, #4
 801d974:	2b00      	cmp	r3, #0
 801d976:	d11c      	bne.n	801d9b2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801d978:	693b      	ldr	r3, [r7, #16]
 801d97a:	799b      	ldrb	r3, [r3, #6]
 801d97c:	f003 0310 	and.w	r3, r3, #16
 801d980:	2b00      	cmp	r3, #0
 801d982:	d102      	bne.n	801d98a <follow_path+0xae>
				res = FR_NO_PATH; break;
 801d984:	2305      	movs	r3, #5
 801d986:	75fb      	strb	r3, [r7, #23]
 801d988:	e014      	b.n	801d9b4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801d990:	687b      	ldr	r3, [r7, #4]
 801d992:	695b      	ldr	r3, [r3, #20]
 801d994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d998:	4413      	add	r3, r2
 801d99a:	4619      	mov	r1, r3
 801d99c:	68f8      	ldr	r0, [r7, #12]
 801d99e:	f7ff fd85 	bl	801d4ac <ld_clust>
 801d9a2:	4602      	mov	r2, r0
 801d9a4:	693b      	ldr	r3, [r7, #16]
 801d9a6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801d9a8:	e7c0      	b.n	801d92c <follow_path+0x50>
			if (res != FR_OK) break;
 801d9aa:	bf00      	nop
 801d9ac:	e002      	b.n	801d9b4 <follow_path+0xd8>
				break;
 801d9ae:	bf00      	nop
 801d9b0:	e000      	b.n	801d9b4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801d9b2:	bf00      	nop
			}
		}
	}

	return res;
 801d9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 801d9b6:	4618      	mov	r0, r3
 801d9b8:	3718      	adds	r7, #24
 801d9ba:	46bd      	mov	sp, r7
 801d9bc:	bd80      	pop	{r7, pc}

0801d9be <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801d9be:	b480      	push	{r7}
 801d9c0:	b087      	sub	sp, #28
 801d9c2:	af00      	add	r7, sp, #0
 801d9c4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801d9c6:	f04f 33ff 	mov.w	r3, #4294967295
 801d9ca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	681b      	ldr	r3, [r3, #0]
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	d031      	beq.n	801da38 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801d9d4:	687b      	ldr	r3, [r7, #4]
 801d9d6:	681b      	ldr	r3, [r3, #0]
 801d9d8:	617b      	str	r3, [r7, #20]
 801d9da:	e002      	b.n	801d9e2 <get_ldnumber+0x24>
 801d9dc:	697b      	ldr	r3, [r7, #20]
 801d9de:	3301      	adds	r3, #1
 801d9e0:	617b      	str	r3, [r7, #20]
 801d9e2:	697b      	ldr	r3, [r7, #20]
 801d9e4:	781b      	ldrb	r3, [r3, #0]
 801d9e6:	2b20      	cmp	r3, #32
 801d9e8:	d903      	bls.n	801d9f2 <get_ldnumber+0x34>
 801d9ea:	697b      	ldr	r3, [r7, #20]
 801d9ec:	781b      	ldrb	r3, [r3, #0]
 801d9ee:	2b3a      	cmp	r3, #58	@ 0x3a
 801d9f0:	d1f4      	bne.n	801d9dc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801d9f2:	697b      	ldr	r3, [r7, #20]
 801d9f4:	781b      	ldrb	r3, [r3, #0]
 801d9f6:	2b3a      	cmp	r3, #58	@ 0x3a
 801d9f8:	d11c      	bne.n	801da34 <get_ldnumber+0x76>
			tp = *path;
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	681b      	ldr	r3, [r3, #0]
 801d9fe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801da00:	68fb      	ldr	r3, [r7, #12]
 801da02:	1c5a      	adds	r2, r3, #1
 801da04:	60fa      	str	r2, [r7, #12]
 801da06:	781b      	ldrb	r3, [r3, #0]
 801da08:	3b30      	subs	r3, #48	@ 0x30
 801da0a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801da0c:	68bb      	ldr	r3, [r7, #8]
 801da0e:	2b09      	cmp	r3, #9
 801da10:	d80e      	bhi.n	801da30 <get_ldnumber+0x72>
 801da12:	68fa      	ldr	r2, [r7, #12]
 801da14:	697b      	ldr	r3, [r7, #20]
 801da16:	429a      	cmp	r2, r3
 801da18:	d10a      	bne.n	801da30 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801da1a:	68bb      	ldr	r3, [r7, #8]
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	d107      	bne.n	801da30 <get_ldnumber+0x72>
					vol = (int)i;
 801da20:	68bb      	ldr	r3, [r7, #8]
 801da22:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801da24:	697b      	ldr	r3, [r7, #20]
 801da26:	3301      	adds	r3, #1
 801da28:	617b      	str	r3, [r7, #20]
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	697a      	ldr	r2, [r7, #20]
 801da2e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801da30:	693b      	ldr	r3, [r7, #16]
 801da32:	e002      	b.n	801da3a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801da34:	2300      	movs	r3, #0
 801da36:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801da38:	693b      	ldr	r3, [r7, #16]
}
 801da3a:	4618      	mov	r0, r3
 801da3c:	371c      	adds	r7, #28
 801da3e:	46bd      	mov	sp, r7
 801da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da44:	4770      	bx	lr
	...

0801da48 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801da48:	b580      	push	{r7, lr}
 801da4a:	b082      	sub	sp, #8
 801da4c:	af00      	add	r7, sp, #0
 801da4e:	6078      	str	r0, [r7, #4]
 801da50:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	2200      	movs	r2, #0
 801da56:	70da      	strb	r2, [r3, #3]
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	f04f 32ff 	mov.w	r2, #4294967295
 801da5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801da60:	6839      	ldr	r1, [r7, #0]
 801da62:	6878      	ldr	r0, [r7, #4]
 801da64:	f7ff f81e 	bl	801caa4 <move_window>
 801da68:	4603      	mov	r3, r0
 801da6a:	2b00      	cmp	r3, #0
 801da6c:	d001      	beq.n	801da72 <check_fs+0x2a>
 801da6e:	2304      	movs	r3, #4
 801da70:	e038      	b.n	801dae4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	3330      	adds	r3, #48	@ 0x30
 801da76:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801da7a:	4618      	mov	r0, r3
 801da7c:	f7fe fd60 	bl	801c540 <ld_word>
 801da80:	4603      	mov	r3, r0
 801da82:	461a      	mov	r2, r3
 801da84:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801da88:	429a      	cmp	r2, r3
 801da8a:	d001      	beq.n	801da90 <check_fs+0x48>
 801da8c:	2303      	movs	r3, #3
 801da8e:	e029      	b.n	801dae4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801da96:	2be9      	cmp	r3, #233	@ 0xe9
 801da98:	d009      	beq.n	801daae <check_fs+0x66>
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801daa0:	2beb      	cmp	r3, #235	@ 0xeb
 801daa2:	d11e      	bne.n	801dae2 <check_fs+0x9a>
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801daaa:	2b90      	cmp	r3, #144	@ 0x90
 801daac:	d119      	bne.n	801dae2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	3330      	adds	r3, #48	@ 0x30
 801dab2:	3336      	adds	r3, #54	@ 0x36
 801dab4:	4618      	mov	r0, r3
 801dab6:	f7fe fd5c 	bl	801c572 <ld_dword>
 801daba:	4603      	mov	r3, r0
 801dabc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801dac0:	4a0a      	ldr	r2, [pc, #40]	@ (801daec <check_fs+0xa4>)
 801dac2:	4293      	cmp	r3, r2
 801dac4:	d101      	bne.n	801daca <check_fs+0x82>
 801dac6:	2300      	movs	r3, #0
 801dac8:	e00c      	b.n	801dae4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	3330      	adds	r3, #48	@ 0x30
 801dace:	3352      	adds	r3, #82	@ 0x52
 801dad0:	4618      	mov	r0, r3
 801dad2:	f7fe fd4e 	bl	801c572 <ld_dword>
 801dad6:	4603      	mov	r3, r0
 801dad8:	4a05      	ldr	r2, [pc, #20]	@ (801daf0 <check_fs+0xa8>)
 801dada:	4293      	cmp	r3, r2
 801dadc:	d101      	bne.n	801dae2 <check_fs+0x9a>
 801dade:	2300      	movs	r3, #0
 801dae0:	e000      	b.n	801dae4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801dae2:	2302      	movs	r3, #2
}
 801dae4:	4618      	mov	r0, r3
 801dae6:	3708      	adds	r7, #8
 801dae8:	46bd      	mov	sp, r7
 801daea:	bd80      	pop	{r7, pc}
 801daec:	00544146 	.word	0x00544146
 801daf0:	33544146 	.word	0x33544146

0801daf4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801daf4:	b580      	push	{r7, lr}
 801daf6:	b096      	sub	sp, #88	@ 0x58
 801daf8:	af00      	add	r7, sp, #0
 801dafa:	60f8      	str	r0, [r7, #12]
 801dafc:	60b9      	str	r1, [r7, #8]
 801dafe:	4613      	mov	r3, r2
 801db00:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801db02:	68bb      	ldr	r3, [r7, #8]
 801db04:	2200      	movs	r2, #0
 801db06:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801db08:	68f8      	ldr	r0, [r7, #12]
 801db0a:	f7ff ff58 	bl	801d9be <get_ldnumber>
 801db0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801db10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801db12:	2b00      	cmp	r3, #0
 801db14:	da01      	bge.n	801db1a <find_volume+0x26>
 801db16:	230b      	movs	r3, #11
 801db18:	e22d      	b.n	801df76 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801db1a:	4aa1      	ldr	r2, [pc, #644]	@ (801dda0 <find_volume+0x2ac>)
 801db1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801db1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801db22:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801db24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801db26:	2b00      	cmp	r3, #0
 801db28:	d101      	bne.n	801db2e <find_volume+0x3a>
 801db2a:	230c      	movs	r3, #12
 801db2c:	e223      	b.n	801df76 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801db2e:	68bb      	ldr	r3, [r7, #8]
 801db30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801db32:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801db34:	79fb      	ldrb	r3, [r7, #7]
 801db36:	f023 0301 	bic.w	r3, r3, #1
 801db3a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801db3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801db3e:	781b      	ldrb	r3, [r3, #0]
 801db40:	2b00      	cmp	r3, #0
 801db42:	d01a      	beq.n	801db7a <find_volume+0x86>
		stat = disk_status(fs->drv);
 801db44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801db46:	785b      	ldrb	r3, [r3, #1]
 801db48:	4618      	mov	r0, r3
 801db4a:	f7fe fc59 	bl	801c400 <disk_status>
 801db4e:	4603      	mov	r3, r0
 801db50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801db54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801db58:	f003 0301 	and.w	r3, r3, #1
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	d10c      	bne.n	801db7a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801db60:	79fb      	ldrb	r3, [r7, #7]
 801db62:	2b00      	cmp	r3, #0
 801db64:	d007      	beq.n	801db76 <find_volume+0x82>
 801db66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801db6a:	f003 0304 	and.w	r3, r3, #4
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d001      	beq.n	801db76 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801db72:	230a      	movs	r3, #10
 801db74:	e1ff      	b.n	801df76 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801db76:	2300      	movs	r3, #0
 801db78:	e1fd      	b.n	801df76 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801db7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801db7c:	2200      	movs	r2, #0
 801db7e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801db80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801db82:	b2da      	uxtb	r2, r3
 801db84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801db86:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801db88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801db8a:	785b      	ldrb	r3, [r3, #1]
 801db8c:	4618      	mov	r0, r3
 801db8e:	f7fe fc51 	bl	801c434 <disk_initialize>
 801db92:	4603      	mov	r3, r0
 801db94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801db98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801db9c:	f003 0301 	and.w	r3, r3, #1
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d001      	beq.n	801dba8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801dba4:	2303      	movs	r3, #3
 801dba6:	e1e6      	b.n	801df76 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801dba8:	79fb      	ldrb	r3, [r7, #7]
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d007      	beq.n	801dbbe <find_volume+0xca>
 801dbae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801dbb2:	f003 0304 	and.w	r3, r3, #4
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	d001      	beq.n	801dbbe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801dbba:	230a      	movs	r3, #10
 801dbbc:	e1db      	b.n	801df76 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801dbbe:	2300      	movs	r3, #0
 801dbc0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801dbc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801dbc4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801dbc6:	f7ff ff3f 	bl	801da48 <check_fs>
 801dbca:	4603      	mov	r3, r0
 801dbcc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801dbd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801dbd4:	2b02      	cmp	r3, #2
 801dbd6:	d149      	bne.n	801dc6c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801dbd8:	2300      	movs	r3, #0
 801dbda:	643b      	str	r3, [r7, #64]	@ 0x40
 801dbdc:	e01e      	b.n	801dc1c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801dbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dbe0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801dbe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dbe6:	011b      	lsls	r3, r3, #4
 801dbe8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801dbec:	4413      	add	r3, r2
 801dbee:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801dbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbf2:	3304      	adds	r3, #4
 801dbf4:	781b      	ldrb	r3, [r3, #0]
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	d006      	beq.n	801dc08 <find_volume+0x114>
 801dbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbfc:	3308      	adds	r3, #8
 801dbfe:	4618      	mov	r0, r3
 801dc00:	f7fe fcb7 	bl	801c572 <ld_dword>
 801dc04:	4602      	mov	r2, r0
 801dc06:	e000      	b.n	801dc0a <find_volume+0x116>
 801dc08:	2200      	movs	r2, #0
 801dc0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dc0c:	009b      	lsls	r3, r3, #2
 801dc0e:	3358      	adds	r3, #88	@ 0x58
 801dc10:	443b      	add	r3, r7
 801dc12:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801dc16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dc18:	3301      	adds	r3, #1
 801dc1a:	643b      	str	r3, [r7, #64]	@ 0x40
 801dc1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dc1e:	2b03      	cmp	r3, #3
 801dc20:	d9dd      	bls.n	801dbde <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801dc22:	2300      	movs	r3, #0
 801dc24:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801dc26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	d002      	beq.n	801dc32 <find_volume+0x13e>
 801dc2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dc2e:	3b01      	subs	r3, #1
 801dc30:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801dc32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dc34:	009b      	lsls	r3, r3, #2
 801dc36:	3358      	adds	r3, #88	@ 0x58
 801dc38:	443b      	add	r3, r7
 801dc3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801dc3e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801dc40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d005      	beq.n	801dc52 <find_volume+0x15e>
 801dc46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801dc48:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801dc4a:	f7ff fefd 	bl	801da48 <check_fs>
 801dc4e:	4603      	mov	r3, r0
 801dc50:	e000      	b.n	801dc54 <find_volume+0x160>
 801dc52:	2303      	movs	r3, #3
 801dc54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801dc58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801dc5c:	2b01      	cmp	r3, #1
 801dc5e:	d905      	bls.n	801dc6c <find_volume+0x178>
 801dc60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dc62:	3301      	adds	r3, #1
 801dc64:	643b      	str	r3, [r7, #64]	@ 0x40
 801dc66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dc68:	2b03      	cmp	r3, #3
 801dc6a:	d9e2      	bls.n	801dc32 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801dc6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801dc70:	2b04      	cmp	r3, #4
 801dc72:	d101      	bne.n	801dc78 <find_volume+0x184>
 801dc74:	2301      	movs	r3, #1
 801dc76:	e17e      	b.n	801df76 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801dc78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801dc7c:	2b01      	cmp	r3, #1
 801dc7e:	d901      	bls.n	801dc84 <find_volume+0x190>
 801dc80:	230d      	movs	r3, #13
 801dc82:	e178      	b.n	801df76 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801dc84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dc86:	3330      	adds	r3, #48	@ 0x30
 801dc88:	330b      	adds	r3, #11
 801dc8a:	4618      	mov	r0, r3
 801dc8c:	f7fe fc58 	bl	801c540 <ld_word>
 801dc90:	4603      	mov	r3, r0
 801dc92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dc96:	d001      	beq.n	801dc9c <find_volume+0x1a8>
 801dc98:	230d      	movs	r3, #13
 801dc9a:	e16c      	b.n	801df76 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801dc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dc9e:	3330      	adds	r3, #48	@ 0x30
 801dca0:	3316      	adds	r3, #22
 801dca2:	4618      	mov	r0, r3
 801dca4:	f7fe fc4c 	bl	801c540 <ld_word>
 801dca8:	4603      	mov	r3, r0
 801dcaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801dcac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d106      	bne.n	801dcc0 <find_volume+0x1cc>
 801dcb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dcb4:	3330      	adds	r3, #48	@ 0x30
 801dcb6:	3324      	adds	r3, #36	@ 0x24
 801dcb8:	4618      	mov	r0, r3
 801dcba:	f7fe fc5a 	bl	801c572 <ld_dword>
 801dcbe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801dcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dcc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801dcc4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801dcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dcc8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 801dccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dcce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801dcd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dcd2:	789b      	ldrb	r3, [r3, #2]
 801dcd4:	2b01      	cmp	r3, #1
 801dcd6:	d005      	beq.n	801dce4 <find_volume+0x1f0>
 801dcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dcda:	789b      	ldrb	r3, [r3, #2]
 801dcdc:	2b02      	cmp	r3, #2
 801dcde:	d001      	beq.n	801dce4 <find_volume+0x1f0>
 801dce0:	230d      	movs	r3, #13
 801dce2:	e148      	b.n	801df76 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801dce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dce6:	789b      	ldrb	r3, [r3, #2]
 801dce8:	461a      	mov	r2, r3
 801dcea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dcec:	fb02 f303 	mul.w	r3, r2, r3
 801dcf0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801dcf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dcf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801dcf8:	461a      	mov	r2, r3
 801dcfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dcfc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801dcfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd00:	895b      	ldrh	r3, [r3, #10]
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d008      	beq.n	801dd18 <find_volume+0x224>
 801dd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd08:	895b      	ldrh	r3, [r3, #10]
 801dd0a:	461a      	mov	r2, r3
 801dd0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd0e:	895b      	ldrh	r3, [r3, #10]
 801dd10:	3b01      	subs	r3, #1
 801dd12:	4013      	ands	r3, r2
 801dd14:	2b00      	cmp	r3, #0
 801dd16:	d001      	beq.n	801dd1c <find_volume+0x228>
 801dd18:	230d      	movs	r3, #13
 801dd1a:	e12c      	b.n	801df76 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801dd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd1e:	3330      	adds	r3, #48	@ 0x30
 801dd20:	3311      	adds	r3, #17
 801dd22:	4618      	mov	r0, r3
 801dd24:	f7fe fc0c 	bl	801c540 <ld_word>
 801dd28:	4603      	mov	r3, r0
 801dd2a:	461a      	mov	r2, r3
 801dd2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801dd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd32:	891b      	ldrh	r3, [r3, #8]
 801dd34:	f003 030f 	and.w	r3, r3, #15
 801dd38:	b29b      	uxth	r3, r3
 801dd3a:	2b00      	cmp	r3, #0
 801dd3c:	d001      	beq.n	801dd42 <find_volume+0x24e>
 801dd3e:	230d      	movs	r3, #13
 801dd40:	e119      	b.n	801df76 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801dd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd44:	3330      	adds	r3, #48	@ 0x30
 801dd46:	3313      	adds	r3, #19
 801dd48:	4618      	mov	r0, r3
 801dd4a:	f7fe fbf9 	bl	801c540 <ld_word>
 801dd4e:	4603      	mov	r3, r0
 801dd50:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801dd52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	d106      	bne.n	801dd66 <find_volume+0x272>
 801dd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd5a:	3330      	adds	r3, #48	@ 0x30
 801dd5c:	3320      	adds	r3, #32
 801dd5e:	4618      	mov	r0, r3
 801dd60:	f7fe fc07 	bl	801c572 <ld_dword>
 801dd64:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801dd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd68:	3330      	adds	r3, #48	@ 0x30
 801dd6a:	330e      	adds	r3, #14
 801dd6c:	4618      	mov	r0, r3
 801dd6e:	f7fe fbe7 	bl	801c540 <ld_word>
 801dd72:	4603      	mov	r3, r0
 801dd74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801dd76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	d101      	bne.n	801dd80 <find_volume+0x28c>
 801dd7c:	230d      	movs	r3, #13
 801dd7e:	e0fa      	b.n	801df76 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801dd80:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801dd82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dd84:	4413      	add	r3, r2
 801dd86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801dd88:	8912      	ldrh	r2, [r2, #8]
 801dd8a:	0912      	lsrs	r2, r2, #4
 801dd8c:	b292      	uxth	r2, r2
 801dd8e:	4413      	add	r3, r2
 801dd90:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801dd92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801dd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd96:	429a      	cmp	r2, r3
 801dd98:	d204      	bcs.n	801dda4 <find_volume+0x2b0>
 801dd9a:	230d      	movs	r3, #13
 801dd9c:	e0eb      	b.n	801df76 <find_volume+0x482>
 801dd9e:	bf00      	nop
 801dda0:	24008c48 	.word	0x24008c48
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801dda4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801dda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dda8:	1ad3      	subs	r3, r2, r3
 801ddaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ddac:	8952      	ldrh	r2, [r2, #10]
 801ddae:	fbb3 f3f2 	udiv	r3, r3, r2
 801ddb2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801ddb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	d101      	bne.n	801ddbe <find_volume+0x2ca>
 801ddba:	230d      	movs	r3, #13
 801ddbc:	e0db      	b.n	801df76 <find_volume+0x482>
		fmt = FS_FAT32;
 801ddbe:	2303      	movs	r3, #3
 801ddc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801ddc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ddc6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801ddca:	4293      	cmp	r3, r2
 801ddcc:	d802      	bhi.n	801ddd4 <find_volume+0x2e0>
 801ddce:	2302      	movs	r3, #2
 801ddd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801ddd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ddd6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801ddda:	4293      	cmp	r3, r2
 801dddc:	d802      	bhi.n	801dde4 <find_volume+0x2f0>
 801ddde:	2301      	movs	r3, #1
 801dde0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801dde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dde6:	1c9a      	adds	r2, r3, #2
 801dde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ddea:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801ddec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ddee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ddf0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801ddf2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801ddf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ddf6:	441a      	add	r2, r3
 801ddf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ddfa:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801ddfc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ddfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de00:	441a      	add	r2, r3
 801de02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de04:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801de06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801de0a:	2b03      	cmp	r3, #3
 801de0c:	d11e      	bne.n	801de4c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801de0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de10:	3330      	adds	r3, #48	@ 0x30
 801de12:	332a      	adds	r3, #42	@ 0x2a
 801de14:	4618      	mov	r0, r3
 801de16:	f7fe fb93 	bl	801c540 <ld_word>
 801de1a:	4603      	mov	r3, r0
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d001      	beq.n	801de24 <find_volume+0x330>
 801de20:	230d      	movs	r3, #13
 801de22:	e0a8      	b.n	801df76 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801de24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de26:	891b      	ldrh	r3, [r3, #8]
 801de28:	2b00      	cmp	r3, #0
 801de2a:	d001      	beq.n	801de30 <find_volume+0x33c>
 801de2c:	230d      	movs	r3, #13
 801de2e:	e0a2      	b.n	801df76 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801de30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de32:	3330      	adds	r3, #48	@ 0x30
 801de34:	332c      	adds	r3, #44	@ 0x2c
 801de36:	4618      	mov	r0, r3
 801de38:	f7fe fb9b 	bl	801c572 <ld_dword>
 801de3c:	4602      	mov	r2, r0
 801de3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de40:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801de42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de44:	695b      	ldr	r3, [r3, #20]
 801de46:	009b      	lsls	r3, r3, #2
 801de48:	647b      	str	r3, [r7, #68]	@ 0x44
 801de4a:	e01f      	b.n	801de8c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801de4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de4e:	891b      	ldrh	r3, [r3, #8]
 801de50:	2b00      	cmp	r3, #0
 801de52:	d101      	bne.n	801de58 <find_volume+0x364>
 801de54:	230d      	movs	r3, #13
 801de56:	e08e      	b.n	801df76 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801de58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de5a:	6a1a      	ldr	r2, [r3, #32]
 801de5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de5e:	441a      	add	r2, r3
 801de60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de62:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801de64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801de68:	2b02      	cmp	r3, #2
 801de6a:	d103      	bne.n	801de74 <find_volume+0x380>
 801de6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de6e:	695b      	ldr	r3, [r3, #20]
 801de70:	005b      	lsls	r3, r3, #1
 801de72:	e00a      	b.n	801de8a <find_volume+0x396>
 801de74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de76:	695a      	ldr	r2, [r3, #20]
 801de78:	4613      	mov	r3, r2
 801de7a:	005b      	lsls	r3, r3, #1
 801de7c:	4413      	add	r3, r2
 801de7e:	085a      	lsrs	r2, r3, #1
 801de80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de82:	695b      	ldr	r3, [r3, #20]
 801de84:	f003 0301 	and.w	r3, r3, #1
 801de88:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801de8a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801de8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de8e:	699a      	ldr	r2, [r3, #24]
 801de90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801de92:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801de96:	0a5b      	lsrs	r3, r3, #9
 801de98:	429a      	cmp	r2, r3
 801de9a:	d201      	bcs.n	801dea0 <find_volume+0x3ac>
 801de9c:	230d      	movs	r3, #13
 801de9e:	e06a      	b.n	801df76 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801dea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dea2:	f04f 32ff 	mov.w	r2, #4294967295
 801dea6:	611a      	str	r2, [r3, #16]
 801dea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801deaa:	691a      	ldr	r2, [r3, #16]
 801deac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801deae:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801deb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801deb2:	2280      	movs	r2, #128	@ 0x80
 801deb4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801deb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801deba:	2b03      	cmp	r3, #3
 801debc:	d149      	bne.n	801df52 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801debe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dec0:	3330      	adds	r3, #48	@ 0x30
 801dec2:	3330      	adds	r3, #48	@ 0x30
 801dec4:	4618      	mov	r0, r3
 801dec6:	f7fe fb3b 	bl	801c540 <ld_word>
 801deca:	4603      	mov	r3, r0
 801decc:	2b01      	cmp	r3, #1
 801dece:	d140      	bne.n	801df52 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801ded0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ded2:	3301      	adds	r3, #1
 801ded4:	4619      	mov	r1, r3
 801ded6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801ded8:	f7fe fde4 	bl	801caa4 <move_window>
 801dedc:	4603      	mov	r3, r0
 801dede:	2b00      	cmp	r3, #0
 801dee0:	d137      	bne.n	801df52 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801dee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dee4:	2200      	movs	r2, #0
 801dee6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801dee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801deea:	3330      	adds	r3, #48	@ 0x30
 801deec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801def0:	4618      	mov	r0, r3
 801def2:	f7fe fb25 	bl	801c540 <ld_word>
 801def6:	4603      	mov	r3, r0
 801def8:	461a      	mov	r2, r3
 801defa:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801defe:	429a      	cmp	r2, r3
 801df00:	d127      	bne.n	801df52 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801df02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801df04:	3330      	adds	r3, #48	@ 0x30
 801df06:	4618      	mov	r0, r3
 801df08:	f7fe fb33 	bl	801c572 <ld_dword>
 801df0c:	4603      	mov	r3, r0
 801df0e:	4a1c      	ldr	r2, [pc, #112]	@ (801df80 <find_volume+0x48c>)
 801df10:	4293      	cmp	r3, r2
 801df12:	d11e      	bne.n	801df52 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801df14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801df16:	3330      	adds	r3, #48	@ 0x30
 801df18:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801df1c:	4618      	mov	r0, r3
 801df1e:	f7fe fb28 	bl	801c572 <ld_dword>
 801df22:	4603      	mov	r3, r0
 801df24:	4a17      	ldr	r2, [pc, #92]	@ (801df84 <find_volume+0x490>)
 801df26:	4293      	cmp	r3, r2
 801df28:	d113      	bne.n	801df52 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801df2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801df2c:	3330      	adds	r3, #48	@ 0x30
 801df2e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801df32:	4618      	mov	r0, r3
 801df34:	f7fe fb1d 	bl	801c572 <ld_dword>
 801df38:	4602      	mov	r2, r0
 801df3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801df3c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801df3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801df40:	3330      	adds	r3, #48	@ 0x30
 801df42:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801df46:	4618      	mov	r0, r3
 801df48:	f7fe fb13 	bl	801c572 <ld_dword>
 801df4c:	4602      	mov	r2, r0
 801df4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801df50:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801df52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801df54:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801df58:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801df5a:	4b0b      	ldr	r3, [pc, #44]	@ (801df88 <find_volume+0x494>)
 801df5c:	881b      	ldrh	r3, [r3, #0]
 801df5e:	3301      	adds	r3, #1
 801df60:	b29a      	uxth	r2, r3
 801df62:	4b09      	ldr	r3, [pc, #36]	@ (801df88 <find_volume+0x494>)
 801df64:	801a      	strh	r2, [r3, #0]
 801df66:	4b08      	ldr	r3, [pc, #32]	@ (801df88 <find_volume+0x494>)
 801df68:	881a      	ldrh	r2, [r3, #0]
 801df6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801df6c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801df6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801df70:	f7fe fd30 	bl	801c9d4 <clear_lock>
#endif
	return FR_OK;
 801df74:	2300      	movs	r3, #0
}
 801df76:	4618      	mov	r0, r3
 801df78:	3758      	adds	r7, #88	@ 0x58
 801df7a:	46bd      	mov	sp, r7
 801df7c:	bd80      	pop	{r7, pc}
 801df7e:	bf00      	nop
 801df80:	41615252 	.word	0x41615252
 801df84:	61417272 	.word	0x61417272
 801df88:	24008c4c 	.word	0x24008c4c

0801df8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801df8c:	b580      	push	{r7, lr}
 801df8e:	b084      	sub	sp, #16
 801df90:	af00      	add	r7, sp, #0
 801df92:	6078      	str	r0, [r7, #4]
 801df94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801df96:	2309      	movs	r3, #9
 801df98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	d01c      	beq.n	801dfda <validate+0x4e>
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	681b      	ldr	r3, [r3, #0]
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	d018      	beq.n	801dfda <validate+0x4e>
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	781b      	ldrb	r3, [r3, #0]
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d013      	beq.n	801dfda <validate+0x4e>
 801dfb2:	687b      	ldr	r3, [r7, #4]
 801dfb4:	889a      	ldrh	r2, [r3, #4]
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	88db      	ldrh	r3, [r3, #6]
 801dfbc:	429a      	cmp	r2, r3
 801dfbe:	d10c      	bne.n	801dfda <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	785b      	ldrb	r3, [r3, #1]
 801dfc6:	4618      	mov	r0, r3
 801dfc8:	f7fe fa1a 	bl	801c400 <disk_status>
 801dfcc:	4603      	mov	r3, r0
 801dfce:	f003 0301 	and.w	r3, r3, #1
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d101      	bne.n	801dfda <validate+0x4e>
			res = FR_OK;
 801dfd6:	2300      	movs	r3, #0
 801dfd8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801dfda:	7bfb      	ldrb	r3, [r7, #15]
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	d102      	bne.n	801dfe6 <validate+0x5a>
 801dfe0:	687b      	ldr	r3, [r7, #4]
 801dfe2:	681b      	ldr	r3, [r3, #0]
 801dfe4:	e000      	b.n	801dfe8 <validate+0x5c>
 801dfe6:	2300      	movs	r3, #0
 801dfe8:	683a      	ldr	r2, [r7, #0]
 801dfea:	6013      	str	r3, [r2, #0]
	return res;
 801dfec:	7bfb      	ldrb	r3, [r7, #15]
}
 801dfee:	4618      	mov	r0, r3
 801dff0:	3710      	adds	r7, #16
 801dff2:	46bd      	mov	sp, r7
 801dff4:	bd80      	pop	{r7, pc}
	...

0801dff8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801dff8:	b580      	push	{r7, lr}
 801dffa:	b088      	sub	sp, #32
 801dffc:	af00      	add	r7, sp, #0
 801dffe:	60f8      	str	r0, [r7, #12]
 801e000:	60b9      	str	r1, [r7, #8]
 801e002:	4613      	mov	r3, r2
 801e004:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801e006:	68bb      	ldr	r3, [r7, #8]
 801e008:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801e00a:	f107 0310 	add.w	r3, r7, #16
 801e00e:	4618      	mov	r0, r3
 801e010:	f7ff fcd5 	bl	801d9be <get_ldnumber>
 801e014:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801e016:	69fb      	ldr	r3, [r7, #28]
 801e018:	2b00      	cmp	r3, #0
 801e01a:	da01      	bge.n	801e020 <f_mount+0x28>
 801e01c:	230b      	movs	r3, #11
 801e01e:	e02b      	b.n	801e078 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801e020:	4a17      	ldr	r2, [pc, #92]	@ (801e080 <f_mount+0x88>)
 801e022:	69fb      	ldr	r3, [r7, #28]
 801e024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e028:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801e02a:	69bb      	ldr	r3, [r7, #24]
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d005      	beq.n	801e03c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801e030:	69b8      	ldr	r0, [r7, #24]
 801e032:	f7fe fccf 	bl	801c9d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801e036:	69bb      	ldr	r3, [r7, #24]
 801e038:	2200      	movs	r2, #0
 801e03a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801e03c:	68fb      	ldr	r3, [r7, #12]
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d002      	beq.n	801e048 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801e042:	68fb      	ldr	r3, [r7, #12]
 801e044:	2200      	movs	r2, #0
 801e046:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801e048:	68fa      	ldr	r2, [r7, #12]
 801e04a:	490d      	ldr	r1, [pc, #52]	@ (801e080 <f_mount+0x88>)
 801e04c:	69fb      	ldr	r3, [r7, #28]
 801e04e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801e052:	68fb      	ldr	r3, [r7, #12]
 801e054:	2b00      	cmp	r3, #0
 801e056:	d002      	beq.n	801e05e <f_mount+0x66>
 801e058:	79fb      	ldrb	r3, [r7, #7]
 801e05a:	2b01      	cmp	r3, #1
 801e05c:	d001      	beq.n	801e062 <f_mount+0x6a>
 801e05e:	2300      	movs	r3, #0
 801e060:	e00a      	b.n	801e078 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801e062:	f107 010c 	add.w	r1, r7, #12
 801e066:	f107 0308 	add.w	r3, r7, #8
 801e06a:	2200      	movs	r2, #0
 801e06c:	4618      	mov	r0, r3
 801e06e:	f7ff fd41 	bl	801daf4 <find_volume>
 801e072:	4603      	mov	r3, r0
 801e074:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801e076:	7dfb      	ldrb	r3, [r7, #23]
}
 801e078:	4618      	mov	r0, r3
 801e07a:	3720      	adds	r7, #32
 801e07c:	46bd      	mov	sp, r7
 801e07e:	bd80      	pop	{r7, pc}
 801e080:	24008c48 	.word	0x24008c48

0801e084 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801e084:	b580      	push	{r7, lr}
 801e086:	b098      	sub	sp, #96	@ 0x60
 801e088:	af00      	add	r7, sp, #0
 801e08a:	60f8      	str	r0, [r7, #12]
 801e08c:	60b9      	str	r1, [r7, #8]
 801e08e:	4613      	mov	r3, r2
 801e090:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801e092:	68fb      	ldr	r3, [r7, #12]
 801e094:	2b00      	cmp	r3, #0
 801e096:	d101      	bne.n	801e09c <f_open+0x18>
 801e098:	2309      	movs	r3, #9
 801e09a:	e1a9      	b.n	801e3f0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801e09c:	79fb      	ldrb	r3, [r7, #7]
 801e09e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e0a2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801e0a4:	79fa      	ldrb	r2, [r7, #7]
 801e0a6:	f107 0110 	add.w	r1, r7, #16
 801e0aa:	f107 0308 	add.w	r3, r7, #8
 801e0ae:	4618      	mov	r0, r3
 801e0b0:	f7ff fd20 	bl	801daf4 <find_volume>
 801e0b4:	4603      	mov	r3, r0
 801e0b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801e0ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	f040 818d 	bne.w	801e3de <f_open+0x35a>
		dj.obj.fs = fs;
 801e0c4:	693b      	ldr	r3, [r7, #16]
 801e0c6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801e0c8:	68ba      	ldr	r2, [r7, #8]
 801e0ca:	f107 0314 	add.w	r3, r7, #20
 801e0ce:	4611      	mov	r1, r2
 801e0d0:	4618      	mov	r0, r3
 801e0d2:	f7ff fc03 	bl	801d8dc <follow_path>
 801e0d6:	4603      	mov	r3, r0
 801e0d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801e0dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	d118      	bne.n	801e116 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801e0e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801e0e8:	b25b      	sxtb	r3, r3
 801e0ea:	2b00      	cmp	r3, #0
 801e0ec:	da03      	bge.n	801e0f6 <f_open+0x72>
				res = FR_INVALID_NAME;
 801e0ee:	2306      	movs	r3, #6
 801e0f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801e0f4:	e00f      	b.n	801e116 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801e0f6:	79fb      	ldrb	r3, [r7, #7]
 801e0f8:	2b01      	cmp	r3, #1
 801e0fa:	bf8c      	ite	hi
 801e0fc:	2301      	movhi	r3, #1
 801e0fe:	2300      	movls	r3, #0
 801e100:	b2db      	uxtb	r3, r3
 801e102:	461a      	mov	r2, r3
 801e104:	f107 0314 	add.w	r3, r7, #20
 801e108:	4611      	mov	r1, r2
 801e10a:	4618      	mov	r0, r3
 801e10c:	f7fe fb1a 	bl	801c744 <chk_lock>
 801e110:	4603      	mov	r3, r0
 801e112:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801e116:	79fb      	ldrb	r3, [r7, #7]
 801e118:	f003 031c 	and.w	r3, r3, #28
 801e11c:	2b00      	cmp	r3, #0
 801e11e:	d07f      	beq.n	801e220 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801e120:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e124:	2b00      	cmp	r3, #0
 801e126:	d017      	beq.n	801e158 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801e128:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e12c:	2b04      	cmp	r3, #4
 801e12e:	d10e      	bne.n	801e14e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801e130:	f7fe fb64 	bl	801c7fc <enq_lock>
 801e134:	4603      	mov	r3, r0
 801e136:	2b00      	cmp	r3, #0
 801e138:	d006      	beq.n	801e148 <f_open+0xc4>
 801e13a:	f107 0314 	add.w	r3, r7, #20
 801e13e:	4618      	mov	r0, r3
 801e140:	f7ff faa5 	bl	801d68e <dir_register>
 801e144:	4603      	mov	r3, r0
 801e146:	e000      	b.n	801e14a <f_open+0xc6>
 801e148:	2312      	movs	r3, #18
 801e14a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801e14e:	79fb      	ldrb	r3, [r7, #7]
 801e150:	f043 0308 	orr.w	r3, r3, #8
 801e154:	71fb      	strb	r3, [r7, #7]
 801e156:	e010      	b.n	801e17a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801e158:	7ebb      	ldrb	r3, [r7, #26]
 801e15a:	f003 0311 	and.w	r3, r3, #17
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d003      	beq.n	801e16a <f_open+0xe6>
					res = FR_DENIED;
 801e162:	2307      	movs	r3, #7
 801e164:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801e168:	e007      	b.n	801e17a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801e16a:	79fb      	ldrb	r3, [r7, #7]
 801e16c:	f003 0304 	and.w	r3, r3, #4
 801e170:	2b00      	cmp	r3, #0
 801e172:	d002      	beq.n	801e17a <f_open+0xf6>
 801e174:	2308      	movs	r3, #8
 801e176:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801e17a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e17e:	2b00      	cmp	r3, #0
 801e180:	d168      	bne.n	801e254 <f_open+0x1d0>
 801e182:	79fb      	ldrb	r3, [r7, #7]
 801e184:	f003 0308 	and.w	r3, r3, #8
 801e188:	2b00      	cmp	r3, #0
 801e18a:	d063      	beq.n	801e254 <f_open+0x1d0>
				dw = GET_FATTIME();
 801e18c:	f7f2 ff4e 	bl	801102c <get_fattime>
 801e190:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801e192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e194:	330e      	adds	r3, #14
 801e196:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801e198:	4618      	mov	r0, r3
 801e19a:	f7fe fa28 	bl	801c5ee <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801e19e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e1a0:	3316      	adds	r3, #22
 801e1a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801e1a4:	4618      	mov	r0, r3
 801e1a6:	f7fe fa22 	bl	801c5ee <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801e1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e1ac:	330b      	adds	r3, #11
 801e1ae:	2220      	movs	r2, #32
 801e1b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801e1b2:	693b      	ldr	r3, [r7, #16]
 801e1b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e1b6:	4611      	mov	r1, r2
 801e1b8:	4618      	mov	r0, r3
 801e1ba:	f7ff f977 	bl	801d4ac <ld_clust>
 801e1be:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801e1c0:	693b      	ldr	r3, [r7, #16]
 801e1c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e1c4:	2200      	movs	r2, #0
 801e1c6:	4618      	mov	r0, r3
 801e1c8:	f7ff f98f 	bl	801d4ea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801e1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e1ce:	331c      	adds	r3, #28
 801e1d0:	2100      	movs	r1, #0
 801e1d2:	4618      	mov	r0, r3
 801e1d4:	f7fe fa0b 	bl	801c5ee <st_dword>
					fs->wflag = 1;
 801e1d8:	693b      	ldr	r3, [r7, #16]
 801e1da:	2201      	movs	r2, #1
 801e1dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801e1de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d037      	beq.n	801e254 <f_open+0x1d0>
						dw = fs->winsect;
 801e1e4:	693b      	ldr	r3, [r7, #16]
 801e1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e1e8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801e1ea:	f107 0314 	add.w	r3, r7, #20
 801e1ee:	2200      	movs	r2, #0
 801e1f0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801e1f2:	4618      	mov	r0, r3
 801e1f4:	f7fe fea2 	bl	801cf3c <remove_chain>
 801e1f8:	4603      	mov	r3, r0
 801e1fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801e1fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e202:	2b00      	cmp	r3, #0
 801e204:	d126      	bne.n	801e254 <f_open+0x1d0>
							res = move_window(fs, dw);
 801e206:	693b      	ldr	r3, [r7, #16]
 801e208:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801e20a:	4618      	mov	r0, r3
 801e20c:	f7fe fc4a 	bl	801caa4 <move_window>
 801e210:	4603      	mov	r3, r0
 801e212:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801e216:	693b      	ldr	r3, [r7, #16]
 801e218:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801e21a:	3a01      	subs	r2, #1
 801e21c:	60da      	str	r2, [r3, #12]
 801e21e:	e019      	b.n	801e254 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801e220:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e224:	2b00      	cmp	r3, #0
 801e226:	d115      	bne.n	801e254 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801e228:	7ebb      	ldrb	r3, [r7, #26]
 801e22a:	f003 0310 	and.w	r3, r3, #16
 801e22e:	2b00      	cmp	r3, #0
 801e230:	d003      	beq.n	801e23a <f_open+0x1b6>
					res = FR_NO_FILE;
 801e232:	2304      	movs	r3, #4
 801e234:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801e238:	e00c      	b.n	801e254 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801e23a:	79fb      	ldrb	r3, [r7, #7]
 801e23c:	f003 0302 	and.w	r3, r3, #2
 801e240:	2b00      	cmp	r3, #0
 801e242:	d007      	beq.n	801e254 <f_open+0x1d0>
 801e244:	7ebb      	ldrb	r3, [r7, #26]
 801e246:	f003 0301 	and.w	r3, r3, #1
 801e24a:	2b00      	cmp	r3, #0
 801e24c:	d002      	beq.n	801e254 <f_open+0x1d0>
						res = FR_DENIED;
 801e24e:	2307      	movs	r3, #7
 801e250:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801e254:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e258:	2b00      	cmp	r3, #0
 801e25a:	d126      	bne.n	801e2aa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801e25c:	79fb      	ldrb	r3, [r7, #7]
 801e25e:	f003 0308 	and.w	r3, r3, #8
 801e262:	2b00      	cmp	r3, #0
 801e264:	d003      	beq.n	801e26e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801e266:	79fb      	ldrb	r3, [r7, #7]
 801e268:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e26c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801e26e:	693b      	ldr	r3, [r7, #16]
 801e270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801e276:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e278:	68fb      	ldr	r3, [r7, #12]
 801e27a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801e27c:	79fb      	ldrb	r3, [r7, #7]
 801e27e:	2b01      	cmp	r3, #1
 801e280:	bf8c      	ite	hi
 801e282:	2301      	movhi	r3, #1
 801e284:	2300      	movls	r3, #0
 801e286:	b2db      	uxtb	r3, r3
 801e288:	461a      	mov	r2, r3
 801e28a:	f107 0314 	add.w	r3, r7, #20
 801e28e:	4611      	mov	r1, r2
 801e290:	4618      	mov	r0, r3
 801e292:	f7fe fad5 	bl	801c840 <inc_lock>
 801e296:	4602      	mov	r2, r0
 801e298:	68fb      	ldr	r3, [r7, #12]
 801e29a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801e29c:	68fb      	ldr	r3, [r7, #12]
 801e29e:	691b      	ldr	r3, [r3, #16]
 801e2a0:	2b00      	cmp	r3, #0
 801e2a2:	d102      	bne.n	801e2aa <f_open+0x226>
 801e2a4:	2302      	movs	r3, #2
 801e2a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801e2aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	f040 8095 	bne.w	801e3de <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801e2b4:	693b      	ldr	r3, [r7, #16]
 801e2b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e2b8:	4611      	mov	r1, r2
 801e2ba:	4618      	mov	r0, r3
 801e2bc:	f7ff f8f6 	bl	801d4ac <ld_clust>
 801e2c0:	4602      	mov	r2, r0
 801e2c2:	68fb      	ldr	r3, [r7, #12]
 801e2c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801e2c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e2c8:	331c      	adds	r3, #28
 801e2ca:	4618      	mov	r0, r3
 801e2cc:	f7fe f951 	bl	801c572 <ld_dword>
 801e2d0:	4602      	mov	r2, r0
 801e2d2:	68fb      	ldr	r3, [r7, #12]
 801e2d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801e2d6:	68fb      	ldr	r3, [r7, #12]
 801e2d8:	2200      	movs	r2, #0
 801e2da:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801e2dc:	693a      	ldr	r2, [r7, #16]
 801e2de:	68fb      	ldr	r3, [r7, #12]
 801e2e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801e2e2:	693b      	ldr	r3, [r7, #16]
 801e2e4:	88da      	ldrh	r2, [r3, #6]
 801e2e6:	68fb      	ldr	r3, [r7, #12]
 801e2e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801e2ea:	68fb      	ldr	r3, [r7, #12]
 801e2ec:	79fa      	ldrb	r2, [r7, #7]
 801e2ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	2200      	movs	r2, #0
 801e2f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801e2f6:	68fb      	ldr	r3, [r7, #12]
 801e2f8:	2200      	movs	r2, #0
 801e2fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801e2fc:	68fb      	ldr	r3, [r7, #12]
 801e2fe:	2200      	movs	r2, #0
 801e300:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801e302:	68fb      	ldr	r3, [r7, #12]
 801e304:	3330      	adds	r3, #48	@ 0x30
 801e306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e30a:	2100      	movs	r1, #0
 801e30c:	4618      	mov	r0, r3
 801e30e:	f7fe f9bb 	bl	801c688 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801e312:	79fb      	ldrb	r3, [r7, #7]
 801e314:	f003 0320 	and.w	r3, r3, #32
 801e318:	2b00      	cmp	r3, #0
 801e31a:	d060      	beq.n	801e3de <f_open+0x35a>
 801e31c:	68fb      	ldr	r3, [r7, #12]
 801e31e:	68db      	ldr	r3, [r3, #12]
 801e320:	2b00      	cmp	r3, #0
 801e322:	d05c      	beq.n	801e3de <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	68da      	ldr	r2, [r3, #12]
 801e328:	68fb      	ldr	r3, [r7, #12]
 801e32a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801e32c:	693b      	ldr	r3, [r7, #16]
 801e32e:	895b      	ldrh	r3, [r3, #10]
 801e330:	025b      	lsls	r3, r3, #9
 801e332:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801e334:	68fb      	ldr	r3, [r7, #12]
 801e336:	689b      	ldr	r3, [r3, #8]
 801e338:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801e33a:	68fb      	ldr	r3, [r7, #12]
 801e33c:	68db      	ldr	r3, [r3, #12]
 801e33e:	657b      	str	r3, [r7, #84]	@ 0x54
 801e340:	e016      	b.n	801e370 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801e342:	68fb      	ldr	r3, [r7, #12]
 801e344:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801e346:	4618      	mov	r0, r3
 801e348:	f7fe fc67 	bl	801cc1a <get_fat>
 801e34c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801e34e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e350:	2b01      	cmp	r3, #1
 801e352:	d802      	bhi.n	801e35a <f_open+0x2d6>
 801e354:	2302      	movs	r3, #2
 801e356:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801e35a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e360:	d102      	bne.n	801e368 <f_open+0x2e4>
 801e362:	2301      	movs	r3, #1
 801e364:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801e368:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801e36a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e36c:	1ad3      	subs	r3, r2, r3
 801e36e:	657b      	str	r3, [r7, #84]	@ 0x54
 801e370:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e374:	2b00      	cmp	r3, #0
 801e376:	d103      	bne.n	801e380 <f_open+0x2fc>
 801e378:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801e37a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e37c:	429a      	cmp	r2, r3
 801e37e:	d8e0      	bhi.n	801e342 <f_open+0x2be>
				}
				fp->clust = clst;
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801e384:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801e386:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e38a:	2b00      	cmp	r3, #0
 801e38c:	d127      	bne.n	801e3de <f_open+0x35a>
 801e38e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e394:	2b00      	cmp	r3, #0
 801e396:	d022      	beq.n	801e3de <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801e398:	693b      	ldr	r3, [r7, #16]
 801e39a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801e39c:	4618      	mov	r0, r3
 801e39e:	f7fe fc1d 	bl	801cbdc <clust2sect>
 801e3a2:	6478      	str	r0, [r7, #68]	@ 0x44
 801e3a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e3a6:	2b00      	cmp	r3, #0
 801e3a8:	d103      	bne.n	801e3b2 <f_open+0x32e>
						res = FR_INT_ERR;
 801e3aa:	2302      	movs	r3, #2
 801e3ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801e3b0:	e015      	b.n	801e3de <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801e3b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e3b4:	0a5a      	lsrs	r2, r3, #9
 801e3b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e3b8:	441a      	add	r2, r3
 801e3ba:	68fb      	ldr	r3, [r7, #12]
 801e3bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801e3be:	693b      	ldr	r3, [r7, #16]
 801e3c0:	7858      	ldrb	r0, [r3, #1]
 801e3c2:	68fb      	ldr	r3, [r7, #12]
 801e3c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801e3c8:	68fb      	ldr	r3, [r7, #12]
 801e3ca:	6a1a      	ldr	r2, [r3, #32]
 801e3cc:	2301      	movs	r3, #1
 801e3ce:	f7fe f859 	bl	801c484 <disk_read>
 801e3d2:	4603      	mov	r3, r0
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	d002      	beq.n	801e3de <f_open+0x35a>
 801e3d8:	2301      	movs	r3, #1
 801e3da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801e3de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e3e2:	2b00      	cmp	r3, #0
 801e3e4:	d002      	beq.n	801e3ec <f_open+0x368>
 801e3e6:	68fb      	ldr	r3, [r7, #12]
 801e3e8:	2200      	movs	r2, #0
 801e3ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801e3ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801e3f0:	4618      	mov	r0, r3
 801e3f2:	3760      	adds	r7, #96	@ 0x60
 801e3f4:	46bd      	mov	sp, r7
 801e3f6:	bd80      	pop	{r7, pc}

0801e3f8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801e3f8:	b580      	push	{r7, lr}
 801e3fa:	b08c      	sub	sp, #48	@ 0x30
 801e3fc:	af00      	add	r7, sp, #0
 801e3fe:	60f8      	str	r0, [r7, #12]
 801e400:	60b9      	str	r1, [r7, #8]
 801e402:	607a      	str	r2, [r7, #4]
 801e404:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801e406:	68bb      	ldr	r3, [r7, #8]
 801e408:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801e40a:	683b      	ldr	r3, [r7, #0]
 801e40c:	2200      	movs	r2, #0
 801e40e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801e410:	68fb      	ldr	r3, [r7, #12]
 801e412:	f107 0210 	add.w	r2, r7, #16
 801e416:	4611      	mov	r1, r2
 801e418:	4618      	mov	r0, r3
 801e41a:	f7ff fdb7 	bl	801df8c <validate>
 801e41e:	4603      	mov	r3, r0
 801e420:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801e424:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e428:	2b00      	cmp	r3, #0
 801e42a:	d107      	bne.n	801e43c <f_write+0x44>
 801e42c:	68fb      	ldr	r3, [r7, #12]
 801e42e:	7d5b      	ldrb	r3, [r3, #21]
 801e430:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801e434:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e438:	2b00      	cmp	r3, #0
 801e43a:	d002      	beq.n	801e442 <f_write+0x4a>
 801e43c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e440:	e14b      	b.n	801e6da <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801e442:	68fb      	ldr	r3, [r7, #12]
 801e444:	7d1b      	ldrb	r3, [r3, #20]
 801e446:	f003 0302 	and.w	r3, r3, #2
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	d101      	bne.n	801e452 <f_write+0x5a>
 801e44e:	2307      	movs	r3, #7
 801e450:	e143      	b.n	801e6da <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	699a      	ldr	r2, [r3, #24]
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	441a      	add	r2, r3
 801e45a:	68fb      	ldr	r3, [r7, #12]
 801e45c:	699b      	ldr	r3, [r3, #24]
 801e45e:	429a      	cmp	r2, r3
 801e460:	f080 812d 	bcs.w	801e6be <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801e464:	68fb      	ldr	r3, [r7, #12]
 801e466:	699b      	ldr	r3, [r3, #24]
 801e468:	43db      	mvns	r3, r3
 801e46a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801e46c:	e127      	b.n	801e6be <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801e46e:	68fb      	ldr	r3, [r7, #12]
 801e470:	699b      	ldr	r3, [r3, #24]
 801e472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e476:	2b00      	cmp	r3, #0
 801e478:	f040 80e3 	bne.w	801e642 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801e47c:	68fb      	ldr	r3, [r7, #12]
 801e47e:	699b      	ldr	r3, [r3, #24]
 801e480:	0a5b      	lsrs	r3, r3, #9
 801e482:	693a      	ldr	r2, [r7, #16]
 801e484:	8952      	ldrh	r2, [r2, #10]
 801e486:	3a01      	subs	r2, #1
 801e488:	4013      	ands	r3, r2
 801e48a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801e48c:	69bb      	ldr	r3, [r7, #24]
 801e48e:	2b00      	cmp	r3, #0
 801e490:	d143      	bne.n	801e51a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	699b      	ldr	r3, [r3, #24]
 801e496:	2b00      	cmp	r3, #0
 801e498:	d10c      	bne.n	801e4b4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801e49a:	68fb      	ldr	r3, [r7, #12]
 801e49c:	689b      	ldr	r3, [r3, #8]
 801e49e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801e4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4a2:	2b00      	cmp	r3, #0
 801e4a4:	d11a      	bne.n	801e4dc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801e4a6:	68fb      	ldr	r3, [r7, #12]
 801e4a8:	2100      	movs	r1, #0
 801e4aa:	4618      	mov	r0, r3
 801e4ac:	f7fe fdab 	bl	801d006 <create_chain>
 801e4b0:	62b8      	str	r0, [r7, #40]	@ 0x28
 801e4b2:	e013      	b.n	801e4dc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801e4b4:	68fb      	ldr	r3, [r7, #12]
 801e4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	d007      	beq.n	801e4cc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801e4bc:	68fb      	ldr	r3, [r7, #12]
 801e4be:	699b      	ldr	r3, [r3, #24]
 801e4c0:	4619      	mov	r1, r3
 801e4c2:	68f8      	ldr	r0, [r7, #12]
 801e4c4:	f7fe fe37 	bl	801d136 <clmt_clust>
 801e4c8:	62b8      	str	r0, [r7, #40]	@ 0x28
 801e4ca:	e007      	b.n	801e4dc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801e4cc:	68fa      	ldr	r2, [r7, #12]
 801e4ce:	68fb      	ldr	r3, [r7, #12]
 801e4d0:	69db      	ldr	r3, [r3, #28]
 801e4d2:	4619      	mov	r1, r3
 801e4d4:	4610      	mov	r0, r2
 801e4d6:	f7fe fd96 	bl	801d006 <create_chain>
 801e4da:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801e4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	f000 80f2 	beq.w	801e6c8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801e4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4e6:	2b01      	cmp	r3, #1
 801e4e8:	d104      	bne.n	801e4f4 <f_write+0xfc>
 801e4ea:	68fb      	ldr	r3, [r7, #12]
 801e4ec:	2202      	movs	r2, #2
 801e4ee:	755a      	strb	r2, [r3, #21]
 801e4f0:	2302      	movs	r3, #2
 801e4f2:	e0f2      	b.n	801e6da <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801e4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e4fa:	d104      	bne.n	801e506 <f_write+0x10e>
 801e4fc:	68fb      	ldr	r3, [r7, #12]
 801e4fe:	2201      	movs	r2, #1
 801e500:	755a      	strb	r2, [r3, #21]
 801e502:	2301      	movs	r3, #1
 801e504:	e0e9      	b.n	801e6da <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801e506:	68fb      	ldr	r3, [r7, #12]
 801e508:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e50a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801e50c:	68fb      	ldr	r3, [r7, #12]
 801e50e:	689b      	ldr	r3, [r3, #8]
 801e510:	2b00      	cmp	r3, #0
 801e512:	d102      	bne.n	801e51a <f_write+0x122>
 801e514:	68fb      	ldr	r3, [r7, #12]
 801e516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e518:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801e51a:	68fb      	ldr	r3, [r7, #12]
 801e51c:	7d1b      	ldrb	r3, [r3, #20]
 801e51e:	b25b      	sxtb	r3, r3
 801e520:	2b00      	cmp	r3, #0
 801e522:	da18      	bge.n	801e556 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801e524:	693b      	ldr	r3, [r7, #16]
 801e526:	7858      	ldrb	r0, [r3, #1]
 801e528:	68fb      	ldr	r3, [r7, #12]
 801e52a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801e52e:	68fb      	ldr	r3, [r7, #12]
 801e530:	6a1a      	ldr	r2, [r3, #32]
 801e532:	2301      	movs	r3, #1
 801e534:	f7fd ffc6 	bl	801c4c4 <disk_write>
 801e538:	4603      	mov	r3, r0
 801e53a:	2b00      	cmp	r3, #0
 801e53c:	d004      	beq.n	801e548 <f_write+0x150>
 801e53e:	68fb      	ldr	r3, [r7, #12]
 801e540:	2201      	movs	r2, #1
 801e542:	755a      	strb	r2, [r3, #21]
 801e544:	2301      	movs	r3, #1
 801e546:	e0c8      	b.n	801e6da <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801e548:	68fb      	ldr	r3, [r7, #12]
 801e54a:	7d1b      	ldrb	r3, [r3, #20]
 801e54c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e550:	b2da      	uxtb	r2, r3
 801e552:	68fb      	ldr	r3, [r7, #12]
 801e554:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801e556:	693a      	ldr	r2, [r7, #16]
 801e558:	68fb      	ldr	r3, [r7, #12]
 801e55a:	69db      	ldr	r3, [r3, #28]
 801e55c:	4619      	mov	r1, r3
 801e55e:	4610      	mov	r0, r2
 801e560:	f7fe fb3c 	bl	801cbdc <clust2sect>
 801e564:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801e566:	697b      	ldr	r3, [r7, #20]
 801e568:	2b00      	cmp	r3, #0
 801e56a:	d104      	bne.n	801e576 <f_write+0x17e>
 801e56c:	68fb      	ldr	r3, [r7, #12]
 801e56e:	2202      	movs	r2, #2
 801e570:	755a      	strb	r2, [r3, #21]
 801e572:	2302      	movs	r3, #2
 801e574:	e0b1      	b.n	801e6da <f_write+0x2e2>
			sect += csect;
 801e576:	697a      	ldr	r2, [r7, #20]
 801e578:	69bb      	ldr	r3, [r7, #24]
 801e57a:	4413      	add	r3, r2
 801e57c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	0a5b      	lsrs	r3, r3, #9
 801e582:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801e584:	6a3b      	ldr	r3, [r7, #32]
 801e586:	2b00      	cmp	r3, #0
 801e588:	d03c      	beq.n	801e604 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801e58a:	69ba      	ldr	r2, [r7, #24]
 801e58c:	6a3b      	ldr	r3, [r7, #32]
 801e58e:	4413      	add	r3, r2
 801e590:	693a      	ldr	r2, [r7, #16]
 801e592:	8952      	ldrh	r2, [r2, #10]
 801e594:	4293      	cmp	r3, r2
 801e596:	d905      	bls.n	801e5a4 <f_write+0x1ac>
					cc = fs->csize - csect;
 801e598:	693b      	ldr	r3, [r7, #16]
 801e59a:	895b      	ldrh	r3, [r3, #10]
 801e59c:	461a      	mov	r2, r3
 801e59e:	69bb      	ldr	r3, [r7, #24]
 801e5a0:	1ad3      	subs	r3, r2, r3
 801e5a2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801e5a4:	693b      	ldr	r3, [r7, #16]
 801e5a6:	7858      	ldrb	r0, [r3, #1]
 801e5a8:	6a3b      	ldr	r3, [r7, #32]
 801e5aa:	697a      	ldr	r2, [r7, #20]
 801e5ac:	69f9      	ldr	r1, [r7, #28]
 801e5ae:	f7fd ff89 	bl	801c4c4 <disk_write>
 801e5b2:	4603      	mov	r3, r0
 801e5b4:	2b00      	cmp	r3, #0
 801e5b6:	d004      	beq.n	801e5c2 <f_write+0x1ca>
 801e5b8:	68fb      	ldr	r3, [r7, #12]
 801e5ba:	2201      	movs	r2, #1
 801e5bc:	755a      	strb	r2, [r3, #21]
 801e5be:	2301      	movs	r3, #1
 801e5c0:	e08b      	b.n	801e6da <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801e5c2:	68fb      	ldr	r3, [r7, #12]
 801e5c4:	6a1a      	ldr	r2, [r3, #32]
 801e5c6:	697b      	ldr	r3, [r7, #20]
 801e5c8:	1ad3      	subs	r3, r2, r3
 801e5ca:	6a3a      	ldr	r2, [r7, #32]
 801e5cc:	429a      	cmp	r2, r3
 801e5ce:	d915      	bls.n	801e5fc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801e5d0:	68fb      	ldr	r3, [r7, #12]
 801e5d2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801e5d6:	68fb      	ldr	r3, [r7, #12]
 801e5d8:	6a1a      	ldr	r2, [r3, #32]
 801e5da:	697b      	ldr	r3, [r7, #20]
 801e5dc:	1ad3      	subs	r3, r2, r3
 801e5de:	025b      	lsls	r3, r3, #9
 801e5e0:	69fa      	ldr	r2, [r7, #28]
 801e5e2:	4413      	add	r3, r2
 801e5e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e5e8:	4619      	mov	r1, r3
 801e5ea:	f7fe f82c 	bl	801c646 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801e5ee:	68fb      	ldr	r3, [r7, #12]
 801e5f0:	7d1b      	ldrb	r3, [r3, #20]
 801e5f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e5f6:	b2da      	uxtb	r2, r3
 801e5f8:	68fb      	ldr	r3, [r7, #12]
 801e5fa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801e5fc:	6a3b      	ldr	r3, [r7, #32]
 801e5fe:	025b      	lsls	r3, r3, #9
 801e600:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801e602:	e03f      	b.n	801e684 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801e604:	68fb      	ldr	r3, [r7, #12]
 801e606:	6a1b      	ldr	r3, [r3, #32]
 801e608:	697a      	ldr	r2, [r7, #20]
 801e60a:	429a      	cmp	r2, r3
 801e60c:	d016      	beq.n	801e63c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801e60e:	68fb      	ldr	r3, [r7, #12]
 801e610:	699a      	ldr	r2, [r3, #24]
 801e612:	68fb      	ldr	r3, [r7, #12]
 801e614:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801e616:	429a      	cmp	r2, r3
 801e618:	d210      	bcs.n	801e63c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801e61a:	693b      	ldr	r3, [r7, #16]
 801e61c:	7858      	ldrb	r0, [r3, #1]
 801e61e:	68fb      	ldr	r3, [r7, #12]
 801e620:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801e624:	2301      	movs	r3, #1
 801e626:	697a      	ldr	r2, [r7, #20]
 801e628:	f7fd ff2c 	bl	801c484 <disk_read>
 801e62c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801e62e:	2b00      	cmp	r3, #0
 801e630:	d004      	beq.n	801e63c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801e632:	68fb      	ldr	r3, [r7, #12]
 801e634:	2201      	movs	r2, #1
 801e636:	755a      	strb	r2, [r3, #21]
 801e638:	2301      	movs	r3, #1
 801e63a:	e04e      	b.n	801e6da <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801e63c:	68fb      	ldr	r3, [r7, #12]
 801e63e:	697a      	ldr	r2, [r7, #20]
 801e640:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801e642:	68fb      	ldr	r3, [r7, #12]
 801e644:	699b      	ldr	r3, [r3, #24]
 801e646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e64a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801e64e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801e650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	429a      	cmp	r2, r3
 801e656:	d901      	bls.n	801e65c <f_write+0x264>
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801e65c:	68fb      	ldr	r3, [r7, #12]
 801e65e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801e662:	68fb      	ldr	r3, [r7, #12]
 801e664:	699b      	ldr	r3, [r3, #24]
 801e666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e66a:	4413      	add	r3, r2
 801e66c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e66e:	69f9      	ldr	r1, [r7, #28]
 801e670:	4618      	mov	r0, r3
 801e672:	f7fd ffe8 	bl	801c646 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801e676:	68fb      	ldr	r3, [r7, #12]
 801e678:	7d1b      	ldrb	r3, [r3, #20]
 801e67a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801e67e:	b2da      	uxtb	r2, r3
 801e680:	68fb      	ldr	r3, [r7, #12]
 801e682:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801e684:	69fa      	ldr	r2, [r7, #28]
 801e686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e688:	4413      	add	r3, r2
 801e68a:	61fb      	str	r3, [r7, #28]
 801e68c:	68fb      	ldr	r3, [r7, #12]
 801e68e:	699a      	ldr	r2, [r3, #24]
 801e690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e692:	441a      	add	r2, r3
 801e694:	68fb      	ldr	r3, [r7, #12]
 801e696:	619a      	str	r2, [r3, #24]
 801e698:	68fb      	ldr	r3, [r7, #12]
 801e69a:	68da      	ldr	r2, [r3, #12]
 801e69c:	68fb      	ldr	r3, [r7, #12]
 801e69e:	699b      	ldr	r3, [r3, #24]
 801e6a0:	429a      	cmp	r2, r3
 801e6a2:	bf38      	it	cc
 801e6a4:	461a      	movcc	r2, r3
 801e6a6:	68fb      	ldr	r3, [r7, #12]
 801e6a8:	60da      	str	r2, [r3, #12]
 801e6aa:	683b      	ldr	r3, [r7, #0]
 801e6ac:	681a      	ldr	r2, [r3, #0]
 801e6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6b0:	441a      	add	r2, r3
 801e6b2:	683b      	ldr	r3, [r7, #0]
 801e6b4:	601a      	str	r2, [r3, #0]
 801e6b6:	687a      	ldr	r2, [r7, #4]
 801e6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6ba:	1ad3      	subs	r3, r2, r3
 801e6bc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801e6be:	687b      	ldr	r3, [r7, #4]
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	f47f aed4 	bne.w	801e46e <f_write+0x76>
 801e6c6:	e000      	b.n	801e6ca <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801e6c8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801e6ca:	68fb      	ldr	r3, [r7, #12]
 801e6cc:	7d1b      	ldrb	r3, [r3, #20]
 801e6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e6d2:	b2da      	uxtb	r2, r3
 801e6d4:	68fb      	ldr	r3, [r7, #12]
 801e6d6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801e6d8:	2300      	movs	r3, #0
}
 801e6da:	4618      	mov	r0, r3
 801e6dc:	3730      	adds	r7, #48	@ 0x30
 801e6de:	46bd      	mov	sp, r7
 801e6e0:	bd80      	pop	{r7, pc}

0801e6e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801e6e2:	b580      	push	{r7, lr}
 801e6e4:	b086      	sub	sp, #24
 801e6e6:	af00      	add	r7, sp, #0
 801e6e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801e6ea:	687b      	ldr	r3, [r7, #4]
 801e6ec:	f107 0208 	add.w	r2, r7, #8
 801e6f0:	4611      	mov	r1, r2
 801e6f2:	4618      	mov	r0, r3
 801e6f4:	f7ff fc4a 	bl	801df8c <validate>
 801e6f8:	4603      	mov	r3, r0
 801e6fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801e6fc:	7dfb      	ldrb	r3, [r7, #23]
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	d168      	bne.n	801e7d4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	7d1b      	ldrb	r3, [r3, #20]
 801e706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	d062      	beq.n	801e7d4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	7d1b      	ldrb	r3, [r3, #20]
 801e712:	b25b      	sxtb	r3, r3
 801e714:	2b00      	cmp	r3, #0
 801e716:	da15      	bge.n	801e744 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801e718:	68bb      	ldr	r3, [r7, #8]
 801e71a:	7858      	ldrb	r0, [r3, #1]
 801e71c:	687b      	ldr	r3, [r7, #4]
 801e71e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801e722:	687b      	ldr	r3, [r7, #4]
 801e724:	6a1a      	ldr	r2, [r3, #32]
 801e726:	2301      	movs	r3, #1
 801e728:	f7fd fecc 	bl	801c4c4 <disk_write>
 801e72c:	4603      	mov	r3, r0
 801e72e:	2b00      	cmp	r3, #0
 801e730:	d001      	beq.n	801e736 <f_sync+0x54>
 801e732:	2301      	movs	r3, #1
 801e734:	e04f      	b.n	801e7d6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801e736:	687b      	ldr	r3, [r7, #4]
 801e738:	7d1b      	ldrb	r3, [r3, #20]
 801e73a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e73e:	b2da      	uxtb	r2, r3
 801e740:	687b      	ldr	r3, [r7, #4]
 801e742:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801e744:	f7f2 fc72 	bl	801102c <get_fattime>
 801e748:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801e74a:	68ba      	ldr	r2, [r7, #8]
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e750:	4619      	mov	r1, r3
 801e752:	4610      	mov	r0, r2
 801e754:	f7fe f9a6 	bl	801caa4 <move_window>
 801e758:	4603      	mov	r3, r0
 801e75a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801e75c:	7dfb      	ldrb	r3, [r7, #23]
 801e75e:	2b00      	cmp	r3, #0
 801e760:	d138      	bne.n	801e7d4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e766:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801e768:	68fb      	ldr	r3, [r7, #12]
 801e76a:	330b      	adds	r3, #11
 801e76c:	781a      	ldrb	r2, [r3, #0]
 801e76e:	68fb      	ldr	r3, [r7, #12]
 801e770:	330b      	adds	r3, #11
 801e772:	f042 0220 	orr.w	r2, r2, #32
 801e776:	b2d2      	uxtb	r2, r2
 801e778:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	6818      	ldr	r0, [r3, #0]
 801e77e:	687b      	ldr	r3, [r7, #4]
 801e780:	689b      	ldr	r3, [r3, #8]
 801e782:	461a      	mov	r2, r3
 801e784:	68f9      	ldr	r1, [r7, #12]
 801e786:	f7fe feb0 	bl	801d4ea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801e78a:	68fb      	ldr	r3, [r7, #12]
 801e78c:	f103 021c 	add.w	r2, r3, #28
 801e790:	687b      	ldr	r3, [r7, #4]
 801e792:	68db      	ldr	r3, [r3, #12]
 801e794:	4619      	mov	r1, r3
 801e796:	4610      	mov	r0, r2
 801e798:	f7fd ff29 	bl	801c5ee <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801e79c:	68fb      	ldr	r3, [r7, #12]
 801e79e:	3316      	adds	r3, #22
 801e7a0:	6939      	ldr	r1, [r7, #16]
 801e7a2:	4618      	mov	r0, r3
 801e7a4:	f7fd ff23 	bl	801c5ee <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801e7a8:	68fb      	ldr	r3, [r7, #12]
 801e7aa:	3312      	adds	r3, #18
 801e7ac:	2100      	movs	r1, #0
 801e7ae:	4618      	mov	r0, r3
 801e7b0:	f7fd ff02 	bl	801c5b8 <st_word>
					fs->wflag = 1;
 801e7b4:	68bb      	ldr	r3, [r7, #8]
 801e7b6:	2201      	movs	r2, #1
 801e7b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801e7ba:	68bb      	ldr	r3, [r7, #8]
 801e7bc:	4618      	mov	r0, r3
 801e7be:	f7fe f99f 	bl	801cb00 <sync_fs>
 801e7c2:	4603      	mov	r3, r0
 801e7c4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	7d1b      	ldrb	r3, [r3, #20]
 801e7ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801e7ce:	b2da      	uxtb	r2, r3
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801e7d4:	7dfb      	ldrb	r3, [r7, #23]
}
 801e7d6:	4618      	mov	r0, r3
 801e7d8:	3718      	adds	r7, #24
 801e7da:	46bd      	mov	sp, r7
 801e7dc:	bd80      	pop	{r7, pc}

0801e7de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801e7de:	b580      	push	{r7, lr}
 801e7e0:	b084      	sub	sp, #16
 801e7e2:	af00      	add	r7, sp, #0
 801e7e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801e7e6:	6878      	ldr	r0, [r7, #4]
 801e7e8:	f7ff ff7b 	bl	801e6e2 <f_sync>
 801e7ec:	4603      	mov	r3, r0
 801e7ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801e7f0:	7bfb      	ldrb	r3, [r7, #15]
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d118      	bne.n	801e828 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	f107 0208 	add.w	r2, r7, #8
 801e7fc:	4611      	mov	r1, r2
 801e7fe:	4618      	mov	r0, r3
 801e800:	f7ff fbc4 	bl	801df8c <validate>
 801e804:	4603      	mov	r3, r0
 801e806:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801e808:	7bfb      	ldrb	r3, [r7, #15]
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	d10c      	bne.n	801e828 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	691b      	ldr	r3, [r3, #16]
 801e812:	4618      	mov	r0, r3
 801e814:	f7fe f8a2 	bl	801c95c <dec_lock>
 801e818:	4603      	mov	r3, r0
 801e81a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801e81c:	7bfb      	ldrb	r3, [r7, #15]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	d102      	bne.n	801e828 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	2200      	movs	r2, #0
 801e826:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801e828:	7bfb      	ldrb	r3, [r7, #15]
}
 801e82a:	4618      	mov	r0, r3
 801e82c:	3710      	adds	r7, #16
 801e82e:	46bd      	mov	sp, r7
 801e830:	bd80      	pop	{r7, pc}

0801e832 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801e832:	b580      	push	{r7, lr}
 801e834:	b090      	sub	sp, #64	@ 0x40
 801e836:	af00      	add	r7, sp, #0
 801e838:	6078      	str	r0, [r7, #4]
 801e83a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801e83c:	687b      	ldr	r3, [r7, #4]
 801e83e:	f107 0208 	add.w	r2, r7, #8
 801e842:	4611      	mov	r1, r2
 801e844:	4618      	mov	r0, r3
 801e846:	f7ff fba1 	bl	801df8c <validate>
 801e84a:	4603      	mov	r3, r0
 801e84c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801e850:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801e854:	2b00      	cmp	r3, #0
 801e856:	d103      	bne.n	801e860 <f_lseek+0x2e>
 801e858:	687b      	ldr	r3, [r7, #4]
 801e85a:	7d5b      	ldrb	r3, [r3, #21]
 801e85c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801e860:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801e864:	2b00      	cmp	r3, #0
 801e866:	d002      	beq.n	801e86e <f_lseek+0x3c>
 801e868:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801e86c:	e1e6      	b.n	801ec3c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e872:	2b00      	cmp	r3, #0
 801e874:	f000 80d1 	beq.w	801ea1a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801e878:	683b      	ldr	r3, [r7, #0]
 801e87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e87e:	d15a      	bne.n	801e936 <f_lseek+0x104>
			tbl = fp->cltbl;
 801e880:	687b      	ldr	r3, [r7, #4]
 801e882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e884:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801e886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e888:	1d1a      	adds	r2, r3, #4
 801e88a:	627a      	str	r2, [r7, #36]	@ 0x24
 801e88c:	681b      	ldr	r3, [r3, #0]
 801e88e:	617b      	str	r3, [r7, #20]
 801e890:	2302      	movs	r3, #2
 801e892:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	689b      	ldr	r3, [r3, #8]
 801e898:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801e89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e89c:	2b00      	cmp	r3, #0
 801e89e:	d03a      	beq.n	801e916 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801e8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e8a2:	613b      	str	r3, [r7, #16]
 801e8a4:	2300      	movs	r3, #0
 801e8a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e8aa:	3302      	adds	r3, #2
 801e8ac:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801e8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e8b0:	60fb      	str	r3, [r7, #12]
 801e8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e8b4:	3301      	adds	r3, #1
 801e8b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801e8bc:	4618      	mov	r0, r3
 801e8be:	f7fe f9ac 	bl	801cc1a <get_fat>
 801e8c2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801e8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e8c6:	2b01      	cmp	r3, #1
 801e8c8:	d804      	bhi.n	801e8d4 <f_lseek+0xa2>
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	2202      	movs	r2, #2
 801e8ce:	755a      	strb	r2, [r3, #21]
 801e8d0:	2302      	movs	r3, #2
 801e8d2:	e1b3      	b.n	801ec3c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801e8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e8da:	d104      	bne.n	801e8e6 <f_lseek+0xb4>
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	2201      	movs	r2, #1
 801e8e0:	755a      	strb	r2, [r3, #21]
 801e8e2:	2301      	movs	r3, #1
 801e8e4:	e1aa      	b.n	801ec3c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801e8e6:	68fb      	ldr	r3, [r7, #12]
 801e8e8:	3301      	adds	r3, #1
 801e8ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e8ec:	429a      	cmp	r2, r3
 801e8ee:	d0de      	beq.n	801e8ae <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801e8f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e8f2:	697b      	ldr	r3, [r7, #20]
 801e8f4:	429a      	cmp	r2, r3
 801e8f6:	d809      	bhi.n	801e90c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801e8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8fa:	1d1a      	adds	r2, r3, #4
 801e8fc:	627a      	str	r2, [r7, #36]	@ 0x24
 801e8fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e900:	601a      	str	r2, [r3, #0]
 801e902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e904:	1d1a      	adds	r2, r3, #4
 801e906:	627a      	str	r2, [r7, #36]	@ 0x24
 801e908:	693a      	ldr	r2, [r7, #16]
 801e90a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801e90c:	68bb      	ldr	r3, [r7, #8]
 801e90e:	695b      	ldr	r3, [r3, #20]
 801e910:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e912:	429a      	cmp	r2, r3
 801e914:	d3c4      	bcc.n	801e8a0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801e916:	687b      	ldr	r3, [r7, #4]
 801e918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e91a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e91c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801e91e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e920:	697b      	ldr	r3, [r7, #20]
 801e922:	429a      	cmp	r2, r3
 801e924:	d803      	bhi.n	801e92e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801e926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e928:	2200      	movs	r2, #0
 801e92a:	601a      	str	r2, [r3, #0]
 801e92c:	e184      	b.n	801ec38 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801e92e:	2311      	movs	r3, #17
 801e930:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801e934:	e180      	b.n	801ec38 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801e936:	687b      	ldr	r3, [r7, #4]
 801e938:	68db      	ldr	r3, [r3, #12]
 801e93a:	683a      	ldr	r2, [r7, #0]
 801e93c:	429a      	cmp	r2, r3
 801e93e:	d902      	bls.n	801e946 <f_lseek+0x114>
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	68db      	ldr	r3, [r3, #12]
 801e944:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801e946:	687b      	ldr	r3, [r7, #4]
 801e948:	683a      	ldr	r2, [r7, #0]
 801e94a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801e94c:	683b      	ldr	r3, [r7, #0]
 801e94e:	2b00      	cmp	r3, #0
 801e950:	f000 8172 	beq.w	801ec38 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801e954:	683b      	ldr	r3, [r7, #0]
 801e956:	3b01      	subs	r3, #1
 801e958:	4619      	mov	r1, r3
 801e95a:	6878      	ldr	r0, [r7, #4]
 801e95c:	f7fe fbeb 	bl	801d136 <clmt_clust>
 801e960:	4602      	mov	r2, r0
 801e962:	687b      	ldr	r3, [r7, #4]
 801e964:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801e966:	68ba      	ldr	r2, [r7, #8]
 801e968:	687b      	ldr	r3, [r7, #4]
 801e96a:	69db      	ldr	r3, [r3, #28]
 801e96c:	4619      	mov	r1, r3
 801e96e:	4610      	mov	r0, r2
 801e970:	f7fe f934 	bl	801cbdc <clust2sect>
 801e974:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801e976:	69bb      	ldr	r3, [r7, #24]
 801e978:	2b00      	cmp	r3, #0
 801e97a:	d104      	bne.n	801e986 <f_lseek+0x154>
 801e97c:	687b      	ldr	r3, [r7, #4]
 801e97e:	2202      	movs	r2, #2
 801e980:	755a      	strb	r2, [r3, #21]
 801e982:	2302      	movs	r3, #2
 801e984:	e15a      	b.n	801ec3c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801e986:	683b      	ldr	r3, [r7, #0]
 801e988:	3b01      	subs	r3, #1
 801e98a:	0a5b      	lsrs	r3, r3, #9
 801e98c:	68ba      	ldr	r2, [r7, #8]
 801e98e:	8952      	ldrh	r2, [r2, #10]
 801e990:	3a01      	subs	r2, #1
 801e992:	4013      	ands	r3, r2
 801e994:	69ba      	ldr	r2, [r7, #24]
 801e996:	4413      	add	r3, r2
 801e998:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801e99a:	687b      	ldr	r3, [r7, #4]
 801e99c:	699b      	ldr	r3, [r3, #24]
 801e99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	f000 8148 	beq.w	801ec38 <f_lseek+0x406>
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	6a1b      	ldr	r3, [r3, #32]
 801e9ac:	69ba      	ldr	r2, [r7, #24]
 801e9ae:	429a      	cmp	r2, r3
 801e9b0:	f000 8142 	beq.w	801ec38 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801e9b4:	687b      	ldr	r3, [r7, #4]
 801e9b6:	7d1b      	ldrb	r3, [r3, #20]
 801e9b8:	b25b      	sxtb	r3, r3
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	da18      	bge.n	801e9f0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801e9be:	68bb      	ldr	r3, [r7, #8]
 801e9c0:	7858      	ldrb	r0, [r3, #1]
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801e9c8:	687b      	ldr	r3, [r7, #4]
 801e9ca:	6a1a      	ldr	r2, [r3, #32]
 801e9cc:	2301      	movs	r3, #1
 801e9ce:	f7fd fd79 	bl	801c4c4 <disk_write>
 801e9d2:	4603      	mov	r3, r0
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	d004      	beq.n	801e9e2 <f_lseek+0x1b0>
 801e9d8:	687b      	ldr	r3, [r7, #4]
 801e9da:	2201      	movs	r2, #1
 801e9dc:	755a      	strb	r2, [r3, #21]
 801e9de:	2301      	movs	r3, #1
 801e9e0:	e12c      	b.n	801ec3c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	7d1b      	ldrb	r3, [r3, #20]
 801e9e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e9ea:	b2da      	uxtb	r2, r3
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801e9f0:	68bb      	ldr	r3, [r7, #8]
 801e9f2:	7858      	ldrb	r0, [r3, #1]
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801e9fa:	2301      	movs	r3, #1
 801e9fc:	69ba      	ldr	r2, [r7, #24]
 801e9fe:	f7fd fd41 	bl	801c484 <disk_read>
 801ea02:	4603      	mov	r3, r0
 801ea04:	2b00      	cmp	r3, #0
 801ea06:	d004      	beq.n	801ea12 <f_lseek+0x1e0>
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	2201      	movs	r2, #1
 801ea0c:	755a      	strb	r2, [r3, #21]
 801ea0e:	2301      	movs	r3, #1
 801ea10:	e114      	b.n	801ec3c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	69ba      	ldr	r2, [r7, #24]
 801ea16:	621a      	str	r2, [r3, #32]
 801ea18:	e10e      	b.n	801ec38 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	68db      	ldr	r3, [r3, #12]
 801ea1e:	683a      	ldr	r2, [r7, #0]
 801ea20:	429a      	cmp	r2, r3
 801ea22:	d908      	bls.n	801ea36 <f_lseek+0x204>
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	7d1b      	ldrb	r3, [r3, #20]
 801ea28:	f003 0302 	and.w	r3, r3, #2
 801ea2c:	2b00      	cmp	r3, #0
 801ea2e:	d102      	bne.n	801ea36 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 801ea30:	687b      	ldr	r3, [r7, #4]
 801ea32:	68db      	ldr	r3, [r3, #12]
 801ea34:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	699b      	ldr	r3, [r3, #24]
 801ea3a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801ea3c:	2300      	movs	r3, #0
 801ea3e:	637b      	str	r3, [r7, #52]	@ 0x34
 801ea40:	687b      	ldr	r3, [r7, #4]
 801ea42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ea44:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801ea46:	683b      	ldr	r3, [r7, #0]
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	f000 80a7 	beq.w	801eb9c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801ea4e:	68bb      	ldr	r3, [r7, #8]
 801ea50:	895b      	ldrh	r3, [r3, #10]
 801ea52:	025b      	lsls	r3, r3, #9
 801ea54:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801ea56:	6a3b      	ldr	r3, [r7, #32]
 801ea58:	2b00      	cmp	r3, #0
 801ea5a:	d01b      	beq.n	801ea94 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801ea5c:	683b      	ldr	r3, [r7, #0]
 801ea5e:	1e5a      	subs	r2, r3, #1
 801ea60:	69fb      	ldr	r3, [r7, #28]
 801ea62:	fbb2 f2f3 	udiv	r2, r2, r3
 801ea66:	6a3b      	ldr	r3, [r7, #32]
 801ea68:	1e59      	subs	r1, r3, #1
 801ea6a:	69fb      	ldr	r3, [r7, #28]
 801ea6c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801ea70:	429a      	cmp	r2, r3
 801ea72:	d30f      	bcc.n	801ea94 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801ea74:	6a3b      	ldr	r3, [r7, #32]
 801ea76:	1e5a      	subs	r2, r3, #1
 801ea78:	69fb      	ldr	r3, [r7, #28]
 801ea7a:	425b      	negs	r3, r3
 801ea7c:	401a      	ands	r2, r3
 801ea7e:	687b      	ldr	r3, [r7, #4]
 801ea80:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801ea82:	687b      	ldr	r3, [r7, #4]
 801ea84:	699b      	ldr	r3, [r3, #24]
 801ea86:	683a      	ldr	r2, [r7, #0]
 801ea88:	1ad3      	subs	r3, r2, r3
 801ea8a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	69db      	ldr	r3, [r3, #28]
 801ea90:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ea92:	e022      	b.n	801eada <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	689b      	ldr	r3, [r3, #8]
 801ea98:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801ea9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	d119      	bne.n	801ead4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	2100      	movs	r1, #0
 801eaa4:	4618      	mov	r0, r3
 801eaa6:	f7fe faae 	bl	801d006 <create_chain>
 801eaaa:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801eaac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eaae:	2b01      	cmp	r3, #1
 801eab0:	d104      	bne.n	801eabc <f_lseek+0x28a>
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	2202      	movs	r2, #2
 801eab6:	755a      	strb	r2, [r3, #21]
 801eab8:	2302      	movs	r3, #2
 801eaba:	e0bf      	b.n	801ec3c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801eabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eac2:	d104      	bne.n	801eace <f_lseek+0x29c>
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	2201      	movs	r2, #1
 801eac8:	755a      	strb	r2, [r3, #21]
 801eaca:	2301      	movs	r3, #1
 801eacc:	e0b6      	b.n	801ec3c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801eace:	687b      	ldr	r3, [r7, #4]
 801ead0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ead2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ead8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801eada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eadc:	2b00      	cmp	r3, #0
 801eade:	d05d      	beq.n	801eb9c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801eae0:	e03a      	b.n	801eb58 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801eae2:	683a      	ldr	r2, [r7, #0]
 801eae4:	69fb      	ldr	r3, [r7, #28]
 801eae6:	1ad3      	subs	r3, r2, r3
 801eae8:	603b      	str	r3, [r7, #0]
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	699a      	ldr	r2, [r3, #24]
 801eaee:	69fb      	ldr	r3, [r7, #28]
 801eaf0:	441a      	add	r2, r3
 801eaf2:	687b      	ldr	r3, [r7, #4]
 801eaf4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	7d1b      	ldrb	r3, [r3, #20]
 801eafa:	f003 0302 	and.w	r3, r3, #2
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d00b      	beq.n	801eb1a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801eb06:	4618      	mov	r0, r3
 801eb08:	f7fe fa7d 	bl	801d006 <create_chain>
 801eb0c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801eb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	d108      	bne.n	801eb26 <f_lseek+0x2f4>
							ofs = 0; break;
 801eb14:	2300      	movs	r3, #0
 801eb16:	603b      	str	r3, [r7, #0]
 801eb18:	e022      	b.n	801eb60 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801eb1a:	687b      	ldr	r3, [r7, #4]
 801eb1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801eb1e:	4618      	mov	r0, r3
 801eb20:	f7fe f87b 	bl	801cc1a <get_fat>
 801eb24:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801eb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 801eb2c:	d104      	bne.n	801eb38 <f_lseek+0x306>
 801eb2e:	687b      	ldr	r3, [r7, #4]
 801eb30:	2201      	movs	r2, #1
 801eb32:	755a      	strb	r2, [r3, #21]
 801eb34:	2301      	movs	r3, #1
 801eb36:	e081      	b.n	801ec3c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801eb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eb3a:	2b01      	cmp	r3, #1
 801eb3c:	d904      	bls.n	801eb48 <f_lseek+0x316>
 801eb3e:	68bb      	ldr	r3, [r7, #8]
 801eb40:	695b      	ldr	r3, [r3, #20]
 801eb42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801eb44:	429a      	cmp	r2, r3
 801eb46:	d304      	bcc.n	801eb52 <f_lseek+0x320>
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	2202      	movs	r2, #2
 801eb4c:	755a      	strb	r2, [r3, #21]
 801eb4e:	2302      	movs	r3, #2
 801eb50:	e074      	b.n	801ec3c <f_lseek+0x40a>
					fp->clust = clst;
 801eb52:	687b      	ldr	r3, [r7, #4]
 801eb54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801eb56:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801eb58:	683a      	ldr	r2, [r7, #0]
 801eb5a:	69fb      	ldr	r3, [r7, #28]
 801eb5c:	429a      	cmp	r2, r3
 801eb5e:	d8c0      	bhi.n	801eae2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	699a      	ldr	r2, [r3, #24]
 801eb64:	683b      	ldr	r3, [r7, #0]
 801eb66:	441a      	add	r2, r3
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801eb6c:	683b      	ldr	r3, [r7, #0]
 801eb6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eb72:	2b00      	cmp	r3, #0
 801eb74:	d012      	beq.n	801eb9c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801eb76:	68bb      	ldr	r3, [r7, #8]
 801eb78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801eb7a:	4618      	mov	r0, r3
 801eb7c:	f7fe f82e 	bl	801cbdc <clust2sect>
 801eb80:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801eb82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eb84:	2b00      	cmp	r3, #0
 801eb86:	d104      	bne.n	801eb92 <f_lseek+0x360>
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	2202      	movs	r2, #2
 801eb8c:	755a      	strb	r2, [r3, #21]
 801eb8e:	2302      	movs	r3, #2
 801eb90:	e054      	b.n	801ec3c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801eb92:	683b      	ldr	r3, [r7, #0]
 801eb94:	0a5b      	lsrs	r3, r3, #9
 801eb96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801eb98:	4413      	add	r3, r2
 801eb9a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801eb9c:	687b      	ldr	r3, [r7, #4]
 801eb9e:	699a      	ldr	r2, [r3, #24]
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	68db      	ldr	r3, [r3, #12]
 801eba4:	429a      	cmp	r2, r3
 801eba6:	d90a      	bls.n	801ebbe <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	699a      	ldr	r2, [r3, #24]
 801ebac:	687b      	ldr	r3, [r7, #4]
 801ebae:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	7d1b      	ldrb	r3, [r3, #20]
 801ebb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ebb8:	b2da      	uxtb	r2, r3
 801ebba:	687b      	ldr	r3, [r7, #4]
 801ebbc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	699b      	ldr	r3, [r3, #24]
 801ebc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ebc6:	2b00      	cmp	r3, #0
 801ebc8:	d036      	beq.n	801ec38 <f_lseek+0x406>
 801ebca:	687b      	ldr	r3, [r7, #4]
 801ebcc:	6a1b      	ldr	r3, [r3, #32]
 801ebce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ebd0:	429a      	cmp	r2, r3
 801ebd2:	d031      	beq.n	801ec38 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801ebd4:	687b      	ldr	r3, [r7, #4]
 801ebd6:	7d1b      	ldrb	r3, [r3, #20]
 801ebd8:	b25b      	sxtb	r3, r3
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	da18      	bge.n	801ec10 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ebde:	68bb      	ldr	r3, [r7, #8]
 801ebe0:	7858      	ldrb	r0, [r3, #1]
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	6a1a      	ldr	r2, [r3, #32]
 801ebec:	2301      	movs	r3, #1
 801ebee:	f7fd fc69 	bl	801c4c4 <disk_write>
 801ebf2:	4603      	mov	r3, r0
 801ebf4:	2b00      	cmp	r3, #0
 801ebf6:	d004      	beq.n	801ec02 <f_lseek+0x3d0>
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	2201      	movs	r2, #1
 801ebfc:	755a      	strb	r2, [r3, #21]
 801ebfe:	2301      	movs	r3, #1
 801ec00:	e01c      	b.n	801ec3c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	7d1b      	ldrb	r3, [r3, #20]
 801ec06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ec0a:	b2da      	uxtb	r2, r3
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801ec10:	68bb      	ldr	r3, [r7, #8]
 801ec12:	7858      	ldrb	r0, [r3, #1]
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ec1a:	2301      	movs	r3, #1
 801ec1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ec1e:	f7fd fc31 	bl	801c484 <disk_read>
 801ec22:	4603      	mov	r3, r0
 801ec24:	2b00      	cmp	r3, #0
 801ec26:	d004      	beq.n	801ec32 <f_lseek+0x400>
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	2201      	movs	r2, #1
 801ec2c:	755a      	strb	r2, [r3, #21]
 801ec2e:	2301      	movs	r3, #1
 801ec30:	e004      	b.n	801ec3c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801ec32:	687b      	ldr	r3, [r7, #4]
 801ec34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ec36:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801ec38:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801ec3c:	4618      	mov	r0, r3
 801ec3e:	3740      	adds	r7, #64	@ 0x40
 801ec40:	46bd      	mov	sp, r7
 801ec42:	bd80      	pop	{r7, pc}

0801ec44 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801ec44:	b580      	push	{r7, lr}
 801ec46:	b086      	sub	sp, #24
 801ec48:	af00      	add	r7, sp, #0
 801ec4a:	6078      	str	r0, [r7, #4]
 801ec4c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	d101      	bne.n	801ec58 <f_opendir+0x14>
 801ec54:	2309      	movs	r3, #9
 801ec56:	e064      	b.n	801ed22 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801ec58:	687b      	ldr	r3, [r7, #4]
 801ec5a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801ec5c:	f107 010c 	add.w	r1, r7, #12
 801ec60:	463b      	mov	r3, r7
 801ec62:	2200      	movs	r2, #0
 801ec64:	4618      	mov	r0, r3
 801ec66:	f7fe ff45 	bl	801daf4 <find_volume>
 801ec6a:	4603      	mov	r3, r0
 801ec6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801ec6e:	7dfb      	ldrb	r3, [r7, #23]
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	d14f      	bne.n	801ed14 <f_opendir+0xd0>
		obj->fs = fs;
 801ec74:	68fa      	ldr	r2, [r7, #12]
 801ec76:	693b      	ldr	r3, [r7, #16]
 801ec78:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801ec7a:	683b      	ldr	r3, [r7, #0]
 801ec7c:	4619      	mov	r1, r3
 801ec7e:	6878      	ldr	r0, [r7, #4]
 801ec80:	f7fe fe2c 	bl	801d8dc <follow_path>
 801ec84:	4603      	mov	r3, r0
 801ec86:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801ec88:	7dfb      	ldrb	r3, [r7, #23]
 801ec8a:	2b00      	cmp	r3, #0
 801ec8c:	d13d      	bne.n	801ed0a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801ec8e:	687b      	ldr	r3, [r7, #4]
 801ec90:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801ec94:	b25b      	sxtb	r3, r3
 801ec96:	2b00      	cmp	r3, #0
 801ec98:	db12      	blt.n	801ecc0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801ec9a:	693b      	ldr	r3, [r7, #16]
 801ec9c:	799b      	ldrb	r3, [r3, #6]
 801ec9e:	f003 0310 	and.w	r3, r3, #16
 801eca2:	2b00      	cmp	r3, #0
 801eca4:	d00a      	beq.n	801ecbc <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801eca6:	68fa      	ldr	r2, [r7, #12]
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	6a1b      	ldr	r3, [r3, #32]
 801ecac:	4619      	mov	r1, r3
 801ecae:	4610      	mov	r0, r2
 801ecb0:	f7fe fbfc 	bl	801d4ac <ld_clust>
 801ecb4:	4602      	mov	r2, r0
 801ecb6:	693b      	ldr	r3, [r7, #16]
 801ecb8:	609a      	str	r2, [r3, #8]
 801ecba:	e001      	b.n	801ecc0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801ecbc:	2305      	movs	r3, #5
 801ecbe:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801ecc0:	7dfb      	ldrb	r3, [r7, #23]
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	d121      	bne.n	801ed0a <f_opendir+0xc6>
				obj->id = fs->id;
 801ecc6:	68fb      	ldr	r3, [r7, #12]
 801ecc8:	88da      	ldrh	r2, [r3, #6]
 801ecca:	693b      	ldr	r3, [r7, #16]
 801eccc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801ecce:	2100      	movs	r1, #0
 801ecd0:	6878      	ldr	r0, [r7, #4]
 801ecd2:	f7fe fa64 	bl	801d19e <dir_sdi>
 801ecd6:	4603      	mov	r3, r0
 801ecd8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801ecda:	7dfb      	ldrb	r3, [r7, #23]
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d114      	bne.n	801ed0a <f_opendir+0xc6>
					if (obj->sclust) {
 801ece0:	693b      	ldr	r3, [r7, #16]
 801ece2:	689b      	ldr	r3, [r3, #8]
 801ece4:	2b00      	cmp	r3, #0
 801ece6:	d00d      	beq.n	801ed04 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801ece8:	2100      	movs	r1, #0
 801ecea:	6878      	ldr	r0, [r7, #4]
 801ecec:	f7fd fda8 	bl	801c840 <inc_lock>
 801ecf0:	4602      	mov	r2, r0
 801ecf2:	693b      	ldr	r3, [r7, #16]
 801ecf4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801ecf6:	693b      	ldr	r3, [r7, #16]
 801ecf8:	691b      	ldr	r3, [r3, #16]
 801ecfa:	2b00      	cmp	r3, #0
 801ecfc:	d105      	bne.n	801ed0a <f_opendir+0xc6>
 801ecfe:	2312      	movs	r3, #18
 801ed00:	75fb      	strb	r3, [r7, #23]
 801ed02:	e002      	b.n	801ed0a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801ed04:	693b      	ldr	r3, [r7, #16]
 801ed06:	2200      	movs	r2, #0
 801ed08:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801ed0a:	7dfb      	ldrb	r3, [r7, #23]
 801ed0c:	2b04      	cmp	r3, #4
 801ed0e:	d101      	bne.n	801ed14 <f_opendir+0xd0>
 801ed10:	2305      	movs	r3, #5
 801ed12:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801ed14:	7dfb      	ldrb	r3, [r7, #23]
 801ed16:	2b00      	cmp	r3, #0
 801ed18:	d002      	beq.n	801ed20 <f_opendir+0xdc>
 801ed1a:	693b      	ldr	r3, [r7, #16]
 801ed1c:	2200      	movs	r2, #0
 801ed1e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801ed20:	7dfb      	ldrb	r3, [r7, #23]
}
 801ed22:	4618      	mov	r0, r3
 801ed24:	3718      	adds	r7, #24
 801ed26:	46bd      	mov	sp, r7
 801ed28:	bd80      	pop	{r7, pc}

0801ed2a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801ed2a:	b580      	push	{r7, lr}
 801ed2c:	b084      	sub	sp, #16
 801ed2e:	af00      	add	r7, sp, #0
 801ed30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	f107 0208 	add.w	r2, r7, #8
 801ed38:	4611      	mov	r1, r2
 801ed3a:	4618      	mov	r0, r3
 801ed3c:	f7ff f926 	bl	801df8c <validate>
 801ed40:	4603      	mov	r3, r0
 801ed42:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801ed44:	7bfb      	ldrb	r3, [r7, #15]
 801ed46:	2b00      	cmp	r3, #0
 801ed48:	d110      	bne.n	801ed6c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801ed4a:	687b      	ldr	r3, [r7, #4]
 801ed4c:	691b      	ldr	r3, [r3, #16]
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	d006      	beq.n	801ed60 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	691b      	ldr	r3, [r3, #16]
 801ed56:	4618      	mov	r0, r3
 801ed58:	f7fd fe00 	bl	801c95c <dec_lock>
 801ed5c:	4603      	mov	r3, r0
 801ed5e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801ed60:	7bfb      	ldrb	r3, [r7, #15]
 801ed62:	2b00      	cmp	r3, #0
 801ed64:	d102      	bne.n	801ed6c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	2200      	movs	r2, #0
 801ed6a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801ed6c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ed6e:	4618      	mov	r0, r3
 801ed70:	3710      	adds	r7, #16
 801ed72:	46bd      	mov	sp, r7
 801ed74:	bd80      	pop	{r7, pc}

0801ed76 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801ed76:	b580      	push	{r7, lr}
 801ed78:	b084      	sub	sp, #16
 801ed7a:	af00      	add	r7, sp, #0
 801ed7c:	6078      	str	r0, [r7, #4]
 801ed7e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	f107 0208 	add.w	r2, r7, #8
 801ed86:	4611      	mov	r1, r2
 801ed88:	4618      	mov	r0, r3
 801ed8a:	f7ff f8ff 	bl	801df8c <validate>
 801ed8e:	4603      	mov	r3, r0
 801ed90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801ed92:	7bfb      	ldrb	r3, [r7, #15]
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	d126      	bne.n	801ede6 <f_readdir+0x70>
		if (!fno) {
 801ed98:	683b      	ldr	r3, [r7, #0]
 801ed9a:	2b00      	cmp	r3, #0
 801ed9c:	d106      	bne.n	801edac <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801ed9e:	2100      	movs	r1, #0
 801eda0:	6878      	ldr	r0, [r7, #4]
 801eda2:	f7fe f9fc 	bl	801d19e <dir_sdi>
 801eda6:	4603      	mov	r3, r0
 801eda8:	73fb      	strb	r3, [r7, #15]
 801edaa:	e01c      	b.n	801ede6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801edac:	2100      	movs	r1, #0
 801edae:	6878      	ldr	r0, [r7, #4]
 801edb0:	f7fe fbbb 	bl	801d52a <dir_read>
 801edb4:	4603      	mov	r3, r0
 801edb6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801edb8:	7bfb      	ldrb	r3, [r7, #15]
 801edba:	2b04      	cmp	r3, #4
 801edbc:	d101      	bne.n	801edc2 <f_readdir+0x4c>
 801edbe:	2300      	movs	r3, #0
 801edc0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801edc2:	7bfb      	ldrb	r3, [r7, #15]
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	d10e      	bne.n	801ede6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801edc8:	6839      	ldr	r1, [r7, #0]
 801edca:	6878      	ldr	r0, [r7, #4]
 801edcc:	f7fe fc91 	bl	801d6f2 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801edd0:	2100      	movs	r1, #0
 801edd2:	6878      	ldr	r0, [r7, #4]
 801edd4:	f7fe fa5e 	bl	801d294 <dir_next>
 801edd8:	4603      	mov	r3, r0
 801edda:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801eddc:	7bfb      	ldrb	r3, [r7, #15]
 801edde:	2b04      	cmp	r3, #4
 801ede0:	d101      	bne.n	801ede6 <f_readdir+0x70>
 801ede2:	2300      	movs	r3, #0
 801ede4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801ede6:	7bfb      	ldrb	r3, [r7, #15]
}
 801ede8:	4618      	mov	r0, r3
 801edea:	3710      	adds	r7, #16
 801edec:	46bd      	mov	sp, r7
 801edee:	bd80      	pop	{r7, pc}

0801edf0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801edf0:	b480      	push	{r7}
 801edf2:	b087      	sub	sp, #28
 801edf4:	af00      	add	r7, sp, #0
 801edf6:	60f8      	str	r0, [r7, #12]
 801edf8:	60b9      	str	r1, [r7, #8]
 801edfa:	4613      	mov	r3, r2
 801edfc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801edfe:	2301      	movs	r3, #1
 801ee00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801ee02:	2300      	movs	r3, #0
 801ee04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801ee06:	4b1f      	ldr	r3, [pc, #124]	@ (801ee84 <FATFS_LinkDriverEx+0x94>)
 801ee08:	7a5b      	ldrb	r3, [r3, #9]
 801ee0a:	b2db      	uxtb	r3, r3
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	d131      	bne.n	801ee74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801ee10:	4b1c      	ldr	r3, [pc, #112]	@ (801ee84 <FATFS_LinkDriverEx+0x94>)
 801ee12:	7a5b      	ldrb	r3, [r3, #9]
 801ee14:	b2db      	uxtb	r3, r3
 801ee16:	461a      	mov	r2, r3
 801ee18:	4b1a      	ldr	r3, [pc, #104]	@ (801ee84 <FATFS_LinkDriverEx+0x94>)
 801ee1a:	2100      	movs	r1, #0
 801ee1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801ee1e:	4b19      	ldr	r3, [pc, #100]	@ (801ee84 <FATFS_LinkDriverEx+0x94>)
 801ee20:	7a5b      	ldrb	r3, [r3, #9]
 801ee22:	b2db      	uxtb	r3, r3
 801ee24:	4a17      	ldr	r2, [pc, #92]	@ (801ee84 <FATFS_LinkDriverEx+0x94>)
 801ee26:	009b      	lsls	r3, r3, #2
 801ee28:	4413      	add	r3, r2
 801ee2a:	68fa      	ldr	r2, [r7, #12]
 801ee2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801ee2e:	4b15      	ldr	r3, [pc, #84]	@ (801ee84 <FATFS_LinkDriverEx+0x94>)
 801ee30:	7a5b      	ldrb	r3, [r3, #9]
 801ee32:	b2db      	uxtb	r3, r3
 801ee34:	461a      	mov	r2, r3
 801ee36:	4b13      	ldr	r3, [pc, #76]	@ (801ee84 <FATFS_LinkDriverEx+0x94>)
 801ee38:	4413      	add	r3, r2
 801ee3a:	79fa      	ldrb	r2, [r7, #7]
 801ee3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801ee3e:	4b11      	ldr	r3, [pc, #68]	@ (801ee84 <FATFS_LinkDriverEx+0x94>)
 801ee40:	7a5b      	ldrb	r3, [r3, #9]
 801ee42:	b2db      	uxtb	r3, r3
 801ee44:	1c5a      	adds	r2, r3, #1
 801ee46:	b2d1      	uxtb	r1, r2
 801ee48:	4a0e      	ldr	r2, [pc, #56]	@ (801ee84 <FATFS_LinkDriverEx+0x94>)
 801ee4a:	7251      	strb	r1, [r2, #9]
 801ee4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801ee4e:	7dbb      	ldrb	r3, [r7, #22]
 801ee50:	3330      	adds	r3, #48	@ 0x30
 801ee52:	b2da      	uxtb	r2, r3
 801ee54:	68bb      	ldr	r3, [r7, #8]
 801ee56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801ee58:	68bb      	ldr	r3, [r7, #8]
 801ee5a:	3301      	adds	r3, #1
 801ee5c:	223a      	movs	r2, #58	@ 0x3a
 801ee5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801ee60:	68bb      	ldr	r3, [r7, #8]
 801ee62:	3302      	adds	r3, #2
 801ee64:	222f      	movs	r2, #47	@ 0x2f
 801ee66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801ee68:	68bb      	ldr	r3, [r7, #8]
 801ee6a:	3303      	adds	r3, #3
 801ee6c:	2200      	movs	r2, #0
 801ee6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801ee70:	2300      	movs	r3, #0
 801ee72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801ee74:	7dfb      	ldrb	r3, [r7, #23]
}
 801ee76:	4618      	mov	r0, r3
 801ee78:	371c      	adds	r7, #28
 801ee7a:	46bd      	mov	sp, r7
 801ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee80:	4770      	bx	lr
 801ee82:	bf00      	nop
 801ee84:	24008c90 	.word	0x24008c90

0801ee88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801ee88:	b580      	push	{r7, lr}
 801ee8a:	b082      	sub	sp, #8
 801ee8c:	af00      	add	r7, sp, #0
 801ee8e:	6078      	str	r0, [r7, #4]
 801ee90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801ee92:	2200      	movs	r2, #0
 801ee94:	6839      	ldr	r1, [r7, #0]
 801ee96:	6878      	ldr	r0, [r7, #4]
 801ee98:	f7ff ffaa 	bl	801edf0 <FATFS_LinkDriverEx>
 801ee9c:	4603      	mov	r3, r0
}
 801ee9e:	4618      	mov	r0, r3
 801eea0:	3708      	adds	r7, #8
 801eea2:	46bd      	mov	sp, r7
 801eea4:	bd80      	pop	{r7, pc}

0801eea6 <atoi>:
 801eea6:	220a      	movs	r2, #10
 801eea8:	2100      	movs	r1, #0
 801eeaa:	f000 b87b 	b.w	801efa4 <strtol>
	...

0801eeb0 <_strtol_l.isra.0>:
 801eeb0:	2b24      	cmp	r3, #36	@ 0x24
 801eeb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eeb6:	4686      	mov	lr, r0
 801eeb8:	4690      	mov	r8, r2
 801eeba:	d801      	bhi.n	801eec0 <_strtol_l.isra.0+0x10>
 801eebc:	2b01      	cmp	r3, #1
 801eebe:	d106      	bne.n	801eece <_strtol_l.isra.0+0x1e>
 801eec0:	f000 fb7c 	bl	801f5bc <__errno>
 801eec4:	2316      	movs	r3, #22
 801eec6:	6003      	str	r3, [r0, #0]
 801eec8:	2000      	movs	r0, #0
 801eeca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eece:	4834      	ldr	r0, [pc, #208]	@ (801efa0 <_strtol_l.isra.0+0xf0>)
 801eed0:	460d      	mov	r5, r1
 801eed2:	462a      	mov	r2, r5
 801eed4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801eed8:	5d06      	ldrb	r6, [r0, r4]
 801eeda:	f016 0608 	ands.w	r6, r6, #8
 801eede:	d1f8      	bne.n	801eed2 <_strtol_l.isra.0+0x22>
 801eee0:	2c2d      	cmp	r4, #45	@ 0x2d
 801eee2:	d110      	bne.n	801ef06 <_strtol_l.isra.0+0x56>
 801eee4:	782c      	ldrb	r4, [r5, #0]
 801eee6:	2601      	movs	r6, #1
 801eee8:	1c95      	adds	r5, r2, #2
 801eeea:	f033 0210 	bics.w	r2, r3, #16
 801eeee:	d115      	bne.n	801ef1c <_strtol_l.isra.0+0x6c>
 801eef0:	2c30      	cmp	r4, #48	@ 0x30
 801eef2:	d10d      	bne.n	801ef10 <_strtol_l.isra.0+0x60>
 801eef4:	782a      	ldrb	r2, [r5, #0]
 801eef6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801eefa:	2a58      	cmp	r2, #88	@ 0x58
 801eefc:	d108      	bne.n	801ef10 <_strtol_l.isra.0+0x60>
 801eefe:	786c      	ldrb	r4, [r5, #1]
 801ef00:	3502      	adds	r5, #2
 801ef02:	2310      	movs	r3, #16
 801ef04:	e00a      	b.n	801ef1c <_strtol_l.isra.0+0x6c>
 801ef06:	2c2b      	cmp	r4, #43	@ 0x2b
 801ef08:	bf04      	itt	eq
 801ef0a:	782c      	ldrbeq	r4, [r5, #0]
 801ef0c:	1c95      	addeq	r5, r2, #2
 801ef0e:	e7ec      	b.n	801eeea <_strtol_l.isra.0+0x3a>
 801ef10:	2b00      	cmp	r3, #0
 801ef12:	d1f6      	bne.n	801ef02 <_strtol_l.isra.0+0x52>
 801ef14:	2c30      	cmp	r4, #48	@ 0x30
 801ef16:	bf14      	ite	ne
 801ef18:	230a      	movne	r3, #10
 801ef1a:	2308      	moveq	r3, #8
 801ef1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801ef20:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ef24:	2200      	movs	r2, #0
 801ef26:	fbbc f9f3 	udiv	r9, ip, r3
 801ef2a:	4610      	mov	r0, r2
 801ef2c:	fb03 ca19 	mls	sl, r3, r9, ip
 801ef30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801ef34:	2f09      	cmp	r7, #9
 801ef36:	d80f      	bhi.n	801ef58 <_strtol_l.isra.0+0xa8>
 801ef38:	463c      	mov	r4, r7
 801ef3a:	42a3      	cmp	r3, r4
 801ef3c:	dd1b      	ble.n	801ef76 <_strtol_l.isra.0+0xc6>
 801ef3e:	1c57      	adds	r7, r2, #1
 801ef40:	d007      	beq.n	801ef52 <_strtol_l.isra.0+0xa2>
 801ef42:	4581      	cmp	r9, r0
 801ef44:	d314      	bcc.n	801ef70 <_strtol_l.isra.0+0xc0>
 801ef46:	d101      	bne.n	801ef4c <_strtol_l.isra.0+0x9c>
 801ef48:	45a2      	cmp	sl, r4
 801ef4a:	db11      	blt.n	801ef70 <_strtol_l.isra.0+0xc0>
 801ef4c:	fb00 4003 	mla	r0, r0, r3, r4
 801ef50:	2201      	movs	r2, #1
 801ef52:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ef56:	e7eb      	b.n	801ef30 <_strtol_l.isra.0+0x80>
 801ef58:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801ef5c:	2f19      	cmp	r7, #25
 801ef5e:	d801      	bhi.n	801ef64 <_strtol_l.isra.0+0xb4>
 801ef60:	3c37      	subs	r4, #55	@ 0x37
 801ef62:	e7ea      	b.n	801ef3a <_strtol_l.isra.0+0x8a>
 801ef64:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801ef68:	2f19      	cmp	r7, #25
 801ef6a:	d804      	bhi.n	801ef76 <_strtol_l.isra.0+0xc6>
 801ef6c:	3c57      	subs	r4, #87	@ 0x57
 801ef6e:	e7e4      	b.n	801ef3a <_strtol_l.isra.0+0x8a>
 801ef70:	f04f 32ff 	mov.w	r2, #4294967295
 801ef74:	e7ed      	b.n	801ef52 <_strtol_l.isra.0+0xa2>
 801ef76:	1c53      	adds	r3, r2, #1
 801ef78:	d108      	bne.n	801ef8c <_strtol_l.isra.0+0xdc>
 801ef7a:	2322      	movs	r3, #34	@ 0x22
 801ef7c:	f8ce 3000 	str.w	r3, [lr]
 801ef80:	4660      	mov	r0, ip
 801ef82:	f1b8 0f00 	cmp.w	r8, #0
 801ef86:	d0a0      	beq.n	801eeca <_strtol_l.isra.0+0x1a>
 801ef88:	1e69      	subs	r1, r5, #1
 801ef8a:	e006      	b.n	801ef9a <_strtol_l.isra.0+0xea>
 801ef8c:	b106      	cbz	r6, 801ef90 <_strtol_l.isra.0+0xe0>
 801ef8e:	4240      	negs	r0, r0
 801ef90:	f1b8 0f00 	cmp.w	r8, #0
 801ef94:	d099      	beq.n	801eeca <_strtol_l.isra.0+0x1a>
 801ef96:	2a00      	cmp	r2, #0
 801ef98:	d1f6      	bne.n	801ef88 <_strtol_l.isra.0+0xd8>
 801ef9a:	f8c8 1000 	str.w	r1, [r8]
 801ef9e:	e794      	b.n	801eeca <_strtol_l.isra.0+0x1a>
 801efa0:	08033c25 	.word	0x08033c25

0801efa4 <strtol>:
 801efa4:	4613      	mov	r3, r2
 801efa6:	460a      	mov	r2, r1
 801efa8:	4601      	mov	r1, r0
 801efaa:	4802      	ldr	r0, [pc, #8]	@ (801efb4 <strtol+0x10>)
 801efac:	6800      	ldr	r0, [r0, #0]
 801efae:	f7ff bf7f 	b.w	801eeb0 <_strtol_l.isra.0>
 801efb2:	bf00      	nop
 801efb4:	24000040 	.word	0x24000040

0801efb8 <std>:
 801efb8:	2300      	movs	r3, #0
 801efba:	b510      	push	{r4, lr}
 801efbc:	4604      	mov	r4, r0
 801efbe:	e9c0 3300 	strd	r3, r3, [r0]
 801efc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801efc6:	6083      	str	r3, [r0, #8]
 801efc8:	8181      	strh	r1, [r0, #12]
 801efca:	6643      	str	r3, [r0, #100]	@ 0x64
 801efcc:	81c2      	strh	r2, [r0, #14]
 801efce:	6183      	str	r3, [r0, #24]
 801efd0:	4619      	mov	r1, r3
 801efd2:	2208      	movs	r2, #8
 801efd4:	305c      	adds	r0, #92	@ 0x5c
 801efd6:	f000 fa8d 	bl	801f4f4 <memset>
 801efda:	4b0d      	ldr	r3, [pc, #52]	@ (801f010 <std+0x58>)
 801efdc:	6263      	str	r3, [r4, #36]	@ 0x24
 801efde:	4b0d      	ldr	r3, [pc, #52]	@ (801f014 <std+0x5c>)
 801efe0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801efe2:	4b0d      	ldr	r3, [pc, #52]	@ (801f018 <std+0x60>)
 801efe4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801efe6:	4b0d      	ldr	r3, [pc, #52]	@ (801f01c <std+0x64>)
 801efe8:	6323      	str	r3, [r4, #48]	@ 0x30
 801efea:	4b0d      	ldr	r3, [pc, #52]	@ (801f020 <std+0x68>)
 801efec:	6224      	str	r4, [r4, #32]
 801efee:	429c      	cmp	r4, r3
 801eff0:	d006      	beq.n	801f000 <std+0x48>
 801eff2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801eff6:	4294      	cmp	r4, r2
 801eff8:	d002      	beq.n	801f000 <std+0x48>
 801effa:	33d0      	adds	r3, #208	@ 0xd0
 801effc:	429c      	cmp	r4, r3
 801effe:	d105      	bne.n	801f00c <std+0x54>
 801f000:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801f004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f008:	f000 bb02 	b.w	801f610 <__retarget_lock_init_recursive>
 801f00c:	bd10      	pop	{r4, pc}
 801f00e:	bf00      	nop
 801f010:	0801f2cd 	.word	0x0801f2cd
 801f014:	0801f2ef 	.word	0x0801f2ef
 801f018:	0801f327 	.word	0x0801f327
 801f01c:	0801f34b 	.word	0x0801f34b
 801f020:	24008c9c 	.word	0x24008c9c

0801f024 <stdio_exit_handler>:
 801f024:	4a02      	ldr	r2, [pc, #8]	@ (801f030 <stdio_exit_handler+0xc>)
 801f026:	4903      	ldr	r1, [pc, #12]	@ (801f034 <stdio_exit_handler+0x10>)
 801f028:	4803      	ldr	r0, [pc, #12]	@ (801f038 <stdio_exit_handler+0x14>)
 801f02a:	f000 b869 	b.w	801f100 <_fwalk_sglue>
 801f02e:	bf00      	nop
 801f030:	24000034 	.word	0x24000034
 801f034:	08020179 	.word	0x08020179
 801f038:	24000044 	.word	0x24000044

0801f03c <cleanup_stdio>:
 801f03c:	6841      	ldr	r1, [r0, #4]
 801f03e:	4b0c      	ldr	r3, [pc, #48]	@ (801f070 <cleanup_stdio+0x34>)
 801f040:	4299      	cmp	r1, r3
 801f042:	b510      	push	{r4, lr}
 801f044:	4604      	mov	r4, r0
 801f046:	d001      	beq.n	801f04c <cleanup_stdio+0x10>
 801f048:	f001 f896 	bl	8020178 <_fflush_r>
 801f04c:	68a1      	ldr	r1, [r4, #8]
 801f04e:	4b09      	ldr	r3, [pc, #36]	@ (801f074 <cleanup_stdio+0x38>)
 801f050:	4299      	cmp	r1, r3
 801f052:	d002      	beq.n	801f05a <cleanup_stdio+0x1e>
 801f054:	4620      	mov	r0, r4
 801f056:	f001 f88f 	bl	8020178 <_fflush_r>
 801f05a:	68e1      	ldr	r1, [r4, #12]
 801f05c:	4b06      	ldr	r3, [pc, #24]	@ (801f078 <cleanup_stdio+0x3c>)
 801f05e:	4299      	cmp	r1, r3
 801f060:	d004      	beq.n	801f06c <cleanup_stdio+0x30>
 801f062:	4620      	mov	r0, r4
 801f064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f068:	f001 b886 	b.w	8020178 <_fflush_r>
 801f06c:	bd10      	pop	{r4, pc}
 801f06e:	bf00      	nop
 801f070:	24008c9c 	.word	0x24008c9c
 801f074:	24008d04 	.word	0x24008d04
 801f078:	24008d6c 	.word	0x24008d6c

0801f07c <global_stdio_init.part.0>:
 801f07c:	b510      	push	{r4, lr}
 801f07e:	4b0b      	ldr	r3, [pc, #44]	@ (801f0ac <global_stdio_init.part.0+0x30>)
 801f080:	4c0b      	ldr	r4, [pc, #44]	@ (801f0b0 <global_stdio_init.part.0+0x34>)
 801f082:	4a0c      	ldr	r2, [pc, #48]	@ (801f0b4 <global_stdio_init.part.0+0x38>)
 801f084:	601a      	str	r2, [r3, #0]
 801f086:	4620      	mov	r0, r4
 801f088:	2200      	movs	r2, #0
 801f08a:	2104      	movs	r1, #4
 801f08c:	f7ff ff94 	bl	801efb8 <std>
 801f090:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801f094:	2201      	movs	r2, #1
 801f096:	2109      	movs	r1, #9
 801f098:	f7ff ff8e 	bl	801efb8 <std>
 801f09c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801f0a0:	2202      	movs	r2, #2
 801f0a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0a6:	2112      	movs	r1, #18
 801f0a8:	f7ff bf86 	b.w	801efb8 <std>
 801f0ac:	24008dd4 	.word	0x24008dd4
 801f0b0:	24008c9c 	.word	0x24008c9c
 801f0b4:	0801f025 	.word	0x0801f025

0801f0b8 <__sfp_lock_acquire>:
 801f0b8:	4801      	ldr	r0, [pc, #4]	@ (801f0c0 <__sfp_lock_acquire+0x8>)
 801f0ba:	f000 baaa 	b.w	801f612 <__retarget_lock_acquire_recursive>
 801f0be:	bf00      	nop
 801f0c0:	24008ddd 	.word	0x24008ddd

0801f0c4 <__sfp_lock_release>:
 801f0c4:	4801      	ldr	r0, [pc, #4]	@ (801f0cc <__sfp_lock_release+0x8>)
 801f0c6:	f000 baa5 	b.w	801f614 <__retarget_lock_release_recursive>
 801f0ca:	bf00      	nop
 801f0cc:	24008ddd 	.word	0x24008ddd

0801f0d0 <__sinit>:
 801f0d0:	b510      	push	{r4, lr}
 801f0d2:	4604      	mov	r4, r0
 801f0d4:	f7ff fff0 	bl	801f0b8 <__sfp_lock_acquire>
 801f0d8:	6a23      	ldr	r3, [r4, #32]
 801f0da:	b11b      	cbz	r3, 801f0e4 <__sinit+0x14>
 801f0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0e0:	f7ff bff0 	b.w	801f0c4 <__sfp_lock_release>
 801f0e4:	4b04      	ldr	r3, [pc, #16]	@ (801f0f8 <__sinit+0x28>)
 801f0e6:	6223      	str	r3, [r4, #32]
 801f0e8:	4b04      	ldr	r3, [pc, #16]	@ (801f0fc <__sinit+0x2c>)
 801f0ea:	681b      	ldr	r3, [r3, #0]
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	d1f5      	bne.n	801f0dc <__sinit+0xc>
 801f0f0:	f7ff ffc4 	bl	801f07c <global_stdio_init.part.0>
 801f0f4:	e7f2      	b.n	801f0dc <__sinit+0xc>
 801f0f6:	bf00      	nop
 801f0f8:	0801f03d 	.word	0x0801f03d
 801f0fc:	24008dd4 	.word	0x24008dd4

0801f100 <_fwalk_sglue>:
 801f100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f104:	4607      	mov	r7, r0
 801f106:	4688      	mov	r8, r1
 801f108:	4614      	mov	r4, r2
 801f10a:	2600      	movs	r6, #0
 801f10c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f110:	f1b9 0901 	subs.w	r9, r9, #1
 801f114:	d505      	bpl.n	801f122 <_fwalk_sglue+0x22>
 801f116:	6824      	ldr	r4, [r4, #0]
 801f118:	2c00      	cmp	r4, #0
 801f11a:	d1f7      	bne.n	801f10c <_fwalk_sglue+0xc>
 801f11c:	4630      	mov	r0, r6
 801f11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f122:	89ab      	ldrh	r3, [r5, #12]
 801f124:	2b01      	cmp	r3, #1
 801f126:	d907      	bls.n	801f138 <_fwalk_sglue+0x38>
 801f128:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f12c:	3301      	adds	r3, #1
 801f12e:	d003      	beq.n	801f138 <_fwalk_sglue+0x38>
 801f130:	4629      	mov	r1, r5
 801f132:	4638      	mov	r0, r7
 801f134:	47c0      	blx	r8
 801f136:	4306      	orrs	r6, r0
 801f138:	3568      	adds	r5, #104	@ 0x68
 801f13a:	e7e9      	b.n	801f110 <_fwalk_sglue+0x10>

0801f13c <iprintf>:
 801f13c:	b40f      	push	{r0, r1, r2, r3}
 801f13e:	b507      	push	{r0, r1, r2, lr}
 801f140:	4906      	ldr	r1, [pc, #24]	@ (801f15c <iprintf+0x20>)
 801f142:	ab04      	add	r3, sp, #16
 801f144:	6808      	ldr	r0, [r1, #0]
 801f146:	f853 2b04 	ldr.w	r2, [r3], #4
 801f14a:	6881      	ldr	r1, [r0, #8]
 801f14c:	9301      	str	r3, [sp, #4]
 801f14e:	f000 fceb 	bl	801fb28 <_vfiprintf_r>
 801f152:	b003      	add	sp, #12
 801f154:	f85d eb04 	ldr.w	lr, [sp], #4
 801f158:	b004      	add	sp, #16
 801f15a:	4770      	bx	lr
 801f15c:	24000040 	.word	0x24000040

0801f160 <_puts_r>:
 801f160:	6a03      	ldr	r3, [r0, #32]
 801f162:	b570      	push	{r4, r5, r6, lr}
 801f164:	6884      	ldr	r4, [r0, #8]
 801f166:	4605      	mov	r5, r0
 801f168:	460e      	mov	r6, r1
 801f16a:	b90b      	cbnz	r3, 801f170 <_puts_r+0x10>
 801f16c:	f7ff ffb0 	bl	801f0d0 <__sinit>
 801f170:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f172:	07db      	lsls	r3, r3, #31
 801f174:	d405      	bmi.n	801f182 <_puts_r+0x22>
 801f176:	89a3      	ldrh	r3, [r4, #12]
 801f178:	0598      	lsls	r0, r3, #22
 801f17a:	d402      	bmi.n	801f182 <_puts_r+0x22>
 801f17c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f17e:	f000 fa48 	bl	801f612 <__retarget_lock_acquire_recursive>
 801f182:	89a3      	ldrh	r3, [r4, #12]
 801f184:	0719      	lsls	r1, r3, #28
 801f186:	d502      	bpl.n	801f18e <_puts_r+0x2e>
 801f188:	6923      	ldr	r3, [r4, #16]
 801f18a:	2b00      	cmp	r3, #0
 801f18c:	d135      	bne.n	801f1fa <_puts_r+0x9a>
 801f18e:	4621      	mov	r1, r4
 801f190:	4628      	mov	r0, r5
 801f192:	f000 f959 	bl	801f448 <__swsetup_r>
 801f196:	b380      	cbz	r0, 801f1fa <_puts_r+0x9a>
 801f198:	f04f 35ff 	mov.w	r5, #4294967295
 801f19c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f19e:	07da      	lsls	r2, r3, #31
 801f1a0:	d405      	bmi.n	801f1ae <_puts_r+0x4e>
 801f1a2:	89a3      	ldrh	r3, [r4, #12]
 801f1a4:	059b      	lsls	r3, r3, #22
 801f1a6:	d402      	bmi.n	801f1ae <_puts_r+0x4e>
 801f1a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f1aa:	f000 fa33 	bl	801f614 <__retarget_lock_release_recursive>
 801f1ae:	4628      	mov	r0, r5
 801f1b0:	bd70      	pop	{r4, r5, r6, pc}
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	da04      	bge.n	801f1c0 <_puts_r+0x60>
 801f1b6:	69a2      	ldr	r2, [r4, #24]
 801f1b8:	429a      	cmp	r2, r3
 801f1ba:	dc17      	bgt.n	801f1ec <_puts_r+0x8c>
 801f1bc:	290a      	cmp	r1, #10
 801f1be:	d015      	beq.n	801f1ec <_puts_r+0x8c>
 801f1c0:	6823      	ldr	r3, [r4, #0]
 801f1c2:	1c5a      	adds	r2, r3, #1
 801f1c4:	6022      	str	r2, [r4, #0]
 801f1c6:	7019      	strb	r1, [r3, #0]
 801f1c8:	68a3      	ldr	r3, [r4, #8]
 801f1ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f1ce:	3b01      	subs	r3, #1
 801f1d0:	60a3      	str	r3, [r4, #8]
 801f1d2:	2900      	cmp	r1, #0
 801f1d4:	d1ed      	bne.n	801f1b2 <_puts_r+0x52>
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	da11      	bge.n	801f1fe <_puts_r+0x9e>
 801f1da:	4622      	mov	r2, r4
 801f1dc:	210a      	movs	r1, #10
 801f1de:	4628      	mov	r0, r5
 801f1e0:	f000 f8f4 	bl	801f3cc <__swbuf_r>
 801f1e4:	3001      	adds	r0, #1
 801f1e6:	d0d7      	beq.n	801f198 <_puts_r+0x38>
 801f1e8:	250a      	movs	r5, #10
 801f1ea:	e7d7      	b.n	801f19c <_puts_r+0x3c>
 801f1ec:	4622      	mov	r2, r4
 801f1ee:	4628      	mov	r0, r5
 801f1f0:	f000 f8ec 	bl	801f3cc <__swbuf_r>
 801f1f4:	3001      	adds	r0, #1
 801f1f6:	d1e7      	bne.n	801f1c8 <_puts_r+0x68>
 801f1f8:	e7ce      	b.n	801f198 <_puts_r+0x38>
 801f1fa:	3e01      	subs	r6, #1
 801f1fc:	e7e4      	b.n	801f1c8 <_puts_r+0x68>
 801f1fe:	6823      	ldr	r3, [r4, #0]
 801f200:	1c5a      	adds	r2, r3, #1
 801f202:	6022      	str	r2, [r4, #0]
 801f204:	220a      	movs	r2, #10
 801f206:	701a      	strb	r2, [r3, #0]
 801f208:	e7ee      	b.n	801f1e8 <_puts_r+0x88>
	...

0801f20c <puts>:
 801f20c:	4b02      	ldr	r3, [pc, #8]	@ (801f218 <puts+0xc>)
 801f20e:	4601      	mov	r1, r0
 801f210:	6818      	ldr	r0, [r3, #0]
 801f212:	f7ff bfa5 	b.w	801f160 <_puts_r>
 801f216:	bf00      	nop
 801f218:	24000040 	.word	0x24000040

0801f21c <sniprintf>:
 801f21c:	b40c      	push	{r2, r3}
 801f21e:	b530      	push	{r4, r5, lr}
 801f220:	4b18      	ldr	r3, [pc, #96]	@ (801f284 <sniprintf+0x68>)
 801f222:	1e0c      	subs	r4, r1, #0
 801f224:	681d      	ldr	r5, [r3, #0]
 801f226:	b09d      	sub	sp, #116	@ 0x74
 801f228:	da08      	bge.n	801f23c <sniprintf+0x20>
 801f22a:	238b      	movs	r3, #139	@ 0x8b
 801f22c:	602b      	str	r3, [r5, #0]
 801f22e:	f04f 30ff 	mov.w	r0, #4294967295
 801f232:	b01d      	add	sp, #116	@ 0x74
 801f234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f238:	b002      	add	sp, #8
 801f23a:	4770      	bx	lr
 801f23c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801f240:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f244:	f04f 0300 	mov.w	r3, #0
 801f248:	931b      	str	r3, [sp, #108]	@ 0x6c
 801f24a:	bf14      	ite	ne
 801f24c:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f250:	4623      	moveq	r3, r4
 801f252:	9304      	str	r3, [sp, #16]
 801f254:	9307      	str	r3, [sp, #28]
 801f256:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801f25a:	9002      	str	r0, [sp, #8]
 801f25c:	9006      	str	r0, [sp, #24]
 801f25e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f262:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f264:	ab21      	add	r3, sp, #132	@ 0x84
 801f266:	a902      	add	r1, sp, #8
 801f268:	4628      	mov	r0, r5
 801f26a:	9301      	str	r3, [sp, #4]
 801f26c:	f000 fb36 	bl	801f8dc <_svfiprintf_r>
 801f270:	1c43      	adds	r3, r0, #1
 801f272:	bfbc      	itt	lt
 801f274:	238b      	movlt	r3, #139	@ 0x8b
 801f276:	602b      	strlt	r3, [r5, #0]
 801f278:	2c00      	cmp	r4, #0
 801f27a:	d0da      	beq.n	801f232 <sniprintf+0x16>
 801f27c:	9b02      	ldr	r3, [sp, #8]
 801f27e:	2200      	movs	r2, #0
 801f280:	701a      	strb	r2, [r3, #0]
 801f282:	e7d6      	b.n	801f232 <sniprintf+0x16>
 801f284:	24000040 	.word	0x24000040

0801f288 <siprintf>:
 801f288:	b40e      	push	{r1, r2, r3}
 801f28a:	b510      	push	{r4, lr}
 801f28c:	b09d      	sub	sp, #116	@ 0x74
 801f28e:	ab1f      	add	r3, sp, #124	@ 0x7c
 801f290:	9002      	str	r0, [sp, #8]
 801f292:	9006      	str	r0, [sp, #24]
 801f294:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801f298:	480a      	ldr	r0, [pc, #40]	@ (801f2c4 <siprintf+0x3c>)
 801f29a:	9107      	str	r1, [sp, #28]
 801f29c:	9104      	str	r1, [sp, #16]
 801f29e:	490a      	ldr	r1, [pc, #40]	@ (801f2c8 <siprintf+0x40>)
 801f2a0:	f853 2b04 	ldr.w	r2, [r3], #4
 801f2a4:	9105      	str	r1, [sp, #20]
 801f2a6:	2400      	movs	r4, #0
 801f2a8:	a902      	add	r1, sp, #8
 801f2aa:	6800      	ldr	r0, [r0, #0]
 801f2ac:	9301      	str	r3, [sp, #4]
 801f2ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f2b0:	f000 fb14 	bl	801f8dc <_svfiprintf_r>
 801f2b4:	9b02      	ldr	r3, [sp, #8]
 801f2b6:	701c      	strb	r4, [r3, #0]
 801f2b8:	b01d      	add	sp, #116	@ 0x74
 801f2ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f2be:	b003      	add	sp, #12
 801f2c0:	4770      	bx	lr
 801f2c2:	bf00      	nop
 801f2c4:	24000040 	.word	0x24000040
 801f2c8:	ffff0208 	.word	0xffff0208

0801f2cc <__sread>:
 801f2cc:	b510      	push	{r4, lr}
 801f2ce:	460c      	mov	r4, r1
 801f2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f2d4:	f000 f94e 	bl	801f574 <_read_r>
 801f2d8:	2800      	cmp	r0, #0
 801f2da:	bfab      	itete	ge
 801f2dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801f2de:	89a3      	ldrhlt	r3, [r4, #12]
 801f2e0:	181b      	addge	r3, r3, r0
 801f2e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801f2e6:	bfac      	ite	ge
 801f2e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801f2ea:	81a3      	strhlt	r3, [r4, #12]
 801f2ec:	bd10      	pop	{r4, pc}

0801f2ee <__swrite>:
 801f2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2f2:	461f      	mov	r7, r3
 801f2f4:	898b      	ldrh	r3, [r1, #12]
 801f2f6:	05db      	lsls	r3, r3, #23
 801f2f8:	4605      	mov	r5, r0
 801f2fa:	460c      	mov	r4, r1
 801f2fc:	4616      	mov	r6, r2
 801f2fe:	d505      	bpl.n	801f30c <__swrite+0x1e>
 801f300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f304:	2302      	movs	r3, #2
 801f306:	2200      	movs	r2, #0
 801f308:	f000 f922 	bl	801f550 <_lseek_r>
 801f30c:	89a3      	ldrh	r3, [r4, #12]
 801f30e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f312:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801f316:	81a3      	strh	r3, [r4, #12]
 801f318:	4632      	mov	r2, r6
 801f31a:	463b      	mov	r3, r7
 801f31c:	4628      	mov	r0, r5
 801f31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f322:	f000 b939 	b.w	801f598 <_write_r>

0801f326 <__sseek>:
 801f326:	b510      	push	{r4, lr}
 801f328:	460c      	mov	r4, r1
 801f32a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f32e:	f000 f90f 	bl	801f550 <_lseek_r>
 801f332:	1c43      	adds	r3, r0, #1
 801f334:	89a3      	ldrh	r3, [r4, #12]
 801f336:	bf15      	itete	ne
 801f338:	6560      	strne	r0, [r4, #84]	@ 0x54
 801f33a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801f33e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801f342:	81a3      	strheq	r3, [r4, #12]
 801f344:	bf18      	it	ne
 801f346:	81a3      	strhne	r3, [r4, #12]
 801f348:	bd10      	pop	{r4, pc}

0801f34a <__sclose>:
 801f34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f34e:	f000 b8ef 	b.w	801f530 <_close_r>

0801f352 <_vsniprintf_r>:
 801f352:	b530      	push	{r4, r5, lr}
 801f354:	4614      	mov	r4, r2
 801f356:	2c00      	cmp	r4, #0
 801f358:	b09b      	sub	sp, #108	@ 0x6c
 801f35a:	4605      	mov	r5, r0
 801f35c:	461a      	mov	r2, r3
 801f35e:	da05      	bge.n	801f36c <_vsniprintf_r+0x1a>
 801f360:	238b      	movs	r3, #139	@ 0x8b
 801f362:	6003      	str	r3, [r0, #0]
 801f364:	f04f 30ff 	mov.w	r0, #4294967295
 801f368:	b01b      	add	sp, #108	@ 0x6c
 801f36a:	bd30      	pop	{r4, r5, pc}
 801f36c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801f370:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f374:	f04f 0300 	mov.w	r3, #0
 801f378:	9319      	str	r3, [sp, #100]	@ 0x64
 801f37a:	bf14      	ite	ne
 801f37c:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f380:	4623      	moveq	r3, r4
 801f382:	9302      	str	r3, [sp, #8]
 801f384:	9305      	str	r3, [sp, #20]
 801f386:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801f38a:	9100      	str	r1, [sp, #0]
 801f38c:	9104      	str	r1, [sp, #16]
 801f38e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f392:	4669      	mov	r1, sp
 801f394:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f396:	f000 faa1 	bl	801f8dc <_svfiprintf_r>
 801f39a:	1c43      	adds	r3, r0, #1
 801f39c:	bfbc      	itt	lt
 801f39e:	238b      	movlt	r3, #139	@ 0x8b
 801f3a0:	602b      	strlt	r3, [r5, #0]
 801f3a2:	2c00      	cmp	r4, #0
 801f3a4:	d0e0      	beq.n	801f368 <_vsniprintf_r+0x16>
 801f3a6:	9b00      	ldr	r3, [sp, #0]
 801f3a8:	2200      	movs	r2, #0
 801f3aa:	701a      	strb	r2, [r3, #0]
 801f3ac:	e7dc      	b.n	801f368 <_vsniprintf_r+0x16>
	...

0801f3b0 <vsniprintf>:
 801f3b0:	b507      	push	{r0, r1, r2, lr}
 801f3b2:	9300      	str	r3, [sp, #0]
 801f3b4:	4613      	mov	r3, r2
 801f3b6:	460a      	mov	r2, r1
 801f3b8:	4601      	mov	r1, r0
 801f3ba:	4803      	ldr	r0, [pc, #12]	@ (801f3c8 <vsniprintf+0x18>)
 801f3bc:	6800      	ldr	r0, [r0, #0]
 801f3be:	f7ff ffc8 	bl	801f352 <_vsniprintf_r>
 801f3c2:	b003      	add	sp, #12
 801f3c4:	f85d fb04 	ldr.w	pc, [sp], #4
 801f3c8:	24000040 	.word	0x24000040

0801f3cc <__swbuf_r>:
 801f3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3ce:	460e      	mov	r6, r1
 801f3d0:	4614      	mov	r4, r2
 801f3d2:	4605      	mov	r5, r0
 801f3d4:	b118      	cbz	r0, 801f3de <__swbuf_r+0x12>
 801f3d6:	6a03      	ldr	r3, [r0, #32]
 801f3d8:	b90b      	cbnz	r3, 801f3de <__swbuf_r+0x12>
 801f3da:	f7ff fe79 	bl	801f0d0 <__sinit>
 801f3de:	69a3      	ldr	r3, [r4, #24]
 801f3e0:	60a3      	str	r3, [r4, #8]
 801f3e2:	89a3      	ldrh	r3, [r4, #12]
 801f3e4:	071a      	lsls	r2, r3, #28
 801f3e6:	d501      	bpl.n	801f3ec <__swbuf_r+0x20>
 801f3e8:	6923      	ldr	r3, [r4, #16]
 801f3ea:	b943      	cbnz	r3, 801f3fe <__swbuf_r+0x32>
 801f3ec:	4621      	mov	r1, r4
 801f3ee:	4628      	mov	r0, r5
 801f3f0:	f000 f82a 	bl	801f448 <__swsetup_r>
 801f3f4:	b118      	cbz	r0, 801f3fe <__swbuf_r+0x32>
 801f3f6:	f04f 37ff 	mov.w	r7, #4294967295
 801f3fa:	4638      	mov	r0, r7
 801f3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f3fe:	6823      	ldr	r3, [r4, #0]
 801f400:	6922      	ldr	r2, [r4, #16]
 801f402:	1a98      	subs	r0, r3, r2
 801f404:	6963      	ldr	r3, [r4, #20]
 801f406:	b2f6      	uxtb	r6, r6
 801f408:	4283      	cmp	r3, r0
 801f40a:	4637      	mov	r7, r6
 801f40c:	dc05      	bgt.n	801f41a <__swbuf_r+0x4e>
 801f40e:	4621      	mov	r1, r4
 801f410:	4628      	mov	r0, r5
 801f412:	f000 feb1 	bl	8020178 <_fflush_r>
 801f416:	2800      	cmp	r0, #0
 801f418:	d1ed      	bne.n	801f3f6 <__swbuf_r+0x2a>
 801f41a:	68a3      	ldr	r3, [r4, #8]
 801f41c:	3b01      	subs	r3, #1
 801f41e:	60a3      	str	r3, [r4, #8]
 801f420:	6823      	ldr	r3, [r4, #0]
 801f422:	1c5a      	adds	r2, r3, #1
 801f424:	6022      	str	r2, [r4, #0]
 801f426:	701e      	strb	r6, [r3, #0]
 801f428:	6962      	ldr	r2, [r4, #20]
 801f42a:	1c43      	adds	r3, r0, #1
 801f42c:	429a      	cmp	r2, r3
 801f42e:	d004      	beq.n	801f43a <__swbuf_r+0x6e>
 801f430:	89a3      	ldrh	r3, [r4, #12]
 801f432:	07db      	lsls	r3, r3, #31
 801f434:	d5e1      	bpl.n	801f3fa <__swbuf_r+0x2e>
 801f436:	2e0a      	cmp	r6, #10
 801f438:	d1df      	bne.n	801f3fa <__swbuf_r+0x2e>
 801f43a:	4621      	mov	r1, r4
 801f43c:	4628      	mov	r0, r5
 801f43e:	f000 fe9b 	bl	8020178 <_fflush_r>
 801f442:	2800      	cmp	r0, #0
 801f444:	d0d9      	beq.n	801f3fa <__swbuf_r+0x2e>
 801f446:	e7d6      	b.n	801f3f6 <__swbuf_r+0x2a>

0801f448 <__swsetup_r>:
 801f448:	b538      	push	{r3, r4, r5, lr}
 801f44a:	4b29      	ldr	r3, [pc, #164]	@ (801f4f0 <__swsetup_r+0xa8>)
 801f44c:	4605      	mov	r5, r0
 801f44e:	6818      	ldr	r0, [r3, #0]
 801f450:	460c      	mov	r4, r1
 801f452:	b118      	cbz	r0, 801f45c <__swsetup_r+0x14>
 801f454:	6a03      	ldr	r3, [r0, #32]
 801f456:	b90b      	cbnz	r3, 801f45c <__swsetup_r+0x14>
 801f458:	f7ff fe3a 	bl	801f0d0 <__sinit>
 801f45c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f460:	0719      	lsls	r1, r3, #28
 801f462:	d422      	bmi.n	801f4aa <__swsetup_r+0x62>
 801f464:	06da      	lsls	r2, r3, #27
 801f466:	d407      	bmi.n	801f478 <__swsetup_r+0x30>
 801f468:	2209      	movs	r2, #9
 801f46a:	602a      	str	r2, [r5, #0]
 801f46c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f470:	81a3      	strh	r3, [r4, #12]
 801f472:	f04f 30ff 	mov.w	r0, #4294967295
 801f476:	e033      	b.n	801f4e0 <__swsetup_r+0x98>
 801f478:	0758      	lsls	r0, r3, #29
 801f47a:	d512      	bpl.n	801f4a2 <__swsetup_r+0x5a>
 801f47c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f47e:	b141      	cbz	r1, 801f492 <__swsetup_r+0x4a>
 801f480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f484:	4299      	cmp	r1, r3
 801f486:	d002      	beq.n	801f48e <__swsetup_r+0x46>
 801f488:	4628      	mov	r0, r5
 801f48a:	f000 f8d3 	bl	801f634 <_free_r>
 801f48e:	2300      	movs	r3, #0
 801f490:	6363      	str	r3, [r4, #52]	@ 0x34
 801f492:	89a3      	ldrh	r3, [r4, #12]
 801f494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801f498:	81a3      	strh	r3, [r4, #12]
 801f49a:	2300      	movs	r3, #0
 801f49c:	6063      	str	r3, [r4, #4]
 801f49e:	6923      	ldr	r3, [r4, #16]
 801f4a0:	6023      	str	r3, [r4, #0]
 801f4a2:	89a3      	ldrh	r3, [r4, #12]
 801f4a4:	f043 0308 	orr.w	r3, r3, #8
 801f4a8:	81a3      	strh	r3, [r4, #12]
 801f4aa:	6923      	ldr	r3, [r4, #16]
 801f4ac:	b94b      	cbnz	r3, 801f4c2 <__swsetup_r+0x7a>
 801f4ae:	89a3      	ldrh	r3, [r4, #12]
 801f4b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801f4b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f4b8:	d003      	beq.n	801f4c2 <__swsetup_r+0x7a>
 801f4ba:	4621      	mov	r1, r4
 801f4bc:	4628      	mov	r0, r5
 801f4be:	f000 fea9 	bl	8020214 <__smakebuf_r>
 801f4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f4c6:	f013 0201 	ands.w	r2, r3, #1
 801f4ca:	d00a      	beq.n	801f4e2 <__swsetup_r+0x9a>
 801f4cc:	2200      	movs	r2, #0
 801f4ce:	60a2      	str	r2, [r4, #8]
 801f4d0:	6962      	ldr	r2, [r4, #20]
 801f4d2:	4252      	negs	r2, r2
 801f4d4:	61a2      	str	r2, [r4, #24]
 801f4d6:	6922      	ldr	r2, [r4, #16]
 801f4d8:	b942      	cbnz	r2, 801f4ec <__swsetup_r+0xa4>
 801f4da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f4de:	d1c5      	bne.n	801f46c <__swsetup_r+0x24>
 801f4e0:	bd38      	pop	{r3, r4, r5, pc}
 801f4e2:	0799      	lsls	r1, r3, #30
 801f4e4:	bf58      	it	pl
 801f4e6:	6962      	ldrpl	r2, [r4, #20]
 801f4e8:	60a2      	str	r2, [r4, #8]
 801f4ea:	e7f4      	b.n	801f4d6 <__swsetup_r+0x8e>
 801f4ec:	2000      	movs	r0, #0
 801f4ee:	e7f7      	b.n	801f4e0 <__swsetup_r+0x98>
 801f4f0:	24000040 	.word	0x24000040

0801f4f4 <memset>:
 801f4f4:	4402      	add	r2, r0
 801f4f6:	4603      	mov	r3, r0
 801f4f8:	4293      	cmp	r3, r2
 801f4fa:	d100      	bne.n	801f4fe <memset+0xa>
 801f4fc:	4770      	bx	lr
 801f4fe:	f803 1b01 	strb.w	r1, [r3], #1
 801f502:	e7f9      	b.n	801f4f8 <memset+0x4>

0801f504 <strstr>:
 801f504:	780a      	ldrb	r2, [r1, #0]
 801f506:	b570      	push	{r4, r5, r6, lr}
 801f508:	b96a      	cbnz	r2, 801f526 <strstr+0x22>
 801f50a:	bd70      	pop	{r4, r5, r6, pc}
 801f50c:	429a      	cmp	r2, r3
 801f50e:	d109      	bne.n	801f524 <strstr+0x20>
 801f510:	460c      	mov	r4, r1
 801f512:	4605      	mov	r5, r0
 801f514:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801f518:	2b00      	cmp	r3, #0
 801f51a:	d0f6      	beq.n	801f50a <strstr+0x6>
 801f51c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801f520:	429e      	cmp	r6, r3
 801f522:	d0f7      	beq.n	801f514 <strstr+0x10>
 801f524:	3001      	adds	r0, #1
 801f526:	7803      	ldrb	r3, [r0, #0]
 801f528:	2b00      	cmp	r3, #0
 801f52a:	d1ef      	bne.n	801f50c <strstr+0x8>
 801f52c:	4618      	mov	r0, r3
 801f52e:	e7ec      	b.n	801f50a <strstr+0x6>

0801f530 <_close_r>:
 801f530:	b538      	push	{r3, r4, r5, lr}
 801f532:	4d06      	ldr	r5, [pc, #24]	@ (801f54c <_close_r+0x1c>)
 801f534:	2300      	movs	r3, #0
 801f536:	4604      	mov	r4, r0
 801f538:	4608      	mov	r0, r1
 801f53a:	602b      	str	r3, [r5, #0]
 801f53c:	f7e2 ffa4 	bl	8002488 <_close>
 801f540:	1c43      	adds	r3, r0, #1
 801f542:	d102      	bne.n	801f54a <_close_r+0x1a>
 801f544:	682b      	ldr	r3, [r5, #0]
 801f546:	b103      	cbz	r3, 801f54a <_close_r+0x1a>
 801f548:	6023      	str	r3, [r4, #0]
 801f54a:	bd38      	pop	{r3, r4, r5, pc}
 801f54c:	24008dd8 	.word	0x24008dd8

0801f550 <_lseek_r>:
 801f550:	b538      	push	{r3, r4, r5, lr}
 801f552:	4d07      	ldr	r5, [pc, #28]	@ (801f570 <_lseek_r+0x20>)
 801f554:	4604      	mov	r4, r0
 801f556:	4608      	mov	r0, r1
 801f558:	4611      	mov	r1, r2
 801f55a:	2200      	movs	r2, #0
 801f55c:	602a      	str	r2, [r5, #0]
 801f55e:	461a      	mov	r2, r3
 801f560:	f7e2 ffb9 	bl	80024d6 <_lseek>
 801f564:	1c43      	adds	r3, r0, #1
 801f566:	d102      	bne.n	801f56e <_lseek_r+0x1e>
 801f568:	682b      	ldr	r3, [r5, #0]
 801f56a:	b103      	cbz	r3, 801f56e <_lseek_r+0x1e>
 801f56c:	6023      	str	r3, [r4, #0]
 801f56e:	bd38      	pop	{r3, r4, r5, pc}
 801f570:	24008dd8 	.word	0x24008dd8

0801f574 <_read_r>:
 801f574:	b538      	push	{r3, r4, r5, lr}
 801f576:	4d07      	ldr	r5, [pc, #28]	@ (801f594 <_read_r+0x20>)
 801f578:	4604      	mov	r4, r0
 801f57a:	4608      	mov	r0, r1
 801f57c:	4611      	mov	r1, r2
 801f57e:	2200      	movs	r2, #0
 801f580:	602a      	str	r2, [r5, #0]
 801f582:	461a      	mov	r2, r3
 801f584:	f7e2 ff47 	bl	8002416 <_read>
 801f588:	1c43      	adds	r3, r0, #1
 801f58a:	d102      	bne.n	801f592 <_read_r+0x1e>
 801f58c:	682b      	ldr	r3, [r5, #0]
 801f58e:	b103      	cbz	r3, 801f592 <_read_r+0x1e>
 801f590:	6023      	str	r3, [r4, #0]
 801f592:	bd38      	pop	{r3, r4, r5, pc}
 801f594:	24008dd8 	.word	0x24008dd8

0801f598 <_write_r>:
 801f598:	b538      	push	{r3, r4, r5, lr}
 801f59a:	4d07      	ldr	r5, [pc, #28]	@ (801f5b8 <_write_r+0x20>)
 801f59c:	4604      	mov	r4, r0
 801f59e:	4608      	mov	r0, r1
 801f5a0:	4611      	mov	r1, r2
 801f5a2:	2200      	movs	r2, #0
 801f5a4:	602a      	str	r2, [r5, #0]
 801f5a6:	461a      	mov	r2, r3
 801f5a8:	f7e2 ff52 	bl	8002450 <_write>
 801f5ac:	1c43      	adds	r3, r0, #1
 801f5ae:	d102      	bne.n	801f5b6 <_write_r+0x1e>
 801f5b0:	682b      	ldr	r3, [r5, #0]
 801f5b2:	b103      	cbz	r3, 801f5b6 <_write_r+0x1e>
 801f5b4:	6023      	str	r3, [r4, #0]
 801f5b6:	bd38      	pop	{r3, r4, r5, pc}
 801f5b8:	24008dd8 	.word	0x24008dd8

0801f5bc <__errno>:
 801f5bc:	4b01      	ldr	r3, [pc, #4]	@ (801f5c4 <__errno+0x8>)
 801f5be:	6818      	ldr	r0, [r3, #0]
 801f5c0:	4770      	bx	lr
 801f5c2:	bf00      	nop
 801f5c4:	24000040 	.word	0x24000040

0801f5c8 <__libc_init_array>:
 801f5c8:	b570      	push	{r4, r5, r6, lr}
 801f5ca:	4d0d      	ldr	r5, [pc, #52]	@ (801f600 <__libc_init_array+0x38>)
 801f5cc:	4c0d      	ldr	r4, [pc, #52]	@ (801f604 <__libc_init_array+0x3c>)
 801f5ce:	1b64      	subs	r4, r4, r5
 801f5d0:	10a4      	asrs	r4, r4, #2
 801f5d2:	2600      	movs	r6, #0
 801f5d4:	42a6      	cmp	r6, r4
 801f5d6:	d109      	bne.n	801f5ec <__libc_init_array+0x24>
 801f5d8:	4d0b      	ldr	r5, [pc, #44]	@ (801f608 <__libc_init_array+0x40>)
 801f5da:	4c0c      	ldr	r4, [pc, #48]	@ (801f60c <__libc_init_array+0x44>)
 801f5dc:	f000 fed8 	bl	8020390 <_init>
 801f5e0:	1b64      	subs	r4, r4, r5
 801f5e2:	10a4      	asrs	r4, r4, #2
 801f5e4:	2600      	movs	r6, #0
 801f5e6:	42a6      	cmp	r6, r4
 801f5e8:	d105      	bne.n	801f5f6 <__libc_init_array+0x2e>
 801f5ea:	bd70      	pop	{r4, r5, r6, pc}
 801f5ec:	f855 3b04 	ldr.w	r3, [r5], #4
 801f5f0:	4798      	blx	r3
 801f5f2:	3601      	adds	r6, #1
 801f5f4:	e7ee      	b.n	801f5d4 <__libc_init_array+0xc>
 801f5f6:	f855 3b04 	ldr.w	r3, [r5], #4
 801f5fa:	4798      	blx	r3
 801f5fc:	3601      	adds	r6, #1
 801f5fe:	e7f2      	b.n	801f5e6 <__libc_init_array+0x1e>
 801f600:	08033d60 	.word	0x08033d60
 801f604:	08033d60 	.word	0x08033d60
 801f608:	08033d60 	.word	0x08033d60
 801f60c:	08033d64 	.word	0x08033d64

0801f610 <__retarget_lock_init_recursive>:
 801f610:	4770      	bx	lr

0801f612 <__retarget_lock_acquire_recursive>:
 801f612:	4770      	bx	lr

0801f614 <__retarget_lock_release_recursive>:
 801f614:	4770      	bx	lr

0801f616 <memcpy>:
 801f616:	440a      	add	r2, r1
 801f618:	4291      	cmp	r1, r2
 801f61a:	f100 33ff 	add.w	r3, r0, #4294967295
 801f61e:	d100      	bne.n	801f622 <memcpy+0xc>
 801f620:	4770      	bx	lr
 801f622:	b510      	push	{r4, lr}
 801f624:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f628:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f62c:	4291      	cmp	r1, r2
 801f62e:	d1f9      	bne.n	801f624 <memcpy+0xe>
 801f630:	bd10      	pop	{r4, pc}
	...

0801f634 <_free_r>:
 801f634:	b538      	push	{r3, r4, r5, lr}
 801f636:	4605      	mov	r5, r0
 801f638:	2900      	cmp	r1, #0
 801f63a:	d041      	beq.n	801f6c0 <_free_r+0x8c>
 801f63c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f640:	1f0c      	subs	r4, r1, #4
 801f642:	2b00      	cmp	r3, #0
 801f644:	bfb8      	it	lt
 801f646:	18e4      	addlt	r4, r4, r3
 801f648:	f000 f8e0 	bl	801f80c <__malloc_lock>
 801f64c:	4a1d      	ldr	r2, [pc, #116]	@ (801f6c4 <_free_r+0x90>)
 801f64e:	6813      	ldr	r3, [r2, #0]
 801f650:	b933      	cbnz	r3, 801f660 <_free_r+0x2c>
 801f652:	6063      	str	r3, [r4, #4]
 801f654:	6014      	str	r4, [r2, #0]
 801f656:	4628      	mov	r0, r5
 801f658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f65c:	f000 b8dc 	b.w	801f818 <__malloc_unlock>
 801f660:	42a3      	cmp	r3, r4
 801f662:	d908      	bls.n	801f676 <_free_r+0x42>
 801f664:	6820      	ldr	r0, [r4, #0]
 801f666:	1821      	adds	r1, r4, r0
 801f668:	428b      	cmp	r3, r1
 801f66a:	bf01      	itttt	eq
 801f66c:	6819      	ldreq	r1, [r3, #0]
 801f66e:	685b      	ldreq	r3, [r3, #4]
 801f670:	1809      	addeq	r1, r1, r0
 801f672:	6021      	streq	r1, [r4, #0]
 801f674:	e7ed      	b.n	801f652 <_free_r+0x1e>
 801f676:	461a      	mov	r2, r3
 801f678:	685b      	ldr	r3, [r3, #4]
 801f67a:	b10b      	cbz	r3, 801f680 <_free_r+0x4c>
 801f67c:	42a3      	cmp	r3, r4
 801f67e:	d9fa      	bls.n	801f676 <_free_r+0x42>
 801f680:	6811      	ldr	r1, [r2, #0]
 801f682:	1850      	adds	r0, r2, r1
 801f684:	42a0      	cmp	r0, r4
 801f686:	d10b      	bne.n	801f6a0 <_free_r+0x6c>
 801f688:	6820      	ldr	r0, [r4, #0]
 801f68a:	4401      	add	r1, r0
 801f68c:	1850      	adds	r0, r2, r1
 801f68e:	4283      	cmp	r3, r0
 801f690:	6011      	str	r1, [r2, #0]
 801f692:	d1e0      	bne.n	801f656 <_free_r+0x22>
 801f694:	6818      	ldr	r0, [r3, #0]
 801f696:	685b      	ldr	r3, [r3, #4]
 801f698:	6053      	str	r3, [r2, #4]
 801f69a:	4408      	add	r0, r1
 801f69c:	6010      	str	r0, [r2, #0]
 801f69e:	e7da      	b.n	801f656 <_free_r+0x22>
 801f6a0:	d902      	bls.n	801f6a8 <_free_r+0x74>
 801f6a2:	230c      	movs	r3, #12
 801f6a4:	602b      	str	r3, [r5, #0]
 801f6a6:	e7d6      	b.n	801f656 <_free_r+0x22>
 801f6a8:	6820      	ldr	r0, [r4, #0]
 801f6aa:	1821      	adds	r1, r4, r0
 801f6ac:	428b      	cmp	r3, r1
 801f6ae:	bf04      	itt	eq
 801f6b0:	6819      	ldreq	r1, [r3, #0]
 801f6b2:	685b      	ldreq	r3, [r3, #4]
 801f6b4:	6063      	str	r3, [r4, #4]
 801f6b6:	bf04      	itt	eq
 801f6b8:	1809      	addeq	r1, r1, r0
 801f6ba:	6021      	streq	r1, [r4, #0]
 801f6bc:	6054      	str	r4, [r2, #4]
 801f6be:	e7ca      	b.n	801f656 <_free_r+0x22>
 801f6c0:	bd38      	pop	{r3, r4, r5, pc}
 801f6c2:	bf00      	nop
 801f6c4:	24008de4 	.word	0x24008de4

0801f6c8 <sbrk_aligned>:
 801f6c8:	b570      	push	{r4, r5, r6, lr}
 801f6ca:	4e0f      	ldr	r6, [pc, #60]	@ (801f708 <sbrk_aligned+0x40>)
 801f6cc:	460c      	mov	r4, r1
 801f6ce:	6831      	ldr	r1, [r6, #0]
 801f6d0:	4605      	mov	r5, r0
 801f6d2:	b911      	cbnz	r1, 801f6da <sbrk_aligned+0x12>
 801f6d4:	f000 fe16 	bl	8020304 <_sbrk_r>
 801f6d8:	6030      	str	r0, [r6, #0]
 801f6da:	4621      	mov	r1, r4
 801f6dc:	4628      	mov	r0, r5
 801f6de:	f000 fe11 	bl	8020304 <_sbrk_r>
 801f6e2:	1c43      	adds	r3, r0, #1
 801f6e4:	d103      	bne.n	801f6ee <sbrk_aligned+0x26>
 801f6e6:	f04f 34ff 	mov.w	r4, #4294967295
 801f6ea:	4620      	mov	r0, r4
 801f6ec:	bd70      	pop	{r4, r5, r6, pc}
 801f6ee:	1cc4      	adds	r4, r0, #3
 801f6f0:	f024 0403 	bic.w	r4, r4, #3
 801f6f4:	42a0      	cmp	r0, r4
 801f6f6:	d0f8      	beq.n	801f6ea <sbrk_aligned+0x22>
 801f6f8:	1a21      	subs	r1, r4, r0
 801f6fa:	4628      	mov	r0, r5
 801f6fc:	f000 fe02 	bl	8020304 <_sbrk_r>
 801f700:	3001      	adds	r0, #1
 801f702:	d1f2      	bne.n	801f6ea <sbrk_aligned+0x22>
 801f704:	e7ef      	b.n	801f6e6 <sbrk_aligned+0x1e>
 801f706:	bf00      	nop
 801f708:	24008de0 	.word	0x24008de0

0801f70c <_malloc_r>:
 801f70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f710:	1ccd      	adds	r5, r1, #3
 801f712:	f025 0503 	bic.w	r5, r5, #3
 801f716:	3508      	adds	r5, #8
 801f718:	2d0c      	cmp	r5, #12
 801f71a:	bf38      	it	cc
 801f71c:	250c      	movcc	r5, #12
 801f71e:	2d00      	cmp	r5, #0
 801f720:	4606      	mov	r6, r0
 801f722:	db01      	blt.n	801f728 <_malloc_r+0x1c>
 801f724:	42a9      	cmp	r1, r5
 801f726:	d904      	bls.n	801f732 <_malloc_r+0x26>
 801f728:	230c      	movs	r3, #12
 801f72a:	6033      	str	r3, [r6, #0]
 801f72c:	2000      	movs	r0, #0
 801f72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f732:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f808 <_malloc_r+0xfc>
 801f736:	f000 f869 	bl	801f80c <__malloc_lock>
 801f73a:	f8d8 3000 	ldr.w	r3, [r8]
 801f73e:	461c      	mov	r4, r3
 801f740:	bb44      	cbnz	r4, 801f794 <_malloc_r+0x88>
 801f742:	4629      	mov	r1, r5
 801f744:	4630      	mov	r0, r6
 801f746:	f7ff ffbf 	bl	801f6c8 <sbrk_aligned>
 801f74a:	1c43      	adds	r3, r0, #1
 801f74c:	4604      	mov	r4, r0
 801f74e:	d158      	bne.n	801f802 <_malloc_r+0xf6>
 801f750:	f8d8 4000 	ldr.w	r4, [r8]
 801f754:	4627      	mov	r7, r4
 801f756:	2f00      	cmp	r7, #0
 801f758:	d143      	bne.n	801f7e2 <_malloc_r+0xd6>
 801f75a:	2c00      	cmp	r4, #0
 801f75c:	d04b      	beq.n	801f7f6 <_malloc_r+0xea>
 801f75e:	6823      	ldr	r3, [r4, #0]
 801f760:	4639      	mov	r1, r7
 801f762:	4630      	mov	r0, r6
 801f764:	eb04 0903 	add.w	r9, r4, r3
 801f768:	f000 fdcc 	bl	8020304 <_sbrk_r>
 801f76c:	4581      	cmp	r9, r0
 801f76e:	d142      	bne.n	801f7f6 <_malloc_r+0xea>
 801f770:	6821      	ldr	r1, [r4, #0]
 801f772:	1a6d      	subs	r5, r5, r1
 801f774:	4629      	mov	r1, r5
 801f776:	4630      	mov	r0, r6
 801f778:	f7ff ffa6 	bl	801f6c8 <sbrk_aligned>
 801f77c:	3001      	adds	r0, #1
 801f77e:	d03a      	beq.n	801f7f6 <_malloc_r+0xea>
 801f780:	6823      	ldr	r3, [r4, #0]
 801f782:	442b      	add	r3, r5
 801f784:	6023      	str	r3, [r4, #0]
 801f786:	f8d8 3000 	ldr.w	r3, [r8]
 801f78a:	685a      	ldr	r2, [r3, #4]
 801f78c:	bb62      	cbnz	r2, 801f7e8 <_malloc_r+0xdc>
 801f78e:	f8c8 7000 	str.w	r7, [r8]
 801f792:	e00f      	b.n	801f7b4 <_malloc_r+0xa8>
 801f794:	6822      	ldr	r2, [r4, #0]
 801f796:	1b52      	subs	r2, r2, r5
 801f798:	d420      	bmi.n	801f7dc <_malloc_r+0xd0>
 801f79a:	2a0b      	cmp	r2, #11
 801f79c:	d917      	bls.n	801f7ce <_malloc_r+0xc2>
 801f79e:	1961      	adds	r1, r4, r5
 801f7a0:	42a3      	cmp	r3, r4
 801f7a2:	6025      	str	r5, [r4, #0]
 801f7a4:	bf18      	it	ne
 801f7a6:	6059      	strne	r1, [r3, #4]
 801f7a8:	6863      	ldr	r3, [r4, #4]
 801f7aa:	bf08      	it	eq
 801f7ac:	f8c8 1000 	streq.w	r1, [r8]
 801f7b0:	5162      	str	r2, [r4, r5]
 801f7b2:	604b      	str	r3, [r1, #4]
 801f7b4:	4630      	mov	r0, r6
 801f7b6:	f000 f82f 	bl	801f818 <__malloc_unlock>
 801f7ba:	f104 000b 	add.w	r0, r4, #11
 801f7be:	1d23      	adds	r3, r4, #4
 801f7c0:	f020 0007 	bic.w	r0, r0, #7
 801f7c4:	1ac2      	subs	r2, r0, r3
 801f7c6:	bf1c      	itt	ne
 801f7c8:	1a1b      	subne	r3, r3, r0
 801f7ca:	50a3      	strne	r3, [r4, r2]
 801f7cc:	e7af      	b.n	801f72e <_malloc_r+0x22>
 801f7ce:	6862      	ldr	r2, [r4, #4]
 801f7d0:	42a3      	cmp	r3, r4
 801f7d2:	bf0c      	ite	eq
 801f7d4:	f8c8 2000 	streq.w	r2, [r8]
 801f7d8:	605a      	strne	r2, [r3, #4]
 801f7da:	e7eb      	b.n	801f7b4 <_malloc_r+0xa8>
 801f7dc:	4623      	mov	r3, r4
 801f7de:	6864      	ldr	r4, [r4, #4]
 801f7e0:	e7ae      	b.n	801f740 <_malloc_r+0x34>
 801f7e2:	463c      	mov	r4, r7
 801f7e4:	687f      	ldr	r7, [r7, #4]
 801f7e6:	e7b6      	b.n	801f756 <_malloc_r+0x4a>
 801f7e8:	461a      	mov	r2, r3
 801f7ea:	685b      	ldr	r3, [r3, #4]
 801f7ec:	42a3      	cmp	r3, r4
 801f7ee:	d1fb      	bne.n	801f7e8 <_malloc_r+0xdc>
 801f7f0:	2300      	movs	r3, #0
 801f7f2:	6053      	str	r3, [r2, #4]
 801f7f4:	e7de      	b.n	801f7b4 <_malloc_r+0xa8>
 801f7f6:	230c      	movs	r3, #12
 801f7f8:	6033      	str	r3, [r6, #0]
 801f7fa:	4630      	mov	r0, r6
 801f7fc:	f000 f80c 	bl	801f818 <__malloc_unlock>
 801f800:	e794      	b.n	801f72c <_malloc_r+0x20>
 801f802:	6005      	str	r5, [r0, #0]
 801f804:	e7d6      	b.n	801f7b4 <_malloc_r+0xa8>
 801f806:	bf00      	nop
 801f808:	24008de4 	.word	0x24008de4

0801f80c <__malloc_lock>:
 801f80c:	4801      	ldr	r0, [pc, #4]	@ (801f814 <__malloc_lock+0x8>)
 801f80e:	f7ff bf00 	b.w	801f612 <__retarget_lock_acquire_recursive>
 801f812:	bf00      	nop
 801f814:	24008ddc 	.word	0x24008ddc

0801f818 <__malloc_unlock>:
 801f818:	4801      	ldr	r0, [pc, #4]	@ (801f820 <__malloc_unlock+0x8>)
 801f81a:	f7ff befb 	b.w	801f614 <__retarget_lock_release_recursive>
 801f81e:	bf00      	nop
 801f820:	24008ddc 	.word	0x24008ddc

0801f824 <__ssputs_r>:
 801f824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f828:	688e      	ldr	r6, [r1, #8]
 801f82a:	461f      	mov	r7, r3
 801f82c:	42be      	cmp	r6, r7
 801f82e:	680b      	ldr	r3, [r1, #0]
 801f830:	4682      	mov	sl, r0
 801f832:	460c      	mov	r4, r1
 801f834:	4690      	mov	r8, r2
 801f836:	d82d      	bhi.n	801f894 <__ssputs_r+0x70>
 801f838:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f83c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801f840:	d026      	beq.n	801f890 <__ssputs_r+0x6c>
 801f842:	6965      	ldr	r5, [r4, #20]
 801f844:	6909      	ldr	r1, [r1, #16]
 801f846:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f84a:	eba3 0901 	sub.w	r9, r3, r1
 801f84e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f852:	1c7b      	adds	r3, r7, #1
 801f854:	444b      	add	r3, r9
 801f856:	106d      	asrs	r5, r5, #1
 801f858:	429d      	cmp	r5, r3
 801f85a:	bf38      	it	cc
 801f85c:	461d      	movcc	r5, r3
 801f85e:	0553      	lsls	r3, r2, #21
 801f860:	d527      	bpl.n	801f8b2 <__ssputs_r+0x8e>
 801f862:	4629      	mov	r1, r5
 801f864:	f7ff ff52 	bl	801f70c <_malloc_r>
 801f868:	4606      	mov	r6, r0
 801f86a:	b360      	cbz	r0, 801f8c6 <__ssputs_r+0xa2>
 801f86c:	6921      	ldr	r1, [r4, #16]
 801f86e:	464a      	mov	r2, r9
 801f870:	f7ff fed1 	bl	801f616 <memcpy>
 801f874:	89a3      	ldrh	r3, [r4, #12]
 801f876:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801f87a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f87e:	81a3      	strh	r3, [r4, #12]
 801f880:	6126      	str	r6, [r4, #16]
 801f882:	6165      	str	r5, [r4, #20]
 801f884:	444e      	add	r6, r9
 801f886:	eba5 0509 	sub.w	r5, r5, r9
 801f88a:	6026      	str	r6, [r4, #0]
 801f88c:	60a5      	str	r5, [r4, #8]
 801f88e:	463e      	mov	r6, r7
 801f890:	42be      	cmp	r6, r7
 801f892:	d900      	bls.n	801f896 <__ssputs_r+0x72>
 801f894:	463e      	mov	r6, r7
 801f896:	6820      	ldr	r0, [r4, #0]
 801f898:	4632      	mov	r2, r6
 801f89a:	4641      	mov	r1, r8
 801f89c:	f000 fcf6 	bl	802028c <memmove>
 801f8a0:	68a3      	ldr	r3, [r4, #8]
 801f8a2:	1b9b      	subs	r3, r3, r6
 801f8a4:	60a3      	str	r3, [r4, #8]
 801f8a6:	6823      	ldr	r3, [r4, #0]
 801f8a8:	4433      	add	r3, r6
 801f8aa:	6023      	str	r3, [r4, #0]
 801f8ac:	2000      	movs	r0, #0
 801f8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f8b2:	462a      	mov	r2, r5
 801f8b4:	f000 fd36 	bl	8020324 <_realloc_r>
 801f8b8:	4606      	mov	r6, r0
 801f8ba:	2800      	cmp	r0, #0
 801f8bc:	d1e0      	bne.n	801f880 <__ssputs_r+0x5c>
 801f8be:	6921      	ldr	r1, [r4, #16]
 801f8c0:	4650      	mov	r0, sl
 801f8c2:	f7ff feb7 	bl	801f634 <_free_r>
 801f8c6:	230c      	movs	r3, #12
 801f8c8:	f8ca 3000 	str.w	r3, [sl]
 801f8cc:	89a3      	ldrh	r3, [r4, #12]
 801f8ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f8d2:	81a3      	strh	r3, [r4, #12]
 801f8d4:	f04f 30ff 	mov.w	r0, #4294967295
 801f8d8:	e7e9      	b.n	801f8ae <__ssputs_r+0x8a>
	...

0801f8dc <_svfiprintf_r>:
 801f8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8e0:	4698      	mov	r8, r3
 801f8e2:	898b      	ldrh	r3, [r1, #12]
 801f8e4:	061b      	lsls	r3, r3, #24
 801f8e6:	b09d      	sub	sp, #116	@ 0x74
 801f8e8:	4607      	mov	r7, r0
 801f8ea:	460d      	mov	r5, r1
 801f8ec:	4614      	mov	r4, r2
 801f8ee:	d510      	bpl.n	801f912 <_svfiprintf_r+0x36>
 801f8f0:	690b      	ldr	r3, [r1, #16]
 801f8f2:	b973      	cbnz	r3, 801f912 <_svfiprintf_r+0x36>
 801f8f4:	2140      	movs	r1, #64	@ 0x40
 801f8f6:	f7ff ff09 	bl	801f70c <_malloc_r>
 801f8fa:	6028      	str	r0, [r5, #0]
 801f8fc:	6128      	str	r0, [r5, #16]
 801f8fe:	b930      	cbnz	r0, 801f90e <_svfiprintf_r+0x32>
 801f900:	230c      	movs	r3, #12
 801f902:	603b      	str	r3, [r7, #0]
 801f904:	f04f 30ff 	mov.w	r0, #4294967295
 801f908:	b01d      	add	sp, #116	@ 0x74
 801f90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f90e:	2340      	movs	r3, #64	@ 0x40
 801f910:	616b      	str	r3, [r5, #20]
 801f912:	2300      	movs	r3, #0
 801f914:	9309      	str	r3, [sp, #36]	@ 0x24
 801f916:	2320      	movs	r3, #32
 801f918:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f91c:	f8cd 800c 	str.w	r8, [sp, #12]
 801f920:	2330      	movs	r3, #48	@ 0x30
 801f922:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801fac0 <_svfiprintf_r+0x1e4>
 801f926:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f92a:	f04f 0901 	mov.w	r9, #1
 801f92e:	4623      	mov	r3, r4
 801f930:	469a      	mov	sl, r3
 801f932:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f936:	b10a      	cbz	r2, 801f93c <_svfiprintf_r+0x60>
 801f938:	2a25      	cmp	r2, #37	@ 0x25
 801f93a:	d1f9      	bne.n	801f930 <_svfiprintf_r+0x54>
 801f93c:	ebba 0b04 	subs.w	fp, sl, r4
 801f940:	d00b      	beq.n	801f95a <_svfiprintf_r+0x7e>
 801f942:	465b      	mov	r3, fp
 801f944:	4622      	mov	r2, r4
 801f946:	4629      	mov	r1, r5
 801f948:	4638      	mov	r0, r7
 801f94a:	f7ff ff6b 	bl	801f824 <__ssputs_r>
 801f94e:	3001      	adds	r0, #1
 801f950:	f000 80a7 	beq.w	801faa2 <_svfiprintf_r+0x1c6>
 801f954:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f956:	445a      	add	r2, fp
 801f958:	9209      	str	r2, [sp, #36]	@ 0x24
 801f95a:	f89a 3000 	ldrb.w	r3, [sl]
 801f95e:	2b00      	cmp	r3, #0
 801f960:	f000 809f 	beq.w	801faa2 <_svfiprintf_r+0x1c6>
 801f964:	2300      	movs	r3, #0
 801f966:	f04f 32ff 	mov.w	r2, #4294967295
 801f96a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f96e:	f10a 0a01 	add.w	sl, sl, #1
 801f972:	9304      	str	r3, [sp, #16]
 801f974:	9307      	str	r3, [sp, #28]
 801f976:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f97a:	931a      	str	r3, [sp, #104]	@ 0x68
 801f97c:	4654      	mov	r4, sl
 801f97e:	2205      	movs	r2, #5
 801f980:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f984:	484e      	ldr	r0, [pc, #312]	@ (801fac0 <_svfiprintf_r+0x1e4>)
 801f986:	f7e0 fccb 	bl	8000320 <memchr>
 801f98a:	9a04      	ldr	r2, [sp, #16]
 801f98c:	b9d8      	cbnz	r0, 801f9c6 <_svfiprintf_r+0xea>
 801f98e:	06d0      	lsls	r0, r2, #27
 801f990:	bf44      	itt	mi
 801f992:	2320      	movmi	r3, #32
 801f994:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f998:	0711      	lsls	r1, r2, #28
 801f99a:	bf44      	itt	mi
 801f99c:	232b      	movmi	r3, #43	@ 0x2b
 801f99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f9a2:	f89a 3000 	ldrb.w	r3, [sl]
 801f9a6:	2b2a      	cmp	r3, #42	@ 0x2a
 801f9a8:	d015      	beq.n	801f9d6 <_svfiprintf_r+0xfa>
 801f9aa:	9a07      	ldr	r2, [sp, #28]
 801f9ac:	4654      	mov	r4, sl
 801f9ae:	2000      	movs	r0, #0
 801f9b0:	f04f 0c0a 	mov.w	ip, #10
 801f9b4:	4621      	mov	r1, r4
 801f9b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f9ba:	3b30      	subs	r3, #48	@ 0x30
 801f9bc:	2b09      	cmp	r3, #9
 801f9be:	d94b      	bls.n	801fa58 <_svfiprintf_r+0x17c>
 801f9c0:	b1b0      	cbz	r0, 801f9f0 <_svfiprintf_r+0x114>
 801f9c2:	9207      	str	r2, [sp, #28]
 801f9c4:	e014      	b.n	801f9f0 <_svfiprintf_r+0x114>
 801f9c6:	eba0 0308 	sub.w	r3, r0, r8
 801f9ca:	fa09 f303 	lsl.w	r3, r9, r3
 801f9ce:	4313      	orrs	r3, r2
 801f9d0:	9304      	str	r3, [sp, #16]
 801f9d2:	46a2      	mov	sl, r4
 801f9d4:	e7d2      	b.n	801f97c <_svfiprintf_r+0xa0>
 801f9d6:	9b03      	ldr	r3, [sp, #12]
 801f9d8:	1d19      	adds	r1, r3, #4
 801f9da:	681b      	ldr	r3, [r3, #0]
 801f9dc:	9103      	str	r1, [sp, #12]
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	bfbb      	ittet	lt
 801f9e2:	425b      	neglt	r3, r3
 801f9e4:	f042 0202 	orrlt.w	r2, r2, #2
 801f9e8:	9307      	strge	r3, [sp, #28]
 801f9ea:	9307      	strlt	r3, [sp, #28]
 801f9ec:	bfb8      	it	lt
 801f9ee:	9204      	strlt	r2, [sp, #16]
 801f9f0:	7823      	ldrb	r3, [r4, #0]
 801f9f2:	2b2e      	cmp	r3, #46	@ 0x2e
 801f9f4:	d10a      	bne.n	801fa0c <_svfiprintf_r+0x130>
 801f9f6:	7863      	ldrb	r3, [r4, #1]
 801f9f8:	2b2a      	cmp	r3, #42	@ 0x2a
 801f9fa:	d132      	bne.n	801fa62 <_svfiprintf_r+0x186>
 801f9fc:	9b03      	ldr	r3, [sp, #12]
 801f9fe:	1d1a      	adds	r2, r3, #4
 801fa00:	681b      	ldr	r3, [r3, #0]
 801fa02:	9203      	str	r2, [sp, #12]
 801fa04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801fa08:	3402      	adds	r4, #2
 801fa0a:	9305      	str	r3, [sp, #20]
 801fa0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801fad0 <_svfiprintf_r+0x1f4>
 801fa10:	7821      	ldrb	r1, [r4, #0]
 801fa12:	2203      	movs	r2, #3
 801fa14:	4650      	mov	r0, sl
 801fa16:	f7e0 fc83 	bl	8000320 <memchr>
 801fa1a:	b138      	cbz	r0, 801fa2c <_svfiprintf_r+0x150>
 801fa1c:	9b04      	ldr	r3, [sp, #16]
 801fa1e:	eba0 000a 	sub.w	r0, r0, sl
 801fa22:	2240      	movs	r2, #64	@ 0x40
 801fa24:	4082      	lsls	r2, r0
 801fa26:	4313      	orrs	r3, r2
 801fa28:	3401      	adds	r4, #1
 801fa2a:	9304      	str	r3, [sp, #16]
 801fa2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa30:	4824      	ldr	r0, [pc, #144]	@ (801fac4 <_svfiprintf_r+0x1e8>)
 801fa32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801fa36:	2206      	movs	r2, #6
 801fa38:	f7e0 fc72 	bl	8000320 <memchr>
 801fa3c:	2800      	cmp	r0, #0
 801fa3e:	d036      	beq.n	801faae <_svfiprintf_r+0x1d2>
 801fa40:	4b21      	ldr	r3, [pc, #132]	@ (801fac8 <_svfiprintf_r+0x1ec>)
 801fa42:	bb1b      	cbnz	r3, 801fa8c <_svfiprintf_r+0x1b0>
 801fa44:	9b03      	ldr	r3, [sp, #12]
 801fa46:	3307      	adds	r3, #7
 801fa48:	f023 0307 	bic.w	r3, r3, #7
 801fa4c:	3308      	adds	r3, #8
 801fa4e:	9303      	str	r3, [sp, #12]
 801fa50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa52:	4433      	add	r3, r6
 801fa54:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa56:	e76a      	b.n	801f92e <_svfiprintf_r+0x52>
 801fa58:	fb0c 3202 	mla	r2, ip, r2, r3
 801fa5c:	460c      	mov	r4, r1
 801fa5e:	2001      	movs	r0, #1
 801fa60:	e7a8      	b.n	801f9b4 <_svfiprintf_r+0xd8>
 801fa62:	2300      	movs	r3, #0
 801fa64:	3401      	adds	r4, #1
 801fa66:	9305      	str	r3, [sp, #20]
 801fa68:	4619      	mov	r1, r3
 801fa6a:	f04f 0c0a 	mov.w	ip, #10
 801fa6e:	4620      	mov	r0, r4
 801fa70:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fa74:	3a30      	subs	r2, #48	@ 0x30
 801fa76:	2a09      	cmp	r2, #9
 801fa78:	d903      	bls.n	801fa82 <_svfiprintf_r+0x1a6>
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	d0c6      	beq.n	801fa0c <_svfiprintf_r+0x130>
 801fa7e:	9105      	str	r1, [sp, #20]
 801fa80:	e7c4      	b.n	801fa0c <_svfiprintf_r+0x130>
 801fa82:	fb0c 2101 	mla	r1, ip, r1, r2
 801fa86:	4604      	mov	r4, r0
 801fa88:	2301      	movs	r3, #1
 801fa8a:	e7f0      	b.n	801fa6e <_svfiprintf_r+0x192>
 801fa8c:	ab03      	add	r3, sp, #12
 801fa8e:	9300      	str	r3, [sp, #0]
 801fa90:	462a      	mov	r2, r5
 801fa92:	4b0e      	ldr	r3, [pc, #56]	@ (801facc <_svfiprintf_r+0x1f0>)
 801fa94:	a904      	add	r1, sp, #16
 801fa96:	4638      	mov	r0, r7
 801fa98:	f3af 8000 	nop.w
 801fa9c:	1c42      	adds	r2, r0, #1
 801fa9e:	4606      	mov	r6, r0
 801faa0:	d1d6      	bne.n	801fa50 <_svfiprintf_r+0x174>
 801faa2:	89ab      	ldrh	r3, [r5, #12]
 801faa4:	065b      	lsls	r3, r3, #25
 801faa6:	f53f af2d 	bmi.w	801f904 <_svfiprintf_r+0x28>
 801faaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801faac:	e72c      	b.n	801f908 <_svfiprintf_r+0x2c>
 801faae:	ab03      	add	r3, sp, #12
 801fab0:	9300      	str	r3, [sp, #0]
 801fab2:	462a      	mov	r2, r5
 801fab4:	4b05      	ldr	r3, [pc, #20]	@ (801facc <_svfiprintf_r+0x1f0>)
 801fab6:	a904      	add	r1, sp, #16
 801fab8:	4638      	mov	r0, r7
 801faba:	f000 f9bb 	bl	801fe34 <_printf_i>
 801fabe:	e7ed      	b.n	801fa9c <_svfiprintf_r+0x1c0>
 801fac0:	08033d25 	.word	0x08033d25
 801fac4:	08033d2f 	.word	0x08033d2f
 801fac8:	00000000 	.word	0x00000000
 801facc:	0801f825 	.word	0x0801f825
 801fad0:	08033d2b 	.word	0x08033d2b

0801fad4 <__sfputc_r>:
 801fad4:	6893      	ldr	r3, [r2, #8]
 801fad6:	3b01      	subs	r3, #1
 801fad8:	2b00      	cmp	r3, #0
 801fada:	b410      	push	{r4}
 801fadc:	6093      	str	r3, [r2, #8]
 801fade:	da08      	bge.n	801faf2 <__sfputc_r+0x1e>
 801fae0:	6994      	ldr	r4, [r2, #24]
 801fae2:	42a3      	cmp	r3, r4
 801fae4:	db01      	blt.n	801faea <__sfputc_r+0x16>
 801fae6:	290a      	cmp	r1, #10
 801fae8:	d103      	bne.n	801faf2 <__sfputc_r+0x1e>
 801faea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801faee:	f7ff bc6d 	b.w	801f3cc <__swbuf_r>
 801faf2:	6813      	ldr	r3, [r2, #0]
 801faf4:	1c58      	adds	r0, r3, #1
 801faf6:	6010      	str	r0, [r2, #0]
 801faf8:	7019      	strb	r1, [r3, #0]
 801fafa:	4608      	mov	r0, r1
 801fafc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fb00:	4770      	bx	lr

0801fb02 <__sfputs_r>:
 801fb02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb04:	4606      	mov	r6, r0
 801fb06:	460f      	mov	r7, r1
 801fb08:	4614      	mov	r4, r2
 801fb0a:	18d5      	adds	r5, r2, r3
 801fb0c:	42ac      	cmp	r4, r5
 801fb0e:	d101      	bne.n	801fb14 <__sfputs_r+0x12>
 801fb10:	2000      	movs	r0, #0
 801fb12:	e007      	b.n	801fb24 <__sfputs_r+0x22>
 801fb14:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb18:	463a      	mov	r2, r7
 801fb1a:	4630      	mov	r0, r6
 801fb1c:	f7ff ffda 	bl	801fad4 <__sfputc_r>
 801fb20:	1c43      	adds	r3, r0, #1
 801fb22:	d1f3      	bne.n	801fb0c <__sfputs_r+0xa>
 801fb24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fb28 <_vfiprintf_r>:
 801fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb2c:	460d      	mov	r5, r1
 801fb2e:	b09d      	sub	sp, #116	@ 0x74
 801fb30:	4614      	mov	r4, r2
 801fb32:	4698      	mov	r8, r3
 801fb34:	4606      	mov	r6, r0
 801fb36:	b118      	cbz	r0, 801fb40 <_vfiprintf_r+0x18>
 801fb38:	6a03      	ldr	r3, [r0, #32]
 801fb3a:	b90b      	cbnz	r3, 801fb40 <_vfiprintf_r+0x18>
 801fb3c:	f7ff fac8 	bl	801f0d0 <__sinit>
 801fb40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fb42:	07d9      	lsls	r1, r3, #31
 801fb44:	d405      	bmi.n	801fb52 <_vfiprintf_r+0x2a>
 801fb46:	89ab      	ldrh	r3, [r5, #12]
 801fb48:	059a      	lsls	r2, r3, #22
 801fb4a:	d402      	bmi.n	801fb52 <_vfiprintf_r+0x2a>
 801fb4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fb4e:	f7ff fd60 	bl	801f612 <__retarget_lock_acquire_recursive>
 801fb52:	89ab      	ldrh	r3, [r5, #12]
 801fb54:	071b      	lsls	r3, r3, #28
 801fb56:	d501      	bpl.n	801fb5c <_vfiprintf_r+0x34>
 801fb58:	692b      	ldr	r3, [r5, #16]
 801fb5a:	b99b      	cbnz	r3, 801fb84 <_vfiprintf_r+0x5c>
 801fb5c:	4629      	mov	r1, r5
 801fb5e:	4630      	mov	r0, r6
 801fb60:	f7ff fc72 	bl	801f448 <__swsetup_r>
 801fb64:	b170      	cbz	r0, 801fb84 <_vfiprintf_r+0x5c>
 801fb66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fb68:	07dc      	lsls	r4, r3, #31
 801fb6a:	d504      	bpl.n	801fb76 <_vfiprintf_r+0x4e>
 801fb6c:	f04f 30ff 	mov.w	r0, #4294967295
 801fb70:	b01d      	add	sp, #116	@ 0x74
 801fb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb76:	89ab      	ldrh	r3, [r5, #12]
 801fb78:	0598      	lsls	r0, r3, #22
 801fb7a:	d4f7      	bmi.n	801fb6c <_vfiprintf_r+0x44>
 801fb7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fb7e:	f7ff fd49 	bl	801f614 <__retarget_lock_release_recursive>
 801fb82:	e7f3      	b.n	801fb6c <_vfiprintf_r+0x44>
 801fb84:	2300      	movs	r3, #0
 801fb86:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb88:	2320      	movs	r3, #32
 801fb8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801fb8e:	f8cd 800c 	str.w	r8, [sp, #12]
 801fb92:	2330      	movs	r3, #48	@ 0x30
 801fb94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801fd44 <_vfiprintf_r+0x21c>
 801fb98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801fb9c:	f04f 0901 	mov.w	r9, #1
 801fba0:	4623      	mov	r3, r4
 801fba2:	469a      	mov	sl, r3
 801fba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fba8:	b10a      	cbz	r2, 801fbae <_vfiprintf_r+0x86>
 801fbaa:	2a25      	cmp	r2, #37	@ 0x25
 801fbac:	d1f9      	bne.n	801fba2 <_vfiprintf_r+0x7a>
 801fbae:	ebba 0b04 	subs.w	fp, sl, r4
 801fbb2:	d00b      	beq.n	801fbcc <_vfiprintf_r+0xa4>
 801fbb4:	465b      	mov	r3, fp
 801fbb6:	4622      	mov	r2, r4
 801fbb8:	4629      	mov	r1, r5
 801fbba:	4630      	mov	r0, r6
 801fbbc:	f7ff ffa1 	bl	801fb02 <__sfputs_r>
 801fbc0:	3001      	adds	r0, #1
 801fbc2:	f000 80a7 	beq.w	801fd14 <_vfiprintf_r+0x1ec>
 801fbc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fbc8:	445a      	add	r2, fp
 801fbca:	9209      	str	r2, [sp, #36]	@ 0x24
 801fbcc:	f89a 3000 	ldrb.w	r3, [sl]
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	f000 809f 	beq.w	801fd14 <_vfiprintf_r+0x1ec>
 801fbd6:	2300      	movs	r3, #0
 801fbd8:	f04f 32ff 	mov.w	r2, #4294967295
 801fbdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fbe0:	f10a 0a01 	add.w	sl, sl, #1
 801fbe4:	9304      	str	r3, [sp, #16]
 801fbe6:	9307      	str	r3, [sp, #28]
 801fbe8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801fbec:	931a      	str	r3, [sp, #104]	@ 0x68
 801fbee:	4654      	mov	r4, sl
 801fbf0:	2205      	movs	r2, #5
 801fbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbf6:	4853      	ldr	r0, [pc, #332]	@ (801fd44 <_vfiprintf_r+0x21c>)
 801fbf8:	f7e0 fb92 	bl	8000320 <memchr>
 801fbfc:	9a04      	ldr	r2, [sp, #16]
 801fbfe:	b9d8      	cbnz	r0, 801fc38 <_vfiprintf_r+0x110>
 801fc00:	06d1      	lsls	r1, r2, #27
 801fc02:	bf44      	itt	mi
 801fc04:	2320      	movmi	r3, #32
 801fc06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fc0a:	0713      	lsls	r3, r2, #28
 801fc0c:	bf44      	itt	mi
 801fc0e:	232b      	movmi	r3, #43	@ 0x2b
 801fc10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fc14:	f89a 3000 	ldrb.w	r3, [sl]
 801fc18:	2b2a      	cmp	r3, #42	@ 0x2a
 801fc1a:	d015      	beq.n	801fc48 <_vfiprintf_r+0x120>
 801fc1c:	9a07      	ldr	r2, [sp, #28]
 801fc1e:	4654      	mov	r4, sl
 801fc20:	2000      	movs	r0, #0
 801fc22:	f04f 0c0a 	mov.w	ip, #10
 801fc26:	4621      	mov	r1, r4
 801fc28:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fc2c:	3b30      	subs	r3, #48	@ 0x30
 801fc2e:	2b09      	cmp	r3, #9
 801fc30:	d94b      	bls.n	801fcca <_vfiprintf_r+0x1a2>
 801fc32:	b1b0      	cbz	r0, 801fc62 <_vfiprintf_r+0x13a>
 801fc34:	9207      	str	r2, [sp, #28]
 801fc36:	e014      	b.n	801fc62 <_vfiprintf_r+0x13a>
 801fc38:	eba0 0308 	sub.w	r3, r0, r8
 801fc3c:	fa09 f303 	lsl.w	r3, r9, r3
 801fc40:	4313      	orrs	r3, r2
 801fc42:	9304      	str	r3, [sp, #16]
 801fc44:	46a2      	mov	sl, r4
 801fc46:	e7d2      	b.n	801fbee <_vfiprintf_r+0xc6>
 801fc48:	9b03      	ldr	r3, [sp, #12]
 801fc4a:	1d19      	adds	r1, r3, #4
 801fc4c:	681b      	ldr	r3, [r3, #0]
 801fc4e:	9103      	str	r1, [sp, #12]
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	bfbb      	ittet	lt
 801fc54:	425b      	neglt	r3, r3
 801fc56:	f042 0202 	orrlt.w	r2, r2, #2
 801fc5a:	9307      	strge	r3, [sp, #28]
 801fc5c:	9307      	strlt	r3, [sp, #28]
 801fc5e:	bfb8      	it	lt
 801fc60:	9204      	strlt	r2, [sp, #16]
 801fc62:	7823      	ldrb	r3, [r4, #0]
 801fc64:	2b2e      	cmp	r3, #46	@ 0x2e
 801fc66:	d10a      	bne.n	801fc7e <_vfiprintf_r+0x156>
 801fc68:	7863      	ldrb	r3, [r4, #1]
 801fc6a:	2b2a      	cmp	r3, #42	@ 0x2a
 801fc6c:	d132      	bne.n	801fcd4 <_vfiprintf_r+0x1ac>
 801fc6e:	9b03      	ldr	r3, [sp, #12]
 801fc70:	1d1a      	adds	r2, r3, #4
 801fc72:	681b      	ldr	r3, [r3, #0]
 801fc74:	9203      	str	r2, [sp, #12]
 801fc76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801fc7a:	3402      	adds	r4, #2
 801fc7c:	9305      	str	r3, [sp, #20]
 801fc7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801fd54 <_vfiprintf_r+0x22c>
 801fc82:	7821      	ldrb	r1, [r4, #0]
 801fc84:	2203      	movs	r2, #3
 801fc86:	4650      	mov	r0, sl
 801fc88:	f7e0 fb4a 	bl	8000320 <memchr>
 801fc8c:	b138      	cbz	r0, 801fc9e <_vfiprintf_r+0x176>
 801fc8e:	9b04      	ldr	r3, [sp, #16]
 801fc90:	eba0 000a 	sub.w	r0, r0, sl
 801fc94:	2240      	movs	r2, #64	@ 0x40
 801fc96:	4082      	lsls	r2, r0
 801fc98:	4313      	orrs	r3, r2
 801fc9a:	3401      	adds	r4, #1
 801fc9c:	9304      	str	r3, [sp, #16]
 801fc9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fca2:	4829      	ldr	r0, [pc, #164]	@ (801fd48 <_vfiprintf_r+0x220>)
 801fca4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801fca8:	2206      	movs	r2, #6
 801fcaa:	f7e0 fb39 	bl	8000320 <memchr>
 801fcae:	2800      	cmp	r0, #0
 801fcb0:	d03f      	beq.n	801fd32 <_vfiprintf_r+0x20a>
 801fcb2:	4b26      	ldr	r3, [pc, #152]	@ (801fd4c <_vfiprintf_r+0x224>)
 801fcb4:	bb1b      	cbnz	r3, 801fcfe <_vfiprintf_r+0x1d6>
 801fcb6:	9b03      	ldr	r3, [sp, #12]
 801fcb8:	3307      	adds	r3, #7
 801fcba:	f023 0307 	bic.w	r3, r3, #7
 801fcbe:	3308      	adds	r3, #8
 801fcc0:	9303      	str	r3, [sp, #12]
 801fcc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcc4:	443b      	add	r3, r7
 801fcc6:	9309      	str	r3, [sp, #36]	@ 0x24
 801fcc8:	e76a      	b.n	801fba0 <_vfiprintf_r+0x78>
 801fcca:	fb0c 3202 	mla	r2, ip, r2, r3
 801fcce:	460c      	mov	r4, r1
 801fcd0:	2001      	movs	r0, #1
 801fcd2:	e7a8      	b.n	801fc26 <_vfiprintf_r+0xfe>
 801fcd4:	2300      	movs	r3, #0
 801fcd6:	3401      	adds	r4, #1
 801fcd8:	9305      	str	r3, [sp, #20]
 801fcda:	4619      	mov	r1, r3
 801fcdc:	f04f 0c0a 	mov.w	ip, #10
 801fce0:	4620      	mov	r0, r4
 801fce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fce6:	3a30      	subs	r2, #48	@ 0x30
 801fce8:	2a09      	cmp	r2, #9
 801fcea:	d903      	bls.n	801fcf4 <_vfiprintf_r+0x1cc>
 801fcec:	2b00      	cmp	r3, #0
 801fcee:	d0c6      	beq.n	801fc7e <_vfiprintf_r+0x156>
 801fcf0:	9105      	str	r1, [sp, #20]
 801fcf2:	e7c4      	b.n	801fc7e <_vfiprintf_r+0x156>
 801fcf4:	fb0c 2101 	mla	r1, ip, r1, r2
 801fcf8:	4604      	mov	r4, r0
 801fcfa:	2301      	movs	r3, #1
 801fcfc:	e7f0      	b.n	801fce0 <_vfiprintf_r+0x1b8>
 801fcfe:	ab03      	add	r3, sp, #12
 801fd00:	9300      	str	r3, [sp, #0]
 801fd02:	462a      	mov	r2, r5
 801fd04:	4b12      	ldr	r3, [pc, #72]	@ (801fd50 <_vfiprintf_r+0x228>)
 801fd06:	a904      	add	r1, sp, #16
 801fd08:	4630      	mov	r0, r6
 801fd0a:	f3af 8000 	nop.w
 801fd0e:	4607      	mov	r7, r0
 801fd10:	1c78      	adds	r0, r7, #1
 801fd12:	d1d6      	bne.n	801fcc2 <_vfiprintf_r+0x19a>
 801fd14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fd16:	07d9      	lsls	r1, r3, #31
 801fd18:	d405      	bmi.n	801fd26 <_vfiprintf_r+0x1fe>
 801fd1a:	89ab      	ldrh	r3, [r5, #12]
 801fd1c:	059a      	lsls	r2, r3, #22
 801fd1e:	d402      	bmi.n	801fd26 <_vfiprintf_r+0x1fe>
 801fd20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fd22:	f7ff fc77 	bl	801f614 <__retarget_lock_release_recursive>
 801fd26:	89ab      	ldrh	r3, [r5, #12]
 801fd28:	065b      	lsls	r3, r3, #25
 801fd2a:	f53f af1f 	bmi.w	801fb6c <_vfiprintf_r+0x44>
 801fd2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd30:	e71e      	b.n	801fb70 <_vfiprintf_r+0x48>
 801fd32:	ab03      	add	r3, sp, #12
 801fd34:	9300      	str	r3, [sp, #0]
 801fd36:	462a      	mov	r2, r5
 801fd38:	4b05      	ldr	r3, [pc, #20]	@ (801fd50 <_vfiprintf_r+0x228>)
 801fd3a:	a904      	add	r1, sp, #16
 801fd3c:	4630      	mov	r0, r6
 801fd3e:	f000 f879 	bl	801fe34 <_printf_i>
 801fd42:	e7e4      	b.n	801fd0e <_vfiprintf_r+0x1e6>
 801fd44:	08033d25 	.word	0x08033d25
 801fd48:	08033d2f 	.word	0x08033d2f
 801fd4c:	00000000 	.word	0x00000000
 801fd50:	0801fb03 	.word	0x0801fb03
 801fd54:	08033d2b 	.word	0x08033d2b

0801fd58 <_printf_common>:
 801fd58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fd5c:	4616      	mov	r6, r2
 801fd5e:	4698      	mov	r8, r3
 801fd60:	688a      	ldr	r2, [r1, #8]
 801fd62:	690b      	ldr	r3, [r1, #16]
 801fd64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801fd68:	4293      	cmp	r3, r2
 801fd6a:	bfb8      	it	lt
 801fd6c:	4613      	movlt	r3, r2
 801fd6e:	6033      	str	r3, [r6, #0]
 801fd70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801fd74:	4607      	mov	r7, r0
 801fd76:	460c      	mov	r4, r1
 801fd78:	b10a      	cbz	r2, 801fd7e <_printf_common+0x26>
 801fd7a:	3301      	adds	r3, #1
 801fd7c:	6033      	str	r3, [r6, #0]
 801fd7e:	6823      	ldr	r3, [r4, #0]
 801fd80:	0699      	lsls	r1, r3, #26
 801fd82:	bf42      	ittt	mi
 801fd84:	6833      	ldrmi	r3, [r6, #0]
 801fd86:	3302      	addmi	r3, #2
 801fd88:	6033      	strmi	r3, [r6, #0]
 801fd8a:	6825      	ldr	r5, [r4, #0]
 801fd8c:	f015 0506 	ands.w	r5, r5, #6
 801fd90:	d106      	bne.n	801fda0 <_printf_common+0x48>
 801fd92:	f104 0a19 	add.w	sl, r4, #25
 801fd96:	68e3      	ldr	r3, [r4, #12]
 801fd98:	6832      	ldr	r2, [r6, #0]
 801fd9a:	1a9b      	subs	r3, r3, r2
 801fd9c:	42ab      	cmp	r3, r5
 801fd9e:	dc26      	bgt.n	801fdee <_printf_common+0x96>
 801fda0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801fda4:	6822      	ldr	r2, [r4, #0]
 801fda6:	3b00      	subs	r3, #0
 801fda8:	bf18      	it	ne
 801fdaa:	2301      	movne	r3, #1
 801fdac:	0692      	lsls	r2, r2, #26
 801fdae:	d42b      	bmi.n	801fe08 <_printf_common+0xb0>
 801fdb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801fdb4:	4641      	mov	r1, r8
 801fdb6:	4638      	mov	r0, r7
 801fdb8:	47c8      	blx	r9
 801fdba:	3001      	adds	r0, #1
 801fdbc:	d01e      	beq.n	801fdfc <_printf_common+0xa4>
 801fdbe:	6823      	ldr	r3, [r4, #0]
 801fdc0:	6922      	ldr	r2, [r4, #16]
 801fdc2:	f003 0306 	and.w	r3, r3, #6
 801fdc6:	2b04      	cmp	r3, #4
 801fdc8:	bf02      	ittt	eq
 801fdca:	68e5      	ldreq	r5, [r4, #12]
 801fdcc:	6833      	ldreq	r3, [r6, #0]
 801fdce:	1aed      	subeq	r5, r5, r3
 801fdd0:	68a3      	ldr	r3, [r4, #8]
 801fdd2:	bf0c      	ite	eq
 801fdd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fdd8:	2500      	movne	r5, #0
 801fdda:	4293      	cmp	r3, r2
 801fddc:	bfc4      	itt	gt
 801fdde:	1a9b      	subgt	r3, r3, r2
 801fde0:	18ed      	addgt	r5, r5, r3
 801fde2:	2600      	movs	r6, #0
 801fde4:	341a      	adds	r4, #26
 801fde6:	42b5      	cmp	r5, r6
 801fde8:	d11a      	bne.n	801fe20 <_printf_common+0xc8>
 801fdea:	2000      	movs	r0, #0
 801fdec:	e008      	b.n	801fe00 <_printf_common+0xa8>
 801fdee:	2301      	movs	r3, #1
 801fdf0:	4652      	mov	r2, sl
 801fdf2:	4641      	mov	r1, r8
 801fdf4:	4638      	mov	r0, r7
 801fdf6:	47c8      	blx	r9
 801fdf8:	3001      	adds	r0, #1
 801fdfa:	d103      	bne.n	801fe04 <_printf_common+0xac>
 801fdfc:	f04f 30ff 	mov.w	r0, #4294967295
 801fe00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fe04:	3501      	adds	r5, #1
 801fe06:	e7c6      	b.n	801fd96 <_printf_common+0x3e>
 801fe08:	18e1      	adds	r1, r4, r3
 801fe0a:	1c5a      	adds	r2, r3, #1
 801fe0c:	2030      	movs	r0, #48	@ 0x30
 801fe0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801fe12:	4422      	add	r2, r4
 801fe14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801fe18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801fe1c:	3302      	adds	r3, #2
 801fe1e:	e7c7      	b.n	801fdb0 <_printf_common+0x58>
 801fe20:	2301      	movs	r3, #1
 801fe22:	4622      	mov	r2, r4
 801fe24:	4641      	mov	r1, r8
 801fe26:	4638      	mov	r0, r7
 801fe28:	47c8      	blx	r9
 801fe2a:	3001      	adds	r0, #1
 801fe2c:	d0e6      	beq.n	801fdfc <_printf_common+0xa4>
 801fe2e:	3601      	adds	r6, #1
 801fe30:	e7d9      	b.n	801fde6 <_printf_common+0x8e>
	...

0801fe34 <_printf_i>:
 801fe34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fe38:	7e0f      	ldrb	r7, [r1, #24]
 801fe3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801fe3c:	2f78      	cmp	r7, #120	@ 0x78
 801fe3e:	4691      	mov	r9, r2
 801fe40:	4680      	mov	r8, r0
 801fe42:	460c      	mov	r4, r1
 801fe44:	469a      	mov	sl, r3
 801fe46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801fe4a:	d807      	bhi.n	801fe5c <_printf_i+0x28>
 801fe4c:	2f62      	cmp	r7, #98	@ 0x62
 801fe4e:	d80a      	bhi.n	801fe66 <_printf_i+0x32>
 801fe50:	2f00      	cmp	r7, #0
 801fe52:	f000 80d1 	beq.w	801fff8 <_printf_i+0x1c4>
 801fe56:	2f58      	cmp	r7, #88	@ 0x58
 801fe58:	f000 80b8 	beq.w	801ffcc <_printf_i+0x198>
 801fe5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801fe60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801fe64:	e03a      	b.n	801fedc <_printf_i+0xa8>
 801fe66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801fe6a:	2b15      	cmp	r3, #21
 801fe6c:	d8f6      	bhi.n	801fe5c <_printf_i+0x28>
 801fe6e:	a101      	add	r1, pc, #4	@ (adr r1, 801fe74 <_printf_i+0x40>)
 801fe70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801fe74:	0801fecd 	.word	0x0801fecd
 801fe78:	0801fee1 	.word	0x0801fee1
 801fe7c:	0801fe5d 	.word	0x0801fe5d
 801fe80:	0801fe5d 	.word	0x0801fe5d
 801fe84:	0801fe5d 	.word	0x0801fe5d
 801fe88:	0801fe5d 	.word	0x0801fe5d
 801fe8c:	0801fee1 	.word	0x0801fee1
 801fe90:	0801fe5d 	.word	0x0801fe5d
 801fe94:	0801fe5d 	.word	0x0801fe5d
 801fe98:	0801fe5d 	.word	0x0801fe5d
 801fe9c:	0801fe5d 	.word	0x0801fe5d
 801fea0:	0801ffdf 	.word	0x0801ffdf
 801fea4:	0801ff0b 	.word	0x0801ff0b
 801fea8:	0801ff99 	.word	0x0801ff99
 801feac:	0801fe5d 	.word	0x0801fe5d
 801feb0:	0801fe5d 	.word	0x0801fe5d
 801feb4:	08020001 	.word	0x08020001
 801feb8:	0801fe5d 	.word	0x0801fe5d
 801febc:	0801ff0b 	.word	0x0801ff0b
 801fec0:	0801fe5d 	.word	0x0801fe5d
 801fec4:	0801fe5d 	.word	0x0801fe5d
 801fec8:	0801ffa1 	.word	0x0801ffa1
 801fecc:	6833      	ldr	r3, [r6, #0]
 801fece:	1d1a      	adds	r2, r3, #4
 801fed0:	681b      	ldr	r3, [r3, #0]
 801fed2:	6032      	str	r2, [r6, #0]
 801fed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801fed8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801fedc:	2301      	movs	r3, #1
 801fede:	e09c      	b.n	802001a <_printf_i+0x1e6>
 801fee0:	6833      	ldr	r3, [r6, #0]
 801fee2:	6820      	ldr	r0, [r4, #0]
 801fee4:	1d19      	adds	r1, r3, #4
 801fee6:	6031      	str	r1, [r6, #0]
 801fee8:	0606      	lsls	r6, r0, #24
 801feea:	d501      	bpl.n	801fef0 <_printf_i+0xbc>
 801feec:	681d      	ldr	r5, [r3, #0]
 801feee:	e003      	b.n	801fef8 <_printf_i+0xc4>
 801fef0:	0645      	lsls	r5, r0, #25
 801fef2:	d5fb      	bpl.n	801feec <_printf_i+0xb8>
 801fef4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801fef8:	2d00      	cmp	r5, #0
 801fefa:	da03      	bge.n	801ff04 <_printf_i+0xd0>
 801fefc:	232d      	movs	r3, #45	@ 0x2d
 801fefe:	426d      	negs	r5, r5
 801ff00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ff04:	4858      	ldr	r0, [pc, #352]	@ (8020068 <_printf_i+0x234>)
 801ff06:	230a      	movs	r3, #10
 801ff08:	e011      	b.n	801ff2e <_printf_i+0xfa>
 801ff0a:	6821      	ldr	r1, [r4, #0]
 801ff0c:	6833      	ldr	r3, [r6, #0]
 801ff0e:	0608      	lsls	r0, r1, #24
 801ff10:	f853 5b04 	ldr.w	r5, [r3], #4
 801ff14:	d402      	bmi.n	801ff1c <_printf_i+0xe8>
 801ff16:	0649      	lsls	r1, r1, #25
 801ff18:	bf48      	it	mi
 801ff1a:	b2ad      	uxthmi	r5, r5
 801ff1c:	2f6f      	cmp	r7, #111	@ 0x6f
 801ff1e:	4852      	ldr	r0, [pc, #328]	@ (8020068 <_printf_i+0x234>)
 801ff20:	6033      	str	r3, [r6, #0]
 801ff22:	bf14      	ite	ne
 801ff24:	230a      	movne	r3, #10
 801ff26:	2308      	moveq	r3, #8
 801ff28:	2100      	movs	r1, #0
 801ff2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ff2e:	6866      	ldr	r6, [r4, #4]
 801ff30:	60a6      	str	r6, [r4, #8]
 801ff32:	2e00      	cmp	r6, #0
 801ff34:	db05      	blt.n	801ff42 <_printf_i+0x10e>
 801ff36:	6821      	ldr	r1, [r4, #0]
 801ff38:	432e      	orrs	r6, r5
 801ff3a:	f021 0104 	bic.w	r1, r1, #4
 801ff3e:	6021      	str	r1, [r4, #0]
 801ff40:	d04b      	beq.n	801ffda <_printf_i+0x1a6>
 801ff42:	4616      	mov	r6, r2
 801ff44:	fbb5 f1f3 	udiv	r1, r5, r3
 801ff48:	fb03 5711 	mls	r7, r3, r1, r5
 801ff4c:	5dc7      	ldrb	r7, [r0, r7]
 801ff4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ff52:	462f      	mov	r7, r5
 801ff54:	42bb      	cmp	r3, r7
 801ff56:	460d      	mov	r5, r1
 801ff58:	d9f4      	bls.n	801ff44 <_printf_i+0x110>
 801ff5a:	2b08      	cmp	r3, #8
 801ff5c:	d10b      	bne.n	801ff76 <_printf_i+0x142>
 801ff5e:	6823      	ldr	r3, [r4, #0]
 801ff60:	07df      	lsls	r7, r3, #31
 801ff62:	d508      	bpl.n	801ff76 <_printf_i+0x142>
 801ff64:	6923      	ldr	r3, [r4, #16]
 801ff66:	6861      	ldr	r1, [r4, #4]
 801ff68:	4299      	cmp	r1, r3
 801ff6a:	bfde      	ittt	le
 801ff6c:	2330      	movle	r3, #48	@ 0x30
 801ff6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ff72:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ff76:	1b92      	subs	r2, r2, r6
 801ff78:	6122      	str	r2, [r4, #16]
 801ff7a:	f8cd a000 	str.w	sl, [sp]
 801ff7e:	464b      	mov	r3, r9
 801ff80:	aa03      	add	r2, sp, #12
 801ff82:	4621      	mov	r1, r4
 801ff84:	4640      	mov	r0, r8
 801ff86:	f7ff fee7 	bl	801fd58 <_printf_common>
 801ff8a:	3001      	adds	r0, #1
 801ff8c:	d14a      	bne.n	8020024 <_printf_i+0x1f0>
 801ff8e:	f04f 30ff 	mov.w	r0, #4294967295
 801ff92:	b004      	add	sp, #16
 801ff94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff98:	6823      	ldr	r3, [r4, #0]
 801ff9a:	f043 0320 	orr.w	r3, r3, #32
 801ff9e:	6023      	str	r3, [r4, #0]
 801ffa0:	4832      	ldr	r0, [pc, #200]	@ (802006c <_printf_i+0x238>)
 801ffa2:	2778      	movs	r7, #120	@ 0x78
 801ffa4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ffa8:	6823      	ldr	r3, [r4, #0]
 801ffaa:	6831      	ldr	r1, [r6, #0]
 801ffac:	061f      	lsls	r7, r3, #24
 801ffae:	f851 5b04 	ldr.w	r5, [r1], #4
 801ffb2:	d402      	bmi.n	801ffba <_printf_i+0x186>
 801ffb4:	065f      	lsls	r7, r3, #25
 801ffb6:	bf48      	it	mi
 801ffb8:	b2ad      	uxthmi	r5, r5
 801ffba:	6031      	str	r1, [r6, #0]
 801ffbc:	07d9      	lsls	r1, r3, #31
 801ffbe:	bf44      	itt	mi
 801ffc0:	f043 0320 	orrmi.w	r3, r3, #32
 801ffc4:	6023      	strmi	r3, [r4, #0]
 801ffc6:	b11d      	cbz	r5, 801ffd0 <_printf_i+0x19c>
 801ffc8:	2310      	movs	r3, #16
 801ffca:	e7ad      	b.n	801ff28 <_printf_i+0xf4>
 801ffcc:	4826      	ldr	r0, [pc, #152]	@ (8020068 <_printf_i+0x234>)
 801ffce:	e7e9      	b.n	801ffa4 <_printf_i+0x170>
 801ffd0:	6823      	ldr	r3, [r4, #0]
 801ffd2:	f023 0320 	bic.w	r3, r3, #32
 801ffd6:	6023      	str	r3, [r4, #0]
 801ffd8:	e7f6      	b.n	801ffc8 <_printf_i+0x194>
 801ffda:	4616      	mov	r6, r2
 801ffdc:	e7bd      	b.n	801ff5a <_printf_i+0x126>
 801ffde:	6833      	ldr	r3, [r6, #0]
 801ffe0:	6825      	ldr	r5, [r4, #0]
 801ffe2:	6961      	ldr	r1, [r4, #20]
 801ffe4:	1d18      	adds	r0, r3, #4
 801ffe6:	6030      	str	r0, [r6, #0]
 801ffe8:	062e      	lsls	r6, r5, #24
 801ffea:	681b      	ldr	r3, [r3, #0]
 801ffec:	d501      	bpl.n	801fff2 <_printf_i+0x1be>
 801ffee:	6019      	str	r1, [r3, #0]
 801fff0:	e002      	b.n	801fff8 <_printf_i+0x1c4>
 801fff2:	0668      	lsls	r0, r5, #25
 801fff4:	d5fb      	bpl.n	801ffee <_printf_i+0x1ba>
 801fff6:	8019      	strh	r1, [r3, #0]
 801fff8:	2300      	movs	r3, #0
 801fffa:	6123      	str	r3, [r4, #16]
 801fffc:	4616      	mov	r6, r2
 801fffe:	e7bc      	b.n	801ff7a <_printf_i+0x146>
 8020000:	6833      	ldr	r3, [r6, #0]
 8020002:	1d1a      	adds	r2, r3, #4
 8020004:	6032      	str	r2, [r6, #0]
 8020006:	681e      	ldr	r6, [r3, #0]
 8020008:	6862      	ldr	r2, [r4, #4]
 802000a:	2100      	movs	r1, #0
 802000c:	4630      	mov	r0, r6
 802000e:	f7e0 f987 	bl	8000320 <memchr>
 8020012:	b108      	cbz	r0, 8020018 <_printf_i+0x1e4>
 8020014:	1b80      	subs	r0, r0, r6
 8020016:	6060      	str	r0, [r4, #4]
 8020018:	6863      	ldr	r3, [r4, #4]
 802001a:	6123      	str	r3, [r4, #16]
 802001c:	2300      	movs	r3, #0
 802001e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020022:	e7aa      	b.n	801ff7a <_printf_i+0x146>
 8020024:	6923      	ldr	r3, [r4, #16]
 8020026:	4632      	mov	r2, r6
 8020028:	4649      	mov	r1, r9
 802002a:	4640      	mov	r0, r8
 802002c:	47d0      	blx	sl
 802002e:	3001      	adds	r0, #1
 8020030:	d0ad      	beq.n	801ff8e <_printf_i+0x15a>
 8020032:	6823      	ldr	r3, [r4, #0]
 8020034:	079b      	lsls	r3, r3, #30
 8020036:	d413      	bmi.n	8020060 <_printf_i+0x22c>
 8020038:	68e0      	ldr	r0, [r4, #12]
 802003a:	9b03      	ldr	r3, [sp, #12]
 802003c:	4298      	cmp	r0, r3
 802003e:	bfb8      	it	lt
 8020040:	4618      	movlt	r0, r3
 8020042:	e7a6      	b.n	801ff92 <_printf_i+0x15e>
 8020044:	2301      	movs	r3, #1
 8020046:	4632      	mov	r2, r6
 8020048:	4649      	mov	r1, r9
 802004a:	4640      	mov	r0, r8
 802004c:	47d0      	blx	sl
 802004e:	3001      	adds	r0, #1
 8020050:	d09d      	beq.n	801ff8e <_printf_i+0x15a>
 8020052:	3501      	adds	r5, #1
 8020054:	68e3      	ldr	r3, [r4, #12]
 8020056:	9903      	ldr	r1, [sp, #12]
 8020058:	1a5b      	subs	r3, r3, r1
 802005a:	42ab      	cmp	r3, r5
 802005c:	dcf2      	bgt.n	8020044 <_printf_i+0x210>
 802005e:	e7eb      	b.n	8020038 <_printf_i+0x204>
 8020060:	2500      	movs	r5, #0
 8020062:	f104 0619 	add.w	r6, r4, #25
 8020066:	e7f5      	b.n	8020054 <_printf_i+0x220>
 8020068:	08033d36 	.word	0x08033d36
 802006c:	08033d47 	.word	0x08033d47

08020070 <__sflush_r>:
 8020070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020078:	0716      	lsls	r6, r2, #28
 802007a:	4605      	mov	r5, r0
 802007c:	460c      	mov	r4, r1
 802007e:	d454      	bmi.n	802012a <__sflush_r+0xba>
 8020080:	684b      	ldr	r3, [r1, #4]
 8020082:	2b00      	cmp	r3, #0
 8020084:	dc02      	bgt.n	802008c <__sflush_r+0x1c>
 8020086:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8020088:	2b00      	cmp	r3, #0
 802008a:	dd48      	ble.n	802011e <__sflush_r+0xae>
 802008c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802008e:	2e00      	cmp	r6, #0
 8020090:	d045      	beq.n	802011e <__sflush_r+0xae>
 8020092:	2300      	movs	r3, #0
 8020094:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8020098:	682f      	ldr	r7, [r5, #0]
 802009a:	6a21      	ldr	r1, [r4, #32]
 802009c:	602b      	str	r3, [r5, #0]
 802009e:	d030      	beq.n	8020102 <__sflush_r+0x92>
 80200a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80200a2:	89a3      	ldrh	r3, [r4, #12]
 80200a4:	0759      	lsls	r1, r3, #29
 80200a6:	d505      	bpl.n	80200b4 <__sflush_r+0x44>
 80200a8:	6863      	ldr	r3, [r4, #4]
 80200aa:	1ad2      	subs	r2, r2, r3
 80200ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80200ae:	b10b      	cbz	r3, 80200b4 <__sflush_r+0x44>
 80200b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80200b2:	1ad2      	subs	r2, r2, r3
 80200b4:	2300      	movs	r3, #0
 80200b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80200b8:	6a21      	ldr	r1, [r4, #32]
 80200ba:	4628      	mov	r0, r5
 80200bc:	47b0      	blx	r6
 80200be:	1c43      	adds	r3, r0, #1
 80200c0:	89a3      	ldrh	r3, [r4, #12]
 80200c2:	d106      	bne.n	80200d2 <__sflush_r+0x62>
 80200c4:	6829      	ldr	r1, [r5, #0]
 80200c6:	291d      	cmp	r1, #29
 80200c8:	d82b      	bhi.n	8020122 <__sflush_r+0xb2>
 80200ca:	4a2a      	ldr	r2, [pc, #168]	@ (8020174 <__sflush_r+0x104>)
 80200cc:	40ca      	lsrs	r2, r1
 80200ce:	07d6      	lsls	r6, r2, #31
 80200d0:	d527      	bpl.n	8020122 <__sflush_r+0xb2>
 80200d2:	2200      	movs	r2, #0
 80200d4:	6062      	str	r2, [r4, #4]
 80200d6:	04d9      	lsls	r1, r3, #19
 80200d8:	6922      	ldr	r2, [r4, #16]
 80200da:	6022      	str	r2, [r4, #0]
 80200dc:	d504      	bpl.n	80200e8 <__sflush_r+0x78>
 80200de:	1c42      	adds	r2, r0, #1
 80200e0:	d101      	bne.n	80200e6 <__sflush_r+0x76>
 80200e2:	682b      	ldr	r3, [r5, #0]
 80200e4:	b903      	cbnz	r3, 80200e8 <__sflush_r+0x78>
 80200e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80200e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80200ea:	602f      	str	r7, [r5, #0]
 80200ec:	b1b9      	cbz	r1, 802011e <__sflush_r+0xae>
 80200ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80200f2:	4299      	cmp	r1, r3
 80200f4:	d002      	beq.n	80200fc <__sflush_r+0x8c>
 80200f6:	4628      	mov	r0, r5
 80200f8:	f7ff fa9c 	bl	801f634 <_free_r>
 80200fc:	2300      	movs	r3, #0
 80200fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8020100:	e00d      	b.n	802011e <__sflush_r+0xae>
 8020102:	2301      	movs	r3, #1
 8020104:	4628      	mov	r0, r5
 8020106:	47b0      	blx	r6
 8020108:	4602      	mov	r2, r0
 802010a:	1c50      	adds	r0, r2, #1
 802010c:	d1c9      	bne.n	80200a2 <__sflush_r+0x32>
 802010e:	682b      	ldr	r3, [r5, #0]
 8020110:	2b00      	cmp	r3, #0
 8020112:	d0c6      	beq.n	80200a2 <__sflush_r+0x32>
 8020114:	2b1d      	cmp	r3, #29
 8020116:	d001      	beq.n	802011c <__sflush_r+0xac>
 8020118:	2b16      	cmp	r3, #22
 802011a:	d11e      	bne.n	802015a <__sflush_r+0xea>
 802011c:	602f      	str	r7, [r5, #0]
 802011e:	2000      	movs	r0, #0
 8020120:	e022      	b.n	8020168 <__sflush_r+0xf8>
 8020122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020126:	b21b      	sxth	r3, r3
 8020128:	e01b      	b.n	8020162 <__sflush_r+0xf2>
 802012a:	690f      	ldr	r7, [r1, #16]
 802012c:	2f00      	cmp	r7, #0
 802012e:	d0f6      	beq.n	802011e <__sflush_r+0xae>
 8020130:	0793      	lsls	r3, r2, #30
 8020132:	680e      	ldr	r6, [r1, #0]
 8020134:	bf08      	it	eq
 8020136:	694b      	ldreq	r3, [r1, #20]
 8020138:	600f      	str	r7, [r1, #0]
 802013a:	bf18      	it	ne
 802013c:	2300      	movne	r3, #0
 802013e:	eba6 0807 	sub.w	r8, r6, r7
 8020142:	608b      	str	r3, [r1, #8]
 8020144:	f1b8 0f00 	cmp.w	r8, #0
 8020148:	dde9      	ble.n	802011e <__sflush_r+0xae>
 802014a:	6a21      	ldr	r1, [r4, #32]
 802014c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802014e:	4643      	mov	r3, r8
 8020150:	463a      	mov	r2, r7
 8020152:	4628      	mov	r0, r5
 8020154:	47b0      	blx	r6
 8020156:	2800      	cmp	r0, #0
 8020158:	dc08      	bgt.n	802016c <__sflush_r+0xfc>
 802015a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802015e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020162:	81a3      	strh	r3, [r4, #12]
 8020164:	f04f 30ff 	mov.w	r0, #4294967295
 8020168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802016c:	4407      	add	r7, r0
 802016e:	eba8 0800 	sub.w	r8, r8, r0
 8020172:	e7e7      	b.n	8020144 <__sflush_r+0xd4>
 8020174:	20400001 	.word	0x20400001

08020178 <_fflush_r>:
 8020178:	b538      	push	{r3, r4, r5, lr}
 802017a:	690b      	ldr	r3, [r1, #16]
 802017c:	4605      	mov	r5, r0
 802017e:	460c      	mov	r4, r1
 8020180:	b913      	cbnz	r3, 8020188 <_fflush_r+0x10>
 8020182:	2500      	movs	r5, #0
 8020184:	4628      	mov	r0, r5
 8020186:	bd38      	pop	{r3, r4, r5, pc}
 8020188:	b118      	cbz	r0, 8020192 <_fflush_r+0x1a>
 802018a:	6a03      	ldr	r3, [r0, #32]
 802018c:	b90b      	cbnz	r3, 8020192 <_fflush_r+0x1a>
 802018e:	f7fe ff9f 	bl	801f0d0 <__sinit>
 8020192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020196:	2b00      	cmp	r3, #0
 8020198:	d0f3      	beq.n	8020182 <_fflush_r+0xa>
 802019a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802019c:	07d0      	lsls	r0, r2, #31
 802019e:	d404      	bmi.n	80201aa <_fflush_r+0x32>
 80201a0:	0599      	lsls	r1, r3, #22
 80201a2:	d402      	bmi.n	80201aa <_fflush_r+0x32>
 80201a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80201a6:	f7ff fa34 	bl	801f612 <__retarget_lock_acquire_recursive>
 80201aa:	4628      	mov	r0, r5
 80201ac:	4621      	mov	r1, r4
 80201ae:	f7ff ff5f 	bl	8020070 <__sflush_r>
 80201b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80201b4:	07da      	lsls	r2, r3, #31
 80201b6:	4605      	mov	r5, r0
 80201b8:	d4e4      	bmi.n	8020184 <_fflush_r+0xc>
 80201ba:	89a3      	ldrh	r3, [r4, #12]
 80201bc:	059b      	lsls	r3, r3, #22
 80201be:	d4e1      	bmi.n	8020184 <_fflush_r+0xc>
 80201c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80201c2:	f7ff fa27 	bl	801f614 <__retarget_lock_release_recursive>
 80201c6:	e7dd      	b.n	8020184 <_fflush_r+0xc>

080201c8 <__swhatbuf_r>:
 80201c8:	b570      	push	{r4, r5, r6, lr}
 80201ca:	460c      	mov	r4, r1
 80201cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80201d0:	2900      	cmp	r1, #0
 80201d2:	b096      	sub	sp, #88	@ 0x58
 80201d4:	4615      	mov	r5, r2
 80201d6:	461e      	mov	r6, r3
 80201d8:	da0d      	bge.n	80201f6 <__swhatbuf_r+0x2e>
 80201da:	89a3      	ldrh	r3, [r4, #12]
 80201dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80201e0:	f04f 0100 	mov.w	r1, #0
 80201e4:	bf14      	ite	ne
 80201e6:	2340      	movne	r3, #64	@ 0x40
 80201e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80201ec:	2000      	movs	r0, #0
 80201ee:	6031      	str	r1, [r6, #0]
 80201f0:	602b      	str	r3, [r5, #0]
 80201f2:	b016      	add	sp, #88	@ 0x58
 80201f4:	bd70      	pop	{r4, r5, r6, pc}
 80201f6:	466a      	mov	r2, sp
 80201f8:	f000 f862 	bl	80202c0 <_fstat_r>
 80201fc:	2800      	cmp	r0, #0
 80201fe:	dbec      	blt.n	80201da <__swhatbuf_r+0x12>
 8020200:	9901      	ldr	r1, [sp, #4]
 8020202:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8020206:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802020a:	4259      	negs	r1, r3
 802020c:	4159      	adcs	r1, r3
 802020e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020212:	e7eb      	b.n	80201ec <__swhatbuf_r+0x24>

08020214 <__smakebuf_r>:
 8020214:	898b      	ldrh	r3, [r1, #12]
 8020216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020218:	079d      	lsls	r5, r3, #30
 802021a:	4606      	mov	r6, r0
 802021c:	460c      	mov	r4, r1
 802021e:	d507      	bpl.n	8020230 <__smakebuf_r+0x1c>
 8020220:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8020224:	6023      	str	r3, [r4, #0]
 8020226:	6123      	str	r3, [r4, #16]
 8020228:	2301      	movs	r3, #1
 802022a:	6163      	str	r3, [r4, #20]
 802022c:	b003      	add	sp, #12
 802022e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020230:	ab01      	add	r3, sp, #4
 8020232:	466a      	mov	r2, sp
 8020234:	f7ff ffc8 	bl	80201c8 <__swhatbuf_r>
 8020238:	9f00      	ldr	r7, [sp, #0]
 802023a:	4605      	mov	r5, r0
 802023c:	4639      	mov	r1, r7
 802023e:	4630      	mov	r0, r6
 8020240:	f7ff fa64 	bl	801f70c <_malloc_r>
 8020244:	b948      	cbnz	r0, 802025a <__smakebuf_r+0x46>
 8020246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802024a:	059a      	lsls	r2, r3, #22
 802024c:	d4ee      	bmi.n	802022c <__smakebuf_r+0x18>
 802024e:	f023 0303 	bic.w	r3, r3, #3
 8020252:	f043 0302 	orr.w	r3, r3, #2
 8020256:	81a3      	strh	r3, [r4, #12]
 8020258:	e7e2      	b.n	8020220 <__smakebuf_r+0xc>
 802025a:	89a3      	ldrh	r3, [r4, #12]
 802025c:	6020      	str	r0, [r4, #0]
 802025e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020262:	81a3      	strh	r3, [r4, #12]
 8020264:	9b01      	ldr	r3, [sp, #4]
 8020266:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802026a:	b15b      	cbz	r3, 8020284 <__smakebuf_r+0x70>
 802026c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020270:	4630      	mov	r0, r6
 8020272:	f000 f837 	bl	80202e4 <_isatty_r>
 8020276:	b128      	cbz	r0, 8020284 <__smakebuf_r+0x70>
 8020278:	89a3      	ldrh	r3, [r4, #12]
 802027a:	f023 0303 	bic.w	r3, r3, #3
 802027e:	f043 0301 	orr.w	r3, r3, #1
 8020282:	81a3      	strh	r3, [r4, #12]
 8020284:	89a3      	ldrh	r3, [r4, #12]
 8020286:	431d      	orrs	r5, r3
 8020288:	81a5      	strh	r5, [r4, #12]
 802028a:	e7cf      	b.n	802022c <__smakebuf_r+0x18>

0802028c <memmove>:
 802028c:	4288      	cmp	r0, r1
 802028e:	b510      	push	{r4, lr}
 8020290:	eb01 0402 	add.w	r4, r1, r2
 8020294:	d902      	bls.n	802029c <memmove+0x10>
 8020296:	4284      	cmp	r4, r0
 8020298:	4623      	mov	r3, r4
 802029a:	d807      	bhi.n	80202ac <memmove+0x20>
 802029c:	1e43      	subs	r3, r0, #1
 802029e:	42a1      	cmp	r1, r4
 80202a0:	d008      	beq.n	80202b4 <memmove+0x28>
 80202a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80202a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80202aa:	e7f8      	b.n	802029e <memmove+0x12>
 80202ac:	4402      	add	r2, r0
 80202ae:	4601      	mov	r1, r0
 80202b0:	428a      	cmp	r2, r1
 80202b2:	d100      	bne.n	80202b6 <memmove+0x2a>
 80202b4:	bd10      	pop	{r4, pc}
 80202b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80202ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80202be:	e7f7      	b.n	80202b0 <memmove+0x24>

080202c0 <_fstat_r>:
 80202c0:	b538      	push	{r3, r4, r5, lr}
 80202c2:	4d07      	ldr	r5, [pc, #28]	@ (80202e0 <_fstat_r+0x20>)
 80202c4:	2300      	movs	r3, #0
 80202c6:	4604      	mov	r4, r0
 80202c8:	4608      	mov	r0, r1
 80202ca:	4611      	mov	r1, r2
 80202cc:	602b      	str	r3, [r5, #0]
 80202ce:	f7e2 f8e7 	bl	80024a0 <_fstat>
 80202d2:	1c43      	adds	r3, r0, #1
 80202d4:	d102      	bne.n	80202dc <_fstat_r+0x1c>
 80202d6:	682b      	ldr	r3, [r5, #0]
 80202d8:	b103      	cbz	r3, 80202dc <_fstat_r+0x1c>
 80202da:	6023      	str	r3, [r4, #0]
 80202dc:	bd38      	pop	{r3, r4, r5, pc}
 80202de:	bf00      	nop
 80202e0:	24008dd8 	.word	0x24008dd8

080202e4 <_isatty_r>:
 80202e4:	b538      	push	{r3, r4, r5, lr}
 80202e6:	4d06      	ldr	r5, [pc, #24]	@ (8020300 <_isatty_r+0x1c>)
 80202e8:	2300      	movs	r3, #0
 80202ea:	4604      	mov	r4, r0
 80202ec:	4608      	mov	r0, r1
 80202ee:	602b      	str	r3, [r5, #0]
 80202f0:	f7e2 f8e6 	bl	80024c0 <_isatty>
 80202f4:	1c43      	adds	r3, r0, #1
 80202f6:	d102      	bne.n	80202fe <_isatty_r+0x1a>
 80202f8:	682b      	ldr	r3, [r5, #0]
 80202fa:	b103      	cbz	r3, 80202fe <_isatty_r+0x1a>
 80202fc:	6023      	str	r3, [r4, #0]
 80202fe:	bd38      	pop	{r3, r4, r5, pc}
 8020300:	24008dd8 	.word	0x24008dd8

08020304 <_sbrk_r>:
 8020304:	b538      	push	{r3, r4, r5, lr}
 8020306:	4d06      	ldr	r5, [pc, #24]	@ (8020320 <_sbrk_r+0x1c>)
 8020308:	2300      	movs	r3, #0
 802030a:	4604      	mov	r4, r0
 802030c:	4608      	mov	r0, r1
 802030e:	602b      	str	r3, [r5, #0]
 8020310:	f7e2 f8ee 	bl	80024f0 <_sbrk>
 8020314:	1c43      	adds	r3, r0, #1
 8020316:	d102      	bne.n	802031e <_sbrk_r+0x1a>
 8020318:	682b      	ldr	r3, [r5, #0]
 802031a:	b103      	cbz	r3, 802031e <_sbrk_r+0x1a>
 802031c:	6023      	str	r3, [r4, #0]
 802031e:	bd38      	pop	{r3, r4, r5, pc}
 8020320:	24008dd8 	.word	0x24008dd8

08020324 <_realloc_r>:
 8020324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020328:	4607      	mov	r7, r0
 802032a:	4614      	mov	r4, r2
 802032c:	460d      	mov	r5, r1
 802032e:	b921      	cbnz	r1, 802033a <_realloc_r+0x16>
 8020330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020334:	4611      	mov	r1, r2
 8020336:	f7ff b9e9 	b.w	801f70c <_malloc_r>
 802033a:	b92a      	cbnz	r2, 8020348 <_realloc_r+0x24>
 802033c:	f7ff f97a 	bl	801f634 <_free_r>
 8020340:	4625      	mov	r5, r4
 8020342:	4628      	mov	r0, r5
 8020344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020348:	f000 f81a 	bl	8020380 <_malloc_usable_size_r>
 802034c:	4284      	cmp	r4, r0
 802034e:	4606      	mov	r6, r0
 8020350:	d802      	bhi.n	8020358 <_realloc_r+0x34>
 8020352:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8020356:	d8f4      	bhi.n	8020342 <_realloc_r+0x1e>
 8020358:	4621      	mov	r1, r4
 802035a:	4638      	mov	r0, r7
 802035c:	f7ff f9d6 	bl	801f70c <_malloc_r>
 8020360:	4680      	mov	r8, r0
 8020362:	b908      	cbnz	r0, 8020368 <_realloc_r+0x44>
 8020364:	4645      	mov	r5, r8
 8020366:	e7ec      	b.n	8020342 <_realloc_r+0x1e>
 8020368:	42b4      	cmp	r4, r6
 802036a:	4622      	mov	r2, r4
 802036c:	4629      	mov	r1, r5
 802036e:	bf28      	it	cs
 8020370:	4632      	movcs	r2, r6
 8020372:	f7ff f950 	bl	801f616 <memcpy>
 8020376:	4629      	mov	r1, r5
 8020378:	4638      	mov	r0, r7
 802037a:	f7ff f95b 	bl	801f634 <_free_r>
 802037e:	e7f1      	b.n	8020364 <_realloc_r+0x40>

08020380 <_malloc_usable_size_r>:
 8020380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020384:	1f18      	subs	r0, r3, #4
 8020386:	2b00      	cmp	r3, #0
 8020388:	bfbc      	itt	lt
 802038a:	580b      	ldrlt	r3, [r1, r0]
 802038c:	18c0      	addlt	r0, r0, r3
 802038e:	4770      	bx	lr

08020390 <_init>:
 8020390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020392:	bf00      	nop
 8020394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020396:	bc08      	pop	{r3}
 8020398:	469e      	mov	lr, r3
 802039a:	4770      	bx	lr

0802039c <_fini>:
 802039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802039e:	bf00      	nop
 80203a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80203a2:	bc08      	pop	{r3}
 80203a4:	469e      	mov	lr, r3
 80203a6:	4770      	bx	lr
