
rubbish-bin-v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e5cc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000138f0  0801e89c  0801e89c  0001f89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803218c  0803218c  0003318c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08032194  08032194  00033194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08032198  08032198  00033198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  0803219c  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008acc  2400007c  08032218  0003407c  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  24008b48  08032218  00034b48  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003407c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004407e  00000000  00000000  000340aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008fc4  00000000  00000000  00078128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002df8  00000000  00000000  000810f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000023bb  00000000  00000000  00083ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00010dc2  00000000  00000000  000862a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00049685  00000000  00000000  00097065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f09e  00000000  00000000  000e06ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0025f788  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c908  00000000  00000000  0025f7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  0026c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e884 	.word	0x0801e884

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	0801e884 	.word	0x0801e884

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <my_printf>:
}
*/
extern UART_HandleTypeDef hlpuart1;

static inline void my_printf(const char *format, ...)
{
 80006ec:	b40f      	push	{r0, r1, r2, r3}
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b0c2      	sub	sp, #264	@ 0x108
 80006f2:	af00      	add	r7, sp, #0
    char buffer[256];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80006f4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80006f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000700:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800070a:	f107 0008 	add.w	r0, r7, #8
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000714:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000718:	f01d f8c4 	bl	801d8a4 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fdf5 	bl	8000310 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f107 0108 	add.w	r1, r7, #8
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <my_printf+0x5c>)
 8000734:	f00e f802 	bl	800e73c <HAL_UART_Transmit>
}
 8000738:	bf00      	nop
 800073a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800073e:	46bd      	mov	sp, r7
 8000740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr
 8000748:	2400020c 	.word	0x2400020c

0800074c <HAL_GPIO_EXTI_Callback>:
void tud_umount_cb(void) {
  //Do nothing for now
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_3) {
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	2b08      	cmp	r3, #8
 800075a:	d10d      	bne.n	8000778 <HAL_GPIO_EXTI_Callback+0x2c>
    	my_printf("hello from exti\r\n");
 800075c:	4808      	ldr	r0, [pc, #32]	@ (8000780 <HAL_GPIO_EXTI_Callback+0x34>)
 800075e:	f7ff ffc5 	bl	80006ec <my_printf>
    	if (recording_state == READY)
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <HAL_GPIO_EXTI_Callback+0x38>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d103      	bne.n	8000772 <HAL_GPIO_EXTI_Callback+0x26>
    	{
    		recording_state = DO_RECORDING;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_GPIO_EXTI_Callback+0x38>)
 800076c:	2202      	movs	r2, #2
 800076e:	701a      	strb	r2, [r3, #0]
    	} else {
    		my_printf("not ready for recording\r\n");
    	}
    }
}
 8000770:	e002      	b.n	8000778 <HAL_GPIO_EXTI_Callback+0x2c>
    		my_printf("not ready for recording\r\n");
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000774:	f7ff ffba 	bl	80006ec <my_printf>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	0801e89c 	.word	0x0801e89c
 8000784:	24001e78 	.word	0x24001e78
 8000788:	0801e8b0 	.word	0x0801e8b0

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f003 fa51 	bl	8003c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f8bd 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 fbbd 	bl	8000f18 <MX_GPIO_Init>
  MX_DMA_Init();
 800079e:	f000 fb9b 	bl	8000ed8 <MX_DMA_Init>
  MX_I2C1_Init();
 80007a2:	f000 f925 	bl	80009f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007a6:	f000 f963 	bl	8000a70 <MX_I2C2_Init>
  MX_SPI4_Init();
 80007aa:	f000 fa8b 	bl	8000cc4 <MX_SPI4_Init>
  MX_TIM2_Init();
 80007ae:	f000 fadf 	bl	8000d70 <MX_TIM2_Init>
  MX_SDMMC1_SD_Init();
 80007b2:	f000 fa69 	bl	8000c88 <MX_SDMMC1_SD_Init>
  MX_I2S1_Init();
 80007b6:	f000 f99b 	bl	8000af0 <MX_I2S1_Init>
  MX_UART5_Init();
 80007ba:	f000 fa19 	bl	8000bf0 <MX_UART5_Init>
  MX_FATFS_Init();
 80007be:	f010 faad 	bl	8010d1c <MX_FATFS_Init>
  MX_LPUART1_UART_Init();
 80007c2:	f000 f9c9 	bl	8000b58 <MX_LPUART1_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 80007c6:	f000 fb55 	bl	8000e74 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  my_printf("test print\r\n");
 80007ca:	4844      	ldr	r0, [pc, #272]	@ (80008dc <main+0x150>)
 80007cc:	f7ff ff8e 	bl	80006ec <my_printf>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007d0:	2100      	movs	r1, #0
 80007d2:	4843      	ldr	r0, [pc, #268]	@ (80008e0 <main+0x154>)
 80007d4:	f00c ff58 	bl	800d688 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007d8:	2104      	movs	r1, #4
 80007da:	4841      	ldr	r0, [pc, #260]	@ (80008e0 <main+0x154>)
 80007dc:	f00c ff54 	bl	800d688 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 80007e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e4:	f003 faba 	bl	8003d5c <HAL_Delay>

  mfcc_q15_init();
 80007e8:	f000 fc96 	bl	8001118 <mfcc_q15_init>

  st7920_init();
 80007ec:	f000 fff2 	bl	80017d4 <st7920_init>
  st7920_clear();
 80007f0:	f001 f95c 	bl	8001aac <st7920_clear>
  st7920_print(1, 1, "sd card mount failed");
 80007f4:	4a3b      	ldr	r2, [pc, #236]	@ (80008e4 <main+0x158>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	2001      	movs	r0, #1
 80007fa:	f001 f931 	bl	8001a60 <st7920_print>
  st7920_sendBuffer();
 80007fe:	f001 f881 	bl	8001904 <st7920_sendBuffer>
  sd_init();
 8000802:	f000 fd0f 	bl	8001224 <sd_init>
  st7920_clear();
 8000806:	f001 f951 	bl	8001aac <st7920_clear>
  st7920_print(1, 1, "sd card mount success");
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <main+0x15c>)
 800080c:	2101      	movs	r1, #1
 800080e:	2001      	movs	r0, #1
 8000810:	f001 f926 	bl	8001a60 <st7920_print>
  st7920_sendBuffer();
 8000814:	f001 f876 	bl	8001904 <st7920_sendBuffer>
  recording_state = READY; // READY as sd card success, can write data to it
 8000818:	4b34      	ldr	r3, [pc, #208]	@ (80008ec <main+0x160>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]

  if(vl53l0x_init())
 800081e:	f003 f999 	bl	8003b54 <vl53l0x_init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d008      	beq.n	800083a <main+0xae>
  {
	  my_printf("init vl53l0x success\r\n");
 8000828:	4831      	ldr	r0, [pc, #196]	@ (80008f0 <main+0x164>)
 800082a:	f7ff ff5f 	bl	80006ec <my_printf>
	  st7920_print(1, 9, "vl53l0x init success");
 800082e:	4a31      	ldr	r2, [pc, #196]	@ (80008f4 <main+0x168>)
 8000830:	2109      	movs	r1, #9
 8000832:	2001      	movs	r0, #1
 8000834:	f001 f914 	bl	8001a60 <st7920_print>
 8000838:	e007      	b.n	800084a <main+0xbe>
  } else {
	  my_printf("init vl53l0x failed\r\n");
 800083a:	482f      	ldr	r0, [pc, #188]	@ (80008f8 <main+0x16c>)
 800083c:	f7ff ff56 	bl	80006ec <my_printf>
	  st7920_print(1, 9, "vl53l0x init failed");
 8000840:	4a2e      	ldr	r2, [pc, #184]	@ (80008fc <main+0x170>)
 8000842:	2109      	movs	r1, #9
 8000844:	2001      	movs	r0, #1
 8000846:	f001 f90b 	bl	8001a60 <st7920_print>
  }
  my_printf("finish setup\r\n");
 800084a:	482d      	ldr	r0, [pc, #180]	@ (8000900 <main+0x174>)
 800084c:	f7ff ff4e 	bl	80006ec <my_printf>
  st7920_print(1, 17, "waiting for exti");
 8000850:	4a2c      	ldr	r2, [pc, #176]	@ (8000904 <main+0x178>)
 8000852:	2111      	movs	r1, #17
 8000854:	2001      	movs	r0, #1
 8000856:	f001 f903 	bl	8001a60 <st7920_print>
  st7920_sendBuffer();
 800085a:	f001 f853 	bl	8001904 <st7920_sendBuffer>

  servo360_init();
 800085e:	f000 ff1e 	bl	800169e <servo360_init>
  set_servo_speed(150);
 8000862:	2096      	movs	r0, #150	@ 0x96
 8000864:	f000 ff34 	bl	80016d0 <set_servo_speed>
 8000868:	2300      	movs	r3, #0
 800086a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
// Init device stack on roothub port
#if TUSB_VERSION_NUMBER > 2000  // 0.20.0
TU_ATTR_DEPRECATED("Please use tusb_init(rhport, rh_init) instead")
#endif
TU_ATTR_ALWAYS_INLINE static inline bool tud_init (uint8_t rhport) {
  const tusb_rhport_init_t rh_init = {
 800086e:	2301      	movs	r3, #1
 8000870:	f887 3020 	strb.w	r3, [r7, #32]
 8000874:	2300      	movs	r3, #0
 8000876:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    .role = TUSB_ROLE_DEVICE,
    .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
  };
  return tud_rhport_init(rhport, &rh_init);
 800087a:	f107 0220 	add.w	r2, r7, #32
 800087e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f017 fdb3 	bl	80183f0 <tud_rhport_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (recording_state == DO_RECORDING) {
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <main+0x160>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d1fb      	bne.n	800088a <main+0xfe>
		recording_state = RECORDING;
 8000892:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <main+0x160>)
 8000894:	2203      	movs	r2, #3
 8000896:	701a      	strb	r2, [r3, #0]
		my_printf("recording started from exti\r\n");
 8000898:	481b      	ldr	r0, [pc, #108]	@ (8000908 <main+0x17c>)
 800089a:	f7ff ff27 	bl	80006ec <my_printf>
		st7920_clear();
 800089e:	f001 f905 	bl	8001aac <st7920_clear>
		st7920_print(1, 17, "record start");
 80008a2:	4a1a      	ldr	r2, [pc, #104]	@ (800090c <main+0x180>)
 80008a4:	2111      	movs	r1, #17
 80008a6:	2001      	movs	r0, #1
 80008a8:	f001 f8da 	bl	8001a60 <st7920_print>
		st7920_sendBuffer();
 80008ac:	f001 f82a 	bl	8001904 <st7920_sendBuffer>
		int num_of_file = record_and_convert();
 80008b0:	f000 fee8 	bl	8001684 <record_and_convert>
 80008b4:	6278      	str	r0, [r7, #36]	@ 0x24
		char tx_buffer[30];
		sprintf(tx_buffer, "record saved to %d", num_of_file);
 80008b6:	463b      	mov	r3, r7
 80008b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008ba:	4915      	ldr	r1, [pc, #84]	@ (8000910 <main+0x184>)
 80008bc:	4618      	mov	r0, r3
 80008be:	f01c ff5d 	bl	801d77c <siprintf>
		st7920_print(1, 25, tx_buffer);
 80008c2:	463b      	mov	r3, r7
 80008c4:	461a      	mov	r2, r3
 80008c6:	2119      	movs	r1, #25
 80008c8:	2001      	movs	r0, #1
 80008ca:	f001 f8c9 	bl	8001a60 <st7920_print>
		st7920_sendBuffer();
 80008ce:	f001 f819 	bl	8001904 <st7920_sendBuffer>
		recording_state = READY;
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <main+0x160>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
	  if (recording_state == DO_RECORDING) {
 80008d8:	e7d7      	b.n	800088a <main+0xfe>
 80008da:	bf00      	nop
 80008dc:	0801e8cc 	.word	0x0801e8cc
 80008e0:	24000438 	.word	0x24000438
 80008e4:	0801e8dc 	.word	0x0801e8dc
 80008e8:	0801e8f4 	.word	0x0801e8f4
 80008ec:	24001e78 	.word	0x24001e78
 80008f0:	0801e90c 	.word	0x0801e90c
 80008f4:	0801e924 	.word	0x0801e924
 80008f8:	0801e93c 	.word	0x0801e93c
 80008fc:	0801e954 	.word	0x0801e954
 8000900:	0801e968 	.word	0x0801e968
 8000904:	0801e978 	.word	0x0801e978
 8000908:	0801e98c 	.word	0x0801e98c
 800090c:	0801e9ac 	.word	0x0801e9ac
 8000910:	0801e9bc 	.word	0x0801e9bc

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09c      	sub	sp, #112	@ 0x70
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091e:	224c      	movs	r2, #76	@ 0x4c
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f01d f860 	bl	801d9e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2220      	movs	r2, #32
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f01d f85a 	bl	801d9e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000934:	2002      	movs	r0, #2
 8000936:	f007 faab 	bl	8007e90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b2b      	ldr	r3, [pc, #172]	@ (80009ec <SystemClock_Config+0xd8>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a2a      	ldr	r2, [pc, #168]	@ (80009ec <SystemClock_Config+0xd8>)
 8000944:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b28      	ldr	r3, [pc, #160]	@ (80009ec <SystemClock_Config+0xd8>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000956:	bf00      	nop
 8000958:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <SystemClock_Config+0xd8>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000964:	d1f8      	bne.n	8000958 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000966:	2301      	movs	r3, #1
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800096a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000974:	2302      	movs	r3, #2
 8000976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000978:	2305      	movs	r3, #5
 800097a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 800097c:	2330      	movs	r3, #48	@ 0x30
 800097e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000980:	2301      	movs	r3, #1
 8000982:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000984:	2305      	movs	r3, #5
 8000986:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800098c:	2308      	movs	r3, #8
 800098e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000990:	2300      	movs	r3, #0
 8000992:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099c:	4618      	mov	r0, r3
 800099e:	f007 fac1 	bl	8007f24 <HAL_RCC_OscConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009a8:	f000 fb80 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ac:	233f      	movs	r3, #63	@ 0x3f
 80009ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b0:	2303      	movs	r3, #3
 80009b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009bc:	2340      	movs	r3, #64	@ 0x40
 80009be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c0:	2340      	movs	r3, #64	@ 0x40
 80009c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ca:	2340      	movs	r3, #64	@ 0x40
 80009cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2103      	movs	r1, #3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f007 fe80 	bl	80086d8 <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80009de:	f000 fb65 	bl	80010ac <Error_Handler>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3770      	adds	r7, #112	@ 0x70
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	58024800 	.word	0x58024800

080009f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <MX_I2C1_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <MX_I2C1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <MX_I2C1_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <MX_I2C1_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a2c:	f006 f898 	bl	8006b60 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 fb39 	bl	80010ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a3e:	f006 fddf 	bl	8007600 <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 fb30 	bl	80010ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a50:	f006 fe21 	bl	8007696 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 fb27 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	24000098 	.word	0x24000098
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	307075b1 	.word	0x307075b1

08000a70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae8 <MX_I2C2_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000aec <MX_I2C2_Init+0x7c>)
 8000a7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a80:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aaa:	480e      	ldr	r0, [pc, #56]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000aac:	f006 f858 	bl	8006b60 <HAL_I2C_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ab6:	f000 faf9 	bl	80010ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000abe:	f006 fd9f 	bl	8007600 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ac8:	f000 faf0 	bl	80010ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_I2C2_Init+0x74>)
 8000ad0:	f006 fde1 	bl	8007696 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fae7 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	240000ec 	.word	0x240000ec
 8000ae8:	40005800 	.word	0x40005800
 8000aec:	307075b1 	.word	0x307075b1

08000af0 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000af6:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <MX_I2S1_Init+0x64>)
 8000af8:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000afc:	2206      	movs	r2, #6
 8000afe:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8000b06:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b0c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b16:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000b1a:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_I2S1_Init+0x60>)
 8000b3c:	f006 fdf8 	bl	8007730 <HAL_I2S_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2S1_Init+0x5a>
  {
    Error_Handler();
 8000b46:	f000 fab1 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	24000140 	.word	0x24000140
 8000b54:	40013000 	.word	0x40013000

08000b58 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b5e:	4a23      	ldr	r2, [pc, #140]	@ (8000bec <MX_LPUART1_UART_Init+0x94>)
 8000b60:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b62:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b88:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b94:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ba0:	4811      	ldr	r0, [pc, #68]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000ba2:	f00d fd7b 	bl	800e69c <HAL_UART_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bac:	f000 fa7e 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	480d      	ldr	r0, [pc, #52]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000bb4:	f00e ff15 	bl	800f9e2 <HAL_UARTEx_SetTxFifoThreshold>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bbe:	f000 fa75 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4808      	ldr	r0, [pc, #32]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000bc6:	f00e ff4a 	bl	800fa5e <HAL_UARTEx_SetRxFifoThreshold>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd0:	f000 fa6c 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	@ (8000be8 <MX_LPUART1_UART_Init+0x90>)
 8000bd6:	f00e fecb 	bl	800f970 <HAL_UARTEx_DisableFifoMode>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000be0:	f000 fa64 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2400020c 	.word	0x2400020c
 8000bec:	58000c00 	.word	0x58000c00

08000bf0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000bf4:	4b22      	ldr	r3, [pc, #136]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000bf6:	4a23      	ldr	r2, [pc, #140]	@ (8000c84 <MX_UART5_Init+0x94>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b1f      	ldr	r3, [pc, #124]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c26:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c38:	4811      	ldr	r0, [pc, #68]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c3a:	f00d fd2f 	bl	800e69c <HAL_UART_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000c44:	f000 fa32 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c4c:	f00e fec9 	bl	800f9e2 <HAL_UARTEx_SetTxFifoThreshold>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000c56:	f000 fa29 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4808      	ldr	r0, [pc, #32]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c5e:	f00e fefe 	bl	800fa5e <HAL_UARTEx_SetRxFifoThreshold>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000c68:	f000 fa20 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_UART5_Init+0x90>)
 8000c6e:	f00e fe7f 	bl	800f970 <HAL_UARTEx_DisableFifoMode>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000c78:	f000 fa18 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	240002a0 	.word	0x240002a0
 8000c84:	40005000 	.word	0x40005000

08000c88 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MX_SDMMC1_SD_Init+0x34>)
 8000c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc0 <MX_SDMMC1_SD_Init+0x38>)
 8000c90:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <MX_SDMMC1_SD_Init+0x34>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <MX_SDMMC1_SD_Init+0x34>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <MX_SDMMC1_SD_Init+0x34>)
 8000ca0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ca4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ca6:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <MX_SDMMC1_SD_Init+0x34>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <MX_SDMMC1_SD_Init+0x34>)
 8000cae:	220a      	movs	r2, #10
 8000cb0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	24000334 	.word	0x24000334
 8000cc0:	52007000 	.word	0x52007000

08000cc4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000cc8:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cca:	4a28      	ldr	r2, [pc, #160]	@ (8000d6c <MX_SPI4_Init+0xa8>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cce:	4b26      	ldr	r3, [pc, #152]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cd0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cd4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd6:	4b24      	ldr	r3, [pc, #144]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cde:	2207      	movs	r2, #7
 8000ce0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000cee:	4b1e      	ldr	r3, [pc, #120]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cf0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cf4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000cf8:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000cfc:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d04:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d10:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d16:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d1e:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d24:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d36:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d42:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d48:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <MX_SPI4_Init+0xa4>)
 8000d56:	f00b ffe3 	bl	800cd20 <HAL_SPI_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000d60:	f000 f9a4 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	240003b0 	.word	0x240003b0
 8000d6c:	40013400 	.word	0x40013400

08000d70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	@ 0x38
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	615a      	str	r2, [r3, #20]
 8000da0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da2:	4b33      	ldr	r3, [pc, #204]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000da4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2750-1;
 8000daa:	4b31      	ldr	r3, [pc, #196]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dac:	f640 22bd 	movw	r2, #2749	@ 0xabd
 8000db0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000db8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dba:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000dbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dcc:	4828      	ldr	r0, [pc, #160]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dce:	f00c fba2 	bl	800d516 <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000dd8:	f000 f968 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000de2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4821      	ldr	r0, [pc, #132]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dea:	f00c fe7d 	bl	800dae8 <HAL_TIM_ConfigClockSource>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000df4:	f000 f95a 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000df8:	481d      	ldr	r0, [pc, #116]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000dfa:	f00c fbe3 	bl	800d5c4 <HAL_TIM_PWM_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e04:	f000 f952 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	4816      	ldr	r0, [pc, #88]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000e18:	f00d fba4 	bl	800e564 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e22:	f000 f943 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e26:	2360      	movs	r3, #96	@ 0x60
 8000e28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000e3e:	f00c fd3f 	bl	800d8c0 <HAL_TIM_PWM_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e48:	f000 f930 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2204      	movs	r2, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000e54:	f00c fd34 	bl	800d8c0 <HAL_TIM_PWM_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000e5e:	f000 f925 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e62:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <MX_TIM2_Init+0x100>)
 8000e64:	f001 f97e 	bl	8002164 <HAL_TIM_MspPostInit>

}
 8000e68:	bf00      	nop
 8000e6a:	3738      	adds	r7, #56	@ 0x38
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	24000438 	.word	0x24000438

08000e74 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000e78:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e7a:	4a16      	ldr	r2, [pc, #88]	@ (8000ed4 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e80:	2209      	movs	r2, #9
 8000e82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e86:	2202      	movs	r2, #2
 8000e88:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e92:	2202      	movs	r2, #2
 8000e94:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ebc:	f006 feb8 	bl	8007c30 <HAL_PCD_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ec6:	f000 f8f1 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	24000484 	.word	0x24000484
 8000ed4:	40040000 	.word	0x40040000

08000ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <MX_DMA_Init+0x3c>)
 8000ee0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f14 <MX_DMA_Init+0x3c>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_DMA_Init+0x3c>)
 8000ef0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	200b      	movs	r0, #11
 8000f02:	f003 f82a 	bl	8003f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f06:	200b      	movs	r0, #11
 8000f08:	f003 f841 	bl	8003f8e <HAL_NVIC_EnableIRQ>

}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58024400 	.word	0x58024400

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08e      	sub	sp, #56	@ 0x38
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2e:	4b5b      	ldr	r3, [pc, #364]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f34:	4a59      	ldr	r2, [pc, #356]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3e:	4b57      	ldr	r3, [pc, #348]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f44:	f003 0310 	and.w	r3, r3, #16
 8000f48:	623b      	str	r3, [r7, #32]
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4c:	4b53      	ldr	r3, [pc, #332]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f52:	4a52      	ldr	r2, [pc, #328]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f6a:	4b4c      	ldr	r3, [pc, #304]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f70:	4a4a      	ldr	r2, [pc, #296]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f72:	f043 0320 	orr.w	r3, r3, #32
 8000f76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7a:	4b48      	ldr	r3, [pc, #288]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f80:	f003 0320 	and.w	r3, r3, #32
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f88:	4b44      	ldr	r3, [pc, #272]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a43      	ldr	r2, [pc, #268]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b40      	ldr	r3, [pc, #256]	@ (800109c <MX_GPIO_Init+0x184>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fac:	4a3b      	ldr	r2, [pc, #236]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb6:	4b39      	ldr	r3, [pc, #228]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	4b35      	ldr	r3, [pc, #212]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fca:	4a34      	ldr	r2, [pc, #208]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd4:	4b31      	ldr	r3, [pc, #196]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	4a2c      	ldr	r2, [pc, #176]	@ (800109c <MX_GPIO_Init+0x184>)
 8000fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <MX_GPIO_Init+0x184>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001000:	4b26      	ldr	r3, [pc, #152]	@ (800109c <MX_GPIO_Init+0x184>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001006:	4a25      	ldr	r2, [pc, #148]	@ (800109c <MX_GPIO_Init+0x184>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001010:	4b22      	ldr	r3, [pc, #136]	@ (800109c <MX_GPIO_Init+0x184>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin|lcd_rst_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2118      	movs	r1, #24
 8001022:	481f      	ldr	r0, [pc, #124]	@ (80010a0 <MX_GPIO_Init+0x188>)
 8001024:	f005 fd68 	bl	8006af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, xshut4_Pin|xshut3_Pin|xshut2_Pin|xshut1_Pin
 8001028:	2200      	movs	r2, #0
 800102a:	21bc      	movs	r1, #188	@ 0xbc
 800102c:	481d      	ldr	r0, [pc, #116]	@ (80010a4 <MX_GPIO_Init+0x18c>)
 800102e:	f005 fd63 	bl	8006af8 <HAL_GPIO_WritePin>
                          |led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : lcd_cs_Pin lcd_rst_Pin */
  GPIO_InitStruct.Pin = lcd_cs_Pin|lcd_rst_Pin;
 8001032:	2318      	movs	r3, #24
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001046:	4619      	mov	r1, r3
 8001048:	4815      	ldr	r0, [pc, #84]	@ (80010a0 <MX_GPIO_Init+0x188>)
 800104a:	f005 fbad 	bl	80067a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ir_sensor_Pin */
  GPIO_InitStruct.Pin = ir_sensor_Pin;
 800104e:	2308      	movs	r3, #8
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001052:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ir_sensor_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4811      	ldr	r0, [pc, #68]	@ (80010a8 <MX_GPIO_Init+0x190>)
 8001064:	f005 fba0 	bl	80067a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : xshut4_Pin xshut3_Pin xshut2_Pin xshut1_Pin
                           led_Pin */
  GPIO_InitStruct.Pin = xshut4_Pin|xshut3_Pin|xshut2_Pin|xshut1_Pin
 8001068:	23bc      	movs	r3, #188	@ 0xbc
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <MX_GPIO_Init+0x18c>)
 8001080:	f005 fb92 	bl	80067a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(ir_sensor_EXTI_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	2009      	movs	r0, #9
 800108a:	f002 ff66 	bl	8003f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ir_sensor_EXTI_IRQn);
 800108e:	2009      	movs	r0, #9
 8001090:	f002 ff7d 	bl	8003f8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001094:	bf00      	nop
 8001096:	3738      	adds	r7, #56	@ 0x38
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	58024400 	.word	0x58024400
 80010a0:	58021000 	.word	0x58021000
 80010a4:	58021800 	.word	0x58021800
 80010a8:	58020000 	.word	0x58020000

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <Error_Handler+0x8>

080010b8 <my_printf>:
{
 80010b8:	b40f      	push	{r0, r1, r2, r3}
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b0c2      	sub	sp, #264	@ 0x108
 80010be:	af00      	add	r7, sp, #0
    va_start(args, format);
 80010c0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80010c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010cc:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80010ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010d6:	f107 0008 	add.w	r0, r7, #8
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80010e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010e4:	f01c fbde 	bl	801d8a4 <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f90f 	bl	8000310 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f107 0108 	add.w	r1, r7, #8
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <my_printf+0x5c>)
 8001100:	f00d fb1c 	bl	800e73c <HAL_UART_Transmit>
}
 8001104:	bf00      	nop
 8001106:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800110a:	46bd      	mov	sp, r7
 800110c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001110:	b004      	add	sp, #16
 8001112:	4770      	bx	lr
 8001114:	2400020c 	.word	0x2400020c

08001118 <mfcc_q15_init>:
#include "dct_coefficients.h"
#include "filter_bank.h"

arm_mfcc_instance_q15 mfcc_inst;

void mfcc_q15_init() {
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af06      	add	r7, sp, #24
	arm_status status;

	status = arm_mfcc_init_q15(
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <mfcc_q15_init+0x4c>)
 8001120:	9304      	str	r3, [sp, #16]
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <mfcc_q15_init+0x50>)
 8001124:	9303      	str	r3, [sp, #12]
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <mfcc_q15_init+0x54>)
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <mfcc_q15_init+0x58>)
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <mfcc_q15_init+0x5c>)
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	230d      	movs	r3, #13
 8001134:	221a      	movs	r2, #26
 8001136:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800113a:	480f      	ldr	r0, [pc, #60]	@ (8001178 <mfcc_q15_init+0x60>)
 800113c:	f015 f99c 	bl	8016478 <arm_mfcc_init_q15>
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
	    mel_filter_lengths,          // filterLengths
	    mel_filter_coeffs,           // filterCoefs
	    hamming_window               // windowCoefs
	);

	if(status == ARM_MATH_SUCCESS)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d103      	bne.n	8001154 <mfcc_q15_init+0x3c>
	{
		my_printf("mfcc init success\r\n");
 800114c:	480b      	ldr	r0, [pc, #44]	@ (800117c <mfcc_q15_init+0x64>)
 800114e:	f7ff ffb3 	bl	80010b8 <my_printf>
	} else {
		my_printf("mfcc init failed\r\n");
	}
}
 8001152:	e002      	b.n	800115a <mfcc_q15_init+0x42>
		my_printf("mfcc init failed\r\n");
 8001154:	480a      	ldr	r0, [pc, #40]	@ (8001180 <mfcc_q15_init+0x68>)
 8001156:	f7ff ffaf 	bl	80010b8 <my_printf>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	0801f6fc 	.word	0x0801f6fc
 8001168:	0801f338 	.word	0x0801f338
 800116c:	0801f2d0 	.word	0x0801f2d0
 8001170:	0801f268 	.word	0x0801f268
 8001174:	0801efc4 	.word	0x0801efc4
 8001178:	24000968 	.word	0x24000968
 800117c:	0801e9d0 	.word	0x0801e9d0
 8001180:	0801e9e4 	.word	0x0801e9e4

08001184 <convert_mfcc>:
q15_t mfcc_output[26];
// input buffer is 512
q31_t tmp_buffer[512 * 2];

void convert_mfcc(q15_t * pcm_input)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	arm_status status;
	status = arm_mfcc_q15(&mfcc_inst, pcm_input, mfcc_output, tmp_buffer);
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <convert_mfcc+0x30>)
 800118e:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <convert_mfcc+0x34>)
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	480a      	ldr	r0, [pc, #40]	@ (80011bc <convert_mfcc+0x38>)
 8001194:	f015 f9a0 	bl	80164d8 <arm_mfcc_q15>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
	if (status != ARM_MATH_SUCCESS)
 800119c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <convert_mfcc+0x26>
	{
		my_printf("failed mfcc conversion\r\n");
 80011a4:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <convert_mfcc+0x3c>)
 80011a6:	f7ff ff87 	bl	80010b8 <my_printf>
	}
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	240009d4 	.word	0x240009d4
 80011b8:	240009a0 	.word	0x240009a0
 80011bc:	24000968 	.word	0x24000968
 80011c0:	0801e9f8 	.word	0x0801e9f8

080011c4 <my_printf>:
{
 80011c4:	b40f      	push	{r0, r1, r2, r3}
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b0c2      	sub	sp, #264	@ 0x108
 80011ca:	af00      	add	r7, sp, #0
    va_start(args, format);
 80011cc:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80011d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011d8:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80011da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80011de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011e2:	f107 0008 	add.w	r0, r7, #8
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80011ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f0:	f01c fb58 	bl	801d8a4 <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f889 	bl	8000310 <strlen>
 80011fe:	4603      	mov	r3, r0
 8001200:	b29a      	uxth	r2, r3
 8001202:	f107 0108 	add.w	r1, r7, #8
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <my_printf+0x5c>)
 800120c:	f00d fa96 	bl	800e73c <HAL_UART_Transmit>
}
 8001210:	bf00      	nop
 8001212:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001216:	46bd      	mov	sp, r7
 8001218:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800121c:	b004      	add	sp, #16
 800121e:	4770      	bx	lr
 8001220:	2400020c 	.word	0x2400020c

08001224 <sd_init>:

FATFS fatfs;
FRESULT fresult;
extern SD_HandleTypeDef hsd1;

void sd_init() {
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    if (BSP_SD_Init() == MSD_OK) {
 8001228:	f00f fd92 	bl	8010d50 <BSP_SD_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d103      	bne.n	800123a <sd_init+0x16>
        my_printf("SD card initialized successfully!\r\n");
 8001232:	4810      	ldr	r0, [pc, #64]	@ (8001274 <sd_init+0x50>)
 8001234:	f7ff ffc6 	bl	80011c4 <my_printf>
 8001238:	e002      	b.n	8001240 <sd_init+0x1c>
    } else {
        my_printf("SD card initialization failed!\r\n");
 800123a:	480f      	ldr	r0, [pc, #60]	@ (8001278 <sd_init+0x54>)
 800123c:	f7ff ffc2 	bl	80011c4 <my_printf>
    }

    fresult = f_mount(&fatfs, "", 1);
 8001240:	2201      	movs	r2, #1
 8001242:	490e      	ldr	r1, [pc, #56]	@ (800127c <sd_init+0x58>)
 8001244:	480e      	ldr	r0, [pc, #56]	@ (8001280 <sd_init+0x5c>)
 8001246:	f01b f951 	bl	801c4ec <f_mount>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <sd_init+0x60>)
 8001250:	701a      	strb	r2, [r3, #0]
    if(fresult != FR_OK) {
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <sd_init+0x60>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00a      	beq.n	8001270 <sd_init+0x4c>
        my_printf("f_mount failed, %d\r\n", fresult);
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <sd_init+0x60>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4619      	mov	r1, r3
 8001260:	4809      	ldr	r0, [pc, #36]	@ (8001288 <sd_init+0x64>)
 8001262:	f7ff ffaf 	bl	80011c4 <my_printf>
        while(1){
            HAL_Delay(1000);
 8001266:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800126a:	f002 fd77 	bl	8003d5c <HAL_Delay>
 800126e:	e7fa      	b.n	8001266 <sd_init+0x42>
        }
    }
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	0801ea14 	.word	0x0801ea14
 8001278:	0801ea38 	.word	0x0801ea38
 800127c:	0801ea5c 	.word	0x0801ea5c
 8001280:	240019d4 	.word	0x240019d4
 8001284:	24001c04 	.word	0x24001c04
 8001288:	0801ea60 	.word	0x0801ea60

0800128c <get_next_audio_filename>:

#define AUDIO_FOLDER "AUDIO"
#define FILE_TEMPLATE "AUDIO%03d.WAV"
#define MFCC_TEMPLATE "MFCC%03d.BIN"

int get_next_audio_filename() {
 800128c:	b580      	push	{r7, lr}
 800128e:	b094      	sub	sp, #80	@ 0x50
 8001290:	af00      	add	r7, sp, #0
  DIR dir;
  FILINFO fno;
  int max_number = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (f_opendir(&dir, AUDIO_FOLDER) == FR_OK) {
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	492c      	ldr	r1, [pc, #176]	@ (800134c <get_next_audio_filename+0xc0>)
 800129c:	4618      	mov	r0, r3
 800129e:	f01b ff4b 	bl	801d138 <f_opendir>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d14a      	bne.n	800133e <get_next_audio_filename+0xb2>
    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 80012a8:	e01e      	b.n	80012e8 <get_next_audio_filename+0x5c>
      if (strstr(fno.fname, "AUDIO") && strstr(fno.fname, ".WAV")) {
 80012aa:	463b      	mov	r3, r7
 80012ac:	3309      	adds	r3, #9
 80012ae:	4927      	ldr	r1, [pc, #156]	@ (800134c <get_next_audio_filename+0xc0>)
 80012b0:	4618      	mov	r0, r3
 80012b2:	f01c fba1 	bl	801d9f8 <strstr>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d015      	beq.n	80012e8 <get_next_audio_filename+0x5c>
 80012bc:	463b      	mov	r3, r7
 80012be:	3309      	adds	r3, #9
 80012c0:	4923      	ldr	r1, [pc, #140]	@ (8001350 <get_next_audio_filename+0xc4>)
 80012c2:	4618      	mov	r0, r3
 80012c4:	f01c fb98 	bl	801d9f8 <strstr>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00c      	beq.n	80012e8 <get_next_audio_filename+0x5c>
        int num = atoi(fno.fname + 5);
 80012ce:	463b      	mov	r3, r7
 80012d0:	3309      	adds	r3, #9
 80012d2:	3305      	adds	r3, #5
 80012d4:	4618      	mov	r0, r3
 80012d6:	f01c f860 	bl	801d39a <atoi>
 80012da:	64b8      	str	r0, [r7, #72]	@ 0x48
        if (num > max_number) {
 80012dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80012de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dd01      	ble.n	80012e8 <get_next_audio_filename+0x5c>
          max_number = num;
 80012e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0]) {
 80012e8:	463a      	mov	r2, r7
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f01b ffba 	bl	801d26a <f_readdir>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <get_next_audio_filename+0x76>
 80012fc:	7a7b      	ldrb	r3, [r7, #9]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1d3      	bne.n	80012aa <get_next_audio_filename+0x1e>
        }
      }
    }
    f_closedir(&dir);
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	4618      	mov	r0, r3
 8001308:	f01b ff89 	bl	801d21e <f_closedir>
  } else {
    return -1;
  }

  snprintf(latest_audio_filename, sizeof(latest_audio_filename), AUDIO_FOLDER "/" FILE_TEMPLATE, max_number + 1);
 800130c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800130e:	3301      	adds	r3, #1
 8001310:	4a10      	ldr	r2, [pc, #64]	@ (8001354 <get_next_audio_filename+0xc8>)
 8001312:	2120      	movs	r1, #32
 8001314:	4810      	ldr	r0, [pc, #64]	@ (8001358 <get_next_audio_filename+0xcc>)
 8001316:	f01c f9fb 	bl	801d710 <sniprintf>
  snprintf(latest_mfcc_filename, sizeof(latest_mfcc_filename), AUDIO_FOLDER "/" MFCC_TEMPLATE, max_number + 1);
 800131a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800131c:	3301      	adds	r3, #1
 800131e:	4a0f      	ldr	r2, [pc, #60]	@ (800135c <get_next_audio_filename+0xd0>)
 8001320:	2120      	movs	r1, #32
 8001322:	480f      	ldr	r0, [pc, #60]	@ (8001360 <get_next_audio_filename+0xd4>)
 8001324:	f01c f9f4 	bl	801d710 <sniprintf>
  my_printf("new audio file name in pcm should be: %s\r\n", latest_audio_filename);
 8001328:	490b      	ldr	r1, [pc, #44]	@ (8001358 <get_next_audio_filename+0xcc>)
 800132a:	480e      	ldr	r0, [pc, #56]	@ (8001364 <get_next_audio_filename+0xd8>)
 800132c:	f7ff ff4a 	bl	80011c4 <my_printf>
  my_printf("new mfcc in f32 should be: %s\r\n", latest_mfcc_filename);
 8001330:	490b      	ldr	r1, [pc, #44]	@ (8001360 <get_next_audio_filename+0xd4>)
 8001332:	480d      	ldr	r0, [pc, #52]	@ (8001368 <get_next_audio_filename+0xdc>)
 8001334:	f7ff ff46 	bl	80011c4 <my_printf>
  return max_number + 1;
 8001338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800133a:	3301      	adds	r3, #1
 800133c:	e001      	b.n	8001342 <get_next_audio_filename+0xb6>
    return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001342:	4618      	mov	r0, r3
 8001344:	3750      	adds	r7, #80	@ 0x50
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	0801ea78 	.word	0x0801ea78
 8001350:	0801ea80 	.word	0x0801ea80
 8001354:	0801ea88 	.word	0x0801ea88
 8001358:	24001c08 	.word	0x24001c08
 800135c:	0801ea9c 	.word	0x0801ea9c
 8001360:	24001c28 	.word	0x24001c28
 8001364:	0801eab0 	.word	0x0801eab0
 8001368:	0801eadc 	.word	0x0801eadc

0800136c <HAL_I2S_RxHalfCpltCallback>:
UINT bytes_written;
int16_t left_pcm_buffer[BUFFER_SIZE / 4];
q15_t q15_buffer[BUFFER_SIZE / 4];

// Callback when half buffer is filled
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
    buffer_ready = 1;
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	24005e7c 	.word	0x24005e7c

0800138c <HAL_I2S_RxCpltCallback>:

// Callback when full buffer is filled
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    buffer_ready = 2;
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <HAL_I2S_RxCpltCallback+0x1c>)
 8001396:	2202      	movs	r2, #2
 8001398:	701a      	strb	r2, [r3, #0]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	24005e7c 	.word	0x24005e7c

080013ac <write_wav_header>:

// Write WAV header for mono channel, 16-bit, 16kHz sampling rate
void write_wav_header(FIL *file, uint32_t data_size) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	@ 0x38
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    uint8_t wav_header[44] = {
 80013b6:	2352      	movs	r3, #82	@ 0x52
 80013b8:	733b      	strb	r3, [r7, #12]
 80013ba:	2349      	movs	r3, #73	@ 0x49
 80013bc:	737b      	strb	r3, [r7, #13]
 80013be:	2346      	movs	r3, #70	@ 0x46
 80013c0:	73bb      	strb	r3, [r7, #14]
 80013c2:	2346      	movs	r3, #70	@ 0x46
 80013c4:	73fb      	strb	r3, [r7, #15]
        'R', 'I', 'F', 'F',
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	3324      	adds	r3, #36	@ 0x24
 80013cc:	b2db      	uxtb	r3, r3
    uint8_t wav_header[44] = {
 80013ce:	743b      	strb	r3, [r7, #16]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3324      	adds	r3, #36	@ 0x24
 80013d4:	0a1b      	lsrs	r3, r3, #8
    uint8_t wav_header[44] = {
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	747b      	strb	r3, [r7, #17]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3324      	adds	r3, #36	@ 0x24
 80013de:	0c1b      	lsrs	r3, r3, #16
    uint8_t wav_header[44] = {
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	74bb      	strb	r3, [r7, #18]
        (data_size + 36) & 0xFF, ((data_size + 36) >> 8) & 0xFF, ((data_size + 36) >> 16) & 0xFF, ((data_size + 36) >> 24) & 0xFF,
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	3324      	adds	r3, #36	@ 0x24
 80013e8:	0e1b      	lsrs	r3, r3, #24
    uint8_t wav_header[44] = {
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	74fb      	strb	r3, [r7, #19]
 80013ee:	2357      	movs	r3, #87	@ 0x57
 80013f0:	753b      	strb	r3, [r7, #20]
 80013f2:	2341      	movs	r3, #65	@ 0x41
 80013f4:	757b      	strb	r3, [r7, #21]
 80013f6:	2356      	movs	r3, #86	@ 0x56
 80013f8:	75bb      	strb	r3, [r7, #22]
 80013fa:	2345      	movs	r3, #69	@ 0x45
 80013fc:	75fb      	strb	r3, [r7, #23]
 80013fe:	2366      	movs	r3, #102	@ 0x66
 8001400:	763b      	strb	r3, [r7, #24]
 8001402:	236d      	movs	r3, #109	@ 0x6d
 8001404:	767b      	strb	r3, [r7, #25]
 8001406:	2374      	movs	r3, #116	@ 0x74
 8001408:	76bb      	strb	r3, [r7, #26]
 800140a:	2320      	movs	r3, #32
 800140c:	76fb      	strb	r3, [r7, #27]
 800140e:	2310      	movs	r3, #16
 8001410:	773b      	strb	r3, [r7, #28]
 8001412:	2300      	movs	r3, #0
 8001414:	777b      	strb	r3, [r7, #29]
 8001416:	2300      	movs	r3, #0
 8001418:	77bb      	strb	r3, [r7, #30]
 800141a:	2300      	movs	r3, #0
 800141c:	77fb      	strb	r3, [r7, #31]
 800141e:	2301      	movs	r3, #1
 8001420:	f887 3020 	strb.w	r3, [r7, #32]
 8001424:	2300      	movs	r3, #0
 8001426:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800142a:	2301      	movs	r3, #1
 800142c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001436:	2300      	movs	r3, #0
 8001438:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800143c:	233e      	movs	r3, #62	@ 0x3e
 800143e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001442:	2300      	movs	r3, #0
 8001444:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001448:	2300      	movs	r3, #0
 800144a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800144e:	2300      	movs	r3, #0
 8001450:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001454:	237d      	movs	r3, #125	@ 0x7d
 8001456:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800145a:	2300      	movs	r3, #0
 800145c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001460:	2300      	movs	r3, #0
 8001462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001466:	2302      	movs	r3, #2
 8001468:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800146c:	2300      	movs	r3, #0
 800146e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001472:	2310      	movs	r3, #16
 8001474:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001478:	2300      	movs	r3, #0
 800147a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800147e:	2364      	movs	r3, #100	@ 0x64
 8001480:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001484:	2361      	movs	r3, #97	@ 0x61
 8001486:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800148a:	2374      	movs	r3, #116	@ 0x74
 800148c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8001490:	2361      	movs	r3, #97	@ 0x61
 8001492:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        16, 0, 0, 0, 1, 0, 1, 0,  // PCM format, 1 channel (mono)
        0x00, 0x3E, 0x00, 0x00,  // 16000 Hz sample rate (0x3E80 = 16000)
        0x00, 0x7D, 0x00, 0x00,  // Byte rate = 16000 * 1 * 16/8 = 32000 (0x7D00)
        2, 0, 16, 0,  // Block align = 2 bytes, Bits per sample = 16
        'd', 'a', 't', 'a',
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	0a1b      	lsrs	r3, r3, #8
    uint8_t wav_header[44] = {
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	0c1b      	lsrs	r3, r3, #16
    uint8_t wav_header[44] = {
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        data_size & 0xFF, (data_size >> 8) & 0xFF, (data_size >> 16) & 0xFF, (data_size >> 24) & 0xFF
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	0e1b      	lsrs	r3, r3, #24
    uint8_t wav_header[44] = {
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    };
    UINT bytes_written;
    f_write(file, wav_header, 44, &bytes_written);
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	f107 010c 	add.w	r1, r7, #12
 80014c4:	222c      	movs	r2, #44	@ 0x2c
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f01b fa10 	bl	801c8ec <f_write>
    f_sync(file);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f01b fb82 	bl	801cbd6 <f_sync>
}
 80014d2:	bf00      	nop
 80014d4:	3738      	adds	r7, #56	@ 0x38
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <start_audio_recording>:
}

extern I2S_HandleTypeDef hi2s1;

// Start audio recording (writing only left channel)
void start_audio_recording() {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
	UINT bytes_written_mfcc;
    buffer_ready = 0;
 80014e2:	4b55      	ldr	r3, [pc, #340]	@ (8001638 <start_audio_recording+0x15c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
    my_printf("Starting audio recording...\r\n");
 80014e8:	4854      	ldr	r0, [pc, #336]	@ (800163c <start_audio_recording+0x160>)
 80014ea:	f7ff fe6b 	bl	80011c4 <my_printf>

    if (f_open(&file, latest_audio_filename, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK) {
 80014ee:	220a      	movs	r2, #10
 80014f0:	4953      	ldr	r1, [pc, #332]	@ (8001640 <start_audio_recording+0x164>)
 80014f2:	4854      	ldr	r0, [pc, #336]	@ (8001644 <start_audio_recording+0x168>)
 80014f4:	f01b f840 	bl	801c578 <f_open>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f040 8095 	bne.w	800162a <start_audio_recording+0x14e>
        my_printf("File created successfully\r\n");
 8001500:	4851      	ldr	r0, [pc, #324]	@ (8001648 <start_audio_recording+0x16c>)
 8001502:	f7ff fe5f 	bl	80011c4 <my_printf>

        // Write placeholder WAV header
        write_wav_header(&file, 0);
 8001506:	2100      	movs	r1, #0
 8001508:	484e      	ldr	r0, [pc, #312]	@ (8001644 <start_audio_recording+0x168>)
 800150a:	f7ff ff4f 	bl	80013ac <write_wav_header>

        if (f_open(&file_mfcc, latest_mfcc_filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800150e:	220a      	movs	r2, #10
 8001510:	494e      	ldr	r1, [pc, #312]	@ (800164c <start_audio_recording+0x170>)
 8001512:	484f      	ldr	r0, [pc, #316]	@ (8001650 <start_audio_recording+0x174>)
 8001514:	f01b f830 	bl	801c578 <f_open>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00a      	beq.n	8001534 <start_audio_recording+0x58>
        {
        	my_printf("start write mfcc failed, filename: %s, error: %d\r\n", latest_mfcc_filename, fresult);
 800151e:	4b4d      	ldr	r3, [pc, #308]	@ (8001654 <start_audio_recording+0x178>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	4949      	ldr	r1, [pc, #292]	@ (800164c <start_audio_recording+0x170>)
 8001526:	484c      	ldr	r0, [pc, #304]	@ (8001658 <start_audio_recording+0x17c>)
 8001528:	f7ff fe4c 	bl	80011c4 <my_printf>
        	f_close(&file_mfcc);
 800152c:	4848      	ldr	r0, [pc, #288]	@ (8001650 <start_audio_recording+0x174>)
 800152e:	f01b fbd0 	bl	801ccd2 <f_close>
 8001532:	e07d      	b.n	8001630 <start_audio_recording+0x154>
        	return;
        }

        // Start I2S DMA
        HAL_I2S_Receive_DMA(&hi2s1, (uint16_t *)i2s_data, BUFFER_SIZE);
 8001534:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001538:	4948      	ldr	r1, [pc, #288]	@ (800165c <start_audio_recording+0x180>)
 800153a:	4849      	ldr	r0, [pc, #292]	@ (8001660 <start_audio_recording+0x184>)
 800153c:	f006 fa28 	bl	8007990 <HAL_I2S_Receive_DMA>

        uint32_t total_samples = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

        while (total_samples < SAMPLING_RATE * PERIOD) {
 8001544:	e053      	b.n	80015ee <start_audio_recording+0x112>
            if (buffer_ready) {
 8001546:	4b3c      	ldr	r3, [pc, #240]	@ (8001638 <start_audio_recording+0x15c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d04e      	beq.n	80015ee <start_audio_recording+0x112>
                int16_t *start_ptr = (buffer_ready == 1) ? i2s_data : &i2s_data[BUFFER_SIZE / 2];
 8001550:	4b39      	ldr	r3, [pc, #228]	@ (8001638 <start_audio_recording+0x15c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <start_audio_recording+0x82>
 800155a:	4b40      	ldr	r3, [pc, #256]	@ (800165c <start_audio_recording+0x180>)
 800155c:	e000      	b.n	8001560 <start_audio_recording+0x84>
 800155e:	4b41      	ldr	r3, [pc, #260]	@ (8001664 <start_audio_recording+0x188>)
 8001560:	60bb      	str	r3, [r7, #8]

                for (uint32_t i = 0; i < BUFFER_SIZE / 2; i += 2)
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	e013      	b.n	8001590 <start_audio_recording+0xb4>
                {
                	left_pcm_buffer[i / 2] = start_ptr[i] * GAIN;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	4413      	add	r3, r2
 8001570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001574:	b29b      	uxth	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	4413      	add	r3, r2
 800157c:	b29a      	uxth	r2, r3
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	085b      	lsrs	r3, r3, #1
 8001582:	b211      	sxth	r1, r2
 8001584:	4a38      	ldr	r2, [pc, #224]	@ (8001668 <start_audio_recording+0x18c>)
 8001586:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (uint32_t i = 0; i < BUFFER_SIZE / 2; i += 2)
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	3302      	adds	r3, #2
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001596:	d3e7      	bcc.n	8001568 <start_audio_recording+0x8c>
                }

                // Write only left channel (even indices)

                f_write(&file, left_pcm_buffer, (BUFFER_SIZE / 4) * sizeof(int16_t), &bytes_written);
 8001598:	4b34      	ldr	r3, [pc, #208]	@ (800166c <start_audio_recording+0x190>)
 800159a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800159e:	4932      	ldr	r1, [pc, #200]	@ (8001668 <start_audio_recording+0x18c>)
 80015a0:	4828      	ldr	r0, [pc, #160]	@ (8001644 <start_audio_recording+0x168>)
 80015a2:	f01b f9a3 	bl	801c8ec <f_write>

                total_samples += (BUFFER_SIZE / 4); // Since we write only half the samples
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015ac:	617b      	str	r3, [r7, #20]

                arm_copy_q15((q15_t*)left_pcm_buffer, q15_buffer, BUFFER_SIZE / 4);
 80015ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015b2:	492f      	ldr	r1, [pc, #188]	@ (8001670 <start_audio_recording+0x194>)
 80015b4:	482c      	ldr	r0, [pc, #176]	@ (8001668 <start_audio_recording+0x18c>)
 80015b6:	f011 f9d1 	bl	801295c <arm_copy_q15>

                for (uint8_t i = 0; i < 4; i++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	e010      	b.n	80015e2 <start_audio_recording+0x106>
                {
                	convert_mfcc(&left_pcm_buffer[i * 512]);
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	025b      	lsls	r3, r3, #9
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4a28      	ldr	r2, [pc, #160]	@ (8001668 <start_audio_recording+0x18c>)
 80015c8:	4413      	add	r3, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fdda 	bl	8001184 <convert_mfcc>
                	f_write(&file_mfcc, mfcc_output, 13 * sizeof(q15_t), &bytes_written_mfcc);
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	221a      	movs	r2, #26
 80015d4:	4927      	ldr	r1, [pc, #156]	@ (8001674 <start_audio_recording+0x198>)
 80015d6:	481e      	ldr	r0, [pc, #120]	@ (8001650 <start_audio_recording+0x174>)
 80015d8:	f01b f988 	bl	801c8ec <f_write>
                for (uint8_t i = 0; i < 4; i++)
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	3301      	adds	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d9eb      	bls.n	80015c0 <start_audio_recording+0xe4>
                	// fixme unknown error, why after 13 is empty, so lets record until 13
                }

                buffer_ready = 0;
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <start_audio_recording+0x15c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
        while (total_samples < SAMPLING_RATE * PERIOD) {
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80015f4:	d3a7      	bcc.n	8001546 <start_audio_recording+0x6a>
            }
        }

        // Stop DMA
        HAL_I2S_DMAStop(&hi2s1);
 80015f6:	481a      	ldr	r0, [pc, #104]	@ (8001660 <start_audio_recording+0x184>)
 80015f8:	f006 fa6c 	bl	8007ad4 <HAL_I2S_DMAStop>

        // Update WAV header with actual data size
        f_lseek(&file, 0);
 80015fc:	2100      	movs	r1, #0
 80015fe:	4811      	ldr	r0, [pc, #68]	@ (8001644 <start_audio_recording+0x168>)
 8001600:	f01b fb91 	bl	801cd26 <f_lseek>
        write_wav_header(&file, total_samples * sizeof(int16_t));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4619      	mov	r1, r3
 800160a:	480e      	ldr	r0, [pc, #56]	@ (8001644 <start_audio_recording+0x168>)
 800160c:	f7ff fece 	bl	80013ac <write_wav_header>

        my_printf("recording stopped!\r\n");
 8001610:	4819      	ldr	r0, [pc, #100]	@ (8001678 <start_audio_recording+0x19c>)
 8001612:	f7ff fdd7 	bl	80011c4 <my_printf>

        // Close file
        f_close(&file);
 8001616:	480b      	ldr	r0, [pc, #44]	@ (8001644 <start_audio_recording+0x168>)
 8001618:	f01b fb5b 	bl	801ccd2 <f_close>
        f_close(&file_mfcc);
 800161c:	480c      	ldr	r0, [pc, #48]	@ (8001650 <start_audio_recording+0x174>)
 800161e:	f01b fb58 	bl	801ccd2 <f_close>

        my_printf("Recording complete\r\n");
 8001622:	4816      	ldr	r0, [pc, #88]	@ (800167c <start_audio_recording+0x1a0>)
 8001624:	f7ff fdce 	bl	80011c4 <my_printf>
 8001628:	e002      	b.n	8001630 <start_audio_recording+0x154>
    } else {
        my_printf("File open failed\r\n");
 800162a:	4815      	ldr	r0, [pc, #84]	@ (8001680 <start_audio_recording+0x1a4>)
 800162c:	f7ff fdca 	bl	80011c4 <my_printf>
    }
}
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	24005e7c 	.word	0x24005e7c
 800163c:	0801eb4c 	.word	0x0801eb4c
 8001640:	24001c08 	.word	0x24001c08
 8001644:	24001c48 	.word	0x24001c48
 8001648:	0801eb6c 	.word	0x0801eb6c
 800164c:	24001c28 	.word	0x24001c28
 8001650:	24007e84 	.word	0x24007e84
 8001654:	24001c04 	.word	0x24001c04
 8001658:	0801eb88 	.word	0x0801eb88
 800165c:	24001e7c 	.word	0x24001e7c
 8001660:	24000140 	.word	0x24000140
 8001664:	24003e7c 	.word	0x24003e7c
 8001668:	24005e84 	.word	0x24005e84
 800166c:	24005e80 	.word	0x24005e80
 8001670:	24006e84 	.word	0x24006e84
 8001674:	240009a0 	.word	0x240009a0
 8001678:	0801ebbc 	.word	0x0801ebbc
 800167c:	0801ebd4 	.word	0x0801ebd4
 8001680:	0801ebec 	.word	0x0801ebec

08001684 <record_and_convert>:

int record_and_convert()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
	int num = get_next_audio_filename();
 800168a:	f7ff fdff 	bl	800128c <get_next_audio_filename>
 800168e:	6078      	str	r0, [r7, #4]
	start_audio_recording();
 8001690:	f7ff ff24 	bl	80014dc <start_audio_recording>
	return num;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <servo360_init>:
#include "stm32h7xx_hal.h"
#include <stdint.h>

extern TIM_HandleTypeDef htim2;

void servo360_init(void) {
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
    for (int i = 100; i < 200; i++) {
 80016a4:	2364      	movs	r3, #100	@ 0x64
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	e00a      	b.n	80016c0 <servo360_init+0x22>
        set_servo_speed(i);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f80e 	bl	80016d0 <set_servo_speed>
        HAL_Delay(10);
 80016b4:	200a      	movs	r0, #10
 80016b6:	f002 fb51 	bl	8003d5c <HAL_Delay>
    for (int i = 100; i < 200; i++) {
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3301      	adds	r3, #1
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2bc7      	cmp	r3, #199	@ 0xc7
 80016c4:	ddf1      	ble.n	80016aa <servo360_init+0xc>
    }
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <set_servo_speed>:
/**
* for 360 degree servo
* pwm_value=150, stop
* pwm_value < 150 anticlockwise, > 150 clockwise
 */
void set_servo_speed(uint16_t pwm_value) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value - 5); // Small pre-step
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	1f5a      	subs	r2, r3, #5
 80016de:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <set_servo_speed+0x2c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_Delay(20); // Let the servo register a small change
 80016e4:	2014      	movs	r0, #20
 80016e6:	f002 fb39 	bl	8003d5c <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value); // Set final speed
 80016ea:	4b04      	ldr	r3, [pc, #16]	@ (80016fc <set_servo_speed+0x2c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	88fa      	ldrh	r2, [r7, #6]
 80016f0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	24000438 	.word	0x24000438

08001700 <st7920_writeCmd>:
#include "font.h"

extern SPI_HandleTypeDef hspi4;

void st7920_writeCmd(uint8_t cmd)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2108      	movs	r1, #8
 800170e:	480f      	ldr	r0, [pc, #60]	@ (800174c <st7920_writeCmd+0x4c>)
 8001710:	f005 f9f2 	bl	8006af8 <HAL_GPIO_WritePin>
	uint8_t txBuffer[3];
	txBuffer[0] = 0xF8;
 8001714:	23f8      	movs	r3, #248	@ 0xf8
 8001716:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = (cmd & 0xF0);
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f023 030f 	bic.w	r3, r3, #15
 800171e:	b2db      	uxtb	r3, r3
 8001720:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = ((cmd << 4) & 0xF0);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	b2db      	uxtb	r3, r3
 8001728:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi4, txBuffer, 3, HAL_MAX_DELAY);
 800172a:	f107 010c 	add.w	r1, r7, #12
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	2203      	movs	r2, #3
 8001734:	4806      	ldr	r0, [pc, #24]	@ (8001750 <st7920_writeCmd+0x50>)
 8001736:	f00b fc17 	bl	800cf68 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	2108      	movs	r1, #8
 800173e:	4803      	ldr	r0, [pc, #12]	@ (800174c <st7920_writeCmd+0x4c>)
 8001740:	f005 f9da 	bl	8006af8 <HAL_GPIO_WritePin>
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	58021000 	.word	0x58021000
 8001750:	240003b0 	.word	0x240003b0

08001754 <st7920_writeData>:

void st7920_writeData(uint8_t data)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, SET);
 800175e:	2201      	movs	r2, #1
 8001760:	2108      	movs	r1, #8
 8001762:	480f      	ldr	r0, [pc, #60]	@ (80017a0 <st7920_writeData+0x4c>)
 8001764:	f005 f9c8 	bl	8006af8 <HAL_GPIO_WritePin>
	uint8_t txBuffer[3];
	txBuffer[0] = 0xFA;
 8001768:	23fa      	movs	r3, #250	@ 0xfa
 800176a:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = (data & 0xF0);
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f023 030f 	bic.w	r3, r3, #15
 8001772:	b2db      	uxtb	r3, r3
 8001774:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = ((data << 4) & 0xF0);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	b2db      	uxtb	r3, r3
 800177c:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_Transmit(&hspi4, txBuffer, 3, HAL_MAX_DELAY);
 800177e:	f107 010c 	add.w	r1, r7, #12
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	2203      	movs	r2, #3
 8001788:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <st7920_writeData+0x50>)
 800178a:	f00b fbed 	bl	800cf68 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOE, lcd_cs_Pin, RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	2108      	movs	r1, #8
 8001792:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <st7920_writeData+0x4c>)
 8001794:	f005 f9b0 	bl	8006af8 <HAL_GPIO_WritePin>
}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	58021000 	.word	0x58021000
 80017a4:	240003b0 	.word	0x240003b0

080017a8 <st7920_gfx>:

void st7920_gfx()
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	st7920_writeCmd(0x30);  // 8 bit mode
 80017ac:	2030      	movs	r0, #48	@ 0x30
 80017ae:	f7ff ffa7 	bl	8001700 <st7920_writeCmd>
	HAL_Delay(1);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f002 fad2 	bl	8003d5c <HAL_Delay>
	st7920_writeCmd(0x34);  // switch to Extended instructions
 80017b8:	2034      	movs	r0, #52	@ 0x34
 80017ba:	f7ff ffa1 	bl	8001700 <st7920_writeCmd>
	HAL_Delay(1);
 80017be:	2001      	movs	r0, #1
 80017c0:	f002 facc 	bl	8003d5c <HAL_Delay>
	st7920_writeCmd(0x36);  // enable graphics
 80017c4:	2036      	movs	r0, #54	@ 0x36
 80017c6:	f7ff ff9b 	bl	8001700 <st7920_writeCmd>
	HAL_Delay(1);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f002 fac6 	bl	8003d5c <HAL_Delay>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <st7920_init>:

void st7920_init()
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, lcd_rst_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	2110      	movs	r1, #16
 80017dc:	481d      	ldr	r0, [pc, #116]	@ (8001854 <st7920_init+0x80>)
 80017de:	f005 f98b 	bl	8006af8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017e2:	200a      	movs	r0, #10
 80017e4:	f002 faba 	bl	8003d5c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, lcd_rst_Pin, GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2110      	movs	r1, #16
 80017ec:	4819      	ldr	r0, [pc, #100]	@ (8001854 <st7920_init+0x80>)
 80017ee:	f005 f983 	bl	8006af8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80017f2:	2032      	movs	r0, #50	@ 0x32
 80017f4:	f002 fab2 	bl	8003d5c <HAL_Delay>

	st7920_writeCmd(0x30);
 80017f8:	2030      	movs	r0, #48	@ 0x30
 80017fa:	f7ff ff81 	bl	8001700 <st7920_writeCmd>
	HAL_Delay(1);
 80017fe:	2001      	movs	r0, #1
 8001800:	f002 faac 	bl	8003d5c <HAL_Delay>
	st7920_writeCmd(0x30);
 8001804:	2030      	movs	r0, #48	@ 0x30
 8001806:	f7ff ff7b 	bl	8001700 <st7920_writeCmd>
	HAL_Delay(1);
 800180a:	2001      	movs	r0, #1
 800180c:	f002 faa6 	bl	8003d5c <HAL_Delay>
	st7920_writeCmd(0x08);
 8001810:	2008      	movs	r0, #8
 8001812:	f7ff ff75 	bl	8001700 <st7920_writeCmd>
	HAL_Delay(1);
 8001816:	2001      	movs	r0, #1
 8001818:	f002 faa0 	bl	8003d5c <HAL_Delay>
	st7920_writeCmd(0x01);
 800181c:	2001      	movs	r0, #1
 800181e:	f7ff ff6f 	bl	8001700 <st7920_writeCmd>
	HAL_Delay(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f002 fa9a 	bl	8003d5c <HAL_Delay>
	st7920_writeCmd(0x06);
 8001828:	2006      	movs	r0, #6
 800182a:	f7ff ff69 	bl	8001700 <st7920_writeCmd>
	HAL_Delay(1);
 800182e:	2001      	movs	r0, #1
 8001830:	f002 fa94 	bl	8003d5c <HAL_Delay>
	st7920_writeCmd(0x0C);
 8001834:	200c      	movs	r0, #12
 8001836:	f7ff ff63 	bl	8001700 <st7920_writeCmd>
	HAL_Delay(1);
 800183a:	2001      	movs	r0, #1
 800183c:	f002 fa8e 	bl	8003d5c <HAL_Delay>
	st7920_writeCmd(0x02);
 8001840:	2002      	movs	r0, #2
 8001842:	f7ff ff5d 	bl	8001700 <st7920_writeCmd>
	HAL_Delay(1);
 8001846:	2001      	movs	r0, #1
 8001848:	f002 fa88 	bl	8003d5c <HAL_Delay>
	st7920_gfx();
 800184c:	f7ff ffac 	bl	80017a8 <st7920_gfx>
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	58021000 	.word	0x58021000

08001858 <st7920_drawPixel>:

uint8_t framebuffer[64][16];

void st7920_drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t color)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	460b      	mov	r3, r1
 8001864:	71bb      	strb	r3, [r7, #6]
 8001866:	4613      	mov	r3, r2
 8001868:	717b      	strb	r3, [r7, #5]
	if(color > 1) return;
 800186a:	797b      	ldrb	r3, [r7, #5]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d840      	bhi.n	80018f2 <st7920_drawPixel+0x9a>
	uint8_t bit_position = 7 - (pos_x % 8);
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	43db      	mvns	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	73fb      	strb	r3, [r7, #15]
	if (color)
 800187c:	797b      	ldrb	r3, [r7, #5]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d01a      	beq.n	80018b8 <st7920_drawPixel+0x60>
	{
		framebuffer[pos_y][pos_x /8] |= (1 << bit_position);
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	79fa      	ldrb	r2, [r7, #7]
 8001886:	08d2      	lsrs	r2, r2, #3
 8001888:	b2d0      	uxtb	r0, r2
 800188a:	4601      	mov	r1, r0
 800188c:	4a1c      	ldr	r2, [pc, #112]	@ (8001900 <st7920_drawPixel+0xa8>)
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	4413      	add	r3, r2
 8001892:	440b      	add	r3, r1
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b25a      	sxtb	r2, r3
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	2101      	movs	r1, #1
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	b25a      	sxtb	r2, r3
 80018a6:	79bb      	ldrb	r3, [r7, #6]
 80018a8:	b2d1      	uxtb	r1, r2
 80018aa:	4a15      	ldr	r2, [pc, #84]	@ (8001900 <st7920_drawPixel+0xa8>)
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	4413      	add	r3, r2
 80018b0:	4403      	add	r3, r0
 80018b2:	460a      	mov	r2, r1
 80018b4:	701a      	strb	r2, [r3, #0]
 80018b6:	e01d      	b.n	80018f4 <st7920_drawPixel+0x9c>
	} else {
		framebuffer[pos_y][pos_x /8] &= ~(1 << bit_position);
 80018b8:	79bb      	ldrb	r3, [r7, #6]
 80018ba:	79fa      	ldrb	r2, [r7, #7]
 80018bc:	08d2      	lsrs	r2, r2, #3
 80018be:	b2d0      	uxtb	r0, r2
 80018c0:	4601      	mov	r1, r0
 80018c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001900 <st7920_drawPixel+0xa8>)
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	4413      	add	r3, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b25a      	sxtb	r2, r3
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2101      	movs	r1, #1
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	b25b      	sxtb	r3, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	b25b      	sxtb	r3, r3
 80018dc:	4013      	ands	r3, r2
 80018de:	b25a      	sxtb	r2, r3
 80018e0:	79bb      	ldrb	r3, [r7, #6]
 80018e2:	b2d1      	uxtb	r1, r2
 80018e4:	4a06      	ldr	r2, [pc, #24]	@ (8001900 <st7920_drawPixel+0xa8>)
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4413      	add	r3, r2
 80018ea:	4403      	add	r3, r0
 80018ec:	460a      	mov	r2, r1
 80018ee:	701a      	strb	r2, [r3, #0]
 80018f0:	e000      	b.n	80018f4 <st7920_drawPixel+0x9c>
	if(color > 1) return;
 80018f2:	bf00      	nop
	}
}
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	240080b4 	.word	0x240080b4

08001904 <st7920_sendBuffer>:

void st7920_sendBuffer()
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y < 64; y++)
 800190a:	2300      	movs	r3, #0
 800190c:	71fb      	strb	r3, [r7, #7]
 800190e:	e044      	b.n	800199a <st7920_sendBuffer+0x96>
	{
		if (y < 32)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	2b1f      	cmp	r3, #31
 8001914:	d81d      	bhi.n	8001952 <st7920_sendBuffer+0x4e>
		{
			st7920_writeCmd(0x80 | y);
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800191c:	b2db      	uxtb	r3, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff feee 	bl	8001700 <st7920_writeCmd>
			st7920_writeCmd(0x80);
 8001924:	2080      	movs	r0, #128	@ 0x80
 8001926:	f7ff feeb 	bl	8001700 <st7920_writeCmd>
			for (uint8_t j = 0; j < 16; j++)
 800192a:	2300      	movs	r3, #0
 800192c:	71bb      	strb	r3, [r7, #6]
 800192e:	e00c      	b.n	800194a <st7920_sendBuffer+0x46>
			{
				st7920_writeData(framebuffer[y][j]);
 8001930:	79fa      	ldrb	r2, [r7, #7]
 8001932:	79bb      	ldrb	r3, [r7, #6]
 8001934:	491d      	ldr	r1, [pc, #116]	@ (80019ac <st7920_sendBuffer+0xa8>)
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	440a      	add	r2, r1
 800193a:	4413      	add	r3, r2
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff08 	bl	8001754 <st7920_writeData>
			for (uint8_t j = 0; j < 16; j++)
 8001944:	79bb      	ldrb	r3, [r7, #6]
 8001946:	3301      	adds	r3, #1
 8001948:	71bb      	strb	r3, [r7, #6]
 800194a:	79bb      	ldrb	r3, [r7, #6]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d9ef      	bls.n	8001930 <st7920_sendBuffer+0x2c>
 8001950:	e020      	b.n	8001994 <st7920_sendBuffer+0x90>
			}
		} else {
			st7920_writeCmd(0x80 | (y-32));
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	3b20      	subs	r3, #32
 8001956:	b2db      	uxtb	r3, r3
 8001958:	b25b      	sxtb	r3, r3
 800195a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800195e:	b25b      	sxtb	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fecc 	bl	8001700 <st7920_writeCmd>
			st7920_writeCmd(0x88);
 8001968:	2088      	movs	r0, #136	@ 0x88
 800196a:	f7ff fec9 	bl	8001700 <st7920_writeCmd>
			for (uint8_t j = 0; j < 16; j++)
 800196e:	2300      	movs	r3, #0
 8001970:	717b      	strb	r3, [r7, #5]
 8001972:	e00c      	b.n	800198e <st7920_sendBuffer+0x8a>
			{
				st7920_writeData(framebuffer[y][j]);
 8001974:	79fa      	ldrb	r2, [r7, #7]
 8001976:	797b      	ldrb	r3, [r7, #5]
 8001978:	490c      	ldr	r1, [pc, #48]	@ (80019ac <st7920_sendBuffer+0xa8>)
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	440a      	add	r2, r1
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fee6 	bl	8001754 <st7920_writeData>
			for (uint8_t j = 0; j < 16; j++)
 8001988:	797b      	ldrb	r3, [r7, #5]
 800198a:	3301      	adds	r3, #1
 800198c:	717b      	strb	r3, [r7, #5]
 800198e:	797b      	ldrb	r3, [r7, #5]
 8001990:	2b0f      	cmp	r3, #15
 8001992:	d9ef      	bls.n	8001974 <st7920_sendBuffer+0x70>
	for (uint8_t y = 0; y < 64; y++)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	3301      	adds	r3, #1
 8001998:	71fb      	strb	r3, [r7, #7]
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	2b3f      	cmp	r3, #63	@ 0x3f
 800199e:	d9b7      	bls.n	8001910 <st7920_sendBuffer+0xc>
			}
		}
	}
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	240080b4 	.word	0x240080b4

080019b0 <st7920_drawChar>:

// more features

void st7920_drawChar(uint8_t x, uint8_t y, char c) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
 80019ba:	460b      	mov	r3, r1
 80019bc:	71bb      	strb	r3, [r7, #6]
 80019be:	4613      	mov	r3, r2
 80019c0:	717b      	strb	r3, [r7, #5]
	if (c < 32 || c > 126) return;
 80019c2:	797b      	ldrb	r3, [r7, #5]
 80019c4:	2b1f      	cmp	r3, #31
 80019c6:	d945      	bls.n	8001a54 <st7920_drawChar+0xa4>
 80019c8:	797b      	ldrb	r3, [r7, #5]
 80019ca:	2b7e      	cmp	r3, #126	@ 0x7e
 80019cc:	d842      	bhi.n	8001a54 <st7920_drawChar+0xa4>
    uint8_t charIndex = (c - 32);
 80019ce:	797b      	ldrb	r3, [r7, #5]
 80019d0:	3b20      	subs	r3, #32
 80019d2:	737b      	strb	r3, [r7, #13]

    for (uint8_t row = 0; row < 5; row++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	e038      	b.n	8001a4c <st7920_drawChar+0x9c>
    {
        for (uint8_t col = 0; col < 7; col++)
 80019da:	2300      	movs	r3, #0
 80019dc:	73bb      	strb	r3, [r7, #14]
 80019de:	e02f      	b.n	8001a40 <st7920_drawChar+0x90>
        {
        	uint8_t fontByte = fontdata[charIndex][col];
 80019e0:	7b7a      	ldrb	r2, [r7, #13]
 80019e2:	7bb9      	ldrb	r1, [r7, #14]
 80019e4:	481d      	ldr	r0, [pc, #116]	@ (8001a5c <st7920_drawChar+0xac>)
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	4403      	add	r3, r0
 80019ee:	440b      	add	r3, r1
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	733b      	strb	r3, [r7, #12]
        	if (fontByte & (1 << (4 - row)))
 80019f4:	7b3a      	ldrb	r2, [r7, #12]
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	f1c3 0304 	rsb	r3, r3, #4
 80019fc:	fa42 f303 	asr.w	r3, r2, r3
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00c      	beq.n	8001a22 <st7920_drawChar+0x72>
            {
                st7920_drawPixel(x + row, y + col, 1);
 8001a08:	79fa      	ldrb	r2, [r7, #7]
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b2d8      	uxtb	r0, r3
 8001a10:	79ba      	ldrb	r2, [r7, #6]
 8001a12:	7bbb      	ldrb	r3, [r7, #14]
 8001a14:	4413      	add	r3, r2
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff ff1c 	bl	8001858 <st7920_drawPixel>
 8001a20:	e00b      	b.n	8001a3a <st7920_drawChar+0x8a>
            } else {
            	st7920_drawPixel(x + row, y + col, 0);
 8001a22:	79fa      	ldrb	r2, [r7, #7]
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	4413      	add	r3, r2
 8001a28:	b2d8      	uxtb	r0, r3
 8001a2a:	79ba      	ldrb	r2, [r7, #6]
 8001a2c:	7bbb      	ldrb	r3, [r7, #14]
 8001a2e:	4413      	add	r3, r2
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2200      	movs	r2, #0
 8001a34:	4619      	mov	r1, r3
 8001a36:	f7ff ff0f 	bl	8001858 <st7920_drawPixel>
        for (uint8_t col = 0; col < 7; col++)
 8001a3a:	7bbb      	ldrb	r3, [r7, #14]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	73bb      	strb	r3, [r7, #14]
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d9cc      	bls.n	80019e0 <st7920_drawChar+0x30>
    for (uint8_t row = 0; row < 5; row++)
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d9c3      	bls.n	80019da <st7920_drawChar+0x2a>
 8001a52:	e000      	b.n	8001a56 <st7920_drawChar+0xa6>
	if (c < 32 || c > 126) return;
 8001a54:	bf00      	nop
            }
        }
    }
}
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	0801fafc 	.word	0x0801fafc

08001a60 <st7920_print>:

void st7920_print(uint8_t x, uint8_t y, const char* str)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	603a      	str	r2, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	71bb      	strb	r3, [r7, #6]
	while(*str)
 8001a70:	e013      	b.n	8001a9a <st7920_print+0x3a>
	{
		st7920_drawChar(x, y, *str++);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	603a      	str	r2, [r7, #0]
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	79b9      	ldrb	r1, [r7, #6]
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff96 	bl	80019b0 <st7920_drawChar>
		x+=6;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	3306      	adds	r3, #6
 8001a88:	71fb      	strb	r3, [r7, #7]
		if(x > 122)
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b7a      	cmp	r3, #122	@ 0x7a
 8001a8e:	d904      	bls.n	8001a9a <st7920_print+0x3a>
		{
			y+=8;
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	3308      	adds	r3, #8
 8001a94:	71bb      	strb	r3, [r7, #6]
			x=1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1e7      	bne.n	8001a72 <st7920_print+0x12>
		}
	}
}
 8001aa2:	bf00      	nop
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <st7920_clear>:

void st7920_clear() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	memset(framebuffer, 0x00, sizeof(framebuffer));
 8001ab0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <st7920_clear+0x14>)
 8001ab8:	f01b ff96 	bl	801d9e8 <memset>
	//st7920_writeCmd(0x01);
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	240080b4 	.word	0x240080b4

08001ac4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <HAL_MspInit+0x30>)
 8001acc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ad0:	4a08      	ldr	r2, [pc, #32]	@ (8001af4 <HAL_MspInit+0x30>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_MspInit+0x30>)
 8001adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	58024400 	.word	0x58024400

08001af8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b0ba      	sub	sp, #232	@ 0xe8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	22b8      	movs	r2, #184	@ 0xb8
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f01b ff65 	bl	801d9e8 <memset>
  if(hi2c->Instance==I2C1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a4c      	ldr	r2, [pc, #304]	@ (8001c54 <HAL_I2C_MspInit+0x15c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d146      	bne.n	8001bb6 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b28:	f04f 0208 	mov.w	r2, #8
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3a:	f107 0318 	add.w	r3, r7, #24
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f007 f956 	bl	8008df0 <HAL_RCCEx_PeriphCLKConfig>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001b4a:	f7ff faaf 	bl	80010ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	4b42      	ldr	r3, [pc, #264]	@ (8001c58 <HAL_I2C_MspInit+0x160>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b54:	4a40      	ldr	r2, [pc, #256]	@ (8001c58 <HAL_I2C_MspInit+0x160>)
 8001b56:	f043 0302 	orr.w	r3, r3, #2
 8001b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c58 <HAL_I2C_MspInit+0x160>)
 8001b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b6c:	23c0      	movs	r3, #192	@ 0xc0
 8001b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b72:	2312      	movs	r3, #18
 8001b74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b84:	2304      	movs	r3, #4
 8001b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4832      	ldr	r0, [pc, #200]	@ (8001c5c <HAL_I2C_MspInit+0x164>)
 8001b92:	f004 fe09 	bl	80067a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b96:	4b30      	ldr	r3, [pc, #192]	@ (8001c58 <HAL_I2C_MspInit+0x160>)
 8001b98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c58 <HAL_I2C_MspInit+0x160>)
 8001b9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ba2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c58 <HAL_I2C_MspInit+0x160>)
 8001ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bb4:	e04a      	b.n	8001c4c <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a29      	ldr	r2, [pc, #164]	@ (8001c60 <HAL_I2C_MspInit+0x168>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d145      	bne.n	8001c4c <HAL_I2C_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bc0:	f04f 0208 	mov.w	r2, #8
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd2:	f107 0318 	add.w	r3, r7, #24
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f007 f90a 	bl	8008df0 <HAL_RCCEx_PeriphCLKConfig>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001be2:	f7ff fa63 	bl	80010ac <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <HAL_I2C_MspInit+0x160>)
 8001be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bec:	4a1a      	ldr	r2, [pc, #104]	@ (8001c58 <HAL_I2C_MspInit+0x160>)
 8001bee:	f043 0320 	orr.w	r3, r3, #32
 8001bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bf6:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <HAL_I2C_MspInit+0x160>)
 8001bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c04:	2303      	movs	r3, #3
 8001c06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0a:	2312      	movs	r3, #18
 8001c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c22:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c26:	4619      	mov	r1, r3
 8001c28:	480e      	ldr	r0, [pc, #56]	@ (8001c64 <HAL_I2C_MspInit+0x16c>)
 8001c2a:	f004 fdbd 	bl	80067a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_I2C_MspInit+0x160>)
 8001c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c34:	4a08      	ldr	r2, [pc, #32]	@ (8001c58 <HAL_I2C_MspInit+0x160>)
 8001c36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_I2C_MspInit+0x160>)
 8001c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
}
 8001c4c:	bf00      	nop
 8001c4e:	37e8      	adds	r7, #232	@ 0xe8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40005400 	.word	0x40005400
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	58020400 	.word	0x58020400
 8001c60:	40005800 	.word	0x40005800
 8001c64:	58021400 	.word	0x58021400

08001c68 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b0b8      	sub	sp, #224	@ 0xe0
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	22b8      	movs	r2, #184	@ 0xb8
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f01b fead 	bl	801d9e8 <memset>
  if(hi2s->Instance==SPI1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a47      	ldr	r2, [pc, #284]	@ (8001db0 <HAL_I2S_MspInit+0x148>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	f040 8086 	bne.w	8001da6 <HAL_I2S_MspInit+0x13e>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001c9a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001caa:	2310      	movs	r3, #16
 8001cac:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001cba:	23c0      	movs	r3, #192	@ 0xc0
 8001cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f007 f88d 	bl	8008df0 <HAL_RCCEx_PeriphCLKConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_I2S_MspInit+0x78>
    {
      Error_Handler();
 8001cdc:	f7ff f9e6 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ce0:	4b34      	ldr	r3, [pc, #208]	@ (8001db4 <HAL_I2S_MspInit+0x14c>)
 8001ce2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ce6:	4a33      	ldr	r2, [pc, #204]	@ (8001db4 <HAL_I2S_MspInit+0x14c>)
 8001ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001cf0:	4b30      	ldr	r3, [pc, #192]	@ (8001db4 <HAL_I2S_MspInit+0x14c>)
 8001cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <HAL_I2S_MspInit+0x14c>)
 8001d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d04:	4a2b      	ldr	r2, [pc, #172]	@ (8001db4 <HAL_I2S_MspInit+0x14c>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d0e:	4b29      	ldr	r3, [pc, #164]	@ (8001db4 <HAL_I2S_MspInit+0x14c>)
 8001d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA6     ------> I2S1_SDI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001d1c:	2370      	movs	r3, #112	@ 0x70
 8001d1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d34:	2305      	movs	r3, #5
 8001d36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001d3e:	4619      	mov	r1, r3
 8001d40:	481d      	ldr	r0, [pc, #116]	@ (8001db8 <HAL_I2S_MspInit+0x150>)
 8001d42:	f004 fd31 	bl	80067a8 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001d46:	4b1d      	ldr	r3, [pc, #116]	@ (8001dbc <HAL_I2S_MspInit+0x154>)
 8001d48:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_I2S_MspInit+0x158>)
 8001d4a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <HAL_I2S_MspInit+0x154>)
 8001d4e:	2225      	movs	r2, #37	@ 0x25
 8001d50:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	@ (8001dbc <HAL_I2S_MspInit+0x154>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d58:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <HAL_I2S_MspInit+0x154>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d5e:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <HAL_I2S_MspInit+0x154>)
 8001d60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d64:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_I2S_MspInit+0x154>)
 8001d68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d6c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d6e:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <HAL_I2S_MspInit+0x154>)
 8001d70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d74:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_I2S_MspInit+0x154>)
 8001d78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d7c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <HAL_I2S_MspInit+0x154>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d84:	4b0d      	ldr	r3, [pc, #52]	@ (8001dbc <HAL_I2S_MspInit+0x154>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001d8a:	480c      	ldr	r0, [pc, #48]	@ (8001dbc <HAL_I2S_MspInit+0x154>)
 8001d8c:	f002 f91a 	bl	8003fc4 <HAL_DMA_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8001d96:	f7ff f989 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi1_rx);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	@ (8001dbc <HAL_I2S_MspInit+0x154>)
 8001d9e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001da0:	4a06      	ldr	r2, [pc, #24]	@ (8001dbc <HAL_I2S_MspInit+0x154>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001da6:	bf00      	nop
 8001da8:	37e0      	adds	r7, #224	@ 0xe0
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40013000 	.word	0x40013000
 8001db4:	58024400 	.word	0x58024400
 8001db8:	58020000 	.word	0x58020000
 8001dbc:	24000194 	.word	0x24000194
 8001dc0:	40020010 	.word	0x40020010

08001dc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b0ba      	sub	sp, #232	@ 0xe8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ddc:	f107 0318 	add.w	r3, r7, #24
 8001de0:	22b8      	movs	r2, #184	@ 0xb8
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f01b fdff 	bl	801d9e8 <memset>
  if(huart->Instance==LPUART1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a4d      	ldr	r2, [pc, #308]	@ (8001f24 <HAL_UART_MspInit+0x160>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d147      	bne.n	8001e84 <HAL_UART_MspInit+0xc0>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001df4:	f04f 0204 	mov.w	r2, #4
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e06:	f107 0318 	add.w	r3, r7, #24
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f006 fff0 	bl	8008df0 <HAL_RCCEx_PeriphCLKConfig>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001e16:	f7ff f949 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e1a:	4b43      	ldr	r3, [pc, #268]	@ (8001f28 <HAL_UART_MspInit+0x164>)
 8001e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e20:	4a41      	ldr	r2, [pc, #260]	@ (8001f28 <HAL_UART_MspInit+0x164>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f28 <HAL_UART_MspInit+0x164>)
 8001e2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	4b3b      	ldr	r3, [pc, #236]	@ (8001f28 <HAL_UART_MspInit+0x164>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e3e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f28 <HAL_UART_MspInit+0x164>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e48:	4b37      	ldr	r3, [pc, #220]	@ (8001f28 <HAL_UART_MspInit+0x164>)
 8001e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001e70:	2303      	movs	r3, #3
 8001e72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	482b      	ldr	r0, [pc, #172]	@ (8001f2c <HAL_UART_MspInit+0x168>)
 8001e7e:	f004 fc93 	bl	80067a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN UART5_MspInit 1 */

    /* USER CODE END UART5_MspInit 1 */
  }

}
 8001e82:	e04b      	b.n	8001f1c <HAL_UART_MspInit+0x158>
  else if(huart->Instance==UART5)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a29      	ldr	r2, [pc, #164]	@ (8001f30 <HAL_UART_MspInit+0x16c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d146      	bne.n	8001f1c <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001e8e:	f04f 0202 	mov.w	r2, #2
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea0:	f107 0318 	add.w	r3, r7, #24
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f006 ffa3 	bl	8008df0 <HAL_RCCEx_PeriphCLKConfig>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001eb0:	f7ff f8fc 	bl	80010ac <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <HAL_UART_MspInit+0x164>)
 8001eb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eba:	4a1b      	ldr	r2, [pc, #108]	@ (8001f28 <HAL_UART_MspInit+0x164>)
 8001ebc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ec0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ec4:	4b18      	ldr	r3, [pc, #96]	@ (8001f28 <HAL_UART_MspInit+0x164>)
 8001ec6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <HAL_UART_MspInit+0x164>)
 8001ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed8:	4a13      	ldr	r2, [pc, #76]	@ (8001f28 <HAL_UART_MspInit+0x164>)
 8001eda:	f043 0302 	orr.w	r3, r3, #2
 8001ede:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee2:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <HAL_UART_MspInit+0x164>)
 8001ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ef0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001f0a:	230e      	movs	r3, #14
 8001f0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f14:	4619      	mov	r1, r3
 8001f16:	4807      	ldr	r0, [pc, #28]	@ (8001f34 <HAL_UART_MspInit+0x170>)
 8001f18:	f004 fc46 	bl	80067a8 <HAL_GPIO_Init>
}
 8001f1c:	bf00      	nop
 8001f1e:	37e8      	adds	r7, #232	@ 0xe8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	58000c00 	.word	0x58000c00
 8001f28:	58024400 	.word	0x58024400
 8001f2c:	58020000 	.word	0x58020000
 8001f30:	40005000 	.word	0x40005000
 8001f34:	58020400 	.word	0x58020400

08001f38 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b0ba      	sub	sp, #232	@ 0xe8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f50:	f107 0318 	add.w	r3, r7, #24
 8001f54:	22b8      	movs	r2, #184	@ 0xb8
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f01b fd45 	bl	801d9e8 <memset>
  if(hsd->Instance==SDMMC1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a38      	ldr	r2, [pc, #224]	@ (8002044 <HAL_SD_MspInit+0x10c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d169      	bne.n	800203c <HAL_SD_MspInit+0x104>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001f68:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f78:	f107 0318 	add.w	r3, r7, #24
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f006 ff37 	bl	8008df0 <HAL_RCCEx_PeriphCLKConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001f88:	f7ff f890 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002048 <HAL_SD_MspInit+0x110>)
 8001f8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f92:	4a2d      	ldr	r2, [pc, #180]	@ (8002048 <HAL_SD_MspInit+0x110>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f98:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <HAL_SD_MspInit+0x110>)
 8001f9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001faa:	4b27      	ldr	r3, [pc, #156]	@ (8002048 <HAL_SD_MspInit+0x110>)
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb0:	4a25      	ldr	r2, [pc, #148]	@ (8002048 <HAL_SD_MspInit+0x110>)
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fba:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <HAL_SD_MspInit+0x110>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <HAL_SD_MspInit+0x110>)
 8001fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fce:	4a1e      	ldr	r2, [pc, #120]	@ (8002048 <HAL_SD_MspInit+0x110>)
 8001fd0:	f043 0308 	orr.w	r3, r3, #8
 8001fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <HAL_SD_MspInit+0x110>)
 8001fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001fe6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002000:	230c      	movs	r3, #12
 8002002:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002006:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800200a:	4619      	mov	r1, r3
 800200c:	480f      	ldr	r0, [pc, #60]	@ (800204c <HAL_SD_MspInit+0x114>)
 800200e:	f004 fbcb 	bl	80067a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002012:	2304      	movs	r3, #4
 8002014:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800202a:	230c      	movs	r3, #12
 800202c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002030:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	@ (8002050 <HAL_SD_MspInit+0x118>)
 8002038:	f004 fbb6 	bl	80067a8 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800203c:	bf00      	nop
 800203e:	37e8      	adds	r7, #232	@ 0xe8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	52007000 	.word	0x52007000
 8002048:	58024400 	.word	0x58024400
 800204c:	58020800 	.word	0x58020800
 8002050:	58020c00 	.word	0x58020c00

08002054 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0b8      	sub	sp, #224	@ 0xe0
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	22b8      	movs	r2, #184	@ 0xb8
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f01b fcb7 	bl	801d9e8 <memset>
  if(hspi->Instance==SPI4)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a26      	ldr	r2, [pc, #152]	@ (8002118 <HAL_SPI_MspInit+0xc4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d144      	bne.n	800210e <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002084:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002090:	2300      	movs	r3, #0
 8002092:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002094:	f107 0310 	add.w	r3, r7, #16
 8002098:	4618      	mov	r0, r3
 800209a:	f006 fea9 	bl	8008df0 <HAL_RCCEx_PeriphCLKConfig>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80020a4:	f7ff f802 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80020a8:	4b1c      	ldr	r3, [pc, #112]	@ (800211c <HAL_SPI_MspInit+0xc8>)
 80020aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020ae:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <HAL_SPI_MspInit+0xc8>)
 80020b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020b8:	4b18      	ldr	r3, [pc, #96]	@ (800211c <HAL_SPI_MspInit+0xc8>)
 80020ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020c6:	4b15      	ldr	r3, [pc, #84]	@ (800211c <HAL_SPI_MspInit+0xc8>)
 80020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020cc:	4a13      	ldr	r2, [pc, #76]	@ (800211c <HAL_SPI_MspInit+0xc8>)
 80020ce:	f043 0310 	orr.w	r3, r3, #16
 80020d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020d6:	4b11      	ldr	r3, [pc, #68]	@ (800211c <HAL_SPI_MspInit+0xc8>)
 80020d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80020e4:	2364      	movs	r3, #100	@ 0x64
 80020e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80020fc:	2305      	movs	r3, #5
 80020fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002102:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	@ (8002120 <HAL_SPI_MspInit+0xcc>)
 800210a:	f004 fb4d 	bl	80067a8 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 800210e:	bf00      	nop
 8002110:	37e0      	adds	r7, #224	@ 0xe0
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40013400 	.word	0x40013400
 800211c:	58024400 	.word	0x58024400
 8002120:	58021000 	.word	0x58021000

08002124 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002134:	d10e      	bne.n	8002154 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <HAL_TIM_Base_MspInit+0x3c>)
 8002138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800213c:	4a08      	ldr	r2, [pc, #32]	@ (8002160 <HAL_TIM_Base_MspInit+0x3c>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_TIM_Base_MspInit+0x3c>)
 8002148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	58024400 	.word	0x58024400

08002164 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002184:	d11e      	bne.n	80021c4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <HAL_TIM_MspPostInit+0x68>)
 8002188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218c:	4a0f      	ldr	r2, [pc, #60]	@ (80021cc <HAL_TIM_MspPostInit+0x68>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002196:	4b0d      	ldr	r3, [pc, #52]	@ (80021cc <HAL_TIM_MspPostInit+0x68>)
 8002198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021a4:	2303      	movs	r3, #3
 80021a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021b4:	2301      	movs	r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	4619      	mov	r1, r3
 80021be:	4804      	ldr	r0, [pc, #16]	@ (80021d0 <HAL_TIM_MspPostInit+0x6c>)
 80021c0:	f004 faf2 	bl	80067a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021c4:	bf00      	nop
 80021c6:	3720      	adds	r7, #32
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	58024400 	.word	0x58024400
 80021d0:	58020000 	.word	0x58020000

080021d4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b0b2      	sub	sp, #200	@ 0xc8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	22b8      	movs	r2, #184	@ 0xb8
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f01b fbff 	bl	801d9e8 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002258 <HAL_PCD_MspInit+0x84>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d12c      	bne.n	800224e <HAL_PCD_MspInit+0x7a>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80021f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002200:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002204:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	4618      	mov	r0, r3
 800220e:	f006 fdef 	bl	8008df0 <HAL_RCCEx_PeriphCLKConfig>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8002218:	f7fe ff48 	bl	80010ac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800221c:	f005 fe72 	bl	8007f04 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002220:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <HAL_PCD_MspInit+0x88>)
 8002222:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002226:	4a0d      	ldr	r2, [pc, #52]	@ (800225c <HAL_PCD_MspInit+0x88>)
 8002228:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800222c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002230:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <HAL_PCD_MspInit+0x88>)
 8002232:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	204d      	movs	r0, #77	@ 0x4d
 8002244:	f001 fe89 	bl	8003f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8002248:	204d      	movs	r0, #77	@ 0x4d
 800224a:	f001 fea0 	bl	8003f8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 800224e:	bf00      	nop
 8002250:	37c8      	adds	r7, #200	@ 0xc8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40040000 	.word	0x40040000
 800225c:	58024400 	.word	0x58024400

08002260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <NMI_Handler+0x4>

08002268 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <HardFault_Handler+0x4>

08002270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <MemManage_Handler+0x4>

08002278 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <BusFault_Handler+0x4>

08002280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <UsageFault_Handler+0x4>

08002288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b6:	f001 fd31 	bl	8003d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}

080022be <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ir_sensor_Pin);
 80022c2:	2008      	movs	r0, #8
 80022c4:	f004 fc31 	bl	8006b2a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}

080022cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80022d0:	4802      	ldr	r0, [pc, #8]	@ (80022dc <DMA1_Stream0_IRQHandler+0x10>)
 80022d2:	f002 ff57 	bl	8005184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	24000194 	.word	0x24000194

080022e0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */
	tud_int_handler(0);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f017 fe13 	bl	8019f10 <dcd_int_handler>
	return;
 80022ea:	bf00      	nop
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b086      	sub	sp, #24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e00a      	b.n	8002316 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002300:	f3af 8000 	nop.w
 8002304:	4601      	mov	r1, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	60ba      	str	r2, [r7, #8]
 800230c:	b2ca      	uxtb	r2, r1
 800230e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3301      	adds	r3, #1
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	429a      	cmp	r2, r3
 800231c:	dbf0      	blt.n	8002300 <_read+0x12>
  }

  return len;
 800231e:	687b      	ldr	r3, [r7, #4]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e009      	b.n	800234e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	60ba      	str	r2, [r7, #8]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3301      	adds	r3, #1
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	429a      	cmp	r2, r3
 8002354:	dbf1      	blt.n	800233a <_write+0x12>
  }
  return len;
 8002356:	687b      	ldr	r3, [r7, #4]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_close>:

int _close(int file)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002388:	605a      	str	r2, [r3, #4]
  return 0;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_isatty>:

int _isatty(int file)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023a0:	2301      	movs	r3, #1
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d0:	4a14      	ldr	r2, [pc, #80]	@ (8002424 <_sbrk+0x5c>)
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <_sbrk+0x60>)
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023dc:	4b13      	ldr	r3, [pc, #76]	@ (800242c <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <_sbrk+0x64>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	@ (8002430 <_sbrk+0x68>)
 80023e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ea:	4b10      	ldr	r3, [pc, #64]	@ (800242c <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d207      	bcs.n	8002408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f8:	f01b fb5a 	bl	801dab0 <__errno>
 80023fc:	4603      	mov	r3, r0
 80023fe:	220c      	movs	r2, #12
 8002400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
 8002406:	e009      	b.n	800241c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002408:	4b08      	ldr	r3, [pc, #32]	@ (800242c <_sbrk+0x64>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800240e:	4b07      	ldr	r3, [pc, #28]	@ (800242c <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	4a05      	ldr	r2, [pc, #20]	@ (800242c <_sbrk+0x64>)
 8002418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	24050000 	.word	0x24050000
 8002428:	00004000 	.word	0x00004000
 800242c:	240084b4 	.word	0x240084b4
 8002430:	24008b48 	.word	0x24008b48

08002434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002438:	4b3e      	ldr	r3, [pc, #248]	@ (8002534 <SystemInit+0x100>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243e:	4a3d      	ldr	r2, [pc, #244]	@ (8002534 <SystemInit+0x100>)
 8002440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002448:	4b3b      	ldr	r3, [pc, #236]	@ (8002538 <SystemInit+0x104>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	2b06      	cmp	r3, #6
 8002452:	d807      	bhi.n	8002464 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002454:	4b38      	ldr	r3, [pc, #224]	@ (8002538 <SystemInit+0x104>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 030f 	bic.w	r3, r3, #15
 800245c:	4a36      	ldr	r2, [pc, #216]	@ (8002538 <SystemInit+0x104>)
 800245e:	f043 0307 	orr.w	r3, r3, #7
 8002462:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002464:	4b35      	ldr	r3, [pc, #212]	@ (800253c <SystemInit+0x108>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a34      	ldr	r2, [pc, #208]	@ (800253c <SystemInit+0x108>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002470:	4b32      	ldr	r3, [pc, #200]	@ (800253c <SystemInit+0x108>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002476:	4b31      	ldr	r3, [pc, #196]	@ (800253c <SystemInit+0x108>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4930      	ldr	r1, [pc, #192]	@ (800253c <SystemInit+0x108>)
 800247c:	4b30      	ldr	r3, [pc, #192]	@ (8002540 <SystemInit+0x10c>)
 800247e:	4013      	ands	r3, r2
 8002480:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002482:	4b2d      	ldr	r3, [pc, #180]	@ (8002538 <SystemInit+0x104>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800248e:	4b2a      	ldr	r3, [pc, #168]	@ (8002538 <SystemInit+0x104>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 030f 	bic.w	r3, r3, #15
 8002496:	4a28      	ldr	r2, [pc, #160]	@ (8002538 <SystemInit+0x104>)
 8002498:	f043 0307 	orr.w	r3, r3, #7
 800249c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800249e:	4b27      	ldr	r3, [pc, #156]	@ (800253c <SystemInit+0x108>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80024a4:	4b25      	ldr	r3, [pc, #148]	@ (800253c <SystemInit+0x108>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80024aa:	4b24      	ldr	r3, [pc, #144]	@ (800253c <SystemInit+0x108>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80024b0:	4b22      	ldr	r3, [pc, #136]	@ (800253c <SystemInit+0x108>)
 80024b2:	4a24      	ldr	r2, [pc, #144]	@ (8002544 <SystemInit+0x110>)
 80024b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80024b6:	4b21      	ldr	r3, [pc, #132]	@ (800253c <SystemInit+0x108>)
 80024b8:	4a23      	ldr	r2, [pc, #140]	@ (8002548 <SystemInit+0x114>)
 80024ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024bc:	4b1f      	ldr	r3, [pc, #124]	@ (800253c <SystemInit+0x108>)
 80024be:	4a23      	ldr	r2, [pc, #140]	@ (800254c <SystemInit+0x118>)
 80024c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024c2:	4b1e      	ldr	r3, [pc, #120]	@ (800253c <SystemInit+0x108>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024c8:	4b1c      	ldr	r3, [pc, #112]	@ (800253c <SystemInit+0x108>)
 80024ca:	4a20      	ldr	r2, [pc, #128]	@ (800254c <SystemInit+0x118>)
 80024cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024ce:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <SystemInit+0x108>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024d4:	4b19      	ldr	r3, [pc, #100]	@ (800253c <SystemInit+0x108>)
 80024d6:	4a1d      	ldr	r2, [pc, #116]	@ (800254c <SystemInit+0x118>)
 80024d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024da:	4b18      	ldr	r3, [pc, #96]	@ (800253c <SystemInit+0x108>)
 80024dc:	2200      	movs	r2, #0
 80024de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024e0:	4b16      	ldr	r3, [pc, #88]	@ (800253c <SystemInit+0x108>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a15      	ldr	r2, [pc, #84]	@ (800253c <SystemInit+0x108>)
 80024e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024ec:	4b13      	ldr	r3, [pc, #76]	@ (800253c <SystemInit+0x108>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80024f2:	4b12      	ldr	r3, [pc, #72]	@ (800253c <SystemInit+0x108>)
 80024f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d113      	bne.n	8002528 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002500:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <SystemInit+0x108>)
 8002502:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002506:	4a0d      	ldr	r2, [pc, #52]	@ (800253c <SystemInit+0x108>)
 8002508:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800250c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002510:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <SystemInit+0x11c>)
 8002512:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002516:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002518:	4b08      	ldr	r3, [pc, #32]	@ (800253c <SystemInit+0x108>)
 800251a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800251e:	4a07      	ldr	r2, [pc, #28]	@ (800253c <SystemInit+0x108>)
 8002520:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002524:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000ed00 	.word	0xe000ed00
 8002538:	52002000 	.word	0x52002000
 800253c:	58024400 	.word	0x58024400
 8002540:	eaf6ed7f 	.word	0xeaf6ed7f
 8002544:	02020200 	.word	0x02020200
 8002548:	01ff0000 	.word	0x01ff0000
 800254c:	01010280 	.word	0x01010280
 8002550:	52004000 	.word	0x52004000

08002554 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002558:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <ExitRun0Mode+0x2c>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a08      	ldr	r2, [pc, #32]	@ (8002580 <ExitRun0Mode+0x2c>)
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002564:	bf00      	nop
 8002566:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <ExitRun0Mode+0x2c>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f9      	beq.n	8002566 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002572:	bf00      	nop
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	58024800 	.word	0x58024800

08002584 <my_printf>:
{
 8002584:	b40f      	push	{r0, r1, r2, r3}
 8002586:	b580      	push	{r7, lr}
 8002588:	b0c2      	sub	sp, #264	@ 0x108
 800258a:	af00      	add	r7, sp, #0
    va_start(args, format);
 800258c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8002590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002598:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800259a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800259e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80025a2:	f107 0008 	add.w	r0, r7, #8
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80025ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025b0:	f01b f978 	bl	801d8a4 <vsniprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd fea9 	bl	8000310 <strlen>
 80025be:	4603      	mov	r3, r0
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	f107 0108 	add.w	r1, r7, #8
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	4805      	ldr	r0, [pc, #20]	@ (80025e0 <my_printf+0x5c>)
 80025cc:	f00c f8b6 	bl	800e73c <HAL_UART_Transmit>
}
 80025d0:	bf00      	nop
 80025d2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80025d6:	46bd      	mov	sp, r7
 80025d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025dc:	b004      	add	sp, #16
 80025de:	4770      	bx	lr
 80025e0:	2400020c 	.word	0x2400020c

080025e4 <i2c_set_slave_address>:

extern I2C_HandleTypeDef hi2c1;

uint8_t i2c_addr = 0;

void i2c_set_slave_address(uint8_t addr) {
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
    i2c_addr = addr;
 80025ee:	4a04      	ldr	r2, [pc, #16]	@ (8002600 <i2c_set_slave_address+0x1c>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	7013      	strb	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	240084b9 	.word	0x240084b9

08002604 <i2c_read_addr8_data8>:

bool i2c_read_addr8_data8(uint8_t addr, uint8_t *data) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af02      	add	r7, sp, #8
 800260a:	4603      	mov	r3, r0
 800260c:	6039      	str	r1, [r7, #0]
 800260e:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002610:	4b18      	ldr	r3, [pc, #96]	@ (8002674 <i2c_read_addr8_data8+0x70>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	b299      	uxth	r1, r3
 8002618:	1dfa      	adds	r2, r7, #7
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2301      	movs	r3, #1
 8002622:	4815      	ldr	r0, [pc, #84]	@ (8002678 <i2c_read_addr8_data8+0x74>)
 8002624:	f004 fb38 	bl	8006c98 <HAL_I2C_Master_Transmit>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <i2c_read_addr8_data8+0x38>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4619      	mov	r1, r3
 8002632:	4812      	ldr	r0, [pc, #72]	@ (800267c <i2c_read_addr8_data8+0x78>)
 8002634:	f7ff ffa6 	bl	8002584 <my_printf>
        return false;
 8002638:	2300      	movs	r3, #0
 800263a:	e016      	b.n	800266a <i2c_read_addr8_data8+0x66>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, data, 1, HAL_MAX_DELAY) != HAL_OK) {
 800263c:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <i2c_read_addr8_data8+0x70>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	b299      	uxth	r1, r3
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2301      	movs	r3, #1
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	480a      	ldr	r0, [pc, #40]	@ (8002678 <i2c_read_addr8_data8+0x74>)
 8002650:	f004 fc3a 	bl	8006ec8 <HAL_I2C_Master_Receive>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <i2c_read_addr8_data8+0x64>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data8 (register 0x%X)\r\n", addr);
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	4619      	mov	r1, r3
 800265e:	4808      	ldr	r0, [pc, #32]	@ (8002680 <i2c_read_addr8_data8+0x7c>)
 8002660:	f7ff ff90 	bl	8002584 <my_printf>
        return false;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <i2c_read_addr8_data8+0x66>
    }
    return true;
 8002668:	2301      	movs	r3, #1
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	240084b9 	.word	0x240084b9
 8002678:	24000098 	.word	0x24000098
 800267c:	0801ec00 	.word	0x0801ec00
 8002680:	0801ec44 	.word	0x0801ec44

08002684 <i2c_write_addr8_data8>:
    }
    *data = (buf[0] << 8) | buf[1];
    return true;
}

bool i2c_write_addr8_data8(uint8_t addr, uint8_t data) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af02      	add	r7, sp, #8
 800268a:	4603      	mov	r3, r0
 800268c:	460a      	mov	r2, r1
 800268e:	71fb      	strb	r3, [r7, #7]
 8002690:	4613      	mov	r3, r2
 8002692:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2] = {addr, data};
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	733b      	strb	r3, [r7, #12]
 8002698:	79bb      	ldrb	r3, [r7, #6]
 800269a:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, buf, 2, HAL_MAX_DELAY) != HAL_OK) {
 800269c:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <i2c_write_addr8_data8+0x54>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	b299      	uxth	r1, r3
 80026a4:	f107 020c 	add.w	r2, r7, #12
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2302      	movs	r3, #2
 80026b0:	480a      	ldr	r0, [pc, #40]	@ (80026dc <i2c_write_addr8_data8+0x58>)
 80026b2:	f004 faf1 	bl	8006c98 <HAL_I2C_Master_Transmit>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <i2c_write_addr8_data8+0x4a>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_data8 (register 0x%X) on device 0x%X\r\n", addr, i2c_addr);
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	4a06      	ldr	r2, [pc, #24]	@ (80026d8 <i2c_write_addr8_data8+0x54>)
 80026c0:	7812      	ldrb	r2, [r2, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	4806      	ldr	r0, [pc, #24]	@ (80026e0 <i2c_write_addr8_data8+0x5c>)
 80026c6:	f7ff ff5d 	bl	8002584 <my_printf>
        return false;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <i2c_write_addr8_data8+0x4c>
    }
    return true;
 80026ce:	2301      	movs	r3, #1
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	240084b9 	.word	0x240084b9
 80026dc:	24000098 	.word	0x24000098
 80026e0:	0801ed14 	.word	0x0801ed14

080026e4 <i2c_read_addr8_data32>:

bool i2c_read_addr8_data32(uint8_t addr, uint32_t *data) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 80026f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002770 <i2c_read_addr8_data32+0x8c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	b299      	uxth	r1, r3
 80026f8:	1dfa      	adds	r2, r7, #7
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2301      	movs	r3, #1
 8002702:	481c      	ldr	r0, [pc, #112]	@ (8002774 <i2c_read_addr8_data32+0x90>)
 8002704:	f004 fac8 	bl	8006c98 <HAL_I2C_Master_Transmit>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d006      	beq.n	800271c <i2c_read_addr8_data32+0x38>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	4619      	mov	r1, r3
 8002712:	4819      	ldr	r0, [pc, #100]	@ (8002778 <i2c_read_addr8_data32+0x94>)
 8002714:	f7ff ff36 	bl	8002584 <my_printf>
        return false;
 8002718:	2300      	movs	r3, #0
 800271a:	e024      	b.n	8002766 <i2c_read_addr8_data32+0x82>
    }
    uint8_t buf[4];
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, buf, 4, HAL_MAX_DELAY) != HAL_OK) {
 800271c:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <i2c_read_addr8_data32+0x8c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	b299      	uxth	r1, r3
 8002724:	f107 020c 	add.w	r2, r7, #12
 8002728:	f04f 33ff 	mov.w	r3, #4294967295
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2304      	movs	r3, #4
 8002730:	4810      	ldr	r0, [pc, #64]	@ (8002774 <i2c_read_addr8_data32+0x90>)
 8002732:	f004 fbc9 	bl	8006ec8 <HAL_I2C_Master_Receive>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d006      	beq.n	800274a <i2c_read_addr8_data32+0x66>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_data32 (register 0x%X)\r\n", addr);
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	4619      	mov	r1, r3
 8002740:	480e      	ldr	r0, [pc, #56]	@ (800277c <i2c_read_addr8_data32+0x98>)
 8002742:	f7ff ff1f 	bl	8002584 <my_printf>
        return false;
 8002746:	2300      	movs	r3, #0
 8002748:	e00d      	b.n	8002766 <i2c_read_addr8_data32+0x82>
    }
    *data = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 800274a:	7b3b      	ldrb	r3, [r7, #12]
 800274c:	061a      	lsls	r2, r3, #24
 800274e:	7b7b      	ldrb	r3, [r7, #13]
 8002750:	041b      	lsls	r3, r3, #16
 8002752:	431a      	orrs	r2, r3
 8002754:	7bbb      	ldrb	r3, [r7, #14]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	4313      	orrs	r3, r2
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	4313      	orrs	r3, r2
 800275e:	461a      	mov	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	601a      	str	r2, [r3, #0]
    return true;
 8002764:	2301      	movs	r3, #1
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	240084b9 	.word	0x240084b9
 8002774:	24000098 	.word	0x24000098
 8002778:	0801ed68 	.word	0x0801ed68
 800277c:	0801edb0 	.word	0x0801edb0

08002780 <i2c_write_addr8_bytes>:

bool i2c_write_addr8_bytes(uint8_t addr, const uint8_t *data, uint8_t length) {
 8002780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002784:	b087      	sub	sp, #28
 8002786:	af02      	add	r7, sp, #8
 8002788:	4603      	mov	r3, r0
 800278a:	6039      	str	r1, [r7, #0]
 800278c:	71fb      	strb	r3, [r7, #7]
 800278e:	4613      	mov	r3, r2
 8002790:	71bb      	strb	r3, [r7, #6]
 8002792:	466b      	mov	r3, sp
 8002794:	461e      	mov	r6, r3
    uint8_t buf[1 + length];
 8002796:	79bb      	ldrb	r3, [r7, #6]
 8002798:	1c59      	adds	r1, r3, #1
 800279a:	1e4b      	subs	r3, r1, #1
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	460a      	mov	r2, r1
 80027a0:	2300      	movs	r3, #0
 80027a2:	4690      	mov	r8, r2
 80027a4:	4699      	mov	r9, r3
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ba:	460a      	mov	r2, r1
 80027bc:	2300      	movs	r3, #0
 80027be:	4614      	mov	r4, r2
 80027c0:	461d      	mov	r5, r3
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	00eb      	lsls	r3, r5, #3
 80027cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027d0:	00e2      	lsls	r2, r4, #3
 80027d2:	460b      	mov	r3, r1
 80027d4:	3307      	adds	r3, #7
 80027d6:	08db      	lsrs	r3, r3, #3
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	ebad 0d03 	sub.w	sp, sp, r3
 80027de:	ab02      	add	r3, sp, #8
 80027e0:	3300      	adds	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
    buf[0] = addr;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	79fa      	ldrb	r2, [r7, #7]
 80027e8:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[1], data, length);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3301      	adds	r3, #1
 80027ee:	79ba      	ldrb	r2, [r7, #6]
 80027f0:	6839      	ldr	r1, [r7, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f01b f989 	bl	801db0a <memcpy>

    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, buf, length + 1, HAL_MAX_DELAY) != HAL_OK) {
 80027f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002838 <i2c_write_addr8_bytes+0xb8>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	b299      	uxth	r1, r3
 8002800:	79bb      	ldrb	r3, [r7, #6]
 8002802:	b29b      	uxth	r3, r3
 8002804:	3301      	adds	r3, #1
 8002806:	b29b      	uxth	r3, r3
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	9200      	str	r2, [sp, #0]
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	480a      	ldr	r0, [pc, #40]	@ (800283c <i2c_write_addr8_bytes+0xbc>)
 8002812:	f004 fa41 	bl	8006c98 <HAL_I2C_Master_Transmit>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d006      	beq.n	800282a <i2c_write_addr8_bytes+0xaa>
        my_printf("[I2C] ERROR: Write failed i2c_write_addr8_bytes (register 0x%X)\r\n", addr);
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	4619      	mov	r1, r3
 8002820:	4807      	ldr	r0, [pc, #28]	@ (8002840 <i2c_write_addr8_bytes+0xc0>)
 8002822:	f7ff feaf 	bl	8002584 <my_printf>
        return false;
 8002826:	2300      	movs	r3, #0
 8002828:	e000      	b.n	800282c <i2c_write_addr8_bytes+0xac>
    }
    return true;
 800282a:	2301      	movs	r3, #1
 800282c:	46b5      	mov	sp, r6
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002838:	240084b9 	.word	0x240084b9
 800283c:	24000098 	.word	0x24000098
 8002840:	0801edf4 	.word	0x0801edf4

08002844 <i2c_read_addr8_bytes>:

bool i2c_read_addr8_bytes(uint8_t addr, uint8_t *data, uint8_t length) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af02      	add	r7, sp, #8
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
 8002850:	4613      	mov	r3, r2
 8002852:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Master_Transmit(&hi2c1, i2c_addr << 1, &addr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8002854:	4b18      	ldr	r3, [pc, #96]	@ (80028b8 <i2c_read_addr8_bytes+0x74>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	b299      	uxth	r1, r3
 800285c:	1dfa      	adds	r2, r7, #7
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2301      	movs	r3, #1
 8002866:	4815      	ldr	r0, [pc, #84]	@ (80028bc <i2c_read_addr8_bytes+0x78>)
 8002868:	f004 fa16 	bl	8006c98 <HAL_I2C_Master_Transmit>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d006      	beq.n	8002880 <i2c_read_addr8_bytes+0x3c>
        my_printf("[I2C] ERROR: Transmit failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	4619      	mov	r1, r3
 8002876:	4812      	ldr	r0, [pc, #72]	@ (80028c0 <i2c_read_addr8_bytes+0x7c>)
 8002878:	f7ff fe84 	bl	8002584 <my_printf>
        return false;
 800287c:	2300      	movs	r3, #0
 800287e:	e017      	b.n	80028b0 <i2c_read_addr8_bytes+0x6c>
    }
    if (HAL_I2C_Master_Receive(&hi2c1, i2c_addr << 1, data, length, HAL_MAX_DELAY) != HAL_OK) {
 8002880:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <i2c_read_addr8_bytes+0x74>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	b299      	uxth	r1, r3
 8002888:	79bb      	ldrb	r3, [r7, #6]
 800288a:	b29b      	uxth	r3, r3
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	9200      	str	r2, [sp, #0]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	4809      	ldr	r0, [pc, #36]	@ (80028bc <i2c_read_addr8_bytes+0x78>)
 8002896:	f004 fb17 	bl	8006ec8 <HAL_I2C_Master_Receive>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d006      	beq.n	80028ae <i2c_read_addr8_bytes+0x6a>
        my_printf("[I2C] ERROR: Receive failed i2c_read_addr8_bytes (register 0x%X)\r\n", addr);
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	4619      	mov	r1, r3
 80028a4:	4807      	ldr	r0, [pc, #28]	@ (80028c4 <i2c_read_addr8_bytes+0x80>)
 80028a6:	f7ff fe6d 	bl	8002584 <my_printf>
        return false;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <i2c_read_addr8_bytes+0x6c>
    }
    return true;
 80028ae:	2301      	movs	r3, #1
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	240084b9 	.word	0x240084b9
 80028bc:	24000098 	.word	0x24000098
 80028c0:	0801ee38 	.word	0x0801ee38
 80028c4:	0801ee7c 	.word	0x0801ee7c

080028c8 <device_is_booted>:
/**
 * We can read the model id to confirm that the device is booted.
 * (There is no fresh_out_of_reset as on the vl6180x)
 */
static bool device_is_booted()
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
    printf("check device is booted\r\n");
 80028ce:	4813      	ldr	r0, [pc, #76]	@ (800291c <device_is_booted+0x54>)
 80028d0:	f01a ff16 	bl	801d700 <puts>
    uint8_t device_id = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_IDENTIFICATION_MODEL_ID, &device_id)) {
 80028d8:	1dfb      	adds	r3, r7, #7
 80028da:	4619      	mov	r1, r3
 80028dc:	20c0      	movs	r0, #192	@ 0xc0
 80028de:	f7ff fe91 	bl	8002604 <i2c_read_addr8_data8>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f083 0301 	eor.w	r3, r3, #1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <device_is_booted+0x34>
        printf("current device id: %d", device_id);
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4619      	mov	r1, r3
 80028f2:	480b      	ldr	r0, [pc, #44]	@ (8002920 <device_is_booted+0x58>)
 80028f4:	f01a fe9c 	bl	801d630 <iprintf>
        return false;
 80028f8:	2300      	movs	r3, #0
 80028fa:	e00a      	b.n	8002912 <device_is_booted+0x4a>
    } else {
        printf("device id: %d", device_id);
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	4619      	mov	r1, r3
 8002900:	4808      	ldr	r0, [pc, #32]	@ (8002924 <device_is_booted+0x5c>)
 8002902:	f01a fe95 	bl	801d630 <iprintf>
    }
    return device_id == VL53L0X_EXPECTED_DEVICE_ID;
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	2bee      	cmp	r3, #238	@ 0xee
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	0801eec0 	.word	0x0801eec0
 8002920:	0801eed8 	.word	0x0801eed8
 8002924:	0801eef0 	.word	0x0801eef0

08002928 <data_init>:

/**
 * One time device initialization
 */
static bool data_init()
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
    bool success = false;
 800292e:	2300      	movs	r3, #0
 8002930:	71fb      	strb	r3, [r7, #7]

    /* Set 2v8 mode */
    uint8_t vhv_config_scl_sda = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	71bb      	strb	r3, [r7, #6]
    if (!i2c_read_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_scl_sda)) {
 8002936:	1dbb      	adds	r3, r7, #6
 8002938:	4619      	mov	r1, r3
 800293a:	2089      	movs	r0, #137	@ 0x89
 800293c:	f7ff fe62 	bl	8002604 <i2c_read_addr8_data8>
 8002940:	4603      	mov	r3, r0
 8002942:	f083 0301 	eor.w	r3, r3, #1
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <data_init+0x28>
        return false;
 800294c:	2300      	movs	r3, #0
 800294e:	e073      	b.n	8002a38 <data_init+0x110>
    }
    vhv_config_scl_sda |= 0x01;
 8002950:	79bb      	ldrb	r3, [r7, #6]
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	b2db      	uxtb	r3, r3
 8002958:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, vhv_config_scl_sda)) {
 800295a:	79bb      	ldrb	r3, [r7, #6]
 800295c:	4619      	mov	r1, r3
 800295e:	2089      	movs	r0, #137	@ 0x89
 8002960:	f7ff fe90 	bl	8002684 <i2c_write_addr8_data8>
 8002964:	4603      	mov	r3, r0
 8002966:	f083 0301 	eor.w	r3, r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <data_init+0x4c>
        return false;
 8002970:	2300      	movs	r3, #0
 8002972:	e061      	b.n	8002a38 <data_init+0x110>
    }

    /* Set I2C standard mode */
    success = i2c_write_addr8_data8(0x88, 0x00);
 8002974:	2100      	movs	r1, #0
 8002976:	2088      	movs	r0, #136	@ 0x88
 8002978:	f7ff fe84 	bl	8002684 <i2c_write_addr8_data8>
 800297c:	4603      	mov	r3, r0
 800297e:	71fb      	strb	r3, [r7, #7]

    success &= i2c_write_addr8_data8(0x80, 0x01);
 8002980:	2101      	movs	r1, #1
 8002982:	2080      	movs	r0, #128	@ 0x80
 8002984:	f7ff fe7e 	bl	8002684 <i2c_write_addr8_data8>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800299a:	2101      	movs	r1, #1
 800299c:	20ff      	movs	r0, #255	@ 0xff
 800299e:	f7ff fe71 	bl	8002684 <i2c_write_addr8_data8>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	bf14      	ite	ne
 80029ae:	2301      	movne	r3, #1
 80029b0:	2300      	moveq	r3, #0
 80029b2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 80029b4:	2100      	movs	r1, #0
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7ff fe64 	bl	8002684 <i2c_write_addr8_data8>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	71fb      	strb	r3, [r7, #7]
    /* It may be unnecessary to retrieve the stop variable for each sensor */
    success &= i2c_read_addr8_data8(0x91, &stop_variable);
 80029ce:	491c      	ldr	r1, [pc, #112]	@ (8002a40 <data_init+0x118>)
 80029d0:	2091      	movs	r0, #145	@ 0x91
 80029d2:	f7ff fe17 	bl	8002604 <i2c_read_addr8_data8>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461a      	mov	r2, r3
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 80029e8:	2101      	movs	r1, #1
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7ff fe4a 	bl	8002684 <i2c_write_addr8_data8>
 80029f0:	4603      	mov	r3, r0
 80029f2:	461a      	mov	r2, r3
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002a02:	2100      	movs	r1, #0
 8002a04:	20ff      	movs	r0, #255	@ 0xff
 8002a06:	f7ff fe3d 	bl	8002684 <i2c_write_addr8_data8>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf14      	ite	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	2300      	moveq	r3, #0
 8002a1a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2080      	movs	r0, #128	@ 0x80
 8002a20:	f7ff fe30 	bl	8002684 <i2c_write_addr8_data8>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	71fb      	strb	r3, [r7, #7]

    return success;
 8002a36:	79fb      	ldrb	r3, [r7, #7]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	240084b8 	.word	0x240084b8

08002a44 <read_strobe>:
/**
 * Wait for strobe value to be set. This is used when we read values
 * from NVM (non volatile memory).
 */
static bool read_strobe()
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
    bool success = false;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	71fb      	strb	r3, [r7, #7]
    uint8_t strobe = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	71bb      	strb	r3, [r7, #6]
    if (!i2c_write_addr8_data8(0x83, 0x00)) {
 8002a52:	2100      	movs	r1, #0
 8002a54:	2083      	movs	r0, #131	@ 0x83
 8002a56:	f7ff fe15 	bl	8002684 <i2c_write_addr8_data8>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f083 0301 	eor.w	r3, r3, #1
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <read_strobe+0x26>
        return false;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e021      	b.n	8002aae <read_strobe+0x6a>
    }
    do {
        success = i2c_read_addr8_data8(0x83, &strobe);
 8002a6a:	1dbb      	adds	r3, r7, #6
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	2083      	movs	r0, #131	@ 0x83
 8002a70:	f7ff fdc8 	bl	8002604 <i2c_read_addr8_data8>
 8002a74:	4603      	mov	r3, r0
 8002a76:	71fb      	strb	r3, [r7, #7]
    } while (success && (strobe == 0));
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <read_strobe+0x40>
 8002a7e:	79bb      	ldrb	r3, [r7, #6]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f2      	beq.n	8002a6a <read_strobe+0x26>
    if (!success) {
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	f083 0301 	eor.w	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <read_strobe+0x50>
        return false;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e00c      	b.n	8002aae <read_strobe+0x6a>
    }
    if (!i2c_write_addr8_data8(0x83, 0x01)) {
 8002a94:	2101      	movs	r1, #1
 8002a96:	2083      	movs	r0, #131	@ 0x83
 8002a98:	f7ff fdf4 	bl	8002684 <i2c_write_addr8_data8>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f083 0301 	eor.w	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <read_strobe+0x68>
        return false;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e000      	b.n	8002aae <read_strobe+0x6a>
    }
    return true;
 8002aac:	2301      	movs	r3, #1
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <get_spad_info_from_nvm>:
 * or only non-aperture SPADs. The number of SPADs to enable and which type
 * are also saved during the calibration step at ST factory and can be retrieved
 * from NVM.
 */
static bool get_spad_info_from_nvm(uint8_t *spad_count, uint8_t *spad_type, uint8_t good_spad_map[6])
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
    bool success = false;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]
    uint8_t tmp_data8 = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75bb      	strb	r3, [r7, #22]
    uint32_t tmp_data32 = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]

    /* Setup to read from NVM */
    success  = i2c_write_addr8_data8(0x80, 0x01);
 8002ace:	2101      	movs	r1, #1
 8002ad0:	2080      	movs	r0, #128	@ 0x80
 8002ad2:	f7ff fdd7 	bl	8002684 <i2c_write_addr8_data8>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8002ada:	2101      	movs	r1, #1
 8002adc:	20ff      	movs	r0, #255	@ 0xff
 8002ade:	f7ff fdd1 	bl	8002684 <i2c_write_addr8_data8>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002af4:	2100      	movs	r1, #0
 8002af6:	2000      	movs	r0, #0
 8002af8:	f7ff fdc4 	bl	8002684 <i2c_write_addr8_data8>
 8002afc:	4603      	mov	r3, r0
 8002afe:	461a      	mov	r2, r3
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x06);
 8002b0e:	2106      	movs	r1, #6
 8002b10:	20ff      	movs	r0, #255	@ 0xff
 8002b12:	f7ff fdb7 	bl	8002684 <i2c_write_addr8_data8>
 8002b16:	4603      	mov	r3, r0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf14      	ite	ne
 8002b22:	2301      	movne	r3, #1
 8002b24:	2300      	moveq	r3, #0
 8002b26:	75fb      	strb	r3, [r7, #23]
    success &= i2c_read_addr8_data8(0x83, &tmp_data8);
 8002b28:	f107 0316 	add.w	r3, r7, #22
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	2083      	movs	r0, #131	@ 0x83
 8002b30:	f7ff fd68 	bl	8002604 <i2c_read_addr8_data8>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x83, tmp_data8 | 0x04);
 8002b46:	7dbb      	ldrb	r3, [r7, #22]
 8002b48:	f043 0304 	orr.w	r3, r3, #4
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	4619      	mov	r1, r3
 8002b50:	2083      	movs	r0, #131	@ 0x83
 8002b52:	f7ff fd97 	bl	8002684 <i2c_write_addr8_data8>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bf14      	ite	ne
 8002b62:	2301      	movne	r3, #1
 8002b64:	2300      	moveq	r3, #0
 8002b66:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0xFF, 0x07);
 8002b68:	2107      	movs	r1, #7
 8002b6a:	20ff      	movs	r0, #255	@ 0xff
 8002b6c:	f7ff fd8a 	bl	8002684 <i2c_write_addr8_data8>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	7dfb      	ldrb	r3, [r7, #23]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x81, 0x01);
 8002b82:	2101      	movs	r1, #1
 8002b84:	2081      	movs	r0, #129	@ 0x81
 8002b86:	f7ff fd7d 	bl	8002684 <i2c_write_addr8_data8>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	75fb      	strb	r3, [r7, #23]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	2080      	movs	r0, #128	@ 0x80
 8002ba0:	f7ff fd70 	bl	8002684 <i2c_write_addr8_data8>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	f083 0301 	eor.w	r3, r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <get_spad_info_from_nvm+0x110>
      return false;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e0c1      	b.n	8002d4a <get_spad_info_from_nvm+0x294>
    }

    /* Get the SPAD count and type */
    success &= i2c_write_addr8_data8(0x94, 0x6b);
 8002bc6:	216b      	movs	r1, #107	@ 0x6b
 8002bc8:	2094      	movs	r0, #148	@ 0x94
 8002bca:	f7ff fd5b 	bl	8002684 <i2c_write_addr8_data8>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	7dfb      	ldrb	r3, [r7, #23]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bf14      	ite	ne
 8002bda:	2301      	movne	r3, #1
 8002bdc:	2300      	moveq	r3, #0
 8002bde:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	f083 0301 	eor.w	r3, r3, #1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <get_spad_info_from_nvm+0x13a>
        return false;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e0ac      	b.n	8002d4a <get_spad_info_from_nvm+0x294>
    }
    if (!read_strobe()) {
 8002bf0:	f7ff ff28 	bl	8002a44 <read_strobe>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f083 0301 	eor.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <get_spad_info_from_nvm+0x14e>
        return false;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e0a2      	b.n	8002d4a <get_spad_info_from_nvm+0x294>
    }
    success &= i2c_read_addr8_data32(0x90, &tmp_data32);
 8002c04:	f107 0310 	add.w	r3, r7, #16
 8002c08:	4619      	mov	r1, r3
 8002c0a:	2090      	movs	r0, #144	@ 0x90
 8002c0c:	f7ff fd6a 	bl	80026e4 <i2c_read_addr8_data32>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	75fb      	strb	r3, [r7, #23]
    if (!success) {
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	f083 0301 	eor.w	r3, r3, #1
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <get_spad_info_from_nvm+0x17c>
        return false;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e08b      	b.n	8002d4a <get_spad_info_from_nvm+0x294>
    }
    *spad_count = (tmp_data32 >> 8) & 0x7f;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	701a      	strb	r2, [r3, #0]
    *spad_type = (tmp_data32 >> 15) & 0x01;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	0bdb      	lsrs	r3, r3, #15
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	701a      	strb	r2, [r3, #0]
    good_spad_map[5] = (uint8_t)((tmp_data32 >> 16) & 0xFF);

#endif

    /* Restore after reading from NVM */
    success &=i2c_write_addr8_data8(0x81, 0x00);
 8002c52:	2100      	movs	r1, #0
 8002c54:	2081      	movs	r0, #129	@ 0x81
 8002c56:	f7ff fd15 	bl	8002684 <i2c_write_addr8_data8>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf14      	ite	ne
 8002c66:	2301      	movne	r3, #1
 8002c68:	2300      	moveq	r3, #0
 8002c6a:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x06);
 8002c6c:	2106      	movs	r1, #6
 8002c6e:	20ff      	movs	r0, #255	@ 0xff
 8002c70:	f7ff fd08 	bl	8002684 <i2c_write_addr8_data8>
 8002c74:	4603      	mov	r3, r0
 8002c76:	461a      	mov	r2, r3
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]
    success &=i2c_read_addr8_data8(0x83, &tmp_data8);
 8002c86:	f107 0316 	add.w	r3, r7, #22
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	2083      	movs	r0, #131	@ 0x83
 8002c8e:	f7ff fcb9 	bl	8002604 <i2c_read_addr8_data8>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x83, tmp_data8 & 0xfb);
 8002ca4:	7dbb      	ldrb	r3, [r7, #22]
 8002ca6:	f023 0304 	bic.w	r3, r3, #4
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	4619      	mov	r1, r3
 8002cae:	2083      	movs	r0, #131	@ 0x83
 8002cb0:	f7ff fce8 	bl	8002684 <i2c_write_addr8_data8>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf14      	ite	ne
 8002cc0:	2301      	movne	r3, #1
 8002cc2:	2300      	moveq	r3, #0
 8002cc4:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x01);
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	20ff      	movs	r0, #255	@ 0xff
 8002cca:	f7ff fcdb 	bl	8002684 <i2c_write_addr8_data8>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	7dfb      	ldrb	r3, [r7, #23]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x00, 0x01);
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7ff fcce 	bl	8002684 <i2c_write_addr8_data8>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0xFF, 0x00);
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	20ff      	movs	r0, #255	@ 0xff
 8002cfe:	f7ff fcc1 	bl	8002684 <i2c_write_addr8_data8>
 8002d02:	4603      	mov	r3, r0
 8002d04:	461a      	mov	r2, r3
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf14      	ite	ne
 8002d0e:	2301      	movne	r3, #1
 8002d10:	2300      	moveq	r3, #0
 8002d12:	75fb      	strb	r3, [r7, #23]
    success &=i2c_write_addr8_data8(0x80, 0x00);
 8002d14:	2100      	movs	r1, #0
 8002d16:	2080      	movs	r0, #128	@ 0x80
 8002d18:	f7ff fcb4 	bl	8002684 <i2c_write_addr8_data8>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf14      	ite	ne
 8002d28:	2301      	movne	r3, #1
 8002d2a:	2300      	moveq	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]

    /* When we haven't configured the SPAD map yet, the SPAD map register actually
     * contains the good SPAD map, so we can retrieve it straight from this register
     * instead of reading it from the NVM. */
    if (!i2c_read_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, good_spad_map, 6)) {
 8002d2e:	2206      	movs	r2, #6
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	20b0      	movs	r0, #176	@ 0xb0
 8002d34:	f7ff fd86 	bl	8002844 <i2c_read_addr8_bytes>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f083 0301 	eor.w	r3, r3, #1
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <get_spad_info_from_nvm+0x292>
        return false;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <get_spad_info_from_nvm+0x294>
    }
    return success;
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <set_spads_from_nvm>:
 * Sets the SPADs according to the value saved to NVM by ST during production. Assuming
 * similar conditions (e.g. no cover glass), this should give reasonable readings and we
 * can avoid running ref spad management (tedious code).
 */
static bool set_spads_from_nvm()
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b08c      	sub	sp, #48	@ 0x30
 8002d56:	af00      	add	r7, sp, #0
    uint8_t spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 8002d58:	f107 0310 	add.w	r3, r7, #16
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	809a      	strh	r2, [r3, #4]
    uint8_t good_spad_map[SPAD_MAP_ROW_COUNT] = { 0 };
 8002d62:	f107 0308 	add.w	r3, r7, #8
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	809a      	strh	r2, [r3, #4]
    uint8_t spads_enabled_count = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t spads_to_enable_count = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	71fb      	strb	r3, [r7, #7]
    uint8_t spad_type = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	71bb      	strb	r3, [r7, #6]
    volatile uint32_t total_val = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	603b      	str	r3, [r7, #0]

    if (!get_spad_info_from_nvm(&spads_to_enable_count, &spad_type, good_spad_map)) {
 8002d7e:	f107 0208 	add.w	r2, r7, #8
 8002d82:	1db9      	adds	r1, r7, #6
 8002d84:	1dfb      	adds	r3, r7, #7
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fe95 	bl	8002ab6 <get_spad_info_from_nvm>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f083 0301 	eor.w	r3, r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <set_spads_from_nvm+0x4a>
        return false;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e0c7      	b.n	8002f2c <set_spads_from_nvm+0x1da>
    }

    for (int i = 0; i < 6; i++) {
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002da0:	e00b      	b.n	8002dba <set_spads_from_nvm+0x68>
        total_val += good_spad_map[i];
 8002da2:	f107 0208 	add.w	r2, r7, #8
 8002da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da8:	4413      	add	r3, r2
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	4413      	add	r3, r2
 8002db2:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 6; i++) {
 8002db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db6:	3301      	adds	r3, #1
 8002db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	ddf0      	ble.n	8002da2 <set_spads_from_nvm+0x50>
    }

    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	20ff      	movs	r0, #255	@ 0xff
 8002dc4:	f7ff fc5e 	bl	8002684 <i2c_write_addr8_data8>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8002dcc:	2100      	movs	r1, #0
 8002dce:	204f      	movs	r0, #79	@ 0x4f
 8002dd0:	f7ff fc58 	bl	8002684 <i2c_write_addr8_data8>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	7ffb      	ldrb	r3, [r7, #31]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8002de6:	212c      	movs	r1, #44	@ 0x2c
 8002de8:	204e      	movs	r0, #78	@ 0x4e
 8002dea:	f7ff fc4b 	bl	8002684 <i2c_write_addr8_data8>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461a      	mov	r2, r3
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	bf14      	ite	ne
 8002dfa:	2301      	movne	r3, #1
 8002dfc:	2300      	moveq	r3, #0
 8002dfe:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002e00:	2100      	movs	r1, #0
 8002e02:	20ff      	movs	r0, #255	@ 0xff
 8002e04:	f7ff fc3e 	bl	8002684 <i2c_write_addr8_data8>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	7ffb      	ldrb	r3, [r7, #31]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	77fb      	strb	r3, [r7, #31]
    success &= i2c_write_addr8_data8(REG_GLOBAL_CONFIG_REF_EN_START_SELECT, SPAD_START_SELECT);
 8002e1a:	21b4      	movs	r1, #180	@ 0xb4
 8002e1c:	20b6      	movs	r0, #182	@ 0xb6
 8002e1e:	f7ff fc31 	bl	8002684 <i2c_write_addr8_data8>
 8002e22:	4603      	mov	r3, r0
 8002e24:	461a      	mov	r2, r3
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf14      	ite	ne
 8002e2e:	2301      	movne	r3, #1
 8002e30:	2300      	moveq	r3, #0
 8002e32:	77fb      	strb	r3, [r7, #31]
    if (!success) {
 8002e34:	7ffb      	ldrb	r3, [r7, #31]
 8002e36:	f083 0301 	eor.w	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <set_spads_from_nvm+0xf2>
        return false;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e073      	b.n	8002f2c <set_spads_from_nvm+0x1da>
    }

    uint8_t offset = (spad_type == SPAD_TYPE_APERTURE) ? SPAD_APERTURE_START_INDEX : 0;
 8002e44:	79bb      	ldrb	r3, [r7, #6]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <set_spads_from_nvm+0xfc>
 8002e4a:	230c      	movs	r3, #12
 8002e4c:	e000      	b.n	8002e50 <set_spads_from_nvm+0xfe>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	77bb      	strb	r3, [r7, #30]

    /* Create a new SPAD array by selecting a subset of the SPADs suggested by the good SPAD map.
     * The subset should only have the number of type enabled as suggested by the reading from
     * the NVM (spads_to_enable_count and spad_type). */
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e56:	e04d      	b.n	8002ef4 <set_spads_from_nvm+0x1a2>
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 8002e58:	2300      	movs	r3, #0
 8002e5a:	623b      	str	r3, [r7, #32]
 8002e5c:	e03d      	b.n	8002eda <set_spads_from_nvm+0x188>
            int index = (row * SPAD_ROW_SIZE) + column;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	6a3a      	ldr	r2, [r7, #32]
 8002e64:	4413      	add	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
            if (index >= SPAD_MAX_COUNT) {
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b2b      	cmp	r3, #43	@ 0x2b
 8002e6c:	dd01      	ble.n	8002e72 <set_spads_from_nvm+0x120>
                return false;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e05c      	b.n	8002f2c <set_spads_from_nvm+0x1da>
            }
            if (spads_enabled_count == spads_to_enable_count) {
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d032      	beq.n	8002ee2 <set_spads_from_nvm+0x190>
                /* We are done */
                break;
            }
            if (index < offset) {
 8002e7c:	7fbb      	ldrb	r3, [r7, #30]
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	db26      	blt.n	8002ed2 <set_spads_from_nvm+0x180>
                continue;
            }
            if ((good_spad_map[row] >> column) & 0x1) {
 8002e84:	f107 0208 	add.w	r2, r7, #8
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	fa42 f303 	asr.w	r3, r2, r3
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01a      	beq.n	8002ed4 <set_spads_from_nvm+0x182>
                spad_map[row] |= (1 << column);
 8002e9e:	f107 0210 	add.w	r2, r7, #16
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	4413      	add	r3, r2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b25a      	sxtb	r2, r3
 8002eaa:	2101      	movs	r1, #1
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	b25b      	sxtb	r3, r3
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	b25b      	sxtb	r3, r3
 8002eb8:	b2d9      	uxtb	r1, r3
 8002eba:	f107 0210 	add.w	r2, r7, #16
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	4413      	add	r3, r2
 8002ec2:	460a      	mov	r2, r1
 8002ec4:	701a      	strb	r2, [r3, #0]
                spads_enabled_count++;
 8002ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002ed0:	e000      	b.n	8002ed4 <set_spads_from_nvm+0x182>
                continue;
 8002ed2:	bf00      	nop
        for (int column = 0; column < SPAD_ROW_SIZE; column++) {
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	623b      	str	r3, [r7, #32]
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	2b07      	cmp	r3, #7
 8002ede:	ddbe      	ble.n	8002e5e <set_spads_from_nvm+0x10c>
 8002ee0:	e000      	b.n	8002ee4 <set_spads_from_nvm+0x192>
                break;
 8002ee2:	bf00      	nop
            }
        }
        if (spads_enabled_count == spads_to_enable_count) {
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d006      	beq.n	8002efc <set_spads_from_nvm+0x1aa>
    for (int row = 0; row < SPAD_MAP_ROW_COUNT; row++) {
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	2b05      	cmp	r3, #5
 8002ef8:	ddae      	ble.n	8002e58 <set_spads_from_nvm+0x106>
 8002efa:	e000      	b.n	8002efe <set_spads_from_nvm+0x1ac>
            /* To avoid looping unnecessarily when we are already done. */
            break;
 8002efc:	bf00      	nop
        }
    }

    if (spads_enabled_count != spads_to_enable_count) {
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d001      	beq.n	8002f0c <set_spads_from_nvm+0x1ba>
        return false;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e00f      	b.n	8002f2c <set_spads_from_nvm+0x1da>
    }

    /* Write the new SPAD configuration */
    if (!i2c_write_addr8_bytes(REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, spad_map, SPAD_MAP_ROW_COUNT)) {
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	2206      	movs	r2, #6
 8002f12:	4619      	mov	r1, r3
 8002f14:	20b0      	movs	r0, #176	@ 0xb0
 8002f16:	f7ff fc33 	bl	8002780 <i2c_write_addr8_bytes>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f083 0301 	eor.w	r3, r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <set_spads_from_nvm+0x1d8>
        return false;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <set_spads_from_nvm+0x1da>
    }

    return true;
 8002f2a:	2301      	movs	r3, #1
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3730      	adds	r7, #48	@ 0x30
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <load_default_tuning_settings>:

/**
 * Load tuning settings (same as default tuning settings provided by ST api code)
 */
static bool load_default_tuning_settings()
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
    bool success = i2c_write_addr8_data8(0xFF, 0x01);
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	20ff      	movs	r0, #255	@ 0xff
 8002f3e:	f7ff fba1 	bl	8002684 <i2c_write_addr8_data8>
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x00);
 8002f46:	2100      	movs	r1, #0
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f7ff fb9b 	bl	8002684 <i2c_write_addr8_data8>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8002f60:	2100      	movs	r1, #0
 8002f62:	20ff      	movs	r0, #255	@ 0xff
 8002f64:	f7ff fb8e 	bl	8002684 <i2c_write_addr8_data8>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf14      	ite	ne
 8002f74:	2301      	movne	r3, #1
 8002f76:	2300      	moveq	r3, #0
 8002f78:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x09, 0x00);
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	2009      	movs	r0, #9
 8002f7e:	f7ff fb81 	bl	8002684 <i2c_write_addr8_data8>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bf14      	ite	ne
 8002f8e:	2301      	movne	r3, #1
 8002f90:	2300      	moveq	r3, #0
 8002f92:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x10, 0x00);
 8002f94:	2100      	movs	r1, #0
 8002f96:	2010      	movs	r0, #16
 8002f98:	f7ff fb74 	bl	8002684 <i2c_write_addr8_data8>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x11, 0x00);
 8002fae:	2100      	movs	r1, #0
 8002fb0:	2011      	movs	r0, #17
 8002fb2:	f7ff fb67 	bl	8002684 <i2c_write_addr8_data8>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf14      	ite	ne
 8002fc2:	2301      	movne	r3, #1
 8002fc4:	2300      	moveq	r3, #0
 8002fc6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x24, 0x01);
 8002fc8:	2101      	movs	r1, #1
 8002fca:	2024      	movs	r0, #36	@ 0x24
 8002fcc:	f7ff fb5a 	bl	8002684 <i2c_write_addr8_data8>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf14      	ite	ne
 8002fdc:	2301      	movne	r3, #1
 8002fde:	2300      	moveq	r3, #0
 8002fe0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x25, 0xFF);
 8002fe2:	21ff      	movs	r1, #255	@ 0xff
 8002fe4:	2025      	movs	r0, #37	@ 0x25
 8002fe6:	f7ff fb4d 	bl	8002684 <i2c_write_addr8_data8>
 8002fea:	4603      	mov	r3, r0
 8002fec:	461a      	mov	r2, r3
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf14      	ite	ne
 8002ff6:	2301      	movne	r3, #1
 8002ff8:	2300      	moveq	r3, #0
 8002ffa:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x75, 0x00);
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	2075      	movs	r0, #117	@ 0x75
 8003000:	f7ff fb40 	bl	8002684 <i2c_write_addr8_data8>
 8003004:	4603      	mov	r3, r0
 8003006:	461a      	mov	r2, r3
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf14      	ite	ne
 8003010:	2301      	movne	r3, #1
 8003012:	2300      	moveq	r3, #0
 8003014:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003016:	2101      	movs	r1, #1
 8003018:	20ff      	movs	r0, #255	@ 0xff
 800301a:	f7ff fb33 	bl	8002684 <i2c_write_addr8_data8>
 800301e:	4603      	mov	r3, r0
 8003020:	461a      	mov	r2, r3
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	bf14      	ite	ne
 800302a:	2301      	movne	r3, #1
 800302c:	2300      	moveq	r3, #0
 800302e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4E, 0x2C);
 8003030:	212c      	movs	r1, #44	@ 0x2c
 8003032:	204e      	movs	r0, #78	@ 0x4e
 8003034:	f7ff fb26 	bl	8002684 <i2c_write_addr8_data8>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf14      	ite	ne
 8003044:	2301      	movne	r3, #1
 8003046:	2300      	moveq	r3, #0
 8003048:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x00);
 800304a:	2100      	movs	r1, #0
 800304c:	2048      	movs	r0, #72	@ 0x48
 800304e:	f7ff fb19 	bl	8002684 <i2c_write_addr8_data8>
 8003052:	4603      	mov	r3, r0
 8003054:	461a      	mov	r2, r3
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	4013      	ands	r3, r2
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x20);
 8003064:	2120      	movs	r1, #32
 8003066:	2030      	movs	r0, #48	@ 0x30
 8003068:	f7ff fb0c 	bl	8002684 <i2c_write_addr8_data8>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 800307e:	2100      	movs	r1, #0
 8003080:	20ff      	movs	r0, #255	@ 0xff
 8003082:	f7ff faff 	bl	8002684 <i2c_write_addr8_data8>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x30, 0x09);
 8003098:	2109      	movs	r1, #9
 800309a:	2030      	movs	r0, #48	@ 0x30
 800309c:	f7ff faf2 	bl	8002684 <i2c_write_addr8_data8>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x54, 0x00);
 80030b2:	2100      	movs	r1, #0
 80030b4:	2054      	movs	r0, #84	@ 0x54
 80030b6:	f7ff fae5 	bl	8002684 <i2c_write_addr8_data8>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 80030cc:	2104      	movs	r1, #4
 80030ce:	2031      	movs	r0, #49	@ 0x31
 80030d0:	f7ff fad8 	bl	8002684 <i2c_write_addr8_data8>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x32, 0x03);
 80030e6:	2103      	movs	r1, #3
 80030e8:	2032      	movs	r0, #50	@ 0x32
 80030ea:	f7ff facb 	bl	8002684 <i2c_write_addr8_data8>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bf14      	ite	ne
 80030fa:	2301      	movne	r3, #1
 80030fc:	2300      	moveq	r3, #0
 80030fe:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x83);
 8003100:	2183      	movs	r1, #131	@ 0x83
 8003102:	2040      	movs	r0, #64	@ 0x40
 8003104:	f7ff fabe 	bl	8002684 <i2c_write_addr8_data8>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf14      	ite	ne
 8003114:	2301      	movne	r3, #1
 8003116:	2300      	moveq	r3, #0
 8003118:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x25);
 800311a:	2125      	movs	r1, #37	@ 0x25
 800311c:	2046      	movs	r0, #70	@ 0x46
 800311e:	f7ff fab1 	bl	8002684 <i2c_write_addr8_data8>
 8003122:	4603      	mov	r3, r0
 8003124:	461a      	mov	r2, r3
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	bf14      	ite	ne
 800312e:	2301      	movne	r3, #1
 8003130:	2300      	moveq	r3, #0
 8003132:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x60, 0x00);
 8003134:	2100      	movs	r1, #0
 8003136:	2060      	movs	r0, #96	@ 0x60
 8003138:	f7ff faa4 	bl	8002684 <i2c_write_addr8_data8>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf14      	ite	ne
 8003148:	2301      	movne	r3, #1
 800314a:	2300      	moveq	r3, #0
 800314c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x27, 0x00);
 800314e:	2100      	movs	r1, #0
 8003150:	2027      	movs	r0, #39	@ 0x27
 8003152:	f7ff fa97 	bl	8002684 <i2c_write_addr8_data8>
 8003156:	4603      	mov	r3, r0
 8003158:	461a      	mov	r2, r3
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	bf14      	ite	ne
 8003162:	2301      	movne	r3, #1
 8003164:	2300      	moveq	r3, #0
 8003166:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x50, 0x06);
 8003168:	2106      	movs	r1, #6
 800316a:	2050      	movs	r0, #80	@ 0x50
 800316c:	f7ff fa8a 	bl	8002684 <i2c_write_addr8_data8>
 8003170:	4603      	mov	r3, r0
 8003172:	461a      	mov	r2, r3
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf14      	ite	ne
 800317c:	2301      	movne	r3, #1
 800317e:	2300      	moveq	r3, #0
 8003180:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x51, 0x00);
 8003182:	2100      	movs	r1, #0
 8003184:	2051      	movs	r0, #81	@ 0x51
 8003186:	f7ff fa7d 	bl	8002684 <i2c_write_addr8_data8>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf14      	ite	ne
 8003196:	2301      	movne	r3, #1
 8003198:	2300      	moveq	r3, #0
 800319a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x52, 0x96);
 800319c:	2196      	movs	r1, #150	@ 0x96
 800319e:	2052      	movs	r0, #82	@ 0x52
 80031a0:	f7ff fa70 	bl	8002684 <i2c_write_addr8_data8>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461a      	mov	r2, r3
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x56, 0x08);
 80031b6:	2108      	movs	r1, #8
 80031b8:	2056      	movs	r0, #86	@ 0x56
 80031ba:	f7ff fa63 	bl	8002684 <i2c_write_addr8_data8>
 80031be:	4603      	mov	r3, r0
 80031c0:	461a      	mov	r2, r3
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x57, 0x30);
 80031d0:	2130      	movs	r1, #48	@ 0x30
 80031d2:	2057      	movs	r0, #87	@ 0x57
 80031d4:	f7ff fa56 	bl	8002684 <i2c_write_addr8_data8>
 80031d8:	4603      	mov	r3, r0
 80031da:	461a      	mov	r2, r3
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x61, 0x00);
 80031ea:	2100      	movs	r1, #0
 80031ec:	2061      	movs	r0, #97	@ 0x61
 80031ee:	f7ff fa49 	bl	8002684 <i2c_write_addr8_data8>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bf14      	ite	ne
 80031fe:	2301      	movne	r3, #1
 8003200:	2300      	moveq	r3, #0
 8003202:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x62, 0x00);
 8003204:	2100      	movs	r1, #0
 8003206:	2062      	movs	r0, #98	@ 0x62
 8003208:	f7ff fa3c 	bl	8002684 <i2c_write_addr8_data8>
 800320c:	4603      	mov	r3, r0
 800320e:	461a      	mov	r2, r3
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x64, 0x00);
 800321e:	2100      	movs	r1, #0
 8003220:	2064      	movs	r0, #100	@ 0x64
 8003222:	f7ff fa2f 	bl	8002684 <i2c_write_addr8_data8>
 8003226:	4603      	mov	r3, r0
 8003228:	461a      	mov	r2, r3
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	bf14      	ite	ne
 8003232:	2301      	movne	r3, #1
 8003234:	2300      	moveq	r3, #0
 8003236:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x65, 0x00);
 8003238:	2100      	movs	r1, #0
 800323a:	2065      	movs	r0, #101	@ 0x65
 800323c:	f7ff fa22 	bl	8002684 <i2c_write_addr8_data8>
 8003240:	4603      	mov	r3, r0
 8003242:	461a      	mov	r2, r3
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	4013      	ands	r3, r2
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x66, 0xA0);
 8003252:	21a0      	movs	r1, #160	@ 0xa0
 8003254:	2066      	movs	r0, #102	@ 0x66
 8003256:	f7ff fa15 	bl	8002684 <i2c_write_addr8_data8>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	bf14      	ite	ne
 8003266:	2301      	movne	r3, #1
 8003268:	2300      	moveq	r3, #0
 800326a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 800326c:	2101      	movs	r1, #1
 800326e:	20ff      	movs	r0, #255	@ 0xff
 8003270:	f7ff fa08 	bl	8002684 <i2c_write_addr8_data8>
 8003274:	4603      	mov	r3, r0
 8003276:	461a      	mov	r2, r3
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf14      	ite	ne
 8003280:	2301      	movne	r3, #1
 8003282:	2300      	moveq	r3, #0
 8003284:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x22, 0x32);
 8003286:	2132      	movs	r1, #50	@ 0x32
 8003288:	2022      	movs	r0, #34	@ 0x22
 800328a:	f7ff f9fb 	bl	8002684 <i2c_write_addr8_data8>
 800328e:	4603      	mov	r3, r0
 8003290:	461a      	mov	r2, r3
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x14);
 80032a0:	2114      	movs	r1, #20
 80032a2:	2047      	movs	r0, #71	@ 0x47
 80032a4:	f7ff f9ee 	bl	8002684 <i2c_write_addr8_data8>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x49, 0xFF);
 80032ba:	21ff      	movs	r1, #255	@ 0xff
 80032bc:	2049      	movs	r0, #73	@ 0x49
 80032be:	f7ff f9e1 	bl	8002684 <i2c_write_addr8_data8>
 80032c2:	4603      	mov	r3, r0
 80032c4:	461a      	mov	r2, r3
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	bf14      	ite	ne
 80032ce:	2301      	movne	r3, #1
 80032d0:	2300      	moveq	r3, #0
 80032d2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4A, 0x00);
 80032d4:	2100      	movs	r1, #0
 80032d6:	204a      	movs	r0, #74	@ 0x4a
 80032d8:	f7ff f9d4 	bl	8002684 <i2c_write_addr8_data8>
 80032dc:	4603      	mov	r3, r0
 80032de:	461a      	mov	r2, r3
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 80032ee:	2100      	movs	r1, #0
 80032f0:	20ff      	movs	r0, #255	@ 0xff
 80032f2:	f7ff f9c7 	bl	8002684 <i2c_write_addr8_data8>
 80032f6:	4603      	mov	r3, r0
 80032f8:	461a      	mov	r2, r3
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	bf14      	ite	ne
 8003302:	2301      	movne	r3, #1
 8003304:	2300      	moveq	r3, #0
 8003306:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7A, 0x0A);
 8003308:	210a      	movs	r1, #10
 800330a:	207a      	movs	r0, #122	@ 0x7a
 800330c:	f7ff f9ba 	bl	8002684 <i2c_write_addr8_data8>
 8003310:	4603      	mov	r3, r0
 8003312:	461a      	mov	r2, r3
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x7B, 0x00);
 8003322:	2100      	movs	r1, #0
 8003324:	207b      	movs	r0, #123	@ 0x7b
 8003326:	f7ff f9ad 	bl	8002684 <i2c_write_addr8_data8>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf14      	ite	ne
 8003336:	2301      	movne	r3, #1
 8003338:	2300      	moveq	r3, #0
 800333a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x78, 0x21);
 800333c:	2121      	movs	r1, #33	@ 0x21
 800333e:	2078      	movs	r0, #120	@ 0x78
 8003340:	f7ff f9a0 	bl	8002684 <i2c_write_addr8_data8>
 8003344:	4603      	mov	r3, r0
 8003346:	461a      	mov	r2, r3
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003356:	2101      	movs	r1, #1
 8003358:	20ff      	movs	r0, #255	@ 0xff
 800335a:	f7ff f993 	bl	8002684 <i2c_write_addr8_data8>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	bf14      	ite	ne
 800336a:	2301      	movne	r3, #1
 800336c:	2300      	moveq	r3, #0
 800336e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x23, 0x34);
 8003370:	2134      	movs	r1, #52	@ 0x34
 8003372:	2023      	movs	r0, #35	@ 0x23
 8003374:	f7ff f986 	bl	8002684 <i2c_write_addr8_data8>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x42, 0x00);
 800338a:	2100      	movs	r1, #0
 800338c:	2042      	movs	r0, #66	@ 0x42
 800338e:	f7ff f979 	bl	8002684 <i2c_write_addr8_data8>
 8003392:	4603      	mov	r3, r0
 8003394:	461a      	mov	r2, r3
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf14      	ite	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	2300      	moveq	r3, #0
 80033a2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0xFF);
 80033a4:	21ff      	movs	r1, #255	@ 0xff
 80033a6:	2044      	movs	r0, #68	@ 0x44
 80033a8:	f7ff f96c 	bl	8002684 <i2c_write_addr8_data8>
 80033ac:	4603      	mov	r3, r0
 80033ae:	461a      	mov	r2, r3
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf14      	ite	ne
 80033b8:	2301      	movne	r3, #1
 80033ba:	2300      	moveq	r3, #0
 80033bc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x26);
 80033be:	2126      	movs	r1, #38	@ 0x26
 80033c0:	2045      	movs	r0, #69	@ 0x45
 80033c2:	f7ff f95f 	bl	8002684 <i2c_write_addr8_data8>
 80033c6:	4603      	mov	r3, r0
 80033c8:	461a      	mov	r2, r3
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	bf14      	ite	ne
 80033d2:	2301      	movne	r3, #1
 80033d4:	2300      	moveq	r3, #0
 80033d6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x46, 0x05);
 80033d8:	2105      	movs	r1, #5
 80033da:	2046      	movs	r0, #70	@ 0x46
 80033dc:	f7ff f952 	bl	8002684 <i2c_write_addr8_data8>
 80033e0:	4603      	mov	r3, r0
 80033e2:	461a      	mov	r2, r3
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf14      	ite	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	2300      	moveq	r3, #0
 80033f0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x40, 0x40);
 80033f2:	2140      	movs	r1, #64	@ 0x40
 80033f4:	2040      	movs	r0, #64	@ 0x40
 80033f6:	f7ff f945 	bl	8002684 <i2c_write_addr8_data8>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461a      	mov	r2, r3
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf14      	ite	ne
 8003406:	2301      	movne	r3, #1
 8003408:	2300      	moveq	r3, #0
 800340a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0E, 0x06);
 800340c:	2106      	movs	r1, #6
 800340e:	200e      	movs	r0, #14
 8003410:	f7ff f938 	bl	8002684 <i2c_write_addr8_data8>
 8003414:	4603      	mov	r3, r0
 8003416:	461a      	mov	r2, r3
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf14      	ite	ne
 8003420:	2301      	movne	r3, #1
 8003422:	2300      	moveq	r3, #0
 8003424:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x20, 0x1A);
 8003426:	211a      	movs	r1, #26
 8003428:	2020      	movs	r0, #32
 800342a:	f7ff f92b 	bl	8002684 <i2c_write_addr8_data8>
 800342e:	4603      	mov	r3, r0
 8003430:	461a      	mov	r2, r3
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	4013      	ands	r3, r2
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x43, 0x40);
 8003440:	2140      	movs	r1, #64	@ 0x40
 8003442:	2043      	movs	r0, #67	@ 0x43
 8003444:	f7ff f91e 	bl	8002684 <i2c_write_addr8_data8>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf14      	ite	ne
 8003454:	2301      	movne	r3, #1
 8003456:	2300      	moveq	r3, #0
 8003458:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 800345a:	2100      	movs	r1, #0
 800345c:	20ff      	movs	r0, #255	@ 0xff
 800345e:	f7ff f911 	bl	8002684 <i2c_write_addr8_data8>
 8003462:	4603      	mov	r3, r0
 8003464:	461a      	mov	r2, r3
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	bf14      	ite	ne
 800346e:	2301      	movne	r3, #1
 8003470:	2300      	moveq	r3, #0
 8003472:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x34, 0x03);
 8003474:	2103      	movs	r1, #3
 8003476:	2034      	movs	r0, #52	@ 0x34
 8003478:	f7ff f904 	bl	8002684 <i2c_write_addr8_data8>
 800347c:	4603      	mov	r3, r0
 800347e:	461a      	mov	r2, r3
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x35, 0x44);
 800348e:	2144      	movs	r1, #68	@ 0x44
 8003490:	2035      	movs	r0, #53	@ 0x35
 8003492:	f7ff f8f7 	bl	8002684 <i2c_write_addr8_data8>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 80034a8:	2101      	movs	r1, #1
 80034aa:	20ff      	movs	r0, #255	@ 0xff
 80034ac:	f7ff f8ea 	bl	8002684 <i2c_write_addr8_data8>
 80034b0:	4603      	mov	r3, r0
 80034b2:	461a      	mov	r2, r3
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x31, 0x04);
 80034c2:	2104      	movs	r1, #4
 80034c4:	2031      	movs	r0, #49	@ 0x31
 80034c6:	f7ff f8dd 	bl	8002684 <i2c_write_addr8_data8>
 80034ca:	4603      	mov	r3, r0
 80034cc:	461a      	mov	r2, r3
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bf14      	ite	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	2300      	moveq	r3, #0
 80034da:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4B, 0x09);
 80034dc:	2109      	movs	r1, #9
 80034de:	204b      	movs	r0, #75	@ 0x4b
 80034e0:	f7ff f8d0 	bl	8002684 <i2c_write_addr8_data8>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4C, 0x05);
 80034f6:	2105      	movs	r1, #5
 80034f8:	204c      	movs	r0, #76	@ 0x4c
 80034fa:	f7ff f8c3 	bl	8002684 <i2c_write_addr8_data8>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf14      	ite	ne
 800350a:	2301      	movne	r3, #1
 800350c:	2300      	moveq	r3, #0
 800350e:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x4D, 0x04);
 8003510:	2104      	movs	r1, #4
 8003512:	204d      	movs	r0, #77	@ 0x4d
 8003514:	f7ff f8b6 	bl	8002684 <i2c_write_addr8_data8>
 8003518:	4603      	mov	r3, r0
 800351a:	461a      	mov	r2, r3
 800351c:	79fb      	ldrb	r3, [r7, #7]
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 800352a:	2100      	movs	r1, #0
 800352c:	20ff      	movs	r0, #255	@ 0xff
 800352e:	f7ff f8a9 	bl	8002684 <i2c_write_addr8_data8>
 8003532:	4603      	mov	r3, r0
 8003534:	461a      	mov	r2, r3
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf14      	ite	ne
 800353e:	2301      	movne	r3, #1
 8003540:	2300      	moveq	r3, #0
 8003542:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x44, 0x00);
 8003544:	2100      	movs	r1, #0
 8003546:	2044      	movs	r0, #68	@ 0x44
 8003548:	f7ff f89c 	bl	8002684 <i2c_write_addr8_data8>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	bf14      	ite	ne
 8003558:	2301      	movne	r3, #1
 800355a:	2300      	moveq	r3, #0
 800355c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x45, 0x20);
 800355e:	2120      	movs	r1, #32
 8003560:	2045      	movs	r0, #69	@ 0x45
 8003562:	f7ff f88f 	bl	8002684 <i2c_write_addr8_data8>
 8003566:	4603      	mov	r3, r0
 8003568:	461a      	mov	r2, r3
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	4013      	ands	r3, r2
 800356e:	2b00      	cmp	r3, #0
 8003570:	bf14      	ite	ne
 8003572:	2301      	movne	r3, #1
 8003574:	2300      	moveq	r3, #0
 8003576:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x47, 0x08);
 8003578:	2108      	movs	r1, #8
 800357a:	2047      	movs	r0, #71	@ 0x47
 800357c:	f7ff f882 	bl	8002684 <i2c_write_addr8_data8>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x48, 0x28);
 8003592:	2128      	movs	r1, #40	@ 0x28
 8003594:	2048      	movs	r0, #72	@ 0x48
 8003596:	f7ff f875 	bl	8002684 <i2c_write_addr8_data8>
 800359a:	4603      	mov	r3, r0
 800359c:	461a      	mov	r2, r3
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bf14      	ite	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	2300      	moveq	r3, #0
 80035aa:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x67, 0x00);
 80035ac:	2100      	movs	r1, #0
 80035ae:	2067      	movs	r0, #103	@ 0x67
 80035b0:	f7ff f868 	bl	8002684 <i2c_write_addr8_data8>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x70, 0x04);
 80035c6:	2104      	movs	r1, #4
 80035c8:	2070      	movs	r0, #112	@ 0x70
 80035ca:	f7ff f85b 	bl	8002684 <i2c_write_addr8_data8>
 80035ce:	4603      	mov	r3, r0
 80035d0:	461a      	mov	r2, r3
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf14      	ite	ne
 80035da:	2301      	movne	r3, #1
 80035dc:	2300      	moveq	r3, #0
 80035de:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x71, 0x01);
 80035e0:	2101      	movs	r1, #1
 80035e2:	2071      	movs	r0, #113	@ 0x71
 80035e4:	f7ff f84e 	bl	8002684 <i2c_write_addr8_data8>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x72, 0xFE);
 80035fa:	21fe      	movs	r1, #254	@ 0xfe
 80035fc:	2072      	movs	r0, #114	@ 0x72
 80035fe:	f7ff f841 	bl	8002684 <i2c_write_addr8_data8>
 8003602:	4603      	mov	r3, r0
 8003604:	461a      	mov	r2, r3
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	4013      	ands	r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	bf14      	ite	ne
 800360e:	2301      	movne	r3, #1
 8003610:	2300      	moveq	r3, #0
 8003612:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x76, 0x00);
 8003614:	2100      	movs	r1, #0
 8003616:	2076      	movs	r0, #118	@ 0x76
 8003618:	f7ff f834 	bl	8002684 <i2c_write_addr8_data8>
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf14      	ite	ne
 8003628:	2301      	movne	r3, #1
 800362a:	2300      	moveq	r3, #0
 800362c:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x77, 0x00);
 800362e:	2100      	movs	r1, #0
 8003630:	2077      	movs	r0, #119	@ 0x77
 8003632:	f7ff f827 	bl	8002684 <i2c_write_addr8_data8>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	bf14      	ite	ne
 8003642:	2301      	movne	r3, #1
 8003644:	2300      	moveq	r3, #0
 8003646:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 8003648:	2101      	movs	r1, #1
 800364a:	20ff      	movs	r0, #255	@ 0xff
 800364c:	f7ff f81a 	bl	8002684 <i2c_write_addr8_data8>
 8003650:	4603      	mov	r3, r0
 8003652:	461a      	mov	r2, r3
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x0D, 0x01);
 8003662:	2101      	movs	r1, #1
 8003664:	200d      	movs	r0, #13
 8003666:	f7ff f80d 	bl	8002684 <i2c_write_addr8_data8>
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	bf14      	ite	ne
 8003676:	2301      	movne	r3, #1
 8003678:	2300      	moveq	r3, #0
 800367a:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 800367c:	2100      	movs	r1, #0
 800367e:	20ff      	movs	r0, #255	@ 0xff
 8003680:	f7ff f800 	bl	8002684 <i2c_write_addr8_data8>
 8003684:	4603      	mov	r3, r0
 8003686:	461a      	mov	r2, r3
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x01);
 8003696:	2101      	movs	r1, #1
 8003698:	2080      	movs	r0, #128	@ 0x80
 800369a:	f7fe fff3 	bl	8002684 <i2c_write_addr8_data8>
 800369e:	4603      	mov	r3, r0
 80036a0:	461a      	mov	r2, r3
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x01, 0xF8);
 80036b0:	21f8      	movs	r1, #248	@ 0xf8
 80036b2:	2001      	movs	r0, #1
 80036b4:	f7fe ffe6 	bl	8002684 <i2c_write_addr8_data8>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x01);
 80036ca:	2101      	movs	r1, #1
 80036cc:	20ff      	movs	r0, #255	@ 0xff
 80036ce:	f7fe ffd9 	bl	8002684 <i2c_write_addr8_data8>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x8E, 0x01);
 80036e4:	2101      	movs	r1, #1
 80036e6:	208e      	movs	r0, #142	@ 0x8e
 80036e8:	f7fe ffcc 	bl	8002684 <i2c_write_addr8_data8>
 80036ec:	4603      	mov	r3, r0
 80036ee:	461a      	mov	r2, r3
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x00, 0x01);
 80036fe:	2101      	movs	r1, #1
 8003700:	2000      	movs	r0, #0
 8003702:	f7fe ffbf 	bl	8002684 <i2c_write_addr8_data8>
 8003706:	4603      	mov	r3, r0
 8003708:	461a      	mov	r2, r3
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	bf14      	ite	ne
 8003712:	2301      	movne	r3, #1
 8003714:	2300      	moveq	r3, #0
 8003716:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0xFF, 0x00);
 8003718:	2100      	movs	r1, #0
 800371a:	20ff      	movs	r0, #255	@ 0xff
 800371c:	f7fe ffb2 	bl	8002684 <i2c_write_addr8_data8>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf14      	ite	ne
 800372c:	2301      	movne	r3, #1
 800372e:	2300      	moveq	r3, #0
 8003730:	71fb      	strb	r3, [r7, #7]
    success &= i2c_write_addr8_data8(0x80, 0x00);
 8003732:	2100      	movs	r1, #0
 8003734:	2080      	movs	r0, #128	@ 0x80
 8003736:	f7fe ffa5 	bl	8002684 <i2c_write_addr8_data8>
 800373a:	4603      	mov	r3, r0
 800373c:	461a      	mov	r2, r3
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	bf14      	ite	ne
 8003746:	2301      	movne	r3, #1
 8003748:	2300      	moveq	r3, #0
 800374a:	71fb      	strb	r3, [r7, #7]
    return success;
 800374c:	79fb      	ldrb	r3, [r7, #7]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <configure_interrupt>:

static bool configure_interrupt()
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
    /* Interrupt on new sample ready */
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04)) {
 800375c:	2104      	movs	r1, #4
 800375e:	200a      	movs	r0, #10
 8003760:	f7fe ff90 	bl	8002684 <i2c_write_addr8_data8>
 8003764:	4603      	mov	r3, r0
 8003766:	f083 0301 	eor.w	r3, r3, #1
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <configure_interrupt+0x1e>
        return false;
 8003770:	2300      	movs	r3, #0
 8003772:	e02d      	b.n	80037d0 <configure_interrupt+0x7a>
    }

    /* Configure active low since the pin is pulled-up on most breakout boards */
    uint8_t gpio_hv_mux_active_high = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	71fb      	strb	r3, [r7, #7]
    if (!i2c_read_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, &gpio_hv_mux_active_high)) {
 8003778:	1dfb      	adds	r3, r7, #7
 800377a:	4619      	mov	r1, r3
 800377c:	2084      	movs	r0, #132	@ 0x84
 800377e:	f7fe ff41 	bl	8002604 <i2c_read_addr8_data8>
 8003782:	4603      	mov	r3, r0
 8003784:	f083 0301 	eor.w	r3, r3, #1
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <configure_interrupt+0x3c>
        return false;
 800378e:	2300      	movs	r3, #0
 8003790:	e01e      	b.n	80037d0 <configure_interrupt+0x7a>
    }
    gpio_hv_mux_active_high &= ~0x10;
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	f023 0310 	bic.w	r3, r3, #16
 8003798:	b2db      	uxtb	r3, r3
 800379a:	71fb      	strb	r3, [r7, #7]
    if (!i2c_write_addr8_data8(REG_GPIO_HV_MUX_ACTIVE_HIGH, gpio_hv_mux_active_high)) {
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	4619      	mov	r1, r3
 80037a0:	2084      	movs	r0, #132	@ 0x84
 80037a2:	f7fe ff6f 	bl	8002684 <i2c_write_addr8_data8>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f083 0301 	eor.w	r3, r3, #1
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <configure_interrupt+0x60>
        return false;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e00c      	b.n	80037d0 <configure_interrupt+0x7a>
    }

    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 80037b6:	2101      	movs	r1, #1
 80037b8:	200b      	movs	r0, #11
 80037ba:	f7fe ff63 	bl	8002684 <i2c_write_addr8_data8>
 80037be:	4603      	mov	r3, r0
 80037c0:	f083 0301 	eor.w	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <configure_interrupt+0x78>
        return false;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e000      	b.n	80037d0 <configure_interrupt+0x7a>
    }
    return true;
 80037ce:	2301      	movs	r3, #1
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <set_sequence_steps_enabled>:

/**
 * Enable (or disable) specific steps in the sequence
 */
static bool set_sequence_steps_enabled(uint8_t sequence_step)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
    return i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_step);
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	4619      	mov	r1, r3
 80037e6:	2001      	movs	r0, #1
 80037e8:	f7fe ff4c 	bl	8002684 <i2c_write_addr8_data8>
 80037ec:	4603      	mov	r3, r0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <static_init>:

/**
 * Basic device initialization
 */
static bool static_init()
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	af00      	add	r7, sp, #0
    if (!set_spads_from_nvm()) {
 80037fa:	f7ff faaa 	bl	8002d52 <set_spads_from_nvm>
 80037fe:	4603      	mov	r3, r0
 8003800:	f083 0301 	eor.w	r3, r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <static_init+0x18>
        return false;
 800380a:	2300      	movs	r3, #0
 800380c:	e01f      	b.n	800384e <static_init+0x58>
    }

    if (!load_default_tuning_settings()) {
 800380e:	f7ff fb91 	bl	8002f34 <load_default_tuning_settings>
 8003812:	4603      	mov	r3, r0
 8003814:	f083 0301 	eor.w	r3, r3, #1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <static_init+0x2c>
        return false;
 800381e:	2300      	movs	r3, #0
 8003820:	e015      	b.n	800384e <static_init+0x58>
    }

    if (!configure_interrupt()) {
 8003822:	f7ff ff98 	bl	8003756 <configure_interrupt>
 8003826:	4603      	mov	r3, r0
 8003828:	f083 0301 	eor.w	r3, r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <static_init+0x40>
        return false;
 8003832:	2300      	movs	r3, #0
 8003834:	e00b      	b.n	800384e <static_init+0x58>
    }

    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 8003836:	20e8      	movs	r0, #232	@ 0xe8
 8003838:	f7ff ffce 	bl	80037d8 <set_sequence_steps_enabled>
 800383c:	4603      	mov	r3, r0
 800383e:	f083 0301 	eor.w	r3, r3, #1
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <static_init+0x56>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <static_init+0x58>
    }

    return true;
 800384c:	2301      	movs	r3, #1
}
 800384e:	4618      	mov	r0, r3
 8003850:	bd80      	pop	{r7, pc}

08003852 <perform_single_ref_calibration>:

static bool perform_single_ref_calibration(calibration_type_t calib_type)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	4603      	mov	r3, r0
 800385a:	71fb      	strb	r3, [r7, #7]
    uint8_t sysrange_start = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	73fb      	strb	r3, [r7, #15]
    uint8_t sequence_config = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	73bb      	strb	r3, [r7, #14]
    switch (calib_type)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <perform_single_ref_calibration+0x1e>
 800386a:	2b01      	cmp	r3, #1
 800386c:	d005      	beq.n	800387a <perform_single_ref_calibration+0x28>
 800386e:	e009      	b.n	8003884 <perform_single_ref_calibration+0x32>
    {
    case CALIBRATION_TYPE_VHV:
        sequence_config = 0x01;
 8003870:	2301      	movs	r3, #1
 8003872:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x40;
 8003874:	2341      	movs	r3, #65	@ 0x41
 8003876:	73fb      	strb	r3, [r7, #15]
        break;
 8003878:	e004      	b.n	8003884 <perform_single_ref_calibration+0x32>
    case CALIBRATION_TYPE_PHASE:
        sequence_config = 0x02;
 800387a:	2302      	movs	r3, #2
 800387c:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x00;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
        break;
 8003882:	bf00      	nop
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_SEQUENCE_CONFIG, sequence_config)) {
 8003884:	7bbb      	ldrb	r3, [r7, #14]
 8003886:	4619      	mov	r1, r3
 8003888:	2001      	movs	r0, #1
 800388a:	f7fe fefb 	bl	8002684 <i2c_write_addr8_data8>
 800388e:	4603      	mov	r3, r0
 8003890:	f083 0301 	eor.w	r3, r3, #1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <perform_single_ref_calibration+0x4c>
        return false;
 800389a:	2300      	movs	r3, #0
 800389c:	e041      	b.n	8003922 <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, sysrange_start)) {
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	4619      	mov	r1, r3
 80038a2:	2000      	movs	r0, #0
 80038a4:	f7fe feee 	bl	8002684 <i2c_write_addr8_data8>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f083 0301 	eor.w	r3, r3, #1
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <perform_single_ref_calibration+0x66>
        return false;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e034      	b.n	8003922 <perform_single_ref_calibration+0xd0>
    }
    /* Wait for interrupt */
    uint8_t interrupt_status = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	733b      	strb	r3, [r7, #12]
    bool success = false;
 80038bc:	2300      	movs	r3, #0
 80038be:	737b      	strb	r3, [r7, #13]
    do {
        success = i2c_read_addr8_data8(REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
 80038c0:	f107 030c 	add.w	r3, r7, #12
 80038c4:	4619      	mov	r1, r3
 80038c6:	2013      	movs	r0, #19
 80038c8:	f7fe fe9c 	bl	8002604 <i2c_read_addr8_data8>
 80038cc:	4603      	mov	r3, r0
 80038ce:	737b      	strb	r3, [r7, #13]
    } while (success && ((interrupt_status & 0x07) == 0));
 80038d0:	7b7b      	ldrb	r3, [r7, #13]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <perform_single_ref_calibration+0x8e>
 80038d6:	7b3b      	ldrb	r3, [r7, #12]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ef      	beq.n	80038c0 <perform_single_ref_calibration+0x6e>
    if (!success) {
 80038e0:	7b7b      	ldrb	r3, [r7, #13]
 80038e2:	f083 0301 	eor.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <perform_single_ref_calibration+0x9e>
        return false;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e018      	b.n	8003922 <perform_single_ref_calibration+0xd0>
    }
    if (!i2c_write_addr8_data8(REG_SYSTEM_INTERRUPT_CLEAR, 0x01)) {
 80038f0:	2101      	movs	r1, #1
 80038f2:	200b      	movs	r0, #11
 80038f4:	f7fe fec6 	bl	8002684 <i2c_write_addr8_data8>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f083 0301 	eor.w	r3, r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <perform_single_ref_calibration+0xb6>
        return false;
 8003904:	2300      	movs	r3, #0
 8003906:	e00c      	b.n	8003922 <perform_single_ref_calibration+0xd0>
    }

    if (!i2c_write_addr8_data8(REG_SYSRANGE_START, 0x00)) {
 8003908:	2100      	movs	r1, #0
 800390a:	2000      	movs	r0, #0
 800390c:	f7fe feba 	bl	8002684 <i2c_write_addr8_data8>
 8003910:	4603      	mov	r3, r0
 8003912:	f083 0301 	eor.w	r3, r3, #1
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <perform_single_ref_calibration+0xce>
        return false;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <perform_single_ref_calibration+0xd0>
    }
    return true;
 8003920:	2301      	movs	r3, #1
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <perform_ref_calibration>:
/**
 * Temperature calibration needs to be run again if the temperature changes by
 * more than 8 degrees according to the datasheet.
 */
static bool perform_ref_calibration()
{
 800392a:	b580      	push	{r7, lr}
 800392c:	af00      	add	r7, sp, #0
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_VHV)) {
 800392e:	2000      	movs	r0, #0
 8003930:	f7ff ff8f 	bl	8003852 <perform_single_ref_calibration>
 8003934:	4603      	mov	r3, r0
 8003936:	f083 0301 	eor.w	r3, r3, #1
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <perform_ref_calibration+0x1a>
        return false;
 8003940:	2300      	movs	r3, #0
 8003942:	e016      	b.n	8003972 <perform_ref_calibration+0x48>
    }
    if (!perform_single_ref_calibration(CALIBRATION_TYPE_PHASE)) {
 8003944:	2001      	movs	r0, #1
 8003946:	f7ff ff84 	bl	8003852 <perform_single_ref_calibration>
 800394a:	4603      	mov	r3, r0
 800394c:	f083 0301 	eor.w	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <perform_ref_calibration+0x30>
        return false;
 8003956:	2300      	movs	r3, #0
 8003958:	e00b      	b.n	8003972 <perform_ref_calibration+0x48>
    }
    /* Restore sequence steps enabled */
    if (!set_sequence_steps_enabled(RANGE_SEQUENCE_STEP_DSS +
 800395a:	20e8      	movs	r0, #232	@ 0xe8
 800395c:	f7ff ff3c 	bl	80037d8 <set_sequence_steps_enabled>
 8003960:	4603      	mov	r3, r0
 8003962:	f083 0301 	eor.w	r3, r3, #1
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <perform_ref_calibration+0x46>
                                    RANGE_SEQUENCE_STEP_PRE_RANGE +
                                    RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
        return false;
 800396c:	2300      	movs	r3, #0
 800396e:	e000      	b.n	8003972 <perform_ref_calibration+0x48>
    }
    return true;
 8003970:	2301      	movs	r3, #1
}
 8003972:	4618      	mov	r0, r3
 8003974:	bd80      	pop	{r7, pc}

08003976 <configure_address>:

static bool configure_address(uint8_t addr)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	4603      	mov	r3, r0
 800397e:	71fb      	strb	r3, [r7, #7]
    /* 7-bit address */
    return i2c_write_addr8_data8(REG_SLAVE_DEVICE_ADDRESS, addr & 0x7F);
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003986:	b2db      	uxtb	r3, r3
 8003988:	4619      	mov	r1, r3
 800398a:	208a      	movs	r0, #138	@ 0x8a
 800398c:	f7fe fe7a 	bl	8002684 <i2c_write_addr8_data8>
 8003990:	4603      	mov	r3, r0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <set_hardware_standby>:

/**
 * Sets the sensor in hardware standby by flipping the XSHUT pin.
 */
static void set_hardware_standby(vl53l0x_idx_t idx, bool enable)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	460a      	mov	r2, r1
 80039a6:	71fb      	strb	r3, [r7, #7]
 80039a8:	4613      	mov	r3, r2
 80039aa:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOG, vl53l0x_infos[idx].xshut_gpio, enable ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	4a08      	ldr	r2, [pc, #32]	@ (80039d0 <set_hardware_standby+0x34>)
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	8859      	ldrh	r1, [r3, #2]
 80039b6:	79bb      	ldrb	r3, [r7, #6]
 80039b8:	f083 0301 	eor.w	r3, r3, #1
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	4804      	ldr	r0, [pc, #16]	@ (80039d4 <set_hardware_standby+0x38>)
 80039c2:	f003 f899 	bl	8006af8 <HAL_GPIO_WritePin>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	0802004c 	.word	0x0802004c
 80039d4:	58021800 	.word	0x58021800

080039d8 <configure_gpio>:
 * hardware standby after this function is called.
 *
 * NOTE: The pins are hard-coded to P1.0, P1.1, and P1.2.
 **/
static void configure_gpio()
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
    gpio_init();
    gpio_set_output(GPIO_XSHUT_FIRST, false);
    gpio_set_output(GPIO_XSHUT_SECOND, false);
    gpio_set_output(GPIO_XSHUT_THIRD, false);
    */
    HAL_GPIO_WritePin(GPIOG, xshut1_Pin, GPIO_PIN_RESET);
 80039dc:	2200      	movs	r2, #0
 80039de:	2120      	movs	r1, #32
 80039e0:	4809      	ldr	r0, [pc, #36]	@ (8003a08 <configure_gpio+0x30>)
 80039e2:	f003 f889 	bl	8006af8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut2_Pin, GPIO_PIN_RESET);
 80039e6:	2200      	movs	r2, #0
 80039e8:	2110      	movs	r1, #16
 80039ea:	4807      	ldr	r0, [pc, #28]	@ (8003a08 <configure_gpio+0x30>)
 80039ec:	f003 f884 	bl	8006af8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut3_Pin, GPIO_PIN_RESET);
 80039f0:	2200      	movs	r2, #0
 80039f2:	2108      	movs	r1, #8
 80039f4:	4804      	ldr	r0, [pc, #16]	@ (8003a08 <configure_gpio+0x30>)
 80039f6:	f003 f87f 	bl	8006af8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, xshut4_Pin, GPIO_PIN_RESET);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2104      	movs	r1, #4
 80039fe:	4802      	ldr	r0, [pc, #8]	@ (8003a08 <configure_gpio+0x30>)
 8003a00:	f003 f87a 	bl	8006af8 <HAL_GPIO_WritePin>
}
 8003a04:	bf00      	nop
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	58021800 	.word	0x58021800

08003a0c <init_address>:

/* Sets the address of a single VL53L0X sensor.
 * This functions assumes that all non-configured VL53L0X are still
 * in hardware standby. */
static bool init_address(vl53l0x_idx_t idx)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	71fb      	strb	r3, [r7, #7]
    set_hardware_standby(idx, false);
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff ffbe 	bl	800399c <set_hardware_standby>
    i2c_set_slave_address(VL53L0X_DEFAULT_ADDRESS);
 8003a20:	2029      	movs	r0, #41	@ 0x29
 8003a22:	f7fe fddf 	bl	80025e4 <i2c_set_slave_address>
    /* The datasheet doesn't say how long we must wait to leave hw standby,
     * but using the same delay as vl6180x seems to work fine. */
    HAL_Delay(1);
 8003a26:	2001      	movs	r0, #1
 8003a28:	f000 f998 	bl	8003d5c <HAL_Delay>

    if (!device_is_booted()) {
 8003a2c:	f7fe ff4c 	bl	80028c8 <device_is_booted>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f083 0301 	eor.w	r3, r3, #1
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <init_address+0x3a>
        my_printf("device is not booted\n");
 8003a3c:	480d      	ldr	r0, [pc, #52]	@ (8003a74 <init_address+0x68>)
 8003a3e:	f7fe fda1 	bl	8002584 <my_printf>
        return false;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e012      	b.n	8003a6c <init_address+0x60>
    }

    if (!configure_address(vl53l0x_infos[idx].addr)) {
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	4a0b      	ldr	r2, [pc, #44]	@ (8003a78 <init_address+0x6c>)
 8003a4a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ff91 	bl	8003976 <configure_address>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f083 0301 	eor.w	r3, r3, #1
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d004      	beq.n	8003a6a <init_address+0x5e>
        my_printf("configure address failed\n");
 8003a60:	4806      	ldr	r0, [pc, #24]	@ (8003a7c <init_address+0x70>)
 8003a62:	f7fe fd8f 	bl	8002584 <my_printf>
        return false;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e000      	b.n	8003a6c <init_address+0x60>
    }
    return true;
 8003a6a:	2301      	movs	r3, #1
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	0801ef00 	.word	0x0801ef00
 8003a78:	0802004c 	.word	0x0802004c
 8003a7c:	0801ef18 	.word	0x0801ef18

08003a80 <init_addresses>:
/**
 * Initializes the sensors by putting them in hw standby and then
 * waking them up one-by-one as described in AN4846.
 */
static bool init_addresses()
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
    /* Puts all sensors in hardware standby */
    configure_gpio();
 8003a84:	f7ff ffa8 	bl	80039d8 <configure_gpio>

    /* Wake each sensor up one by one and set a unique address for each one */
    if (!init_address(VL53L0X_IDX_FIRST)) {
 8003a88:	2000      	movs	r0, #0
 8003a8a:	f7ff ffbf 	bl	8003a0c <init_address>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f083 0301 	eor.w	r3, r3, #1
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <init_addresses+0x24>
        my_printf("fail init address first sensor\r\n");
 8003a9a:	4814      	ldr	r0, [pc, #80]	@ (8003aec <init_addresses+0x6c>)
 8003a9c:	f7fe fd72 	bl	8002584 <my_printf>
        return false;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e021      	b.n	8003ae8 <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_SECOND)) {
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	f7ff ffb1 	bl	8003a0c <init_address>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f083 0301 	eor.w	r3, r3, #1
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <init_addresses+0x3a>
        return false;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e016      	b.n	8003ae8 <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_THIRD)) {
 8003aba:	2002      	movs	r0, #2
 8003abc:	f7ff ffa6 	bl	8003a0c <init_address>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f083 0301 	eor.w	r3, r3, #1
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <init_addresses+0x50>
        return false;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e00b      	b.n	8003ae8 <init_addresses+0x68>
    }
    if (!init_address(VL53L0X_IDX_FOURTH)) {
 8003ad0:	2003      	movs	r0, #3
 8003ad2:	f7ff ff9b 	bl	8003a0c <init_address>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f083 0301 	eor.w	r3, r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <init_addresses+0x66>
        return false;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e000      	b.n	8003ae8 <init_addresses+0x68>
    }
    return true;
 8003ae6:	2301      	movs	r3, #1
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	0801ef34 	.word	0x0801ef34

08003af0 <init_config>:

static bool init_config(vl53l0x_idx_t idx)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
    i2c_set_slave_address(vl53l0x_infos[idx].addr);
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	4a14      	ldr	r2, [pc, #80]	@ (8003b50 <init_config+0x60>)
 8003afe:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fd6e 	bl	80025e4 <i2c_set_slave_address>
    if (!data_init()) {
 8003b08:	f7fe ff0e 	bl	8002928 <data_init>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f083 0301 	eor.w	r3, r3, #1
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <init_config+0x2c>
        return false;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	e014      	b.n	8003b46 <init_config+0x56>
    }
    if (!static_init()) {
 8003b1c:	f7ff fe6b 	bl	80037f6 <static_init>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f083 0301 	eor.w	r3, r3, #1
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <init_config+0x40>
        return false;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e00a      	b.n	8003b46 <init_config+0x56>
    }
    if (!perform_ref_calibration()) {
 8003b30:	f7ff fefb 	bl	800392a <perform_ref_calibration>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f083 0301 	eor.w	r3, r3, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <init_config+0x54>
        return false;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <init_config+0x56>
    }
    return true;
 8003b44:	2301      	movs	r3, #1
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	0802004c 	.word	0x0802004c

08003b54 <vl53l0x_init>:

bool vl53l0x_init()
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
    if (!init_addresses()) {
 8003b58:	f7ff ff92 	bl	8003a80 <init_addresses>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f083 0301 	eor.w	r3, r3, #1
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <vl53l0x_init+0x1e>
        my_printf("fail init address\r\n");
 8003b68:	481b      	ldr	r0, [pc, #108]	@ (8003bd8 <vl53l0x_init+0x84>)
 8003b6a:	f7fe fd0b 	bl	8002584 <my_printf>
        return false;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e02f      	b.n	8003bd2 <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_FIRST)) {
 8003b72:	2000      	movs	r0, #0
 8003b74:	f7ff ffbc 	bl	8003af0 <init_config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f083 0301 	eor.w	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <vl53l0x_init+0x3a>
        my_printf("fail init first\r\n");
 8003b84:	4815      	ldr	r0, [pc, #84]	@ (8003bdc <vl53l0x_init+0x88>)
 8003b86:	f7fe fcfd 	bl	8002584 <my_printf>
        return false;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e021      	b.n	8003bd2 <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_SECOND)) {
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f7ff ffae 	bl	8003af0 <init_config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f083 0301 	eor.w	r3, r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <vl53l0x_init+0x50>
        return false;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e016      	b.n	8003bd2 <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_THIRD)) {
 8003ba4:	2002      	movs	r0, #2
 8003ba6:	f7ff ffa3 	bl	8003af0 <init_config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f083 0301 	eor.w	r3, r3, #1
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <vl53l0x_init+0x66>
        return false;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e00b      	b.n	8003bd2 <vl53l0x_init+0x7e>
    }
    if (!init_config(VL53L0X_IDX_FOURTH)) {
 8003bba:	2003      	movs	r0, #3
 8003bbc:	f7ff ff98 	bl	8003af0 <init_config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f083 0301 	eor.w	r3, r3, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <vl53l0x_init+0x7c>
        return false;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <vl53l0x_init+0x7e>
    }
    return true;
 8003bd0:	2301      	movs	r3, #1
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	0801ef58 	.word	0x0801ef58
 8003bdc:	0801ef6c 	.word	0x0801ef6c

08003be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003be0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003c1c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003be4:	f7fe fcb6 	bl	8002554 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003be8:	f7fe fc24 	bl	8002434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bec:	480c      	ldr	r0, [pc, #48]	@ (8003c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bee:	490d      	ldr	r1, [pc, #52]	@ (8003c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8003c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bf4:	e002      	b.n	8003bfc <LoopCopyDataInit>

08003bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bfa:	3304      	adds	r3, #4

08003bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c00:	d3f9      	bcc.n	8003bf6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c02:	4a0a      	ldr	r2, [pc, #40]	@ (8003c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c04:	4c0a      	ldr	r4, [pc, #40]	@ (8003c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c08:	e001      	b.n	8003c0e <LoopFillZerobss>

08003c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c0c:	3204      	adds	r2, #4

08003c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c10:	d3fb      	bcc.n	8003c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c12:	f019 ff53 	bl	801dabc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c16:	f7fc fdb9 	bl	800078c <main>
  bx  lr
 8003c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c1c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003c20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003c24:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8003c28:	0803219c 	.word	0x0803219c
  ldr r2, =_sbss
 8003c2c:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8003c30:	24008b48 	.word	0x24008b48

08003c34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c34:	e7fe      	b.n	8003c34 <ADC3_IRQHandler>
	...

08003c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c3e:	2003      	movs	r0, #3
 8003c40:	f000 f980 	bl	8003f44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c44:	f004 fefe 	bl	8008a44 <HAL_RCC_GetSysClockFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ca0 <HAL_Init+0x68>)
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	0a1b      	lsrs	r3, r3, #8
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	4913      	ldr	r1, [pc, #76]	@ (8003ca4 <HAL_Init+0x6c>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c62:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca0 <HAL_Init+0x68>)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ca4 <HAL_Init+0x6c>)
 8003c6c:	5cd3      	ldrb	r3, [r2, r3]
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	fa22 f303 	lsr.w	r3, r2, r3
 8003c78:	4a0b      	ldr	r2, [pc, #44]	@ (8003ca8 <HAL_Init+0x70>)
 8003c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8003cac <HAL_Init+0x74>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c82:	200f      	movs	r0, #15
 8003c84:	f000 f814 	bl	8003cb0 <HAL_InitTick>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e002      	b.n	8003c98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c92:	f7fd ff17 	bl	8001ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	58024400 	.word	0x58024400
 8003ca4:	0802003c 	.word	0x0802003c
 8003ca8:	24000004 	.word	0x24000004
 8003cac:	24000000 	.word	0x24000000

08003cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003cb8:	4b15      	ldr	r3, [pc, #84]	@ (8003d10 <HAL_InitTick+0x60>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e021      	b.n	8003d08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003cc4:	4b13      	ldr	r3, [pc, #76]	@ (8003d14 <HAL_InitTick+0x64>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b11      	ldr	r3, [pc, #68]	@ (8003d10 <HAL_InitTick+0x60>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f965 	bl	8003faa <HAL_SYSTICK_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e00e      	b.n	8003d08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b0f      	cmp	r3, #15
 8003cee:	d80a      	bhi.n	8003d06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	f000 f92f 	bl	8003f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cfc:	4a06      	ldr	r2, [pc, #24]	@ (8003d18 <HAL_InitTick+0x68>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	e000      	b.n	8003d08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	2400000c 	.word	0x2400000c
 8003d14:	24000000 	.word	0x24000000
 8003d18:	24000008 	.word	0x24000008

08003d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d20:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_IncTick+0x20>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	461a      	mov	r2, r3
 8003d26:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <HAL_IncTick+0x24>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	4a04      	ldr	r2, [pc, #16]	@ (8003d40 <HAL_IncTick+0x24>)
 8003d2e:	6013      	str	r3, [r2, #0]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	2400000c 	.word	0x2400000c
 8003d40:	240084bc 	.word	0x240084bc

08003d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return uwTick;
 8003d48:	4b03      	ldr	r3, [pc, #12]	@ (8003d58 <HAL_GetTick+0x14>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	240084bc 	.word	0x240084bc

08003d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d64:	f7ff ffee 	bl	8003d44 <HAL_GetTick>
 8003d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d005      	beq.n	8003d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d76:	4b0a      	ldr	r3, [pc, #40]	@ (8003da0 <HAL_Delay+0x44>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d82:	bf00      	nop
 8003d84:	f7ff ffde 	bl	8003d44 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d8f7      	bhi.n	8003d84 <HAL_Delay+0x28>
  {
  }
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	2400000c 	.word	0x2400000c

08003da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db4:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <__NVIC_SetPriorityGrouping+0x40>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003dcc:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dd2:	4a04      	ldr	r2, [pc, #16]	@ (8003de4 <__NVIC_SetPriorityGrouping+0x40>)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	60d3      	str	r3, [r2, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00
 8003de8:	05fa0000 	.word	0x05fa0000

08003dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df0:	4b04      	ldr	r3, [pc, #16]	@ (8003e04 <__NVIC_GetPriorityGrouping+0x18>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f003 0307 	and.w	r3, r3, #7
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	db0b      	blt.n	8003e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	4907      	ldr	r1, [pc, #28]	@ (8003e40 <__NVIC_EnableIRQ+0x38>)
 8003e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	2001      	movs	r0, #1
 8003e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	e000e100 	.word	0xe000e100

08003e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	6039      	str	r1, [r7, #0]
 8003e4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	db0a      	blt.n	8003e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	490c      	ldr	r1, [pc, #48]	@ (8003e90 <__NVIC_SetPriority+0x4c>)
 8003e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e62:	0112      	lsls	r2, r2, #4
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	440b      	add	r3, r1
 8003e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e6c:	e00a      	b.n	8003e84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4908      	ldr	r1, [pc, #32]	@ (8003e94 <__NVIC_SetPriority+0x50>)
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	3b04      	subs	r3, #4
 8003e7c:	0112      	lsls	r2, r2, #4
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	440b      	add	r3, r1
 8003e82:	761a      	strb	r2, [r3, #24]
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	e000e100 	.word	0xe000e100
 8003e94:	e000ed00 	.word	0xe000ed00

08003e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b089      	sub	sp, #36	@ 0x24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f1c3 0307 	rsb	r3, r3, #7
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	bf28      	it	cs
 8003eb6:	2304      	movcs	r3, #4
 8003eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	2b06      	cmp	r3, #6
 8003ec0:	d902      	bls.n	8003ec8 <NVIC_EncodePriority+0x30>
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3b03      	subs	r3, #3
 8003ec6:	e000      	b.n	8003eca <NVIC_EncodePriority+0x32>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43da      	mvns	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	401a      	ands	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eea:	43d9      	mvns	r1, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef0:	4313      	orrs	r3, r2
         );
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3724      	adds	r7, #36	@ 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f10:	d301      	bcc.n	8003f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f12:	2301      	movs	r3, #1
 8003f14:	e00f      	b.n	8003f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f16:	4a0a      	ldr	r2, [pc, #40]	@ (8003f40 <SysTick_Config+0x40>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f1e:	210f      	movs	r1, #15
 8003f20:	f04f 30ff 	mov.w	r0, #4294967295
 8003f24:	f7ff ff8e 	bl	8003e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f28:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <SysTick_Config+0x40>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f2e:	4b04      	ldr	r3, [pc, #16]	@ (8003f40 <SysTick_Config+0x40>)
 8003f30:	2207      	movs	r2, #7
 8003f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	e000e010 	.word	0xe000e010

08003f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff ff29 	bl	8003da4 <__NVIC_SetPriorityGrouping>
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b086      	sub	sp, #24
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	4603      	mov	r3, r0
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f68:	f7ff ff40 	bl	8003dec <__NVIC_GetPriorityGrouping>
 8003f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	f7ff ff90 	bl	8003e98 <NVIC_EncodePriority>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ff5f 	bl	8003e44 <__NVIC_SetPriority>
}
 8003f86:	bf00      	nop
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4603      	mov	r3, r0
 8003f96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff33 	bl	8003e08 <__NVIC_EnableIRQ>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff ffa4 	bl	8003f00 <SysTick_Config>
 8003fb8:	4603      	mov	r3, r0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003fcc:	f7ff feba 	bl	8003d44 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e312      	b.n	8004602 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a66      	ldr	r2, [pc, #408]	@ (800417c <HAL_DMA_Init+0x1b8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d04a      	beq.n	800407c <HAL_DMA_Init+0xb8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a65      	ldr	r2, [pc, #404]	@ (8004180 <HAL_DMA_Init+0x1bc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d045      	beq.n	800407c <HAL_DMA_Init+0xb8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a63      	ldr	r2, [pc, #396]	@ (8004184 <HAL_DMA_Init+0x1c0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d040      	beq.n	800407c <HAL_DMA_Init+0xb8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a62      	ldr	r2, [pc, #392]	@ (8004188 <HAL_DMA_Init+0x1c4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d03b      	beq.n	800407c <HAL_DMA_Init+0xb8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a60      	ldr	r2, [pc, #384]	@ (800418c <HAL_DMA_Init+0x1c8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d036      	beq.n	800407c <HAL_DMA_Init+0xb8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a5f      	ldr	r2, [pc, #380]	@ (8004190 <HAL_DMA_Init+0x1cc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d031      	beq.n	800407c <HAL_DMA_Init+0xb8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a5d      	ldr	r2, [pc, #372]	@ (8004194 <HAL_DMA_Init+0x1d0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d02c      	beq.n	800407c <HAL_DMA_Init+0xb8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a5c      	ldr	r2, [pc, #368]	@ (8004198 <HAL_DMA_Init+0x1d4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d027      	beq.n	800407c <HAL_DMA_Init+0xb8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a5a      	ldr	r2, [pc, #360]	@ (800419c <HAL_DMA_Init+0x1d8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d022      	beq.n	800407c <HAL_DMA_Init+0xb8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a59      	ldr	r2, [pc, #356]	@ (80041a0 <HAL_DMA_Init+0x1dc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d01d      	beq.n	800407c <HAL_DMA_Init+0xb8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a57      	ldr	r2, [pc, #348]	@ (80041a4 <HAL_DMA_Init+0x1e0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d018      	beq.n	800407c <HAL_DMA_Init+0xb8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a56      	ldr	r2, [pc, #344]	@ (80041a8 <HAL_DMA_Init+0x1e4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <HAL_DMA_Init+0xb8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a54      	ldr	r2, [pc, #336]	@ (80041ac <HAL_DMA_Init+0x1e8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00e      	beq.n	800407c <HAL_DMA_Init+0xb8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a53      	ldr	r2, [pc, #332]	@ (80041b0 <HAL_DMA_Init+0x1ec>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d009      	beq.n	800407c <HAL_DMA_Init+0xb8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a51      	ldr	r2, [pc, #324]	@ (80041b4 <HAL_DMA_Init+0x1f0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_DMA_Init+0xb8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a50      	ldr	r2, [pc, #320]	@ (80041b8 <HAL_DMA_Init+0x1f4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d101      	bne.n	8004080 <HAL_DMA_Init+0xbc>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_DMA_Init+0xbe>
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 813c 	beq.w	8004300 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a37      	ldr	r2, [pc, #220]	@ (800417c <HAL_DMA_Init+0x1b8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d04a      	beq.n	8004138 <HAL_DMA_Init+0x174>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a36      	ldr	r2, [pc, #216]	@ (8004180 <HAL_DMA_Init+0x1bc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d045      	beq.n	8004138 <HAL_DMA_Init+0x174>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a34      	ldr	r2, [pc, #208]	@ (8004184 <HAL_DMA_Init+0x1c0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d040      	beq.n	8004138 <HAL_DMA_Init+0x174>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a33      	ldr	r2, [pc, #204]	@ (8004188 <HAL_DMA_Init+0x1c4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d03b      	beq.n	8004138 <HAL_DMA_Init+0x174>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a31      	ldr	r2, [pc, #196]	@ (800418c <HAL_DMA_Init+0x1c8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d036      	beq.n	8004138 <HAL_DMA_Init+0x174>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a30      	ldr	r2, [pc, #192]	@ (8004190 <HAL_DMA_Init+0x1cc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d031      	beq.n	8004138 <HAL_DMA_Init+0x174>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004194 <HAL_DMA_Init+0x1d0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d02c      	beq.n	8004138 <HAL_DMA_Init+0x174>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004198 <HAL_DMA_Init+0x1d4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d027      	beq.n	8004138 <HAL_DMA_Init+0x174>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2b      	ldr	r2, [pc, #172]	@ (800419c <HAL_DMA_Init+0x1d8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d022      	beq.n	8004138 <HAL_DMA_Init+0x174>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2a      	ldr	r2, [pc, #168]	@ (80041a0 <HAL_DMA_Init+0x1dc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d01d      	beq.n	8004138 <HAL_DMA_Init+0x174>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a28      	ldr	r2, [pc, #160]	@ (80041a4 <HAL_DMA_Init+0x1e0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d018      	beq.n	8004138 <HAL_DMA_Init+0x174>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a27      	ldr	r2, [pc, #156]	@ (80041a8 <HAL_DMA_Init+0x1e4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d013      	beq.n	8004138 <HAL_DMA_Init+0x174>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a25      	ldr	r2, [pc, #148]	@ (80041ac <HAL_DMA_Init+0x1e8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00e      	beq.n	8004138 <HAL_DMA_Init+0x174>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a24      	ldr	r2, [pc, #144]	@ (80041b0 <HAL_DMA_Init+0x1ec>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d009      	beq.n	8004138 <HAL_DMA_Init+0x174>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a22      	ldr	r2, [pc, #136]	@ (80041b4 <HAL_DMA_Init+0x1f0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_DMA_Init+0x174>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a21      	ldr	r2, [pc, #132]	@ (80041b8 <HAL_DMA_Init+0x1f4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d108      	bne.n	800414a <HAL_DMA_Init+0x186>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0201 	bic.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e007      	b.n	800415a <HAL_DMA_Init+0x196>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800415a:	e02f      	b.n	80041bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800415c:	f7ff fdf2 	bl	8003d44 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b05      	cmp	r3, #5
 8004168:	d928      	bls.n	80041bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2203      	movs	r2, #3
 8004174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e242      	b.n	8004602 <HAL_DMA_Init+0x63e>
 800417c:	40020010 	.word	0x40020010
 8004180:	40020028 	.word	0x40020028
 8004184:	40020040 	.word	0x40020040
 8004188:	40020058 	.word	0x40020058
 800418c:	40020070 	.word	0x40020070
 8004190:	40020088 	.word	0x40020088
 8004194:	400200a0 	.word	0x400200a0
 8004198:	400200b8 	.word	0x400200b8
 800419c:	40020410 	.word	0x40020410
 80041a0:	40020428 	.word	0x40020428
 80041a4:	40020440 	.word	0x40020440
 80041a8:	40020458 	.word	0x40020458
 80041ac:	40020470 	.word	0x40020470
 80041b0:	40020488 	.word	0x40020488
 80041b4:	400204a0 	.word	0x400204a0
 80041b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1c8      	bne.n	800415c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4b83      	ldr	r3, [pc, #524]	@ (80043e4 <HAL_DMA_Init+0x420>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80041e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	2b04      	cmp	r3, #4
 800420e:	d107      	bne.n	8004220 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004218:	4313      	orrs	r3, r2
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b28      	cmp	r3, #40	@ 0x28
 8004226:	d903      	bls.n	8004230 <HAL_DMA_Init+0x26c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b2e      	cmp	r3, #46	@ 0x2e
 800422e:	d91f      	bls.n	8004270 <HAL_DMA_Init+0x2ac>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b3e      	cmp	r3, #62	@ 0x3e
 8004236:	d903      	bls.n	8004240 <HAL_DMA_Init+0x27c>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b42      	cmp	r3, #66	@ 0x42
 800423e:	d917      	bls.n	8004270 <HAL_DMA_Init+0x2ac>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b46      	cmp	r3, #70	@ 0x46
 8004246:	d903      	bls.n	8004250 <HAL_DMA_Init+0x28c>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b48      	cmp	r3, #72	@ 0x48
 800424e:	d90f      	bls.n	8004270 <HAL_DMA_Init+0x2ac>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b4e      	cmp	r3, #78	@ 0x4e
 8004256:	d903      	bls.n	8004260 <HAL_DMA_Init+0x29c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b52      	cmp	r3, #82	@ 0x52
 800425e:	d907      	bls.n	8004270 <HAL_DMA_Init+0x2ac>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b73      	cmp	r3, #115	@ 0x73
 8004266:	d905      	bls.n	8004274 <HAL_DMA_Init+0x2b0>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b77      	cmp	r3, #119	@ 0x77
 800426e:	d801      	bhi.n	8004274 <HAL_DMA_Init+0x2b0>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <HAL_DMA_Init+0x2b2>
 8004274:	2300      	movs	r3, #0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004280:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f023 0307 	bic.w	r3, r3, #7
 8004298:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d117      	bne.n	80042dc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00e      	beq.n	80042dc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f002 f8e8 	bl	8006494 <DMA_CheckFifoParam>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2240      	movs	r2, #64	@ 0x40
 80042ce:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e192      	b.n	8004602 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f002 f823 	bl	8006330 <DMA_CalcBaseAndBitshift>
 80042ea:	4603      	mov	r3, r0
 80042ec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	223f      	movs	r2, #63	@ 0x3f
 80042f8:	409a      	lsls	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	609a      	str	r2, [r3, #8]
 80042fe:	e0c8      	b.n	8004492 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a38      	ldr	r2, [pc, #224]	@ (80043e8 <HAL_DMA_Init+0x424>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d022      	beq.n	8004350 <HAL_DMA_Init+0x38c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a37      	ldr	r2, [pc, #220]	@ (80043ec <HAL_DMA_Init+0x428>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d01d      	beq.n	8004350 <HAL_DMA_Init+0x38c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a35      	ldr	r2, [pc, #212]	@ (80043f0 <HAL_DMA_Init+0x42c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d018      	beq.n	8004350 <HAL_DMA_Init+0x38c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a34      	ldr	r2, [pc, #208]	@ (80043f4 <HAL_DMA_Init+0x430>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <HAL_DMA_Init+0x38c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a32      	ldr	r2, [pc, #200]	@ (80043f8 <HAL_DMA_Init+0x434>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00e      	beq.n	8004350 <HAL_DMA_Init+0x38c>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a31      	ldr	r2, [pc, #196]	@ (80043fc <HAL_DMA_Init+0x438>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_DMA_Init+0x38c>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a2f      	ldr	r2, [pc, #188]	@ (8004400 <HAL_DMA_Init+0x43c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_DMA_Init+0x38c>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2e      	ldr	r2, [pc, #184]	@ (8004404 <HAL_DMA_Init+0x440>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_DMA_Init+0x390>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_DMA_Init+0x392>
 8004354:	2300      	movs	r3, #0
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8092 	beq.w	8004480 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a21      	ldr	r2, [pc, #132]	@ (80043e8 <HAL_DMA_Init+0x424>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d021      	beq.n	80043aa <HAL_DMA_Init+0x3e6>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a20      	ldr	r2, [pc, #128]	@ (80043ec <HAL_DMA_Init+0x428>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d01c      	beq.n	80043aa <HAL_DMA_Init+0x3e6>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1e      	ldr	r2, [pc, #120]	@ (80043f0 <HAL_DMA_Init+0x42c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d017      	beq.n	80043aa <HAL_DMA_Init+0x3e6>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1d      	ldr	r2, [pc, #116]	@ (80043f4 <HAL_DMA_Init+0x430>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d012      	beq.n	80043aa <HAL_DMA_Init+0x3e6>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1b      	ldr	r2, [pc, #108]	@ (80043f8 <HAL_DMA_Init+0x434>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00d      	beq.n	80043aa <HAL_DMA_Init+0x3e6>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1a      	ldr	r2, [pc, #104]	@ (80043fc <HAL_DMA_Init+0x438>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d008      	beq.n	80043aa <HAL_DMA_Init+0x3e6>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a18      	ldr	r2, [pc, #96]	@ (8004400 <HAL_DMA_Init+0x43c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <HAL_DMA_Init+0x3e6>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a17      	ldr	r2, [pc, #92]	@ (8004404 <HAL_DMA_Init+0x440>)
 80043a8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2202      	movs	r2, #2
 80043ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <HAL_DMA_Init+0x444>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b40      	cmp	r3, #64	@ 0x40
 80043d0:	d01c      	beq.n	800440c <HAL_DMA_Init+0x448>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b80      	cmp	r3, #128	@ 0x80
 80043d8:	d102      	bne.n	80043e0 <HAL_DMA_Init+0x41c>
 80043da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043de:	e016      	b.n	800440e <HAL_DMA_Init+0x44a>
 80043e0:	2300      	movs	r3, #0
 80043e2:	e014      	b.n	800440e <HAL_DMA_Init+0x44a>
 80043e4:	fe10803f 	.word	0xfe10803f
 80043e8:	58025408 	.word	0x58025408
 80043ec:	5802541c 	.word	0x5802541c
 80043f0:	58025430 	.word	0x58025430
 80043f4:	58025444 	.word	0x58025444
 80043f8:	58025458 	.word	0x58025458
 80043fc:	5802546c 	.word	0x5802546c
 8004400:	58025480 	.word	0x58025480
 8004404:	58025494 	.word	0x58025494
 8004408:	fffe000f 	.word	0xfffe000f
 800440c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68d2      	ldr	r2, [r2, #12]
 8004412:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004414:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800441c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004424:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800442c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004434:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800443c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	4b6e      	ldr	r3, [pc, #440]	@ (800460c <HAL_DMA_Init+0x648>)
 8004454:	4413      	add	r3, r2
 8004456:	4a6e      	ldr	r2, [pc, #440]	@ (8004610 <HAL_DMA_Init+0x64c>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	009a      	lsls	r2, r3, #2
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f001 ff63 	bl	8006330 <DMA_CalcBaseAndBitshift>
 800446a:	4603      	mov	r3, r0
 800446c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2201      	movs	r2, #1
 8004478:	409a      	lsls	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	e008      	b.n	8004492 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2240      	movs	r2, #64	@ 0x40
 8004484:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2203      	movs	r2, #3
 800448a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e0b7      	b.n	8004602 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a5f      	ldr	r2, [pc, #380]	@ (8004614 <HAL_DMA_Init+0x650>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d072      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004618 <HAL_DMA_Init+0x654>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d06d      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a5c      	ldr	r2, [pc, #368]	@ (800461c <HAL_DMA_Init+0x658>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d068      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004620 <HAL_DMA_Init+0x65c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d063      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a59      	ldr	r2, [pc, #356]	@ (8004624 <HAL_DMA_Init+0x660>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d05e      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a57      	ldr	r2, [pc, #348]	@ (8004628 <HAL_DMA_Init+0x664>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d059      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a56      	ldr	r2, [pc, #344]	@ (800462c <HAL_DMA_Init+0x668>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d054      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a54      	ldr	r2, [pc, #336]	@ (8004630 <HAL_DMA_Init+0x66c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d04f      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a53      	ldr	r2, [pc, #332]	@ (8004634 <HAL_DMA_Init+0x670>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d04a      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a51      	ldr	r2, [pc, #324]	@ (8004638 <HAL_DMA_Init+0x674>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d045      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a50      	ldr	r2, [pc, #320]	@ (800463c <HAL_DMA_Init+0x678>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d040      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a4e      	ldr	r2, [pc, #312]	@ (8004640 <HAL_DMA_Init+0x67c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d03b      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a4d      	ldr	r2, [pc, #308]	@ (8004644 <HAL_DMA_Init+0x680>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d036      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a4b      	ldr	r2, [pc, #300]	@ (8004648 <HAL_DMA_Init+0x684>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d031      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a4a      	ldr	r2, [pc, #296]	@ (800464c <HAL_DMA_Init+0x688>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d02c      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a48      	ldr	r2, [pc, #288]	@ (8004650 <HAL_DMA_Init+0x68c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d027      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a47      	ldr	r2, [pc, #284]	@ (8004654 <HAL_DMA_Init+0x690>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d022      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a45      	ldr	r2, [pc, #276]	@ (8004658 <HAL_DMA_Init+0x694>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01d      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a44      	ldr	r2, [pc, #272]	@ (800465c <HAL_DMA_Init+0x698>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d018      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a42      	ldr	r2, [pc, #264]	@ (8004660 <HAL_DMA_Init+0x69c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a41      	ldr	r2, [pc, #260]	@ (8004664 <HAL_DMA_Init+0x6a0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00e      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a3f      	ldr	r2, [pc, #252]	@ (8004668 <HAL_DMA_Init+0x6a4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d009      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a3e      	ldr	r2, [pc, #248]	@ (800466c <HAL_DMA_Init+0x6a8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d004      	beq.n	8004582 <HAL_DMA_Init+0x5be>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a3c      	ldr	r2, [pc, #240]	@ (8004670 <HAL_DMA_Init+0x6ac>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d101      	bne.n	8004586 <HAL_DMA_Init+0x5c2>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <HAL_DMA_Init+0x5c4>
 8004586:	2300      	movs	r3, #0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d032      	beq.n	80045f2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f001 fffd 	bl	800658c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b80      	cmp	r3, #128	@ 0x80
 8004598:	d102      	bne.n	80045a0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80045b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d010      	beq.n	80045e0 <HAL_DMA_Init+0x61c>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d80c      	bhi.n	80045e0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f002 f87a 	bl	80066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	e008      	b.n	80045f2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	a7fdabf8 	.word	0xa7fdabf8
 8004610:	cccccccd 	.word	0xcccccccd
 8004614:	40020010 	.word	0x40020010
 8004618:	40020028 	.word	0x40020028
 800461c:	40020040 	.word	0x40020040
 8004620:	40020058 	.word	0x40020058
 8004624:	40020070 	.word	0x40020070
 8004628:	40020088 	.word	0x40020088
 800462c:	400200a0 	.word	0x400200a0
 8004630:	400200b8 	.word	0x400200b8
 8004634:	40020410 	.word	0x40020410
 8004638:	40020428 	.word	0x40020428
 800463c:	40020440 	.word	0x40020440
 8004640:	40020458 	.word	0x40020458
 8004644:	40020470 	.word	0x40020470
 8004648:	40020488 	.word	0x40020488
 800464c:	400204a0 	.word	0x400204a0
 8004650:	400204b8 	.word	0x400204b8
 8004654:	58025408 	.word	0x58025408
 8004658:	5802541c 	.word	0x5802541c
 800465c:	58025430 	.word	0x58025430
 8004660:	58025444 	.word	0x58025444
 8004664:	58025458 	.word	0x58025458
 8004668:	5802546c 	.word	0x5802546c
 800466c:	58025480 	.word	0x58025480
 8004670:	58025494 	.word	0x58025494

08004674 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e226      	b.n	8004ade <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_DMA_Start_IT+0x2a>
 800469a:	2302      	movs	r3, #2
 800469c:	e21f      	b.n	8004ade <HAL_DMA_Start_IT+0x46a>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	f040 820a 	bne.w	8004ac8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a68      	ldr	r2, [pc, #416]	@ (8004868 <HAL_DMA_Start_IT+0x1f4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d04a      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a66      	ldr	r2, [pc, #408]	@ (800486c <HAL_DMA_Start_IT+0x1f8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d045      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a65      	ldr	r2, [pc, #404]	@ (8004870 <HAL_DMA_Start_IT+0x1fc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d040      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a63      	ldr	r2, [pc, #396]	@ (8004874 <HAL_DMA_Start_IT+0x200>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d03b      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a62      	ldr	r2, [pc, #392]	@ (8004878 <HAL_DMA_Start_IT+0x204>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d036      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a60      	ldr	r2, [pc, #384]	@ (800487c <HAL_DMA_Start_IT+0x208>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d031      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a5f      	ldr	r2, [pc, #380]	@ (8004880 <HAL_DMA_Start_IT+0x20c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d02c      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a5d      	ldr	r2, [pc, #372]	@ (8004884 <HAL_DMA_Start_IT+0x210>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d027      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a5c      	ldr	r2, [pc, #368]	@ (8004888 <HAL_DMA_Start_IT+0x214>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d022      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a5a      	ldr	r2, [pc, #360]	@ (800488c <HAL_DMA_Start_IT+0x218>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d01d      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a59      	ldr	r2, [pc, #356]	@ (8004890 <HAL_DMA_Start_IT+0x21c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d018      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a57      	ldr	r2, [pc, #348]	@ (8004894 <HAL_DMA_Start_IT+0x220>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a56      	ldr	r2, [pc, #344]	@ (8004898 <HAL_DMA_Start_IT+0x224>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a54      	ldr	r2, [pc, #336]	@ (800489c <HAL_DMA_Start_IT+0x228>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a53      	ldr	r2, [pc, #332]	@ (80048a0 <HAL_DMA_Start_IT+0x22c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_DMA_Start_IT+0xee>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a51      	ldr	r2, [pc, #324]	@ (80048a4 <HAL_DMA_Start_IT+0x230>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d108      	bne.n	8004774 <HAL_DMA_Start_IT+0x100>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0201 	bic.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e007      	b.n	8004784 <HAL_DMA_Start_IT+0x110>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f001 fc24 	bl	8005fd8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a34      	ldr	r2, [pc, #208]	@ (8004868 <HAL_DMA_Start_IT+0x1f4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d04a      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a33      	ldr	r2, [pc, #204]	@ (800486c <HAL_DMA_Start_IT+0x1f8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d045      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a31      	ldr	r2, [pc, #196]	@ (8004870 <HAL_DMA_Start_IT+0x1fc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d040      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a30      	ldr	r2, [pc, #192]	@ (8004874 <HAL_DMA_Start_IT+0x200>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d03b      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004878 <HAL_DMA_Start_IT+0x204>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d036      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2d      	ldr	r2, [pc, #180]	@ (800487c <HAL_DMA_Start_IT+0x208>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d031      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004880 <HAL_DMA_Start_IT+0x20c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d02c      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a2a      	ldr	r2, [pc, #168]	@ (8004884 <HAL_DMA_Start_IT+0x210>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d027      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a28      	ldr	r2, [pc, #160]	@ (8004888 <HAL_DMA_Start_IT+0x214>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d022      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a27      	ldr	r2, [pc, #156]	@ (800488c <HAL_DMA_Start_IT+0x218>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d01d      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a25      	ldr	r2, [pc, #148]	@ (8004890 <HAL_DMA_Start_IT+0x21c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d018      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a24      	ldr	r2, [pc, #144]	@ (8004894 <HAL_DMA_Start_IT+0x220>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d013      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a22      	ldr	r2, [pc, #136]	@ (8004898 <HAL_DMA_Start_IT+0x224>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00e      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a21      	ldr	r2, [pc, #132]	@ (800489c <HAL_DMA_Start_IT+0x228>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d009      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1f      	ldr	r2, [pc, #124]	@ (80048a0 <HAL_DMA_Start_IT+0x22c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_DMA_Start_IT+0x1bc>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1e      	ldr	r2, [pc, #120]	@ (80048a4 <HAL_DMA_Start_IT+0x230>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d101      	bne.n	8004834 <HAL_DMA_Start_IT+0x1c0>
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <HAL_DMA_Start_IT+0x1c2>
 8004834:	2300      	movs	r3, #0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d036      	beq.n	80048a8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f023 021e 	bic.w	r2, r3, #30
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0216 	orr.w	r2, r2, #22
 800484c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d03e      	beq.n	80048d4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0208 	orr.w	r2, r2, #8
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e035      	b.n	80048d4 <HAL_DMA_Start_IT+0x260>
 8004868:	40020010 	.word	0x40020010
 800486c:	40020028 	.word	0x40020028
 8004870:	40020040 	.word	0x40020040
 8004874:	40020058 	.word	0x40020058
 8004878:	40020070 	.word	0x40020070
 800487c:	40020088 	.word	0x40020088
 8004880:	400200a0 	.word	0x400200a0
 8004884:	400200b8 	.word	0x400200b8
 8004888:	40020410 	.word	0x40020410
 800488c:	40020428 	.word	0x40020428
 8004890:	40020440 	.word	0x40020440
 8004894:	40020458 	.word	0x40020458
 8004898:	40020470 	.word	0x40020470
 800489c:	40020488 	.word	0x40020488
 80048a0:	400204a0 	.word	0x400204a0
 80048a4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 020e 	bic.w	r2, r3, #14
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 020a 	orr.w	r2, r2, #10
 80048ba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0204 	orr.w	r2, r2, #4
 80048d2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a83      	ldr	r2, [pc, #524]	@ (8004ae8 <HAL_DMA_Start_IT+0x474>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d072      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a82      	ldr	r2, [pc, #520]	@ (8004aec <HAL_DMA_Start_IT+0x478>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d06d      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a80      	ldr	r2, [pc, #512]	@ (8004af0 <HAL_DMA_Start_IT+0x47c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d068      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a7f      	ldr	r2, [pc, #508]	@ (8004af4 <HAL_DMA_Start_IT+0x480>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d063      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a7d      	ldr	r2, [pc, #500]	@ (8004af8 <HAL_DMA_Start_IT+0x484>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d05e      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a7c      	ldr	r2, [pc, #496]	@ (8004afc <HAL_DMA_Start_IT+0x488>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d059      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a7a      	ldr	r2, [pc, #488]	@ (8004b00 <HAL_DMA_Start_IT+0x48c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d054      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a79      	ldr	r2, [pc, #484]	@ (8004b04 <HAL_DMA_Start_IT+0x490>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d04f      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a77      	ldr	r2, [pc, #476]	@ (8004b08 <HAL_DMA_Start_IT+0x494>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d04a      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a76      	ldr	r2, [pc, #472]	@ (8004b0c <HAL_DMA_Start_IT+0x498>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d045      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a74      	ldr	r2, [pc, #464]	@ (8004b10 <HAL_DMA_Start_IT+0x49c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d040      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a73      	ldr	r2, [pc, #460]	@ (8004b14 <HAL_DMA_Start_IT+0x4a0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d03b      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a71      	ldr	r2, [pc, #452]	@ (8004b18 <HAL_DMA_Start_IT+0x4a4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d036      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a70      	ldr	r2, [pc, #448]	@ (8004b1c <HAL_DMA_Start_IT+0x4a8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d031      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a6e      	ldr	r2, [pc, #440]	@ (8004b20 <HAL_DMA_Start_IT+0x4ac>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d02c      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a6d      	ldr	r2, [pc, #436]	@ (8004b24 <HAL_DMA_Start_IT+0x4b0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d027      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a6b      	ldr	r2, [pc, #428]	@ (8004b28 <HAL_DMA_Start_IT+0x4b4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d022      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a6a      	ldr	r2, [pc, #424]	@ (8004b2c <HAL_DMA_Start_IT+0x4b8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d01d      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a68      	ldr	r2, [pc, #416]	@ (8004b30 <HAL_DMA_Start_IT+0x4bc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d018      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a67      	ldr	r2, [pc, #412]	@ (8004b34 <HAL_DMA_Start_IT+0x4c0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d013      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a65      	ldr	r2, [pc, #404]	@ (8004b38 <HAL_DMA_Start_IT+0x4c4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00e      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a64      	ldr	r2, [pc, #400]	@ (8004b3c <HAL_DMA_Start_IT+0x4c8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d009      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a62      	ldr	r2, [pc, #392]	@ (8004b40 <HAL_DMA_Start_IT+0x4cc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <HAL_DMA_Start_IT+0x350>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a61      	ldr	r2, [pc, #388]	@ (8004b44 <HAL_DMA_Start_IT+0x4d0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d101      	bne.n	80049c8 <HAL_DMA_Start_IT+0x354>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <HAL_DMA_Start_IT+0x356>
 80049c8:	2300      	movs	r3, #0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01a      	beq.n	8004a04 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049ea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d007      	beq.n	8004a04 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a37      	ldr	r2, [pc, #220]	@ (8004ae8 <HAL_DMA_Start_IT+0x474>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d04a      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a36      	ldr	r2, [pc, #216]	@ (8004aec <HAL_DMA_Start_IT+0x478>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d045      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a34      	ldr	r2, [pc, #208]	@ (8004af0 <HAL_DMA_Start_IT+0x47c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d040      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a33      	ldr	r2, [pc, #204]	@ (8004af4 <HAL_DMA_Start_IT+0x480>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d03b      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a31      	ldr	r2, [pc, #196]	@ (8004af8 <HAL_DMA_Start_IT+0x484>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d036      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a30      	ldr	r2, [pc, #192]	@ (8004afc <HAL_DMA_Start_IT+0x488>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d031      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a2e      	ldr	r2, [pc, #184]	@ (8004b00 <HAL_DMA_Start_IT+0x48c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d02c      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8004b04 <HAL_DMA_Start_IT+0x490>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d027      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a2b      	ldr	r2, [pc, #172]	@ (8004b08 <HAL_DMA_Start_IT+0x494>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d022      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a2a      	ldr	r2, [pc, #168]	@ (8004b0c <HAL_DMA_Start_IT+0x498>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d01d      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a28      	ldr	r2, [pc, #160]	@ (8004b10 <HAL_DMA_Start_IT+0x49c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d018      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a27      	ldr	r2, [pc, #156]	@ (8004b14 <HAL_DMA_Start_IT+0x4a0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d013      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a25      	ldr	r2, [pc, #148]	@ (8004b18 <HAL_DMA_Start_IT+0x4a4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00e      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a24      	ldr	r2, [pc, #144]	@ (8004b1c <HAL_DMA_Start_IT+0x4a8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d009      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a22      	ldr	r2, [pc, #136]	@ (8004b20 <HAL_DMA_Start_IT+0x4ac>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x430>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a21      	ldr	r2, [pc, #132]	@ (8004b24 <HAL_DMA_Start_IT+0x4b0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d108      	bne.n	8004ab6 <HAL_DMA_Start_IT+0x442>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	e012      	b.n	8004adc <HAL_DMA_Start_IT+0x468>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0201 	orr.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e009      	b.n	8004adc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ace:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40020010 	.word	0x40020010
 8004aec:	40020028 	.word	0x40020028
 8004af0:	40020040 	.word	0x40020040
 8004af4:	40020058 	.word	0x40020058
 8004af8:	40020070 	.word	0x40020070
 8004afc:	40020088 	.word	0x40020088
 8004b00:	400200a0 	.word	0x400200a0
 8004b04:	400200b8 	.word	0x400200b8
 8004b08:	40020410 	.word	0x40020410
 8004b0c:	40020428 	.word	0x40020428
 8004b10:	40020440 	.word	0x40020440
 8004b14:	40020458 	.word	0x40020458
 8004b18:	40020470 	.word	0x40020470
 8004b1c:	40020488 	.word	0x40020488
 8004b20:	400204a0 	.word	0x400204a0
 8004b24:	400204b8 	.word	0x400204b8
 8004b28:	58025408 	.word	0x58025408
 8004b2c:	5802541c 	.word	0x5802541c
 8004b30:	58025430 	.word	0x58025430
 8004b34:	58025444 	.word	0x58025444
 8004b38:	58025458 	.word	0x58025458
 8004b3c:	5802546c 	.word	0x5802546c
 8004b40:	58025480 	.word	0x58025480
 8004b44:	58025494 	.word	0x58025494

08004b48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004b50:	f7ff f8f8 	bl	8003d44 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e2dc      	b.n	800511a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d008      	beq.n	8004b7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2280      	movs	r2, #128	@ 0x80
 8004b70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e2cd      	b.n	800511a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a76      	ldr	r2, [pc, #472]	@ (8004d5c <HAL_DMA_Abort+0x214>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d04a      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a74      	ldr	r2, [pc, #464]	@ (8004d60 <HAL_DMA_Abort+0x218>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d045      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a73      	ldr	r2, [pc, #460]	@ (8004d64 <HAL_DMA_Abort+0x21c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d040      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a71      	ldr	r2, [pc, #452]	@ (8004d68 <HAL_DMA_Abort+0x220>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d03b      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a70      	ldr	r2, [pc, #448]	@ (8004d6c <HAL_DMA_Abort+0x224>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d036      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a6e      	ldr	r2, [pc, #440]	@ (8004d70 <HAL_DMA_Abort+0x228>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d031      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a6d      	ldr	r2, [pc, #436]	@ (8004d74 <HAL_DMA_Abort+0x22c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d02c      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a6b      	ldr	r2, [pc, #428]	@ (8004d78 <HAL_DMA_Abort+0x230>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d027      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a6a      	ldr	r2, [pc, #424]	@ (8004d7c <HAL_DMA_Abort+0x234>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d022      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a68      	ldr	r2, [pc, #416]	@ (8004d80 <HAL_DMA_Abort+0x238>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01d      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a67      	ldr	r2, [pc, #412]	@ (8004d84 <HAL_DMA_Abort+0x23c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d018      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a65      	ldr	r2, [pc, #404]	@ (8004d88 <HAL_DMA_Abort+0x240>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a64      	ldr	r2, [pc, #400]	@ (8004d8c <HAL_DMA_Abort+0x244>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00e      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a62      	ldr	r2, [pc, #392]	@ (8004d90 <HAL_DMA_Abort+0x248>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d009      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a61      	ldr	r2, [pc, #388]	@ (8004d94 <HAL_DMA_Abort+0x24c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d004      	beq.n	8004c1e <HAL_DMA_Abort+0xd6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a5f      	ldr	r2, [pc, #380]	@ (8004d98 <HAL_DMA_Abort+0x250>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d101      	bne.n	8004c22 <HAL_DMA_Abort+0xda>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <HAL_DMA_Abort+0xdc>
 8004c22:	2300      	movs	r3, #0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 021e 	bic.w	r2, r2, #30
 8004c36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695a      	ldr	r2, [r3, #20]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c46:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	e00a      	b.n	8004c66 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 020e 	bic.w	r2, r2, #14
 8004c5e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a3c      	ldr	r2, [pc, #240]	@ (8004d5c <HAL_DMA_Abort+0x214>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d072      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a3a      	ldr	r2, [pc, #232]	@ (8004d60 <HAL_DMA_Abort+0x218>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d06d      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a39      	ldr	r2, [pc, #228]	@ (8004d64 <HAL_DMA_Abort+0x21c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d068      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a37      	ldr	r2, [pc, #220]	@ (8004d68 <HAL_DMA_Abort+0x220>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d063      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a36      	ldr	r2, [pc, #216]	@ (8004d6c <HAL_DMA_Abort+0x224>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d05e      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a34      	ldr	r2, [pc, #208]	@ (8004d70 <HAL_DMA_Abort+0x228>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d059      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a33      	ldr	r2, [pc, #204]	@ (8004d74 <HAL_DMA_Abort+0x22c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d054      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a31      	ldr	r2, [pc, #196]	@ (8004d78 <HAL_DMA_Abort+0x230>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d04f      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a30      	ldr	r2, [pc, #192]	@ (8004d7c <HAL_DMA_Abort+0x234>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d04a      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8004d80 <HAL_DMA_Abort+0x238>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d045      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a2d      	ldr	r2, [pc, #180]	@ (8004d84 <HAL_DMA_Abort+0x23c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d040      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8004d88 <HAL_DMA_Abort+0x240>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d03b      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8004d8c <HAL_DMA_Abort+0x244>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d036      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a28      	ldr	r2, [pc, #160]	@ (8004d90 <HAL_DMA_Abort+0x248>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d031      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a27      	ldr	r2, [pc, #156]	@ (8004d94 <HAL_DMA_Abort+0x24c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d02c      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a25      	ldr	r2, [pc, #148]	@ (8004d98 <HAL_DMA_Abort+0x250>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d027      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a24      	ldr	r2, [pc, #144]	@ (8004d9c <HAL_DMA_Abort+0x254>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d022      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a22      	ldr	r2, [pc, #136]	@ (8004da0 <HAL_DMA_Abort+0x258>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d01d      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a21      	ldr	r2, [pc, #132]	@ (8004da4 <HAL_DMA_Abort+0x25c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d018      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1f      	ldr	r2, [pc, #124]	@ (8004da8 <HAL_DMA_Abort+0x260>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d013      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1e      	ldr	r2, [pc, #120]	@ (8004dac <HAL_DMA_Abort+0x264>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00e      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004db0 <HAL_DMA_Abort+0x268>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1b      	ldr	r2, [pc, #108]	@ (8004db4 <HAL_DMA_Abort+0x26c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_DMA_Abort+0x20e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a19      	ldr	r2, [pc, #100]	@ (8004db8 <HAL_DMA_Abort+0x270>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d132      	bne.n	8004dbc <HAL_DMA_Abort+0x274>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e031      	b.n	8004dbe <HAL_DMA_Abort+0x276>
 8004d5a:	bf00      	nop
 8004d5c:	40020010 	.word	0x40020010
 8004d60:	40020028 	.word	0x40020028
 8004d64:	40020040 	.word	0x40020040
 8004d68:	40020058 	.word	0x40020058
 8004d6c:	40020070 	.word	0x40020070
 8004d70:	40020088 	.word	0x40020088
 8004d74:	400200a0 	.word	0x400200a0
 8004d78:	400200b8 	.word	0x400200b8
 8004d7c:	40020410 	.word	0x40020410
 8004d80:	40020428 	.word	0x40020428
 8004d84:	40020440 	.word	0x40020440
 8004d88:	40020458 	.word	0x40020458
 8004d8c:	40020470 	.word	0x40020470
 8004d90:	40020488 	.word	0x40020488
 8004d94:	400204a0 	.word	0x400204a0
 8004d98:	400204b8 	.word	0x400204b8
 8004d9c:	58025408 	.word	0x58025408
 8004da0:	5802541c 	.word	0x5802541c
 8004da4:	58025430 	.word	0x58025430
 8004da8:	58025444 	.word	0x58025444
 8004dac:	58025458 	.word	0x58025458
 8004db0:	5802546c 	.word	0x5802546c
 8004db4:	58025480 	.word	0x58025480
 8004db8:	58025494 	.word	0x58025494
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d007      	beq.n	8004dd2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a6d      	ldr	r2, [pc, #436]	@ (8004f8c <HAL_DMA_Abort+0x444>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d04a      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a6b      	ldr	r2, [pc, #428]	@ (8004f90 <HAL_DMA_Abort+0x448>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d045      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a6a      	ldr	r2, [pc, #424]	@ (8004f94 <HAL_DMA_Abort+0x44c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d040      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a68      	ldr	r2, [pc, #416]	@ (8004f98 <HAL_DMA_Abort+0x450>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d03b      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a67      	ldr	r2, [pc, #412]	@ (8004f9c <HAL_DMA_Abort+0x454>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d036      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a65      	ldr	r2, [pc, #404]	@ (8004fa0 <HAL_DMA_Abort+0x458>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d031      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a64      	ldr	r2, [pc, #400]	@ (8004fa4 <HAL_DMA_Abort+0x45c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d02c      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a62      	ldr	r2, [pc, #392]	@ (8004fa8 <HAL_DMA_Abort+0x460>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d027      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a61      	ldr	r2, [pc, #388]	@ (8004fac <HAL_DMA_Abort+0x464>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a5f      	ldr	r2, [pc, #380]	@ (8004fb0 <HAL_DMA_Abort+0x468>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d01d      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a5e      	ldr	r2, [pc, #376]	@ (8004fb4 <HAL_DMA_Abort+0x46c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a5c      	ldr	r2, [pc, #368]	@ (8004fb8 <HAL_DMA_Abort+0x470>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a5b      	ldr	r2, [pc, #364]	@ (8004fbc <HAL_DMA_Abort+0x474>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a59      	ldr	r2, [pc, #356]	@ (8004fc0 <HAL_DMA_Abort+0x478>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a58      	ldr	r2, [pc, #352]	@ (8004fc4 <HAL_DMA_Abort+0x47c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <HAL_DMA_Abort+0x32a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a56      	ldr	r2, [pc, #344]	@ (8004fc8 <HAL_DMA_Abort+0x480>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d108      	bne.n	8004e84 <HAL_DMA_Abort+0x33c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0201 	bic.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e007      	b.n	8004e94 <HAL_DMA_Abort+0x34c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e94:	e013      	b.n	8004ebe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e96:	f7fe ff55 	bl	8003d44 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b05      	cmp	r3, #5
 8004ea2:	d90c      	bls.n	8004ebe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2203      	movs	r2, #3
 8004eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e12d      	b.n	800511a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e5      	bne.n	8004e96 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a2f      	ldr	r2, [pc, #188]	@ (8004f8c <HAL_DMA_Abort+0x444>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d04a      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8004f90 <HAL_DMA_Abort+0x448>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d045      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8004f94 <HAL_DMA_Abort+0x44c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d040      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a2a      	ldr	r2, [pc, #168]	@ (8004f98 <HAL_DMA_Abort+0x450>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d03b      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a29      	ldr	r2, [pc, #164]	@ (8004f9c <HAL_DMA_Abort+0x454>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d036      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a27      	ldr	r2, [pc, #156]	@ (8004fa0 <HAL_DMA_Abort+0x458>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d031      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a26      	ldr	r2, [pc, #152]	@ (8004fa4 <HAL_DMA_Abort+0x45c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d02c      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a24      	ldr	r2, [pc, #144]	@ (8004fa8 <HAL_DMA_Abort+0x460>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d027      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a23      	ldr	r2, [pc, #140]	@ (8004fac <HAL_DMA_Abort+0x464>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d022      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a21      	ldr	r2, [pc, #132]	@ (8004fb0 <HAL_DMA_Abort+0x468>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01d      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a20      	ldr	r2, [pc, #128]	@ (8004fb4 <HAL_DMA_Abort+0x46c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d018      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb8 <HAL_DMA_Abort+0x470>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1d      	ldr	r2, [pc, #116]	@ (8004fbc <HAL_DMA_Abort+0x474>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00e      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc0 <HAL_DMA_Abort+0x478>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d009      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1a      	ldr	r2, [pc, #104]	@ (8004fc4 <HAL_DMA_Abort+0x47c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_DMA_Abort+0x422>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a18      	ldr	r2, [pc, #96]	@ (8004fc8 <HAL_DMA_Abort+0x480>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d101      	bne.n	8004f6e <HAL_DMA_Abort+0x426>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <HAL_DMA_Abort+0x428>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d02b      	beq.n	8004fcc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f78:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	223f      	movs	r2, #63	@ 0x3f
 8004f84:	409a      	lsls	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	609a      	str	r2, [r3, #8]
 8004f8a:	e02a      	b.n	8004fe2 <HAL_DMA_Abort+0x49a>
 8004f8c:	40020010 	.word	0x40020010
 8004f90:	40020028 	.word	0x40020028
 8004f94:	40020040 	.word	0x40020040
 8004f98:	40020058 	.word	0x40020058
 8004f9c:	40020070 	.word	0x40020070
 8004fa0:	40020088 	.word	0x40020088
 8004fa4:	400200a0 	.word	0x400200a0
 8004fa8:	400200b8 	.word	0x400200b8
 8004fac:	40020410 	.word	0x40020410
 8004fb0:	40020428 	.word	0x40020428
 8004fb4:	40020440 	.word	0x40020440
 8004fb8:	40020458 	.word	0x40020458
 8004fbc:	40020470 	.word	0x40020470
 8004fc0:	40020488 	.word	0x40020488
 8004fc4:	400204a0 	.word	0x400204a0
 8004fc8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	2201      	movs	r2, #1
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a4f      	ldr	r2, [pc, #316]	@ (8005124 <HAL_DMA_Abort+0x5dc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d072      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a4d      	ldr	r2, [pc, #308]	@ (8005128 <HAL_DMA_Abort+0x5e0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d06d      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a4c      	ldr	r2, [pc, #304]	@ (800512c <HAL_DMA_Abort+0x5e4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d068      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a4a      	ldr	r2, [pc, #296]	@ (8005130 <HAL_DMA_Abort+0x5e8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d063      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a49      	ldr	r2, [pc, #292]	@ (8005134 <HAL_DMA_Abort+0x5ec>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d05e      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a47      	ldr	r2, [pc, #284]	@ (8005138 <HAL_DMA_Abort+0x5f0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d059      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a46      	ldr	r2, [pc, #280]	@ (800513c <HAL_DMA_Abort+0x5f4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d054      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a44      	ldr	r2, [pc, #272]	@ (8005140 <HAL_DMA_Abort+0x5f8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d04f      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a43      	ldr	r2, [pc, #268]	@ (8005144 <HAL_DMA_Abort+0x5fc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d04a      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a41      	ldr	r2, [pc, #260]	@ (8005148 <HAL_DMA_Abort+0x600>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d045      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a40      	ldr	r2, [pc, #256]	@ (800514c <HAL_DMA_Abort+0x604>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d040      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a3e      	ldr	r2, [pc, #248]	@ (8005150 <HAL_DMA_Abort+0x608>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d03b      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a3d      	ldr	r2, [pc, #244]	@ (8005154 <HAL_DMA_Abort+0x60c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d036      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a3b      	ldr	r2, [pc, #236]	@ (8005158 <HAL_DMA_Abort+0x610>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d031      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a3a      	ldr	r2, [pc, #232]	@ (800515c <HAL_DMA_Abort+0x614>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d02c      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a38      	ldr	r2, [pc, #224]	@ (8005160 <HAL_DMA_Abort+0x618>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d027      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a37      	ldr	r2, [pc, #220]	@ (8005164 <HAL_DMA_Abort+0x61c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d022      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a35      	ldr	r2, [pc, #212]	@ (8005168 <HAL_DMA_Abort+0x620>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d01d      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a34      	ldr	r2, [pc, #208]	@ (800516c <HAL_DMA_Abort+0x624>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d018      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a32      	ldr	r2, [pc, #200]	@ (8005170 <HAL_DMA_Abort+0x628>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a31      	ldr	r2, [pc, #196]	@ (8005174 <HAL_DMA_Abort+0x62c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00e      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a2f      	ldr	r2, [pc, #188]	@ (8005178 <HAL_DMA_Abort+0x630>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d009      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2e      	ldr	r2, [pc, #184]	@ (800517c <HAL_DMA_Abort+0x634>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <HAL_DMA_Abort+0x58a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005180 <HAL_DMA_Abort+0x638>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d101      	bne.n	80050d6 <HAL_DMA_Abort+0x58e>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <HAL_DMA_Abort+0x590>
 80050d6:	2300      	movs	r3, #0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d015      	beq.n	8005108 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80050e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00c      	beq.n	8005108 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005106:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40020010 	.word	0x40020010
 8005128:	40020028 	.word	0x40020028
 800512c:	40020040 	.word	0x40020040
 8005130:	40020058 	.word	0x40020058
 8005134:	40020070 	.word	0x40020070
 8005138:	40020088 	.word	0x40020088
 800513c:	400200a0 	.word	0x400200a0
 8005140:	400200b8 	.word	0x400200b8
 8005144:	40020410 	.word	0x40020410
 8005148:	40020428 	.word	0x40020428
 800514c:	40020440 	.word	0x40020440
 8005150:	40020458 	.word	0x40020458
 8005154:	40020470 	.word	0x40020470
 8005158:	40020488 	.word	0x40020488
 800515c:	400204a0 	.word	0x400204a0
 8005160:	400204b8 	.word	0x400204b8
 8005164:	58025408 	.word	0x58025408
 8005168:	5802541c 	.word	0x5802541c
 800516c:	58025430 	.word	0x58025430
 8005170:	58025444 	.word	0x58025444
 8005174:	58025458 	.word	0x58025458
 8005178:	5802546c 	.word	0x5802546c
 800517c:	58025480 	.word	0x58025480
 8005180:	58025494 	.word	0x58025494

08005184 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	@ 0x28
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005190:	4b67      	ldr	r3, [pc, #412]	@ (8005330 <HAL_DMA_IRQHandler+0x1ac>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a67      	ldr	r2, [pc, #412]	@ (8005334 <HAL_DMA_IRQHandler+0x1b0>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	0a9b      	lsrs	r3, r3, #10
 800519c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a5f      	ldr	r2, [pc, #380]	@ (8005338 <HAL_DMA_IRQHandler+0x1b4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d04a      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a5d      	ldr	r2, [pc, #372]	@ (800533c <HAL_DMA_IRQHandler+0x1b8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d045      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a5c      	ldr	r2, [pc, #368]	@ (8005340 <HAL_DMA_IRQHandler+0x1bc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d040      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a5a      	ldr	r2, [pc, #360]	@ (8005344 <HAL_DMA_IRQHandler+0x1c0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d03b      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a59      	ldr	r2, [pc, #356]	@ (8005348 <HAL_DMA_IRQHandler+0x1c4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d036      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a57      	ldr	r2, [pc, #348]	@ (800534c <HAL_DMA_IRQHandler+0x1c8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d031      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a56      	ldr	r2, [pc, #344]	@ (8005350 <HAL_DMA_IRQHandler+0x1cc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d02c      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a54      	ldr	r2, [pc, #336]	@ (8005354 <HAL_DMA_IRQHandler+0x1d0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d027      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a53      	ldr	r2, [pc, #332]	@ (8005358 <HAL_DMA_IRQHandler+0x1d4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d022      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a51      	ldr	r2, [pc, #324]	@ (800535c <HAL_DMA_IRQHandler+0x1d8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01d      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a50      	ldr	r2, [pc, #320]	@ (8005360 <HAL_DMA_IRQHandler+0x1dc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d018      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a4e      	ldr	r2, [pc, #312]	@ (8005364 <HAL_DMA_IRQHandler+0x1e0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a4d      	ldr	r2, [pc, #308]	@ (8005368 <HAL_DMA_IRQHandler+0x1e4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a4b      	ldr	r2, [pc, #300]	@ (800536c <HAL_DMA_IRQHandler+0x1e8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a4a      	ldr	r2, [pc, #296]	@ (8005370 <HAL_DMA_IRQHandler+0x1ec>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_DMA_IRQHandler+0xd2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a48      	ldr	r2, [pc, #288]	@ (8005374 <HAL_DMA_IRQHandler+0x1f0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d101      	bne.n	800525a <HAL_DMA_IRQHandler+0xd6>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <HAL_DMA_IRQHandler+0xd8>
 800525a:	2300      	movs	r3, #0
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 842b 	beq.w	8005ab8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	2208      	movs	r2, #8
 800526c:	409a      	lsls	r2, r3
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	4013      	ands	r3, r2
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 80a2 	beq.w	80053bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a2e      	ldr	r2, [pc, #184]	@ (8005338 <HAL_DMA_IRQHandler+0x1b4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d04a      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a2d      	ldr	r2, [pc, #180]	@ (800533c <HAL_DMA_IRQHandler+0x1b8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d045      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a2b      	ldr	r2, [pc, #172]	@ (8005340 <HAL_DMA_IRQHandler+0x1bc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d040      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a2a      	ldr	r2, [pc, #168]	@ (8005344 <HAL_DMA_IRQHandler+0x1c0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d03b      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a28      	ldr	r2, [pc, #160]	@ (8005348 <HAL_DMA_IRQHandler+0x1c4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d036      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a27      	ldr	r2, [pc, #156]	@ (800534c <HAL_DMA_IRQHandler+0x1c8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d031      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a25      	ldr	r2, [pc, #148]	@ (8005350 <HAL_DMA_IRQHandler+0x1cc>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d02c      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a24      	ldr	r2, [pc, #144]	@ (8005354 <HAL_DMA_IRQHandler+0x1d0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d027      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a22      	ldr	r2, [pc, #136]	@ (8005358 <HAL_DMA_IRQHandler+0x1d4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d022      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a21      	ldr	r2, [pc, #132]	@ (800535c <HAL_DMA_IRQHandler+0x1d8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d01d      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005360 <HAL_DMA_IRQHandler+0x1dc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d018      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005364 <HAL_DMA_IRQHandler+0x1e0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d013      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005368 <HAL_DMA_IRQHandler+0x1e4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00e      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1b      	ldr	r2, [pc, #108]	@ (800536c <HAL_DMA_IRQHandler+0x1e8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d009      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a19      	ldr	r2, [pc, #100]	@ (8005370 <HAL_DMA_IRQHandler+0x1ec>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d004      	beq.n	8005318 <HAL_DMA_IRQHandler+0x194>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a18      	ldr	r2, [pc, #96]	@ (8005374 <HAL_DMA_IRQHandler+0x1f0>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d12f      	bne.n	8005378 <HAL_DMA_IRQHandler+0x1f4>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	bf14      	ite	ne
 8005326:	2301      	movne	r3, #1
 8005328:	2300      	moveq	r3, #0
 800532a:	b2db      	uxtb	r3, r3
 800532c:	e02e      	b.n	800538c <HAL_DMA_IRQHandler+0x208>
 800532e:	bf00      	nop
 8005330:	24000000 	.word	0x24000000
 8005334:	1b4e81b5 	.word	0x1b4e81b5
 8005338:	40020010 	.word	0x40020010
 800533c:	40020028 	.word	0x40020028
 8005340:	40020040 	.word	0x40020040
 8005344:	40020058 	.word	0x40020058
 8005348:	40020070 	.word	0x40020070
 800534c:	40020088 	.word	0x40020088
 8005350:	400200a0 	.word	0x400200a0
 8005354:	400200b8 	.word	0x400200b8
 8005358:	40020410 	.word	0x40020410
 800535c:	40020428 	.word	0x40020428
 8005360:	40020440 	.word	0x40020440
 8005364:	40020458 	.word	0x40020458
 8005368:	40020470 	.word	0x40020470
 800536c:	40020488 	.word	0x40020488
 8005370:	400204a0 	.word	0x400204a0
 8005374:	400204b8 	.word	0x400204b8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf14      	ite	ne
 8005386:	2301      	movne	r3, #1
 8005388:	2300      	moveq	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d015      	beq.n	80053bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0204 	bic.w	r2, r2, #4
 800539e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	2208      	movs	r2, #8
 80053aa:	409a      	lsls	r2, r3
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b4:	f043 0201 	orr.w	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c0:	f003 031f 	and.w	r3, r3, #31
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d06e      	beq.n	80054b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a69      	ldr	r2, [pc, #420]	@ (800557c <HAL_DMA_IRQHandler+0x3f8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d04a      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a67      	ldr	r2, [pc, #412]	@ (8005580 <HAL_DMA_IRQHandler+0x3fc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d045      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a66      	ldr	r2, [pc, #408]	@ (8005584 <HAL_DMA_IRQHandler+0x400>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d040      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a64      	ldr	r2, [pc, #400]	@ (8005588 <HAL_DMA_IRQHandler+0x404>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d03b      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a63      	ldr	r2, [pc, #396]	@ (800558c <HAL_DMA_IRQHandler+0x408>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d036      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a61      	ldr	r2, [pc, #388]	@ (8005590 <HAL_DMA_IRQHandler+0x40c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d031      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a60      	ldr	r2, [pc, #384]	@ (8005594 <HAL_DMA_IRQHandler+0x410>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d02c      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a5e      	ldr	r2, [pc, #376]	@ (8005598 <HAL_DMA_IRQHandler+0x414>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d027      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a5d      	ldr	r2, [pc, #372]	@ (800559c <HAL_DMA_IRQHandler+0x418>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d022      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a5b      	ldr	r2, [pc, #364]	@ (80055a0 <HAL_DMA_IRQHandler+0x41c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01d      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a5a      	ldr	r2, [pc, #360]	@ (80055a4 <HAL_DMA_IRQHandler+0x420>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d018      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a58      	ldr	r2, [pc, #352]	@ (80055a8 <HAL_DMA_IRQHandler+0x424>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a57      	ldr	r2, [pc, #348]	@ (80055ac <HAL_DMA_IRQHandler+0x428>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00e      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a55      	ldr	r2, [pc, #340]	@ (80055b0 <HAL_DMA_IRQHandler+0x42c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d009      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a54      	ldr	r2, [pc, #336]	@ (80055b4 <HAL_DMA_IRQHandler+0x430>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_DMA_IRQHandler+0x2ee>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a52      	ldr	r2, [pc, #328]	@ (80055b8 <HAL_DMA_IRQHandler+0x434>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10a      	bne.n	8005488 <HAL_DMA_IRQHandler+0x304>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547c:	2b00      	cmp	r3, #0
 800547e:	bf14      	ite	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2300      	moveq	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	e003      	b.n	8005490 <HAL_DMA_IRQHandler+0x30c>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2300      	movs	r3, #0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	2201      	movs	r2, #1
 800549e:	409a      	lsls	r2, r3
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a8:	f043 0202 	orr.w	r2, r3, #2
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	2204      	movs	r2, #4
 80054ba:	409a      	lsls	r2, r3
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	4013      	ands	r3, r2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 808f 	beq.w	80055e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a2c      	ldr	r2, [pc, #176]	@ (800557c <HAL_DMA_IRQHandler+0x3f8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d04a      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005580 <HAL_DMA_IRQHandler+0x3fc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d045      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a29      	ldr	r2, [pc, #164]	@ (8005584 <HAL_DMA_IRQHandler+0x400>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d040      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a27      	ldr	r2, [pc, #156]	@ (8005588 <HAL_DMA_IRQHandler+0x404>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d03b      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a26      	ldr	r2, [pc, #152]	@ (800558c <HAL_DMA_IRQHandler+0x408>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d036      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a24      	ldr	r2, [pc, #144]	@ (8005590 <HAL_DMA_IRQHandler+0x40c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d031      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a23      	ldr	r2, [pc, #140]	@ (8005594 <HAL_DMA_IRQHandler+0x410>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d02c      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a21      	ldr	r2, [pc, #132]	@ (8005598 <HAL_DMA_IRQHandler+0x414>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d027      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a20      	ldr	r2, [pc, #128]	@ (800559c <HAL_DMA_IRQHandler+0x418>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d022      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1e      	ldr	r2, [pc, #120]	@ (80055a0 <HAL_DMA_IRQHandler+0x41c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01d      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1d      	ldr	r2, [pc, #116]	@ (80055a4 <HAL_DMA_IRQHandler+0x420>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d018      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1b      	ldr	r2, [pc, #108]	@ (80055a8 <HAL_DMA_IRQHandler+0x424>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d013      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1a      	ldr	r2, [pc, #104]	@ (80055ac <HAL_DMA_IRQHandler+0x428>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00e      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a18      	ldr	r2, [pc, #96]	@ (80055b0 <HAL_DMA_IRQHandler+0x42c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d009      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a17      	ldr	r2, [pc, #92]	@ (80055b4 <HAL_DMA_IRQHandler+0x430>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d004      	beq.n	8005566 <HAL_DMA_IRQHandler+0x3e2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a15      	ldr	r2, [pc, #84]	@ (80055b8 <HAL_DMA_IRQHandler+0x434>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d12a      	bne.n	80055bc <HAL_DMA_IRQHandler+0x438>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e023      	b.n	80055c4 <HAL_DMA_IRQHandler+0x440>
 800557c:	40020010 	.word	0x40020010
 8005580:	40020028 	.word	0x40020028
 8005584:	40020040 	.word	0x40020040
 8005588:	40020058 	.word	0x40020058
 800558c:	40020070 	.word	0x40020070
 8005590:	40020088 	.word	0x40020088
 8005594:	400200a0 	.word	0x400200a0
 8005598:	400200b8 	.word	0x400200b8
 800559c:	40020410 	.word	0x40020410
 80055a0:	40020428 	.word	0x40020428
 80055a4:	40020440 	.word	0x40020440
 80055a8:	40020458 	.word	0x40020458
 80055ac:	40020470 	.word	0x40020470
 80055b0:	40020488 	.word	0x40020488
 80055b4:	400204a0 	.word	0x400204a0
 80055b8:	400204b8 	.word	0x400204b8
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00d      	beq.n	80055e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	2204      	movs	r2, #4
 80055d2:	409a      	lsls	r2, r3
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055dc:	f043 0204 	orr.w	r2, r3, #4
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	2210      	movs	r2, #16
 80055ee:	409a      	lsls	r2, r3
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80a6 	beq.w	8005746 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a85      	ldr	r2, [pc, #532]	@ (8005814 <HAL_DMA_IRQHandler+0x690>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d04a      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a83      	ldr	r2, [pc, #524]	@ (8005818 <HAL_DMA_IRQHandler+0x694>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d045      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a82      	ldr	r2, [pc, #520]	@ (800581c <HAL_DMA_IRQHandler+0x698>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d040      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a80      	ldr	r2, [pc, #512]	@ (8005820 <HAL_DMA_IRQHandler+0x69c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d03b      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a7f      	ldr	r2, [pc, #508]	@ (8005824 <HAL_DMA_IRQHandler+0x6a0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d036      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a7d      	ldr	r2, [pc, #500]	@ (8005828 <HAL_DMA_IRQHandler+0x6a4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d031      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a7c      	ldr	r2, [pc, #496]	@ (800582c <HAL_DMA_IRQHandler+0x6a8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d02c      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a7a      	ldr	r2, [pc, #488]	@ (8005830 <HAL_DMA_IRQHandler+0x6ac>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d027      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a79      	ldr	r2, [pc, #484]	@ (8005834 <HAL_DMA_IRQHandler+0x6b0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d022      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a77      	ldr	r2, [pc, #476]	@ (8005838 <HAL_DMA_IRQHandler+0x6b4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d01d      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a76      	ldr	r2, [pc, #472]	@ (800583c <HAL_DMA_IRQHandler+0x6b8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d018      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a74      	ldr	r2, [pc, #464]	@ (8005840 <HAL_DMA_IRQHandler+0x6bc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a73      	ldr	r2, [pc, #460]	@ (8005844 <HAL_DMA_IRQHandler+0x6c0>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00e      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a71      	ldr	r2, [pc, #452]	@ (8005848 <HAL_DMA_IRQHandler+0x6c4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a70      	ldr	r2, [pc, #448]	@ (800584c <HAL_DMA_IRQHandler+0x6c8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d004      	beq.n	800569a <HAL_DMA_IRQHandler+0x516>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a6e      	ldr	r2, [pc, #440]	@ (8005850 <HAL_DMA_IRQHandler+0x6cc>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d10a      	bne.n	80056b0 <HAL_DMA_IRQHandler+0x52c>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	bf14      	ite	ne
 80056a8:	2301      	movne	r3, #1
 80056aa:	2300      	moveq	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	e009      	b.n	80056c4 <HAL_DMA_IRQHandler+0x540>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	bf14      	ite	ne
 80056be:	2301      	movne	r3, #1
 80056c0:	2300      	moveq	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d03e      	beq.n	8005746 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	2210      	movs	r2, #16
 80056d2:	409a      	lsls	r2, r3
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d018      	beq.n	8005718 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d108      	bne.n	8005706 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d024      	beq.n	8005746 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
 8005704:	e01f      	b.n	8005746 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01b      	beq.n	8005746 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	4798      	blx	r3
 8005716:	e016      	b.n	8005746 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005722:	2b00      	cmp	r3, #0
 8005724:	d107      	bne.n	8005736 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0208 	bic.w	r2, r2, #8
 8005734:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	2220      	movs	r2, #32
 8005750:	409a      	lsls	r2, r3
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 8110 	beq.w	800597c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a2c      	ldr	r2, [pc, #176]	@ (8005814 <HAL_DMA_IRQHandler+0x690>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d04a      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a2b      	ldr	r2, [pc, #172]	@ (8005818 <HAL_DMA_IRQHandler+0x694>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d045      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a29      	ldr	r2, [pc, #164]	@ (800581c <HAL_DMA_IRQHandler+0x698>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d040      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a28      	ldr	r2, [pc, #160]	@ (8005820 <HAL_DMA_IRQHandler+0x69c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d03b      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a26      	ldr	r2, [pc, #152]	@ (8005824 <HAL_DMA_IRQHandler+0x6a0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d036      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a25      	ldr	r2, [pc, #148]	@ (8005828 <HAL_DMA_IRQHandler+0x6a4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d031      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a23      	ldr	r2, [pc, #140]	@ (800582c <HAL_DMA_IRQHandler+0x6a8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d02c      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a22      	ldr	r2, [pc, #136]	@ (8005830 <HAL_DMA_IRQHandler+0x6ac>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d027      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a20      	ldr	r2, [pc, #128]	@ (8005834 <HAL_DMA_IRQHandler+0x6b0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d022      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005838 <HAL_DMA_IRQHandler+0x6b4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d01d      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1d      	ldr	r2, [pc, #116]	@ (800583c <HAL_DMA_IRQHandler+0x6b8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d018      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005840 <HAL_DMA_IRQHandler+0x6bc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d013      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005844 <HAL_DMA_IRQHandler+0x6c0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00e      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a19      	ldr	r2, [pc, #100]	@ (8005848 <HAL_DMA_IRQHandler+0x6c4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d009      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a17      	ldr	r2, [pc, #92]	@ (800584c <HAL_DMA_IRQHandler+0x6c8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <HAL_DMA_IRQHandler+0x678>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a16      	ldr	r2, [pc, #88]	@ (8005850 <HAL_DMA_IRQHandler+0x6cc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d12b      	bne.n	8005854 <HAL_DMA_IRQHandler+0x6d0>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0310 	and.w	r3, r3, #16
 8005806:	2b00      	cmp	r3, #0
 8005808:	bf14      	ite	ne
 800580a:	2301      	movne	r3, #1
 800580c:	2300      	moveq	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	e02a      	b.n	8005868 <HAL_DMA_IRQHandler+0x6e4>
 8005812:	bf00      	nop
 8005814:	40020010 	.word	0x40020010
 8005818:	40020028 	.word	0x40020028
 800581c:	40020040 	.word	0x40020040
 8005820:	40020058 	.word	0x40020058
 8005824:	40020070 	.word	0x40020070
 8005828:	40020088 	.word	0x40020088
 800582c:	400200a0 	.word	0x400200a0
 8005830:	400200b8 	.word	0x400200b8
 8005834:	40020410 	.word	0x40020410
 8005838:	40020428 	.word	0x40020428
 800583c:	40020440 	.word	0x40020440
 8005840:	40020458 	.word	0x40020458
 8005844:	40020470 	.word	0x40020470
 8005848:	40020488 	.word	0x40020488
 800584c:	400204a0 	.word	0x400204a0
 8005850:	400204b8 	.word	0x400204b8
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	bf14      	ite	ne
 8005862:	2301      	movne	r3, #1
 8005864:	2300      	moveq	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8087 	beq.w	800597c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	2220      	movs	r2, #32
 8005878:	409a      	lsls	r2, r3
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b04      	cmp	r3, #4
 8005888:	d139      	bne.n	80058fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0216 	bic.w	r2, r2, #22
 8005898:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <HAL_DMA_IRQHandler+0x736>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0208 	bic.w	r2, r2, #8
 80058c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	223f      	movs	r2, #63	@ 0x3f
 80058d4:	409a      	lsls	r2, r3
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 834a 	beq.w	8005f88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	4798      	blx	r3
          }
          return;
 80058fc:	e344      	b.n	8005f88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d018      	beq.n	800593e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d108      	bne.n	800592c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591e:	2b00      	cmp	r3, #0
 8005920:	d02c      	beq.n	800597c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4798      	blx	r3
 800592a:	e027      	b.n	800597c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d023      	beq.n	800597c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
 800593c:	e01e      	b.n	800597c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10f      	bne.n	800596c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0210 	bic.w	r2, r2, #16
 800595a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8306 	beq.w	8005f92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8088 	beq.w	8005aa4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2204      	movs	r2, #4
 8005998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a7a      	ldr	r2, [pc, #488]	@ (8005b8c <HAL_DMA_IRQHandler+0xa08>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d04a      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a79      	ldr	r2, [pc, #484]	@ (8005b90 <HAL_DMA_IRQHandler+0xa0c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d045      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a77      	ldr	r2, [pc, #476]	@ (8005b94 <HAL_DMA_IRQHandler+0xa10>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d040      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a76      	ldr	r2, [pc, #472]	@ (8005b98 <HAL_DMA_IRQHandler+0xa14>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d03b      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a74      	ldr	r2, [pc, #464]	@ (8005b9c <HAL_DMA_IRQHandler+0xa18>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d036      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a73      	ldr	r2, [pc, #460]	@ (8005ba0 <HAL_DMA_IRQHandler+0xa1c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d031      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a71      	ldr	r2, [pc, #452]	@ (8005ba4 <HAL_DMA_IRQHandler+0xa20>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d02c      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a70      	ldr	r2, [pc, #448]	@ (8005ba8 <HAL_DMA_IRQHandler+0xa24>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d027      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a6e      	ldr	r2, [pc, #440]	@ (8005bac <HAL_DMA_IRQHandler+0xa28>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d022      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a6d      	ldr	r2, [pc, #436]	@ (8005bb0 <HAL_DMA_IRQHandler+0xa2c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d01d      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a6b      	ldr	r2, [pc, #428]	@ (8005bb4 <HAL_DMA_IRQHandler+0xa30>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d018      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a6a      	ldr	r2, [pc, #424]	@ (8005bb8 <HAL_DMA_IRQHandler+0xa34>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d013      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a68      	ldr	r2, [pc, #416]	@ (8005bbc <HAL_DMA_IRQHandler+0xa38>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00e      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a67      	ldr	r2, [pc, #412]	@ (8005bc0 <HAL_DMA_IRQHandler+0xa3c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d009      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a65      	ldr	r2, [pc, #404]	@ (8005bc4 <HAL_DMA_IRQHandler+0xa40>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d004      	beq.n	8005a3c <HAL_DMA_IRQHandler+0x8b8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a64      	ldr	r2, [pc, #400]	@ (8005bc8 <HAL_DMA_IRQHandler+0xa44>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d108      	bne.n	8005a4e <HAL_DMA_IRQHandler+0x8ca>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0201 	bic.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	e007      	b.n	8005a5e <HAL_DMA_IRQHandler+0x8da>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0201 	bic.w	r2, r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3301      	adds	r3, #1
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d307      	bcc.n	8005a7a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1f2      	bne.n	8005a5e <HAL_DMA_IRQHandler+0x8da>
 8005a78:	e000      	b.n	8005a7c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005a7a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d004      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2203      	movs	r2, #3
 8005a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005a92:	e003      	b.n	8005a9c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8272 	beq.w	8005f92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	4798      	blx	r3
 8005ab6:	e26c      	b.n	8005f92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a43      	ldr	r2, [pc, #268]	@ (8005bcc <HAL_DMA_IRQHandler+0xa48>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d022      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x984>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a42      	ldr	r2, [pc, #264]	@ (8005bd0 <HAL_DMA_IRQHandler+0xa4c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d01d      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x984>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a40      	ldr	r2, [pc, #256]	@ (8005bd4 <HAL_DMA_IRQHandler+0xa50>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d018      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x984>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a3f      	ldr	r2, [pc, #252]	@ (8005bd8 <HAL_DMA_IRQHandler+0xa54>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d013      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x984>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a3d      	ldr	r2, [pc, #244]	@ (8005bdc <HAL_DMA_IRQHandler+0xa58>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00e      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x984>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a3c      	ldr	r2, [pc, #240]	@ (8005be0 <HAL_DMA_IRQHandler+0xa5c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d009      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x984>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a3a      	ldr	r2, [pc, #232]	@ (8005be4 <HAL_DMA_IRQHandler+0xa60>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x984>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a39      	ldr	r2, [pc, #228]	@ (8005be8 <HAL_DMA_IRQHandler+0xa64>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d101      	bne.n	8005b0c <HAL_DMA_IRQHandler+0x988>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_DMA_IRQHandler+0x98a>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 823f 	beq.w	8005f92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b20:	f003 031f 	and.w	r3, r3, #31
 8005b24:	2204      	movs	r2, #4
 8005b26:	409a      	lsls	r2, r3
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 80cd 	beq.w	8005ccc <HAL_DMA_IRQHandler+0xb48>
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80c7 	beq.w	8005ccc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	2204      	movs	r2, #4
 8005b48:	409a      	lsls	r2, r3
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d049      	beq.n	8005bec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8210 	beq.w	8005f8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b74:	e20a      	b.n	8005f8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8206 	beq.w	8005f8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b88:	e200      	b.n	8005f8c <HAL_DMA_IRQHandler+0xe08>
 8005b8a:	bf00      	nop
 8005b8c:	40020010 	.word	0x40020010
 8005b90:	40020028 	.word	0x40020028
 8005b94:	40020040 	.word	0x40020040
 8005b98:	40020058 	.word	0x40020058
 8005b9c:	40020070 	.word	0x40020070
 8005ba0:	40020088 	.word	0x40020088
 8005ba4:	400200a0 	.word	0x400200a0
 8005ba8:	400200b8 	.word	0x400200b8
 8005bac:	40020410 	.word	0x40020410
 8005bb0:	40020428 	.word	0x40020428
 8005bb4:	40020440 	.word	0x40020440
 8005bb8:	40020458 	.word	0x40020458
 8005bbc:	40020470 	.word	0x40020470
 8005bc0:	40020488 	.word	0x40020488
 8005bc4:	400204a0 	.word	0x400204a0
 8005bc8:	400204b8 	.word	0x400204b8
 8005bcc:	58025408 	.word	0x58025408
 8005bd0:	5802541c 	.word	0x5802541c
 8005bd4:	58025430 	.word	0x58025430
 8005bd8:	58025444 	.word	0x58025444
 8005bdc:	58025458 	.word	0x58025458
 8005be0:	5802546c 	.word	0x5802546c
 8005be4:	58025480 	.word	0x58025480
 8005be8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d160      	bne.n	8005cb8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a7f      	ldr	r2, [pc, #508]	@ (8005df8 <HAL_DMA_IRQHandler+0xc74>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d04a      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a7d      	ldr	r2, [pc, #500]	@ (8005dfc <HAL_DMA_IRQHandler+0xc78>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d045      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a7c      	ldr	r2, [pc, #496]	@ (8005e00 <HAL_DMA_IRQHandler+0xc7c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d040      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a7a      	ldr	r2, [pc, #488]	@ (8005e04 <HAL_DMA_IRQHandler+0xc80>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d03b      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a79      	ldr	r2, [pc, #484]	@ (8005e08 <HAL_DMA_IRQHandler+0xc84>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d036      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a77      	ldr	r2, [pc, #476]	@ (8005e0c <HAL_DMA_IRQHandler+0xc88>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d031      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a76      	ldr	r2, [pc, #472]	@ (8005e10 <HAL_DMA_IRQHandler+0xc8c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d02c      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a74      	ldr	r2, [pc, #464]	@ (8005e14 <HAL_DMA_IRQHandler+0xc90>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d027      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a73      	ldr	r2, [pc, #460]	@ (8005e18 <HAL_DMA_IRQHandler+0xc94>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d022      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a71      	ldr	r2, [pc, #452]	@ (8005e1c <HAL_DMA_IRQHandler+0xc98>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d01d      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a70      	ldr	r2, [pc, #448]	@ (8005e20 <HAL_DMA_IRQHandler+0xc9c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d018      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a6e      	ldr	r2, [pc, #440]	@ (8005e24 <HAL_DMA_IRQHandler+0xca0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a6d      	ldr	r2, [pc, #436]	@ (8005e28 <HAL_DMA_IRQHandler+0xca4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00e      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a6b      	ldr	r2, [pc, #428]	@ (8005e2c <HAL_DMA_IRQHandler+0xca8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a6a      	ldr	r2, [pc, #424]	@ (8005e30 <HAL_DMA_IRQHandler+0xcac>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_DMA_IRQHandler+0xb12>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a68      	ldr	r2, [pc, #416]	@ (8005e34 <HAL_DMA_IRQHandler+0xcb0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d108      	bne.n	8005ca8 <HAL_DMA_IRQHandler+0xb24>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0208 	bic.w	r2, r2, #8
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	e007      	b.n	8005cb8 <HAL_DMA_IRQHandler+0xb34>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0204 	bic.w	r2, r2, #4
 8005cb6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8165 	beq.w	8005f8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cca:	e15f      	b.n	8005f8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd0:	f003 031f 	and.w	r3, r3, #31
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	409a      	lsls	r2, r3
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 80c5 	beq.w	8005e6c <HAL_DMA_IRQHandler+0xce8>
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80bf 	beq.w	8005e6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf2:	f003 031f 	and.w	r3, r3, #31
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	409a      	lsls	r2, r3
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d018      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 813a 	beq.w	8005f90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d24:	e134      	b.n	8005f90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 8130 	beq.w	8005f90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d38:	e12a      	b.n	8005f90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f003 0320 	and.w	r3, r3, #32
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f040 8089 	bne.w	8005e58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8005df8 <HAL_DMA_IRQHandler+0xc74>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d04a      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a29      	ldr	r2, [pc, #164]	@ (8005dfc <HAL_DMA_IRQHandler+0xc78>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d045      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a28      	ldr	r2, [pc, #160]	@ (8005e00 <HAL_DMA_IRQHandler+0xc7c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d040      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a26      	ldr	r2, [pc, #152]	@ (8005e04 <HAL_DMA_IRQHandler+0xc80>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d03b      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a25      	ldr	r2, [pc, #148]	@ (8005e08 <HAL_DMA_IRQHandler+0xc84>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d036      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a23      	ldr	r2, [pc, #140]	@ (8005e0c <HAL_DMA_IRQHandler+0xc88>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d031      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a22      	ldr	r2, [pc, #136]	@ (8005e10 <HAL_DMA_IRQHandler+0xc8c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d02c      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a20      	ldr	r2, [pc, #128]	@ (8005e14 <HAL_DMA_IRQHandler+0xc90>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d027      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005e18 <HAL_DMA_IRQHandler+0xc94>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d022      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e1c <HAL_DMA_IRQHandler+0xc98>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01d      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1c      	ldr	r2, [pc, #112]	@ (8005e20 <HAL_DMA_IRQHandler+0xc9c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e24 <HAL_DMA_IRQHandler+0xca0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a19      	ldr	r2, [pc, #100]	@ (8005e28 <HAL_DMA_IRQHandler+0xca4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a17      	ldr	r2, [pc, #92]	@ (8005e2c <HAL_DMA_IRQHandler+0xca8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a16      	ldr	r2, [pc, #88]	@ (8005e30 <HAL_DMA_IRQHandler+0xcac>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_DMA_IRQHandler+0xc62>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a14      	ldr	r2, [pc, #80]	@ (8005e34 <HAL_DMA_IRQHandler+0xcb0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d128      	bne.n	8005e38 <HAL_DMA_IRQHandler+0xcb4>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0214 	bic.w	r2, r2, #20
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	e027      	b.n	8005e48 <HAL_DMA_IRQHandler+0xcc4>
 8005df8:	40020010 	.word	0x40020010
 8005dfc:	40020028 	.word	0x40020028
 8005e00:	40020040 	.word	0x40020040
 8005e04:	40020058 	.word	0x40020058
 8005e08:	40020070 	.word	0x40020070
 8005e0c:	40020088 	.word	0x40020088
 8005e10:	400200a0 	.word	0x400200a0
 8005e14:	400200b8 	.word	0x400200b8
 8005e18:	40020410 	.word	0x40020410
 8005e1c:	40020428 	.word	0x40020428
 8005e20:	40020440 	.word	0x40020440
 8005e24:	40020458 	.word	0x40020458
 8005e28:	40020470 	.word	0x40020470
 8005e2c:	40020488 	.word	0x40020488
 8005e30:	400204a0 	.word	0x400204a0
 8005e34:	400204b8 	.word	0x400204b8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 020a 	bic.w	r2, r2, #10
 8005e46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8097 	beq.w	8005f90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e6a:	e091      	b.n	8005f90 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e70:	f003 031f 	and.w	r3, r3, #31
 8005e74:	2208      	movs	r2, #8
 8005e76:	409a      	lsls	r2, r3
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8088 	beq.w	8005f92 <HAL_DMA_IRQHandler+0xe0e>
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 8082 	beq.w	8005f92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a41      	ldr	r2, [pc, #260]	@ (8005f98 <HAL_DMA_IRQHandler+0xe14>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d04a      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f9c <HAL_DMA_IRQHandler+0xe18>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d045      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a3e      	ldr	r2, [pc, #248]	@ (8005fa0 <HAL_DMA_IRQHandler+0xe1c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d040      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8005fa4 <HAL_DMA_IRQHandler+0xe20>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d03b      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a3b      	ldr	r2, [pc, #236]	@ (8005fa8 <HAL_DMA_IRQHandler+0xe24>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d036      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a39      	ldr	r2, [pc, #228]	@ (8005fac <HAL_DMA_IRQHandler+0xe28>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d031      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a38      	ldr	r2, [pc, #224]	@ (8005fb0 <HAL_DMA_IRQHandler+0xe2c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d02c      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a36      	ldr	r2, [pc, #216]	@ (8005fb4 <HAL_DMA_IRQHandler+0xe30>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d027      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a35      	ldr	r2, [pc, #212]	@ (8005fb8 <HAL_DMA_IRQHandler+0xe34>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d022      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a33      	ldr	r2, [pc, #204]	@ (8005fbc <HAL_DMA_IRQHandler+0xe38>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d01d      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a32      	ldr	r2, [pc, #200]	@ (8005fc0 <HAL_DMA_IRQHandler+0xe3c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d018      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a30      	ldr	r2, [pc, #192]	@ (8005fc4 <HAL_DMA_IRQHandler+0xe40>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d013      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8005fc8 <HAL_DMA_IRQHandler+0xe44>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00e      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a2d      	ldr	r2, [pc, #180]	@ (8005fcc <HAL_DMA_IRQHandler+0xe48>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d009      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8005fd0 <HAL_DMA_IRQHandler+0xe4c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d004      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xdaa>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a2a      	ldr	r2, [pc, #168]	@ (8005fd4 <HAL_DMA_IRQHandler+0xe50>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d108      	bne.n	8005f40 <HAL_DMA_IRQHandler+0xdbc>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 021c 	bic.w	r2, r2, #28
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	e007      	b.n	8005f50 <HAL_DMA_IRQHandler+0xdcc>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 020e 	bic.w	r2, r2, #14
 8005f4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2201      	movs	r2, #1
 8005f5a:	409a      	lsls	r2, r3
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d009      	beq.n	8005f92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	4798      	blx	r3
 8005f86:	e004      	b.n	8005f92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005f88:	bf00      	nop
 8005f8a:	e002      	b.n	8005f92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f8c:	bf00      	nop
 8005f8e:	e000      	b.n	8005f92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f92:	3728      	adds	r7, #40	@ 0x28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40020010 	.word	0x40020010
 8005f9c:	40020028 	.word	0x40020028
 8005fa0:	40020040 	.word	0x40020040
 8005fa4:	40020058 	.word	0x40020058
 8005fa8:	40020070 	.word	0x40020070
 8005fac:	40020088 	.word	0x40020088
 8005fb0:	400200a0 	.word	0x400200a0
 8005fb4:	400200b8 	.word	0x400200b8
 8005fb8:	40020410 	.word	0x40020410
 8005fbc:	40020428 	.word	0x40020428
 8005fc0:	40020440 	.word	0x40020440
 8005fc4:	40020458 	.word	0x40020458
 8005fc8:	40020470 	.word	0x40020470
 8005fcc:	40020488 	.word	0x40020488
 8005fd0:	400204a0 	.word	0x400204a0
 8005fd4:	400204b8 	.word	0x400204b8

08005fd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a7f      	ldr	r2, [pc, #508]	@ (80061f4 <DMA_SetConfig+0x21c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d072      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a7d      	ldr	r2, [pc, #500]	@ (80061f8 <DMA_SetConfig+0x220>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d06d      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a7c      	ldr	r2, [pc, #496]	@ (80061fc <DMA_SetConfig+0x224>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d068      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a7a      	ldr	r2, [pc, #488]	@ (8006200 <DMA_SetConfig+0x228>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d063      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a79      	ldr	r2, [pc, #484]	@ (8006204 <DMA_SetConfig+0x22c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d05e      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a77      	ldr	r2, [pc, #476]	@ (8006208 <DMA_SetConfig+0x230>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d059      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a76      	ldr	r2, [pc, #472]	@ (800620c <DMA_SetConfig+0x234>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d054      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a74      	ldr	r2, [pc, #464]	@ (8006210 <DMA_SetConfig+0x238>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d04f      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a73      	ldr	r2, [pc, #460]	@ (8006214 <DMA_SetConfig+0x23c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d04a      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a71      	ldr	r2, [pc, #452]	@ (8006218 <DMA_SetConfig+0x240>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d045      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a70      	ldr	r2, [pc, #448]	@ (800621c <DMA_SetConfig+0x244>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d040      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a6e      	ldr	r2, [pc, #440]	@ (8006220 <DMA_SetConfig+0x248>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d03b      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a6d      	ldr	r2, [pc, #436]	@ (8006224 <DMA_SetConfig+0x24c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d036      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a6b      	ldr	r2, [pc, #428]	@ (8006228 <DMA_SetConfig+0x250>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d031      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a6a      	ldr	r2, [pc, #424]	@ (800622c <DMA_SetConfig+0x254>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d02c      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a68      	ldr	r2, [pc, #416]	@ (8006230 <DMA_SetConfig+0x258>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d027      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a67      	ldr	r2, [pc, #412]	@ (8006234 <DMA_SetConfig+0x25c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d022      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a65      	ldr	r2, [pc, #404]	@ (8006238 <DMA_SetConfig+0x260>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d01d      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a64      	ldr	r2, [pc, #400]	@ (800623c <DMA_SetConfig+0x264>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d018      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a62      	ldr	r2, [pc, #392]	@ (8006240 <DMA_SetConfig+0x268>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a61      	ldr	r2, [pc, #388]	@ (8006244 <DMA_SetConfig+0x26c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00e      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a5f      	ldr	r2, [pc, #380]	@ (8006248 <DMA_SetConfig+0x270>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d009      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a5e      	ldr	r2, [pc, #376]	@ (800624c <DMA_SetConfig+0x274>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d004      	beq.n	80060e2 <DMA_SetConfig+0x10a>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a5c      	ldr	r2, [pc, #368]	@ (8006250 <DMA_SetConfig+0x278>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d101      	bne.n	80060e6 <DMA_SetConfig+0x10e>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <DMA_SetConfig+0x110>
 80060e6:	2300      	movs	r3, #0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00d      	beq.n	8006108 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80060f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d004      	beq.n	8006108 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006106:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a39      	ldr	r2, [pc, #228]	@ (80061f4 <DMA_SetConfig+0x21c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d04a      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a38      	ldr	r2, [pc, #224]	@ (80061f8 <DMA_SetConfig+0x220>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d045      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a36      	ldr	r2, [pc, #216]	@ (80061fc <DMA_SetConfig+0x224>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d040      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a35      	ldr	r2, [pc, #212]	@ (8006200 <DMA_SetConfig+0x228>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d03b      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a33      	ldr	r2, [pc, #204]	@ (8006204 <DMA_SetConfig+0x22c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d036      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a32      	ldr	r2, [pc, #200]	@ (8006208 <DMA_SetConfig+0x230>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d031      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a30      	ldr	r2, [pc, #192]	@ (800620c <DMA_SetConfig+0x234>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d02c      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a2f      	ldr	r2, [pc, #188]	@ (8006210 <DMA_SetConfig+0x238>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d027      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a2d      	ldr	r2, [pc, #180]	@ (8006214 <DMA_SetConfig+0x23c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d022      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a2c      	ldr	r2, [pc, #176]	@ (8006218 <DMA_SetConfig+0x240>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d01d      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a2a      	ldr	r2, [pc, #168]	@ (800621c <DMA_SetConfig+0x244>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d018      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a29      	ldr	r2, [pc, #164]	@ (8006220 <DMA_SetConfig+0x248>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d013      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a27      	ldr	r2, [pc, #156]	@ (8006224 <DMA_SetConfig+0x24c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00e      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a26      	ldr	r2, [pc, #152]	@ (8006228 <DMA_SetConfig+0x250>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d009      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a24      	ldr	r2, [pc, #144]	@ (800622c <DMA_SetConfig+0x254>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d004      	beq.n	80061a8 <DMA_SetConfig+0x1d0>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a23      	ldr	r2, [pc, #140]	@ (8006230 <DMA_SetConfig+0x258>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d101      	bne.n	80061ac <DMA_SetConfig+0x1d4>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e000      	b.n	80061ae <DMA_SetConfig+0x1d6>
 80061ac:	2300      	movs	r3, #0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d059      	beq.n	8006266 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b6:	f003 031f 	and.w	r3, r3, #31
 80061ba:	223f      	movs	r2, #63	@ 0x3f
 80061bc:	409a      	lsls	r2, r3
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80061d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2b40      	cmp	r3, #64	@ 0x40
 80061e0:	d138      	bne.n	8006254 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061f2:	e086      	b.n	8006302 <DMA_SetConfig+0x32a>
 80061f4:	40020010 	.word	0x40020010
 80061f8:	40020028 	.word	0x40020028
 80061fc:	40020040 	.word	0x40020040
 8006200:	40020058 	.word	0x40020058
 8006204:	40020070 	.word	0x40020070
 8006208:	40020088 	.word	0x40020088
 800620c:	400200a0 	.word	0x400200a0
 8006210:	400200b8 	.word	0x400200b8
 8006214:	40020410 	.word	0x40020410
 8006218:	40020428 	.word	0x40020428
 800621c:	40020440 	.word	0x40020440
 8006220:	40020458 	.word	0x40020458
 8006224:	40020470 	.word	0x40020470
 8006228:	40020488 	.word	0x40020488
 800622c:	400204a0 	.word	0x400204a0
 8006230:	400204b8 	.word	0x400204b8
 8006234:	58025408 	.word	0x58025408
 8006238:	5802541c 	.word	0x5802541c
 800623c:	58025430 	.word	0x58025430
 8006240:	58025444 	.word	0x58025444
 8006244:	58025458 	.word	0x58025458
 8006248:	5802546c 	.word	0x5802546c
 800624c:	58025480 	.word	0x58025480
 8006250:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	60da      	str	r2, [r3, #12]
}
 8006264:	e04d      	b.n	8006302 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a29      	ldr	r2, [pc, #164]	@ (8006310 <DMA_SetConfig+0x338>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d022      	beq.n	80062b6 <DMA_SetConfig+0x2de>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a27      	ldr	r2, [pc, #156]	@ (8006314 <DMA_SetConfig+0x33c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d01d      	beq.n	80062b6 <DMA_SetConfig+0x2de>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a26      	ldr	r2, [pc, #152]	@ (8006318 <DMA_SetConfig+0x340>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d018      	beq.n	80062b6 <DMA_SetConfig+0x2de>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a24      	ldr	r2, [pc, #144]	@ (800631c <DMA_SetConfig+0x344>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d013      	beq.n	80062b6 <DMA_SetConfig+0x2de>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a23      	ldr	r2, [pc, #140]	@ (8006320 <DMA_SetConfig+0x348>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00e      	beq.n	80062b6 <DMA_SetConfig+0x2de>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a21      	ldr	r2, [pc, #132]	@ (8006324 <DMA_SetConfig+0x34c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d009      	beq.n	80062b6 <DMA_SetConfig+0x2de>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a20      	ldr	r2, [pc, #128]	@ (8006328 <DMA_SetConfig+0x350>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d004      	beq.n	80062b6 <DMA_SetConfig+0x2de>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1e      	ldr	r2, [pc, #120]	@ (800632c <DMA_SetConfig+0x354>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d101      	bne.n	80062ba <DMA_SetConfig+0x2e2>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <DMA_SetConfig+0x2e4>
 80062ba:	2300      	movs	r3, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d020      	beq.n	8006302 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	2201      	movs	r2, #1
 80062ca:	409a      	lsls	r2, r3
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b40      	cmp	r3, #64	@ 0x40
 80062de:	d108      	bne.n	80062f2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	60da      	str	r2, [r3, #12]
}
 80062f0:	e007      	b.n	8006302 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	60da      	str	r2, [r3, #12]
}
 8006302:	bf00      	nop
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	58025408 	.word	0x58025408
 8006314:	5802541c 	.word	0x5802541c
 8006318:	58025430 	.word	0x58025430
 800631c:	58025444 	.word	0x58025444
 8006320:	58025458 	.word	0x58025458
 8006324:	5802546c 	.word	0x5802546c
 8006328:	58025480 	.word	0x58025480
 800632c:	58025494 	.word	0x58025494

08006330 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a42      	ldr	r2, [pc, #264]	@ (8006448 <DMA_CalcBaseAndBitshift+0x118>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d04a      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a41      	ldr	r2, [pc, #260]	@ (800644c <DMA_CalcBaseAndBitshift+0x11c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d045      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a3f      	ldr	r2, [pc, #252]	@ (8006450 <DMA_CalcBaseAndBitshift+0x120>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d040      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a3e      	ldr	r2, [pc, #248]	@ (8006454 <DMA_CalcBaseAndBitshift+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d03b      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a3c      	ldr	r2, [pc, #240]	@ (8006458 <DMA_CalcBaseAndBitshift+0x128>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d036      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a3b      	ldr	r2, [pc, #236]	@ (800645c <DMA_CalcBaseAndBitshift+0x12c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d031      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a39      	ldr	r2, [pc, #228]	@ (8006460 <DMA_CalcBaseAndBitshift+0x130>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d02c      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a38      	ldr	r2, [pc, #224]	@ (8006464 <DMA_CalcBaseAndBitshift+0x134>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d027      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a36      	ldr	r2, [pc, #216]	@ (8006468 <DMA_CalcBaseAndBitshift+0x138>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d022      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a35      	ldr	r2, [pc, #212]	@ (800646c <DMA_CalcBaseAndBitshift+0x13c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d01d      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a33      	ldr	r2, [pc, #204]	@ (8006470 <DMA_CalcBaseAndBitshift+0x140>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d018      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a32      	ldr	r2, [pc, #200]	@ (8006474 <DMA_CalcBaseAndBitshift+0x144>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a30      	ldr	r2, [pc, #192]	@ (8006478 <DMA_CalcBaseAndBitshift+0x148>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00e      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a2f      	ldr	r2, [pc, #188]	@ (800647c <DMA_CalcBaseAndBitshift+0x14c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d009      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006480 <DMA_CalcBaseAndBitshift+0x150>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d004      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006484 <DMA_CalcBaseAndBitshift+0x154>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d101      	bne.n	80063dc <DMA_CalcBaseAndBitshift+0xac>
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <DMA_CalcBaseAndBitshift+0xae>
 80063dc:	2300      	movs	r3, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d024      	beq.n	800642c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	3b10      	subs	r3, #16
 80063ea:	4a27      	ldr	r2, [pc, #156]	@ (8006488 <DMA_CalcBaseAndBitshift+0x158>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	091b      	lsrs	r3, r3, #4
 80063f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	4a24      	ldr	r2, [pc, #144]	@ (800648c <DMA_CalcBaseAndBitshift+0x15c>)
 80063fc:	5cd3      	ldrb	r3, [r2, r3]
 80063fe:	461a      	mov	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b03      	cmp	r3, #3
 8006408:	d908      	bls.n	800641c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	4b1f      	ldr	r3, [pc, #124]	@ (8006490 <DMA_CalcBaseAndBitshift+0x160>)
 8006412:	4013      	ands	r3, r2
 8006414:	1d1a      	adds	r2, r3, #4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	659a      	str	r2, [r3, #88]	@ 0x58
 800641a:	e00d      	b.n	8006438 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	4b1b      	ldr	r3, [pc, #108]	@ (8006490 <DMA_CalcBaseAndBitshift+0x160>)
 8006424:	4013      	ands	r3, r2
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6593      	str	r3, [r2, #88]	@ 0x58
 800642a:	e005      	b.n	8006438 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40020010 	.word	0x40020010
 800644c:	40020028 	.word	0x40020028
 8006450:	40020040 	.word	0x40020040
 8006454:	40020058 	.word	0x40020058
 8006458:	40020070 	.word	0x40020070
 800645c:	40020088 	.word	0x40020088
 8006460:	400200a0 	.word	0x400200a0
 8006464:	400200b8 	.word	0x400200b8
 8006468:	40020410 	.word	0x40020410
 800646c:	40020428 	.word	0x40020428
 8006470:	40020440 	.word	0x40020440
 8006474:	40020458 	.word	0x40020458
 8006478:	40020470 	.word	0x40020470
 800647c:	40020488 	.word	0x40020488
 8006480:	400204a0 	.word	0x400204a0
 8006484:	400204b8 	.word	0x400204b8
 8006488:	aaaaaaab 	.word	0xaaaaaaab
 800648c:	0802005c 	.word	0x0802005c
 8006490:	fffffc00 	.word	0xfffffc00

08006494 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d120      	bne.n	80064ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d858      	bhi.n	8006562 <DMA_CheckFifoParam+0xce>
 80064b0:	a201      	add	r2, pc, #4	@ (adr r2, 80064b8 <DMA_CheckFifoParam+0x24>)
 80064b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b6:	bf00      	nop
 80064b8:	080064c9 	.word	0x080064c9
 80064bc:	080064db 	.word	0x080064db
 80064c0:	080064c9 	.word	0x080064c9
 80064c4:	08006563 	.word	0x08006563
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d048      	beq.n	8006566 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064d8:	e045      	b.n	8006566 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064de:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80064e2:	d142      	bne.n	800656a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064e8:	e03f      	b.n	800656a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064f2:	d123      	bne.n	800653c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d838      	bhi.n	800656e <DMA_CheckFifoParam+0xda>
 80064fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006504 <DMA_CheckFifoParam+0x70>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	08006515 	.word	0x08006515
 8006508:	0800651b 	.word	0x0800651b
 800650c:	08006515 	.word	0x08006515
 8006510:	0800652d 	.word	0x0800652d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	73fb      	strb	r3, [r7, #15]
        break;
 8006518:	e030      	b.n	800657c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d025      	beq.n	8006572 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800652a:	e022      	b.n	8006572 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006530:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006534:	d11f      	bne.n	8006576 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800653a:	e01c      	b.n	8006576 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	2b02      	cmp	r3, #2
 8006542:	d902      	bls.n	800654a <DMA_CheckFifoParam+0xb6>
 8006544:	2b03      	cmp	r3, #3
 8006546:	d003      	beq.n	8006550 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006548:	e018      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	73fb      	strb	r3, [r7, #15]
        break;
 800654e:	e015      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006554:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00e      	beq.n	800657a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	73fb      	strb	r3, [r7, #15]
    break;
 8006560:	e00b      	b.n	800657a <DMA_CheckFifoParam+0xe6>
        break;
 8006562:	bf00      	nop
 8006564:	e00a      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        break;
 8006566:	bf00      	nop
 8006568:	e008      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        break;
 800656a:	bf00      	nop
 800656c:	e006      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        break;
 800656e:	bf00      	nop
 8006570:	e004      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        break;
 8006572:	bf00      	nop
 8006574:	e002      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        break;
 8006576:	bf00      	nop
 8006578:	e000      	b.n	800657c <DMA_CheckFifoParam+0xe8>
    break;
 800657a:	bf00      	nop
    }
  }

  return status;
 800657c:	7bfb      	ldrb	r3, [r7, #15]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop

0800658c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a38      	ldr	r2, [pc, #224]	@ (8006680 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d022      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a36      	ldr	r2, [pc, #216]	@ (8006684 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d01d      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a35      	ldr	r2, [pc, #212]	@ (8006688 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d018      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a33      	ldr	r2, [pc, #204]	@ (800668c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d013      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a32      	ldr	r2, [pc, #200]	@ (8006690 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00e      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a30      	ldr	r2, [pc, #192]	@ (8006694 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d009      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a2f      	ldr	r2, [pc, #188]	@ (8006698 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d004      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a2d      	ldr	r2, [pc, #180]	@ (800669c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d101      	bne.n	80065ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80065ee:	2300      	movs	r3, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01a      	beq.n	800662a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	3b08      	subs	r3, #8
 80065fc:	4a28      	ldr	r2, [pc, #160]	@ (80066a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	091b      	lsrs	r3, r3, #4
 8006604:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4b26      	ldr	r3, [pc, #152]	@ (80066a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	461a      	mov	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a24      	ldr	r2, [pc, #144]	@ (80066a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006618:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f003 031f 	and.w	r3, r3, #31
 8006620:	2201      	movs	r2, #1
 8006622:	409a      	lsls	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006628:	e024      	b.n	8006674 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	3b10      	subs	r3, #16
 8006632:	4a1e      	ldr	r2, [pc, #120]	@ (80066ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006634:	fba2 2303 	umull	r2, r3, r2, r3
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4a1c      	ldr	r2, [pc, #112]	@ (80066b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d806      	bhi.n	8006652 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4a1b      	ldr	r2, [pc, #108]	@ (80066b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d902      	bls.n	8006652 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3308      	adds	r3, #8
 8006650:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4b18      	ldr	r3, [pc, #96]	@ (80066b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	461a      	mov	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a16      	ldr	r2, [pc, #88]	@ (80066bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006664:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f003 031f 	and.w	r3, r3, #31
 800666c:	2201      	movs	r2, #1
 800666e:	409a      	lsls	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	58025408 	.word	0x58025408
 8006684:	5802541c 	.word	0x5802541c
 8006688:	58025430 	.word	0x58025430
 800668c:	58025444 	.word	0x58025444
 8006690:	58025458 	.word	0x58025458
 8006694:	5802546c 	.word	0x5802546c
 8006698:	58025480 	.word	0x58025480
 800669c:	58025494 	.word	0x58025494
 80066a0:	cccccccd 	.word	0xcccccccd
 80066a4:	16009600 	.word	0x16009600
 80066a8:	58025880 	.word	0x58025880
 80066ac:	aaaaaaab 	.word	0xaaaaaaab
 80066b0:	400204b8 	.word	0x400204b8
 80066b4:	4002040f 	.word	0x4002040f
 80066b8:	10008200 	.word	0x10008200
 80066bc:	40020880 	.word	0x40020880

080066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d04a      	beq.n	800676c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d847      	bhi.n	800676c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a25      	ldr	r2, [pc, #148]	@ (8006778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d022      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a24      	ldr	r2, [pc, #144]	@ (800677c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d01d      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a22      	ldr	r2, [pc, #136]	@ (8006780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d018      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a21      	ldr	r2, [pc, #132]	@ (8006784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d013      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1f      	ldr	r2, [pc, #124]	@ (8006788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00e      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1e      	ldr	r2, [pc, #120]	@ (800678c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d009      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1c      	ldr	r2, [pc, #112]	@ (8006790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1b      	ldr	r2, [pc, #108]	@ (8006794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d101      	bne.n	8006730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006730:	2300      	movs	r3, #0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4b17      	ldr	r3, [pc, #92]	@ (8006798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	461a      	mov	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a15      	ldr	r2, [pc, #84]	@ (800679c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006748:	671a      	str	r2, [r3, #112]	@ 0x70
 800674a:	e009      	b.n	8006760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4b14      	ldr	r3, [pc, #80]	@ (80067a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	461a      	mov	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a11      	ldr	r2, [pc, #68]	@ (80067a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800675e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3b01      	subs	r3, #1
 8006764:	2201      	movs	r2, #1
 8006766:	409a      	lsls	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800676c:	bf00      	nop
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	58025408 	.word	0x58025408
 800677c:	5802541c 	.word	0x5802541c
 8006780:	58025430 	.word	0x58025430
 8006784:	58025444 	.word	0x58025444
 8006788:	58025458 	.word	0x58025458
 800678c:	5802546c 	.word	0x5802546c
 8006790:	58025480 	.word	0x58025480
 8006794:	58025494 	.word	0x58025494
 8006798:	1600963f 	.word	0x1600963f
 800679c:	58025940 	.word	0x58025940
 80067a0:	1000823f 	.word	0x1000823f
 80067a4:	40020940 	.word	0x40020940

080067a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b089      	sub	sp, #36	@ 0x24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80067b6:	4b86      	ldr	r3, [pc, #536]	@ (80069d0 <HAL_GPIO_Init+0x228>)
 80067b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80067ba:	e18c      	b.n	8006ad6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	2101      	movs	r1, #1
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	fa01 f303 	lsl.w	r3, r1, r3
 80067c8:	4013      	ands	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 817e 	beq.w	8006ad0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f003 0303 	and.w	r3, r3, #3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d005      	beq.n	80067ec <HAL_GPIO_Init+0x44>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 0303 	and.w	r3, r3, #3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d130      	bne.n	800684e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	2203      	movs	r2, #3
 80067f8:	fa02 f303 	lsl.w	r3, r2, r3
 80067fc:	43db      	mvns	r3, r3
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	4013      	ands	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	fa02 f303 	lsl.w	r3, r2, r3
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	4313      	orrs	r3, r2
 8006814:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006822:	2201      	movs	r2, #1
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	fa02 f303 	lsl.w	r3, r2, r3
 800682a:	43db      	mvns	r3, r3
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	4013      	ands	r3, r2
 8006830:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	091b      	lsrs	r3, r3, #4
 8006838:	f003 0201 	and.w	r2, r3, #1
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	fa02 f303 	lsl.w	r3, r2, r3
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	4313      	orrs	r3, r2
 8006846:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	2b03      	cmp	r3, #3
 8006858:	d017      	beq.n	800688a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	2203      	movs	r2, #3
 8006866:	fa02 f303 	lsl.w	r3, r2, r3
 800686a:	43db      	mvns	r3, r3
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	4013      	ands	r3, r2
 8006870:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	fa02 f303 	lsl.w	r3, r2, r3
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	4313      	orrs	r3, r2
 8006882:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f003 0303 	and.w	r3, r3, #3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d123      	bne.n	80068de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	08da      	lsrs	r2, r3, #3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3208      	adds	r2, #8
 800689e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	220f      	movs	r2, #15
 80068ae:	fa02 f303 	lsl.w	r3, r2, r3
 80068b2:	43db      	mvns	r3, r3
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	4013      	ands	r3, r2
 80068b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	08da      	lsrs	r2, r3, #3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3208      	adds	r2, #8
 80068d8:	69b9      	ldr	r1, [r7, #24]
 80068da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	005b      	lsls	r3, r3, #1
 80068e8:	2203      	movs	r2, #3
 80068ea:	fa02 f303 	lsl.w	r3, r2, r3
 80068ee:	43db      	mvns	r3, r3
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	4013      	ands	r3, r2
 80068f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f003 0203 	and.w	r2, r3, #3
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	fa02 f303 	lsl.w	r3, r2, r3
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	4313      	orrs	r3, r2
 800690a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 80d8 	beq.w	8006ad0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006920:	4b2c      	ldr	r3, [pc, #176]	@ (80069d4 <HAL_GPIO_Init+0x22c>)
 8006922:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006926:	4a2b      	ldr	r2, [pc, #172]	@ (80069d4 <HAL_GPIO_Init+0x22c>)
 8006928:	f043 0302 	orr.w	r3, r3, #2
 800692c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006930:	4b28      	ldr	r3, [pc, #160]	@ (80069d4 <HAL_GPIO_Init+0x22c>)
 8006932:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800693e:	4a26      	ldr	r2, [pc, #152]	@ (80069d8 <HAL_GPIO_Init+0x230>)
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	089b      	lsrs	r3, r3, #2
 8006944:	3302      	adds	r3, #2
 8006946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800694a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	220f      	movs	r2, #15
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	43db      	mvns	r3, r3
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	4013      	ands	r3, r2
 8006960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1d      	ldr	r2, [pc, #116]	@ (80069dc <HAL_GPIO_Init+0x234>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d04a      	beq.n	8006a00 <HAL_GPIO_Init+0x258>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1c      	ldr	r2, [pc, #112]	@ (80069e0 <HAL_GPIO_Init+0x238>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d02b      	beq.n	80069ca <HAL_GPIO_Init+0x222>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1b      	ldr	r2, [pc, #108]	@ (80069e4 <HAL_GPIO_Init+0x23c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d025      	beq.n	80069c6 <HAL_GPIO_Init+0x21e>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a1a      	ldr	r2, [pc, #104]	@ (80069e8 <HAL_GPIO_Init+0x240>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d01f      	beq.n	80069c2 <HAL_GPIO_Init+0x21a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a19      	ldr	r2, [pc, #100]	@ (80069ec <HAL_GPIO_Init+0x244>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d019      	beq.n	80069be <HAL_GPIO_Init+0x216>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a18      	ldr	r2, [pc, #96]	@ (80069f0 <HAL_GPIO_Init+0x248>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d013      	beq.n	80069ba <HAL_GPIO_Init+0x212>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a17      	ldr	r2, [pc, #92]	@ (80069f4 <HAL_GPIO_Init+0x24c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d00d      	beq.n	80069b6 <HAL_GPIO_Init+0x20e>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a16      	ldr	r2, [pc, #88]	@ (80069f8 <HAL_GPIO_Init+0x250>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d007      	beq.n	80069b2 <HAL_GPIO_Init+0x20a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a15      	ldr	r2, [pc, #84]	@ (80069fc <HAL_GPIO_Init+0x254>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d101      	bne.n	80069ae <HAL_GPIO_Init+0x206>
 80069aa:	2309      	movs	r3, #9
 80069ac:	e029      	b.n	8006a02 <HAL_GPIO_Init+0x25a>
 80069ae:	230a      	movs	r3, #10
 80069b0:	e027      	b.n	8006a02 <HAL_GPIO_Init+0x25a>
 80069b2:	2307      	movs	r3, #7
 80069b4:	e025      	b.n	8006a02 <HAL_GPIO_Init+0x25a>
 80069b6:	2306      	movs	r3, #6
 80069b8:	e023      	b.n	8006a02 <HAL_GPIO_Init+0x25a>
 80069ba:	2305      	movs	r3, #5
 80069bc:	e021      	b.n	8006a02 <HAL_GPIO_Init+0x25a>
 80069be:	2304      	movs	r3, #4
 80069c0:	e01f      	b.n	8006a02 <HAL_GPIO_Init+0x25a>
 80069c2:	2303      	movs	r3, #3
 80069c4:	e01d      	b.n	8006a02 <HAL_GPIO_Init+0x25a>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e01b      	b.n	8006a02 <HAL_GPIO_Init+0x25a>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e019      	b.n	8006a02 <HAL_GPIO_Init+0x25a>
 80069ce:	bf00      	nop
 80069d0:	58000080 	.word	0x58000080
 80069d4:	58024400 	.word	0x58024400
 80069d8:	58000400 	.word	0x58000400
 80069dc:	58020000 	.word	0x58020000
 80069e0:	58020400 	.word	0x58020400
 80069e4:	58020800 	.word	0x58020800
 80069e8:	58020c00 	.word	0x58020c00
 80069ec:	58021000 	.word	0x58021000
 80069f0:	58021400 	.word	0x58021400
 80069f4:	58021800 	.word	0x58021800
 80069f8:	58021c00 	.word	0x58021c00
 80069fc:	58022400 	.word	0x58022400
 8006a00:	2300      	movs	r3, #0
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	f002 0203 	and.w	r2, r2, #3
 8006a08:	0092      	lsls	r2, r2, #2
 8006a0a:	4093      	lsls	r3, r2
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a12:	4938      	ldr	r1, [pc, #224]	@ (8006af4 <HAL_GPIO_Init+0x34c>)
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	089b      	lsrs	r3, r3, #2
 8006a18:	3302      	adds	r3, #2
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	43db      	mvns	r3, r3
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006a46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	43db      	mvns	r3, r3
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f47f ae6b 	bne.w	80067bc <HAL_GPIO_Init+0x14>
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	bf00      	nop
 8006aea:	3724      	adds	r7, #36	@ 0x24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	58000400 	.word	0x58000400

08006af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	807b      	strh	r3, [r7, #2]
 8006b04:	4613      	mov	r3, r2
 8006b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b08:	787b      	ldrb	r3, [r7, #1]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b0e:	887a      	ldrh	r2, [r7, #2]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006b14:	e003      	b.n	8006b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006b16:	887b      	ldrh	r3, [r7, #2]
 8006b18:	041a      	lsls	r2, r3, #16
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	619a      	str	r2, [r3, #24]
}
 8006b1e:	bf00      	nop
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b082      	sub	sp, #8
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	4603      	mov	r3, r0
 8006b32:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b38:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006b3c:	88fb      	ldrh	r3, [r7, #6]
 8006b3e:	4013      	ands	r3, r2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b48:	88fb      	ldrh	r3, [r7, #6]
 8006b4a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b4e:	88fb      	ldrh	r3, [r7, #6]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7f9 fdfb 	bl	800074c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e08b      	b.n	8006c8a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fa ffb6 	bl	8001af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2224      	movs	r2, #36	@ 0x24
 8006b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0201 	bic.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006bb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d107      	bne.n	8006bda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bd6:	609a      	str	r2, [r3, #8]
 8006bd8:	e006      	b.n	8006be8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006be6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d108      	bne.n	8006c02 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bfe:	605a      	str	r2, [r3, #4]
 8006c00:	e007      	b.n	8006c12 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6859      	ldr	r1, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8006c94 <HAL_I2C_Init+0x134>)
 8006c1e:	430b      	orrs	r3, r1
 8006c20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69d9      	ldr	r1, [r3, #28]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1a      	ldr	r2, [r3, #32]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0201 	orr.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	02008000 	.word	0x02008000

08006c98 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	607a      	str	r2, [r7, #4]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	817b      	strh	r3, [r7, #10]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	f040 80fd 	bne.w	8006eb4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_I2C_Master_Transmit+0x30>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e0f6      	b.n	8006eb6 <HAL_I2C_Master_Transmit+0x21e>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cd0:	f7fd f838 	bl	8003d44 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	2319      	movs	r3, #25
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 fa0a 	bl	80070fc <I2C_WaitOnFlagUntilTimeout>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e0e1      	b.n	8006eb6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2221      	movs	r2, #33	@ 0x21
 8006cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2210      	movs	r2, #16
 8006cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	893a      	ldrh	r2, [r7, #8]
 8006d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2bff      	cmp	r3, #255	@ 0xff
 8006d22:	d906      	bls.n	8006d32 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	22ff      	movs	r2, #255	@ 0xff
 8006d28:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006d2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	e007      	b.n	8006d42 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006d3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d40:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d024      	beq.n	8006d94 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	3301      	adds	r3, #1
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	8979      	ldrh	r1, [r7, #10]
 8006d86:	4b4e      	ldr	r3, [pc, #312]	@ (8006ec0 <HAL_I2C_Master_Transmit+0x228>)
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 fc05 	bl	800759c <I2C_TransferConfig>
 8006d92:	e066      	b.n	8006e62 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	8979      	ldrh	r1, [r7, #10]
 8006d9c:	4b48      	ldr	r3, [pc, #288]	@ (8006ec0 <HAL_I2C_Master_Transmit+0x228>)
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fbfa 	bl	800759c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006da8:	e05b      	b.n	8006e62 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	6a39      	ldr	r1, [r7, #32]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f9fd 	bl	80071ae <I2C_WaitOnTXISFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e07b      	b.n	8006eb6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc2:	781a      	ldrb	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d034      	beq.n	8006e62 <HAL_I2C_Master_Transmit+0x1ca>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d130      	bne.n	8006e62 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	2200      	movs	r2, #0
 8006e08:	2180      	movs	r1, #128	@ 0x80
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 f976 	bl	80070fc <I2C_WaitOnFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e04d      	b.n	8006eb6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	2bff      	cmp	r3, #255	@ 0xff
 8006e22:	d90e      	bls.n	8006e42 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	22ff      	movs	r2, #255	@ 0xff
 8006e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	8979      	ldrh	r1, [r7, #10]
 8006e32:	2300      	movs	r3, #0
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fbae 	bl	800759c <I2C_TransferConfig>
 8006e40:	e00f      	b.n	8006e62 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	8979      	ldrh	r1, [r7, #10]
 8006e54:	2300      	movs	r3, #0
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 fb9d 	bl	800759c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d19e      	bne.n	8006daa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	6a39      	ldr	r1, [r7, #32]
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 f9e3 	bl	800723c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e01a      	b.n	8006eb6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2220      	movs	r2, #32
 8006e86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6859      	ldr	r1, [r3, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec4 <HAL_I2C_Master_Transmit+0x22c>)
 8006e94:	400b      	ands	r3, r1
 8006e96:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	e000      	b.n	8006eb6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006eb4:	2302      	movs	r3, #2
  }
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	80002000 	.word	0x80002000
 8006ec4:	fe00e800 	.word	0xfe00e800

08006ec8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af02      	add	r7, sp, #8
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	607a      	str	r2, [r7, #4]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	817b      	strh	r3, [r7, #10]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	f040 80db 	bne.w	80070a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_I2C_Master_Receive+0x30>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e0d4      	b.n	80070a2 <HAL_I2C_Master_Receive+0x1da>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f00:	f7fc ff20 	bl	8003d44 <HAL_GetTick>
 8006f04:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	2319      	movs	r3, #25
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 f8f2 	bl	80070fc <I2C_WaitOnFlagUntilTimeout>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e0bf      	b.n	80070a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2222      	movs	r2, #34	@ 0x22
 8006f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2210      	movs	r2, #16
 8006f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	893a      	ldrh	r2, [r7, #8]
 8006f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	2bff      	cmp	r3, #255	@ 0xff
 8006f52:	d90e      	bls.n	8006f72 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	22ff      	movs	r2, #255	@ 0xff
 8006f58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	8979      	ldrh	r1, [r7, #10]
 8006f62:	4b52      	ldr	r3, [pc, #328]	@ (80070ac <HAL_I2C_Master_Receive+0x1e4>)
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 fb16 	bl	800759c <I2C_TransferConfig>
 8006f70:	e06d      	b.n	800704e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f80:	b2da      	uxtb	r2, r3
 8006f82:	8979      	ldrh	r1, [r7, #10]
 8006f84:	4b49      	ldr	r3, [pc, #292]	@ (80070ac <HAL_I2C_Master_Receive+0x1e4>)
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 fb05 	bl	800759c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006f92:	e05c      	b.n	800704e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	6a39      	ldr	r1, [r7, #32]
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 f993 	bl	80072c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e07c      	b.n	80070a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d034      	beq.n	800704e <HAL_I2C_Master_Receive+0x186>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d130      	bne.n	800704e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2180      	movs	r1, #128	@ 0x80
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 f880 	bl	80070fc <I2C_WaitOnFlagUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e04d      	b.n	80070a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800700a:	b29b      	uxth	r3, r3
 800700c:	2bff      	cmp	r3, #255	@ 0xff
 800700e:	d90e      	bls.n	800702e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	22ff      	movs	r2, #255	@ 0xff
 8007014:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800701a:	b2da      	uxtb	r2, r3
 800701c:	8979      	ldrh	r1, [r7, #10]
 800701e:	2300      	movs	r3, #0
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 fab8 	bl	800759c <I2C_TransferConfig>
 800702c:	e00f      	b.n	800704e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800703c:	b2da      	uxtb	r2, r3
 800703e:	8979      	ldrh	r1, [r7, #10]
 8007040:	2300      	movs	r3, #0
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 faa7 	bl	800759c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007052:	b29b      	uxth	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	d19d      	bne.n	8006f94 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	6a39      	ldr	r1, [r7, #32]
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 f8ed 	bl	800723c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e01a      	b.n	80070a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2220      	movs	r2, #32
 8007072:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6859      	ldr	r1, [r3, #4]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	4b0c      	ldr	r3, [pc, #48]	@ (80070b0 <HAL_I2C_Master_Receive+0x1e8>)
 8007080:	400b      	ands	r3, r1
 8007082:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	e000      	b.n	80070a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80070a0:	2302      	movs	r3, #2
  }
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	80002400 	.word	0x80002400
 80070b0:	fe00e800 	.word	0xfe00e800

080070b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d103      	bne.n	80070d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2200      	movs	r2, #0
 80070d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d007      	beq.n	80070f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	619a      	str	r2, [r3, #24]
  }
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	603b      	str	r3, [r7, #0]
 8007108:	4613      	mov	r3, r2
 800710a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800710c:	e03b      	b.n	8007186 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 f962 	bl	80073dc <I2C_IsErrorOccurred>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e041      	b.n	80071a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007128:	d02d      	beq.n	8007186 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800712a:	f7fc fe0b 	bl	8003d44 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	429a      	cmp	r2, r3
 8007138:	d302      	bcc.n	8007140 <I2C_WaitOnFlagUntilTimeout+0x44>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d122      	bne.n	8007186 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4013      	ands	r3, r2
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	429a      	cmp	r2, r3
 800714e:	bf0c      	ite	eq
 8007150:	2301      	moveq	r3, #1
 8007152:	2300      	movne	r3, #0
 8007154:	b2db      	uxtb	r3, r3
 8007156:	461a      	mov	r2, r3
 8007158:	79fb      	ldrb	r3, [r7, #7]
 800715a:	429a      	cmp	r2, r3
 800715c:	d113      	bne.n	8007186 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007162:	f043 0220 	orr.w	r2, r3, #32
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e00f      	b.n	80071a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	699a      	ldr	r2, [r3, #24]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	4013      	ands	r3, r2
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	429a      	cmp	r2, r3
 8007194:	bf0c      	ite	eq
 8007196:	2301      	moveq	r3, #1
 8007198:	2300      	movne	r3, #0
 800719a:	b2db      	uxtb	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	79fb      	ldrb	r3, [r7, #7]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d0b4      	beq.n	800710e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	60f8      	str	r0, [r7, #12]
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80071ba:	e033      	b.n	8007224 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 f90b 	bl	80073dc <I2C_IsErrorOccurred>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e031      	b.n	8007234 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d025      	beq.n	8007224 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071d8:	f7fc fdb4 	bl	8003d44 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d302      	bcc.n	80071ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d11a      	bne.n	8007224 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d013      	beq.n	8007224 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007200:	f043 0220 	orr.w	r2, r3, #32
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e007      	b.n	8007234 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b02      	cmp	r3, #2
 8007230:	d1c4      	bne.n	80071bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007248:	e02f      	b.n	80072aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f8c4 	bl	80073dc <I2C_IsErrorOccurred>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e02d      	b.n	80072ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725e:	f7fc fd71 	bl	8003d44 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	429a      	cmp	r2, r3
 800726c:	d302      	bcc.n	8007274 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d11a      	bne.n	80072aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	2b20      	cmp	r3, #32
 8007280:	d013      	beq.n	80072aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007286:	f043 0220 	orr.w	r2, r3, #32
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2220      	movs	r2, #32
 8007292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e007      	b.n	80072ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	d1c8      	bne.n	800724a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80072d4:	e071      	b.n	80073ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	68b9      	ldr	r1, [r7, #8]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f87e 	bl	80073dc <I2C_IsErrorOccurred>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b20      	cmp	r3, #32
 80072f6:	d13b      	bne.n	8007370 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d138      	bne.n	8007370 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b04      	cmp	r3, #4
 800730a:	d105      	bne.n	8007318 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	f003 0310 	and.w	r3, r3, #16
 8007322:	2b10      	cmp	r3, #16
 8007324:	d121      	bne.n	800736a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2210      	movs	r2, #16
 800732c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2204      	movs	r2, #4
 8007332:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2220      	movs	r2, #32
 800733a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6859      	ldr	r1, [r3, #4]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	4b24      	ldr	r3, [pc, #144]	@ (80073d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8007348:	400b      	ands	r3, r1
 800734a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2220      	movs	r2, #32
 8007350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	75fb      	strb	r3, [r7, #23]
 8007368:	e002      	b.n	8007370 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007370:	f7fc fce8 	bl	8003d44 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	429a      	cmp	r2, r3
 800737e:	d302      	bcc.n	8007386 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d119      	bne.n	80073ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d116      	bne.n	80073ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b04      	cmp	r3, #4
 8007398:	d00f      	beq.n	80073ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800739e:	f043 0220 	orr.w	r2, r3, #32
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d002      	beq.n	80073ce <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d083      	beq.n	80072d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80073ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	fe00e800 	.word	0xfe00e800

080073dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08a      	sub	sp, #40	@ 0x28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	f003 0310 	and.w	r3, r3, #16
 8007404:	2b00      	cmp	r3, #0
 8007406:	d068      	beq.n	80074da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2210      	movs	r2, #16
 800740e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007410:	e049      	b.n	80074a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d045      	beq.n	80074a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800741a:	f7fc fc93 	bl	8003d44 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	429a      	cmp	r2, r3
 8007428:	d302      	bcc.n	8007430 <I2C_IsErrorOccurred+0x54>
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d13a      	bne.n	80074a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800743a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007442:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800744e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007452:	d121      	bne.n	8007498 <I2C_IsErrorOccurred+0xbc>
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800745a:	d01d      	beq.n	8007498 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800745c:	7cfb      	ldrb	r3, [r7, #19]
 800745e:	2b20      	cmp	r3, #32
 8007460:	d01a      	beq.n	8007498 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007470:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007472:	f7fc fc67 	bl	8003d44 <HAL_GetTick>
 8007476:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007478:	e00e      	b.n	8007498 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800747a:	f7fc fc63 	bl	8003d44 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b19      	cmp	r3, #25
 8007486:	d907      	bls.n	8007498 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	f043 0320 	orr.w	r3, r3, #32
 800748e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007496:	e006      	b.n	80074a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	d1e9      	bne.n	800747a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f003 0320 	and.w	r3, r3, #32
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	d003      	beq.n	80074bc <I2C_IsErrorOccurred+0xe0>
 80074b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d0aa      	beq.n	8007412 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80074bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d103      	bne.n	80074cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2220      	movs	r2, #32
 80074ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	f043 0304 	orr.w	r3, r3, #4
 80074d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	f043 0301 	orr.w	r3, r3, #1
 80074f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00b      	beq.n	8007526 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	f043 0308 	orr.w	r3, r3, #8
 8007514:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800751e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	f043 0302 	orr.w	r3, r3, #2
 8007536:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007540:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01c      	beq.n	800758a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f7ff fdaf 	bl	80070b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6859      	ldr	r1, [r3, #4]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	4b0d      	ldr	r3, [pc, #52]	@ (8007598 <I2C_IsErrorOccurred+0x1bc>)
 8007562:	400b      	ands	r3, r1
 8007564:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	431a      	orrs	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2220      	movs	r2, #32
 8007576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800758a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800758e:	4618      	mov	r0, r3
 8007590:	3728      	adds	r7, #40	@ 0x28
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	fe00e800 	.word	0xfe00e800

0800759c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	607b      	str	r3, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	817b      	strh	r3, [r7, #10]
 80075aa:	4613      	mov	r3, r2
 80075ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075ae:	897b      	ldrh	r3, [r7, #10]
 80075b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075b4:	7a7b      	ldrb	r3, [r7, #9]
 80075b6:	041b      	lsls	r3, r3, #16
 80075b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075bc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075ca:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	0d5b      	lsrs	r3, r3, #21
 80075d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80075da:	4b08      	ldr	r3, [pc, #32]	@ (80075fc <I2C_TransferConfig+0x60>)
 80075dc:	430b      	orrs	r3, r1
 80075de:	43db      	mvns	r3, r3
 80075e0:	ea02 0103 	and.w	r1, r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075ee:	bf00      	nop
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	03ff63ff 	.word	0x03ff63ff

08007600 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b20      	cmp	r3, #32
 8007614:	d138      	bne.n	8007688 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800761c:	2b01      	cmp	r3, #1
 800761e:	d101      	bne.n	8007624 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007620:	2302      	movs	r3, #2
 8007622:	e032      	b.n	800768a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2224      	movs	r2, #36	@ 0x24
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0201 	bic.w	r2, r2, #1
 8007642:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007652:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6819      	ldr	r1, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	e000      	b.n	800768a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007688:	2302      	movs	r3, #2
  }
}
 800768a:	4618      	mov	r0, r3
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b20      	cmp	r3, #32
 80076aa:	d139      	bne.n	8007720 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d101      	bne.n	80076ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80076b6:	2302      	movs	r3, #2
 80076b8:	e033      	b.n	8007722 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2224      	movs	r2, #36	@ 0x24
 80076c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 0201 	bic.w	r2, r2, #1
 80076d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80076e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	021b      	lsls	r3, r3, #8
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0201 	orr.w	r2, r2, #1
 800770a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	e000      	b.n	8007722 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007720:	2302      	movs	r3, #2
  }
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
	...

08007730 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e11a      	b.n	8007978 <HAL_I2S_Init+0x248>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fa fa86 	bl	8001c68 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b01      	cmp	r3, #1
 8007770:	d107      	bne.n	8007782 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0201 	bic.w	r2, r2, #1
 8007780:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2200      	movs	r2, #0
 8007788:	651a      	str	r2, [r3, #80]	@ 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	2b04      	cmp	r3, #4
 8007790:	d008      	beq.n	80077a4 <HAL_I2S_Init+0x74>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2b06      	cmp	r3, #6
 8007798:	d004      	beq.n	80077a4 <HAL_I2S_Init+0x74>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	2b0a      	cmp	r3, #10
 80077a0:	f040 8094 	bne.w	80078cc <HAL_I2S_Init+0x19c>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d067      	beq.n	800787c <HAL_I2S_Init+0x14c>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 80077b4:	2302      	movs	r3, #2
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	e001      	b.n	80077be <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 80077ba:	2301      	movs	r3, #1
 80077bc:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	2b30      	cmp	r3, #48	@ 0x30
 80077c4:	d003      	beq.n	80077ce <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 80077ca:	2bb0      	cmp	r3, #176	@ 0xb0
 80077cc:	d102      	bne.n	80077d4 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 80077ce:	2301      	movs	r3, #1
 80077d0:	60bb      	str	r3, [r7, #8]
 80077d2:	e001      	b.n	80077d8 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60bb      	str	r3, [r7, #8]
      }

      /* Get the source clock value: based on System Clock value */
#if defined (SPI_SPI6I2S_SUPPORT)
      if (hi2s->Instance == SPI6)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a68      	ldr	r2, [pc, #416]	@ (8007980 <HAL_I2S_Init+0x250>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d107      	bne.n	80077f2 <HAL_I2S_Init+0xc2>
      {
        /* SPI6 source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI6);
 80077e2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80077e6:	f04f 0100 	mov.w	r1, #0
 80077ea:	f002 fca1 	bl	800a130 <HAL_RCCEx_GetPeriphCLKFreq>
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	e006      	b.n	8007800 <HAL_I2S_Init+0xd0>
      }
      else
      {
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 80077f2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80077f6:	f04f 0100 	mov.w	r1, #0
 80077fa:	f002 fc99 	bl	800a130 <HAL_RCCEx_GetPeriphCLKFreq>
 80077fe:	60f8      	str	r0, [r7, #12]
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007808:	d113      	bne.n	8007832 <HAL_I2S_Init+0x102>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 800780a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	fa22 f303 	lsr.w	r3, r2, r3
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	fbb2 f2f3 	udiv	r2, r2, r3
 800781a:	4613      	mov	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	461a      	mov	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	fbb2 f3f3 	udiv	r3, r2, r3
 800782c:	3305      	adds	r3, #5
 800782e:	613b      	str	r3, [r7, #16]
 8007830:	e014      	b.n	800785c <HAL_I2S_Init+0x12c>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8007832:	2220      	movs	r2, #32
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	fa22 f303 	lsr.w	r3, r2, r3
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	fb02 f303 	mul.w	r3, r2, r3
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	fbb2 f2f3 	udiv	r2, r2, r3
 8007846:	4613      	mov	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4413      	add	r3, r2
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	fbb2 f3f3 	udiv	r3, r2, r3
 8007858:	3305      	adds	r3, #5
 800785a:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	4a49      	ldr	r2, [pc, #292]	@ (8007984 <HAL_I2S_Init+0x254>)
 8007860:	fba2 2303 	umull	r2, r3, r2, r3
 8007864:	08db      	lsrs	r3, r3, #3
 8007866:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	085b      	lsrs	r3, r3, #1
 8007878:	61fb      	str	r3, [r7, #28]
 800787a:	e003      	b.n	8007884 <HAL_I2S_Init+0x154>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 800787c:	2302      	movs	r3, #2
 800787e:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8007880:	2300      	movs	r3, #0
 8007882:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d102      	bne.n	8007890 <HAL_I2S_Init+0x160>
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d002      	beq.n	8007896 <HAL_I2S_Init+0x166>
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	2bff      	cmp	r3, #255	@ 0xff
 8007894:	d907      	bls.n	80078a6 <HAL_I2S_Init+0x176>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800789a:	f043 0210 	orr.w	r2, r3, #16
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	651a      	str	r2, [r3, #80]	@ 0x50
      return  HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e068      	b.n	8007978 <HAL_I2S_Init+0x248>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <HAL_I2S_Init+0x180>
    {
      i2sodd = 1UL;
 80078ac:	2301      	movs	r3, #1
 80078ae:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078b6:	4b34      	ldr	r3, [pc, #208]	@ (8007988 <HAL_I2S_Init+0x258>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	0411      	lsls	r1, r2, #16
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	0612      	lsls	r2, r2, #24
 80078c2:	4311      	orrs	r1, r2
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	6812      	ldr	r2, [r2, #0]
 80078c8:	430b      	orrs	r3, r1
 80078ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078d2:	4b2e      	ldr	r3, [pc, #184]	@ (800798c <HAL_I2S_Init+0x25c>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6851      	ldr	r1, [r2, #4]
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	6892      	ldr	r2, [r2, #8]
 80078de:	4311      	orrs	r1, r2
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	68d2      	ldr	r2, [r2, #12]
 80078e4:	4311      	orrs	r1, r2
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	6992      	ldr	r2, [r2, #24]
 80078ea:	4311      	orrs	r1, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6a12      	ldr	r2, [r2, #32]
 80078f0:	4311      	orrs	r1, r2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80078f6:	4311      	orrs	r1, r2
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6912      	ldr	r2, [r2, #16]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f042 0201 	orr.w	r2, r2, #1
 8007908:	651a      	str	r2, [r3, #80]	@ 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f640 72f8 	movw	r2, #4088	@ 0xff8
 8007912:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007922:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f423 0100 	bic.w	r1, r3, #8388608	@ 0x800000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69da      	ldr	r2, [r3, #28]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2b04      	cmp	r3, #4
 8007940:	d007      	beq.n	8007952 <HAL_I2S_Init+0x222>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2b06      	cmp	r3, #6
 8007948:	d003      	beq.n	8007952 <HAL_I2S_Init+0x222>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2b0a      	cmp	r3, #10
 8007950:	d10a      	bne.n	8007968 <HAL_I2S_Init+0x238>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3720      	adds	r7, #32
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	58001400 	.word	0x58001400
 8007984:	cccccccd 	.word	0xcccccccd
 8007988:	fe00ffff 	.word	0xfe00ffff
 800798c:	fdff9040 	.word	0xfdff9040

08007990 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	4613      	mov	r3, r2
 800799c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	75fb      	strb	r3, [r7, #23]

  if ((pData == NULL) || (Size == 0UL))
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_I2S_Receive_DMA+0x1e>
 80079a8:	88fb      	ldrh	r3, [r7, #6]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_I2S_Receive_DMA+0x22>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e086      	b.n	8007ac0 <HAL_I2S_Receive_DMA+0x130>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d001      	beq.n	80079c2 <HAL_I2S_Receive_DMA+0x32>
  {
    return HAL_BUSY;
 80079be:	2302      	movs	r3, #2
 80079c0:	e07e      	b.n	8007ac0 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_I2S_Receive_DMA+0x42>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e076      	b.n	8007ac0 <HAL_I2S_Receive_DMA+0x130>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_RX;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2204      	movs	r2, #4
 80079de:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2s->pRxBuffPtr  = pData;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2s->RxXferSize  = Size;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	88fa      	ldrh	r2, [r7, #6]
 80079f2:	871a      	strh	r2, [r3, #56]	@ 0x38
  hi2s->RxXferCount = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	88fa      	ldrh	r2, [r7, #6]
 80079f8:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Init field not used in handle to zero */
  hi2s->pTxBuffPtr  = NULL;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->TxXferSize  = (uint16_t)0UL;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	861a      	strh	r2, [r3, #48]	@ 0x30
  hi2s->TxXferCount = (uint16_t)0UL;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	865a      	strh	r2, [r3, #50]	@ 0x32


  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a10:	4a2d      	ldr	r2, [pc, #180]	@ (8007ac8 <HAL_I2S_Receive_DMA+0x138>)
 8007a12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a18:	4a2c      	ldr	r2, [pc, #176]	@ (8007acc <HAL_I2S_Receive_DMA+0x13c>)
 8007a1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a20:	4a2b      	ldr	r2, [pc, #172]	@ (8007ad0 <HAL_I2S_Receive_DMA+0x140>)
 8007a22:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3330      	adds	r3, #48	@ 0x30
 8007a2e:	4619      	mov	r1, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a34:	461a      	mov	r2, r3
                                 hi2s->RxXferCount))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007a3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->RXDR, (uint32_t)hi2s->pRxBuffPtr,
 8007a3c:	f7fc fe1a 	bl	8004674 <HAL_DMA_Start_IT>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d011      	beq.n	8007a6a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Update I2S error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a4a:	f043 0208 	orr.w	r2, r3, #8
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	651a      	str	r2, [r3, #80]	@ 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    errorcode = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hi2s);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return errorcode;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	e02a      	b.n	8007ac0 <HAL_I2S_Receive_DMA+0x130>
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d107      	bne.n	8007a88 <HAL_I2S_Receive_DMA+0xf8>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a86:	609a      	str	r2, [r3, #8]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR1, SPI_CR1_SPE))
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d107      	bne.n	8007aa6 <HAL_I2S_Receive_DMA+0x116>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0201 	orr.w	r2, r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ab4:	601a      	str	r2, [r3, #0]

  __HAL_UNLOCK(hi2s);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  return errorcode;
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	08007bc9 	.word	0x08007bc9
 8007acc:	08007b87 	.word	0x08007b87
 8007ad0:	08007be5 	.word	0x08007be5

08007ad4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  /* Disable the I2S Tx/Rx DMA requests */
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689a      	ldr	r2, [r3, #8]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007aee:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007afe:	609a      	str	r2, [r3, #8]

  /* Abort the I2S DMA tx Stream/Channel */
  if (hi2s->hdmatx != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00f      	beq.n	8007b28 <HAL_I2S_DMAStop+0x54>
  {
    /* Disable the I2S DMA tx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fd f81b 	bl	8004b48 <HAL_DMA_Abort>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d007      	beq.n	8007b28 <HAL_I2S_DMAStop+0x54>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b1c:	f043 0208 	orr.w	r2, r3, #8
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Abort the I2S DMA rx Stream/Channel */
  if (hi2s->hdmarx != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00f      	beq.n	8007b50 <HAL_I2S_DMAStop+0x7c>
  {
    /* Disable the I2S DMA rx Stream/Channel */
    if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fd f807 	bl	8004b48 <HAL_DMA_Abort>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d007      	beq.n	8007b50 <HAL_I2S_DMAStop+0x7c>
    {
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b44:	f043 0208 	orr.w	r2, r3, #8
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	651a      	str	r2, [r3, #80]	@ 0x50
      errorcode = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0201 	bic.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]

  hi2s->State = HAL_I2S_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  return errorcode;
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b083      	sub	sp, #12
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007b7a:	bf00      	nop
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b084      	sub	sp, #16
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b92:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10e      	bne.n	8007bba <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007baa:	609a      	str	r2, [r3, #8]
    hi2s->RxXferCount = (uint16_t)0UL;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hi2s->State = HAL_I2S_STATE_READY;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7f9 fbe6 	bl	800138c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007bc0:	bf00      	nop
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f7f9 fbc8 	bl	800136c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007bdc:	bf00      	nop
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *         the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf0:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CFG1, (SPI_CFG1_RXDMAEN | SPI_CFG1_TXDMAEN));
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689a      	ldr	r2, [r3, #8]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007c00:	609a      	str	r2, [r3, #8]
  hi2s->TxXferCount = (uint16_t) 0UL;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	865a      	strh	r2, [r3, #50]	@ 0x32
  hi2s->RxXferCount = (uint16_t) 0UL;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	875a      	strh	r2, [r3, #58]	@ 0x3a

  hi2s->State = HAL_I2S_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c1a:	f043 0208 	orr.w	r2, r3, #8
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1UL)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f7ff ffa5 	bl	8007b72 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007c28:	bf00      	nop
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e0fe      	b.n	8007e40 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d106      	bne.n	8007c5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7fa fabc 	bl	80021d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2203      	movs	r2, #3
 8007c60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f008 fdc1 	bl	80107f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7c1a      	ldrb	r2, [r3, #16]
 8007c76:	f88d 2000 	strb.w	r2, [sp]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c7e:	f008 fd45 	bl	801070c <USB_CoreInit>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d005      	beq.n	8007c94 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e0d5      	b.n	8007e40 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f008 fdb9 	bl	8010812 <USB_SetCurrentMode>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d005      	beq.n	8007cb2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2202      	movs	r2, #2
 8007caa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e0c6      	b.n	8007e40 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]
 8007cb6:	e04a      	b.n	8007d4e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007cb8:	7bfa      	ldrb	r2, [r7, #15]
 8007cba:	6879      	ldr	r1, [r7, #4]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	440b      	add	r3, r1
 8007cc6:	3315      	adds	r3, #21
 8007cc8:	2201      	movs	r2, #1
 8007cca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007ccc:	7bfa      	ldrb	r2, [r7, #15]
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	440b      	add	r3, r1
 8007cda:	3314      	adds	r3, #20
 8007cdc:	7bfa      	ldrb	r2, [r7, #15]
 8007cde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007ce0:	7bfa      	ldrb	r2, [r7, #15]
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	b298      	uxth	r0, r3
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	4413      	add	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	440b      	add	r3, r1
 8007cf2:	332e      	adds	r3, #46	@ 0x2e
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007cf8:	7bfa      	ldrb	r2, [r7, #15]
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	3318      	adds	r3, #24
 8007d08:	2200      	movs	r2, #0
 8007d0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007d0c:	7bfa      	ldrb	r2, [r7, #15]
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	4613      	mov	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	440b      	add	r3, r1
 8007d1a:	331c      	adds	r3, #28
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d20:	7bfa      	ldrb	r2, [r7, #15]
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	4613      	mov	r3, r2
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	3320      	adds	r3, #32
 8007d30:	2200      	movs	r2, #0
 8007d32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d34:	7bfa      	ldrb	r2, [r7, #15]
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	3324      	adds	r3, #36	@ 0x24
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	73fb      	strb	r3, [r7, #15]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	791b      	ldrb	r3, [r3, #4]
 8007d52:	7bfa      	ldrb	r2, [r7, #15]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d3af      	bcc.n	8007cb8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73fb      	strb	r3, [r7, #15]
 8007d5c:	e044      	b.n	8007de8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007d5e:	7bfa      	ldrb	r2, [r7, #15]
 8007d60:	6879      	ldr	r1, [r7, #4]
 8007d62:	4613      	mov	r3, r2
 8007d64:	00db      	lsls	r3, r3, #3
 8007d66:	4413      	add	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	440b      	add	r3, r1
 8007d6c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007d70:	2200      	movs	r2, #0
 8007d72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007d74:	7bfa      	ldrb	r2, [r7, #15]
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	440b      	add	r3, r1
 8007d82:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007d86:	7bfa      	ldrb	r2, [r7, #15]
 8007d88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d8a:	7bfa      	ldrb	r2, [r7, #15]
 8007d8c:	6879      	ldr	r1, [r7, #4]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	00db      	lsls	r3, r3, #3
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	440b      	add	r3, r1
 8007d98:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007da0:	7bfa      	ldrb	r2, [r7, #15]
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	4613      	mov	r3, r2
 8007da6:	00db      	lsls	r3, r3, #3
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007db6:	7bfa      	ldrb	r2, [r7, #15]
 8007db8:	6879      	ldr	r1, [r7, #4]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	00db      	lsls	r3, r3, #3
 8007dbe:	4413      	add	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	440b      	add	r3, r1
 8007dc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007dc8:	2200      	movs	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007dcc:	7bfa      	ldrb	r2, [r7, #15]
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	440b      	add	r3, r1
 8007dda:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	3301      	adds	r3, #1
 8007de6:	73fb      	strb	r3, [r7, #15]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	791b      	ldrb	r3, [r3, #4]
 8007dec:	7bfa      	ldrb	r2, [r7, #15]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d3b5      	bcc.n	8007d5e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6818      	ldr	r0, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	7c1a      	ldrb	r2, [r3, #16]
 8007dfa:	f88d 2000 	strb.w	r2, [sp]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e02:	f008 fd53 	bl	80108ac <USB_DevInit>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e013      	b.n	8007e40 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	7b1b      	ldrb	r3, [r3, #12]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d102      	bne.n	8007e34 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f80a 	bl	8007e48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f008 ff0e 	bl	8010c5a <USB_DevDisconnect>

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e76:	4b05      	ldr	r3, [pc, #20]	@ (8007e8c <HAL_PCDEx_ActivateLPM+0x44>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	10000003 	.word	0x10000003

08007e90 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e98:	4b19      	ldr	r3, [pc, #100]	@ (8007f00 <HAL_PWREx_ConfigSupply+0x70>)
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d00a      	beq.n	8007eba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007ea4:	4b16      	ldr	r3, [pc, #88]	@ (8007f00 <HAL_PWREx_ConfigSupply+0x70>)
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f003 0307 	and.w	r3, r3, #7
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d001      	beq.n	8007eb6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e01f      	b.n	8007ef6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e01d      	b.n	8007ef6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007eba:	4b11      	ldr	r3, [pc, #68]	@ (8007f00 <HAL_PWREx_ConfigSupply+0x70>)
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	f023 0207 	bic.w	r2, r3, #7
 8007ec2:	490f      	ldr	r1, [pc, #60]	@ (8007f00 <HAL_PWREx_ConfigSupply+0x70>)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007eca:	f7fb ff3b 	bl	8003d44 <HAL_GetTick>
 8007ece:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ed0:	e009      	b.n	8007ee6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ed2:	f7fb ff37 	bl	8003d44 <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ee0:	d901      	bls.n	8007ee6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e007      	b.n	8007ef6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ee6:	4b06      	ldr	r3, [pc, #24]	@ (8007f00 <HAL_PWREx_ConfigSupply+0x70>)
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ef2:	d1ee      	bne.n	8007ed2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	58024800 	.word	0x58024800

08007f04 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007f08:	4b05      	ldr	r3, [pc, #20]	@ (8007f20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	4a04      	ldr	r2, [pc, #16]	@ (8007f20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007f0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f12:	60d3      	str	r3, [r2, #12]
}
 8007f14:	bf00      	nop
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	58024800 	.word	0x58024800

08007f24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08c      	sub	sp, #48	@ 0x30
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e3c8      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 8087 	beq.w	8008052 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f44:	4b88      	ldr	r3, [pc, #544]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f4e:	4b86      	ldr	r3, [pc, #536]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f52:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f56:	2b10      	cmp	r3, #16
 8007f58:	d007      	beq.n	8007f6a <HAL_RCC_OscConfig+0x46>
 8007f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5c:	2b18      	cmp	r3, #24
 8007f5e:	d110      	bne.n	8007f82 <HAL_RCC_OscConfig+0x5e>
 8007f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d10b      	bne.n	8007f82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d06c      	beq.n	8008050 <HAL_RCC_OscConfig+0x12c>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d168      	bne.n	8008050 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e3a2      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f8a:	d106      	bne.n	8007f9a <HAL_RCC_OscConfig+0x76>
 8007f8c:	4b76      	ldr	r3, [pc, #472]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a75      	ldr	r2, [pc, #468]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	e02e      	b.n	8007ff8 <HAL_RCC_OscConfig+0xd4>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10c      	bne.n	8007fbc <HAL_RCC_OscConfig+0x98>
 8007fa2:	4b71      	ldr	r3, [pc, #452]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a70      	ldr	r2, [pc, #448]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	4b6e      	ldr	r3, [pc, #440]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a6d      	ldr	r2, [pc, #436]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007fb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	e01d      	b.n	8007ff8 <HAL_RCC_OscConfig+0xd4>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007fc4:	d10c      	bne.n	8007fe0 <HAL_RCC_OscConfig+0xbc>
 8007fc6:	4b68      	ldr	r3, [pc, #416]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a67      	ldr	r2, [pc, #412]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	4b65      	ldr	r3, [pc, #404]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a64      	ldr	r2, [pc, #400]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	e00b      	b.n	8007ff8 <HAL_RCC_OscConfig+0xd4>
 8007fe0:	4b61      	ldr	r3, [pc, #388]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a60      	ldr	r2, [pc, #384]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	4b5e      	ldr	r3, [pc, #376]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a5d      	ldr	r2, [pc, #372]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8007ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d013      	beq.n	8008028 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008000:	f7fb fea0 	bl	8003d44 <HAL_GetTick>
 8008004:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008006:	e008      	b.n	800801a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008008:	f7fb fe9c 	bl	8003d44 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b64      	cmp	r3, #100	@ 0x64
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e356      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800801a:	4b53      	ldr	r3, [pc, #332]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0f0      	beq.n	8008008 <HAL_RCC_OscConfig+0xe4>
 8008026:	e014      	b.n	8008052 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008028:	f7fb fe8c 	bl	8003d44 <HAL_GetTick>
 800802c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800802e:	e008      	b.n	8008042 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008030:	f7fb fe88 	bl	8003d44 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b64      	cmp	r3, #100	@ 0x64
 800803c:	d901      	bls.n	8008042 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e342      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008042:	4b49      	ldr	r3, [pc, #292]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1f0      	bne.n	8008030 <HAL_RCC_OscConfig+0x10c>
 800804e:	e000      	b.n	8008052 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 808c 	beq.w	8008178 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008060:	4b41      	ldr	r3, [pc, #260]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008068:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800806a:	4b3f      	ldr	r3, [pc, #252]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 800806c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <HAL_RCC_OscConfig+0x162>
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	2b18      	cmp	r3, #24
 800807a:	d137      	bne.n	80080ec <HAL_RCC_OscConfig+0x1c8>
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	f003 0303 	and.w	r3, r3, #3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d132      	bne.n	80080ec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008086:	4b38      	ldr	r3, [pc, #224]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0304 	and.w	r3, r3, #4
 800808e:	2b00      	cmp	r3, #0
 8008090:	d005      	beq.n	800809e <HAL_RCC_OscConfig+0x17a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e314      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800809e:	4b32      	ldr	r3, [pc, #200]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f023 0219 	bic.w	r2, r3, #25
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	492f      	ldr	r1, [pc, #188]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 80080ac:	4313      	orrs	r3, r2
 80080ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b0:	f7fb fe48 	bl	8003d44 <HAL_GetTick>
 80080b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080b6:	e008      	b.n	80080ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080b8:	f7fb fe44 	bl	8003d44 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d901      	bls.n	80080ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e2fe      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080ca:	4b27      	ldr	r3, [pc, #156]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0304 	and.w	r3, r3, #4
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0f0      	beq.n	80080b8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d6:	4b24      	ldr	r3, [pc, #144]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	061b      	lsls	r3, r3, #24
 80080e4:	4920      	ldr	r1, [pc, #128]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080ea:	e045      	b.n	8008178 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d026      	beq.n	8008142 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f023 0219 	bic.w	r2, r3, #25
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	4919      	ldr	r1, [pc, #100]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8008102:	4313      	orrs	r3, r2
 8008104:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008106:	f7fb fe1d 	bl	8003d44 <HAL_GetTick>
 800810a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800810c:	e008      	b.n	8008120 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800810e:	f7fb fe19 	bl	8003d44 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e2d3      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008120:	4b11      	ldr	r3, [pc, #68]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0f0      	beq.n	800810e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800812c:	4b0e      	ldr	r3, [pc, #56]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	061b      	lsls	r3, r3, #24
 800813a:	490b      	ldr	r1, [pc, #44]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 800813c:	4313      	orrs	r3, r2
 800813e:	604b      	str	r3, [r1, #4]
 8008140:	e01a      	b.n	8008178 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008142:	4b09      	ldr	r3, [pc, #36]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a08      	ldr	r2, [pc, #32]	@ (8008168 <HAL_RCC_OscConfig+0x244>)
 8008148:	f023 0301 	bic.w	r3, r3, #1
 800814c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800814e:	f7fb fdf9 	bl	8003d44 <HAL_GetTick>
 8008152:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008154:	e00a      	b.n	800816c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008156:	f7fb fdf5 	bl	8003d44 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b02      	cmp	r3, #2
 8008162:	d903      	bls.n	800816c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e2af      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
 8008168:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800816c:	4b96      	ldr	r3, [pc, #600]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1ee      	bne.n	8008156 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0310 	and.w	r3, r3, #16
 8008180:	2b00      	cmp	r3, #0
 8008182:	d06a      	beq.n	800825a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008184:	4b90      	ldr	r3, [pc, #576]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800818c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800818e:	4b8e      	ldr	r3, [pc, #568]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 8008190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008192:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	2b08      	cmp	r3, #8
 8008198:	d007      	beq.n	80081aa <HAL_RCC_OscConfig+0x286>
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	2b18      	cmp	r3, #24
 800819e:	d11b      	bne.n	80081d8 <HAL_RCC_OscConfig+0x2b4>
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f003 0303 	and.w	r3, r3, #3
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d116      	bne.n	80081d8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081aa:	4b87      	ldr	r3, [pc, #540]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d005      	beq.n	80081c2 <HAL_RCC_OscConfig+0x29e>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	2b80      	cmp	r3, #128	@ 0x80
 80081bc:	d001      	beq.n	80081c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e282      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081c2:	4b81      	ldr	r3, [pc, #516]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	061b      	lsls	r3, r3, #24
 80081d0:	497d      	ldr	r1, [pc, #500]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081d6:	e040      	b.n	800825a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d023      	beq.n	8008228 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80081e0:	4b79      	ldr	r3, [pc, #484]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a78      	ldr	r2, [pc, #480]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80081e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ec:	f7fb fdaa 	bl	8003d44 <HAL_GetTick>
 80081f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081f2:	e008      	b.n	8008206 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80081f4:	f7fb fda6 	bl	8003d44 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d901      	bls.n	8008206 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e260      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008206:	4b70      	ldr	r3, [pc, #448]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0f0      	beq.n	80081f4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008212:	4b6d      	ldr	r3, [pc, #436]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	061b      	lsls	r3, r3, #24
 8008220:	4969      	ldr	r1, [pc, #420]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 8008222:	4313      	orrs	r3, r2
 8008224:	60cb      	str	r3, [r1, #12]
 8008226:	e018      	b.n	800825a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008228:	4b67      	ldr	r3, [pc, #412]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a66      	ldr	r2, [pc, #408]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 800822e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008234:	f7fb fd86 	bl	8003d44 <HAL_GetTick>
 8008238:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800823a:	e008      	b.n	800824e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800823c:	f7fb fd82 	bl	8003d44 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b02      	cmp	r3, #2
 8008248:	d901      	bls.n	800824e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e23c      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800824e:	4b5e      	ldr	r3, [pc, #376]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1f0      	bne.n	800823c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	2b00      	cmp	r3, #0
 8008264:	d036      	beq.n	80082d4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d019      	beq.n	80082a2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800826e:	4b56      	ldr	r3, [pc, #344]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 8008270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008272:	4a55      	ldr	r2, [pc, #340]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 8008274:	f043 0301 	orr.w	r3, r3, #1
 8008278:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800827a:	f7fb fd63 	bl	8003d44 <HAL_GetTick>
 800827e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008280:	e008      	b.n	8008294 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008282:	f7fb fd5f 	bl	8003d44 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d901      	bls.n	8008294 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e219      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008294:	4b4c      	ldr	r3, [pc, #304]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 8008296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d0f0      	beq.n	8008282 <HAL_RCC_OscConfig+0x35e>
 80082a0:	e018      	b.n	80082d4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082a2:	4b49      	ldr	r3, [pc, #292]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80082a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082a6:	4a48      	ldr	r2, [pc, #288]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80082a8:	f023 0301 	bic.w	r3, r3, #1
 80082ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ae:	f7fb fd49 	bl	8003d44 <HAL_GetTick>
 80082b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082b4:	e008      	b.n	80082c8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082b6:	f7fb fd45 	bl	8003d44 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d901      	bls.n	80082c8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e1ff      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082c8:	4b3f      	ldr	r3, [pc, #252]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80082ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082cc:	f003 0302 	and.w	r3, r3, #2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1f0      	bne.n	80082b6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0320 	and.w	r3, r3, #32
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d036      	beq.n	800834e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d019      	beq.n	800831c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80082e8:	4b37      	ldr	r3, [pc, #220]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a36      	ldr	r2, [pc, #216]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80082ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80082f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80082f4:	f7fb fd26 	bl	8003d44 <HAL_GetTick>
 80082f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082fa:	e008      	b.n	800830e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082fc:	f7fb fd22 	bl	8003d44 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	2b02      	cmp	r3, #2
 8008308:	d901      	bls.n	800830e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e1dc      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800830e:	4b2e      	ldr	r3, [pc, #184]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d0f0      	beq.n	80082fc <HAL_RCC_OscConfig+0x3d8>
 800831a:	e018      	b.n	800834e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800831c:	4b2a      	ldr	r3, [pc, #168]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a29      	ldr	r2, [pc, #164]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 8008322:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008326:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008328:	f7fb fd0c 	bl	8003d44 <HAL_GetTick>
 800832c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800832e:	e008      	b.n	8008342 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008330:	f7fb fd08 	bl	8003d44 <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	2b02      	cmp	r3, #2
 800833c:	d901      	bls.n	8008342 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e1c2      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008342:	4b21      	ldr	r3, [pc, #132]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1f0      	bne.n	8008330 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0304 	and.w	r3, r3, #4
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 8086 	beq.w	8008468 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800835c:	4b1b      	ldr	r3, [pc, #108]	@ (80083cc <HAL_RCC_OscConfig+0x4a8>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a1a      	ldr	r2, [pc, #104]	@ (80083cc <HAL_RCC_OscConfig+0x4a8>)
 8008362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008366:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008368:	f7fb fcec 	bl	8003d44 <HAL_GetTick>
 800836c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800836e:	e008      	b.n	8008382 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008370:	f7fb fce8 	bl	8003d44 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b64      	cmp	r3, #100	@ 0x64
 800837c:	d901      	bls.n	8008382 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e1a2      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008382:	4b12      	ldr	r3, [pc, #72]	@ (80083cc <HAL_RCC_OscConfig+0x4a8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0f0      	beq.n	8008370 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d106      	bne.n	80083a4 <HAL_RCC_OscConfig+0x480>
 8008396:	4b0c      	ldr	r3, [pc, #48]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 8008398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800839a:	4a0b      	ldr	r2, [pc, #44]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 800839c:	f043 0301 	orr.w	r3, r3, #1
 80083a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80083a2:	e032      	b.n	800840a <HAL_RCC_OscConfig+0x4e6>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d111      	bne.n	80083d0 <HAL_RCC_OscConfig+0x4ac>
 80083ac:	4b06      	ldr	r3, [pc, #24]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80083ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b0:	4a05      	ldr	r2, [pc, #20]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80083b2:	f023 0301 	bic.w	r3, r3, #1
 80083b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80083b8:	4b03      	ldr	r3, [pc, #12]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80083ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083bc:	4a02      	ldr	r2, [pc, #8]	@ (80083c8 <HAL_RCC_OscConfig+0x4a4>)
 80083be:	f023 0304 	bic.w	r3, r3, #4
 80083c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80083c4:	e021      	b.n	800840a <HAL_RCC_OscConfig+0x4e6>
 80083c6:	bf00      	nop
 80083c8:	58024400 	.word	0x58024400
 80083cc:	58024800 	.word	0x58024800
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	2b05      	cmp	r3, #5
 80083d6:	d10c      	bne.n	80083f2 <HAL_RCC_OscConfig+0x4ce>
 80083d8:	4b83      	ldr	r3, [pc, #524]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 80083da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083dc:	4a82      	ldr	r2, [pc, #520]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 80083de:	f043 0304 	orr.w	r3, r3, #4
 80083e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80083e4:	4b80      	ldr	r3, [pc, #512]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 80083e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e8:	4a7f      	ldr	r2, [pc, #508]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 80083ea:	f043 0301 	orr.w	r3, r3, #1
 80083ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80083f0:	e00b      	b.n	800840a <HAL_RCC_OscConfig+0x4e6>
 80083f2:	4b7d      	ldr	r3, [pc, #500]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 80083f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083f6:	4a7c      	ldr	r2, [pc, #496]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 80083f8:	f023 0301 	bic.w	r3, r3, #1
 80083fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80083fe:	4b7a      	ldr	r3, [pc, #488]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008402:	4a79      	ldr	r2, [pc, #484]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008404:	f023 0304 	bic.w	r3, r3, #4
 8008408:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d015      	beq.n	800843e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008412:	f7fb fc97 	bl	8003d44 <HAL_GetTick>
 8008416:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008418:	e00a      	b.n	8008430 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800841a:	f7fb fc93 	bl	8003d44 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008428:	4293      	cmp	r3, r2
 800842a:	d901      	bls.n	8008430 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e14b      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008430:	4b6d      	ldr	r3, [pc, #436]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0ee      	beq.n	800841a <HAL_RCC_OscConfig+0x4f6>
 800843c:	e014      	b.n	8008468 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800843e:	f7fb fc81 	bl	8003d44 <HAL_GetTick>
 8008442:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008444:	e00a      	b.n	800845c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008446:	f7fb fc7d 	bl	8003d44 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008454:	4293      	cmp	r3, r2
 8008456:	d901      	bls.n	800845c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e135      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800845c:	4b62      	ldr	r3, [pc, #392]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 800845e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008460:	f003 0302 	and.w	r3, r3, #2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1ee      	bne.n	8008446 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 812a 	beq.w	80086c6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008472:	4b5d      	ldr	r3, [pc, #372]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800847a:	2b18      	cmp	r3, #24
 800847c:	f000 80ba 	beq.w	80085f4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008484:	2b02      	cmp	r3, #2
 8008486:	f040 8095 	bne.w	80085b4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800848a:	4b57      	ldr	r3, [pc, #348]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a56      	ldr	r2, [pc, #344]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008490:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008496:	f7fb fc55 	bl	8003d44 <HAL_GetTick>
 800849a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800849c:	e008      	b.n	80084b0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800849e:	f7fb fc51 	bl	8003d44 <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d901      	bls.n	80084b0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e10b      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084b0:	4b4d      	ldr	r3, [pc, #308]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f0      	bne.n	800849e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084bc:	4b4a      	ldr	r3, [pc, #296]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 80084be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084c0:	4b4a      	ldr	r3, [pc, #296]	@ (80085ec <HAL_RCC_OscConfig+0x6c8>)
 80084c2:	4013      	ands	r3, r2
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80084cc:	0112      	lsls	r2, r2, #4
 80084ce:	430a      	orrs	r2, r1
 80084d0:	4945      	ldr	r1, [pc, #276]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	628b      	str	r3, [r1, #40]	@ 0x28
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084da:	3b01      	subs	r3, #1
 80084dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084e4:	3b01      	subs	r3, #1
 80084e6:	025b      	lsls	r3, r3, #9
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	431a      	orrs	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f0:	3b01      	subs	r3, #1
 80084f2:	041b      	lsls	r3, r3, #16
 80084f4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80084f8:	431a      	orrs	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084fe:	3b01      	subs	r3, #1
 8008500:	061b      	lsls	r3, r3, #24
 8008502:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008506:	4938      	ldr	r1, [pc, #224]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008508:	4313      	orrs	r3, r2
 800850a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800850c:	4b36      	ldr	r3, [pc, #216]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 800850e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008510:	4a35      	ldr	r2, [pc, #212]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008512:	f023 0301 	bic.w	r3, r3, #1
 8008516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008518:	4b33      	ldr	r3, [pc, #204]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 800851a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800851c:	4b34      	ldr	r3, [pc, #208]	@ (80085f0 <HAL_RCC_OscConfig+0x6cc>)
 800851e:	4013      	ands	r3, r2
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008524:	00d2      	lsls	r2, r2, #3
 8008526:	4930      	ldr	r1, [pc, #192]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008528:	4313      	orrs	r3, r2
 800852a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800852c:	4b2e      	ldr	r3, [pc, #184]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 800852e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008530:	f023 020c 	bic.w	r2, r3, #12
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008538:	492b      	ldr	r1, [pc, #172]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 800853a:	4313      	orrs	r3, r2
 800853c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800853e:	4b2a      	ldr	r3, [pc, #168]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008542:	f023 0202 	bic.w	r2, r3, #2
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800854a:	4927      	ldr	r1, [pc, #156]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 800854c:	4313      	orrs	r3, r2
 800854e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008550:	4b25      	ldr	r3, [pc, #148]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008554:	4a24      	ldr	r2, [pc, #144]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800855a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800855c:	4b22      	ldr	r3, [pc, #136]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 800855e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008560:	4a21      	ldr	r2, [pc, #132]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008568:	4b1f      	ldr	r3, [pc, #124]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 800856a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856c:	4a1e      	ldr	r2, [pc, #120]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 800856e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008574:	4b1c      	ldr	r3, [pc, #112]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008578:	4a1b      	ldr	r2, [pc, #108]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 800857a:	f043 0301 	orr.w	r3, r3, #1
 800857e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008580:	4b19      	ldr	r3, [pc, #100]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a18      	ldr	r2, [pc, #96]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 8008586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800858a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858c:	f7fb fbda 	bl	8003d44 <HAL_GetTick>
 8008590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008594:	f7fb fbd6 	bl	8003d44 <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e090      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085a6:	4b10      	ldr	r3, [pc, #64]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0f0      	beq.n	8008594 <HAL_RCC_OscConfig+0x670>
 80085b2:	e088      	b.n	80086c6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085b4:	4b0c      	ldr	r3, [pc, #48]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a0b      	ldr	r2, [pc, #44]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 80085ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c0:	f7fb fbc0 	bl	8003d44 <HAL_GetTick>
 80085c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085c6:	e008      	b.n	80085da <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085c8:	f7fb fbbc 	bl	8003d44 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d901      	bls.n	80085da <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e076      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085da:	4b03      	ldr	r3, [pc, #12]	@ (80085e8 <HAL_RCC_OscConfig+0x6c4>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1f0      	bne.n	80085c8 <HAL_RCC_OscConfig+0x6a4>
 80085e6:	e06e      	b.n	80086c6 <HAL_RCC_OscConfig+0x7a2>
 80085e8:	58024400 	.word	0x58024400
 80085ec:	fffffc0c 	.word	0xfffffc0c
 80085f0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80085f4:	4b36      	ldr	r3, [pc, #216]	@ (80086d0 <HAL_RCC_OscConfig+0x7ac>)
 80085f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80085fa:	4b35      	ldr	r3, [pc, #212]	@ (80086d0 <HAL_RCC_OscConfig+0x7ac>)
 80085fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008604:	2b01      	cmp	r3, #1
 8008606:	d031      	beq.n	800866c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	f003 0203 	and.w	r2, r3, #3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008612:	429a      	cmp	r2, r3
 8008614:	d12a      	bne.n	800866c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	091b      	lsrs	r3, r3, #4
 800861a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008622:	429a      	cmp	r2, r3
 8008624:	d122      	bne.n	800866c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008630:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008632:	429a      	cmp	r2, r3
 8008634:	d11a      	bne.n	800866c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	0a5b      	lsrs	r3, r3, #9
 800863a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008642:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008644:	429a      	cmp	r2, r3
 8008646:	d111      	bne.n	800866c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008654:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008656:	429a      	cmp	r2, r3
 8008658:	d108      	bne.n	800866c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	0e1b      	lsrs	r3, r3, #24
 800865e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008666:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008668:	429a      	cmp	r2, r3
 800866a:	d001      	beq.n	8008670 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e02b      	b.n	80086c8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008670:	4b17      	ldr	r3, [pc, #92]	@ (80086d0 <HAL_RCC_OscConfig+0x7ac>)
 8008672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008674:	08db      	lsrs	r3, r3, #3
 8008676:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800867a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	429a      	cmp	r2, r3
 8008684:	d01f      	beq.n	80086c6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008686:	4b12      	ldr	r3, [pc, #72]	@ (80086d0 <HAL_RCC_OscConfig+0x7ac>)
 8008688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868a:	4a11      	ldr	r2, [pc, #68]	@ (80086d0 <HAL_RCC_OscConfig+0x7ac>)
 800868c:	f023 0301 	bic.w	r3, r3, #1
 8008690:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008692:	f7fb fb57 	bl	8003d44 <HAL_GetTick>
 8008696:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008698:	bf00      	nop
 800869a:	f7fb fb53 	bl	8003d44 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d0f9      	beq.n	800869a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086a6:	4b0a      	ldr	r3, [pc, #40]	@ (80086d0 <HAL_RCC_OscConfig+0x7ac>)
 80086a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086aa:	4b0a      	ldr	r3, [pc, #40]	@ (80086d4 <HAL_RCC_OscConfig+0x7b0>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80086b2:	00d2      	lsls	r2, r2, #3
 80086b4:	4906      	ldr	r1, [pc, #24]	@ (80086d0 <HAL_RCC_OscConfig+0x7ac>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80086ba:	4b05      	ldr	r3, [pc, #20]	@ (80086d0 <HAL_RCC_OscConfig+0x7ac>)
 80086bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086be:	4a04      	ldr	r2, [pc, #16]	@ (80086d0 <HAL_RCC_OscConfig+0x7ac>)
 80086c0:	f043 0301 	orr.w	r3, r3, #1
 80086c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3730      	adds	r7, #48	@ 0x30
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	58024400 	.word	0x58024400
 80086d4:	ffff0007 	.word	0xffff0007

080086d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e19c      	b.n	8008a26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086ec:	4b8a      	ldr	r3, [pc, #552]	@ (8008918 <HAL_RCC_ClockConfig+0x240>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 030f 	and.w	r3, r3, #15
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d910      	bls.n	800871c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086fa:	4b87      	ldr	r3, [pc, #540]	@ (8008918 <HAL_RCC_ClockConfig+0x240>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f023 020f 	bic.w	r2, r3, #15
 8008702:	4985      	ldr	r1, [pc, #532]	@ (8008918 <HAL_RCC_ClockConfig+0x240>)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	4313      	orrs	r3, r2
 8008708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800870a:	4b83      	ldr	r3, [pc, #524]	@ (8008918 <HAL_RCC_ClockConfig+0x240>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 030f 	and.w	r3, r3, #15
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	429a      	cmp	r2, r3
 8008716:	d001      	beq.n	800871c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e184      	b.n	8008a26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d010      	beq.n	800874a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	691a      	ldr	r2, [r3, #16]
 800872c:	4b7b      	ldr	r3, [pc, #492]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008734:	429a      	cmp	r2, r3
 8008736:	d908      	bls.n	800874a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008738:	4b78      	ldr	r3, [pc, #480]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	4975      	ldr	r1, [pc, #468]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 8008746:	4313      	orrs	r3, r2
 8008748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0308 	and.w	r3, r3, #8
 8008752:	2b00      	cmp	r3, #0
 8008754:	d010      	beq.n	8008778 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	695a      	ldr	r2, [r3, #20]
 800875a:	4b70      	ldr	r3, [pc, #448]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008762:	429a      	cmp	r2, r3
 8008764:	d908      	bls.n	8008778 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008766:	4b6d      	ldr	r3, [pc, #436]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	496a      	ldr	r1, [pc, #424]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 8008774:	4313      	orrs	r3, r2
 8008776:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0310 	and.w	r3, r3, #16
 8008780:	2b00      	cmp	r3, #0
 8008782:	d010      	beq.n	80087a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	699a      	ldr	r2, [r3, #24]
 8008788:	4b64      	ldr	r3, [pc, #400]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 800878a:	69db      	ldr	r3, [r3, #28]
 800878c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008790:	429a      	cmp	r2, r3
 8008792:	d908      	bls.n	80087a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008794:	4b61      	ldr	r3, [pc, #388]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	495e      	ldr	r1, [pc, #376]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0320 	and.w	r3, r3, #32
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d010      	beq.n	80087d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69da      	ldr	r2, [r3, #28]
 80087b6:	4b59      	ldr	r3, [pc, #356]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087be:	429a      	cmp	r2, r3
 80087c0:	d908      	bls.n	80087d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80087c2:	4b56      	ldr	r3, [pc, #344]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	4953      	ldr	r1, [pc, #332]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0302 	and.w	r3, r3, #2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d010      	beq.n	8008802 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68da      	ldr	r2, [r3, #12]
 80087e4:	4b4d      	ldr	r3, [pc, #308]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	f003 030f 	and.w	r3, r3, #15
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d908      	bls.n	8008802 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087f0:	4b4a      	ldr	r3, [pc, #296]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	f023 020f 	bic.w	r2, r3, #15
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	4947      	ldr	r1, [pc, #284]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d055      	beq.n	80088ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800880e:	4b43      	ldr	r3, [pc, #268]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	4940      	ldr	r1, [pc, #256]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 800881c:	4313      	orrs	r3, r2
 800881e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	2b02      	cmp	r3, #2
 8008826:	d107      	bne.n	8008838 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008828:	4b3c      	ldr	r3, [pc, #240]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d121      	bne.n	8008878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e0f6      	b.n	8008a26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	2b03      	cmp	r3, #3
 800883e:	d107      	bne.n	8008850 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008840:	4b36      	ldr	r3, [pc, #216]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d115      	bne.n	8008878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e0ea      	b.n	8008a26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d107      	bne.n	8008868 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008858:	4b30      	ldr	r3, [pc, #192]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008860:	2b00      	cmp	r3, #0
 8008862:	d109      	bne.n	8008878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e0de      	b.n	8008a26 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008868:	4b2c      	ldr	r3, [pc, #176]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0304 	and.w	r3, r3, #4
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e0d6      	b.n	8008a26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008878:	4b28      	ldr	r3, [pc, #160]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	f023 0207 	bic.w	r2, r3, #7
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4925      	ldr	r1, [pc, #148]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 8008886:	4313      	orrs	r3, r2
 8008888:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800888a:	f7fb fa5b 	bl	8003d44 <HAL_GetTick>
 800888e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008890:	e00a      	b.n	80088a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008892:	f7fb fa57 	bl	8003d44 <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d901      	bls.n	80088a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e0be      	b.n	8008a26 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088a8:	4b1c      	ldr	r3, [pc, #112]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d1eb      	bne.n	8008892 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0302 	and.w	r3, r3, #2
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d010      	beq.n	80088e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	4b14      	ldr	r3, [pc, #80]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f003 030f 	and.w	r3, r3, #15
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d208      	bcs.n	80088e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088d6:	4b11      	ldr	r3, [pc, #68]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	f023 020f 	bic.w	r2, r3, #15
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	490e      	ldr	r1, [pc, #56]	@ (800891c <HAL_RCC_ClockConfig+0x244>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008918 <HAL_RCC_ClockConfig+0x240>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d214      	bcs.n	8008920 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088f6:	4b08      	ldr	r3, [pc, #32]	@ (8008918 <HAL_RCC_ClockConfig+0x240>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f023 020f 	bic.w	r2, r3, #15
 80088fe:	4906      	ldr	r1, [pc, #24]	@ (8008918 <HAL_RCC_ClockConfig+0x240>)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	4313      	orrs	r3, r2
 8008904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008906:	4b04      	ldr	r3, [pc, #16]	@ (8008918 <HAL_RCC_ClockConfig+0x240>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d005      	beq.n	8008920 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e086      	b.n	8008a26 <HAL_RCC_ClockConfig+0x34e>
 8008918:	52002000 	.word	0x52002000
 800891c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b00      	cmp	r3, #0
 800892a:	d010      	beq.n	800894e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691a      	ldr	r2, [r3, #16]
 8008930:	4b3f      	ldr	r3, [pc, #252]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008938:	429a      	cmp	r2, r3
 800893a:	d208      	bcs.n	800894e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800893c:	4b3c      	ldr	r3, [pc, #240]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	4939      	ldr	r1, [pc, #228]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 800894a:	4313      	orrs	r3, r2
 800894c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0308 	and.w	r3, r3, #8
 8008956:	2b00      	cmp	r3, #0
 8008958:	d010      	beq.n	800897c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	695a      	ldr	r2, [r3, #20]
 800895e:	4b34      	ldr	r3, [pc, #208]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008966:	429a      	cmp	r2, r3
 8008968:	d208      	bcs.n	800897c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800896a:	4b31      	ldr	r3, [pc, #196]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	492e      	ldr	r1, [pc, #184]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 8008978:	4313      	orrs	r3, r2
 800897a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0310 	and.w	r3, r3, #16
 8008984:	2b00      	cmp	r3, #0
 8008986:	d010      	beq.n	80089aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	699a      	ldr	r2, [r3, #24]
 800898c:	4b28      	ldr	r3, [pc, #160]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008994:	429a      	cmp	r2, r3
 8008996:	d208      	bcs.n	80089aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008998:	4b25      	ldr	r3, [pc, #148]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	4922      	ldr	r1, [pc, #136]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0320 	and.w	r3, r3, #32
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d010      	beq.n	80089d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	69da      	ldr	r2, [r3, #28]
 80089ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d208      	bcs.n	80089d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80089c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	4917      	ldr	r1, [pc, #92]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80089d8:	f000 f834 	bl	8008a44 <HAL_RCC_GetSysClockFreq>
 80089dc:	4602      	mov	r2, r0
 80089de:	4b14      	ldr	r3, [pc, #80]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	0a1b      	lsrs	r3, r3, #8
 80089e4:	f003 030f 	and.w	r3, r3, #15
 80089e8:	4912      	ldr	r1, [pc, #72]	@ (8008a34 <HAL_RCC_ClockConfig+0x35c>)
 80089ea:	5ccb      	ldrb	r3, [r1, r3]
 80089ec:	f003 031f 	and.w	r3, r3, #31
 80089f0:	fa22 f303 	lsr.w	r3, r2, r3
 80089f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008a30 <HAL_RCC_ClockConfig+0x358>)
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	f003 030f 	and.w	r3, r3, #15
 80089fe:	4a0d      	ldr	r2, [pc, #52]	@ (8008a34 <HAL_RCC_ClockConfig+0x35c>)
 8008a00:	5cd3      	ldrb	r3, [r2, r3]
 8008a02:	f003 031f 	and.w	r3, r3, #31
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8008a38 <HAL_RCC_ClockConfig+0x360>)
 8008a0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a10:	4a0a      	ldr	r2, [pc, #40]	@ (8008a3c <HAL_RCC_ClockConfig+0x364>)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008a16:	4b0a      	ldr	r3, [pc, #40]	@ (8008a40 <HAL_RCC_ClockConfig+0x368>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fb f948 	bl	8003cb0 <HAL_InitTick>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	58024400 	.word	0x58024400
 8008a34:	0802003c 	.word	0x0802003c
 8008a38:	24000004 	.word	0x24000004
 8008a3c:	24000000 	.word	0x24000000
 8008a40:	24000008 	.word	0x24000008

08008a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b089      	sub	sp, #36	@ 0x24
 8008a48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a4a:	4bb3      	ldr	r3, [pc, #716]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a52:	2b18      	cmp	r3, #24
 8008a54:	f200 8155 	bhi.w	8008d02 <HAL_RCC_GetSysClockFreq+0x2be>
 8008a58:	a201      	add	r2, pc, #4	@ (adr r2, 8008a60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5e:	bf00      	nop
 8008a60:	08008ac5 	.word	0x08008ac5
 8008a64:	08008d03 	.word	0x08008d03
 8008a68:	08008d03 	.word	0x08008d03
 8008a6c:	08008d03 	.word	0x08008d03
 8008a70:	08008d03 	.word	0x08008d03
 8008a74:	08008d03 	.word	0x08008d03
 8008a78:	08008d03 	.word	0x08008d03
 8008a7c:	08008d03 	.word	0x08008d03
 8008a80:	08008aeb 	.word	0x08008aeb
 8008a84:	08008d03 	.word	0x08008d03
 8008a88:	08008d03 	.word	0x08008d03
 8008a8c:	08008d03 	.word	0x08008d03
 8008a90:	08008d03 	.word	0x08008d03
 8008a94:	08008d03 	.word	0x08008d03
 8008a98:	08008d03 	.word	0x08008d03
 8008a9c:	08008d03 	.word	0x08008d03
 8008aa0:	08008af1 	.word	0x08008af1
 8008aa4:	08008d03 	.word	0x08008d03
 8008aa8:	08008d03 	.word	0x08008d03
 8008aac:	08008d03 	.word	0x08008d03
 8008ab0:	08008d03 	.word	0x08008d03
 8008ab4:	08008d03 	.word	0x08008d03
 8008ab8:	08008d03 	.word	0x08008d03
 8008abc:	08008d03 	.word	0x08008d03
 8008ac0:	08008af7 	.word	0x08008af7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ac4:	4b94      	ldr	r3, [pc, #592]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0320 	and.w	r3, r3, #32
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d009      	beq.n	8008ae4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ad0:	4b91      	ldr	r3, [pc, #580]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	08db      	lsrs	r3, r3, #3
 8008ad6:	f003 0303 	and.w	r3, r3, #3
 8008ada:	4a90      	ldr	r2, [pc, #576]	@ (8008d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008adc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008ae2:	e111      	b.n	8008d08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ae4:	4b8d      	ldr	r3, [pc, #564]	@ (8008d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ae6:	61bb      	str	r3, [r7, #24]
      break;
 8008ae8:	e10e      	b.n	8008d08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008aea:	4b8d      	ldr	r3, [pc, #564]	@ (8008d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008aec:	61bb      	str	r3, [r7, #24]
      break;
 8008aee:	e10b      	b.n	8008d08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008af0:	4b8c      	ldr	r3, [pc, #560]	@ (8008d24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008af2:	61bb      	str	r3, [r7, #24]
      break;
 8008af4:	e108      	b.n	8008d08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008af6:	4b88      	ldr	r3, [pc, #544]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008afa:	f003 0303 	and.w	r3, r3, #3
 8008afe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008b00:	4b85      	ldr	r3, [pc, #532]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b04:	091b      	lsrs	r3, r3, #4
 8008b06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008b0c:	4b82      	ldr	r3, [pc, #520]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008b16:	4b80      	ldr	r3, [pc, #512]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b1a:	08db      	lsrs	r3, r3, #3
 8008b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	fb02 f303 	mul.w	r3, r2, r3
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 80e1 	beq.w	8008cfc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	f000 8083 	beq.w	8008c48 <HAL_RCC_GetSysClockFreq+0x204>
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	f200 80a1 	bhi.w	8008c8c <HAL_RCC_GetSysClockFreq+0x248>
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <HAL_RCC_GetSysClockFreq+0x114>
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d056      	beq.n	8008c04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008b56:	e099      	b.n	8008c8c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b58:	4b6f      	ldr	r3, [pc, #444]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0320 	and.w	r3, r3, #32
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d02d      	beq.n	8008bc0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b64:	4b6c      	ldr	r3, [pc, #432]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	08db      	lsrs	r3, r3, #3
 8008b6a:	f003 0303 	and.w	r3, r3, #3
 8008b6e:	4a6b      	ldr	r2, [pc, #428]	@ (8008d1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b70:	fa22 f303 	lsr.w	r3, r2, r3
 8008b74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	ee07 3a90 	vmov	s15, r3
 8008b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b8e:	4b62      	ldr	r3, [pc, #392]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ba2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008bbe:	e087      	b.n	8008cd0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008d2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bd2:	4b51      	ldr	r3, [pc, #324]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008be6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c02:	e065      	b.n	8008cd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c16:	4b40      	ldr	r3, [pc, #256]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c46:	e043      	b.n	8008cd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	ee07 3a90 	vmov	s15, r3
 8008c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008d34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c8a:	e021      	b.n	8008cd0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008d30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cb2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008d28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008cd0:	4b11      	ldr	r3, [pc, #68]	@ (8008d18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd4:	0a5b      	lsrs	r3, r3, #9
 8008cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cda:	3301      	adds	r3, #1
 8008cdc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	ee07 3a90 	vmov	s15, r3
 8008ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ce8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cf4:	ee17 3a90 	vmov	r3, s15
 8008cf8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008cfa:	e005      	b.n	8008d08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	61bb      	str	r3, [r7, #24]
      break;
 8008d00:	e002      	b.n	8008d08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008d02:	4b07      	ldr	r3, [pc, #28]	@ (8008d20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d04:	61bb      	str	r3, [r7, #24]
      break;
 8008d06:	bf00      	nop
  }

  return sysclockfreq;
 8008d08:	69bb      	ldr	r3, [r7, #24]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3724      	adds	r7, #36	@ 0x24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	58024400 	.word	0x58024400
 8008d1c:	03d09000 	.word	0x03d09000
 8008d20:	003d0900 	.word	0x003d0900
 8008d24:	017d7840 	.word	0x017d7840
 8008d28:	46000000 	.word	0x46000000
 8008d2c:	4c742400 	.word	0x4c742400
 8008d30:	4a742400 	.word	0x4a742400
 8008d34:	4bbebc20 	.word	0x4bbebc20

08008d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d3e:	f7ff fe81 	bl	8008a44 <HAL_RCC_GetSysClockFreq>
 8008d42:	4602      	mov	r2, r0
 8008d44:	4b10      	ldr	r3, [pc, #64]	@ (8008d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	0a1b      	lsrs	r3, r3, #8
 8008d4a:	f003 030f 	and.w	r3, r3, #15
 8008d4e:	490f      	ldr	r1, [pc, #60]	@ (8008d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8008d50:	5ccb      	ldrb	r3, [r1, r3]
 8008d52:	f003 031f 	and.w	r3, r3, #31
 8008d56:	fa22 f303 	lsr.w	r3, r2, r3
 8008d5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d88 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	f003 030f 	and.w	r3, r3, #15
 8008d64:	4a09      	ldr	r2, [pc, #36]	@ (8008d8c <HAL_RCC_GetHCLKFreq+0x54>)
 8008d66:	5cd3      	ldrb	r3, [r2, r3]
 8008d68:	f003 031f 	and.w	r3, r3, #31
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d72:	4a07      	ldr	r2, [pc, #28]	@ (8008d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d76:	4a07      	ldr	r2, [pc, #28]	@ (8008d94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008d7c:	4b04      	ldr	r3, [pc, #16]	@ (8008d90 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	58024400 	.word	0x58024400
 8008d8c:	0802003c 	.word	0x0802003c
 8008d90:	24000004 	.word	0x24000004
 8008d94:	24000000 	.word	0x24000000

08008d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008d9c:	f7ff ffcc 	bl	8008d38 <HAL_RCC_GetHCLKFreq>
 8008da0:	4602      	mov	r2, r0
 8008da2:	4b06      	ldr	r3, [pc, #24]	@ (8008dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	091b      	lsrs	r3, r3, #4
 8008da8:	f003 0307 	and.w	r3, r3, #7
 8008dac:	4904      	ldr	r1, [pc, #16]	@ (8008dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008dae:	5ccb      	ldrb	r3, [r1, r3]
 8008db0:	f003 031f 	and.w	r3, r3, #31
 8008db4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	58024400 	.word	0x58024400
 8008dc0:	0802003c 	.word	0x0802003c

08008dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008dc8:	f7ff ffb6 	bl	8008d38 <HAL_RCC_GetHCLKFreq>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	4b06      	ldr	r3, [pc, #24]	@ (8008de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	0a1b      	lsrs	r3, r3, #8
 8008dd4:	f003 0307 	and.w	r3, r3, #7
 8008dd8:	4904      	ldr	r1, [pc, #16]	@ (8008dec <HAL_RCC_GetPCLK2Freq+0x28>)
 8008dda:	5ccb      	ldrb	r3, [r1, r3]
 8008ddc:	f003 031f 	and.w	r3, r3, #31
 8008de0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	58024400 	.word	0x58024400
 8008dec:	0802003c 	.word	0x0802003c

08008df0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008df4:	b0c6      	sub	sp, #280	@ 0x118
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e02:	2300      	movs	r3, #0
 8008e04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008e14:	2500      	movs	r5, #0
 8008e16:	ea54 0305 	orrs.w	r3, r4, r5
 8008e1a:	d049      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e26:	d02f      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008e28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e2c:	d828      	bhi.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e32:	d01a      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e38:	d822      	bhi.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008e3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e42:	d007      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008e44:	e01c      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e46:	4bab      	ldr	r3, [pc, #684]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4a:	4aaa      	ldr	r2, [pc, #680]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e52:	e01a      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e58:	3308      	adds	r3, #8
 8008e5a:	2102      	movs	r1, #2
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f002 fa49 	bl	800b2f4 <RCCEx_PLL2_Config>
 8008e62:	4603      	mov	r3, r0
 8008e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e68:	e00f      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e6e:	3328      	adds	r3, #40	@ 0x28
 8008e70:	2102      	movs	r1, #2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f002 faf0 	bl	800b458 <RCCEx_PLL3_Config>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e7e:	e004      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e86:	e000      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10a      	bne.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008e92:	4b98      	ldr	r3, [pc, #608]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ea0:	4a94      	ldr	r2, [pc, #592]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ea2:	430b      	orrs	r3, r1
 8008ea4:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ea6:	e003      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008eac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008ebc:	f04f 0900 	mov.w	r9, #0
 8008ec0:	ea58 0309 	orrs.w	r3, r8, r9
 8008ec4:	d047      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d82a      	bhi.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed6:	bf00      	nop
 8008ed8:	08008eed 	.word	0x08008eed
 8008edc:	08008efb 	.word	0x08008efb
 8008ee0:	08008f11 	.word	0x08008f11
 8008ee4:	08008f2f 	.word	0x08008f2f
 8008ee8:	08008f2f 	.word	0x08008f2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eec:	4b81      	ldr	r3, [pc, #516]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef0:	4a80      	ldr	r2, [pc, #512]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ef8:	e01a      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008efe:	3308      	adds	r3, #8
 8008f00:	2100      	movs	r1, #0
 8008f02:	4618      	mov	r0, r3
 8008f04:	f002 f9f6 	bl	800b2f4 <RCCEx_PLL2_Config>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f0e:	e00f      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f14:	3328      	adds	r3, #40	@ 0x28
 8008f16:	2100      	movs	r1, #0
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f002 fa9d 	bl	800b458 <RCCEx_PLL3_Config>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f24:	e004      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f2c:	e000      	b.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f38:	4b6e      	ldr	r3, [pc, #440]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f3c:	f023 0107 	bic.w	r1, r3, #7
 8008f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f46:	4a6b      	ldr	r2, [pc, #428]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f48:	430b      	orrs	r3, r1
 8008f4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f4c:	e003      	b.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008f62:	f04f 0b00 	mov.w	fp, #0
 8008f66:	ea5a 030b 	orrs.w	r3, sl, fp
 8008f6a:	d05b      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f74:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008f78:	d03b      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008f7a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008f7e:	d834      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008f80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f84:	d037      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008f86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f8a:	d82e      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008f8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f90:	d033      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008f92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f96:	d828      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008f98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f9c:	d01a      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008fa2:	d822      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d003      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008fa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fac:	d007      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008fae:	e01c      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fb0:	4b50      	ldr	r3, [pc, #320]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fbc:	e01e      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f002 f994 	bl	800b2f4 <RCCEx_PLL2_Config>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008fd2:	e013      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fd8:	3328      	adds	r3, #40	@ 0x28
 8008fda:	2100      	movs	r1, #0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f002 fa3b 	bl	800b458 <RCCEx_PLL3_Config>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fe8:	e008      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ff0:	e004      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008ff2:	bf00      	nop
 8008ff4:	e002      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008ff6:	bf00      	nop
 8008ff8:	e000      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10b      	bne.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009004:	4b3b      	ldr	r3, [pc, #236]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009008:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800900c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009010:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009014:	4a37      	ldr	r2, [pc, #220]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009016:	430b      	orrs	r3, r1
 8009018:	6593      	str	r3, [r2, #88]	@ 0x58
 800901a:	e003      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800901c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009020:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009030:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009034:	2300      	movs	r3, #0
 8009036:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800903a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800903e:	460b      	mov	r3, r1
 8009040:	4313      	orrs	r3, r2
 8009042:	d05d      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009048:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800904c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009050:	d03b      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009052:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009056:	d834      	bhi.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009058:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800905c:	d037      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800905e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009062:	d82e      	bhi.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009064:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009068:	d033      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800906a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800906e:	d828      	bhi.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009070:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009074:	d01a      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009076:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800907a:	d822      	bhi.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800907c:	2b00      	cmp	r3, #0
 800907e:	d003      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009084:	d007      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009086:	e01c      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009088:	4b1a      	ldr	r3, [pc, #104]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800908a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908c:	4a19      	ldr	r2, [pc, #100]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800908e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009094:	e01e      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800909a:	3308      	adds	r3, #8
 800909c:	2100      	movs	r1, #0
 800909e:	4618      	mov	r0, r3
 80090a0:	f002 f928 	bl	800b2f4 <RCCEx_PLL2_Config>
 80090a4:	4603      	mov	r3, r0
 80090a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80090aa:	e013      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b0:	3328      	adds	r3, #40	@ 0x28
 80090b2:	2100      	movs	r1, #0
 80090b4:	4618      	mov	r0, r3
 80090b6:	f002 f9cf 	bl	800b458 <RCCEx_PLL3_Config>
 80090ba:	4603      	mov	r3, r0
 80090bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090c0:	e008      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090c8:	e004      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80090ca:	bf00      	nop
 80090cc:	e002      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80090ce:	bf00      	nop
 80090d0:	e000      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80090d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10d      	bne.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80090dc:	4b05      	ldr	r3, [pc, #20]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80090de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80090e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80090ec:	4a01      	ldr	r2, [pc, #4]	@ (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80090ee:	430b      	orrs	r3, r1
 80090f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80090f2:	e005      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80090f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800910c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009110:	2300      	movs	r3, #0
 8009112:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009116:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800911a:	460b      	mov	r3, r1
 800911c:	4313      	orrs	r3, r2
 800911e:	d03a      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009126:	2b30      	cmp	r3, #48	@ 0x30
 8009128:	d01f      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800912a:	2b30      	cmp	r3, #48	@ 0x30
 800912c:	d819      	bhi.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800912e:	2b20      	cmp	r3, #32
 8009130:	d00c      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009132:	2b20      	cmp	r3, #32
 8009134:	d815      	bhi.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009136:	2b00      	cmp	r3, #0
 8009138:	d019      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800913a:	2b10      	cmp	r3, #16
 800913c:	d111      	bne.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800913e:	4baa      	ldr	r3, [pc, #680]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009142:	4aa9      	ldr	r2, [pc, #676]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009148:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800914a:	e011      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800914c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009150:	3308      	adds	r3, #8
 8009152:	2102      	movs	r1, #2
 8009154:	4618      	mov	r0, r3
 8009156:	f002 f8cd 	bl	800b2f4 <RCCEx_PLL2_Config>
 800915a:	4603      	mov	r3, r0
 800915c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009160:	e006      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009168:	e002      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800916a:	bf00      	nop
 800916c:	e000      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800916e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009170:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10a      	bne.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009178:	4b9b      	ldr	r3, [pc, #620]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800917a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800917c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009186:	4a98      	ldr	r2, [pc, #608]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009188:	430b      	orrs	r3, r1
 800918a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800918c:	e003      	b.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800918e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009192:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80091a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80091a6:	2300      	movs	r3, #0
 80091a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80091ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80091b0:	460b      	mov	r3, r1
 80091b2:	4313      	orrs	r3, r2
 80091b4:	d051      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80091b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091c0:	d035      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80091c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091c6:	d82e      	bhi.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80091c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091cc:	d031      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80091ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091d2:	d828      	bhi.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80091d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091d8:	d01a      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80091da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091de:	d822      	bhi.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80091e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091e8:	d007      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80091ea:	e01c      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ec:	4b7e      	ldr	r3, [pc, #504]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f0:	4a7d      	ldr	r2, [pc, #500]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091f8:	e01c      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091fe:	3308      	adds	r3, #8
 8009200:	2100      	movs	r1, #0
 8009202:	4618      	mov	r0, r3
 8009204:	f002 f876 	bl	800b2f4 <RCCEx_PLL2_Config>
 8009208:	4603      	mov	r3, r0
 800920a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800920e:	e011      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009214:	3328      	adds	r3, #40	@ 0x28
 8009216:	2100      	movs	r1, #0
 8009218:	4618      	mov	r0, r3
 800921a:	f002 f91d 	bl	800b458 <RCCEx_PLL3_Config>
 800921e:	4603      	mov	r3, r0
 8009220:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009224:	e006      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800922c:	e002      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800922e:	bf00      	nop
 8009230:	e000      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009232:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009234:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10a      	bne.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800923c:	4b6a      	ldr	r3, [pc, #424]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800923e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009240:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800924a:	4a67      	ldr	r2, [pc, #412]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800924c:	430b      	orrs	r3, r1
 800924e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009250:	e003      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009252:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009256:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800925a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009266:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800926a:	2300      	movs	r3, #0
 800926c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009270:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009274:	460b      	mov	r3, r1
 8009276:	4313      	orrs	r3, r2
 8009278:	d053      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800927a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800927e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009284:	d033      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009286:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800928a:	d82c      	bhi.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800928c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009290:	d02f      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009292:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009296:	d826      	bhi.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009298:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800929c:	d02b      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800929e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80092a2:	d820      	bhi.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80092a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092a8:	d012      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80092aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092ae:	d81a      	bhi.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d022      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80092b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092b8:	d115      	bne.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092be:	3308      	adds	r3, #8
 80092c0:	2101      	movs	r1, #1
 80092c2:	4618      	mov	r0, r3
 80092c4:	f002 f816 	bl	800b2f4 <RCCEx_PLL2_Config>
 80092c8:	4603      	mov	r3, r0
 80092ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80092ce:	e015      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d4:	3328      	adds	r3, #40	@ 0x28
 80092d6:	2101      	movs	r1, #1
 80092d8:	4618      	mov	r0, r3
 80092da:	f002 f8bd 	bl	800b458 <RCCEx_PLL3_Config>
 80092de:	4603      	mov	r3, r0
 80092e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80092e4:	e00a      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092ec:	e006      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80092ee:	bf00      	nop
 80092f0:	e004      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80092f2:	bf00      	nop
 80092f4:	e002      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80092f6:	bf00      	nop
 80092f8:	e000      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80092fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009304:	4b38      	ldr	r3, [pc, #224]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009308:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800930c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009312:	4a35      	ldr	r2, [pc, #212]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009314:	430b      	orrs	r3, r1
 8009316:	6513      	str	r3, [r2, #80]	@ 0x50
 8009318:	e003      	b.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800931a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800931e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800932e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009332:	2300      	movs	r3, #0
 8009334:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009338:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800933c:	460b      	mov	r3, r1
 800933e:	4313      	orrs	r3, r2
 8009340:	d058      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009346:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800934a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800934e:	d033      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009350:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009354:	d82c      	bhi.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800935a:	d02f      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800935c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009360:	d826      	bhi.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009362:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009366:	d02b      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009368:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800936c:	d820      	bhi.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800936e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009372:	d012      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009378:	d81a      	bhi.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d022      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800937e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009382:	d115      	bne.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009388:	3308      	adds	r3, #8
 800938a:	2101      	movs	r1, #1
 800938c:	4618      	mov	r0, r3
 800938e:	f001 ffb1 	bl	800b2f4 <RCCEx_PLL2_Config>
 8009392:	4603      	mov	r3, r0
 8009394:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009398:	e015      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800939a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939e:	3328      	adds	r3, #40	@ 0x28
 80093a0:	2101      	movs	r1, #1
 80093a2:	4618      	mov	r0, r3
 80093a4:	f002 f858 	bl	800b458 <RCCEx_PLL3_Config>
 80093a8:	4603      	mov	r3, r0
 80093aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80093ae:	e00a      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093b6:	e006      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80093b8:	bf00      	nop
 80093ba:	e004      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80093bc:	bf00      	nop
 80093be:	e002      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80093c0:	bf00      	nop
 80093c2:	e000      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80093c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10e      	bne.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80093ce:	4b06      	ldr	r3, [pc, #24]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80093d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80093d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80093de:	4a02      	ldr	r2, [pc, #8]	@ (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80093e0:	430b      	orrs	r3, r1
 80093e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80093e4:	e006      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80093e6:	bf00      	nop
 80093e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80093f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009404:	2300      	movs	r3, #0
 8009406:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800940a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800940e:	460b      	mov	r3, r1
 8009410:	4313      	orrs	r3, r2
 8009412:	d037      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800941a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800941e:	d00e      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009424:	d816      	bhi.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009426:	2b00      	cmp	r3, #0
 8009428:	d018      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800942a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800942e:	d111      	bne.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009430:	4bc4      	ldr	r3, [pc, #784]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009434:	4ac3      	ldr	r2, [pc, #780]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800943a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800943c:	e00f      	b.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800943e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009442:	3308      	adds	r3, #8
 8009444:	2101      	movs	r1, #1
 8009446:	4618      	mov	r0, r3
 8009448:	f001 ff54 	bl	800b2f4 <RCCEx_PLL2_Config>
 800944c:	4603      	mov	r3, r0
 800944e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009452:	e004      	b.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800945a:	e000      	b.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800945c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800945e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10a      	bne.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009466:	4bb7      	ldr	r3, [pc, #732]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800946a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800946e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009474:	4ab3      	ldr	r2, [pc, #716]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009476:	430b      	orrs	r3, r1
 8009478:	6513      	str	r3, [r2, #80]	@ 0x50
 800947a:	e003      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800947c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009480:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009490:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009494:	2300      	movs	r3, #0
 8009496:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800949a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800949e:	460b      	mov	r3, r1
 80094a0:	4313      	orrs	r3, r2
 80094a2:	d039      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80094a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d81c      	bhi.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80094ae:	a201      	add	r2, pc, #4	@ (adr r2, 80094b4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80094b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b4:	080094f1 	.word	0x080094f1
 80094b8:	080094c5 	.word	0x080094c5
 80094bc:	080094d3 	.word	0x080094d3
 80094c0:	080094f1 	.word	0x080094f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094c4:	4b9f      	ldr	r3, [pc, #636]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c8:	4a9e      	ldr	r2, [pc, #632]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80094d0:	e00f      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094d6:	3308      	adds	r3, #8
 80094d8:	2102      	movs	r1, #2
 80094da:	4618      	mov	r0, r3
 80094dc:	f001 ff0a 	bl	800b2f4 <RCCEx_PLL2_Config>
 80094e0:	4603      	mov	r3, r0
 80094e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80094e6:	e004      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80094ee:	e000      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80094f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10a      	bne.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80094fa:	4b92      	ldr	r3, [pc, #584]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094fe:	f023 0103 	bic.w	r1, r3, #3
 8009502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009508:	4a8e      	ldr	r2, [pc, #568]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800950a:	430b      	orrs	r3, r1
 800950c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800950e:	e003      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009514:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009524:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009528:	2300      	movs	r3, #0
 800952a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800952e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009532:	460b      	mov	r3, r1
 8009534:	4313      	orrs	r3, r2
 8009536:	f000 8099 	beq.w	800966c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800953a:	4b83      	ldr	r3, [pc, #524]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a82      	ldr	r2, [pc, #520]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009544:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009546:	f7fa fbfd 	bl	8003d44 <HAL_GetTick>
 800954a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800954e:	e00b      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009550:	f7fa fbf8 	bl	8003d44 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	2b64      	cmp	r3, #100	@ 0x64
 800955e:	d903      	bls.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009566:	e005      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009568:	4b77      	ldr	r3, [pc, #476]	@ (8009748 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009570:	2b00      	cmp	r3, #0
 8009572:	d0ed      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009578:	2b00      	cmp	r3, #0
 800957a:	d173      	bne.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800957c:	4b71      	ldr	r3, [pc, #452]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800957e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009584:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009588:	4053      	eors	r3, r2
 800958a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800958e:	2b00      	cmp	r3, #0
 8009590:	d015      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009592:	4b6c      	ldr	r3, [pc, #432]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800959a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800959e:	4b69      	ldr	r3, [pc, #420]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095a2:	4a68      	ldr	r2, [pc, #416]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095a8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80095aa:	4b66      	ldr	r3, [pc, #408]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095ae:	4a65      	ldr	r2, [pc, #404]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095b4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80095b6:	4a63      	ldr	r2, [pc, #396]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095bc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80095be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80095c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095ca:	d118      	bne.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095cc:	f7fa fbba 	bl	8003d44 <HAL_GetTick>
 80095d0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095d4:	e00d      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095d6:	f7fa fbb5 	bl	8003d44 <HAL_GetTick>
 80095da:	4602      	mov	r2, r0
 80095dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80095e0:	1ad2      	subs	r2, r2, r3
 80095e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d903      	bls.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80095f0:	e005      	b.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095f2:	4b54      	ldr	r3, [pc, #336]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095f6:	f003 0302 	and.w	r3, r3, #2
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d0eb      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80095fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009602:	2b00      	cmp	r3, #0
 8009604:	d129      	bne.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800960a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800960e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009616:	d10e      	bne.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009618:	4b4a      	ldr	r3, [pc, #296]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009624:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009628:	091a      	lsrs	r2, r3, #4
 800962a:	4b48      	ldr	r3, [pc, #288]	@ (800974c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800962c:	4013      	ands	r3, r2
 800962e:	4a45      	ldr	r2, [pc, #276]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009630:	430b      	orrs	r3, r1
 8009632:	6113      	str	r3, [r2, #16]
 8009634:	e005      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009636:	4b43      	ldr	r3, [pc, #268]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	4a42      	ldr	r2, [pc, #264]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800963c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009640:	6113      	str	r3, [r2, #16]
 8009642:	4b40      	ldr	r3, [pc, #256]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009644:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800964a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800964e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009652:	4a3c      	ldr	r2, [pc, #240]	@ (8009744 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009654:	430b      	orrs	r3, r1
 8009656:	6713      	str	r3, [r2, #112]	@ 0x70
 8009658:	e008      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800965a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800965e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009662:	e003      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009664:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009668:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800966c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009674:	f002 0301 	and.w	r3, r2, #1
 8009678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800967c:	2300      	movs	r3, #0
 800967e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009682:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009686:	460b      	mov	r3, r1
 8009688:	4313      	orrs	r3, r2
 800968a:	f000 808f 	beq.w	80097ac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800968e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009692:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009694:	2b28      	cmp	r3, #40	@ 0x28
 8009696:	d871      	bhi.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009698:	a201      	add	r2, pc, #4	@ (adr r2, 80096a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800969a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969e:	bf00      	nop
 80096a0:	08009785 	.word	0x08009785
 80096a4:	0800977d 	.word	0x0800977d
 80096a8:	0800977d 	.word	0x0800977d
 80096ac:	0800977d 	.word	0x0800977d
 80096b0:	0800977d 	.word	0x0800977d
 80096b4:	0800977d 	.word	0x0800977d
 80096b8:	0800977d 	.word	0x0800977d
 80096bc:	0800977d 	.word	0x0800977d
 80096c0:	08009751 	.word	0x08009751
 80096c4:	0800977d 	.word	0x0800977d
 80096c8:	0800977d 	.word	0x0800977d
 80096cc:	0800977d 	.word	0x0800977d
 80096d0:	0800977d 	.word	0x0800977d
 80096d4:	0800977d 	.word	0x0800977d
 80096d8:	0800977d 	.word	0x0800977d
 80096dc:	0800977d 	.word	0x0800977d
 80096e0:	08009767 	.word	0x08009767
 80096e4:	0800977d 	.word	0x0800977d
 80096e8:	0800977d 	.word	0x0800977d
 80096ec:	0800977d 	.word	0x0800977d
 80096f0:	0800977d 	.word	0x0800977d
 80096f4:	0800977d 	.word	0x0800977d
 80096f8:	0800977d 	.word	0x0800977d
 80096fc:	0800977d 	.word	0x0800977d
 8009700:	08009785 	.word	0x08009785
 8009704:	0800977d 	.word	0x0800977d
 8009708:	0800977d 	.word	0x0800977d
 800970c:	0800977d 	.word	0x0800977d
 8009710:	0800977d 	.word	0x0800977d
 8009714:	0800977d 	.word	0x0800977d
 8009718:	0800977d 	.word	0x0800977d
 800971c:	0800977d 	.word	0x0800977d
 8009720:	08009785 	.word	0x08009785
 8009724:	0800977d 	.word	0x0800977d
 8009728:	0800977d 	.word	0x0800977d
 800972c:	0800977d 	.word	0x0800977d
 8009730:	0800977d 	.word	0x0800977d
 8009734:	0800977d 	.word	0x0800977d
 8009738:	0800977d 	.word	0x0800977d
 800973c:	0800977d 	.word	0x0800977d
 8009740:	08009785 	.word	0x08009785
 8009744:	58024400 	.word	0x58024400
 8009748:	58024800 	.word	0x58024800
 800974c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009754:	3308      	adds	r3, #8
 8009756:	2101      	movs	r1, #1
 8009758:	4618      	mov	r0, r3
 800975a:	f001 fdcb 	bl	800b2f4 <RCCEx_PLL2_Config>
 800975e:	4603      	mov	r3, r0
 8009760:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009764:	e00f      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800976a:	3328      	adds	r3, #40	@ 0x28
 800976c:	2101      	movs	r1, #1
 800976e:	4618      	mov	r0, r3
 8009770:	f001 fe72 	bl	800b458 <RCCEx_PLL3_Config>
 8009774:	4603      	mov	r3, r0
 8009776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800977a:	e004      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009782:	e000      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009786:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10a      	bne.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800978e:	4bbf      	ldr	r3, [pc, #764]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009792:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800979a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800979c:	4abb      	ldr	r2, [pc, #748]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800979e:	430b      	orrs	r3, r1
 80097a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80097a2:	e003      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80097ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	f002 0302 	and.w	r3, r2, #2
 80097b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097bc:	2300      	movs	r3, #0
 80097be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80097c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80097c6:	460b      	mov	r3, r1
 80097c8:	4313      	orrs	r3, r2
 80097ca:	d041      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80097cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097d2:	2b05      	cmp	r3, #5
 80097d4:	d824      	bhi.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80097d6:	a201      	add	r2, pc, #4	@ (adr r2, 80097dc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80097d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097dc:	08009829 	.word	0x08009829
 80097e0:	080097f5 	.word	0x080097f5
 80097e4:	0800980b 	.word	0x0800980b
 80097e8:	08009829 	.word	0x08009829
 80097ec:	08009829 	.word	0x08009829
 80097f0:	08009829 	.word	0x08009829
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f8:	3308      	adds	r3, #8
 80097fa:	2101      	movs	r1, #1
 80097fc:	4618      	mov	r0, r3
 80097fe:	f001 fd79 	bl	800b2f4 <RCCEx_PLL2_Config>
 8009802:	4603      	mov	r3, r0
 8009804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009808:	e00f      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800980a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800980e:	3328      	adds	r3, #40	@ 0x28
 8009810:	2101      	movs	r1, #1
 8009812:	4618      	mov	r0, r3
 8009814:	f001 fe20 	bl	800b458 <RCCEx_PLL3_Config>
 8009818:	4603      	mov	r3, r0
 800981a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800981e:	e004      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009826:	e000      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800982a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10a      	bne.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009832:	4b96      	ldr	r3, [pc, #600]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009836:	f023 0107 	bic.w	r1, r3, #7
 800983a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800983e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009840:	4a92      	ldr	r2, [pc, #584]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009842:	430b      	orrs	r3, r1
 8009844:	6553      	str	r3, [r2, #84]	@ 0x54
 8009846:	e003      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800984c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	f002 0304 	and.w	r3, r2, #4
 800985c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009860:	2300      	movs	r3, #0
 8009862:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009866:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800986a:	460b      	mov	r3, r1
 800986c:	4313      	orrs	r3, r2
 800986e:	d044      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009878:	2b05      	cmp	r3, #5
 800987a:	d825      	bhi.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800987c:	a201      	add	r2, pc, #4	@ (adr r2, 8009884 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	080098d1 	.word	0x080098d1
 8009888:	0800989d 	.word	0x0800989d
 800988c:	080098b3 	.word	0x080098b3
 8009890:	080098d1 	.word	0x080098d1
 8009894:	080098d1 	.word	0x080098d1
 8009898:	080098d1 	.word	0x080098d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800989c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a0:	3308      	adds	r3, #8
 80098a2:	2101      	movs	r1, #1
 80098a4:	4618      	mov	r0, r3
 80098a6:	f001 fd25 	bl	800b2f4 <RCCEx_PLL2_Config>
 80098aa:	4603      	mov	r3, r0
 80098ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80098b0:	e00f      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b6:	3328      	adds	r3, #40	@ 0x28
 80098b8:	2101      	movs	r1, #1
 80098ba:	4618      	mov	r0, r3
 80098bc:	f001 fdcc 	bl	800b458 <RCCEx_PLL3_Config>
 80098c0:	4603      	mov	r3, r0
 80098c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80098c6:	e004      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098ce:	e000      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80098d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10b      	bne.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80098da:	4b6c      	ldr	r3, [pc, #432]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098de:	f023 0107 	bic.w	r1, r3, #7
 80098e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ea:	4a68      	ldr	r2, [pc, #416]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098ec:	430b      	orrs	r3, r1
 80098ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80098f0:	e003      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80098fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	f002 0320 	and.w	r3, r2, #32
 8009906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800990a:	2300      	movs	r3, #0
 800990c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009910:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009914:	460b      	mov	r3, r1
 8009916:	4313      	orrs	r3, r2
 8009918:	d055      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800991a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800991e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009922:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009926:	d033      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009928:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800992c:	d82c      	bhi.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800992e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009932:	d02f      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009938:	d826      	bhi.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800993a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800993e:	d02b      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009940:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009944:	d820      	bhi.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800994a:	d012      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800994c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009950:	d81a      	bhi.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009952:	2b00      	cmp	r3, #0
 8009954:	d022      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800995a:	d115      	bne.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800995c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009960:	3308      	adds	r3, #8
 8009962:	2100      	movs	r1, #0
 8009964:	4618      	mov	r0, r3
 8009966:	f001 fcc5 	bl	800b2f4 <RCCEx_PLL2_Config>
 800996a:	4603      	mov	r3, r0
 800996c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009970:	e015      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009976:	3328      	adds	r3, #40	@ 0x28
 8009978:	2102      	movs	r1, #2
 800997a:	4618      	mov	r0, r3
 800997c:	f001 fd6c 	bl	800b458 <RCCEx_PLL3_Config>
 8009980:	4603      	mov	r3, r0
 8009982:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009986:	e00a      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800998e:	e006      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009990:	bf00      	nop
 8009992:	e004      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009994:	bf00      	nop
 8009996:	e002      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009998:	bf00      	nop
 800999a:	e000      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800999c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800999e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10b      	bne.n	80099be <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80099a6:	4b39      	ldr	r3, [pc, #228]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80099a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80099ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099b6:	4a35      	ldr	r2, [pc, #212]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80099b8:	430b      	orrs	r3, r1
 80099ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80099bc:	e003      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80099c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80099d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80099d6:	2300      	movs	r3, #0
 80099d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80099dc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80099e0:	460b      	mov	r3, r1
 80099e2:	4313      	orrs	r3, r2
 80099e4:	d058      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80099e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80099ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80099f2:	d033      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80099f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80099f8:	d82c      	bhi.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80099fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099fe:	d02f      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a04:	d826      	bhi.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009a06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a0a:	d02b      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009a0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a10:	d820      	bhi.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009a12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a16:	d012      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a1c:	d81a      	bhi.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d022      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a26:	d115      	bne.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	2100      	movs	r1, #0
 8009a30:	4618      	mov	r0, r3
 8009a32:	f001 fc5f 	bl	800b2f4 <RCCEx_PLL2_Config>
 8009a36:	4603      	mov	r3, r0
 8009a38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009a3c:	e015      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a42:	3328      	adds	r3, #40	@ 0x28
 8009a44:	2102      	movs	r1, #2
 8009a46:	4618      	mov	r0, r3
 8009a48:	f001 fd06 	bl	800b458 <RCCEx_PLL3_Config>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009a52:	e00a      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a5a:	e006      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009a5c:	bf00      	nop
 8009a5e:	e004      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009a60:	bf00      	nop
 8009a62:	e002      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009a64:	bf00      	nop
 8009a66:	e000      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10e      	bne.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a72:	4b06      	ldr	r3, [pc, #24]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a76:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009a82:	4a02      	ldr	r2, [pc, #8]	@ (8009a8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a84:	430b      	orrs	r3, r1
 8009a86:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a88:	e006      	b.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009a8a:	bf00      	nop
 8009a8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009aa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009aae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	d055      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009abc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ac0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009ac4:	d033      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009ac6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009aca:	d82c      	bhi.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ad0:	d02f      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009ad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ad6:	d826      	bhi.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009ad8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009adc:	d02b      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009ade:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009ae2:	d820      	bhi.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009ae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ae8:	d012      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009aea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009aee:	d81a      	bhi.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d022      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009af8:	d115      	bne.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009afe:	3308      	adds	r3, #8
 8009b00:	2100      	movs	r1, #0
 8009b02:	4618      	mov	r0, r3
 8009b04:	f001 fbf6 	bl	800b2f4 <RCCEx_PLL2_Config>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009b0e:	e015      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b14:	3328      	adds	r3, #40	@ 0x28
 8009b16:	2102      	movs	r1, #2
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f001 fc9d 	bl	800b458 <RCCEx_PLL3_Config>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009b24:	e00a      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b2c:	e006      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009b2e:	bf00      	nop
 8009b30:	e004      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009b32:	bf00      	nop
 8009b34:	e002      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009b36:	bf00      	nop
 8009b38:	e000      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10b      	bne.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009b44:	4ba0      	ldr	r3, [pc, #640]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b48:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b54:	4a9c      	ldr	r2, [pc, #624]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b56:	430b      	orrs	r3, r1
 8009b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b5a:	e003      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	f002 0308 	and.w	r3, r2, #8
 8009b70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b74:	2300      	movs	r3, #0
 8009b76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009b7a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4313      	orrs	r3, r2
 8009b82:	d01e      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b90:	d10c      	bne.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b96:	3328      	adds	r3, #40	@ 0x28
 8009b98:	2102      	movs	r1, #2
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f001 fc5c 	bl	800b458 <RCCEx_PLL3_Config>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d002      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009bac:	4b86      	ldr	r3, [pc, #536]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bb0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bbc:	4a82      	ldr	r2, [pc, #520]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bbe:	430b      	orrs	r3, r1
 8009bc0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	f002 0310 	and.w	r3, r2, #16
 8009bce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009bd8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009bdc:	460b      	mov	r3, r1
 8009bde:	4313      	orrs	r3, r2
 8009be0:	d01e      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bee:	d10c      	bne.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf4:	3328      	adds	r3, #40	@ 0x28
 8009bf6:	2102      	movs	r1, #2
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f001 fc2d 	bl	800b458 <RCCEx_PLL3_Config>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c0a:	4b6f      	ldr	r3, [pc, #444]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c1a:	4a6b      	ldr	r2, [pc, #428]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c1c:	430b      	orrs	r3, r1
 8009c1e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009c2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c2e:	2300      	movs	r3, #0
 8009c30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c32:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009c36:	460b      	mov	r3, r1
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	d03e      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c48:	d022      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009c4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c4e:	d81b      	bhi.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d003      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c58:	d00b      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009c5a:	e015      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c60:	3308      	adds	r3, #8
 8009c62:	2100      	movs	r1, #0
 8009c64:	4618      	mov	r0, r3
 8009c66:	f001 fb45 	bl	800b2f4 <RCCEx_PLL2_Config>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c70:	e00f      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c76:	3328      	adds	r3, #40	@ 0x28
 8009c78:	2102      	movs	r1, #2
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f001 fbec 	bl	800b458 <RCCEx_PLL3_Config>
 8009c80:	4603      	mov	r3, r0
 8009c82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c86:	e004      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c8e:	e000      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10b      	bne.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c9e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009caa:	4a47      	ldr	r2, [pc, #284]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cac:	430b      	orrs	r3, r1
 8009cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cb0:	e003      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009cc6:	673b      	str	r3, [r7, #112]	@ 0x70
 8009cc8:	2300      	movs	r3, #0
 8009cca:	677b      	str	r3, [r7, #116]	@ 0x74
 8009ccc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	d03b      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ce2:	d01f      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009ce4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ce8:	d818      	bhi.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cee:	d003      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009cf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009cf4:	d007      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009cf6:	e011      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cf8:	4b33      	ldr	r3, [pc, #204]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cfc:	4a32      	ldr	r2, [pc, #200]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009d04:	e00f      	b.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0a:	3328      	adds	r3, #40	@ 0x28
 8009d0c:	2101      	movs	r1, #1
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f001 fba2 	bl	800b458 <RCCEx_PLL3_Config>
 8009d14:	4603      	mov	r3, r0
 8009d16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009d1a:	e004      	b.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d22:	e000      	b.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10b      	bne.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d2e:	4b26      	ldr	r3, [pc, #152]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d3e:	4a22      	ldr	r2, [pc, #136]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d40:	430b      	orrs	r3, r1
 8009d42:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d44:	e003      	b.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009d5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d60:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009d64:	460b      	mov	r3, r1
 8009d66:	4313      	orrs	r3, r2
 8009d68:	d034      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d78:	d007      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009d7a:	e011      	b.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d7c:	4b12      	ldr	r3, [pc, #72]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d80:	4a11      	ldr	r2, [pc, #68]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d88:	e00e      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d8e:	3308      	adds	r3, #8
 8009d90:	2102      	movs	r1, #2
 8009d92:	4618      	mov	r0, r3
 8009d94:	f001 faae 	bl	800b2f4 <RCCEx_PLL2_Config>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d9e:	e003      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009da8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10d      	bne.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009db0:	4b05      	ldr	r3, [pc, #20]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009db4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dbe:	4a02      	ldr	r2, [pc, #8]	@ (8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009dc0:	430b      	orrs	r3, r1
 8009dc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009dc4:	e006      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009dc6:	bf00      	nop
 8009dc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ddc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009de0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009de2:	2300      	movs	r3, #0
 8009de4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009de6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009dea:	460b      	mov	r3, r1
 8009dec:	4313      	orrs	r3, r2
 8009dee:	d00c      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df4:	3328      	adds	r3, #40	@ 0x28
 8009df6:	2102      	movs	r1, #2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f001 fb2d 	bl	800b458 <RCCEx_PLL3_Config>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d002      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009e16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e18:	2300      	movs	r3, #0
 8009e1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e1c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009e20:	460b      	mov	r3, r1
 8009e22:	4313      	orrs	r3, r2
 8009e24:	d036      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e30:	d018      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e36:	d811      	bhi.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e3c:	d014      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009e3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e42:	d80b      	bhi.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d011      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e4c:	d106      	bne.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e4e:	4bb7      	ldr	r3, [pc, #732]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e52:	4ab6      	ldr	r2, [pc, #728]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009e5a:	e008      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e62:	e004      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009e64:	bf00      	nop
 8009e66:	e002      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009e68:	bf00      	nop
 8009e6a:	e000      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10a      	bne.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e76:	4bad      	ldr	r3, [pc, #692]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e84:	4aa9      	ldr	r2, [pc, #676]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e86:	430b      	orrs	r3, r1
 8009e88:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e8a:	e003      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009ea0:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ea6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4313      	orrs	r3, r2
 8009eae:	d009      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009eb0:	4b9e      	ldr	r3, [pc, #632]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eb4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ebe:	4a9b      	ldr	r2, [pc, #620]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ec0:	430b      	orrs	r3, r1
 8009ec2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ed6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009eda:	460b      	mov	r3, r1
 8009edc:	4313      	orrs	r3, r2
 8009ede:	d009      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ee0:	4b92      	ldr	r3, [pc, #584]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ee4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009eee:	4a8f      	ldr	r2, [pc, #572]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ef0:	430b      	orrs	r3, r1
 8009ef2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f02:	2300      	movs	r3, #0
 8009f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f06:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	d00e      	beq.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f10:	4b86      	ldr	r3, [pc, #536]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	4a85      	ldr	r2, [pc, #532]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009f1a:	6113      	str	r3, [r2, #16]
 8009f1c:	4b83      	ldr	r3, [pc, #524]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f1e:	6919      	ldr	r1, [r3, #16]
 8009f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009f28:	4a80      	ldr	r2, [pc, #512]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f2a:	430b      	orrs	r3, r1
 8009f2c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f36:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f40:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009f44:	460b      	mov	r3, r1
 8009f46:	4313      	orrs	r3, r2
 8009f48:	d009      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009f4a:	4b78      	ldr	r3, [pc, #480]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f58:	4a74      	ldr	r2, [pc, #464]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f5a:	430b      	orrs	r3, r1
 8009f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009f6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f70:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009f74:	460b      	mov	r3, r1
 8009f76:	4313      	orrs	r3, r2
 8009f78:	d00a      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009f7a:	4b6c      	ldr	r3, [pc, #432]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f7e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f8a:	4a68      	ldr	r2, [pc, #416]	@ (800a12c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f8c:	430b      	orrs	r3, r1
 8009f8e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	2100      	movs	r1, #0
 8009f9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fa2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	d011      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb0:	3308      	adds	r3, #8
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f001 f99d 	bl	800b2f4 <RCCEx_PLL2_Config>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd8:	2100      	movs	r1, #0
 8009fda:	6239      	str	r1, [r7, #32]
 8009fdc:	f003 0302 	and.w	r3, r3, #2
 8009fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fe2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	d011      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f001 f97d 	bl	800b2f4 <RCCEx_PLL2_Config>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a000:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a004:	2b00      	cmp	r3, #0
 800a006:	d003      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a00c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	2100      	movs	r1, #0
 800a01a:	61b9      	str	r1, [r7, #24]
 800a01c:	f003 0304 	and.w	r3, r3, #4
 800a020:	61fb      	str	r3, [r7, #28]
 800a022:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a026:	460b      	mov	r3, r1
 800a028:	4313      	orrs	r3, r2
 800a02a:	d011      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a030:	3308      	adds	r3, #8
 800a032:	2102      	movs	r1, #2
 800a034:	4618      	mov	r0, r3
 800a036:	f001 f95d 	bl	800b2f4 <RCCEx_PLL2_Config>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a04c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a058:	2100      	movs	r1, #0
 800a05a:	6139      	str	r1, [r7, #16]
 800a05c:	f003 0308 	and.w	r3, r3, #8
 800a060:	617b      	str	r3, [r7, #20]
 800a062:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a066:	460b      	mov	r3, r1
 800a068:	4313      	orrs	r3, r2
 800a06a:	d011      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a070:	3328      	adds	r3, #40	@ 0x28
 800a072:	2100      	movs	r1, #0
 800a074:	4618      	mov	r0, r3
 800a076:	f001 f9ef 	bl	800b458 <RCCEx_PLL3_Config>
 800a07a:	4603      	mov	r3, r0
 800a07c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a084:	2b00      	cmp	r3, #0
 800a086:	d003      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a088:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a08c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	2100      	movs	r1, #0
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	f003 0310 	and.w	r3, r3, #16
 800a0a0:	60fb      	str	r3, [r7, #12]
 800a0a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	d011      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0b0:	3328      	adds	r3, #40	@ 0x28
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f001 f9cf 	bl	800b458 <RCCEx_PLL3_Config>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a0c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d8:	2100      	movs	r1, #0
 800a0da:	6039      	str	r1, [r7, #0]
 800a0dc:	f003 0320 	and.w	r3, r3, #32
 800a0e0:	607b      	str	r3, [r7, #4]
 800a0e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	d011      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f0:	3328      	adds	r3, #40	@ 0x28
 800a0f2:	2102      	movs	r1, #2
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f001 f9af 	bl	800b458 <RCCEx_PLL3_Config>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a100:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a104:	2b00      	cmp	r3, #0
 800a106:	d003      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a108:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a10c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a110:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a114:	2b00      	cmp	r3, #0
 800a116:	d101      	bne.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	e000      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
}
 800a11e:	4618      	mov	r0, r3
 800a120:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a124:	46bd      	mov	sp, r7
 800a126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a12a:	bf00      	nop
 800a12c:	58024400 	.word	0x58024400

0800a130 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b090      	sub	sp, #64	@ 0x40
 800a134:	af00      	add	r7, sp, #0
 800a136:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a13a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a13e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a142:	430b      	orrs	r3, r1
 800a144:	f040 8094 	bne.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a148:	4b9b      	ldr	r3, [pc, #620]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a14a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a14c:	f003 0307 	and.w	r3, r3, #7
 800a150:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a154:	2b04      	cmp	r3, #4
 800a156:	f200 8087 	bhi.w	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a15a:	a201      	add	r2, pc, #4	@ (adr r2, 800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a160:	0800a175 	.word	0x0800a175
 800a164:	0800a19d 	.word	0x0800a19d
 800a168:	0800a1c5 	.word	0x0800a1c5
 800a16c:	0800a261 	.word	0x0800a261
 800a170:	0800a1ed 	.word	0x0800a1ed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a174:	4b90      	ldr	r3, [pc, #576]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a17c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a180:	d108      	bne.n	800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a186:	4618      	mov	r0, r3
 800a188:	f000 ff62 	bl	800b050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a190:	f000 bc93 	b.w	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a198:	f000 bc8f 	b.w	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a19c:	4b86      	ldr	r3, [pc, #536]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1a8:	d108      	bne.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1aa:	f107 0318 	add.w	r3, r7, #24
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 fca6 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1b8:	f000 bc7f 	b.w	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c0:	f000 bc7b 	b.w	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1c4:	4b7c      	ldr	r3, [pc, #496]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1d0:	d108      	bne.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1d2:	f107 030c 	add.w	r3, r7, #12
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 fde6 	bl	800ada8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1e0:	f000 bc6b 	b.w	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1e8:	f000 bc67 	b.w	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1ec:	4b72      	ldr	r3, [pc, #456]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1f6:	4b70      	ldr	r3, [pc, #448]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 0304 	and.w	r3, r3, #4
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	d10c      	bne.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a204:	2b00      	cmp	r3, #0
 800a206:	d109      	bne.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a208:	4b6b      	ldr	r3, [pc, #428]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	08db      	lsrs	r3, r3, #3
 800a20e:	f003 0303 	and.w	r3, r3, #3
 800a212:	4a6a      	ldr	r2, [pc, #424]	@ (800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a214:	fa22 f303 	lsr.w	r3, r2, r3
 800a218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a21a:	e01f      	b.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a21c:	4b66      	ldr	r3, [pc, #408]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a228:	d106      	bne.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a22a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a230:	d102      	bne.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a232:	4b63      	ldr	r3, [pc, #396]	@ (800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a234:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a236:	e011      	b.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a238:	4b5f      	ldr	r3, [pc, #380]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a244:	d106      	bne.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a24c:	d102      	bne.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a24e:	4b5d      	ldr	r3, [pc, #372]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a252:	e003      	b.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a258:	f000 bc2f 	b.w	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a25c:	f000 bc2d 	b.w	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a260:	4b59      	ldr	r3, [pc, #356]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a264:	f000 bc29 	b.w	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a26c:	f000 bc25 	b.w	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a270:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a274:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a278:	430b      	orrs	r3, r1
 800a27a:	f040 80a7 	bne.w	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a27e:	4b4e      	ldr	r3, [pc, #312]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a282:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a286:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a28e:	d054      	beq.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a292:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a296:	f200 808b 	bhi.w	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a2a0:	f000 8083 	beq.w	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a2aa:	f200 8081 	bhi.w	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a2b4:	d02f      	beq.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a2bc:	d878      	bhi.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d004      	beq.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2ca:	d012      	beq.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a2cc:	e070      	b.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2ce:	4b3a      	ldr	r3, [pc, #232]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2da:	d107      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 feb5 	bl	800b050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2ea:	e3e6      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f0:	e3e3      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2f2:	4b31      	ldr	r3, [pc, #196]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2fe:	d107      	bne.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a300:	f107 0318 	add.w	r3, r7, #24
 800a304:	4618      	mov	r0, r3
 800a306:	f000 fbfb 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a30e:	e3d4      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a314:	e3d1      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a316:	4b28      	ldr	r3, [pc, #160]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a31e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a322:	d107      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a324:	f107 030c 	add.w	r3, r7, #12
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 fd3d 	bl	800ada8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a332:	e3c2      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a338:	e3bf      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a33a:	4b1f      	ldr	r3, [pc, #124]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a33c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a33e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a342:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a344:	4b1c      	ldr	r3, [pc, #112]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0304 	and.w	r3, r3, #4
 800a34c:	2b04      	cmp	r3, #4
 800a34e:	d10c      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a352:	2b00      	cmp	r3, #0
 800a354:	d109      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a356:	4b18      	ldr	r3, [pc, #96]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	08db      	lsrs	r3, r3, #3
 800a35c:	f003 0303 	and.w	r3, r3, #3
 800a360:	4a16      	ldr	r2, [pc, #88]	@ (800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a362:	fa22 f303 	lsr.w	r3, r2, r3
 800a366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a368:	e01e      	b.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a36a:	4b13      	ldr	r3, [pc, #76]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a376:	d106      	bne.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a37e:	d102      	bne.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a380:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a384:	e010      	b.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a386:	4b0c      	ldr	r3, [pc, #48]	@ (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a38e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a392:	d106      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a39a:	d102      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a39c:	4b09      	ldr	r3, [pc, #36]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3a0:	e002      	b.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3a6:	e388      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3a8:	e387      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3aa:	4b07      	ldr	r3, [pc, #28]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3ae:	e384      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3b4:	e381      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3b6:	bf00      	nop
 800a3b8:	58024400 	.word	0x58024400
 800a3bc:	03d09000 	.word	0x03d09000
 800a3c0:	003d0900 	.word	0x003d0900
 800a3c4:	017d7840 	.word	0x017d7840
 800a3c8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a3cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3d0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	f040 809c 	bne.w	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a3da:	4b9e      	ldr	r3, [pc, #632]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3de:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a3e2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a3ea:	d054      	beq.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a3f2:	f200 808b 	bhi.w	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a3fc:	f000 8083 	beq.w	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a402:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a406:	f200 8081 	bhi.w	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a410:	d02f      	beq.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a414:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a418:	d878      	bhi.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d004      	beq.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a422:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a426:	d012      	beq.n	800a44e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a428:	e070      	b.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a42a:	4b8a      	ldr	r3, [pc, #552]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a436:	d107      	bne.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 fe07 	bl	800b050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a446:	e338      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44c:	e335      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a44e:	4b81      	ldr	r3, [pc, #516]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a45a:	d107      	bne.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a45c:	f107 0318 	add.w	r3, r7, #24
 800a460:	4618      	mov	r0, r3
 800a462:	f000 fb4d 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46a:	e326      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a470:	e323      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a472:	4b78      	ldr	r3, [pc, #480]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a47a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a47e:	d107      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a480:	f107 030c 	add.w	r3, r7, #12
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fc8f 	bl	800ada8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a48e:	e314      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a494:	e311      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a496:	4b6f      	ldr	r3, [pc, #444]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a49a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a49e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4a0:	4b6c      	ldr	r3, [pc, #432]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d10c      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4b2:	4b68      	ldr	r3, [pc, #416]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	08db      	lsrs	r3, r3, #3
 800a4b8:	f003 0303 	and.w	r3, r3, #3
 800a4bc:	4a66      	ldr	r2, [pc, #408]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a4be:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4c4:	e01e      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4c6:	4b63      	ldr	r3, [pc, #396]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4d2:	d106      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4da:	d102      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4dc:	4b5f      	ldr	r3, [pc, #380]	@ (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4e0:	e010      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4e2:	4b5c      	ldr	r3, [pc, #368]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ee:	d106      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4f6:	d102      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4f8:	4b59      	ldr	r3, [pc, #356]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4fc:	e002      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a502:	e2da      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a504:	e2d9      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a506:	4b57      	ldr	r3, [pc, #348]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a50a:	e2d6      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a50c:	2300      	movs	r3, #0
 800a50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a510:	e2d3      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a512:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a516:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a51a:	430b      	orrs	r3, r1
 800a51c:	f040 80a7 	bne.w	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a520:	4b4c      	ldr	r3, [pc, #304]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a524:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a528:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a530:	d055      	beq.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a534:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a538:	f200 8096 	bhi.w	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a542:	f000 8084 	beq.w	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a548:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a54c:	f200 808c 	bhi.w	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a556:	d030      	beq.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a55a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a55e:	f200 8083 	bhi.w	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a564:	2b00      	cmp	r3, #0
 800a566:	d004      	beq.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a56a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a56e:	d012      	beq.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a570:	e07a      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a572:	4b38      	ldr	r3, [pc, #224]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a57a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a57e:	d107      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a584:	4618      	mov	r0, r3
 800a586:	f000 fd63 	bl	800b050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a58e:	e294      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a590:	2300      	movs	r3, #0
 800a592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a594:	e291      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a596:	4b2f      	ldr	r3, [pc, #188]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a59e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5a2:	d107      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5a4:	f107 0318 	add.w	r3, r7, #24
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 faa9 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b2:	e282      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b8:	e27f      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5ba:	4b26      	ldr	r3, [pc, #152]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5c6:	d107      	bne.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5c8:	f107 030c 	add.w	r3, r7, #12
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 fbeb 	bl	800ada8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5d6:	e270      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5dc:	e26d      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5de:	4b1d      	ldr	r3, [pc, #116]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a5e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 0304 	and.w	r3, r3, #4
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	d10c      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a5f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d109      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5fa:	4b16      	ldr	r3, [pc, #88]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	08db      	lsrs	r3, r3, #3
 800a600:	f003 0303 	and.w	r3, r3, #3
 800a604:	4a14      	ldr	r2, [pc, #80]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a606:	fa22 f303 	lsr.w	r3, r2, r3
 800a60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a60c:	e01e      	b.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a60e:	4b11      	ldr	r3, [pc, #68]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a61a:	d106      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a61e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a622:	d102      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a624:	4b0d      	ldr	r3, [pc, #52]	@ (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a628:	e010      	b.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a62a:	4b0a      	ldr	r3, [pc, #40]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a632:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a636:	d106      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a63a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a63e:	d102      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a640:	4b07      	ldr	r3, [pc, #28]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a644:	e002      	b.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a64a:	e236      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a64c:	e235      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a64e:	4b05      	ldr	r3, [pc, #20]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a652:	e232      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a654:	58024400 	.word	0x58024400
 800a658:	03d09000 	.word	0x03d09000
 800a65c:	003d0900 	.word	0x003d0900
 800a660:	017d7840 	.word	0x017d7840
 800a664:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a66c:	e225      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a66e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a672:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a676:	430b      	orrs	r3, r1
 800a678:	f040 8085 	bne.w	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a67c:	4b9c      	ldr	r3, [pc, #624]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a67e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a680:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a684:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a68c:	d06b      	beq.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a694:	d874      	bhi.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a698:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a69c:	d056      	beq.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a6a4:	d86c      	bhi.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6ac:	d03b      	beq.n	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6b4:	d864      	bhi.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6bc:	d021      	beq.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6c4:	d85c      	bhi.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d004      	beq.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6d2:	d004      	beq.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a6d4:	e054      	b.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a6d6:	f7fe fb5f 	bl	8008d98 <HAL_RCC_GetPCLK1Freq>
 800a6da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6dc:	e1ed      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6de:	4b84      	ldr	r3, [pc, #528]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6ea:	d107      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ec:	f107 0318 	add.w	r3, r7, #24
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f000 fa05 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6fa:	e1de      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a700:	e1db      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a702:	4b7b      	ldr	r3, [pc, #492]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a70a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a70e:	d107      	bne.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a710:	f107 030c 	add.w	r3, r7, #12
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fb47 	bl	800ada8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a71e:	e1cc      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a724:	e1c9      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a726:	4b72      	ldr	r3, [pc, #456]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0304 	and.w	r3, r3, #4
 800a72e:	2b04      	cmp	r3, #4
 800a730:	d109      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a732:	4b6f      	ldr	r3, [pc, #444]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	08db      	lsrs	r3, r3, #3
 800a738:	f003 0303 	and.w	r3, r3, #3
 800a73c:	4a6d      	ldr	r2, [pc, #436]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a73e:	fa22 f303 	lsr.w	r3, r2, r3
 800a742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a744:	e1b9      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a74a:	e1b6      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a74c:	4b68      	ldr	r3, [pc, #416]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a758:	d102      	bne.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a75a:	4b67      	ldr	r3, [pc, #412]	@ (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a75e:	e1ac      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a764:	e1a9      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a766:	4b62      	ldr	r3, [pc, #392]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a76e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a772:	d102      	bne.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a774:	4b61      	ldr	r3, [pc, #388]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a778:	e19f      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a77e:	e19c      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a784:	e199      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a78a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a78e:	430b      	orrs	r3, r1
 800a790:	d173      	bne.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a792:	4b57      	ldr	r3, [pc, #348]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a796:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a79a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7a2:	d02f      	beq.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7aa:	d863      	bhi.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d004      	beq.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a7b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7b8:	d012      	beq.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a7ba:	e05b      	b.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7bc:	4b4c      	ldr	r3, [pc, #304]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7c8:	d107      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7ca:	f107 0318 	add.w	r3, r7, #24
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 f996 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d8:	e16f      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7de:	e16c      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7e0:	4b43      	ldr	r3, [pc, #268]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ec:	d107      	bne.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ee:	f107 030c 	add.w	r3, r7, #12
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 fad8 	bl	800ada8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7fc:	e15d      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a802:	e15a      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a804:	4b3a      	ldr	r3, [pc, #232]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a808:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a80c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a80e:	4b38      	ldr	r3, [pc, #224]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0304 	and.w	r3, r3, #4
 800a816:	2b04      	cmp	r3, #4
 800a818:	d10c      	bne.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d109      	bne.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a820:	4b33      	ldr	r3, [pc, #204]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	08db      	lsrs	r3, r3, #3
 800a826:	f003 0303 	and.w	r3, r3, #3
 800a82a:	4a32      	ldr	r2, [pc, #200]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a82c:	fa22 f303 	lsr.w	r3, r2, r3
 800a830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a832:	e01e      	b.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a834:	4b2e      	ldr	r3, [pc, #184]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a83c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a840:	d106      	bne.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a848:	d102      	bne.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a84a:	4b2b      	ldr	r3, [pc, #172]	@ (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a84e:	e010      	b.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a850:	4b27      	ldr	r3, [pc, #156]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a858:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a85c:	d106      	bne.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a85e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a864:	d102      	bne.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a866:	4b25      	ldr	r3, [pc, #148]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a868:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a86a:	e002      	b.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a870:	e123      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a872:	e122      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a878:	e11f      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a87a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a87e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a882:	430b      	orrs	r3, r1
 800a884:	d13c      	bne.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a886:	4b1a      	ldr	r3, [pc, #104]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a88a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a88e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a892:	2b00      	cmp	r3, #0
 800a894:	d004      	beq.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a89c:	d012      	beq.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a89e:	e023      	b.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8a0:	4b13      	ldr	r3, [pc, #76]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8ac:	d107      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 fbcc 	bl	800b050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8bc:	e0fd      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c2:	e0fa      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8d0:	d107      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8d2:	f107 0318 	add.w	r3, r7, #24
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 f912 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8e0:	e0eb      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e6:	e0e8      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ec:	e0e5      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a8ee:	bf00      	nop
 800a8f0:	58024400 	.word	0x58024400
 800a8f4:	03d09000 	.word	0x03d09000
 800a8f8:	003d0900 	.word	0x003d0900
 800a8fc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a900:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a904:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a908:	430b      	orrs	r3, r1
 800a90a:	f040 8085 	bne.w	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a90e:	4b6d      	ldr	r3, [pc, #436]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a912:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a916:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a91e:	d06b      	beq.n	800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a922:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a926:	d874      	bhi.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a92e:	d056      	beq.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a936:	d86c      	bhi.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a93e:	d03b      	beq.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a942:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a946:	d864      	bhi.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a94e:	d021      	beq.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a952:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a956:	d85c      	bhi.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d004      	beq.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a95e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a960:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a964:	d004      	beq.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a966:	e054      	b.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a968:	f000 f8b4 	bl	800aad4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a96c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a96e:	e0a4      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a970:	4b54      	ldr	r3, [pc, #336]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a978:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a97c:	d107      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a97e:	f107 0318 	add.w	r3, r7, #24
 800a982:	4618      	mov	r0, r3
 800a984:	f000 f8bc 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a98c:	e095      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a992:	e092      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a994:	4b4b      	ldr	r3, [pc, #300]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a99c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9a0:	d107      	bne.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9a2:	f107 030c 	add.w	r3, r7, #12
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 f9fe 	bl	800ada8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9b0:	e083      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b6:	e080      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a9b8:	4b42      	ldr	r3, [pc, #264]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 0304 	and.w	r3, r3, #4
 800a9c0:	2b04      	cmp	r3, #4
 800a9c2:	d109      	bne.n	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9c4:	4b3f      	ldr	r3, [pc, #252]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	08db      	lsrs	r3, r3, #3
 800a9ca:	f003 0303 	and.w	r3, r3, #3
 800a9ce:	4a3e      	ldr	r2, [pc, #248]	@ (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9d6:	e070      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9dc:	e06d      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a9de:	4b39      	ldr	r3, [pc, #228]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9ea:	d102      	bne.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a9ec:	4b37      	ldr	r3, [pc, #220]	@ (800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9f0:	e063      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9f6:	e060      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a9f8:	4b32      	ldr	r3, [pc, #200]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa04:	d102      	bne.n	800aa0c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800aa06:	4b32      	ldr	r3, [pc, #200]	@ (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa0a:	e056      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa10:	e053      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa16:	e050      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aa18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa1c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800aa20:	430b      	orrs	r3, r1
 800aa22:	d148      	bne.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aa24:	4b27      	ldr	r3, [pc, #156]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa2c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa34:	d02a      	beq.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800aa36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa3c:	d838      	bhi.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d004      	beq.n	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800aa44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa4a:	d00d      	beq.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800aa4c:	e030      	b.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aa4e:	4b1d      	ldr	r3, [pc, #116]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa5a:	d102      	bne.n	800aa62 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800aa5c:	4b1c      	ldr	r3, [pc, #112]	@ (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aa5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa60:	e02b      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa62:	2300      	movs	r3, #0
 800aa64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa66:	e028      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa68:	4b16      	ldr	r3, [pc, #88]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa74:	d107      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 fae8 	bl	800b050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa84:	e019      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa86:	2300      	movs	r3, #0
 800aa88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa8a:	e016      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa8c:	4b0d      	ldr	r3, [pc, #52]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa98:	d107      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa9a:	f107 0318 	add.w	r3, r7, #24
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 f82e 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaa8:	e007      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaae:	e004      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab4:	e001      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800aab6:	2300      	movs	r3, #0
 800aab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800aaba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3740      	adds	r7, #64	@ 0x40
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	58024400 	.word	0x58024400
 800aac8:	03d09000 	.word	0x03d09000
 800aacc:	003d0900 	.word	0x003d0900
 800aad0:	017d7840 	.word	0x017d7840

0800aad4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aad8:	f7fe f92e 	bl	8008d38 <HAL_RCC_GetHCLKFreq>
 800aadc:	4602      	mov	r2, r0
 800aade:	4b06      	ldr	r3, [pc, #24]	@ (800aaf8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	091b      	lsrs	r3, r3, #4
 800aae4:	f003 0307 	and.w	r3, r3, #7
 800aae8:	4904      	ldr	r1, [pc, #16]	@ (800aafc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aaea:	5ccb      	ldrb	r3, [r1, r3]
 800aaec:	f003 031f 	and.w	r3, r3, #31
 800aaf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	58024400 	.word	0x58024400
 800aafc:	0802003c 	.word	0x0802003c

0800ab00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b089      	sub	sp, #36	@ 0x24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab08:	4ba1      	ldr	r3, [pc, #644]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab0c:	f003 0303 	and.w	r3, r3, #3
 800ab10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ab12:	4b9f      	ldr	r3, [pc, #636]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab16:	0b1b      	lsrs	r3, r3, #12
 800ab18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ab1e:	4b9c      	ldr	r3, [pc, #624]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab22:	091b      	lsrs	r3, r3, #4
 800ab24:	f003 0301 	and.w	r3, r3, #1
 800ab28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ab2a:	4b99      	ldr	r3, [pc, #612]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab2e:	08db      	lsrs	r3, r3, #3
 800ab30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab34:	693a      	ldr	r2, [r7, #16]
 800ab36:	fb02 f303 	mul.w	r3, r2, r3
 800ab3a:	ee07 3a90 	vmov	s15, r3
 800ab3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 8111 	beq.w	800ad70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	f000 8083 	beq.w	800ac5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	f200 80a1 	bhi.w	800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d003      	beq.n	800ab6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d056      	beq.n	800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ab6a:	e099      	b.n	800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab6c:	4b88      	ldr	r3, [pc, #544]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0320 	and.w	r3, r3, #32
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d02d      	beq.n	800abd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab78:	4b85      	ldr	r3, [pc, #532]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	08db      	lsrs	r3, r3, #3
 800ab7e:	f003 0303 	and.w	r3, r3, #3
 800ab82:	4a84      	ldr	r2, [pc, #528]	@ (800ad94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ab84:	fa22 f303 	lsr.w	r3, r2, r3
 800ab88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	ee07 3a90 	vmov	s15, r3
 800ab90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	ee07 3a90 	vmov	s15, r3
 800ab9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aba2:	4b7b      	ldr	r3, [pc, #492]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ad98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800abd2:	e087      	b.n	800ace4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	ee07 3a90 	vmov	s15, r3
 800abda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ad9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800abe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe6:	4b6a      	ldr	r3, [pc, #424]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abfa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ad98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac16:	e065      	b.n	800ace4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	ee07 3a90 	vmov	s15, r3
 800ac1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac2a:	4b59      	ldr	r3, [pc, #356]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac32:	ee07 3a90 	vmov	s15, r3
 800ac36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ad98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac5a:	e043      	b.n	800ace4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ada4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ac6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac6e:	4b48      	ldr	r3, [pc, #288]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac76:	ee07 3a90 	vmov	s15, r3
 800ac7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ad98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac9e:	e021      	b.n	800ace4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	ee07 3a90 	vmov	s15, r3
 800aca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ada0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb2:	4b37      	ldr	r3, [pc, #220]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acba:	ee07 3a90 	vmov	s15, r3
 800acbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ad98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ace2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ace4:	4b2a      	ldr	r3, [pc, #168]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ace6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace8:	0a5b      	lsrs	r3, r3, #9
 800acea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800acfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad0a:	ee17 2a90 	vmov	r2, s15
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ad12:	4b1f      	ldr	r3, [pc, #124]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad16:	0c1b      	lsrs	r3, r3, #16
 800ad18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad1c:	ee07 3a90 	vmov	s15, r3
 800ad20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad38:	ee17 2a90 	vmov	r2, s15
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ad40:	4b13      	ldr	r3, [pc, #76]	@ (800ad90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad44:	0e1b      	lsrs	r3, r3, #24
 800ad46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad66:	ee17 2a90 	vmov	r2, s15
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ad6e:	e008      	b.n	800ad82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	609a      	str	r2, [r3, #8]
}
 800ad82:	bf00      	nop
 800ad84:	3724      	adds	r7, #36	@ 0x24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	58024400 	.word	0x58024400
 800ad94:	03d09000 	.word	0x03d09000
 800ad98:	46000000 	.word	0x46000000
 800ad9c:	4c742400 	.word	0x4c742400
 800ada0:	4a742400 	.word	0x4a742400
 800ada4:	4bbebc20 	.word	0x4bbebc20

0800ada8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b089      	sub	sp, #36	@ 0x24
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adb0:	4ba1      	ldr	r3, [pc, #644]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb4:	f003 0303 	and.w	r3, r3, #3
 800adb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800adba:	4b9f      	ldr	r3, [pc, #636]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adbe:	0d1b      	lsrs	r3, r3, #20
 800adc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800adc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800adc6:	4b9c      	ldr	r3, [pc, #624]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adca:	0a1b      	lsrs	r3, r3, #8
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800add2:	4b99      	ldr	r3, [pc, #612]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800add4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800add6:	08db      	lsrs	r3, r3, #3
 800add8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	fb02 f303 	mul.w	r3, r2, r3
 800ade2:	ee07 3a90 	vmov	s15, r3
 800ade6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 8111 	beq.w	800b018 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	f000 8083 	beq.w	800af04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	f200 80a1 	bhi.w	800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d003      	beq.n	800ae14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d056      	beq.n	800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ae12:	e099      	b.n	800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae14:	4b88      	ldr	r3, [pc, #544]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 0320 	and.w	r3, r3, #32
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d02d      	beq.n	800ae7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae20:	4b85      	ldr	r3, [pc, #532]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	08db      	lsrs	r3, r3, #3
 800ae26:	f003 0303 	and.w	r3, r3, #3
 800ae2a:	4a84      	ldr	r2, [pc, #528]	@ (800b03c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ae2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	ee07 3a90 	vmov	s15, r3
 800ae38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	ee07 3a90 	vmov	s15, r3
 800ae42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae4a:	4b7b      	ldr	r3, [pc, #492]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae52:	ee07 3a90 	vmov	s15, r3
 800ae56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ae7a:	e087      	b.n	800af8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	ee07 3a90 	vmov	s15, r3
 800ae82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b044 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ae8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae8e:	4b6a      	ldr	r3, [pc, #424]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aea2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aebe:	e065      	b.n	800af8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	ee07 3a90 	vmov	s15, r3
 800aec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aed2:	4b59      	ldr	r3, [pc, #356]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeda:	ee07 3a90 	vmov	s15, r3
 800aede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aee6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aeea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aef2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aefa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aefe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af02:	e043      	b.n	800af8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b04c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800af12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af16:	4b48      	ldr	r3, [pc, #288]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af1e:	ee07 3a90 	vmov	s15, r3
 800af22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af26:	ed97 6a03 	vldr	s12, [r7, #12]
 800af2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af46:	e021      	b.n	800af8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b048 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af5a:	4b37      	ldr	r3, [pc, #220]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af62:	ee07 3a90 	vmov	s15, r3
 800af66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800af8c:	4b2a      	ldr	r3, [pc, #168]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af90:	0a5b      	lsrs	r3, r3, #9
 800af92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afa6:	edd7 6a07 	vldr	s13, [r7, #28]
 800afaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afb2:	ee17 2a90 	vmov	r2, s15
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800afba:	4b1f      	ldr	r3, [pc, #124]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afbe:	0c1b      	lsrs	r3, r3, #16
 800afc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afc4:	ee07 3a90 	vmov	s15, r3
 800afc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800afd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afe0:	ee17 2a90 	vmov	r2, s15
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800afe8:	4b13      	ldr	r3, [pc, #76]	@ (800b038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afec:	0e1b      	lsrs	r3, r3, #24
 800afee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aff2:	ee07 3a90 	vmov	s15, r3
 800aff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800affa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800affe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b002:	edd7 6a07 	vldr	s13, [r7, #28]
 800b006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b00a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b00e:	ee17 2a90 	vmov	r2, s15
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b016:	e008      	b.n	800b02a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	609a      	str	r2, [r3, #8]
}
 800b02a:	bf00      	nop
 800b02c:	3724      	adds	r7, #36	@ 0x24
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	58024400 	.word	0x58024400
 800b03c:	03d09000 	.word	0x03d09000
 800b040:	46000000 	.word	0x46000000
 800b044:	4c742400 	.word	0x4c742400
 800b048:	4a742400 	.word	0x4a742400
 800b04c:	4bbebc20 	.word	0x4bbebc20

0800b050 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b050:	b480      	push	{r7}
 800b052:	b089      	sub	sp, #36	@ 0x24
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b058:	4ba0      	ldr	r3, [pc, #640]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b05c:	f003 0303 	and.w	r3, r3, #3
 800b060:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b062:	4b9e      	ldr	r3, [pc, #632]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b066:	091b      	lsrs	r3, r3, #4
 800b068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b06c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b06e:	4b9b      	ldr	r3, [pc, #620]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b072:	f003 0301 	and.w	r3, r3, #1
 800b076:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b078:	4b98      	ldr	r3, [pc, #608]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b07a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b07c:	08db      	lsrs	r3, r3, #3
 800b07e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	fb02 f303 	mul.w	r3, r2, r3
 800b088:	ee07 3a90 	vmov	s15, r3
 800b08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b090:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	2b00      	cmp	r3, #0
 800b098:	f000 8111 	beq.w	800b2be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	f000 8083 	beq.w	800b1aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	f200 80a1 	bhi.w	800b1ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d056      	beq.n	800b166 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b0b8:	e099      	b.n	800b1ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0ba:	4b88      	ldr	r3, [pc, #544]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f003 0320 	and.w	r3, r3, #32
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d02d      	beq.n	800b122 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0c6:	4b85      	ldr	r3, [pc, #532]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	08db      	lsrs	r3, r3, #3
 800b0cc:	f003 0303 	and.w	r3, r3, #3
 800b0d0:	4a83      	ldr	r2, [pc, #524]	@ (800b2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0d6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	ee07 3a90 	vmov	s15, r3
 800b0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	ee07 3a90 	vmov	s15, r3
 800b0e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0f0:	4b7a      	ldr	r3, [pc, #488]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0f8:	ee07 3a90 	vmov	s15, r3
 800b0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b100:	ed97 6a03 	vldr	s12, [r7, #12]
 800b104:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b10c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b110:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b11c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b120:	e087      	b.n	800b232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	ee07 3a90 	vmov	s15, r3
 800b128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b134:	4b69      	ldr	r3, [pc, #420]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b13c:	ee07 3a90 	vmov	s15, r3
 800b140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b144:	ed97 6a03 	vldr	s12, [r7, #12]
 800b148:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b14c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b154:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b15c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b164:	e065      	b.n	800b232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	ee07 3a90 	vmov	s15, r3
 800b16c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b170:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b2ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b178:	4b58      	ldr	r3, [pc, #352]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b17a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b180:	ee07 3a90 	vmov	s15, r3
 800b184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b188:	ed97 6a03 	vldr	s12, [r7, #12]
 800b18c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b198:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b19c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1a8:	e043      	b.n	800b232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	ee07 3a90 	vmov	s15, r3
 800b1b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b1b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1bc:	4b47      	ldr	r3, [pc, #284]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1c4:	ee07 3a90 	vmov	s15, r3
 800b1c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1d0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1ec:	e021      	b.n	800b232 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	ee07 3a90 	vmov	s15, r3
 800b1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b1fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b200:	4b36      	ldr	r3, [pc, #216]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b208:	ee07 3a90 	vmov	s15, r3
 800b20c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b210:	ed97 6a03 	vldr	s12, [r7, #12]
 800b214:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b21c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b220:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b22c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b230:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b232:	4b2a      	ldr	r3, [pc, #168]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b236:	0a5b      	lsrs	r3, r3, #9
 800b238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b23c:	ee07 3a90 	vmov	s15, r3
 800b240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b244:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b24c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b258:	ee17 2a90 	vmov	r2, s15
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b260:	4b1e      	ldr	r3, [pc, #120]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b264:	0c1b      	lsrs	r3, r3, #16
 800b266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b272:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b27a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b27e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b286:	ee17 2a90 	vmov	r2, s15
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b28e:	4b13      	ldr	r3, [pc, #76]	@ (800b2dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b292:	0e1b      	lsrs	r3, r3, #24
 800b294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b298:	ee07 3a90 	vmov	s15, r3
 800b29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2b4:	ee17 2a90 	vmov	r2, s15
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b2bc:	e008      	b.n	800b2d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	609a      	str	r2, [r3, #8]
}
 800b2d0:	bf00      	nop
 800b2d2:	3724      	adds	r7, #36	@ 0x24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	58024400 	.word	0x58024400
 800b2e0:	03d09000 	.word	0x03d09000
 800b2e4:	46000000 	.word	0x46000000
 800b2e8:	4c742400 	.word	0x4c742400
 800b2ec:	4a742400 	.word	0x4a742400
 800b2f0:	4bbebc20 	.word	0x4bbebc20

0800b2f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2fe:	2300      	movs	r3, #0
 800b300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b302:	4b53      	ldr	r3, [pc, #332]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b306:	f003 0303 	and.w	r3, r3, #3
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d101      	bne.n	800b312 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	e099      	b.n	800b446 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b312:	4b4f      	ldr	r3, [pc, #316]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a4e      	ldr	r2, [pc, #312]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b318:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b31c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b31e:	f7f8 fd11 	bl	8003d44 <HAL_GetTick>
 800b322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b324:	e008      	b.n	800b338 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b326:	f7f8 fd0d 	bl	8003d44 <HAL_GetTick>
 800b32a:	4602      	mov	r2, r0
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	2b02      	cmp	r3, #2
 800b332:	d901      	bls.n	800b338 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b334:	2303      	movs	r3, #3
 800b336:	e086      	b.n	800b446 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b338:	4b45      	ldr	r3, [pc, #276]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1f0      	bne.n	800b326 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b344:	4b42      	ldr	r3, [pc, #264]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b348:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	031b      	lsls	r3, r3, #12
 800b352:	493f      	ldr	r1, [pc, #252]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b354:	4313      	orrs	r3, r2
 800b356:	628b      	str	r3, [r1, #40]	@ 0x28
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	3b01      	subs	r3, #1
 800b35e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	3b01      	subs	r3, #1
 800b368:	025b      	lsls	r3, r3, #9
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	431a      	orrs	r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	3b01      	subs	r3, #1
 800b374:	041b      	lsls	r3, r3, #16
 800b376:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b37a:	431a      	orrs	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	3b01      	subs	r3, #1
 800b382:	061b      	lsls	r3, r3, #24
 800b384:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b388:	4931      	ldr	r1, [pc, #196]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b38a:	4313      	orrs	r3, r2
 800b38c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b38e:	4b30      	ldr	r3, [pc, #192]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b392:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	492d      	ldr	r1, [pc, #180]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b39c:	4313      	orrs	r3, r2
 800b39e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b3a0:	4b2b      	ldr	r3, [pc, #172]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a4:	f023 0220 	bic.w	r2, r3, #32
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	4928      	ldr	r1, [pc, #160]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b3b2:	4b27      	ldr	r3, [pc, #156]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b6:	4a26      	ldr	r2, [pc, #152]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b3b8:	f023 0310 	bic.w	r3, r3, #16
 800b3bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b3be:	4b24      	ldr	r3, [pc, #144]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b3c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b3c2:	4b24      	ldr	r3, [pc, #144]	@ (800b454 <RCCEx_PLL2_Config+0x160>)
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	69d2      	ldr	r2, [r2, #28]
 800b3ca:	00d2      	lsls	r2, r2, #3
 800b3cc:	4920      	ldr	r1, [pc, #128]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b3d2:	4b1f      	ldr	r3, [pc, #124]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b3d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d6:	4a1e      	ldr	r2, [pc, #120]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b3d8:	f043 0310 	orr.w	r3, r3, #16
 800b3dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d106      	bne.n	800b3f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b3e4:	4b1a      	ldr	r3, [pc, #104]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e8:	4a19      	ldr	r2, [pc, #100]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b3ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b3ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3f0:	e00f      	b.n	800b412 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d106      	bne.n	800b406 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b3f8:	4b15      	ldr	r3, [pc, #84]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3fc:	4a14      	ldr	r2, [pc, #80]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b3fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b402:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b404:	e005      	b.n	800b412 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b406:	4b12      	ldr	r3, [pc, #72]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b40a:	4a11      	ldr	r2, [pc, #68]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b40c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b410:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b412:	4b0f      	ldr	r3, [pc, #60]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a0e      	ldr	r2, [pc, #56]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b418:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b41c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b41e:	f7f8 fc91 	bl	8003d44 <HAL_GetTick>
 800b422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b424:	e008      	b.n	800b438 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b426:	f7f8 fc8d 	bl	8003d44 <HAL_GetTick>
 800b42a:	4602      	mov	r2, r0
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	2b02      	cmp	r3, #2
 800b432:	d901      	bls.n	800b438 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b434:	2303      	movs	r3, #3
 800b436:	e006      	b.n	800b446 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b438:	4b05      	ldr	r3, [pc, #20]	@ (800b450 <RCCEx_PLL2_Config+0x15c>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b440:	2b00      	cmp	r3, #0
 800b442:	d0f0      	beq.n	800b426 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	58024400 	.word	0x58024400
 800b454:	ffff0007 	.word	0xffff0007

0800b458 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b466:	4b53      	ldr	r3, [pc, #332]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b46a:	f003 0303 	and.w	r3, r3, #3
 800b46e:	2b03      	cmp	r3, #3
 800b470:	d101      	bne.n	800b476 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e099      	b.n	800b5aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b476:	4b4f      	ldr	r3, [pc, #316]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a4e      	ldr	r2, [pc, #312]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b47c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b482:	f7f8 fc5f 	bl	8003d44 <HAL_GetTick>
 800b486:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b488:	e008      	b.n	800b49c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b48a:	f7f8 fc5b 	bl	8003d44 <HAL_GetTick>
 800b48e:	4602      	mov	r2, r0
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	2b02      	cmp	r3, #2
 800b496:	d901      	bls.n	800b49c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	e086      	b.n	800b5aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b49c:	4b45      	ldr	r3, [pc, #276]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1f0      	bne.n	800b48a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b4a8:	4b42      	ldr	r3, [pc, #264]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	051b      	lsls	r3, r3, #20
 800b4b6:	493f      	ldr	r1, [pc, #252]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	628b      	str	r3, [r1, #40]	@ 0x28
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	025b      	lsls	r3, r3, #9
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	431a      	orrs	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	041b      	lsls	r3, r3, #16
 800b4da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b4de:	431a      	orrs	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	061b      	lsls	r3, r3, #24
 800b4e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b4ec:	4931      	ldr	r1, [pc, #196]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b4f2:	4b30      	ldr	r3, [pc, #192]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	695b      	ldr	r3, [r3, #20]
 800b4fe:	492d      	ldr	r1, [pc, #180]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b500:	4313      	orrs	r3, r2
 800b502:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b504:	4b2b      	ldr	r3, [pc, #172]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b508:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	699b      	ldr	r3, [r3, #24]
 800b510:	4928      	ldr	r1, [pc, #160]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b512:	4313      	orrs	r3, r2
 800b514:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b516:	4b27      	ldr	r3, [pc, #156]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b51a:	4a26      	ldr	r2, [pc, #152]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b51c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b520:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b522:	4b24      	ldr	r3, [pc, #144]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b524:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b526:	4b24      	ldr	r3, [pc, #144]	@ (800b5b8 <RCCEx_PLL3_Config+0x160>)
 800b528:	4013      	ands	r3, r2
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	69d2      	ldr	r2, [r2, #28]
 800b52e:	00d2      	lsls	r2, r2, #3
 800b530:	4920      	ldr	r1, [pc, #128]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b532:	4313      	orrs	r3, r2
 800b534:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b536:	4b1f      	ldr	r3, [pc, #124]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53a:	4a1e      	ldr	r2, [pc, #120]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b53c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b540:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d106      	bne.n	800b556 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b548:	4b1a      	ldr	r3, [pc, #104]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b54c:	4a19      	ldr	r2, [pc, #100]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b54e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b552:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b554:	e00f      	b.n	800b576 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d106      	bne.n	800b56a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b55c:	4b15      	ldr	r3, [pc, #84]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b560:	4a14      	ldr	r2, [pc, #80]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b562:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b566:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b568:	e005      	b.n	800b576 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b56a:	4b12      	ldr	r3, [pc, #72]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b56c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b56e:	4a11      	ldr	r2, [pc, #68]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b570:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b574:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b576:	4b0f      	ldr	r3, [pc, #60]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a0e      	ldr	r2, [pc, #56]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b57c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b582:	f7f8 fbdf 	bl	8003d44 <HAL_GetTick>
 800b586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b588:	e008      	b.n	800b59c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b58a:	f7f8 fbdb 	bl	8003d44 <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	2b02      	cmp	r3, #2
 800b596:	d901      	bls.n	800b59c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b598:	2303      	movs	r3, #3
 800b59a:	e006      	b.n	800b5aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b59c:	4b05      	ldr	r3, [pc, #20]	@ (800b5b4 <RCCEx_PLL3_Config+0x15c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d0f0      	beq.n	800b58a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	58024400 	.word	0x58024400
 800b5b8:	ffff0007 	.word	0xffff0007

0800b5bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b08a      	sub	sp, #40	@ 0x28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e075      	b.n	800b6ba <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d105      	bne.n	800b5e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7f6 fca9 	bl	8001f38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2204      	movs	r2, #4
 800b5ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f868 	bl	800b6c4 <HAL_SD_InitCard>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e05d      	b.n	800b6ba <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800b5fe:	f107 0308 	add.w	r3, r7, #8
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fdb5 	bl	800c174 <HAL_SD_GetCardStatus>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	e052      	b.n	800b6ba <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800b614:	7e3b      	ldrb	r3, [r7, #24]
 800b616:	b2db      	uxtb	r3, r3
 800b618:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800b61a:	7e7b      	ldrb	r3, [r7, #25]
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b624:	2b01      	cmp	r3, #1
 800b626:	d10a      	bne.n	800b63e <HAL_SD_Init+0x82>
 800b628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d102      	bne.n	800b634 <HAL_SD_Init+0x78>
 800b62e:	6a3b      	ldr	r3, [r7, #32]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d004      	beq.n	800b63e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b63a:	659a      	str	r2, [r3, #88]	@ 0x58
 800b63c:	e00b      	b.n	800b656 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b642:	2b01      	cmp	r3, #1
 800b644:	d104      	bne.n	800b650 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b64c:	659a      	str	r2, [r3, #88]	@ 0x58
 800b64e:	e002      	b.n	800b656 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	4619      	mov	r1, r3
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fe73 	bl	800c348 <HAL_SD_ConfigWideBusOperation>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d001      	beq.n	800b66c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	e026      	b.n	800b6ba <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800b66c:	f7f8 fb6a 	bl	8003d44 <HAL_GetTick>
 800b670:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b672:	e011      	b.n	800b698 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800b674:	f7f8 fb66 	bl	8003d44 <HAL_GetTick>
 800b678:	4602      	mov	r2, r0
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b682:	d109      	bne.n	800b698 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b68a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	e010      	b.n	800b6ba <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 ff67 	bl	800c56c <HAL_SD_GetCardState>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b04      	cmp	r3, #4
 800b6a2:	d1e7      	bne.n	800b674 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3728      	adds	r7, #40	@ 0x28
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
	...

0800b6c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b6c4:	b590      	push	{r4, r7, lr}
 800b6c6:	b08d      	sub	sp, #52	@ 0x34
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b6dc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800b6e0:	f04f 0100 	mov.w	r1, #0
 800b6e4:	f7fe fd24 	bl	800a130 <HAL_RCCEx_GetPeriphCLKFreq>
 800b6e8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d109      	bne.n	800b704 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b6fe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b700:	2301      	movs	r3, #1
 800b702:	e070      	b.n	800b7e6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800b704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b706:	0a1b      	lsrs	r3, r3, #8
 800b708:	4a39      	ldr	r2, [pc, #228]	@ (800b7f0 <HAL_SD_InitCard+0x12c>)
 800b70a:	fba2 2303 	umull	r2, r3, r2, r3
 800b70e:	091b      	lsrs	r3, r3, #4
 800b710:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681c      	ldr	r4, [r3, #0]
 800b716:	466a      	mov	r2, sp
 800b718:	f107 0318 	add.w	r3, r7, #24
 800b71c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b720:	e882 0003 	stmia.w	r2, {r0, r1}
 800b724:	f107 030c 	add.w	r3, r7, #12
 800b728:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b72a:	4620      	mov	r0, r4
 800b72c:	f004 fa24 	bl	800fb78 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4618      	mov	r0, r3
 800b736:	f004 fa67 	bl	800fc08 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d005      	beq.n	800b74c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	005b      	lsls	r3, r3, #1
 800b744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b746:	fbb2 f3f3 	udiv	r3, r2, r3
 800b74a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800b74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d007      	beq.n	800b762 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800b752:	4a28      	ldr	r2, [pc, #160]	@ (800b7f4 <HAL_SD_InitCard+0x130>)
 800b754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b756:	fbb2 f3f3 	udiv	r3, r2, r3
 800b75a:	3301      	adds	r3, #1
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7f8 fafd 	bl	8003d5c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fff0 	bl	800c748 <SD_PowerON>
 800b768:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b76a:	6a3b      	ldr	r3, [r7, #32]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00b      	beq.n	800b788 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2201      	movs	r2, #1
 800b774:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b77c:	6a3b      	ldr	r3, [r7, #32]
 800b77e:	431a      	orrs	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	e02e      	b.n	800b7e6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 ff0f 	bl	800c5ac <SD_InitCard>
 800b78e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b790:	6a3b      	ldr	r3, [r7, #32]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00b      	beq.n	800b7ae <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7a2:	6a3b      	ldr	r3, [r7, #32]
 800b7a4:	431a      	orrs	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e01b      	b.n	800b7e6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f004 fabc 	bl	800fd34 <SDMMC_CmdBlockLength>
 800b7bc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b7be:	6a3b      	ldr	r3, [r7, #32]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d00f      	beq.n	800b7e4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a0b      	ldr	r2, [pc, #44]	@ (800b7f8 <HAL_SD_InitCard+0x134>)
 800b7ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7d0:	6a3b      	ldr	r3, [r7, #32]
 800b7d2:	431a      	orrs	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e000      	b.n	800b7e6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	372c      	adds	r7, #44	@ 0x2c
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd90      	pop	{r4, r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	014f8b59 	.word	0x014f8b59
 800b7f4:	00012110 	.word	0x00012110
 800b7f8:	1fe00fff 	.word	0x1fe00fff

0800b7fc <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b092      	sub	sp, #72	@ 0x48
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b80a:	f7f8 fa9b 	bl	8003d44 <HAL_GetTick>
 800b80e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d107      	bne.n	800b82e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b822:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e167      	b.n	800bafe <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b01      	cmp	r3, #1
 800b838:	f040 815a 	bne.w	800baf0 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b842:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	441a      	add	r2, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d907      	bls.n	800b860 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b854:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e14e      	b.n	800bafe <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2203      	movs	r2, #3
 800b864:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2200      	movs	r2, #0
 800b86e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b874:	2b01      	cmp	r3, #1
 800b876:	d002      	beq.n	800b87e <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800b878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b87a:	025b      	lsls	r3, r3, #9
 800b87c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b87e:	f04f 33ff 	mov.w	r3, #4294967295
 800b882:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	025b      	lsls	r3, r3, #9
 800b888:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b88a:	2390      	movs	r3, #144	@ 0x90
 800b88c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b88e:	2302      	movs	r3, #2
 800b890:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b892:	2300      	movs	r3, #0
 800b894:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800b896:	2300      	movs	r3, #0
 800b898:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f107 0214 	add.w	r2, r7, #20
 800b8a2:	4611      	mov	r1, r2
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f004 fa19 	bl	800fcdc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68da      	ldr	r2, [r3, #12]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b8b8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d90a      	bls.n	800b8d6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f004 fa77 	bl	800fdc0 <SDMMC_CmdReadMultiBlock>
 800b8d2:	6478      	str	r0, [r7, #68]	@ 0x44
 800b8d4:	e009      	b.n	800b8ea <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f004 fa49 	bl	800fd7a <SDMMC_CmdReadSingleBlock>
 800b8e8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800b8ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d012      	beq.n	800b916 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a84      	ldr	r2, [pc, #528]	@ (800bb08 <HAL_SD_ReadBlocks+0x30c>)
 800b8f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b8fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8fe:	431a      	orrs	r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2201      	movs	r2, #1
 800b908:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2200      	movs	r2, #0
 800b910:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e0f3      	b.n	800bafe <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b91a:	e058      	b.n	800b9ce <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b922:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b926:	2b00      	cmp	r3, #0
 800b928:	d033      	beq.n	800b992 <HAL_SD_ReadBlocks+0x196>
 800b92a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b92c:	2b1f      	cmp	r3, #31
 800b92e:	d930      	bls.n	800b992 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b930:	2300      	movs	r3, #0
 800b932:	643b      	str	r3, [r7, #64]	@ 0x40
 800b934:	e027      	b.n	800b986 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f004 f946 	bl	800fbcc <SDMMC_ReadFIFO>
 800b940:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b944:	b2da      	uxtb	r2, r3
 800b946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b948:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b94c:	3301      	adds	r3, #1
 800b94e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b952:	0a1b      	lsrs	r3, r3, #8
 800b954:	b2da      	uxtb	r2, r3
 800b956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b958:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b95a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b95c:	3301      	adds	r3, #1
 800b95e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b962:	0c1b      	lsrs	r3, r3, #16
 800b964:	b2da      	uxtb	r2, r3
 800b966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b968:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b96a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b96c:	3301      	adds	r3, #1
 800b96e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b972:	0e1b      	lsrs	r3, r3, #24
 800b974:	b2da      	uxtb	r2, r3
 800b976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b978:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b97a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b97c:	3301      	adds	r3, #1
 800b97e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800b980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b982:	3301      	adds	r3, #1
 800b984:	643b      	str	r3, [r7, #64]	@ 0x40
 800b986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b988:	2b07      	cmp	r3, #7
 800b98a:	d9d4      	bls.n	800b936 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800b98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b98e:	3b20      	subs	r3, #32
 800b990:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800b992:	f7f8 f9d7 	bl	8003d44 <HAL_GetTick>
 800b996:	4602      	mov	r2, r0
 800b998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d902      	bls.n	800b9a8 <HAL_SD_ReadBlocks+0x1ac>
 800b9a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d112      	bne.n	800b9ce <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a56      	ldr	r2, [pc, #344]	@ (800bb08 <HAL_SD_ReadBlocks+0x30c>)
 800b9ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	e097      	b.n	800bafe <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9d4:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d09f      	beq.n	800b91c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68da      	ldr	r2, [r3, #12]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b9ea:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d022      	beq.n	800ba40 <HAL_SD_ReadBlocks+0x244>
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d91f      	bls.n	800ba40 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba04:	2b03      	cmp	r3, #3
 800ba06:	d01b      	beq.n	800ba40 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f004 fa41 	bl	800fe94 <SDMMC_CmdStopTransfer>
 800ba12:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800ba14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d012      	beq.n	800ba40 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a3a      	ldr	r2, [pc, #232]	@ (800bb08 <HAL_SD_ReadBlocks+0x30c>)
 800ba20:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba28:	431a      	orrs	r2, r3
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e05e      	b.n	800bafe <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba46:	f003 0308 	and.w	r3, r3, #8
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d012      	beq.n	800ba74 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a2d      	ldr	r2, [pc, #180]	@ (800bb08 <HAL_SD_ReadBlocks+0x30c>)
 800ba54:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba5a:	f043 0208 	orr.w	r2, r3, #8
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	e044      	b.n	800bafe <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba7a:	f003 0302 	and.w	r3, r3, #2
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d012      	beq.n	800baa8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a20      	ldr	r2, [pc, #128]	@ (800bb08 <HAL_SD_ReadBlocks+0x30c>)
 800ba88:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba8e:	f043 0202 	orr.w	r2, r3, #2
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	e02a      	b.n	800bafe <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baae:	f003 0320 	and.w	r3, r3, #32
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d012      	beq.n	800badc <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a13      	ldr	r2, [pc, #76]	@ (800bb08 <HAL_SD_ReadBlocks+0x30c>)
 800babc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bac2:	f043 0220 	orr.w	r2, r3, #32
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2201      	movs	r2, #1
 800bace:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	e010      	b.n	800bafe <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a0a      	ldr	r2, [pc, #40]	@ (800bb0c <HAL_SD_ReadBlocks+0x310>)
 800bae2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	e006      	b.n	800bafe <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baf4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
  }
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3748      	adds	r7, #72	@ 0x48
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	1fe00fff 	.word	0x1fe00fff
 800bb0c:	18000f3a 	.word	0x18000f3a

0800bb10 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b092      	sub	sp, #72	@ 0x48
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bb1e:	f7f8 f911 	bl	8003d44 <HAL_GetTick>
 800bb22:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d107      	bne.n	800bb42 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb36:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e16b      	b.n	800be1a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	f040 815e 	bne.w	800be0c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2200      	movs	r2, #0
 800bb54:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bb56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	441a      	add	r2, r3
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d907      	bls.n	800bb74 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb68:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	e152      	b.n	800be1a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2203      	movs	r2, #3
 800bb78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2200      	movs	r2, #0
 800bb82:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d002      	beq.n	800bb92 <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb8e:	025b      	lsls	r3, r3, #9
 800bb90:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bb92:	f04f 33ff 	mov.w	r3, #4294967295
 800bb96:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	025b      	lsls	r3, r3, #9
 800bb9c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800bb9e:	2390      	movs	r3, #144	@ 0x90
 800bba0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800bba2:	2300      	movs	r3, #0
 800bba4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f107 0218 	add.w	r2, r7, #24
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f004 f88f 	bl	800fcdc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68da      	ldr	r2, [r3, #12]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbcc:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d90a      	bls.n	800bbea <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2220      	movs	r2, #32
 800bbd8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f004 f933 	bl	800fe4c <SDMMC_CmdWriteMultiBlock>
 800bbe6:	6478      	str	r0, [r7, #68]	@ 0x44
 800bbe8:	e009      	b.n	800bbfe <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2210      	movs	r2, #16
 800bbee:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f004 f905 	bl	800fe06 <SDMMC_CmdWriteSingleBlock>
 800bbfc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800bbfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d012      	beq.n	800bc2a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4a86      	ldr	r2, [pc, #536]	@ (800be24 <HAL_SD_WriteBlocks+0x314>)
 800bc0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc12:	431a      	orrs	r2, r3
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2200      	movs	r2, #0
 800bc24:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e0f7      	b.n	800be1a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800bc2e:	e05c      	b.n	800bcea <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d037      	beq.n	800bcae <HAL_SD_WriteBlocks+0x19e>
 800bc3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc40:	2b1f      	cmp	r3, #31
 800bc42:	d934      	bls.n	800bcae <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bc44:	2300      	movs	r3, #0
 800bc46:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc48:	e02b      	b.n	800bca2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800bc4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bc50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc52:	3301      	adds	r3, #1
 800bc54:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800bc56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	021a      	lsls	r2, r3, #8
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bc62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc64:	3301      	adds	r3, #1
 800bc66:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800bc68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	041a      	lsls	r2, r3, #16
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bc74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc76:	3301      	adds	r3, #1
 800bc78:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800bc7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	061a      	lsls	r2, r3, #24
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	4313      	orrs	r3, r2
 800bc84:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800bc86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc88:	3301      	adds	r3, #1
 800bc8a:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f107 0214 	add.w	r2, r7, #20
 800bc94:	4611      	mov	r1, r2
 800bc96:	4618      	mov	r0, r3
 800bc98:	f003 ffa5 	bl	800fbe6 <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 800bc9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc9e:	3301      	adds	r3, #1
 800bca0:	643b      	str	r3, [r7, #64]	@ 0x40
 800bca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bca4:	2b07      	cmp	r3, #7
 800bca6:	d9d0      	bls.n	800bc4a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 800bca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcaa:	3b20      	subs	r3, #32
 800bcac:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800bcae:	f7f8 f849 	bl	8003d44 <HAL_GetTick>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb6:	1ad3      	subs	r3, r2, r3
 800bcb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d902      	bls.n	800bcc4 <HAL_SD_WriteBlocks+0x1b4>
 800bcbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d112      	bne.n	800bcea <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a56      	ldr	r2, [pc, #344]	@ (800be24 <HAL_SD_WriteBlocks+0x314>)
 800bcca:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bcd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcd2:	431a      	orrs	r2, r3
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800bce6:	2303      	movs	r3, #3
 800bce8:	e097      	b.n	800be1a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcf0:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d09b      	beq.n	800bc30 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	68da      	ldr	r2, [r3, #12]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bd06:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d022      	beq.n	800bd5c <HAL_SD_WriteBlocks+0x24c>
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d91f      	bls.n	800bd5c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd20:	2b03      	cmp	r3, #3
 800bd22:	d01b      	beq.n	800bd5c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f004 f8b3 	bl	800fe94 <SDMMC_CmdStopTransfer>
 800bd2e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 800bd30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d012      	beq.n	800bd5c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a3a      	ldr	r2, [pc, #232]	@ (800be24 <HAL_SD_WriteBlocks+0x314>)
 800bd3c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd44:	431a      	orrs	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2200      	movs	r2, #0
 800bd56:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e05e      	b.n	800be1a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd62:	f003 0308 	and.w	r3, r3, #8
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d012      	beq.n	800bd90 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a2d      	ldr	r2, [pc, #180]	@ (800be24 <HAL_SD_WriteBlocks+0x314>)
 800bd70:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd76:	f043 0208 	orr.w	r2, r3, #8
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2201      	movs	r2, #1
 800bd82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e044      	b.n	800be1a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd96:	f003 0302 	and.w	r3, r3, #2
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d012      	beq.n	800bdc4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a20      	ldr	r2, [pc, #128]	@ (800be24 <HAL_SD_WriteBlocks+0x314>)
 800bda4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdaa:	f043 0202 	orr.w	r2, r3, #2
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e02a      	b.n	800be1a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdca:	f003 0310 	and.w	r3, r3, #16
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d012      	beq.n	800bdf8 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a13      	ldr	r2, [pc, #76]	@ (800be24 <HAL_SD_WriteBlocks+0x314>)
 800bdd8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdde:	f043 0210 	orr.w	r2, r3, #16
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2201      	movs	r2, #1
 800bdea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e010      	b.n	800be1a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a0a      	ldr	r2, [pc, #40]	@ (800be28 <HAL_SD_WriteBlocks+0x318>)
 800bdfe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800be08:	2300      	movs	r3, #0
 800be0a:	e006      	b.n	800be1a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be10:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800be18:	2301      	movs	r3, #1
  }
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3748      	adds	r7, #72	@ 0x48
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	1fe00fff 	.word	0x1fe00fff
 800be28:	18000f3a 	.word	0x18000f3a

0800be2c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be3a:	0f9b      	lsrs	r3, r3, #30
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be46:	0e9b      	lsrs	r3, r3, #26
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	f003 030f 	and.w	r3, r3, #15
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be58:	0e1b      	lsrs	r3, r3, #24
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	f003 0303 	and.w	r3, r3, #3
 800be60:	b2da      	uxtb	r2, r3
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be6a:	0c1b      	lsrs	r3, r3, #16
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be76:	0a1b      	lsrs	r3, r3, #8
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be82:	b2da      	uxtb	r2, r3
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be8c:	0d1b      	lsrs	r3, r3, #20
 800be8e:	b29a      	uxth	r2, r3
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be98:	0c1b      	lsrs	r3, r3, #16
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	f003 030f 	and.w	r3, r3, #15
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800beaa:	0bdb      	lsrs	r3, r3, #15
 800beac:	b2db      	uxtb	r3, r3
 800beae:	f003 0301 	and.w	r3, r3, #1
 800beb2:	b2da      	uxtb	r2, r3
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bebc:	0b9b      	lsrs	r3, r3, #14
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bece:	0b5b      	lsrs	r3, r3, #13
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bee0:	0b1b      	lsrs	r3, r3, #12
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	f003 0301 	and.w	r3, r3, #1
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	2200      	movs	r2, #0
 800bef2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d163      	bne.n	800bfc4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf00:	009a      	lsls	r2, r3, #2
 800bf02:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800bf06:	4013      	ands	r3, r2
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800bf0c:	0f92      	lsrs	r2, r2, #30
 800bf0e:	431a      	orrs	r2, r3
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf18:	0edb      	lsrs	r3, r3, #27
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	f003 0307 	and.w	r3, r3, #7
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf2a:	0e1b      	lsrs	r3, r3, #24
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	f003 0307 	and.w	r3, r3, #7
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf3c:	0d5b      	lsrs	r3, r3, #21
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	f003 0307 	and.w	r3, r3, #7
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf4e:	0c9b      	lsrs	r3, r3, #18
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	f003 0307 	and.w	r3, r3, #7
 800bf56:	b2da      	uxtb	r2, r3
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf60:	0bdb      	lsrs	r3, r3, #15
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	f003 0307 	and.w	r3, r3, #7
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	1c5a      	adds	r2, r3, #1
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	7e1b      	ldrb	r3, [r3, #24]
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	f003 0307 	and.w	r3, r3, #7
 800bf82:	3302      	adds	r3, #2
 800bf84:	2201      	movs	r2, #1
 800bf86:	fa02 f303 	lsl.w	r3, r2, r3
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bf8e:	fb03 f202 	mul.w	r2, r3, r2
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	7a1b      	ldrb	r3, [r3, #8]
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	f003 030f 	and.w	r3, r3, #15
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	409a      	lsls	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800bfb0:	0a52      	lsrs	r2, r2, #9
 800bfb2:	fb03 f202 	mul.w	r2, r3, r2
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bfc0:	655a      	str	r2, [r3, #84]	@ 0x54
 800bfc2:	e031      	b.n	800c028 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d11d      	bne.n	800c008 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bfd0:	041b      	lsls	r3, r3, #16
 800bfd2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfda:	0c1b      	lsrs	r3, r3, #16
 800bfdc:	431a      	orrs	r2, r3
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	691b      	ldr	r3, [r3, #16]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	029a      	lsls	r2, r3, #10
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bffc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	655a      	str	r2, [r3, #84]	@ 0x54
 800c006:	e00f      	b.n	800c028 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a58      	ldr	r2, [pc, #352]	@ (800c170 <HAL_SD_GetCardCSD+0x344>)
 800c00e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c014:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	e09d      	b.n	800c164 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c02c:	0b9b      	lsrs	r3, r3, #14
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	b2da      	uxtb	r2, r3
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c03e:	09db      	lsrs	r3, r3, #7
 800c040:	b2db      	uxtb	r3, r3
 800c042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c046:	b2da      	uxtb	r2, r3
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c050:	b2db      	uxtb	r3, r3
 800c052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c056:	b2da      	uxtb	r2, r3
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c060:	0fdb      	lsrs	r3, r3, #31
 800c062:	b2da      	uxtb	r2, r3
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c06c:	0f5b      	lsrs	r3, r3, #29
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	f003 0303 	and.w	r3, r3, #3
 800c074:	b2da      	uxtb	r2, r3
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c07e:	0e9b      	lsrs	r3, r3, #26
 800c080:	b2db      	uxtb	r3, r3
 800c082:	f003 0307 	and.w	r3, r3, #7
 800c086:	b2da      	uxtb	r2, r3
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c090:	0d9b      	lsrs	r3, r3, #22
 800c092:	b2db      	uxtb	r3, r3
 800c094:	f003 030f 	and.w	r3, r3, #15
 800c098:	b2da      	uxtb	r2, r3
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0a2:	0d5b      	lsrs	r3, r3, #21
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	b2da      	uxtb	r2, r3
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0be:	0c1b      	lsrs	r3, r3, #16
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	f003 0301 	and.w	r3, r3, #1
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0d2:	0bdb      	lsrs	r3, r3, #15
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	f003 0301 	and.w	r3, r3, #1
 800c0da:	b2da      	uxtb	r2, r3
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0e6:	0b9b      	lsrs	r3, r3, #14
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	f003 0301 	and.w	r3, r3, #1
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0fa:	0b5b      	lsrs	r3, r3, #13
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	f003 0301 	and.w	r3, r3, #1
 800c102:	b2da      	uxtb	r2, r3
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c10e:	0b1b      	lsrs	r3, r3, #12
 800c110:	b2db      	uxtb	r3, r3
 800c112:	f003 0301 	and.w	r3, r3, #1
 800c116:	b2da      	uxtb	r2, r3
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c122:	0a9b      	lsrs	r3, r3, #10
 800c124:	b2db      	uxtb	r3, r3
 800c126:	f003 0303 	and.w	r3, r3, #3
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c136:	0a1b      	lsrs	r3, r3, #8
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	f003 0303 	and.w	r3, r3, #3
 800c13e:	b2da      	uxtb	r2, r3
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c14a:	085b      	lsrs	r3, r3, #1
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c152:	b2da      	uxtb	r2, r3
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	2201      	movs	r2, #1
 800c15e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr
 800c170:	1fe00fff 	.word	0x1fe00fff

0800c174 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b094      	sub	sp, #80	@ 0x50
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c17e:	2300      	movs	r3, #0
 800c180:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	2b03      	cmp	r3, #3
 800c18e:	d101      	bne.n	800c194 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800c190:	2301      	movs	r3, #1
 800c192:	e0a7      	b.n	800c2e4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800c194:	f107 0308 	add.w	r3, r7, #8
 800c198:	4619      	mov	r1, r3
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fb62 	bl	800c864 <SD_SendSDStatus>
 800c1a0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c1a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d011      	beq.n	800c1cc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a4f      	ldr	r2, [pc, #316]	@ (800c2ec <HAL_SD_GetCardStatus+0x178>)
 800c1ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1b6:	431a      	orrs	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800c1ca:	e070      	b.n	800c2ae <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	099b      	lsrs	r3, r3, #6
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	f003 0303 	and.w	r3, r3, #3
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	095b      	lsrs	r3, r3, #5
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	f003 0301 	and.w	r3, r3, #1
 800c1e6:	b2da      	uxtb	r2, r3
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	0a1b      	lsrs	r3, r3, #8
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	0e1b      	lsrs	r3, r3, #24
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	4313      	orrs	r3, r2
 800c200:	b29a      	uxth	r2, r3
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	061a      	lsls	r2, r3, #24
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	021b      	lsls	r3, r3, #8
 800c20e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c212:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	0a1b      	lsrs	r3, r3, #8
 800c218:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c21c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	0e1b      	lsrs	r3, r3, #24
 800c222:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	0a1b      	lsrs	r3, r3, #8
 800c234:	b2da      	uxtb	r2, r3
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	0d1b      	lsrs	r3, r3, #20
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	f003 030f 	and.w	r3, r3, #15
 800c244:	b2da      	uxtb	r2, r3
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	0c1b      	lsrs	r3, r3, #16
 800c24e:	b29b      	uxth	r3, r3
 800c250:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c254:	b29a      	uxth	r2, r3
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	b29b      	uxth	r3, r3
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	4313      	orrs	r3, r2
 800c260:	b29a      	uxth	r2, r3
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	0a9b      	lsrs	r3, r3, #10
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c270:	b2da      	uxtb	r2, r3
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	0a1b      	lsrs	r3, r3, #8
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	f003 0303 	and.w	r3, r3, #3
 800c280:	b2da      	uxtb	r2, r3
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	091b      	lsrs	r3, r3, #4
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	f003 030f 	and.w	r3, r3, #15
 800c290:	b2da      	uxtb	r2, r3
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	f003 030f 	and.w	r3, r3, #15
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	0e1b      	lsrs	r3, r3, #24
 800c2a8:	b2da      	uxtb	r2, r3
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f003 fd3c 	bl	800fd34 <SDMMC_CmdBlockLength>
 800c2bc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800c2be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00d      	beq.n	800c2e0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a08      	ldr	r2, [pc, #32]	@ (800c2ec <HAL_SD_GetCardStatus+0x178>)
 800c2ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2d0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800c2e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3750      	adds	r7, #80	@ 0x50
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	1fe00fff 	.word	0x1fe00fff

0800c2f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c33a:	2300      	movs	r3, #0
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c348:	b590      	push	{r4, r7, lr}
 800c34a:	b08d      	sub	sp, #52	@ 0x34
 800c34c:	af02      	add	r7, sp, #8
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800c352:	2300      	movs	r3, #0
 800c354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2203      	movs	r2, #3
 800c35c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c364:	2b03      	cmp	r3, #3
 800c366:	d02e      	beq.n	800c3c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c36e:	d106      	bne.n	800c37e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c374:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	635a      	str	r2, [r3, #52]	@ 0x34
 800c37c:	e029      	b.n	800c3d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c384:	d10a      	bne.n	800c39c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 fb64 	bl	800ca54 <SD_WideBus_Enable>
 800c38c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c392:	6a3b      	ldr	r3, [r7, #32]
 800c394:	431a      	orrs	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	635a      	str	r2, [r3, #52]	@ 0x34
 800c39a:	e01a      	b.n	800c3d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10a      	bne.n	800c3b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fba1 	bl	800caea <SD_WideBus_Disable>
 800c3a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3ae:	6a3b      	ldr	r3, [r7, #32]
 800c3b0:	431a      	orrs	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	635a      	str	r2, [r3, #52]	@ 0x34
 800c3b6:	e00c      	b.n	800c3d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3bc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	635a      	str	r2, [r3, #52]	@ 0x34
 800c3c4:	e005      	b.n	800c3d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3ca:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d007      	beq.n	800c3ea <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a5f      	ldr	r2, [pc, #380]	@ (800c55c <HAL_SD_ConfigWideBusOperation+0x214>)
 800c3e0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c3e8:	e096      	b.n	800c518 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c3ea:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c3ee:	f04f 0100 	mov.w	r1, #0
 800c3f2:	f7fd fe9d 	bl	800a130 <HAL_RCCEx_GetPeriphCLKFreq>
 800c3f6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f000 8083 	beq.w	800c506 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	689b      	ldr	r3, [r3, #8]
 800c40a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	695a      	ldr	r2, [r3, #20]
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	4950      	ldr	r1, [pc, #320]	@ (800c560 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c41e:	fba1 1303 	umull	r1, r3, r1, r3
 800c422:	0e1b      	lsrs	r3, r3, #24
 800c424:	429a      	cmp	r2, r3
 800c426:	d303      	bcc.n	800c430 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	695b      	ldr	r3, [r3, #20]
 800c42c:	61bb      	str	r3, [r7, #24]
 800c42e:	e05a      	b.n	800c4e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c438:	d103      	bne.n	800c442 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	61bb      	str	r3, [r7, #24]
 800c440:	e051      	b.n	800c4e6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c44a:	d126      	bne.n	800c49a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	695b      	ldr	r3, [r3, #20]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10e      	bne.n	800c472 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	4a43      	ldr	r2, [pc, #268]	@ (800c564 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d906      	bls.n	800c46a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	4a40      	ldr	r2, [pc, #256]	@ (800c560 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c460:	fba2 2303 	umull	r2, r3, r2, r3
 800c464:	0e5b      	lsrs	r3, r3, #25
 800c466:	61bb      	str	r3, [r7, #24]
 800c468:	e03d      	b.n	800c4e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	695b      	ldr	r3, [r3, #20]
 800c46e:	61bb      	str	r3, [r7, #24]
 800c470:	e039      	b.n	800c4e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	005b      	lsls	r3, r3, #1
 800c478:	69fa      	ldr	r2, [r7, #28]
 800c47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c47e:	4a39      	ldr	r2, [pc, #228]	@ (800c564 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d906      	bls.n	800c492 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	4a36      	ldr	r2, [pc, #216]	@ (800c560 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c488:	fba2 2303 	umull	r2, r3, r2, r3
 800c48c:	0e5b      	lsrs	r3, r3, #25
 800c48e:	61bb      	str	r3, [r7, #24]
 800c490:	e029      	b.n	800c4e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	61bb      	str	r3, [r7, #24]
 800c498:	e025      	b.n	800c4e6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10e      	bne.n	800c4c0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	4a30      	ldr	r2, [pc, #192]	@ (800c568 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d906      	bls.n	800c4b8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	4a2c      	ldr	r2, [pc, #176]	@ (800c560 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c4ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c4b2:	0e1b      	lsrs	r3, r3, #24
 800c4b4:	61bb      	str	r3, [r7, #24]
 800c4b6:	e016      	b.n	800c4e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	695b      	ldr	r3, [r3, #20]
 800c4bc:	61bb      	str	r3, [r7, #24]
 800c4be:	e012      	b.n	800c4e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	695b      	ldr	r3, [r3, #20]
 800c4c4:	005b      	lsls	r3, r3, #1
 800c4c6:	69fa      	ldr	r2, [r7, #28]
 800c4c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4cc:	4a26      	ldr	r2, [pc, #152]	@ (800c568 <HAL_SD_ConfigWideBusOperation+0x220>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d906      	bls.n	800c4e0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	4a22      	ldr	r2, [pc, #136]	@ (800c560 <HAL_SD_ConfigWideBusOperation+0x218>)
 800c4d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c4da:	0e1b      	lsrs	r3, r3, #24
 800c4dc:	61bb      	str	r3, [r7, #24]
 800c4de:	e002      	b.n	800c4e6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681c      	ldr	r4, [r3, #0]
 800c4ea:	466a      	mov	r2, sp
 800c4ec:	f107 0314 	add.w	r3, r7, #20
 800c4f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c4f4:	e882 0003 	stmia.w	r2, {r0, r1}
 800c4f8:	f107 0308 	add.w	r3, r7, #8
 800c4fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c4fe:	4620      	mov	r0, r4
 800c500:	f003 fb3a 	bl	800fb78 <SDMMC_Init>
 800c504:	e008      	b.n	800c518 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c50a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800c512:	2301      	movs	r3, #1
 800c514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c520:	4618      	mov	r0, r3
 800c522:	f003 fc07 	bl	800fd34 <SDMMC_CmdBlockLength>
 800c526:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c528:	6a3b      	ldr	r3, [r7, #32]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00c      	beq.n	800c548 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a0a      	ldr	r2, [pc, #40]	@ (800c55c <HAL_SD_ConfigWideBusOperation+0x214>)
 800c534:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c53a:	6a3b      	ldr	r3, [r7, #32]
 800c53c:	431a      	orrs	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2201      	movs	r2, #1
 800c54c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800c550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c554:	4618      	mov	r0, r3
 800c556:	372c      	adds	r7, #44	@ 0x2c
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd90      	pop	{r4, r7, pc}
 800c55c:	1fe00fff 	.word	0x1fe00fff
 800c560:	55e63b89 	.word	0x55e63b89
 800c564:	02faf080 	.word	0x02faf080
 800c568:	017d7840 	.word	0x017d7840

0800c56c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c574:	2300      	movs	r3, #0
 800c576:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c578:	f107 030c 	add.w	r3, r7, #12
 800c57c:	4619      	mov	r1, r3
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fa40 	bl	800ca04 <SD_SendStatus>
 800c584:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d005      	beq.n	800c598 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	431a      	orrs	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	0a5b      	lsrs	r3, r3, #9
 800c59c:	f003 030f 	and.w	r3, r3, #15
 800c5a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c5a2:	693b      	ldr	r3, [r7, #16]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3718      	adds	r7, #24
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b090      	sub	sp, #64	@ 0x40
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800c5b8:	f7f7 fbc4 	bl	8003d44 <HAL_GetTick>
 800c5bc:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f003 fb31 	bl	800fc2a <SDMMC_GetPowerState>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d102      	bne.n	800c5d4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c5ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c5d2:	e0b5      	b.n	800c740 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5d8:	2b03      	cmp	r3, #3
 800c5da:	d02e      	beq.n	800c63a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f003 fd7c 	bl	80100de <SDMMC_CmdSendCID>
 800c5e6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d001      	beq.n	800c5f2 <SD_InitCard+0x46>
    {
      return errorstate;
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f0:	e0a6      	b.n	800c740 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2100      	movs	r1, #0
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f003 fb5c 	bl	800fcb6 <SDMMC_GetResponse>
 800c5fe:	4602      	mov	r2, r0
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2104      	movs	r1, #4
 800c60a:	4618      	mov	r0, r3
 800c60c:	f003 fb53 	bl	800fcb6 <SDMMC_GetResponse>
 800c610:	4602      	mov	r2, r0
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2108      	movs	r1, #8
 800c61c:	4618      	mov	r0, r3
 800c61e:	f003 fb4a 	bl	800fcb6 <SDMMC_GetResponse>
 800c622:	4602      	mov	r2, r0
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	210c      	movs	r1, #12
 800c62e:	4618      	mov	r0, r3
 800c630:	f003 fb41 	bl	800fcb6 <SDMMC_GetResponse>
 800c634:	4602      	mov	r2, r0
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c63e:	2b03      	cmp	r3, #3
 800c640:	d01d      	beq.n	800c67e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800c642:	e019      	b.n	800c678 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f107 020a 	add.w	r2, r7, #10
 800c64c:	4611      	mov	r1, r2
 800c64e:	4618      	mov	r0, r3
 800c650:	f003 fd84 	bl	801015c <SDMMC_CmdSetRelAdd>
 800c654:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800c656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d001      	beq.n	800c660 <SD_InitCard+0xb4>
      {
        return errorstate;
 800c65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c65e:	e06f      	b.n	800c740 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800c660:	f7f7 fb70 	bl	8003d44 <HAL_GetTick>
 800c664:	4602      	mov	r2, r0
 800c666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800c66e:	4293      	cmp	r3, r2
 800c670:	d902      	bls.n	800c678 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800c672:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c676:	e063      	b.n	800c740 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800c678:	897b      	ldrh	r3, [r7, #10]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d0e2      	beq.n	800c644 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c682:	2b03      	cmp	r3, #3
 800c684:	d036      	beq.n	800c6f4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c686:	897b      	ldrh	r3, [r7, #10]
 800c688:	461a      	mov	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c696:	041b      	lsls	r3, r3, #16
 800c698:	4619      	mov	r1, r3
 800c69a:	4610      	mov	r0, r2
 800c69c:	f003 fd3e 	bl	801011c <SDMMC_CmdSendCSD>
 800c6a0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800c6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <SD_InitCard+0x100>
    {
      return errorstate;
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6aa:	e049      	b.n	800c740 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f003 faff 	bl	800fcb6 <SDMMC_GetResponse>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2104      	movs	r1, #4
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f003 faf6 	bl	800fcb6 <SDMMC_GetResponse>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2108      	movs	r1, #8
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f003 faed 	bl	800fcb6 <SDMMC_GetResponse>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	210c      	movs	r1, #12
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f003 fae4 	bl	800fcb6 <SDMMC_GetResponse>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2104      	movs	r1, #4
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f003 fadb 	bl	800fcb6 <SDMMC_GetResponse>
 800c700:	4603      	mov	r3, r0
 800c702:	0d1a      	lsrs	r2, r3, #20
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c708:	f107 030c 	add.w	r3, r7, #12
 800c70c:	4619      	mov	r1, r3
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7ff fb8c 	bl	800be2c <HAL_SD_GetCardCSD>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d002      	beq.n	800c720 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c71a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c71e:	e00f      	b.n	800c740 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c728:	041b      	lsls	r3, r3, #16
 800c72a:	4619      	mov	r1, r3
 800c72c:	4610      	mov	r0, r2
 800c72e:	f003 fbed 	bl	800ff0c <SDMMC_CmdSelDesel>
 800c732:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800c734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c736:	2b00      	cmp	r3, #0
 800c738:	d001      	beq.n	800c73e <SD_InitCard+0x192>
  {
    return errorstate;
 800c73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73c:	e000      	b.n	800c740 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c73e:	2300      	movs	r3, #0
}
 800c740:	4618      	mov	r0, r3
 800c742:	3740      	adds	r7, #64	@ 0x40
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b086      	sub	sp, #24
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c750:	2300      	movs	r3, #0
 800c752:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800c754:	2300      	movs	r3, #0
 800c756:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800c758:	2300      	movs	r3, #0
 800c75a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4618      	mov	r0, r3
 800c762:	f003 fbf6 	bl	800ff52 <SDMMC_CmdGoIdleState>
 800c766:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	e072      	b.n	800c858 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4618      	mov	r0, r3
 800c778:	f003 fc09 	bl	800ff8e <SDMMC_CmdOperCond>
 800c77c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c784:	d10d      	bne.n	800c7a2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4618      	mov	r0, r3
 800c792:	f003 fbde 	bl	800ff52 <SDMMC_CmdGoIdleState>
 800c796:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d004      	beq.n	800c7a8 <SD_PowerON+0x60>
    {
      return errorstate;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	e05a      	b.n	800c858 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d137      	bne.n	800c820 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f003 fc09 	bl	800ffce <SDMMC_CmdAppCommand>
 800c7bc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d02d      	beq.n	800c820 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c7c4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c7c8:	e046      	b.n	800c858 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	2100      	movs	r1, #0
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f003 fbfc 	bl	800ffce <SDMMC_CmdAppCommand>
 800c7d6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d001      	beq.n	800c7e2 <SD_PowerON+0x9a>
    {
      return errorstate;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	e03a      	b.n	800c858 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	491e      	ldr	r1, [pc, #120]	@ (800c860 <SD_PowerON+0x118>)
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f003 fc13 	bl	8010014 <SDMMC_CmdAppOperCommand>
 800c7ee:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d002      	beq.n	800c7fc <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c7f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c7fa:	e02d      	b.n	800c858 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2100      	movs	r1, #0
 800c802:	4618      	mov	r0, r3
 800c804:	f003 fa57 	bl	800fcb6 <SDMMC_GetResponse>
 800c808:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	0fdb      	lsrs	r3, r3, #31
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d101      	bne.n	800c816 <SD_PowerON+0xce>
 800c812:	2301      	movs	r3, #1
 800c814:	e000      	b.n	800c818 <SD_PowerON+0xd0>
 800c816:	2300      	movs	r3, #0
 800c818:	613b      	str	r3, [r7, #16]

    count++;
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	3301      	adds	r3, #1
 800c81e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c826:	4293      	cmp	r3, r2
 800c828:	d802      	bhi.n	800c830 <SD_PowerON+0xe8>
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d0cc      	beq.n	800c7ca <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c836:	4293      	cmp	r3, r2
 800c838:	d902      	bls.n	800c840 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c83a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c83e:	e00b      	b.n	800c858 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d002      	beq.n	800c856 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800c856:	2300      	movs	r3, #0
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3718      	adds	r7, #24
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	c1100000 	.word	0xc1100000

0800c864 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b08c      	sub	sp, #48	@ 0x30
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c86e:	f7f7 fa69 	bl	8003d44 <HAL_GetTick>
 800c872:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2100      	movs	r1, #0
 800c87e:	4618      	mov	r0, r3
 800c880:	f003 fa19 	bl	800fcb6 <SDMMC_GetResponse>
 800c884:	4603      	mov	r3, r0
 800c886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c88a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c88e:	d102      	bne.n	800c896 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c890:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c894:	e0b0      	b.n	800c9f8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2140      	movs	r1, #64	@ 0x40
 800c89c:	4618      	mov	r0, r3
 800c89e:	f003 fa49 	bl	800fd34 <SDMMC_CmdBlockLength>
 800c8a2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d005      	beq.n	800c8b6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c8b2:	6a3b      	ldr	r3, [r7, #32]
 800c8b4:	e0a0      	b.n	800c9f8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8be:	041b      	lsls	r3, r3, #16
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	f003 fb83 	bl	800ffce <SDMMC_CmdAppCommand>
 800c8c8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8ca:	6a3b      	ldr	r3, [r7, #32]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d005      	beq.n	800c8dc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c8d8:	6a3b      	ldr	r3, [r7, #32]
 800c8da:	e08d      	b.n	800c9f8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c8e0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800c8e2:	2340      	movs	r3, #64	@ 0x40
 800c8e4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800c8e6:	2360      	movs	r3, #96	@ 0x60
 800c8e8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c8ea:	2302      	movs	r3, #2
 800c8ec:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f107 0208 	add.w	r2, r7, #8
 800c8fe:	4611      	mov	r1, r2
 800c900:	4618      	mov	r0, r3
 800c902:	f003 f9eb 	bl	800fcdc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4618      	mov	r0, r3
 800c90c:	f003 fc6b 	bl	80101e6 <SDMMC_CmdStatusRegister>
 800c910:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c912:	6a3b      	ldr	r3, [r7, #32]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d02b      	beq.n	800c970 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800c920:	6a3b      	ldr	r3, [r7, #32]
 800c922:	e069      	b.n	800c9f8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c92a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d013      	beq.n	800c95a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800c932:	2300      	movs	r3, #0
 800c934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c936:	e00d      	b.n	800c954 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f003 f945 	bl	800fbcc <SDMMC_ReadFIFO>
 800c942:	4602      	mov	r2, r0
 800c944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c946:	601a      	str	r2, [r3, #0]
        pData++;
 800c948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c94a:	3304      	adds	r3, #4
 800c94c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800c94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c950:	3301      	adds	r3, #1
 800c952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c956:	2b07      	cmp	r3, #7
 800c958:	d9ee      	bls.n	800c938 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800c95a:	f7f7 f9f3 	bl	8003d44 <HAL_GetTick>
 800c95e:	4602      	mov	r2, r0
 800c960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c962:	1ad3      	subs	r3, r2, r3
 800c964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c968:	d102      	bne.n	800c970 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c96a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c96e:	e043      	b.n	800c9f8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c976:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d0d2      	beq.n	800c924 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c984:	f003 0308 	and.w	r3, r3, #8
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d001      	beq.n	800c990 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c98c:	2308      	movs	r3, #8
 800c98e:	e033      	b.n	800c9f8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c996:	f003 0302 	and.w	r3, r3, #2
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d001      	beq.n	800c9a2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c99e:	2302      	movs	r3, #2
 800c9a0:	e02a      	b.n	800c9f8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9a8:	f003 0320 	and.w	r3, r3, #32
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d017      	beq.n	800c9e0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800c9b0:	2320      	movs	r3, #32
 800c9b2:	e021      	b.n	800c9f8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f003 f907 	bl	800fbcc <SDMMC_ReadFIFO>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c2:	601a      	str	r2, [r3, #0]
    pData++;
 800c9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800c9ca:	f7f7 f9bb 	bl	8003d44 <HAL_GetTick>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d2:	1ad3      	subs	r3, r2, r3
 800c9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9d8:	d102      	bne.n	800c9e0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c9da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c9de:	e00b      	b.n	800c9f8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1e2      	bne.n	800c9b4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a03      	ldr	r2, [pc, #12]	@ (800ca00 <SD_SendSDStatus+0x19c>)
 800c9f4:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3730      	adds	r7, #48	@ 0x30
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	18000f3a 	.word	0x18000f3a

0800ca04 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d102      	bne.n	800ca1a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ca14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ca18:	e018      	b.n	800ca4c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca22:	041b      	lsls	r3, r3, #16
 800ca24:	4619      	mov	r1, r3
 800ca26:	4610      	mov	r0, r2
 800ca28:	f003 fbba 	bl	80101a0 <SDMMC_CmdSendStatus>
 800ca2c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d001      	beq.n	800ca38 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	e009      	b.n	800ca4c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f003 f939 	bl	800fcb6 <SDMMC_GetResponse>
 800ca44:	4602      	mov	r2, r0
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b086      	sub	sp, #24
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	2300      	movs	r3, #0
 800ca62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2100      	movs	r1, #0
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f003 f923 	bl	800fcb6 <SDMMC_GetResponse>
 800ca70:	4603      	mov	r3, r0
 800ca72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca7a:	d102      	bne.n	800ca82 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ca7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ca80:	e02f      	b.n	800cae2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ca82:	f107 030c 	add.w	r3, r7, #12
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 f879 	bl	800cb80 <SD_FindSCR>
 800ca8e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d001      	beq.n	800ca9a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	e023      	b.n	800cae2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d01c      	beq.n	800cade <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caac:	041b      	lsls	r3, r3, #16
 800caae:	4619      	mov	r1, r3
 800cab0:	4610      	mov	r0, r2
 800cab2:	f003 fa8c 	bl	800ffce <SDMMC_CmdAppCommand>
 800cab6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d001      	beq.n	800cac2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	e00f      	b.n	800cae2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2102      	movs	r1, #2
 800cac8:	4618      	mov	r0, r3
 800caca:	f003 fac3 	bl	8010054 <SDMMC_CmdBusWidth>
 800cace:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	e003      	b.n	800cae2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cada:	2300      	movs	r3, #0
 800cadc:	e001      	b.n	800cae2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cade:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3718      	adds	r7, #24
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b086      	sub	sp, #24
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800caf2:	2300      	movs	r3, #0
 800caf4:	60fb      	str	r3, [r7, #12]
 800caf6:	2300      	movs	r3, #0
 800caf8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2100      	movs	r1, #0
 800cb00:	4618      	mov	r0, r3
 800cb02:	f003 f8d8 	bl	800fcb6 <SDMMC_GetResponse>
 800cb06:	4603      	mov	r3, r0
 800cb08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cb10:	d102      	bne.n	800cb18 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cb12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cb16:	e02f      	b.n	800cb78 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cb18:	f107 030c 	add.w	r3, r7, #12
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 f82e 	bl	800cb80 <SD_FindSCR>
 800cb24:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d001      	beq.n	800cb30 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	e023      	b.n	800cb78 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d01c      	beq.n	800cb74 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb42:	041b      	lsls	r3, r3, #16
 800cb44:	4619      	mov	r1, r3
 800cb46:	4610      	mov	r0, r2
 800cb48:	f003 fa41 	bl	800ffce <SDMMC_CmdAppCommand>
 800cb4c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d001      	beq.n	800cb58 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	e00f      	b.n	800cb78 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f003 fa78 	bl	8010054 <SDMMC_CmdBusWidth>
 800cb64:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d001      	beq.n	800cb70 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	e003      	b.n	800cb78 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cb70:	2300      	movs	r3, #0
 800cb72:	e001      	b.n	800cb78 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cb74:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3718      	adds	r7, #24
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b08e      	sub	sp, #56	@ 0x38
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cb8a:	f7f7 f8db 	bl	8003d44 <HAL_GetTick>
 800cb8e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800cb90:	2300      	movs	r3, #0
 800cb92:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800cb94:	2300      	movs	r3, #0
 800cb96:	60bb      	str	r3, [r7, #8]
 800cb98:	2300      	movs	r3, #0
 800cb9a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2108      	movs	r1, #8
 800cba6:	4618      	mov	r0, r3
 800cba8:	f003 f8c4 	bl	800fd34 <SDMMC_CmdBlockLength>
 800cbac:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d001      	beq.n	800cbb8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800cbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb6:	e0ad      	b.n	800cd14 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbc0:	041b      	lsls	r3, r3, #16
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	f003 fa02 	bl	800ffce <SDMMC_CmdAppCommand>
 800cbca:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d001      	beq.n	800cbd6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800cbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd4:	e09e      	b.n	800cd14 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cbd6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbda:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cbdc:	2308      	movs	r3, #8
 800cbde:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800cbe0:	2330      	movs	r3, #48	@ 0x30
 800cbe2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cbe4:	2302      	movs	r3, #2
 800cbe6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cbec:	2301      	movs	r3, #1
 800cbee:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f107 0210 	add.w	r2, r7, #16
 800cbf8:	4611      	mov	r1, r2
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f003 f86e 	bl	800fcdc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4618      	mov	r0, r3
 800cc06:	f003 fa48 	bl	801009a <SDMMC_CmdSendSCR>
 800cc0a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d027      	beq.n	800cc62 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800cc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc14:	e07e      	b.n	800cd14 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d113      	bne.n	800cc4c <SD_FindSCR+0xcc>
 800cc24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d110      	bne.n	800cc4c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f002 ffcc 	bl	800fbcc <SDMMC_ReadFIFO>
 800cc34:	4603      	mov	r3, r0
 800cc36:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f002 ffc5 	bl	800fbcc <SDMMC_ReadFIFO>
 800cc42:	4603      	mov	r3, r0
 800cc44:	60fb      	str	r3, [r7, #12]
      index++;
 800cc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc48:	3301      	adds	r3, #1
 800cc4a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800cc4c:	f7f7 f87a 	bl	8003d44 <HAL_GetTick>
 800cc50:	4602      	mov	r2, r0
 800cc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc54:	1ad3      	subs	r3, r2, r3
 800cc56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc5a:	d102      	bne.n	800cc62 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800cc5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc60:	e058      	b.n	800cd14 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc68:	f240 532a 	movw	r3, #1322	@ 0x52a
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d0d1      	beq.n	800cc16 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc78:	f003 0308 	and.w	r3, r3, #8
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d005      	beq.n	800cc8c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2208      	movs	r2, #8
 800cc86:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cc88:	2308      	movs	r3, #8
 800cc8a:	e043      	b.n	800cd14 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc92:	f003 0302 	and.w	r3, r3, #2
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d005      	beq.n	800cca6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2202      	movs	r2, #2
 800cca0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cca2:	2302      	movs	r3, #2
 800cca4:	e036      	b.n	800cd14 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccac:	f003 0320 	and.w	r3, r3, #32
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d005      	beq.n	800ccc0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2220      	movs	r2, #32
 800ccba:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ccbc:	2320      	movs	r3, #32
 800ccbe:	e029      	b.n	800cd14 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a15      	ldr	r2, [pc, #84]	@ (800cd1c <SD_FindSCR+0x19c>)
 800ccc6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	061a      	lsls	r2, r3, #24
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	021b      	lsls	r3, r3, #8
 800ccd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ccd4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	0a1b      	lsrs	r3, r3, #8
 800ccda:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800ccde:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	0e1b      	lsrs	r3, r3, #24
 800cce4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800cce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce8:	601a      	str	r2, [r3, #0]
    scr++;
 800ccea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccec:	3304      	adds	r3, #4
 800ccee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	061a      	lsls	r2, r3, #24
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	021b      	lsls	r3, r3, #8
 800ccf8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ccfc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	0a1b      	lsrs	r3, r3, #8
 800cd02:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800cd06:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	0e1b      	lsrs	r3, r3, #24
 800cd0c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800cd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd10:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cd12:	2300      	movs	r3, #0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3738      	adds	r7, #56	@ 0x38
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	18000f3a 	.word	0x18000f3a

0800cd20 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d101      	bne.n	800cd32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e10f      	b.n	800cf52 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2200      	movs	r2, #0
 800cd36:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a87      	ldr	r2, [pc, #540]	@ (800cf5c <HAL_SPI_Init+0x23c>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d00f      	beq.n	800cd62 <HAL_SPI_Init+0x42>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a86      	ldr	r2, [pc, #536]	@ (800cf60 <HAL_SPI_Init+0x240>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d00a      	beq.n	800cd62 <HAL_SPI_Init+0x42>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a84      	ldr	r2, [pc, #528]	@ (800cf64 <HAL_SPI_Init+0x244>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d005      	beq.n	800cd62 <HAL_SPI_Init+0x42>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	2b0f      	cmp	r3, #15
 800cd5c:	d901      	bls.n	800cd62 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e0f7      	b.n	800cf52 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fbbc 	bl	800d4e0 <SPI_GetPacketSize>
 800cd68:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a7b      	ldr	r2, [pc, #492]	@ (800cf5c <HAL_SPI_Init+0x23c>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d00c      	beq.n	800cd8e <HAL_SPI_Init+0x6e>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a79      	ldr	r2, [pc, #484]	@ (800cf60 <HAL_SPI_Init+0x240>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d007      	beq.n	800cd8e <HAL_SPI_Init+0x6e>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a78      	ldr	r2, [pc, #480]	@ (800cf64 <HAL_SPI_Init+0x244>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d002      	beq.n	800cd8e <HAL_SPI_Init+0x6e>
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2b08      	cmp	r3, #8
 800cd8c:	d811      	bhi.n	800cdb2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cd92:	4a72      	ldr	r2, [pc, #456]	@ (800cf5c <HAL_SPI_Init+0x23c>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d009      	beq.n	800cdac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a70      	ldr	r2, [pc, #448]	@ (800cf60 <HAL_SPI_Init+0x240>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d004      	beq.n	800cdac <HAL_SPI_Init+0x8c>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a6f      	ldr	r2, [pc, #444]	@ (800cf64 <HAL_SPI_Init+0x244>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d104      	bne.n	800cdb6 <HAL_SPI_Init+0x96>
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2b10      	cmp	r3, #16
 800cdb0:	d901      	bls.n	800cdb6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e0cd      	b.n	800cf52 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d106      	bne.n	800cdd0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f7f5 f942 	bl	8002054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2202      	movs	r2, #2
 800cdd4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f022 0201 	bic.w	r2, r2, #1
 800cde6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800cdf2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	699b      	ldr	r3, [r3, #24]
 800cdf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cdfc:	d119      	bne.n	800ce32 <HAL_SPI_Init+0x112>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ce06:	d103      	bne.n	800ce10 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d008      	beq.n	800ce22 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d10c      	bne.n	800ce32 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ce1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce20:	d107      	bne.n	800ce32 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ce30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00f      	beq.n	800ce5e <HAL_SPI_Init+0x13e>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	2b06      	cmp	r3, #6
 800ce44:	d90b      	bls.n	800ce5e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	430a      	orrs	r2, r1
 800ce5a:	601a      	str	r2, [r3, #0]
 800ce5c:	e007      	b.n	800ce6e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ce6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	69da      	ldr	r2, [r3, #28]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce76:	431a      	orrs	r2, r3
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	431a      	orrs	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce80:	ea42 0103 	orr.w	r1, r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	68da      	ldr	r2, [r3, #12]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	430a      	orrs	r2, r1
 800ce8e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce98:	431a      	orrs	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce9e:	431a      	orrs	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	699b      	ldr	r3, [r3, #24]
 800cea4:	431a      	orrs	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	691b      	ldr	r3, [r3, #16]
 800ceaa:	431a      	orrs	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	695b      	ldr	r3, [r3, #20]
 800ceb0:	431a      	orrs	r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a1b      	ldr	r3, [r3, #32]
 800ceb6:	431a      	orrs	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	431a      	orrs	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cec2:	431a      	orrs	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	431a      	orrs	r2, r3
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cece:	ea42 0103 	orr.w	r1, r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	430a      	orrs	r2, r1
 800cedc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d113      	bne.n	800cf0e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	689b      	ldr	r3, [r3, #8]
 800ceec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cef8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	689b      	ldr	r3, [r3, #8]
 800cf00:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cf0c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f022 0201 	bic.w	r2, r2, #1
 800cf1c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00a      	beq.n	800cf40 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	430a      	orrs	r2, r1
 800cf3e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	40013000 	.word	0x40013000
 800cf60:	40003800 	.word	0x40003800
 800cf64:	40003c00 	.word	0x40003c00

0800cf68 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b088      	sub	sp, #32
 800cf6c:	af02      	add	r7, sp, #8
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	603b      	str	r3, [r7, #0]
 800cf74:	4613      	mov	r3, r2
 800cf76:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	3320      	adds	r3, #32
 800cf7e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf80:	f7f6 fee0 	bl	8003d44 <HAL_GetTick>
 800cf84:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d001      	beq.n	800cf96 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800cf92:	2302      	movs	r3, #2
 800cf94:	e1d1      	b.n	800d33a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <HAL_SPI_Transmit+0x3a>
 800cf9c:	88fb      	ldrh	r3, [r7, #6]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d101      	bne.n	800cfa6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e1c9      	b.n	800d33a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d101      	bne.n	800cfb4 <HAL_SPI_Transmit+0x4c>
 800cfb0:	2302      	movs	r3, #2
 800cfb2:	e1c2      	b.n	800d33a <HAL_SPI_Transmit+0x3d2>
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2203      	movs	r2, #3
 800cfc0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	68ba      	ldr	r2, [r7, #8]
 800cfd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	88fa      	ldrh	r2, [r7, #6]
 800cfd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	88fa      	ldrh	r2, [r7, #6]
 800cfde:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800d00c:	d108      	bne.n	800d020 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d01c:	601a      	str	r2, [r3, #0]
 800d01e:	e009      	b.n	800d034 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d032:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	685a      	ldr	r2, [r3, #4]
 800d03a:	4b96      	ldr	r3, [pc, #600]	@ (800d294 <HAL_SPI_Transmit+0x32c>)
 800d03c:	4013      	ands	r3, r2
 800d03e:	88f9      	ldrh	r1, [r7, #6]
 800d040:	68fa      	ldr	r2, [r7, #12]
 800d042:	6812      	ldr	r2, [r2, #0]
 800d044:	430b      	orrs	r3, r1
 800d046:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f042 0201 	orr.w	r2, r2, #1
 800d056:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d060:	d107      	bne.n	800d072 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d070:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	2b0f      	cmp	r3, #15
 800d078:	d947      	bls.n	800d10a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d07a:	e03f      	b.n	800d0fc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	695b      	ldr	r3, [r3, #20]
 800d082:	f003 0302 	and.w	r3, r3, #2
 800d086:	2b02      	cmp	r3, #2
 800d088:	d114      	bne.n	800d0b4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	6812      	ldr	r2, [r2, #0]
 800d094:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d09a:	1d1a      	adds	r2, r3, #4
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	3b01      	subs	r3, #1
 800d0aa:	b29a      	uxth	r2, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d0b2:	e023      	b.n	800d0fc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0b4:	f7f6 fe46 	bl	8003d44 <HAL_GetTick>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	1ad3      	subs	r3, r2, r3
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d803      	bhi.n	800d0cc <HAL_SPI_Transmit+0x164>
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ca:	d102      	bne.n	800d0d2 <HAL_SPI_Transmit+0x16a>
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d114      	bne.n	800d0fc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f000 f936 	bl	800d344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d0f8:	2303      	movs	r3, #3
 800d0fa:	e11e      	b.n	800d33a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d102:	b29b      	uxth	r3, r3
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1b9      	bne.n	800d07c <HAL_SPI_Transmit+0x114>
 800d108:	e0f1      	b.n	800d2ee <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	2b07      	cmp	r3, #7
 800d110:	f240 80e6 	bls.w	800d2e0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d114:	e05d      	b.n	800d1d2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	695b      	ldr	r3, [r3, #20]
 800d11c:	f003 0302 	and.w	r3, r3, #2
 800d120:	2b02      	cmp	r3, #2
 800d122:	d132      	bne.n	800d18a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d918      	bls.n	800d162 <HAL_SPI_Transmit+0x1fa>
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d134:	2b00      	cmp	r3, #0
 800d136:	d014      	beq.n	800d162 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	6812      	ldr	r2, [r2, #0]
 800d142:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d148:	1d1a      	adds	r2, r3, #4
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d154:	b29b      	uxth	r3, r3
 800d156:	3b02      	subs	r3, #2
 800d158:	b29a      	uxth	r2, r3
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d160:	e037      	b.n	800d1d2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d166:	881a      	ldrh	r2, [r3, #0]
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d170:	1c9a      	adds	r2, r3, #2
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	3b01      	subs	r3, #1
 800d180:	b29a      	uxth	r2, r3
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d188:	e023      	b.n	800d1d2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d18a:	f7f6 fddb 	bl	8003d44 <HAL_GetTick>
 800d18e:	4602      	mov	r2, r0
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	683a      	ldr	r2, [r7, #0]
 800d196:	429a      	cmp	r2, r3
 800d198:	d803      	bhi.n	800d1a2 <HAL_SPI_Transmit+0x23a>
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a0:	d102      	bne.n	800d1a8 <HAL_SPI_Transmit+0x240>
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d114      	bne.n	800d1d2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f000 f8cb 	bl	800d344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d1ce:	2303      	movs	r3, #3
 800d1d0:	e0b3      	b.n	800d33a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d19b      	bne.n	800d116 <HAL_SPI_Transmit+0x1ae>
 800d1de:	e086      	b.n	800d2ee <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	695b      	ldr	r3, [r3, #20]
 800d1e6:	f003 0302 	and.w	r3, r3, #2
 800d1ea:	2b02      	cmp	r3, #2
 800d1ec:	d154      	bne.n	800d298 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	2b03      	cmp	r3, #3
 800d1f8:	d918      	bls.n	800d22c <HAL_SPI_Transmit+0x2c4>
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1fe:	2b40      	cmp	r3, #64	@ 0x40
 800d200:	d914      	bls.n	800d22c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	6812      	ldr	r2, [r2, #0]
 800d20c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d212:	1d1a      	adds	r2, r3, #4
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d21e:	b29b      	uxth	r3, r3
 800d220:	3b04      	subs	r3, #4
 800d222:	b29a      	uxth	r2, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d22a:	e059      	b.n	800d2e0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d232:	b29b      	uxth	r3, r3
 800d234:	2b01      	cmp	r3, #1
 800d236:	d917      	bls.n	800d268 <HAL_SPI_Transmit+0x300>
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d013      	beq.n	800d268 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d244:	881a      	ldrh	r2, [r3, #0]
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d24e:	1c9a      	adds	r2, r3, #2
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	3b02      	subs	r3, #2
 800d25e:	b29a      	uxth	r2, r3
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d266:	e03b      	b.n	800d2e0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	3320      	adds	r3, #32
 800d272:	7812      	ldrb	r2, [r2, #0]
 800d274:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d27a:	1c5a      	adds	r2, r3, #1
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d286:	b29b      	uxth	r3, r3
 800d288:	3b01      	subs	r3, #1
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800d292:	e025      	b.n	800d2e0 <HAL_SPI_Transmit+0x378>
 800d294:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d298:	f7f6 fd54 	bl	8003d44 <HAL_GetTick>
 800d29c:	4602      	mov	r2, r0
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	683a      	ldr	r2, [r7, #0]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d803      	bhi.n	800d2b0 <HAL_SPI_Transmit+0x348>
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ae:	d102      	bne.n	800d2b6 <HAL_SPI_Transmit+0x34e>
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d114      	bne.n	800d2e0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f000 f844 	bl	800d344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d2dc:	2303      	movs	r3, #3
 800d2de:	e02c      	b.n	800d33a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f47f af79 	bne.w	800d1e0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	2108      	movs	r1, #8
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f000 f8c3 	bl	800d484 <SPI_WaitOnFlagUntilTimeout>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d007      	beq.n	800d314 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d30a:	f043 0220 	orr.w	r2, r3, #32
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f000 f815 	bl	800d344 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2201      	movs	r2, #1
 800d31e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2200      	movs	r2, #0
 800d326:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d330:	2b00      	cmp	r3, #0
 800d332:	d001      	beq.n	800d338 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800d334:	2301      	movs	r3, #1
 800d336:	e000      	b.n	800d33a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800d338:	2300      	movs	r3, #0
  }
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3718      	adds	r7, #24
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop

0800d344 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	695b      	ldr	r3, [r3, #20]
 800d352:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	699a      	ldr	r2, [r3, #24]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f042 0208 	orr.w	r2, r2, #8
 800d362:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	699a      	ldr	r2, [r3, #24]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f042 0210 	orr.w	r2, r2, #16
 800d372:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f022 0201 	bic.w	r2, r2, #1
 800d382:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	6919      	ldr	r1, [r3, #16]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	4b3c      	ldr	r3, [pc, #240]	@ (800d480 <SPI_CloseTransfer+0x13c>)
 800d390:	400b      	ands	r3, r1
 800d392:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	689a      	ldr	r2, [r3, #8]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d3a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	2b04      	cmp	r3, #4
 800d3ae:	d014      	beq.n	800d3da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f003 0320 	and.w	r3, r3, #32
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00f      	beq.n	800d3da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	699a      	ldr	r2, [r3, #24]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f042 0220 	orr.w	r2, r2, #32
 800d3d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	2b03      	cmp	r3, #3
 800d3e4:	d014      	beq.n	800d410 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00f      	beq.n	800d410 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3f6:	f043 0204 	orr.w	r2, r3, #4
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	699a      	ldr	r2, [r3, #24]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d40e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00f      	beq.n	800d43a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d420:	f043 0201 	orr.w	r2, r3, #1
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	699a      	ldr	r2, [r3, #24]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d438:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00f      	beq.n	800d464 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d44a:	f043 0208 	orr.w	r2, r3, #8
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	699a      	ldr	r2, [r3, #24]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d462:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d474:	bf00      	nop
 800d476:	3714      	adds	r7, #20
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr
 800d480:	fffffc90 	.word	0xfffffc90

0800d484 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	603b      	str	r3, [r7, #0]
 800d490:	4613      	mov	r3, r2
 800d492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d494:	e010      	b.n	800d4b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d496:	f7f6 fc55 	bl	8003d44 <HAL_GetTick>
 800d49a:	4602      	mov	r2, r0
 800d49c:	69bb      	ldr	r3, [r7, #24]
 800d49e:	1ad3      	subs	r3, r2, r3
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d803      	bhi.n	800d4ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ac:	d102      	bne.n	800d4b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d101      	bne.n	800d4b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d4b4:	2303      	movs	r3, #3
 800d4b6:	e00f      	b.n	800d4d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	695a      	ldr	r2, [r3, #20]
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	4013      	ands	r3, r2
 800d4c2:	68ba      	ldr	r2, [r7, #8]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	bf0c      	ite	eq
 800d4c8:	2301      	moveq	r3, #1
 800d4ca:	2300      	movne	r3, #0
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	79fb      	ldrb	r3, [r7, #7]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d0df      	beq.n	800d496 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d4d6:	2300      	movs	r3, #0
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3710      	adds	r7, #16
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4ec:	095b      	lsrs	r3, r3, #5
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	3307      	adds	r3, #7
 800d4fe:	08db      	lsrs	r3, r3, #3
 800d500:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	fb02 f303 	mul.w	r3, r2, r3
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3714      	adds	r7, #20
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr

0800d516 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b082      	sub	sp, #8
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d101      	bne.n	800d528 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d524:	2301      	movs	r3, #1
 800d526:	e049      	b.n	800d5bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	2b00      	cmp	r3, #0
 800d532:	d106      	bne.n	800d542 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7f4 fdf1 	bl	8002124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2202      	movs	r2, #2
 800d546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	3304      	adds	r3, #4
 800d552:	4619      	mov	r1, r3
 800d554:	4610      	mov	r0, r2
 800d556:	f000 fbbf 	bl	800dcd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2201      	movs	r2, #1
 800d55e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2201      	movs	r2, #1
 800d566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2201      	movs	r2, #1
 800d56e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2201      	movs	r2, #1
 800d576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2201      	movs	r2, #1
 800d57e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2201      	movs	r2, #1
 800d586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2201      	movs	r2, #1
 800d58e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2201      	movs	r2, #1
 800d596:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2201      	movs	r2, #1
 800d59e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d101      	bne.n	800d5d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	e049      	b.n	800d66a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d106      	bne.n	800d5f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 f841 	bl	800d672 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2202      	movs	r2, #2
 800d5f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	3304      	adds	r3, #4
 800d600:	4619      	mov	r1, r3
 800d602:	4610      	mov	r0, r2
 800d604:	f000 fb68 	bl	800dcd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2201      	movs	r2, #1
 800d614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2201      	movs	r2, #1
 800d61c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2201      	movs	r2, #1
 800d624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2201      	movs	r2, #1
 800d62c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2201      	movs	r2, #1
 800d63c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2201      	movs	r2, #1
 800d644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2201      	movs	r2, #1
 800d64c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2201      	movs	r2, #1
 800d654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2201      	movs	r2, #1
 800d664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d668:	2300      	movs	r3, #0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d672:	b480      	push	{r7}
 800d674:	b083      	sub	sp, #12
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d67a:	bf00      	nop
 800d67c:	370c      	adds	r7, #12
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr
	...

0800d688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d109      	bne.n	800d6ac <HAL_TIM_PWM_Start+0x24>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	bf14      	ite	ne
 800d6a4:	2301      	movne	r3, #1
 800d6a6:	2300      	moveq	r3, #0
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	e03c      	b.n	800d726 <HAL_TIM_PWM_Start+0x9e>
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	2b04      	cmp	r3, #4
 800d6b0:	d109      	bne.n	800d6c6 <HAL_TIM_PWM_Start+0x3e>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	bf14      	ite	ne
 800d6be:	2301      	movne	r3, #1
 800d6c0:	2300      	moveq	r3, #0
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	e02f      	b.n	800d726 <HAL_TIM_PWM_Start+0x9e>
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	2b08      	cmp	r3, #8
 800d6ca:	d109      	bne.n	800d6e0 <HAL_TIM_PWM_Start+0x58>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	bf14      	ite	ne
 800d6d8:	2301      	movne	r3, #1
 800d6da:	2300      	moveq	r3, #0
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	e022      	b.n	800d726 <HAL_TIM_PWM_Start+0x9e>
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	2b0c      	cmp	r3, #12
 800d6e4:	d109      	bne.n	800d6fa <HAL_TIM_PWM_Start+0x72>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	bf14      	ite	ne
 800d6f2:	2301      	movne	r3, #1
 800d6f4:	2300      	moveq	r3, #0
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	e015      	b.n	800d726 <HAL_TIM_PWM_Start+0x9e>
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	2b10      	cmp	r3, #16
 800d6fe:	d109      	bne.n	800d714 <HAL_TIM_PWM_Start+0x8c>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d706:	b2db      	uxtb	r3, r3
 800d708:	2b01      	cmp	r3, #1
 800d70a:	bf14      	ite	ne
 800d70c:	2301      	movne	r3, #1
 800d70e:	2300      	moveq	r3, #0
 800d710:	b2db      	uxtb	r3, r3
 800d712:	e008      	b.n	800d726 <HAL_TIM_PWM_Start+0x9e>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	bf14      	ite	ne
 800d720:	2301      	movne	r3, #1
 800d722:	2300      	moveq	r3, #0
 800d724:	b2db      	uxtb	r3, r3
 800d726:	2b00      	cmp	r3, #0
 800d728:	d001      	beq.n	800d72e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	e0ab      	b.n	800d886 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d104      	bne.n	800d73e <HAL_TIM_PWM_Start+0xb6>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2202      	movs	r2, #2
 800d738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d73c:	e023      	b.n	800d786 <HAL_TIM_PWM_Start+0xfe>
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b04      	cmp	r3, #4
 800d742:	d104      	bne.n	800d74e <HAL_TIM_PWM_Start+0xc6>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2202      	movs	r2, #2
 800d748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d74c:	e01b      	b.n	800d786 <HAL_TIM_PWM_Start+0xfe>
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	2b08      	cmp	r3, #8
 800d752:	d104      	bne.n	800d75e <HAL_TIM_PWM_Start+0xd6>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2202      	movs	r2, #2
 800d758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d75c:	e013      	b.n	800d786 <HAL_TIM_PWM_Start+0xfe>
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	2b0c      	cmp	r3, #12
 800d762:	d104      	bne.n	800d76e <HAL_TIM_PWM_Start+0xe6>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2202      	movs	r2, #2
 800d768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d76c:	e00b      	b.n	800d786 <HAL_TIM_PWM_Start+0xfe>
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	2b10      	cmp	r3, #16
 800d772:	d104      	bne.n	800d77e <HAL_TIM_PWM_Start+0xf6>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2202      	movs	r2, #2
 800d778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d77c:	e003      	b.n	800d786 <HAL_TIM_PWM_Start+0xfe>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2202      	movs	r2, #2
 800d782:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	2201      	movs	r2, #1
 800d78c:	6839      	ldr	r1, [r7, #0]
 800d78e:	4618      	mov	r0, r3
 800d790:	f000 fec2 	bl	800e518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a3d      	ldr	r2, [pc, #244]	@ (800d890 <HAL_TIM_PWM_Start+0x208>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d013      	beq.n	800d7c6 <HAL_TIM_PWM_Start+0x13e>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a3c      	ldr	r2, [pc, #240]	@ (800d894 <HAL_TIM_PWM_Start+0x20c>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d00e      	beq.n	800d7c6 <HAL_TIM_PWM_Start+0x13e>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a3a      	ldr	r2, [pc, #232]	@ (800d898 <HAL_TIM_PWM_Start+0x210>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d009      	beq.n	800d7c6 <HAL_TIM_PWM_Start+0x13e>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a39      	ldr	r2, [pc, #228]	@ (800d89c <HAL_TIM_PWM_Start+0x214>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d004      	beq.n	800d7c6 <HAL_TIM_PWM_Start+0x13e>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a37      	ldr	r2, [pc, #220]	@ (800d8a0 <HAL_TIM_PWM_Start+0x218>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d101      	bne.n	800d7ca <HAL_TIM_PWM_Start+0x142>
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	e000      	b.n	800d7cc <HAL_TIM_PWM_Start+0x144>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d007      	beq.n	800d7e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d7de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a2a      	ldr	r2, [pc, #168]	@ (800d890 <HAL_TIM_PWM_Start+0x208>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d02c      	beq.n	800d844 <HAL_TIM_PWM_Start+0x1bc>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7f2:	d027      	beq.n	800d844 <HAL_TIM_PWM_Start+0x1bc>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a2a      	ldr	r2, [pc, #168]	@ (800d8a4 <HAL_TIM_PWM_Start+0x21c>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d022      	beq.n	800d844 <HAL_TIM_PWM_Start+0x1bc>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a29      	ldr	r2, [pc, #164]	@ (800d8a8 <HAL_TIM_PWM_Start+0x220>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d01d      	beq.n	800d844 <HAL_TIM_PWM_Start+0x1bc>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a27      	ldr	r2, [pc, #156]	@ (800d8ac <HAL_TIM_PWM_Start+0x224>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d018      	beq.n	800d844 <HAL_TIM_PWM_Start+0x1bc>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a1f      	ldr	r2, [pc, #124]	@ (800d894 <HAL_TIM_PWM_Start+0x20c>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d013      	beq.n	800d844 <HAL_TIM_PWM_Start+0x1bc>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a23      	ldr	r2, [pc, #140]	@ (800d8b0 <HAL_TIM_PWM_Start+0x228>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d00e      	beq.n	800d844 <HAL_TIM_PWM_Start+0x1bc>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a1b      	ldr	r2, [pc, #108]	@ (800d898 <HAL_TIM_PWM_Start+0x210>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d009      	beq.n	800d844 <HAL_TIM_PWM_Start+0x1bc>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a1f      	ldr	r2, [pc, #124]	@ (800d8b4 <HAL_TIM_PWM_Start+0x22c>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d004      	beq.n	800d844 <HAL_TIM_PWM_Start+0x1bc>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4a1e      	ldr	r2, [pc, #120]	@ (800d8b8 <HAL_TIM_PWM_Start+0x230>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d115      	bne.n	800d870 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	689a      	ldr	r2, [r3, #8]
 800d84a:	4b1c      	ldr	r3, [pc, #112]	@ (800d8bc <HAL_TIM_PWM_Start+0x234>)
 800d84c:	4013      	ands	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2b06      	cmp	r3, #6
 800d854:	d015      	beq.n	800d882 <HAL_TIM_PWM_Start+0x1fa>
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d85c:	d011      	beq.n	800d882 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f042 0201 	orr.w	r2, r2, #1
 800d86c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d86e:	e008      	b.n	800d882 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f042 0201 	orr.w	r2, r2, #1
 800d87e:	601a      	str	r2, [r3, #0]
 800d880:	e000      	b.n	800d884 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d882:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d884:	2300      	movs	r3, #0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	40010000 	.word	0x40010000
 800d894:	40010400 	.word	0x40010400
 800d898:	40014000 	.word	0x40014000
 800d89c:	40014400 	.word	0x40014400
 800d8a0:	40014800 	.word	0x40014800
 800d8a4:	40000400 	.word	0x40000400
 800d8a8:	40000800 	.word	0x40000800
 800d8ac:	40000c00 	.word	0x40000c00
 800d8b0:	40001800 	.word	0x40001800
 800d8b4:	4000e000 	.word	0x4000e000
 800d8b8:	4000e400 	.word	0x4000e400
 800d8bc:	00010007 	.word	0x00010007

0800d8c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b086      	sub	sp, #24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d8d6:	2b01      	cmp	r3, #1
 800d8d8:	d101      	bne.n	800d8de <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d8da:	2302      	movs	r3, #2
 800d8dc:	e0ff      	b.n	800dade <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2b14      	cmp	r3, #20
 800d8ea:	f200 80f0 	bhi.w	800dace <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800d8f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f4:	0800d949 	.word	0x0800d949
 800d8f8:	0800dacf 	.word	0x0800dacf
 800d8fc:	0800dacf 	.word	0x0800dacf
 800d900:	0800dacf 	.word	0x0800dacf
 800d904:	0800d989 	.word	0x0800d989
 800d908:	0800dacf 	.word	0x0800dacf
 800d90c:	0800dacf 	.word	0x0800dacf
 800d910:	0800dacf 	.word	0x0800dacf
 800d914:	0800d9cb 	.word	0x0800d9cb
 800d918:	0800dacf 	.word	0x0800dacf
 800d91c:	0800dacf 	.word	0x0800dacf
 800d920:	0800dacf 	.word	0x0800dacf
 800d924:	0800da0b 	.word	0x0800da0b
 800d928:	0800dacf 	.word	0x0800dacf
 800d92c:	0800dacf 	.word	0x0800dacf
 800d930:	0800dacf 	.word	0x0800dacf
 800d934:	0800da4d 	.word	0x0800da4d
 800d938:	0800dacf 	.word	0x0800dacf
 800d93c:	0800dacf 	.word	0x0800dacf
 800d940:	0800dacf 	.word	0x0800dacf
 800d944:	0800da8d 	.word	0x0800da8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	68b9      	ldr	r1, [r7, #8]
 800d94e:	4618      	mov	r0, r3
 800d950:	f000 fa6e 	bl	800de30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	699a      	ldr	r2, [r3, #24]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f042 0208 	orr.w	r2, r2, #8
 800d962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	699a      	ldr	r2, [r3, #24]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f022 0204 	bic.w	r2, r2, #4
 800d972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6999      	ldr	r1, [r3, #24]
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	691a      	ldr	r2, [r3, #16]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	430a      	orrs	r2, r1
 800d984:	619a      	str	r2, [r3, #24]
      break;
 800d986:	e0a5      	b.n	800dad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	68b9      	ldr	r1, [r7, #8]
 800d98e:	4618      	mov	r0, r3
 800d990:	f000 fade 	bl	800df50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	699a      	ldr	r2, [r3, #24]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d9a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	699a      	ldr	r2, [r3, #24]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d9b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	6999      	ldr	r1, [r3, #24]
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	691b      	ldr	r3, [r3, #16]
 800d9be:	021a      	lsls	r2, r3, #8
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	430a      	orrs	r2, r1
 800d9c6:	619a      	str	r2, [r3, #24]
      break;
 800d9c8:	e084      	b.n	800dad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	68b9      	ldr	r1, [r7, #8]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f000 fb47 	bl	800e064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	69da      	ldr	r2, [r3, #28]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f042 0208 	orr.w	r2, r2, #8
 800d9e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	69da      	ldr	r2, [r3, #28]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f022 0204 	bic.w	r2, r2, #4
 800d9f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	69d9      	ldr	r1, [r3, #28]
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	691a      	ldr	r2, [r3, #16]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	430a      	orrs	r2, r1
 800da06:	61da      	str	r2, [r3, #28]
      break;
 800da08:	e064      	b.n	800dad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	68b9      	ldr	r1, [r7, #8]
 800da10:	4618      	mov	r0, r3
 800da12:	f000 fbaf 	bl	800e174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	69da      	ldr	r2, [r3, #28]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800da24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	69da      	ldr	r2, [r3, #28]
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	69d9      	ldr	r1, [r3, #28]
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	691b      	ldr	r3, [r3, #16]
 800da40:	021a      	lsls	r2, r3, #8
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	430a      	orrs	r2, r1
 800da48:	61da      	str	r2, [r3, #28]
      break;
 800da4a:	e043      	b.n	800dad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	68b9      	ldr	r1, [r7, #8]
 800da52:	4618      	mov	r0, r3
 800da54:	f000 fbf8 	bl	800e248 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f042 0208 	orr.w	r2, r2, #8
 800da66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f022 0204 	bic.w	r2, r2, #4
 800da76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	691a      	ldr	r2, [r3, #16]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	430a      	orrs	r2, r1
 800da88:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800da8a:	e023      	b.n	800dad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68b9      	ldr	r1, [r7, #8]
 800da92:	4618      	mov	r0, r3
 800da94:	f000 fc3c 	bl	800e310 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800daa6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dab6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	691b      	ldr	r3, [r3, #16]
 800dac2:	021a      	lsls	r2, r3, #8
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	430a      	orrs	r2, r1
 800daca:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800dacc:	e002      	b.n	800dad4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dace:	2301      	movs	r3, #1
 800dad0:	75fb      	strb	r3, [r7, #23]
      break;
 800dad2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2200      	movs	r2, #0
 800dad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dadc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop

0800dae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d101      	bne.n	800db04 <HAL_TIM_ConfigClockSource+0x1c>
 800db00:	2302      	movs	r3, #2
 800db02:	e0dc      	b.n	800dcbe <HAL_TIM_ConfigClockSource+0x1d6>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2201      	movs	r2, #1
 800db08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2202      	movs	r2, #2
 800db10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800db1c:	68ba      	ldr	r2, [r7, #8]
 800db1e:	4b6a      	ldr	r3, [pc, #424]	@ (800dcc8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800db20:	4013      	ands	r3, r2
 800db22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800db2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	68ba      	ldr	r2, [r7, #8]
 800db32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a64      	ldr	r2, [pc, #400]	@ (800dccc <HAL_TIM_ConfigClockSource+0x1e4>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	f000 80a9 	beq.w	800dc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800db40:	4a62      	ldr	r2, [pc, #392]	@ (800dccc <HAL_TIM_ConfigClockSource+0x1e4>)
 800db42:	4293      	cmp	r3, r2
 800db44:	f200 80ae 	bhi.w	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800db48:	4a61      	ldr	r2, [pc, #388]	@ (800dcd0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	f000 80a1 	beq.w	800dc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800db50:	4a5f      	ldr	r2, [pc, #380]	@ (800dcd0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800db52:	4293      	cmp	r3, r2
 800db54:	f200 80a6 	bhi.w	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800db58:	4a5e      	ldr	r2, [pc, #376]	@ (800dcd4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	f000 8099 	beq.w	800dc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800db60:	4a5c      	ldr	r2, [pc, #368]	@ (800dcd4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db62:	4293      	cmp	r3, r2
 800db64:	f200 809e 	bhi.w	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800db68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800db6c:	f000 8091 	beq.w	800dc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800db70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800db74:	f200 8096 	bhi.w	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800db78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db7c:	f000 8089 	beq.w	800dc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800db80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800db84:	f200 808e 	bhi.w	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800db88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db8c:	d03e      	beq.n	800dc0c <HAL_TIM_ConfigClockSource+0x124>
 800db8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db92:	f200 8087 	bhi.w	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800db96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db9a:	f000 8086 	beq.w	800dcaa <HAL_TIM_ConfigClockSource+0x1c2>
 800db9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dba2:	d87f      	bhi.n	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dba4:	2b70      	cmp	r3, #112	@ 0x70
 800dba6:	d01a      	beq.n	800dbde <HAL_TIM_ConfigClockSource+0xf6>
 800dba8:	2b70      	cmp	r3, #112	@ 0x70
 800dbaa:	d87b      	bhi.n	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbac:	2b60      	cmp	r3, #96	@ 0x60
 800dbae:	d050      	beq.n	800dc52 <HAL_TIM_ConfigClockSource+0x16a>
 800dbb0:	2b60      	cmp	r3, #96	@ 0x60
 800dbb2:	d877      	bhi.n	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbb4:	2b50      	cmp	r3, #80	@ 0x50
 800dbb6:	d03c      	beq.n	800dc32 <HAL_TIM_ConfigClockSource+0x14a>
 800dbb8:	2b50      	cmp	r3, #80	@ 0x50
 800dbba:	d873      	bhi.n	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbbc:	2b40      	cmp	r3, #64	@ 0x40
 800dbbe:	d058      	beq.n	800dc72 <HAL_TIM_ConfigClockSource+0x18a>
 800dbc0:	2b40      	cmp	r3, #64	@ 0x40
 800dbc2:	d86f      	bhi.n	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbc4:	2b30      	cmp	r3, #48	@ 0x30
 800dbc6:	d064      	beq.n	800dc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbc8:	2b30      	cmp	r3, #48	@ 0x30
 800dbca:	d86b      	bhi.n	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbcc:	2b20      	cmp	r3, #32
 800dbce:	d060      	beq.n	800dc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbd0:	2b20      	cmp	r3, #32
 800dbd2:	d867      	bhi.n	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d05c      	beq.n	800dc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbd8:	2b10      	cmp	r3, #16
 800dbda:	d05a      	beq.n	800dc92 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbdc:	e062      	b.n	800dca4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dbee:	f000 fc73 	bl	800e4d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800dc00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	609a      	str	r2, [r3, #8]
      break;
 800dc0a:	e04f      	b.n	800dcac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dc1c:	f000 fc5c 	bl	800e4d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	689a      	ldr	r2, [r3, #8]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dc2e:	609a      	str	r2, [r3, #8]
      break;
 800dc30:	e03c      	b.n	800dcac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc3e:	461a      	mov	r2, r3
 800dc40:	f000 fbcc 	bl	800e3dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2150      	movs	r1, #80	@ 0x50
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f000 fc26 	bl	800e49c <TIM_ITRx_SetConfig>
      break;
 800dc50:	e02c      	b.n	800dcac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc5e:	461a      	mov	r2, r3
 800dc60:	f000 fbeb 	bl	800e43a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2160      	movs	r1, #96	@ 0x60
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f000 fc16 	bl	800e49c <TIM_ITRx_SetConfig>
      break;
 800dc70:	e01c      	b.n	800dcac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc7e:	461a      	mov	r2, r3
 800dc80:	f000 fbac 	bl	800e3dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2140      	movs	r1, #64	@ 0x40
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f000 fc06 	bl	800e49c <TIM_ITRx_SetConfig>
      break;
 800dc90:	e00c      	b.n	800dcac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	4610      	mov	r0, r2
 800dc9e:	f000 fbfd 	bl	800e49c <TIM_ITRx_SetConfig>
      break;
 800dca2:	e003      	b.n	800dcac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dca4:	2301      	movs	r3, #1
 800dca6:	73fb      	strb	r3, [r7, #15]
      break;
 800dca8:	e000      	b.n	800dcac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dcaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	ffceff88 	.word	0xffceff88
 800dccc:	00100040 	.word	0x00100040
 800dcd0:	00100030 	.word	0x00100030
 800dcd4:	00100020 	.word	0x00100020

0800dcd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b085      	sub	sp, #20
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4a47      	ldr	r2, [pc, #284]	@ (800de08 <TIM_Base_SetConfig+0x130>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d013      	beq.n	800dd18 <TIM_Base_SetConfig+0x40>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcf6:	d00f      	beq.n	800dd18 <TIM_Base_SetConfig+0x40>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	4a44      	ldr	r2, [pc, #272]	@ (800de0c <TIM_Base_SetConfig+0x134>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d00b      	beq.n	800dd18 <TIM_Base_SetConfig+0x40>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	4a43      	ldr	r2, [pc, #268]	@ (800de10 <TIM_Base_SetConfig+0x138>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d007      	beq.n	800dd18 <TIM_Base_SetConfig+0x40>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	4a42      	ldr	r2, [pc, #264]	@ (800de14 <TIM_Base_SetConfig+0x13c>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d003      	beq.n	800dd18 <TIM_Base_SetConfig+0x40>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4a41      	ldr	r2, [pc, #260]	@ (800de18 <TIM_Base_SetConfig+0x140>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d108      	bne.n	800dd2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	4313      	orrs	r3, r2
 800dd28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4a36      	ldr	r2, [pc, #216]	@ (800de08 <TIM_Base_SetConfig+0x130>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d027      	beq.n	800dd82 <TIM_Base_SetConfig+0xaa>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd38:	d023      	beq.n	800dd82 <TIM_Base_SetConfig+0xaa>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4a33      	ldr	r2, [pc, #204]	@ (800de0c <TIM_Base_SetConfig+0x134>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d01f      	beq.n	800dd82 <TIM_Base_SetConfig+0xaa>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	4a32      	ldr	r2, [pc, #200]	@ (800de10 <TIM_Base_SetConfig+0x138>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d01b      	beq.n	800dd82 <TIM_Base_SetConfig+0xaa>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	4a31      	ldr	r2, [pc, #196]	@ (800de14 <TIM_Base_SetConfig+0x13c>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d017      	beq.n	800dd82 <TIM_Base_SetConfig+0xaa>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4a30      	ldr	r2, [pc, #192]	@ (800de18 <TIM_Base_SetConfig+0x140>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d013      	beq.n	800dd82 <TIM_Base_SetConfig+0xaa>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	4a2f      	ldr	r2, [pc, #188]	@ (800de1c <TIM_Base_SetConfig+0x144>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d00f      	beq.n	800dd82 <TIM_Base_SetConfig+0xaa>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4a2e      	ldr	r2, [pc, #184]	@ (800de20 <TIM_Base_SetConfig+0x148>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d00b      	beq.n	800dd82 <TIM_Base_SetConfig+0xaa>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	4a2d      	ldr	r2, [pc, #180]	@ (800de24 <TIM_Base_SetConfig+0x14c>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d007      	beq.n	800dd82 <TIM_Base_SetConfig+0xaa>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	4a2c      	ldr	r2, [pc, #176]	@ (800de28 <TIM_Base_SetConfig+0x150>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d003      	beq.n	800dd82 <TIM_Base_SetConfig+0xaa>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4a2b      	ldr	r2, [pc, #172]	@ (800de2c <TIM_Base_SetConfig+0x154>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d108      	bne.n	800dd94 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	68db      	ldr	r3, [r3, #12]
 800dd8e:	68fa      	ldr	r2, [r7, #12]
 800dd90:	4313      	orrs	r3, r2
 800dd92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	695b      	ldr	r3, [r3, #20]
 800dd9e:	4313      	orrs	r3, r2
 800dda0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	689a      	ldr	r2, [r3, #8]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	681a      	ldr	r2, [r3, #0]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	4a14      	ldr	r2, [pc, #80]	@ (800de08 <TIM_Base_SetConfig+0x130>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d00f      	beq.n	800ddda <TIM_Base_SetConfig+0x102>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	4a16      	ldr	r2, [pc, #88]	@ (800de18 <TIM_Base_SetConfig+0x140>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d00b      	beq.n	800ddda <TIM_Base_SetConfig+0x102>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	4a15      	ldr	r2, [pc, #84]	@ (800de1c <TIM_Base_SetConfig+0x144>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d007      	beq.n	800ddda <TIM_Base_SetConfig+0x102>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a14      	ldr	r2, [pc, #80]	@ (800de20 <TIM_Base_SetConfig+0x148>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d003      	beq.n	800ddda <TIM_Base_SetConfig+0x102>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	4a13      	ldr	r2, [pc, #76]	@ (800de24 <TIM_Base_SetConfig+0x14c>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d103      	bne.n	800dde2 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	691a      	ldr	r2, [r3, #16]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f043 0204 	orr.w	r2, r3, #4
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	601a      	str	r2, [r3, #0]
}
 800ddfa:	bf00      	nop
 800ddfc:	3714      	adds	r7, #20
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop
 800de08:	40010000 	.word	0x40010000
 800de0c:	40000400 	.word	0x40000400
 800de10:	40000800 	.word	0x40000800
 800de14:	40000c00 	.word	0x40000c00
 800de18:	40010400 	.word	0x40010400
 800de1c:	40014000 	.word	0x40014000
 800de20:	40014400 	.word	0x40014400
 800de24:	40014800 	.word	0x40014800
 800de28:	4000e000 	.word	0x4000e000
 800de2c:	4000e400 	.word	0x4000e400

0800de30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de30:	b480      	push	{r7}
 800de32:	b087      	sub	sp, #28
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6a1b      	ldr	r3, [r3, #32]
 800de3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6a1b      	ldr	r3, [r3, #32]
 800de44:	f023 0201 	bic.w	r2, r3, #1
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	699b      	ldr	r3, [r3, #24]
 800de56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800de58:	68fa      	ldr	r2, [r7, #12]
 800de5a:	4b37      	ldr	r3, [pc, #220]	@ (800df38 <TIM_OC1_SetConfig+0x108>)
 800de5c:	4013      	ands	r3, r2
 800de5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f023 0303 	bic.w	r3, r3, #3
 800de66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	4313      	orrs	r3, r2
 800de70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	f023 0302 	bic.w	r3, r3, #2
 800de78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	697a      	ldr	r2, [r7, #20]
 800de80:	4313      	orrs	r3, r2
 800de82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4a2d      	ldr	r2, [pc, #180]	@ (800df3c <TIM_OC1_SetConfig+0x10c>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d00f      	beq.n	800deac <TIM_OC1_SetConfig+0x7c>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	4a2c      	ldr	r2, [pc, #176]	@ (800df40 <TIM_OC1_SetConfig+0x110>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d00b      	beq.n	800deac <TIM_OC1_SetConfig+0x7c>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	4a2b      	ldr	r2, [pc, #172]	@ (800df44 <TIM_OC1_SetConfig+0x114>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d007      	beq.n	800deac <TIM_OC1_SetConfig+0x7c>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	4a2a      	ldr	r2, [pc, #168]	@ (800df48 <TIM_OC1_SetConfig+0x118>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d003      	beq.n	800deac <TIM_OC1_SetConfig+0x7c>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4a29      	ldr	r2, [pc, #164]	@ (800df4c <TIM_OC1_SetConfig+0x11c>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d10c      	bne.n	800dec6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	f023 0308 	bic.w	r3, r3, #8
 800deb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	697a      	ldr	r2, [r7, #20]
 800deba:	4313      	orrs	r3, r2
 800debc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	f023 0304 	bic.w	r3, r3, #4
 800dec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	4a1c      	ldr	r2, [pc, #112]	@ (800df3c <TIM_OC1_SetConfig+0x10c>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d00f      	beq.n	800deee <TIM_OC1_SetConfig+0xbe>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	4a1b      	ldr	r2, [pc, #108]	@ (800df40 <TIM_OC1_SetConfig+0x110>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d00b      	beq.n	800deee <TIM_OC1_SetConfig+0xbe>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	4a1a      	ldr	r2, [pc, #104]	@ (800df44 <TIM_OC1_SetConfig+0x114>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d007      	beq.n	800deee <TIM_OC1_SetConfig+0xbe>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4a19      	ldr	r2, [pc, #100]	@ (800df48 <TIM_OC1_SetConfig+0x118>)
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d003      	beq.n	800deee <TIM_OC1_SetConfig+0xbe>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	4a18      	ldr	r2, [pc, #96]	@ (800df4c <TIM_OC1_SetConfig+0x11c>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d111      	bne.n	800df12 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800def4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800defc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	695b      	ldr	r3, [r3, #20]
 800df02:	693a      	ldr	r2, [r7, #16]
 800df04:	4313      	orrs	r3, r2
 800df06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	699b      	ldr	r3, [r3, #24]
 800df0c:	693a      	ldr	r2, [r7, #16]
 800df0e:	4313      	orrs	r3, r2
 800df10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	693a      	ldr	r2, [r7, #16]
 800df16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	68fa      	ldr	r2, [r7, #12]
 800df1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	685a      	ldr	r2, [r3, #4]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	697a      	ldr	r2, [r7, #20]
 800df2a:	621a      	str	r2, [r3, #32]
}
 800df2c:	bf00      	nop
 800df2e:	371c      	adds	r7, #28
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr
 800df38:	fffeff8f 	.word	0xfffeff8f
 800df3c:	40010000 	.word	0x40010000
 800df40:	40010400 	.word	0x40010400
 800df44:	40014000 	.word	0x40014000
 800df48:	40014400 	.word	0x40014400
 800df4c:	40014800 	.word	0x40014800

0800df50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800df50:	b480      	push	{r7}
 800df52:	b087      	sub	sp, #28
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6a1b      	ldr	r3, [r3, #32]
 800df5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6a1b      	ldr	r3, [r3, #32]
 800df64:	f023 0210 	bic.w	r2, r3, #16
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	699b      	ldr	r3, [r3, #24]
 800df76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df78:	68fa      	ldr	r2, [r7, #12]
 800df7a:	4b34      	ldr	r3, [pc, #208]	@ (800e04c <TIM_OC2_SetConfig+0xfc>)
 800df7c:	4013      	ands	r3, r2
 800df7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	021b      	lsls	r3, r3, #8
 800df8e:	68fa      	ldr	r2, [r7, #12]
 800df90:	4313      	orrs	r3, r2
 800df92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	f023 0320 	bic.w	r3, r3, #32
 800df9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	689b      	ldr	r3, [r3, #8]
 800dfa0:	011b      	lsls	r3, r3, #4
 800dfa2:	697a      	ldr	r2, [r7, #20]
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	4a29      	ldr	r2, [pc, #164]	@ (800e050 <TIM_OC2_SetConfig+0x100>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d003      	beq.n	800dfb8 <TIM_OC2_SetConfig+0x68>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4a28      	ldr	r2, [pc, #160]	@ (800e054 <TIM_OC2_SetConfig+0x104>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d10d      	bne.n	800dfd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dfbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	011b      	lsls	r3, r3, #4
 800dfc6:	697a      	ldr	r2, [r7, #20]
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	4a1e      	ldr	r2, [pc, #120]	@ (800e050 <TIM_OC2_SetConfig+0x100>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d00f      	beq.n	800dffc <TIM_OC2_SetConfig+0xac>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	4a1d      	ldr	r2, [pc, #116]	@ (800e054 <TIM_OC2_SetConfig+0x104>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d00b      	beq.n	800dffc <TIM_OC2_SetConfig+0xac>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	4a1c      	ldr	r2, [pc, #112]	@ (800e058 <TIM_OC2_SetConfig+0x108>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d007      	beq.n	800dffc <TIM_OC2_SetConfig+0xac>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	4a1b      	ldr	r2, [pc, #108]	@ (800e05c <TIM_OC2_SetConfig+0x10c>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d003      	beq.n	800dffc <TIM_OC2_SetConfig+0xac>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a1a      	ldr	r2, [pc, #104]	@ (800e060 <TIM_OC2_SetConfig+0x110>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d113      	bne.n	800e024 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e00a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	695b      	ldr	r3, [r3, #20]
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	4313      	orrs	r3, r2
 800e016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	699b      	ldr	r3, [r3, #24]
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	693a      	ldr	r2, [r7, #16]
 800e020:	4313      	orrs	r3, r2
 800e022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	693a      	ldr	r2, [r7, #16]
 800e028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	68fa      	ldr	r2, [r7, #12]
 800e02e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	685a      	ldr	r2, [r3, #4]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	697a      	ldr	r2, [r7, #20]
 800e03c:	621a      	str	r2, [r3, #32]
}
 800e03e:	bf00      	nop
 800e040:	371c      	adds	r7, #28
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	feff8fff 	.word	0xfeff8fff
 800e050:	40010000 	.word	0x40010000
 800e054:	40010400 	.word	0x40010400
 800e058:	40014000 	.word	0x40014000
 800e05c:	40014400 	.word	0x40014400
 800e060:	40014800 	.word	0x40014800

0800e064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e064:	b480      	push	{r7}
 800e066:	b087      	sub	sp, #28
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a1b      	ldr	r3, [r3, #32]
 800e072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a1b      	ldr	r3, [r3, #32]
 800e078:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	69db      	ldr	r3, [r3, #28]
 800e08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	4b33      	ldr	r3, [pc, #204]	@ (800e15c <TIM_OC3_SetConfig+0xf8>)
 800e090:	4013      	ands	r3, r2
 800e092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f023 0303 	bic.w	r3, r3, #3
 800e09a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e0ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	689b      	ldr	r3, [r3, #8]
 800e0b2:	021b      	lsls	r3, r3, #8
 800e0b4:	697a      	ldr	r2, [r7, #20]
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	4a28      	ldr	r2, [pc, #160]	@ (800e160 <TIM_OC3_SetConfig+0xfc>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d003      	beq.n	800e0ca <TIM_OC3_SetConfig+0x66>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	4a27      	ldr	r2, [pc, #156]	@ (800e164 <TIM_OC3_SetConfig+0x100>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d10d      	bne.n	800e0e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e0d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	021b      	lsls	r3, r3, #8
 800e0d8:	697a      	ldr	r2, [r7, #20]
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e0e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	4a1d      	ldr	r2, [pc, #116]	@ (800e160 <TIM_OC3_SetConfig+0xfc>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d00f      	beq.n	800e10e <TIM_OC3_SetConfig+0xaa>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4a1c      	ldr	r2, [pc, #112]	@ (800e164 <TIM_OC3_SetConfig+0x100>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d00b      	beq.n	800e10e <TIM_OC3_SetConfig+0xaa>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	4a1b      	ldr	r2, [pc, #108]	@ (800e168 <TIM_OC3_SetConfig+0x104>)
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d007      	beq.n	800e10e <TIM_OC3_SetConfig+0xaa>
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	4a1a      	ldr	r2, [pc, #104]	@ (800e16c <TIM_OC3_SetConfig+0x108>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d003      	beq.n	800e10e <TIM_OC3_SetConfig+0xaa>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	4a19      	ldr	r2, [pc, #100]	@ (800e170 <TIM_OC3_SetConfig+0x10c>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d113      	bne.n	800e136 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e11c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	695b      	ldr	r3, [r3, #20]
 800e122:	011b      	lsls	r3, r3, #4
 800e124:	693a      	ldr	r2, [r7, #16]
 800e126:	4313      	orrs	r3, r2
 800e128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	699b      	ldr	r3, [r3, #24]
 800e12e:	011b      	lsls	r3, r3, #4
 800e130:	693a      	ldr	r2, [r7, #16]
 800e132:	4313      	orrs	r3, r2
 800e134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	693a      	ldr	r2, [r7, #16]
 800e13a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	685a      	ldr	r2, [r3, #4]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	697a      	ldr	r2, [r7, #20]
 800e14e:	621a      	str	r2, [r3, #32]
}
 800e150:	bf00      	nop
 800e152:	371c      	adds	r7, #28
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr
 800e15c:	fffeff8f 	.word	0xfffeff8f
 800e160:	40010000 	.word	0x40010000
 800e164:	40010400 	.word	0x40010400
 800e168:	40014000 	.word	0x40014000
 800e16c:	40014400 	.word	0x40014400
 800e170:	40014800 	.word	0x40014800

0800e174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e174:	b480      	push	{r7}
 800e176:	b087      	sub	sp, #28
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6a1b      	ldr	r3, [r3, #32]
 800e182:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6a1b      	ldr	r3, [r3, #32]
 800e188:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	69db      	ldr	r3, [r3, #28]
 800e19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	4b24      	ldr	r3, [pc, #144]	@ (800e230 <TIM_OC4_SetConfig+0xbc>)
 800e1a0:	4013      	ands	r3, r2
 800e1a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e1aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	021b      	lsls	r3, r3, #8
 800e1b2:	68fa      	ldr	r2, [r7, #12]
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e1be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	031b      	lsls	r3, r3, #12
 800e1c6:	693a      	ldr	r2, [r7, #16]
 800e1c8:	4313      	orrs	r3, r2
 800e1ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	4a19      	ldr	r2, [pc, #100]	@ (800e234 <TIM_OC4_SetConfig+0xc0>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d00f      	beq.n	800e1f4 <TIM_OC4_SetConfig+0x80>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	4a18      	ldr	r2, [pc, #96]	@ (800e238 <TIM_OC4_SetConfig+0xc4>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d00b      	beq.n	800e1f4 <TIM_OC4_SetConfig+0x80>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	4a17      	ldr	r2, [pc, #92]	@ (800e23c <TIM_OC4_SetConfig+0xc8>)
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d007      	beq.n	800e1f4 <TIM_OC4_SetConfig+0x80>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	4a16      	ldr	r2, [pc, #88]	@ (800e240 <TIM_OC4_SetConfig+0xcc>)
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d003      	beq.n	800e1f4 <TIM_OC4_SetConfig+0x80>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	4a15      	ldr	r2, [pc, #84]	@ (800e244 <TIM_OC4_SetConfig+0xd0>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d109      	bne.n	800e208 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e1fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	695b      	ldr	r3, [r3, #20]
 800e200:	019b      	lsls	r3, r3, #6
 800e202:	697a      	ldr	r2, [r7, #20]
 800e204:	4313      	orrs	r3, r2
 800e206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	697a      	ldr	r2, [r7, #20]
 800e20c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	68fa      	ldr	r2, [r7, #12]
 800e212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	685a      	ldr	r2, [r3, #4]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	693a      	ldr	r2, [r7, #16]
 800e220:	621a      	str	r2, [r3, #32]
}
 800e222:	bf00      	nop
 800e224:	371c      	adds	r7, #28
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
 800e230:	feff8fff 	.word	0xfeff8fff
 800e234:	40010000 	.word	0x40010000
 800e238:	40010400 	.word	0x40010400
 800e23c:	40014000 	.word	0x40014000
 800e240:	40014400 	.word	0x40014400
 800e244:	40014800 	.word	0x40014800

0800e248 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e248:	b480      	push	{r7}
 800e24a:	b087      	sub	sp, #28
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6a1b      	ldr	r3, [r3, #32]
 800e256:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6a1b      	ldr	r3, [r3, #32]
 800e25c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	4b21      	ldr	r3, [pc, #132]	@ (800e2f8 <TIM_OC5_SetConfig+0xb0>)
 800e274:	4013      	ands	r3, r2
 800e276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	68fa      	ldr	r2, [r7, #12]
 800e27e:	4313      	orrs	r3, r2
 800e280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e288:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	041b      	lsls	r3, r3, #16
 800e290:	693a      	ldr	r2, [r7, #16]
 800e292:	4313      	orrs	r3, r2
 800e294:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	4a18      	ldr	r2, [pc, #96]	@ (800e2fc <TIM_OC5_SetConfig+0xb4>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d00f      	beq.n	800e2be <TIM_OC5_SetConfig+0x76>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4a17      	ldr	r2, [pc, #92]	@ (800e300 <TIM_OC5_SetConfig+0xb8>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d00b      	beq.n	800e2be <TIM_OC5_SetConfig+0x76>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	4a16      	ldr	r2, [pc, #88]	@ (800e304 <TIM_OC5_SetConfig+0xbc>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d007      	beq.n	800e2be <TIM_OC5_SetConfig+0x76>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	4a15      	ldr	r2, [pc, #84]	@ (800e308 <TIM_OC5_SetConfig+0xc0>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d003      	beq.n	800e2be <TIM_OC5_SetConfig+0x76>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4a14      	ldr	r2, [pc, #80]	@ (800e30c <TIM_OC5_SetConfig+0xc4>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d109      	bne.n	800e2d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e2c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	695b      	ldr	r3, [r3, #20]
 800e2ca:	021b      	lsls	r3, r3, #8
 800e2cc:	697a      	ldr	r2, [r7, #20]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	697a      	ldr	r2, [r7, #20]
 800e2d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	685a      	ldr	r2, [r3, #4]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	693a      	ldr	r2, [r7, #16]
 800e2ea:	621a      	str	r2, [r3, #32]
}
 800e2ec:	bf00      	nop
 800e2ee:	371c      	adds	r7, #28
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr
 800e2f8:	fffeff8f 	.word	0xfffeff8f
 800e2fc:	40010000 	.word	0x40010000
 800e300:	40010400 	.word	0x40010400
 800e304:	40014000 	.word	0x40014000
 800e308:	40014400 	.word	0x40014400
 800e30c:	40014800 	.word	0x40014800

0800e310 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e310:	b480      	push	{r7}
 800e312:	b087      	sub	sp, #28
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6a1b      	ldr	r3, [r3, #32]
 800e31e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6a1b      	ldr	r3, [r3, #32]
 800e324:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	4b22      	ldr	r3, [pc, #136]	@ (800e3c4 <TIM_OC6_SetConfig+0xb4>)
 800e33c:	4013      	ands	r3, r2
 800e33e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	021b      	lsls	r3, r3, #8
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	4313      	orrs	r3, r2
 800e34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	051b      	lsls	r3, r3, #20
 800e35a:	693a      	ldr	r2, [r7, #16]
 800e35c:	4313      	orrs	r3, r2
 800e35e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4a19      	ldr	r2, [pc, #100]	@ (800e3c8 <TIM_OC6_SetConfig+0xb8>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d00f      	beq.n	800e388 <TIM_OC6_SetConfig+0x78>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	4a18      	ldr	r2, [pc, #96]	@ (800e3cc <TIM_OC6_SetConfig+0xbc>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d00b      	beq.n	800e388 <TIM_OC6_SetConfig+0x78>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	4a17      	ldr	r2, [pc, #92]	@ (800e3d0 <TIM_OC6_SetConfig+0xc0>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d007      	beq.n	800e388 <TIM_OC6_SetConfig+0x78>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	4a16      	ldr	r2, [pc, #88]	@ (800e3d4 <TIM_OC6_SetConfig+0xc4>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d003      	beq.n	800e388 <TIM_OC6_SetConfig+0x78>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	4a15      	ldr	r2, [pc, #84]	@ (800e3d8 <TIM_OC6_SetConfig+0xc8>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d109      	bne.n	800e39c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e38e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	695b      	ldr	r3, [r3, #20]
 800e394:	029b      	lsls	r3, r3, #10
 800e396:	697a      	ldr	r2, [r7, #20]
 800e398:	4313      	orrs	r3, r2
 800e39a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	697a      	ldr	r2, [r7, #20]
 800e3a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	68fa      	ldr	r2, [r7, #12]
 800e3a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	685a      	ldr	r2, [r3, #4]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	693a      	ldr	r2, [r7, #16]
 800e3b4:	621a      	str	r2, [r3, #32]
}
 800e3b6:	bf00      	nop
 800e3b8:	371c      	adds	r7, #28
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	feff8fff 	.word	0xfeff8fff
 800e3c8:	40010000 	.word	0x40010000
 800e3cc:	40010400 	.word	0x40010400
 800e3d0:	40014000 	.word	0x40014000
 800e3d4:	40014400 	.word	0x40014400
 800e3d8:	40014800 	.word	0x40014800

0800e3dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b087      	sub	sp, #28
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6a1b      	ldr	r3, [r3, #32]
 800e3ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6a1b      	ldr	r3, [r3, #32]
 800e3f2:	f023 0201 	bic.w	r2, r3, #1
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	699b      	ldr	r3, [r3, #24]
 800e3fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	011b      	lsls	r3, r3, #4
 800e40c:	693a      	ldr	r2, [r7, #16]
 800e40e:	4313      	orrs	r3, r2
 800e410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	f023 030a 	bic.w	r3, r3, #10
 800e418:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e41a:	697a      	ldr	r2, [r7, #20]
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	4313      	orrs	r3, r2
 800e420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	693a      	ldr	r2, [r7, #16]
 800e426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	697a      	ldr	r2, [r7, #20]
 800e42c:	621a      	str	r2, [r3, #32]
}
 800e42e:	bf00      	nop
 800e430:	371c      	adds	r7, #28
 800e432:	46bd      	mov	sp, r7
 800e434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e438:	4770      	bx	lr

0800e43a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e43a:	b480      	push	{r7}
 800e43c:	b087      	sub	sp, #28
 800e43e:	af00      	add	r7, sp, #0
 800e440:	60f8      	str	r0, [r7, #12]
 800e442:	60b9      	str	r1, [r7, #8]
 800e444:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	6a1b      	ldr	r3, [r3, #32]
 800e44a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	6a1b      	ldr	r3, [r3, #32]
 800e450:	f023 0210 	bic.w	r2, r3, #16
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	699b      	ldr	r3, [r3, #24]
 800e45c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e464:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	031b      	lsls	r3, r3, #12
 800e46a:	693a      	ldr	r2, [r7, #16]
 800e46c:	4313      	orrs	r3, r2
 800e46e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e476:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	011b      	lsls	r3, r3, #4
 800e47c:	697a      	ldr	r2, [r7, #20]
 800e47e:	4313      	orrs	r3, r2
 800e480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	693a      	ldr	r2, [r7, #16]
 800e486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	697a      	ldr	r2, [r7, #20]
 800e48c:	621a      	str	r2, [r3, #32]
}
 800e48e:	bf00      	nop
 800e490:	371c      	adds	r7, #28
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr
	...

0800e49c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b085      	sub	sp, #20
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	689b      	ldr	r3, [r3, #8]
 800e4aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e4ac:	68fa      	ldr	r2, [r7, #12]
 800e4ae:	4b09      	ldr	r3, [pc, #36]	@ (800e4d4 <TIM_ITRx_SetConfig+0x38>)
 800e4b0:	4013      	ands	r3, r2
 800e4b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e4b4:	683a      	ldr	r2, [r7, #0]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	f043 0307 	orr.w	r3, r3, #7
 800e4be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	609a      	str	r2, [r3, #8]
}
 800e4c6:	bf00      	nop
 800e4c8:	3714      	adds	r7, #20
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	ffcfff8f 	.word	0xffcfff8f

0800e4d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b087      	sub	sp, #28
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	607a      	str	r2, [r7, #4]
 800e4e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	689b      	ldr	r3, [r3, #8]
 800e4ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e4f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	021a      	lsls	r2, r3, #8
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	431a      	orrs	r2, r3
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	4313      	orrs	r3, r2
 800e500:	697a      	ldr	r2, [r7, #20]
 800e502:	4313      	orrs	r3, r2
 800e504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	697a      	ldr	r2, [r7, #20]
 800e50a:	609a      	str	r2, [r3, #8]
}
 800e50c:	bf00      	nop
 800e50e:	371c      	adds	r7, #28
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e518:	b480      	push	{r7}
 800e51a:	b087      	sub	sp, #28
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	f003 031f 	and.w	r3, r3, #31
 800e52a:	2201      	movs	r2, #1
 800e52c:	fa02 f303 	lsl.w	r3, r2, r3
 800e530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6a1a      	ldr	r2, [r3, #32]
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	43db      	mvns	r3, r3
 800e53a:	401a      	ands	r2, r3
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6a1a      	ldr	r2, [r3, #32]
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	f003 031f 	and.w	r3, r3, #31
 800e54a:	6879      	ldr	r1, [r7, #4]
 800e54c:	fa01 f303 	lsl.w	r3, r1, r3
 800e550:	431a      	orrs	r2, r3
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	621a      	str	r2, [r3, #32]
}
 800e556:	bf00      	nop
 800e558:	371c      	adds	r7, #28
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr
	...

0800e564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e574:	2b01      	cmp	r3, #1
 800e576:	d101      	bne.n	800e57c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e578:	2302      	movs	r3, #2
 800e57a:	e077      	b.n	800e66c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2202      	movs	r2, #2
 800e588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	689b      	ldr	r3, [r3, #8]
 800e59a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a35      	ldr	r2, [pc, #212]	@ (800e678 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d004      	beq.n	800e5b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4a34      	ldr	r2, [pc, #208]	@ (800e67c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d108      	bne.n	800e5c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e5b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	68fa      	ldr	r2, [r7, #12]
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	68fa      	ldr	r2, [r7, #12]
 800e5d0:	4313      	orrs	r3, r2
 800e5d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a25      	ldr	r2, [pc, #148]	@ (800e678 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d02c      	beq.n	800e640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5ee:	d027      	beq.n	800e640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a22      	ldr	r2, [pc, #136]	@ (800e680 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d022      	beq.n	800e640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a21      	ldr	r2, [pc, #132]	@ (800e684 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d01d      	beq.n	800e640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a1f      	ldr	r2, [pc, #124]	@ (800e688 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d018      	beq.n	800e640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4a1a      	ldr	r2, [pc, #104]	@ (800e67c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d013      	beq.n	800e640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a1b      	ldr	r2, [pc, #108]	@ (800e68c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d00e      	beq.n	800e640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4a1a      	ldr	r2, [pc, #104]	@ (800e690 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d009      	beq.n	800e640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a18      	ldr	r2, [pc, #96]	@ (800e694 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d004      	beq.n	800e640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4a17      	ldr	r2, [pc, #92]	@ (800e698 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d10c      	bne.n	800e65a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e646:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	689b      	ldr	r3, [r3, #8]
 800e64c:	68ba      	ldr	r2, [r7, #8]
 800e64e:	4313      	orrs	r3, r2
 800e650:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	68ba      	ldr	r2, [r7, #8]
 800e658:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2201      	movs	r2, #1
 800e65e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2200      	movs	r2, #0
 800e666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e66a:	2300      	movs	r3, #0
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3714      	adds	r7, #20
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr
 800e678:	40010000 	.word	0x40010000
 800e67c:	40010400 	.word	0x40010400
 800e680:	40000400 	.word	0x40000400
 800e684:	40000800 	.word	0x40000800
 800e688:	40000c00 	.word	0x40000c00
 800e68c:	40001800 	.word	0x40001800
 800e690:	40014000 	.word	0x40014000
 800e694:	4000e000 	.word	0x4000e000
 800e698:	4000e400 	.word	0x4000e400

0800e69c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d101      	bne.n	800e6ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e042      	b.n	800e734 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d106      	bne.n	800e6c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f7f3 fb7f 	bl	8001dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2224      	movs	r2, #36	@ 0x24
 800e6ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f022 0201 	bic.w	r2, r2, #1
 800e6dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d002      	beq.n	800e6ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 ff22 	bl	800f530 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 f8b3 	bl	800e858 <UART_SetConfig>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d101      	bne.n	800e6fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	e01b      	b.n	800e734 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	685a      	ldr	r2, [r3, #4]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e70a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	689a      	ldr	r2, [r3, #8]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e71a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f042 0201 	orr.w	r2, r2, #1
 800e72a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 ffa1 	bl	800f674 <UART_CheckIdleState>
 800e732:	4603      	mov	r3, r0
}
 800e734:	4618      	mov	r0, r3
 800e736:	3708      	adds	r7, #8
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b08a      	sub	sp, #40	@ 0x28
 800e740:	af02      	add	r7, sp, #8
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	603b      	str	r3, [r7, #0]
 800e748:	4613      	mov	r3, r2
 800e74a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e752:	2b20      	cmp	r3, #32
 800e754:	d17b      	bne.n	800e84e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d002      	beq.n	800e762 <HAL_UART_Transmit+0x26>
 800e75c:	88fb      	ldrh	r3, [r7, #6]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d101      	bne.n	800e766 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e762:	2301      	movs	r3, #1
 800e764:	e074      	b.n	800e850 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2200      	movs	r2, #0
 800e76a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2221      	movs	r2, #33	@ 0x21
 800e772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e776:	f7f5 fae5 	bl	8003d44 <HAL_GetTick>
 800e77a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	88fa      	ldrh	r2, [r7, #6]
 800e780:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	88fa      	ldrh	r2, [r7, #6]
 800e788:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e794:	d108      	bne.n	800e7a8 <HAL_UART_Transmit+0x6c>
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	691b      	ldr	r3, [r3, #16]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d104      	bne.n	800e7a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	61bb      	str	r3, [r7, #24]
 800e7a6:	e003      	b.n	800e7b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e7b0:	e030      	b.n	800e814 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	2180      	movs	r1, #128	@ 0x80
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f001 f803 	bl	800f7c8 <UART_WaitOnFlagUntilTimeout>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d005      	beq.n	800e7d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2220      	movs	r2, #32
 800e7cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e7d0:	2303      	movs	r3, #3
 800e7d2:	e03d      	b.n	800e850 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d10b      	bne.n	800e7f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	881b      	ldrh	r3, [r3, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e7e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e7ea:	69bb      	ldr	r3, [r7, #24]
 800e7ec:	3302      	adds	r3, #2
 800e7ee:	61bb      	str	r3, [r7, #24]
 800e7f0:	e007      	b.n	800e802 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	781a      	ldrb	r2, [r3, #0]
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	3301      	adds	r3, #1
 800e800:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e808:	b29b      	uxth	r3, r3
 800e80a:	3b01      	subs	r3, #1
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d1c8      	bne.n	800e7b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	9300      	str	r3, [sp, #0]
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	2200      	movs	r2, #0
 800e828:	2140      	movs	r1, #64	@ 0x40
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	f000 ffcc 	bl	800f7c8 <UART_WaitOnFlagUntilTimeout>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d005      	beq.n	800e842 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2220      	movs	r2, #32
 800e83a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e83e:	2303      	movs	r3, #3
 800e840:	e006      	b.n	800e850 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2220      	movs	r2, #32
 800e846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e84a:	2300      	movs	r3, #0
 800e84c:	e000      	b.n	800e850 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e84e:	2302      	movs	r3, #2
  }
}
 800e850:	4618      	mov	r0, r3
 800e852:	3720      	adds	r7, #32
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e85c:	b092      	sub	sp, #72	@ 0x48
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e862:	2300      	movs	r3, #0
 800e864:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	689a      	ldr	r2, [r3, #8]
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	691b      	ldr	r3, [r3, #16]
 800e870:	431a      	orrs	r2, r3
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	695b      	ldr	r3, [r3, #20]
 800e876:	431a      	orrs	r2, r3
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	69db      	ldr	r3, [r3, #28]
 800e87c:	4313      	orrs	r3, r2
 800e87e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	4bbe      	ldr	r3, [pc, #760]	@ (800eb80 <UART_SetConfig+0x328>)
 800e888:	4013      	ands	r3, r2
 800e88a:	697a      	ldr	r2, [r7, #20]
 800e88c:	6812      	ldr	r2, [r2, #0]
 800e88e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e890:	430b      	orrs	r3, r1
 800e892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	68da      	ldr	r2, [r3, #12]
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	430a      	orrs	r2, r1
 800e8a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	699b      	ldr	r3, [r3, #24]
 800e8ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4ab3      	ldr	r2, [pc, #716]	@ (800eb84 <UART_SetConfig+0x32c>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d004      	beq.n	800e8c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	6a1b      	ldr	r3, [r3, #32]
 800e8be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	689a      	ldr	r2, [r3, #8]
 800e8ca:	4baf      	ldr	r3, [pc, #700]	@ (800eb88 <UART_SetConfig+0x330>)
 800e8cc:	4013      	ands	r3, r2
 800e8ce:	697a      	ldr	r2, [r7, #20]
 800e8d0:	6812      	ldr	r2, [r2, #0]
 800e8d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e8d4:	430b      	orrs	r3, r1
 800e8d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8de:	f023 010f 	bic.w	r1, r3, #15
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	430a      	orrs	r2, r1
 800e8ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4aa6      	ldr	r2, [pc, #664]	@ (800eb8c <UART_SetConfig+0x334>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d177      	bne.n	800e9e8 <UART_SetConfig+0x190>
 800e8f8:	4ba5      	ldr	r3, [pc, #660]	@ (800eb90 <UART_SetConfig+0x338>)
 800e8fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e900:	2b28      	cmp	r3, #40	@ 0x28
 800e902:	d86d      	bhi.n	800e9e0 <UART_SetConfig+0x188>
 800e904:	a201      	add	r2, pc, #4	@ (adr r2, 800e90c <UART_SetConfig+0xb4>)
 800e906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e90a:	bf00      	nop
 800e90c:	0800e9b1 	.word	0x0800e9b1
 800e910:	0800e9e1 	.word	0x0800e9e1
 800e914:	0800e9e1 	.word	0x0800e9e1
 800e918:	0800e9e1 	.word	0x0800e9e1
 800e91c:	0800e9e1 	.word	0x0800e9e1
 800e920:	0800e9e1 	.word	0x0800e9e1
 800e924:	0800e9e1 	.word	0x0800e9e1
 800e928:	0800e9e1 	.word	0x0800e9e1
 800e92c:	0800e9b9 	.word	0x0800e9b9
 800e930:	0800e9e1 	.word	0x0800e9e1
 800e934:	0800e9e1 	.word	0x0800e9e1
 800e938:	0800e9e1 	.word	0x0800e9e1
 800e93c:	0800e9e1 	.word	0x0800e9e1
 800e940:	0800e9e1 	.word	0x0800e9e1
 800e944:	0800e9e1 	.word	0x0800e9e1
 800e948:	0800e9e1 	.word	0x0800e9e1
 800e94c:	0800e9c1 	.word	0x0800e9c1
 800e950:	0800e9e1 	.word	0x0800e9e1
 800e954:	0800e9e1 	.word	0x0800e9e1
 800e958:	0800e9e1 	.word	0x0800e9e1
 800e95c:	0800e9e1 	.word	0x0800e9e1
 800e960:	0800e9e1 	.word	0x0800e9e1
 800e964:	0800e9e1 	.word	0x0800e9e1
 800e968:	0800e9e1 	.word	0x0800e9e1
 800e96c:	0800e9c9 	.word	0x0800e9c9
 800e970:	0800e9e1 	.word	0x0800e9e1
 800e974:	0800e9e1 	.word	0x0800e9e1
 800e978:	0800e9e1 	.word	0x0800e9e1
 800e97c:	0800e9e1 	.word	0x0800e9e1
 800e980:	0800e9e1 	.word	0x0800e9e1
 800e984:	0800e9e1 	.word	0x0800e9e1
 800e988:	0800e9e1 	.word	0x0800e9e1
 800e98c:	0800e9d1 	.word	0x0800e9d1
 800e990:	0800e9e1 	.word	0x0800e9e1
 800e994:	0800e9e1 	.word	0x0800e9e1
 800e998:	0800e9e1 	.word	0x0800e9e1
 800e99c:	0800e9e1 	.word	0x0800e9e1
 800e9a0:	0800e9e1 	.word	0x0800e9e1
 800e9a4:	0800e9e1 	.word	0x0800e9e1
 800e9a8:	0800e9e1 	.word	0x0800e9e1
 800e9ac:	0800e9d9 	.word	0x0800e9d9
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9b6:	e326      	b.n	800f006 <UART_SetConfig+0x7ae>
 800e9b8:	2304      	movs	r3, #4
 800e9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9be:	e322      	b.n	800f006 <UART_SetConfig+0x7ae>
 800e9c0:	2308      	movs	r3, #8
 800e9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9c6:	e31e      	b.n	800f006 <UART_SetConfig+0x7ae>
 800e9c8:	2310      	movs	r3, #16
 800e9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ce:	e31a      	b.n	800f006 <UART_SetConfig+0x7ae>
 800e9d0:	2320      	movs	r3, #32
 800e9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9d6:	e316      	b.n	800f006 <UART_SetConfig+0x7ae>
 800e9d8:	2340      	movs	r3, #64	@ 0x40
 800e9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9de:	e312      	b.n	800f006 <UART_SetConfig+0x7ae>
 800e9e0:	2380      	movs	r3, #128	@ 0x80
 800e9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9e6:	e30e      	b.n	800f006 <UART_SetConfig+0x7ae>
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4a69      	ldr	r2, [pc, #420]	@ (800eb94 <UART_SetConfig+0x33c>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d130      	bne.n	800ea54 <UART_SetConfig+0x1fc>
 800e9f2:	4b67      	ldr	r3, [pc, #412]	@ (800eb90 <UART_SetConfig+0x338>)
 800e9f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9f6:	f003 0307 	and.w	r3, r3, #7
 800e9fa:	2b05      	cmp	r3, #5
 800e9fc:	d826      	bhi.n	800ea4c <UART_SetConfig+0x1f4>
 800e9fe:	a201      	add	r2, pc, #4	@ (adr r2, 800ea04 <UART_SetConfig+0x1ac>)
 800ea00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea04:	0800ea1d 	.word	0x0800ea1d
 800ea08:	0800ea25 	.word	0x0800ea25
 800ea0c:	0800ea2d 	.word	0x0800ea2d
 800ea10:	0800ea35 	.word	0x0800ea35
 800ea14:	0800ea3d 	.word	0x0800ea3d
 800ea18:	0800ea45 	.word	0x0800ea45
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea22:	e2f0      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ea24:	2304      	movs	r3, #4
 800ea26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea2a:	e2ec      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ea2c:	2308      	movs	r3, #8
 800ea2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea32:	e2e8      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ea34:	2310      	movs	r3, #16
 800ea36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea3a:	e2e4      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ea3c:	2320      	movs	r3, #32
 800ea3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea42:	e2e0      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ea44:	2340      	movs	r3, #64	@ 0x40
 800ea46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea4a:	e2dc      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ea4c:	2380      	movs	r3, #128	@ 0x80
 800ea4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea52:	e2d8      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	4a4f      	ldr	r2, [pc, #316]	@ (800eb98 <UART_SetConfig+0x340>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d130      	bne.n	800eac0 <UART_SetConfig+0x268>
 800ea5e:	4b4c      	ldr	r3, [pc, #304]	@ (800eb90 <UART_SetConfig+0x338>)
 800ea60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea62:	f003 0307 	and.w	r3, r3, #7
 800ea66:	2b05      	cmp	r3, #5
 800ea68:	d826      	bhi.n	800eab8 <UART_SetConfig+0x260>
 800ea6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ea70 <UART_SetConfig+0x218>)
 800ea6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea70:	0800ea89 	.word	0x0800ea89
 800ea74:	0800ea91 	.word	0x0800ea91
 800ea78:	0800ea99 	.word	0x0800ea99
 800ea7c:	0800eaa1 	.word	0x0800eaa1
 800ea80:	0800eaa9 	.word	0x0800eaa9
 800ea84:	0800eab1 	.word	0x0800eab1
 800ea88:	2300      	movs	r3, #0
 800ea8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea8e:	e2ba      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ea90:	2304      	movs	r3, #4
 800ea92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea96:	e2b6      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ea98:	2308      	movs	r3, #8
 800ea9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea9e:	e2b2      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eaa0:	2310      	movs	r3, #16
 800eaa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaa6:	e2ae      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eaa8:	2320      	movs	r3, #32
 800eaaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaae:	e2aa      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eab0:	2340      	movs	r3, #64	@ 0x40
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eab6:	e2a6      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eab8:	2380      	movs	r3, #128	@ 0x80
 800eaba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eabe:	e2a2      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4a35      	ldr	r2, [pc, #212]	@ (800eb9c <UART_SetConfig+0x344>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d130      	bne.n	800eb2c <UART_SetConfig+0x2d4>
 800eaca:	4b31      	ldr	r3, [pc, #196]	@ (800eb90 <UART_SetConfig+0x338>)
 800eacc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eace:	f003 0307 	and.w	r3, r3, #7
 800ead2:	2b05      	cmp	r3, #5
 800ead4:	d826      	bhi.n	800eb24 <UART_SetConfig+0x2cc>
 800ead6:	a201      	add	r2, pc, #4	@ (adr r2, 800eadc <UART_SetConfig+0x284>)
 800ead8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eadc:	0800eaf5 	.word	0x0800eaf5
 800eae0:	0800eafd 	.word	0x0800eafd
 800eae4:	0800eb05 	.word	0x0800eb05
 800eae8:	0800eb0d 	.word	0x0800eb0d
 800eaec:	0800eb15 	.word	0x0800eb15
 800eaf0:	0800eb1d 	.word	0x0800eb1d
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eafa:	e284      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eafc:	2304      	movs	r3, #4
 800eafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb02:	e280      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eb04:	2308      	movs	r3, #8
 800eb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb0a:	e27c      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eb0c:	2310      	movs	r3, #16
 800eb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb12:	e278      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eb14:	2320      	movs	r3, #32
 800eb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb1a:	e274      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eb1c:	2340      	movs	r3, #64	@ 0x40
 800eb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb22:	e270      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eb24:	2380      	movs	r3, #128	@ 0x80
 800eb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb2a:	e26c      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4a1b      	ldr	r2, [pc, #108]	@ (800eba0 <UART_SetConfig+0x348>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d142      	bne.n	800ebbc <UART_SetConfig+0x364>
 800eb36:	4b16      	ldr	r3, [pc, #88]	@ (800eb90 <UART_SetConfig+0x338>)
 800eb38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb3a:	f003 0307 	and.w	r3, r3, #7
 800eb3e:	2b05      	cmp	r3, #5
 800eb40:	d838      	bhi.n	800ebb4 <UART_SetConfig+0x35c>
 800eb42:	a201      	add	r2, pc, #4	@ (adr r2, 800eb48 <UART_SetConfig+0x2f0>)
 800eb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb48:	0800eb61 	.word	0x0800eb61
 800eb4c:	0800eb69 	.word	0x0800eb69
 800eb50:	0800eb71 	.word	0x0800eb71
 800eb54:	0800eb79 	.word	0x0800eb79
 800eb58:	0800eba5 	.word	0x0800eba5
 800eb5c:	0800ebad 	.word	0x0800ebad
 800eb60:	2300      	movs	r3, #0
 800eb62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb66:	e24e      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eb68:	2304      	movs	r3, #4
 800eb6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb6e:	e24a      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eb70:	2308      	movs	r3, #8
 800eb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb76:	e246      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eb78:	2310      	movs	r3, #16
 800eb7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb7e:	e242      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eb80:	cfff69f3 	.word	0xcfff69f3
 800eb84:	58000c00 	.word	0x58000c00
 800eb88:	11fff4ff 	.word	0x11fff4ff
 800eb8c:	40011000 	.word	0x40011000
 800eb90:	58024400 	.word	0x58024400
 800eb94:	40004400 	.word	0x40004400
 800eb98:	40004800 	.word	0x40004800
 800eb9c:	40004c00 	.word	0x40004c00
 800eba0:	40005000 	.word	0x40005000
 800eba4:	2320      	movs	r3, #32
 800eba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebaa:	e22c      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ebac:	2340      	movs	r3, #64	@ 0x40
 800ebae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebb2:	e228      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ebb4:	2380      	movs	r3, #128	@ 0x80
 800ebb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebba:	e224      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4ab1      	ldr	r2, [pc, #708]	@ (800ee88 <UART_SetConfig+0x630>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d176      	bne.n	800ecb4 <UART_SetConfig+0x45c>
 800ebc6:	4bb1      	ldr	r3, [pc, #708]	@ (800ee8c <UART_SetConfig+0x634>)
 800ebc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ebce:	2b28      	cmp	r3, #40	@ 0x28
 800ebd0:	d86c      	bhi.n	800ecac <UART_SetConfig+0x454>
 800ebd2:	a201      	add	r2, pc, #4	@ (adr r2, 800ebd8 <UART_SetConfig+0x380>)
 800ebd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd8:	0800ec7d 	.word	0x0800ec7d
 800ebdc:	0800ecad 	.word	0x0800ecad
 800ebe0:	0800ecad 	.word	0x0800ecad
 800ebe4:	0800ecad 	.word	0x0800ecad
 800ebe8:	0800ecad 	.word	0x0800ecad
 800ebec:	0800ecad 	.word	0x0800ecad
 800ebf0:	0800ecad 	.word	0x0800ecad
 800ebf4:	0800ecad 	.word	0x0800ecad
 800ebf8:	0800ec85 	.word	0x0800ec85
 800ebfc:	0800ecad 	.word	0x0800ecad
 800ec00:	0800ecad 	.word	0x0800ecad
 800ec04:	0800ecad 	.word	0x0800ecad
 800ec08:	0800ecad 	.word	0x0800ecad
 800ec0c:	0800ecad 	.word	0x0800ecad
 800ec10:	0800ecad 	.word	0x0800ecad
 800ec14:	0800ecad 	.word	0x0800ecad
 800ec18:	0800ec8d 	.word	0x0800ec8d
 800ec1c:	0800ecad 	.word	0x0800ecad
 800ec20:	0800ecad 	.word	0x0800ecad
 800ec24:	0800ecad 	.word	0x0800ecad
 800ec28:	0800ecad 	.word	0x0800ecad
 800ec2c:	0800ecad 	.word	0x0800ecad
 800ec30:	0800ecad 	.word	0x0800ecad
 800ec34:	0800ecad 	.word	0x0800ecad
 800ec38:	0800ec95 	.word	0x0800ec95
 800ec3c:	0800ecad 	.word	0x0800ecad
 800ec40:	0800ecad 	.word	0x0800ecad
 800ec44:	0800ecad 	.word	0x0800ecad
 800ec48:	0800ecad 	.word	0x0800ecad
 800ec4c:	0800ecad 	.word	0x0800ecad
 800ec50:	0800ecad 	.word	0x0800ecad
 800ec54:	0800ecad 	.word	0x0800ecad
 800ec58:	0800ec9d 	.word	0x0800ec9d
 800ec5c:	0800ecad 	.word	0x0800ecad
 800ec60:	0800ecad 	.word	0x0800ecad
 800ec64:	0800ecad 	.word	0x0800ecad
 800ec68:	0800ecad 	.word	0x0800ecad
 800ec6c:	0800ecad 	.word	0x0800ecad
 800ec70:	0800ecad 	.word	0x0800ecad
 800ec74:	0800ecad 	.word	0x0800ecad
 800ec78:	0800eca5 	.word	0x0800eca5
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec82:	e1c0      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ec84:	2304      	movs	r3, #4
 800ec86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec8a:	e1bc      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ec8c:	2308      	movs	r3, #8
 800ec8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec92:	e1b8      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ec94:	2310      	movs	r3, #16
 800ec96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec9a:	e1b4      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ec9c:	2320      	movs	r3, #32
 800ec9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eca2:	e1b0      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eca4:	2340      	movs	r3, #64	@ 0x40
 800eca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecaa:	e1ac      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ecac:	2380      	movs	r3, #128	@ 0x80
 800ecae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecb2:	e1a8      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a75      	ldr	r2, [pc, #468]	@ (800ee90 <UART_SetConfig+0x638>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d130      	bne.n	800ed20 <UART_SetConfig+0x4c8>
 800ecbe:	4b73      	ldr	r3, [pc, #460]	@ (800ee8c <UART_SetConfig+0x634>)
 800ecc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecc2:	f003 0307 	and.w	r3, r3, #7
 800ecc6:	2b05      	cmp	r3, #5
 800ecc8:	d826      	bhi.n	800ed18 <UART_SetConfig+0x4c0>
 800ecca:	a201      	add	r2, pc, #4	@ (adr r2, 800ecd0 <UART_SetConfig+0x478>)
 800eccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd0:	0800ece9 	.word	0x0800ece9
 800ecd4:	0800ecf1 	.word	0x0800ecf1
 800ecd8:	0800ecf9 	.word	0x0800ecf9
 800ecdc:	0800ed01 	.word	0x0800ed01
 800ece0:	0800ed09 	.word	0x0800ed09
 800ece4:	0800ed11 	.word	0x0800ed11
 800ece8:	2300      	movs	r3, #0
 800ecea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecee:	e18a      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ecf0:	2304      	movs	r3, #4
 800ecf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecf6:	e186      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ecf8:	2308      	movs	r3, #8
 800ecfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecfe:	e182      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ed00:	2310      	movs	r3, #16
 800ed02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed06:	e17e      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ed08:	2320      	movs	r3, #32
 800ed0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed0e:	e17a      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ed10:	2340      	movs	r3, #64	@ 0x40
 800ed12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed16:	e176      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ed18:	2380      	movs	r3, #128	@ 0x80
 800ed1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed1e:	e172      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4a5b      	ldr	r2, [pc, #364]	@ (800ee94 <UART_SetConfig+0x63c>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d130      	bne.n	800ed8c <UART_SetConfig+0x534>
 800ed2a:	4b58      	ldr	r3, [pc, #352]	@ (800ee8c <UART_SetConfig+0x634>)
 800ed2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed2e:	f003 0307 	and.w	r3, r3, #7
 800ed32:	2b05      	cmp	r3, #5
 800ed34:	d826      	bhi.n	800ed84 <UART_SetConfig+0x52c>
 800ed36:	a201      	add	r2, pc, #4	@ (adr r2, 800ed3c <UART_SetConfig+0x4e4>)
 800ed38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed3c:	0800ed55 	.word	0x0800ed55
 800ed40:	0800ed5d 	.word	0x0800ed5d
 800ed44:	0800ed65 	.word	0x0800ed65
 800ed48:	0800ed6d 	.word	0x0800ed6d
 800ed4c:	0800ed75 	.word	0x0800ed75
 800ed50:	0800ed7d 	.word	0x0800ed7d
 800ed54:	2300      	movs	r3, #0
 800ed56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed5a:	e154      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ed5c:	2304      	movs	r3, #4
 800ed5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed62:	e150      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ed64:	2308      	movs	r3, #8
 800ed66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed6a:	e14c      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ed6c:	2310      	movs	r3, #16
 800ed6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed72:	e148      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ed74:	2320      	movs	r3, #32
 800ed76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed7a:	e144      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ed7c:	2340      	movs	r3, #64	@ 0x40
 800ed7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed82:	e140      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ed84:	2380      	movs	r3, #128	@ 0x80
 800ed86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed8a:	e13c      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4a41      	ldr	r2, [pc, #260]	@ (800ee98 <UART_SetConfig+0x640>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	f040 8082 	bne.w	800ee9c <UART_SetConfig+0x644>
 800ed98:	4b3c      	ldr	r3, [pc, #240]	@ (800ee8c <UART_SetConfig+0x634>)
 800ed9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eda0:	2b28      	cmp	r3, #40	@ 0x28
 800eda2:	d86d      	bhi.n	800ee80 <UART_SetConfig+0x628>
 800eda4:	a201      	add	r2, pc, #4	@ (adr r2, 800edac <UART_SetConfig+0x554>)
 800eda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edaa:	bf00      	nop
 800edac:	0800ee51 	.word	0x0800ee51
 800edb0:	0800ee81 	.word	0x0800ee81
 800edb4:	0800ee81 	.word	0x0800ee81
 800edb8:	0800ee81 	.word	0x0800ee81
 800edbc:	0800ee81 	.word	0x0800ee81
 800edc0:	0800ee81 	.word	0x0800ee81
 800edc4:	0800ee81 	.word	0x0800ee81
 800edc8:	0800ee81 	.word	0x0800ee81
 800edcc:	0800ee59 	.word	0x0800ee59
 800edd0:	0800ee81 	.word	0x0800ee81
 800edd4:	0800ee81 	.word	0x0800ee81
 800edd8:	0800ee81 	.word	0x0800ee81
 800eddc:	0800ee81 	.word	0x0800ee81
 800ede0:	0800ee81 	.word	0x0800ee81
 800ede4:	0800ee81 	.word	0x0800ee81
 800ede8:	0800ee81 	.word	0x0800ee81
 800edec:	0800ee61 	.word	0x0800ee61
 800edf0:	0800ee81 	.word	0x0800ee81
 800edf4:	0800ee81 	.word	0x0800ee81
 800edf8:	0800ee81 	.word	0x0800ee81
 800edfc:	0800ee81 	.word	0x0800ee81
 800ee00:	0800ee81 	.word	0x0800ee81
 800ee04:	0800ee81 	.word	0x0800ee81
 800ee08:	0800ee81 	.word	0x0800ee81
 800ee0c:	0800ee69 	.word	0x0800ee69
 800ee10:	0800ee81 	.word	0x0800ee81
 800ee14:	0800ee81 	.word	0x0800ee81
 800ee18:	0800ee81 	.word	0x0800ee81
 800ee1c:	0800ee81 	.word	0x0800ee81
 800ee20:	0800ee81 	.word	0x0800ee81
 800ee24:	0800ee81 	.word	0x0800ee81
 800ee28:	0800ee81 	.word	0x0800ee81
 800ee2c:	0800ee71 	.word	0x0800ee71
 800ee30:	0800ee81 	.word	0x0800ee81
 800ee34:	0800ee81 	.word	0x0800ee81
 800ee38:	0800ee81 	.word	0x0800ee81
 800ee3c:	0800ee81 	.word	0x0800ee81
 800ee40:	0800ee81 	.word	0x0800ee81
 800ee44:	0800ee81 	.word	0x0800ee81
 800ee48:	0800ee81 	.word	0x0800ee81
 800ee4c:	0800ee79 	.word	0x0800ee79
 800ee50:	2301      	movs	r3, #1
 800ee52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee56:	e0d6      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ee58:	2304      	movs	r3, #4
 800ee5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee5e:	e0d2      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ee60:	2308      	movs	r3, #8
 800ee62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee66:	e0ce      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ee68:	2310      	movs	r3, #16
 800ee6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee6e:	e0ca      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ee70:	2320      	movs	r3, #32
 800ee72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee76:	e0c6      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ee78:	2340      	movs	r3, #64	@ 0x40
 800ee7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee7e:	e0c2      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ee80:	2380      	movs	r3, #128	@ 0x80
 800ee82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee86:	e0be      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ee88:	40011400 	.word	0x40011400
 800ee8c:	58024400 	.word	0x58024400
 800ee90:	40007800 	.word	0x40007800
 800ee94:	40007c00 	.word	0x40007c00
 800ee98:	40011800 	.word	0x40011800
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4aad      	ldr	r2, [pc, #692]	@ (800f158 <UART_SetConfig+0x900>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d176      	bne.n	800ef94 <UART_SetConfig+0x73c>
 800eea6:	4bad      	ldr	r3, [pc, #692]	@ (800f15c <UART_SetConfig+0x904>)
 800eea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eeaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eeae:	2b28      	cmp	r3, #40	@ 0x28
 800eeb0:	d86c      	bhi.n	800ef8c <UART_SetConfig+0x734>
 800eeb2:	a201      	add	r2, pc, #4	@ (adr r2, 800eeb8 <UART_SetConfig+0x660>)
 800eeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb8:	0800ef5d 	.word	0x0800ef5d
 800eebc:	0800ef8d 	.word	0x0800ef8d
 800eec0:	0800ef8d 	.word	0x0800ef8d
 800eec4:	0800ef8d 	.word	0x0800ef8d
 800eec8:	0800ef8d 	.word	0x0800ef8d
 800eecc:	0800ef8d 	.word	0x0800ef8d
 800eed0:	0800ef8d 	.word	0x0800ef8d
 800eed4:	0800ef8d 	.word	0x0800ef8d
 800eed8:	0800ef65 	.word	0x0800ef65
 800eedc:	0800ef8d 	.word	0x0800ef8d
 800eee0:	0800ef8d 	.word	0x0800ef8d
 800eee4:	0800ef8d 	.word	0x0800ef8d
 800eee8:	0800ef8d 	.word	0x0800ef8d
 800eeec:	0800ef8d 	.word	0x0800ef8d
 800eef0:	0800ef8d 	.word	0x0800ef8d
 800eef4:	0800ef8d 	.word	0x0800ef8d
 800eef8:	0800ef6d 	.word	0x0800ef6d
 800eefc:	0800ef8d 	.word	0x0800ef8d
 800ef00:	0800ef8d 	.word	0x0800ef8d
 800ef04:	0800ef8d 	.word	0x0800ef8d
 800ef08:	0800ef8d 	.word	0x0800ef8d
 800ef0c:	0800ef8d 	.word	0x0800ef8d
 800ef10:	0800ef8d 	.word	0x0800ef8d
 800ef14:	0800ef8d 	.word	0x0800ef8d
 800ef18:	0800ef75 	.word	0x0800ef75
 800ef1c:	0800ef8d 	.word	0x0800ef8d
 800ef20:	0800ef8d 	.word	0x0800ef8d
 800ef24:	0800ef8d 	.word	0x0800ef8d
 800ef28:	0800ef8d 	.word	0x0800ef8d
 800ef2c:	0800ef8d 	.word	0x0800ef8d
 800ef30:	0800ef8d 	.word	0x0800ef8d
 800ef34:	0800ef8d 	.word	0x0800ef8d
 800ef38:	0800ef7d 	.word	0x0800ef7d
 800ef3c:	0800ef8d 	.word	0x0800ef8d
 800ef40:	0800ef8d 	.word	0x0800ef8d
 800ef44:	0800ef8d 	.word	0x0800ef8d
 800ef48:	0800ef8d 	.word	0x0800ef8d
 800ef4c:	0800ef8d 	.word	0x0800ef8d
 800ef50:	0800ef8d 	.word	0x0800ef8d
 800ef54:	0800ef8d 	.word	0x0800ef8d
 800ef58:	0800ef85 	.word	0x0800ef85
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef62:	e050      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ef64:	2304      	movs	r3, #4
 800ef66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef6a:	e04c      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ef6c:	2308      	movs	r3, #8
 800ef6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef72:	e048      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ef74:	2310      	movs	r3, #16
 800ef76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef7a:	e044      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ef7c:	2320      	movs	r3, #32
 800ef7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef82:	e040      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ef84:	2340      	movs	r3, #64	@ 0x40
 800ef86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef8a:	e03c      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ef8c:	2380      	movs	r3, #128	@ 0x80
 800ef8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef92:	e038      	b.n	800f006 <UART_SetConfig+0x7ae>
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4a71      	ldr	r2, [pc, #452]	@ (800f160 <UART_SetConfig+0x908>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d130      	bne.n	800f000 <UART_SetConfig+0x7a8>
 800ef9e:	4b6f      	ldr	r3, [pc, #444]	@ (800f15c <UART_SetConfig+0x904>)
 800efa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efa2:	f003 0307 	and.w	r3, r3, #7
 800efa6:	2b05      	cmp	r3, #5
 800efa8:	d826      	bhi.n	800eff8 <UART_SetConfig+0x7a0>
 800efaa:	a201      	add	r2, pc, #4	@ (adr r2, 800efb0 <UART_SetConfig+0x758>)
 800efac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb0:	0800efc9 	.word	0x0800efc9
 800efb4:	0800efd1 	.word	0x0800efd1
 800efb8:	0800efd9 	.word	0x0800efd9
 800efbc:	0800efe1 	.word	0x0800efe1
 800efc0:	0800efe9 	.word	0x0800efe9
 800efc4:	0800eff1 	.word	0x0800eff1
 800efc8:	2302      	movs	r3, #2
 800efca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efce:	e01a      	b.n	800f006 <UART_SetConfig+0x7ae>
 800efd0:	2304      	movs	r3, #4
 800efd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efd6:	e016      	b.n	800f006 <UART_SetConfig+0x7ae>
 800efd8:	2308      	movs	r3, #8
 800efda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efde:	e012      	b.n	800f006 <UART_SetConfig+0x7ae>
 800efe0:	2310      	movs	r3, #16
 800efe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efe6:	e00e      	b.n	800f006 <UART_SetConfig+0x7ae>
 800efe8:	2320      	movs	r3, #32
 800efea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efee:	e00a      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eff0:	2340      	movs	r3, #64	@ 0x40
 800eff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eff6:	e006      	b.n	800f006 <UART_SetConfig+0x7ae>
 800eff8:	2380      	movs	r3, #128	@ 0x80
 800effa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800effe:	e002      	b.n	800f006 <UART_SetConfig+0x7ae>
 800f000:	2380      	movs	r3, #128	@ 0x80
 800f002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a55      	ldr	r2, [pc, #340]	@ (800f160 <UART_SetConfig+0x908>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	f040 80f8 	bne.w	800f202 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f012:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f016:	2b20      	cmp	r3, #32
 800f018:	dc46      	bgt.n	800f0a8 <UART_SetConfig+0x850>
 800f01a:	2b02      	cmp	r3, #2
 800f01c:	db75      	blt.n	800f10a <UART_SetConfig+0x8b2>
 800f01e:	3b02      	subs	r3, #2
 800f020:	2b1e      	cmp	r3, #30
 800f022:	d872      	bhi.n	800f10a <UART_SetConfig+0x8b2>
 800f024:	a201      	add	r2, pc, #4	@ (adr r2, 800f02c <UART_SetConfig+0x7d4>)
 800f026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f02a:	bf00      	nop
 800f02c:	0800f0af 	.word	0x0800f0af
 800f030:	0800f10b 	.word	0x0800f10b
 800f034:	0800f0b7 	.word	0x0800f0b7
 800f038:	0800f10b 	.word	0x0800f10b
 800f03c:	0800f10b 	.word	0x0800f10b
 800f040:	0800f10b 	.word	0x0800f10b
 800f044:	0800f0c7 	.word	0x0800f0c7
 800f048:	0800f10b 	.word	0x0800f10b
 800f04c:	0800f10b 	.word	0x0800f10b
 800f050:	0800f10b 	.word	0x0800f10b
 800f054:	0800f10b 	.word	0x0800f10b
 800f058:	0800f10b 	.word	0x0800f10b
 800f05c:	0800f10b 	.word	0x0800f10b
 800f060:	0800f10b 	.word	0x0800f10b
 800f064:	0800f0d7 	.word	0x0800f0d7
 800f068:	0800f10b 	.word	0x0800f10b
 800f06c:	0800f10b 	.word	0x0800f10b
 800f070:	0800f10b 	.word	0x0800f10b
 800f074:	0800f10b 	.word	0x0800f10b
 800f078:	0800f10b 	.word	0x0800f10b
 800f07c:	0800f10b 	.word	0x0800f10b
 800f080:	0800f10b 	.word	0x0800f10b
 800f084:	0800f10b 	.word	0x0800f10b
 800f088:	0800f10b 	.word	0x0800f10b
 800f08c:	0800f10b 	.word	0x0800f10b
 800f090:	0800f10b 	.word	0x0800f10b
 800f094:	0800f10b 	.word	0x0800f10b
 800f098:	0800f10b 	.word	0x0800f10b
 800f09c:	0800f10b 	.word	0x0800f10b
 800f0a0:	0800f10b 	.word	0x0800f10b
 800f0a4:	0800f0fd 	.word	0x0800f0fd
 800f0a8:	2b40      	cmp	r3, #64	@ 0x40
 800f0aa:	d02a      	beq.n	800f102 <UART_SetConfig+0x8aa>
 800f0ac:	e02d      	b.n	800f10a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f0ae:	f7fb fd11 	bl	800aad4 <HAL_RCCEx_GetD3PCLK1Freq>
 800f0b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f0b4:	e02f      	b.n	800f116 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fb fd20 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0c4:	e027      	b.n	800f116 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0c6:	f107 0318 	add.w	r3, r7, #24
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fb fe6c 	bl	800ada8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f0d0:	69fb      	ldr	r3, [r7, #28]
 800f0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0d4:	e01f      	b.n	800f116 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0d6:	4b21      	ldr	r3, [pc, #132]	@ (800f15c <UART_SetConfig+0x904>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f003 0320 	and.w	r3, r3, #32
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d009      	beq.n	800f0f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f0e2:	4b1e      	ldr	r3, [pc, #120]	@ (800f15c <UART_SetConfig+0x904>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	08db      	lsrs	r3, r3, #3
 800f0e8:	f003 0303 	and.w	r3, r3, #3
 800f0ec:	4a1d      	ldr	r2, [pc, #116]	@ (800f164 <UART_SetConfig+0x90c>)
 800f0ee:	fa22 f303 	lsr.w	r3, r2, r3
 800f0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f0f4:	e00f      	b.n	800f116 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f0f6:	4b1b      	ldr	r3, [pc, #108]	@ (800f164 <UART_SetConfig+0x90c>)
 800f0f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0fa:	e00c      	b.n	800f116 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0fc:	4b1a      	ldr	r3, [pc, #104]	@ (800f168 <UART_SetConfig+0x910>)
 800f0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f100:	e009      	b.n	800f116 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f108:	e005      	b.n	800f116 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f10a:	2300      	movs	r3, #0
 800f10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f10e:	2301      	movs	r3, #1
 800f110:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f114:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f000 81ee 	beq.w	800f4fa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f122:	4a12      	ldr	r2, [pc, #72]	@ (800f16c <UART_SetConfig+0x914>)
 800f124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f128:	461a      	mov	r2, r3
 800f12a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f12c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f130:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	685a      	ldr	r2, [r3, #4]
 800f136:	4613      	mov	r3, r2
 800f138:	005b      	lsls	r3, r3, #1
 800f13a:	4413      	add	r3, r2
 800f13c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f13e:	429a      	cmp	r2, r3
 800f140:	d305      	bcc.n	800f14e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d910      	bls.n	800f170 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f14e:	2301      	movs	r3, #1
 800f150:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f154:	e1d1      	b.n	800f4fa <UART_SetConfig+0xca2>
 800f156:	bf00      	nop
 800f158:	40011c00 	.word	0x40011c00
 800f15c:	58024400 	.word	0x58024400
 800f160:	58000c00 	.word	0x58000c00
 800f164:	03d09000 	.word	0x03d09000
 800f168:	003d0900 	.word	0x003d0900
 800f16c:	08020064 	.word	0x08020064
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f172:	2200      	movs	r2, #0
 800f174:	60bb      	str	r3, [r7, #8]
 800f176:	60fa      	str	r2, [r7, #12]
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f17c:	4ac0      	ldr	r2, [pc, #768]	@ (800f480 <UART_SetConfig+0xc28>)
 800f17e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f182:	b29b      	uxth	r3, r3
 800f184:	2200      	movs	r2, #0
 800f186:	603b      	str	r3, [r7, #0]
 800f188:	607a      	str	r2, [r7, #4]
 800f18a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f18e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f192:	f7f1 f915 	bl	80003c0 <__aeabi_uldivmod>
 800f196:	4602      	mov	r2, r0
 800f198:	460b      	mov	r3, r1
 800f19a:	4610      	mov	r0, r2
 800f19c:	4619      	mov	r1, r3
 800f19e:	f04f 0200 	mov.w	r2, #0
 800f1a2:	f04f 0300 	mov.w	r3, #0
 800f1a6:	020b      	lsls	r3, r1, #8
 800f1a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f1ac:	0202      	lsls	r2, r0, #8
 800f1ae:	6979      	ldr	r1, [r7, #20]
 800f1b0:	6849      	ldr	r1, [r1, #4]
 800f1b2:	0849      	lsrs	r1, r1, #1
 800f1b4:	2000      	movs	r0, #0
 800f1b6:	460c      	mov	r4, r1
 800f1b8:	4605      	mov	r5, r0
 800f1ba:	eb12 0804 	adds.w	r8, r2, r4
 800f1be:	eb43 0905 	adc.w	r9, r3, r5
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	469a      	mov	sl, r3
 800f1ca:	4693      	mov	fp, r2
 800f1cc:	4652      	mov	r2, sl
 800f1ce:	465b      	mov	r3, fp
 800f1d0:	4640      	mov	r0, r8
 800f1d2:	4649      	mov	r1, r9
 800f1d4:	f7f1 f8f4 	bl	80003c0 <__aeabi_uldivmod>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	460b      	mov	r3, r1
 800f1dc:	4613      	mov	r3, r2
 800f1de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f1e6:	d308      	bcc.n	800f1fa <UART_SetConfig+0x9a2>
 800f1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1ee:	d204      	bcs.n	800f1fa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1f6:	60da      	str	r2, [r3, #12]
 800f1f8:	e17f      	b.n	800f4fa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f200:	e17b      	b.n	800f4fa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	69db      	ldr	r3, [r3, #28]
 800f206:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f20a:	f040 80bd 	bne.w	800f388 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f20e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f212:	2b20      	cmp	r3, #32
 800f214:	dc48      	bgt.n	800f2a8 <UART_SetConfig+0xa50>
 800f216:	2b00      	cmp	r3, #0
 800f218:	db7b      	blt.n	800f312 <UART_SetConfig+0xaba>
 800f21a:	2b20      	cmp	r3, #32
 800f21c:	d879      	bhi.n	800f312 <UART_SetConfig+0xaba>
 800f21e:	a201      	add	r2, pc, #4	@ (adr r2, 800f224 <UART_SetConfig+0x9cc>)
 800f220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f224:	0800f2af 	.word	0x0800f2af
 800f228:	0800f2b7 	.word	0x0800f2b7
 800f22c:	0800f313 	.word	0x0800f313
 800f230:	0800f313 	.word	0x0800f313
 800f234:	0800f2bf 	.word	0x0800f2bf
 800f238:	0800f313 	.word	0x0800f313
 800f23c:	0800f313 	.word	0x0800f313
 800f240:	0800f313 	.word	0x0800f313
 800f244:	0800f2cf 	.word	0x0800f2cf
 800f248:	0800f313 	.word	0x0800f313
 800f24c:	0800f313 	.word	0x0800f313
 800f250:	0800f313 	.word	0x0800f313
 800f254:	0800f313 	.word	0x0800f313
 800f258:	0800f313 	.word	0x0800f313
 800f25c:	0800f313 	.word	0x0800f313
 800f260:	0800f313 	.word	0x0800f313
 800f264:	0800f2df 	.word	0x0800f2df
 800f268:	0800f313 	.word	0x0800f313
 800f26c:	0800f313 	.word	0x0800f313
 800f270:	0800f313 	.word	0x0800f313
 800f274:	0800f313 	.word	0x0800f313
 800f278:	0800f313 	.word	0x0800f313
 800f27c:	0800f313 	.word	0x0800f313
 800f280:	0800f313 	.word	0x0800f313
 800f284:	0800f313 	.word	0x0800f313
 800f288:	0800f313 	.word	0x0800f313
 800f28c:	0800f313 	.word	0x0800f313
 800f290:	0800f313 	.word	0x0800f313
 800f294:	0800f313 	.word	0x0800f313
 800f298:	0800f313 	.word	0x0800f313
 800f29c:	0800f313 	.word	0x0800f313
 800f2a0:	0800f313 	.word	0x0800f313
 800f2a4:	0800f305 	.word	0x0800f305
 800f2a8:	2b40      	cmp	r3, #64	@ 0x40
 800f2aa:	d02e      	beq.n	800f30a <UART_SetConfig+0xab2>
 800f2ac:	e031      	b.n	800f312 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2ae:	f7f9 fd73 	bl	8008d98 <HAL_RCC_GetPCLK1Freq>
 800f2b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f2b4:	e033      	b.n	800f31e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f2b6:	f7f9 fd85 	bl	8008dc4 <HAL_RCC_GetPCLK2Freq>
 800f2ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f2bc:	e02f      	b.n	800f31e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7fb fc1c 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2cc:	e027      	b.n	800f31e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2ce:	f107 0318 	add.w	r3, r7, #24
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fb fd68 	bl	800ada8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2dc:	e01f      	b.n	800f31e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2de:	4b69      	ldr	r3, [pc, #420]	@ (800f484 <UART_SetConfig+0xc2c>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f003 0320 	and.w	r3, r3, #32
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d009      	beq.n	800f2fe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f2ea:	4b66      	ldr	r3, [pc, #408]	@ (800f484 <UART_SetConfig+0xc2c>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	08db      	lsrs	r3, r3, #3
 800f2f0:	f003 0303 	and.w	r3, r3, #3
 800f2f4:	4a64      	ldr	r2, [pc, #400]	@ (800f488 <UART_SetConfig+0xc30>)
 800f2f6:	fa22 f303 	lsr.w	r3, r2, r3
 800f2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f2fc:	e00f      	b.n	800f31e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f2fe:	4b62      	ldr	r3, [pc, #392]	@ (800f488 <UART_SetConfig+0xc30>)
 800f300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f302:	e00c      	b.n	800f31e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f304:	4b61      	ldr	r3, [pc, #388]	@ (800f48c <UART_SetConfig+0xc34>)
 800f306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f308:	e009      	b.n	800f31e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f30a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f310:	e005      	b.n	800f31e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f312:	2300      	movs	r3, #0
 800f314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f316:	2301      	movs	r3, #1
 800f318:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f31c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f31e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f320:	2b00      	cmp	r3, #0
 800f322:	f000 80ea 	beq.w	800f4fa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f32a:	4a55      	ldr	r2, [pc, #340]	@ (800f480 <UART_SetConfig+0xc28>)
 800f32c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f330:	461a      	mov	r2, r3
 800f332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f334:	fbb3 f3f2 	udiv	r3, r3, r2
 800f338:	005a      	lsls	r2, r3, #1
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	085b      	lsrs	r3, r3, #1
 800f340:	441a      	add	r2, r3
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	fbb2 f3f3 	udiv	r3, r2, r3
 800f34a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f34e:	2b0f      	cmp	r3, #15
 800f350:	d916      	bls.n	800f380 <UART_SetConfig+0xb28>
 800f352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f358:	d212      	bcs.n	800f380 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	f023 030f 	bic.w	r3, r3, #15
 800f362:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f366:	085b      	lsrs	r3, r3, #1
 800f368:	b29b      	uxth	r3, r3
 800f36a:	f003 0307 	and.w	r3, r3, #7
 800f36e:	b29a      	uxth	r2, r3
 800f370:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f372:	4313      	orrs	r3, r2
 800f374:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f37c:	60da      	str	r2, [r3, #12]
 800f37e:	e0bc      	b.n	800f4fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f380:	2301      	movs	r3, #1
 800f382:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f386:	e0b8      	b.n	800f4fa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f388:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f38c:	2b20      	cmp	r3, #32
 800f38e:	dc4b      	bgt.n	800f428 <UART_SetConfig+0xbd0>
 800f390:	2b00      	cmp	r3, #0
 800f392:	f2c0 8087 	blt.w	800f4a4 <UART_SetConfig+0xc4c>
 800f396:	2b20      	cmp	r3, #32
 800f398:	f200 8084 	bhi.w	800f4a4 <UART_SetConfig+0xc4c>
 800f39c:	a201      	add	r2, pc, #4	@ (adr r2, 800f3a4 <UART_SetConfig+0xb4c>)
 800f39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a2:	bf00      	nop
 800f3a4:	0800f42f 	.word	0x0800f42f
 800f3a8:	0800f437 	.word	0x0800f437
 800f3ac:	0800f4a5 	.word	0x0800f4a5
 800f3b0:	0800f4a5 	.word	0x0800f4a5
 800f3b4:	0800f43f 	.word	0x0800f43f
 800f3b8:	0800f4a5 	.word	0x0800f4a5
 800f3bc:	0800f4a5 	.word	0x0800f4a5
 800f3c0:	0800f4a5 	.word	0x0800f4a5
 800f3c4:	0800f44f 	.word	0x0800f44f
 800f3c8:	0800f4a5 	.word	0x0800f4a5
 800f3cc:	0800f4a5 	.word	0x0800f4a5
 800f3d0:	0800f4a5 	.word	0x0800f4a5
 800f3d4:	0800f4a5 	.word	0x0800f4a5
 800f3d8:	0800f4a5 	.word	0x0800f4a5
 800f3dc:	0800f4a5 	.word	0x0800f4a5
 800f3e0:	0800f4a5 	.word	0x0800f4a5
 800f3e4:	0800f45f 	.word	0x0800f45f
 800f3e8:	0800f4a5 	.word	0x0800f4a5
 800f3ec:	0800f4a5 	.word	0x0800f4a5
 800f3f0:	0800f4a5 	.word	0x0800f4a5
 800f3f4:	0800f4a5 	.word	0x0800f4a5
 800f3f8:	0800f4a5 	.word	0x0800f4a5
 800f3fc:	0800f4a5 	.word	0x0800f4a5
 800f400:	0800f4a5 	.word	0x0800f4a5
 800f404:	0800f4a5 	.word	0x0800f4a5
 800f408:	0800f4a5 	.word	0x0800f4a5
 800f40c:	0800f4a5 	.word	0x0800f4a5
 800f410:	0800f4a5 	.word	0x0800f4a5
 800f414:	0800f4a5 	.word	0x0800f4a5
 800f418:	0800f4a5 	.word	0x0800f4a5
 800f41c:	0800f4a5 	.word	0x0800f4a5
 800f420:	0800f4a5 	.word	0x0800f4a5
 800f424:	0800f497 	.word	0x0800f497
 800f428:	2b40      	cmp	r3, #64	@ 0x40
 800f42a:	d037      	beq.n	800f49c <UART_SetConfig+0xc44>
 800f42c:	e03a      	b.n	800f4a4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f42e:	f7f9 fcb3 	bl	8008d98 <HAL_RCC_GetPCLK1Freq>
 800f432:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f434:	e03c      	b.n	800f4b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f436:	f7f9 fcc5 	bl	8008dc4 <HAL_RCC_GetPCLK2Freq>
 800f43a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f43c:	e038      	b.n	800f4b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f43e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f442:	4618      	mov	r0, r3
 800f444:	f7fb fb5c 	bl	800ab00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f44c:	e030      	b.n	800f4b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f44e:	f107 0318 	add.w	r3, r7, #24
 800f452:	4618      	mov	r0, r3
 800f454:	f7fb fca8 	bl	800ada8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f45c:	e028      	b.n	800f4b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f45e:	4b09      	ldr	r3, [pc, #36]	@ (800f484 <UART_SetConfig+0xc2c>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f003 0320 	and.w	r3, r3, #32
 800f466:	2b00      	cmp	r3, #0
 800f468:	d012      	beq.n	800f490 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f46a:	4b06      	ldr	r3, [pc, #24]	@ (800f484 <UART_SetConfig+0xc2c>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	08db      	lsrs	r3, r3, #3
 800f470:	f003 0303 	and.w	r3, r3, #3
 800f474:	4a04      	ldr	r2, [pc, #16]	@ (800f488 <UART_SetConfig+0xc30>)
 800f476:	fa22 f303 	lsr.w	r3, r2, r3
 800f47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f47c:	e018      	b.n	800f4b0 <UART_SetConfig+0xc58>
 800f47e:	bf00      	nop
 800f480:	08020064 	.word	0x08020064
 800f484:	58024400 	.word	0x58024400
 800f488:	03d09000 	.word	0x03d09000
 800f48c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f490:	4b24      	ldr	r3, [pc, #144]	@ (800f524 <UART_SetConfig+0xccc>)
 800f492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f494:	e00c      	b.n	800f4b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f496:	4b24      	ldr	r3, [pc, #144]	@ (800f528 <UART_SetConfig+0xcd0>)
 800f498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f49a:	e009      	b.n	800f4b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f49c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4a2:	e005      	b.n	800f4b0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f4ae:	bf00      	nop
    }

    if (pclk != 0U)
 800f4b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d021      	beq.n	800f4fa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4ba:	4a1c      	ldr	r2, [pc, #112]	@ (800f52c <UART_SetConfig+0xcd4>)
 800f4bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	085b      	lsrs	r3, r3, #1
 800f4ce:	441a      	add	r2, r3
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4dc:	2b0f      	cmp	r3, #15
 800f4de:	d909      	bls.n	800f4f4 <UART_SetConfig+0xc9c>
 800f4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4e6:	d205      	bcs.n	800f4f4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ea:	b29a      	uxth	r2, r3
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	60da      	str	r2, [r3, #12]
 800f4f2:	e002      	b.n	800f4fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	2201      	movs	r2, #1
 800f506:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	2200      	movs	r2, #0
 800f50e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	2200      	movs	r2, #0
 800f514:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f516:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3748      	adds	r7, #72	@ 0x48
 800f51e:	46bd      	mov	sp, r7
 800f520:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f524:	03d09000 	.word	0x03d09000
 800f528:	003d0900 	.word	0x003d0900
 800f52c:	08020064 	.word	0x08020064

0800f530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f530:	b480      	push	{r7}
 800f532:	b083      	sub	sp, #12
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f53c:	f003 0308 	and.w	r3, r3, #8
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00a      	beq.n	800f55a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	430a      	orrs	r2, r1
 800f558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f55e:	f003 0301 	and.w	r3, r3, #1
 800f562:	2b00      	cmp	r3, #0
 800f564:	d00a      	beq.n	800f57c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	430a      	orrs	r2, r1
 800f57a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f580:	f003 0302 	and.w	r3, r3, #2
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00a      	beq.n	800f59e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	430a      	orrs	r2, r1
 800f59c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5a2:	f003 0304 	and.w	r3, r3, #4
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00a      	beq.n	800f5c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	430a      	orrs	r2, r1
 800f5be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5c4:	f003 0310 	and.w	r3, r3, #16
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d00a      	beq.n	800f5e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	689b      	ldr	r3, [r3, #8]
 800f5d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	430a      	orrs	r2, r1
 800f5e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5e6:	f003 0320 	and.w	r3, r3, #32
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00a      	beq.n	800f604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	430a      	orrs	r2, r1
 800f602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d01a      	beq.n	800f646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	430a      	orrs	r2, r1
 800f624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f62a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f62e:	d10a      	bne.n	800f646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	430a      	orrs	r2, r1
 800f644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f64a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d00a      	beq.n	800f668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	430a      	orrs	r2, r1
 800f666:	605a      	str	r2, [r3, #4]
  }
}
 800f668:	bf00      	nop
 800f66a:	370c      	adds	r7, #12
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b098      	sub	sp, #96	@ 0x60
 800f678:	af02      	add	r7, sp, #8
 800f67a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2200      	movs	r2, #0
 800f680:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f684:	f7f4 fb5e 	bl	8003d44 <HAL_GetTick>
 800f688:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f003 0308 	and.w	r3, r3, #8
 800f694:	2b08      	cmp	r3, #8
 800f696:	d12f      	bne.n	800f6f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f698:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f69c:	9300      	str	r3, [sp, #0]
 800f69e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 f88e 	bl	800f7c8 <UART_WaitOnFlagUntilTimeout>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d022      	beq.n	800f6f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ba:	e853 3f00 	ldrex	r3, [r3]
 800f6be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f6c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f6d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f6d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6d8:	e841 2300 	strex	r3, r2, [r1]
 800f6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f6de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d1e6      	bne.n	800f6b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2220      	movs	r2, #32
 800f6e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f6f4:	2303      	movs	r3, #3
 800f6f6:	e063      	b.n	800f7c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f003 0304 	and.w	r3, r3, #4
 800f702:	2b04      	cmp	r3, #4
 800f704:	d149      	bne.n	800f79a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f706:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f70a:	9300      	str	r3, [sp, #0]
 800f70c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f70e:	2200      	movs	r2, #0
 800f710:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 f857 	bl	800f7c8 <UART_WaitOnFlagUntilTimeout>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d03c      	beq.n	800f79a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f728:	e853 3f00 	ldrex	r3, [r3]
 800f72c:	623b      	str	r3, [r7, #32]
   return(result);
 800f72e:	6a3b      	ldr	r3, [r7, #32]
 800f730:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f734:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	461a      	mov	r2, r3
 800f73c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f73e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f740:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f742:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f746:	e841 2300 	strex	r3, r2, [r1]
 800f74a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d1e6      	bne.n	800f720 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	3308      	adds	r3, #8
 800f758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	e853 3f00 	ldrex	r3, [r3]
 800f760:	60fb      	str	r3, [r7, #12]
   return(result);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f023 0301 	bic.w	r3, r3, #1
 800f768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	3308      	adds	r3, #8
 800f770:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f772:	61fa      	str	r2, [r7, #28]
 800f774:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f776:	69b9      	ldr	r1, [r7, #24]
 800f778:	69fa      	ldr	r2, [r7, #28]
 800f77a:	e841 2300 	strex	r3, r2, [r1]
 800f77e:	617b      	str	r3, [r7, #20]
   return(result);
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d1e5      	bne.n	800f752 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2220      	movs	r2, #32
 800f78a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2200      	movs	r2, #0
 800f792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f796:	2303      	movs	r3, #3
 800f798:	e012      	b.n	800f7c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2220      	movs	r2, #32
 800f79e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2220      	movs	r2, #32
 800f7a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f7be:	2300      	movs	r3, #0
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3758      	adds	r7, #88	@ 0x58
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	603b      	str	r3, [r7, #0]
 800f7d4:	4613      	mov	r3, r2
 800f7d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7d8:	e04f      	b.n	800f87a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7da:	69bb      	ldr	r3, [r7, #24]
 800f7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e0:	d04b      	beq.n	800f87a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7e2:	f7f4 faaf 	bl	8003d44 <HAL_GetTick>
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	1ad3      	subs	r3, r2, r3
 800f7ec:	69ba      	ldr	r2, [r7, #24]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d302      	bcc.n	800f7f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800f7f2:	69bb      	ldr	r3, [r7, #24]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d101      	bne.n	800f7fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f7f8:	2303      	movs	r3, #3
 800f7fa:	e04e      	b.n	800f89a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f003 0304 	and.w	r3, r3, #4
 800f806:	2b00      	cmp	r3, #0
 800f808:	d037      	beq.n	800f87a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	2b80      	cmp	r3, #128	@ 0x80
 800f80e:	d034      	beq.n	800f87a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	2b40      	cmp	r3, #64	@ 0x40
 800f814:	d031      	beq.n	800f87a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	69db      	ldr	r3, [r3, #28]
 800f81c:	f003 0308 	and.w	r3, r3, #8
 800f820:	2b08      	cmp	r3, #8
 800f822:	d110      	bne.n	800f846 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2208      	movs	r2, #8
 800f82a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f82c:	68f8      	ldr	r0, [r7, #12]
 800f82e:	f000 f839 	bl	800f8a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2208      	movs	r2, #8
 800f836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	2200      	movs	r2, #0
 800f83e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f842:	2301      	movs	r3, #1
 800f844:	e029      	b.n	800f89a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	69db      	ldr	r3, [r3, #28]
 800f84c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f854:	d111      	bne.n	800f87a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f85e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f000 f81f 	bl	800f8a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2220      	movs	r2, #32
 800f86a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2200      	movs	r2, #0
 800f872:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f876:	2303      	movs	r3, #3
 800f878:	e00f      	b.n	800f89a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	69da      	ldr	r2, [r3, #28]
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	4013      	ands	r3, r2
 800f884:	68ba      	ldr	r2, [r7, #8]
 800f886:	429a      	cmp	r2, r3
 800f888:	bf0c      	ite	eq
 800f88a:	2301      	moveq	r3, #1
 800f88c:	2300      	movne	r3, #0
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	461a      	mov	r2, r3
 800f892:	79fb      	ldrb	r3, [r7, #7]
 800f894:	429a      	cmp	r2, r3
 800f896:	d0a0      	beq.n	800f7da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f898:	2300      	movs	r3, #0
}
 800f89a:	4618      	mov	r0, r3
 800f89c:	3710      	adds	r7, #16
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}
	...

0800f8a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b095      	sub	sp, #84	@ 0x54
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8b4:	e853 3f00 	ldrex	r3, [r3]
 800f8b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f8c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800f8cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f8d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f8d2:	e841 2300 	strex	r3, r2, [r1]
 800f8d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1e6      	bne.n	800f8ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	3308      	adds	r3, #8
 800f8e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e6:	6a3b      	ldr	r3, [r7, #32]
 800f8e8:	e853 3f00 	ldrex	r3, [r3]
 800f8ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800f8ee:	69fa      	ldr	r2, [r7, #28]
 800f8f0:	4b1e      	ldr	r3, [pc, #120]	@ (800f96c <UART_EndRxTransfer+0xc8>)
 800f8f2:	4013      	ands	r3, r2
 800f8f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	3308      	adds	r3, #8
 800f8fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f8fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f900:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f902:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f906:	e841 2300 	strex	r3, r2, [r1]
 800f90a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d1e5      	bne.n	800f8de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f916:	2b01      	cmp	r3, #1
 800f918:	d118      	bne.n	800f94c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	e853 3f00 	ldrex	r3, [r3]
 800f926:	60bb      	str	r3, [r7, #8]
   return(result);
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	f023 0310 	bic.w	r3, r3, #16
 800f92e:	647b      	str	r3, [r7, #68]	@ 0x44
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	461a      	mov	r2, r3
 800f936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f938:	61bb      	str	r3, [r7, #24]
 800f93a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f93c:	6979      	ldr	r1, [r7, #20]
 800f93e:	69ba      	ldr	r2, [r7, #24]
 800f940:	e841 2300 	strex	r3, r2, [r1]
 800f944:	613b      	str	r3, [r7, #16]
   return(result);
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d1e6      	bne.n	800f91a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2220      	movs	r2, #32
 800f950:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2200      	movs	r2, #0
 800f958:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2200      	movs	r2, #0
 800f95e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f960:	bf00      	nop
 800f962:	3754      	adds	r7, #84	@ 0x54
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr
 800f96c:	effffffe 	.word	0xeffffffe

0800f970 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f970:	b480      	push	{r7}
 800f972:	b085      	sub	sp, #20
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f97e:	2b01      	cmp	r3, #1
 800f980:	d101      	bne.n	800f986 <HAL_UARTEx_DisableFifoMode+0x16>
 800f982:	2302      	movs	r3, #2
 800f984:	e027      	b.n	800f9d6 <HAL_UARTEx_DisableFifoMode+0x66>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2201      	movs	r2, #1
 800f98a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2224      	movs	r2, #36	@ 0x24
 800f992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f022 0201 	bic.w	r2, r2, #1
 800f9ac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f9b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	68fa      	ldr	r2, [r7, #12]
 800f9c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2220      	movs	r2, #32
 800f9c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f9d4:	2300      	movs	r3, #0
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3714      	adds	r7, #20
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr

0800f9e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f9e2:	b580      	push	{r7, lr}
 800f9e4:	b084      	sub	sp, #16
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f9f2:	2b01      	cmp	r3, #1
 800f9f4:	d101      	bne.n	800f9fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f9f6:	2302      	movs	r3, #2
 800f9f8:	e02d      	b.n	800fa56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2201      	movs	r2, #1
 800f9fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2224      	movs	r2, #36	@ 0x24
 800fa06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f022 0201 	bic.w	r2, r2, #1
 800fa20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	689b      	ldr	r3, [r3, #8]
 800fa28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	683a      	ldr	r2, [r7, #0]
 800fa32:	430a      	orrs	r2, r1
 800fa34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 f850 	bl	800fadc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2220      	movs	r2, #32
 800fa48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa54:	2300      	movs	r3, #0
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b084      	sub	sp, #16
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
 800fa66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d101      	bne.n	800fa76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fa72:	2302      	movs	r3, #2
 800fa74:	e02d      	b.n	800fad2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2201      	movs	r2, #1
 800fa7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2224      	movs	r2, #36	@ 0x24
 800fa82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	681a      	ldr	r2, [r3, #0]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f022 0201 	bic.w	r2, r2, #1
 800fa9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	689b      	ldr	r3, [r3, #8]
 800faa4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	683a      	ldr	r2, [r7, #0]
 800faae:	430a      	orrs	r2, r1
 800fab0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 f812 	bl	800fadc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2220      	movs	r2, #32
 800fac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fad0:	2300      	movs	r3, #0
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3710      	adds	r7, #16
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
	...

0800fadc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fadc:	b480      	push	{r7}
 800fade:	b085      	sub	sp, #20
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d108      	bne.n	800fafe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2201      	movs	r2, #1
 800faf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2201      	movs	r2, #1
 800faf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fafc:	e031      	b.n	800fb62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fafe:	2310      	movs	r3, #16
 800fb00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fb02:	2310      	movs	r3, #16
 800fb04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	0e5b      	lsrs	r3, r3, #25
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	f003 0307 	and.w	r3, r3, #7
 800fb14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	689b      	ldr	r3, [r3, #8]
 800fb1c:	0f5b      	lsrs	r3, r3, #29
 800fb1e:	b2db      	uxtb	r3, r3
 800fb20:	f003 0307 	and.w	r3, r3, #7
 800fb24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb26:	7bbb      	ldrb	r3, [r7, #14]
 800fb28:	7b3a      	ldrb	r2, [r7, #12]
 800fb2a:	4911      	ldr	r1, [pc, #68]	@ (800fb70 <UARTEx_SetNbDataToProcess+0x94>)
 800fb2c:	5c8a      	ldrb	r2, [r1, r2]
 800fb2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb32:	7b3a      	ldrb	r2, [r7, #12]
 800fb34:	490f      	ldr	r1, [pc, #60]	@ (800fb74 <UARTEx_SetNbDataToProcess+0x98>)
 800fb36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb38:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb3c:	b29a      	uxth	r2, r3
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb44:	7bfb      	ldrb	r3, [r7, #15]
 800fb46:	7b7a      	ldrb	r2, [r7, #13]
 800fb48:	4909      	ldr	r1, [pc, #36]	@ (800fb70 <UARTEx_SetNbDataToProcess+0x94>)
 800fb4a:	5c8a      	ldrb	r2, [r1, r2]
 800fb4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fb50:	7b7a      	ldrb	r2, [r7, #13]
 800fb52:	4908      	ldr	r1, [pc, #32]	@ (800fb74 <UARTEx_SetNbDataToProcess+0x98>)
 800fb54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb56:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb5a:	b29a      	uxth	r2, r3
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fb62:	bf00      	nop
 800fb64:	3714      	adds	r7, #20
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr
 800fb6e:	bf00      	nop
 800fb70:	0802007c 	.word	0x0802007c
 800fb74:	08020084 	.word	0x08020084

0800fb78 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fb78:	b084      	sub	sp, #16
 800fb7a:	b480      	push	{r7}
 800fb7c:	b085      	sub	sp, #20
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
 800fb82:	f107 001c 	add.w	r0, r7, #28
 800fb86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800fb8e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800fb90:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800fb92:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800fb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800fb96:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800fb98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800fb9a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fb9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800fb9e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	4313      	orrs	r3, r2
 800fba4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	685a      	ldr	r2, [r3, #4]
 800fbaa:	4b07      	ldr	r3, [pc, #28]	@ (800fbc8 <SDMMC_Init+0x50>)
 800fbac:	4013      	ands	r3, r2
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	431a      	orrs	r2, r3
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fbb6:	2300      	movs	r3, #0
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3714      	adds	r7, #20
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	b004      	add	sp, #16
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop
 800fbc8:	ffc02c00 	.word	0xffc02c00

0800fbcc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b083      	sub	sp, #12
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	370c      	adds	r7, #12
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe4:	4770      	bx	lr

0800fbe6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800fbe6:	b480      	push	{r7}
 800fbe8:	b083      	sub	sp, #12
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	6078      	str	r0, [r7, #4]
 800fbee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800fbfa:	2300      	movs	r3, #0
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	370c      	adds	r7, #12
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr

0800fc08 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b083      	sub	sp, #12
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f043 0203 	orr.w	r2, r3, #3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fc1c:	2300      	movs	r3, #0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	370c      	adds	r7, #12
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr

0800fc2a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800fc2a:	b480      	push	{r7}
 800fc2c:	b083      	sub	sp, #12
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f003 0303 	and.w	r3, r3, #3
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	370c      	adds	r7, #12
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr
	...

0800fc48 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b085      	sub	sp, #20
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fc52:	2300      	movs	r3, #0
 800fc54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fc66:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800fc6c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800fc72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	4313      	orrs	r3, r2
 800fc78:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	68da      	ldr	r2, [r3, #12]
 800fc7e:	4b06      	ldr	r3, [pc, #24]	@ (800fc98 <SDMMC_SendCommand+0x50>)
 800fc80:	4013      	ands	r3, r2
 800fc82:	68fa      	ldr	r2, [r7, #12]
 800fc84:	431a      	orrs	r2, r3
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fc8a:	2300      	movs	r3, #0
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3714      	adds	r7, #20
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr
 800fc98:	fffee0c0 	.word	0xfffee0c0

0800fc9c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b083      	sub	sp, #12
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	691b      	ldr	r3, [r3, #16]
 800fca8:	b2db      	uxtb	r3, r3
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	370c      	adds	r7, #12
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb4:	4770      	bx	lr

0800fcb6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fcb6:	b480      	push	{r7}
 800fcb8:	b085      	sub	sp, #20
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	6078      	str	r0, [r7, #4]
 800fcbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	3314      	adds	r3, #20
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	4413      	add	r3, r2
 800fcca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	681b      	ldr	r3, [r3, #0]
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3714      	adds	r7, #20
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b085      	sub	sp, #20
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fce6:	2300      	movs	r3, #0
 800fce8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	681a      	ldr	r2, [r3, #0]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	685a      	ldr	r2, [r3, #4]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fd02:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800fd08:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800fd0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fd10:	68fa      	ldr	r2, [r7, #12]
 800fd12:	4313      	orrs	r3, r2
 800fd14:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	431a      	orrs	r2, r3
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800fd26:	2300      	movs	r3, #0

}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3714      	adds	r7, #20
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr

0800fd34 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b088      	sub	sp, #32
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fd42:	2310      	movs	r3, #16
 800fd44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd56:	f107 0308 	add.w	r3, r7, #8
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f7ff ff73 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fd62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd66:	2110      	movs	r1, #16
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 fa5f 	bl	801022c <SDMMC_GetCmdResp1>
 800fd6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd70:	69fb      	ldr	r3, [r7, #28]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3720      	adds	r7, #32
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b088      	sub	sp, #32
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
 800fd82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fd88:	2311      	movs	r3, #17
 800fd8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd92:	2300      	movs	r3, #0
 800fd94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd9c:	f107 0308 	add.w	r3, r7, #8
 800fda0:	4619      	mov	r1, r3
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f7ff ff50 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fda8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fdac:	2111      	movs	r1, #17
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f000 fa3c 	bl	801022c <SDMMC_GetCmdResp1>
 800fdb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdb6:	69fb      	ldr	r3, [r7, #28]
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3720      	adds	r7, #32
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b088      	sub	sp, #32
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fdce:	2312      	movs	r3, #18
 800fdd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fdd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fde0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fde2:	f107 0308 	add.w	r3, r7, #8
 800fde6:	4619      	mov	r1, r3
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7ff ff2d 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fdee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fdf2:	2112      	movs	r1, #18
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f000 fa19 	bl	801022c <SDMMC_GetCmdResp1>
 800fdfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdfc:	69fb      	ldr	r3, [r7, #28]
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3720      	adds	r7, #32
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b088      	sub	sp, #32
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
 800fe0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fe14:	2318      	movs	r3, #24
 800fe16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe28:	f107 0308 	add.w	r3, r7, #8
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f7ff ff0a 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fe34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe38:	2118      	movs	r1, #24
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f000 f9f6 	bl	801022c <SDMMC_GetCmdResp1>
 800fe40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe42:	69fb      	ldr	r3, [r7, #28]
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3720      	adds	r7, #32
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b088      	sub	sp, #32
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fe5a:	2319      	movs	r3, #25
 800fe5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe64:	2300      	movs	r3, #0
 800fe66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe6e:	f107 0308 	add.w	r3, r7, #8
 800fe72:	4619      	mov	r1, r3
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f7ff fee7 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fe7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe7e:	2119      	movs	r1, #25
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 f9d3 	bl	801022c <SDMMC_GetCmdResp1>
 800fe86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe88:	69fb      	ldr	r3, [r7, #28]
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3720      	adds	r7, #32
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
	...

0800fe94 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b088      	sub	sp, #32
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fea0:	230c      	movs	r3, #12
 800fea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800feaa:	2300      	movs	r3, #0
 800feac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800feae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800feb2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fecc:	f107 0308 	add.w	r3, r7, #8
 800fed0:	4619      	mov	r1, r3
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f7ff feb8 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fed8:	4a0b      	ldr	r2, [pc, #44]	@ (800ff08 <SDMMC_CmdStopTransfer+0x74>)
 800feda:	210c      	movs	r1, #12
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 f9a5 	bl	801022c <SDMMC_GetCmdResp1>
 800fee2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	68db      	ldr	r3, [r3, #12]
 800fee8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fef6:	d101      	bne.n	800fefc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800fef8:	2300      	movs	r3, #0
 800fefa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800fefc:	69fb      	ldr	r3, [r7, #28]
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3720      	adds	r7, #32
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	05f5e100 	.word	0x05f5e100

0800ff0c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b088      	sub	sp, #32
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ff1a:	2307      	movs	r3, #7
 800ff1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff24:	2300      	movs	r3, #0
 800ff26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff2e:	f107 0308 	add.w	r3, r7, #8
 800ff32:	4619      	mov	r1, r3
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f7ff fe87 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ff3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff3e:	2107      	movs	r1, #7
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f000 f973 	bl	801022c <SDMMC_GetCmdResp1>
 800ff46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff48:	69fb      	ldr	r3, [r7, #28]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3720      	adds	r7, #32
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}

0800ff52 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ff52:	b580      	push	{r7, lr}
 800ff54:	b088      	sub	sp, #32
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ff62:	2300      	movs	r3, #0
 800ff64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff66:	2300      	movs	r3, #0
 800ff68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff70:	f107 0308 	add.w	r3, r7, #8
 800ff74:	4619      	mov	r1, r3
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f7ff fe66 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	f000 fb97 	bl	80106b0 <SDMMC_GetCmdError>
 800ff82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff84:	69fb      	ldr	r3, [r7, #28]
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3720      	adds	r7, #32
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}

0800ff8e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ff8e:	b580      	push	{r7, lr}
 800ff90:	b088      	sub	sp, #32
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ff96:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ff9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ff9c:	2308      	movs	r3, #8
 800ff9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ffa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ffa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ffaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ffae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ffb0:	f107 0308 	add.w	r3, r7, #8
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f7ff fe46 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f000 fb29 	bl	8010614 <SDMMC_GetCmdResp7>
 800ffc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffc4:	69fb      	ldr	r3, [r7, #28]
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3720      	adds	r7, #32
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}

0800ffce <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ffce:	b580      	push	{r7, lr}
 800ffd0:	b088      	sub	sp, #32
 800ffd2:	af00      	add	r7, sp, #0
 800ffd4:	6078      	str	r0, [r7, #4]
 800ffd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ffdc:	2337      	movs	r3, #55	@ 0x37
 800ffde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ffe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ffe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ffea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ffee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fff0:	f107 0308 	add.w	r3, r7, #8
 800fff4:	4619      	mov	r1, r3
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f7ff fe26 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010000:	2137      	movs	r1, #55	@ 0x37
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 f912 	bl	801022c <SDMMC_GetCmdResp1>
 8010008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801000a:	69fb      	ldr	r3, [r7, #28]
}
 801000c:	4618      	mov	r0, r3
 801000e:	3720      	adds	r7, #32
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b088      	sub	sp, #32
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010022:	2329      	movs	r3, #41	@ 0x29
 8010024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010026:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801002a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801002c:	2300      	movs	r3, #0
 801002e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010030:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010034:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010036:	f107 0308 	add.w	r3, r7, #8
 801003a:	4619      	mov	r1, r3
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f7ff fe03 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f000 fa2e 	bl	80104a4 <SDMMC_GetCmdResp3>
 8010048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801004a:	69fb      	ldr	r3, [r7, #28]
}
 801004c:	4618      	mov	r0, r3
 801004e:	3720      	adds	r7, #32
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b088      	sub	sp, #32
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010062:	2306      	movs	r3, #6
 8010064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010066:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801006a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801006c:	2300      	movs	r3, #0
 801006e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010074:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010076:	f107 0308 	add.w	r3, r7, #8
 801007a:	4619      	mov	r1, r3
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f7ff fde3 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010086:	2106      	movs	r1, #6
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f000 f8cf 	bl	801022c <SDMMC_GetCmdResp1>
 801008e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010090:	69fb      	ldr	r3, [r7, #28]
}
 8010092:	4618      	mov	r0, r3
 8010094:	3720      	adds	r7, #32
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}

0801009a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801009a:	b580      	push	{r7, lr}
 801009c:	b088      	sub	sp, #32
 801009e:	af00      	add	r7, sp, #0
 80100a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80100a2:	2300      	movs	r3, #0
 80100a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80100a6:	2333      	movs	r3, #51	@ 0x33
 80100a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80100ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100b0:	2300      	movs	r3, #0
 80100b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100ba:	f107 0308 	add.w	r3, r7, #8
 80100be:	4619      	mov	r1, r3
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f7ff fdc1 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80100c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100ca:	2133      	movs	r1, #51	@ 0x33
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f000 f8ad 	bl	801022c <SDMMC_GetCmdResp1>
 80100d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100d4:	69fb      	ldr	r3, [r7, #28]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3720      	adds	r7, #32
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80100de:	b580      	push	{r7, lr}
 80100e0:	b088      	sub	sp, #32
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80100e6:	2300      	movs	r3, #0
 80100e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80100ea:	2302      	movs	r3, #2
 80100ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80100ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80100f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100f4:	2300      	movs	r3, #0
 80100f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100fe:	f107 0308 	add.w	r3, r7, #8
 8010102:	4619      	mov	r1, r3
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f7ff fd9f 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f000 f980 	bl	8010410 <SDMMC_GetCmdResp2>
 8010110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010112:	69fb      	ldr	r3, [r7, #28]
}
 8010114:	4618      	mov	r0, r3
 8010116:	3720      	adds	r7, #32
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b088      	sub	sp, #32
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801012a:	2309      	movs	r3, #9
 801012c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801012e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010134:	2300      	movs	r3, #0
 8010136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801013c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801013e:	f107 0308 	add.w	r3, r7, #8
 8010142:	4619      	mov	r1, r3
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f7ff fd7f 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f000 f960 	bl	8010410 <SDMMC_GetCmdResp2>
 8010150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010152:	69fb      	ldr	r3, [r7, #28]
}
 8010154:	4618      	mov	r0, r3
 8010156:	3720      	adds	r7, #32
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b088      	sub	sp, #32
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010166:	2300      	movs	r3, #0
 8010168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801016a:	2303      	movs	r3, #3
 801016c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801016e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010174:	2300      	movs	r3, #0
 8010176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801017c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801017e:	f107 0308 	add.w	r3, r7, #8
 8010182:	4619      	mov	r1, r3
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f7ff fd5f 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801018a:	683a      	ldr	r2, [r7, #0]
 801018c:	2103      	movs	r1, #3
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 f9c8 	bl	8010524 <SDMMC_GetCmdResp6>
 8010194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010196:	69fb      	ldr	r3, [r7, #28]
}
 8010198:	4618      	mov	r0, r3
 801019a:	3720      	adds	r7, #32
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b088      	sub	sp, #32
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80101ae:	230d      	movs	r3, #13
 80101b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101b8:	2300      	movs	r3, #0
 80101ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80101c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101c2:	f107 0308 	add.w	r3, r7, #8
 80101c6:	4619      	mov	r1, r3
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7ff fd3d 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80101ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101d2:	210d      	movs	r1, #13
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f000 f829 	bl	801022c <SDMMC_GetCmdResp1>
 80101da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101dc:	69fb      	ldr	r3, [r7, #28]
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3720      	adds	r7, #32
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}

080101e6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80101e6:	b580      	push	{r7, lr}
 80101e8:	b088      	sub	sp, #32
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80101ee:	2300      	movs	r3, #0
 80101f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80101f2:	230d      	movs	r3, #13
 80101f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80101fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101fc:	2300      	movs	r3, #0
 80101fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010204:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010206:	f107 0308 	add.w	r3, r7, #8
 801020a:	4619      	mov	r1, r3
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f7ff fd1b 	bl	800fc48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010216:	210d      	movs	r1, #13
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f000 f807 	bl	801022c <SDMMC_GetCmdResp1>
 801021e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010220:	69fb      	ldr	r3, [r7, #28]
}
 8010222:	4618      	mov	r0, r3
 8010224:	3720      	adds	r7, #32
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}
	...

0801022c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b088      	sub	sp, #32
 8010230:	af00      	add	r7, sp, #0
 8010232:	60f8      	str	r0, [r7, #12]
 8010234:	460b      	mov	r3, r1
 8010236:	607a      	str	r2, [r7, #4]
 8010238:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801023a:	4b70      	ldr	r3, [pc, #448]	@ (80103fc <SDMMC_GetCmdResp1+0x1d0>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	4a70      	ldr	r2, [pc, #448]	@ (8010400 <SDMMC_GetCmdResp1+0x1d4>)
 8010240:	fba2 2303 	umull	r2, r3, r2, r3
 8010244:	0a5a      	lsrs	r2, r3, #9
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	fb02 f303 	mul.w	r3, r2, r3
 801024c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801024e:	69fb      	ldr	r3, [r7, #28]
 8010250:	1e5a      	subs	r2, r3, #1
 8010252:	61fa      	str	r2, [r7, #28]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d102      	bne.n	801025e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010258:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801025c:	e0c9      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010262:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010264:	69ba      	ldr	r2, [r7, #24]
 8010266:	4b67      	ldr	r3, [pc, #412]	@ (8010404 <SDMMC_GetCmdResp1+0x1d8>)
 8010268:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801026a:	2b00      	cmp	r3, #0
 801026c:	d0ef      	beq.n	801024e <SDMMC_GetCmdResp1+0x22>
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010274:	2b00      	cmp	r3, #0
 8010276:	d1ea      	bne.n	801024e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801027c:	f003 0304 	and.w	r3, r3, #4
 8010280:	2b00      	cmp	r3, #0
 8010282:	d004      	beq.n	801028e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2204      	movs	r2, #4
 8010288:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801028a:	2304      	movs	r3, #4
 801028c:	e0b1      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010292:	f003 0301 	and.w	r3, r3, #1
 8010296:	2b00      	cmp	r3, #0
 8010298:	d004      	beq.n	80102a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	2201      	movs	r2, #1
 801029e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80102a0:	2301      	movs	r3, #1
 80102a2:	e0a6      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	4a58      	ldr	r2, [pc, #352]	@ (8010408 <SDMMC_GetCmdResp1+0x1dc>)
 80102a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80102aa:	68f8      	ldr	r0, [r7, #12]
 80102ac:	f7ff fcf6 	bl	800fc9c <SDMMC_GetCommandResponse>
 80102b0:	4603      	mov	r3, r0
 80102b2:	461a      	mov	r2, r3
 80102b4:	7afb      	ldrb	r3, [r7, #11]
 80102b6:	4293      	cmp	r3, r2
 80102b8:	d001      	beq.n	80102be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80102ba:	2301      	movs	r3, #1
 80102bc:	e099      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80102be:	2100      	movs	r1, #0
 80102c0:	68f8      	ldr	r0, [r7, #12]
 80102c2:	f7ff fcf8 	bl	800fcb6 <SDMMC_GetResponse>
 80102c6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80102c8:	697a      	ldr	r2, [r7, #20]
 80102ca:	4b50      	ldr	r3, [pc, #320]	@ (801040c <SDMMC_GetCmdResp1+0x1e0>)
 80102cc:	4013      	ands	r3, r2
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d101      	bne.n	80102d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80102d2:	2300      	movs	r3, #0
 80102d4:	e08d      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	da02      	bge.n	80102e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80102dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80102e0:	e087      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d001      	beq.n	80102f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80102ec:	2340      	movs	r3, #64	@ 0x40
 80102ee:	e080      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d001      	beq.n	80102fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80102fa:	2380      	movs	r3, #128	@ 0x80
 80102fc:	e079      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010304:	2b00      	cmp	r3, #0
 8010306:	d002      	beq.n	801030e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010308:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801030c:	e071      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010314:	2b00      	cmp	r3, #0
 8010316:	d002      	beq.n	801031e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010318:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801031c:	e069      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010324:	2b00      	cmp	r3, #0
 8010326:	d002      	beq.n	801032e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801032c:	e061      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010334:	2b00      	cmp	r3, #0
 8010336:	d002      	beq.n	801033e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010338:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801033c:	e059      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010344:	2b00      	cmp	r3, #0
 8010346:	d002      	beq.n	801034e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801034c:	e051      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010354:	2b00      	cmp	r3, #0
 8010356:	d002      	beq.n	801035e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010358:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801035c:	e049      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010364:	2b00      	cmp	r3, #0
 8010366:	d002      	beq.n	801036e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010368:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801036c:	e041      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010374:	2b00      	cmp	r3, #0
 8010376:	d002      	beq.n	801037e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010378:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801037c:	e039      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010384:	2b00      	cmp	r3, #0
 8010386:	d002      	beq.n	801038e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010388:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801038c:	e031      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010394:	2b00      	cmp	r3, #0
 8010396:	d002      	beq.n	801039e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010398:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801039c:	e029      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d002      	beq.n	80103ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80103a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80103ac:	e021      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d002      	beq.n	80103be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80103b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80103bc:	e019      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d002      	beq.n	80103ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80103c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80103cc:	e011      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d002      	beq.n	80103de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80103d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80103dc:	e009      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	f003 0308 	and.w	r3, r3, #8
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d002      	beq.n	80103ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80103e8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80103ec:	e001      	b.n	80103f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80103ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3720      	adds	r7, #32
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
 80103fa:	bf00      	nop
 80103fc:	24000000 	.word	0x24000000
 8010400:	10624dd3 	.word	0x10624dd3
 8010404:	00200045 	.word	0x00200045
 8010408:	002000c5 	.word	0x002000c5
 801040c:	fdffe008 	.word	0xfdffe008

08010410 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010410:	b480      	push	{r7}
 8010412:	b085      	sub	sp, #20
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010418:	4b1f      	ldr	r3, [pc, #124]	@ (8010498 <SDMMC_GetCmdResp2+0x88>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	4a1f      	ldr	r2, [pc, #124]	@ (801049c <SDMMC_GetCmdResp2+0x8c>)
 801041e:	fba2 2303 	umull	r2, r3, r2, r3
 8010422:	0a5b      	lsrs	r3, r3, #9
 8010424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010428:	fb02 f303 	mul.w	r3, r2, r3
 801042c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	1e5a      	subs	r2, r3, #1
 8010432:	60fa      	str	r2, [r7, #12]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d102      	bne.n	801043e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010438:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801043c:	e026      	b.n	801048c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010442:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801044a:	2b00      	cmp	r3, #0
 801044c:	d0ef      	beq.n	801042e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1ea      	bne.n	801042e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801045c:	f003 0304 	and.w	r3, r3, #4
 8010460:	2b00      	cmp	r3, #0
 8010462:	d004      	beq.n	801046e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2204      	movs	r2, #4
 8010468:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801046a:	2304      	movs	r3, #4
 801046c:	e00e      	b.n	801048c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010472:	f003 0301 	and.w	r3, r3, #1
 8010476:	2b00      	cmp	r3, #0
 8010478:	d004      	beq.n	8010484 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2201      	movs	r2, #1
 801047e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010480:	2301      	movs	r3, #1
 8010482:	e003      	b.n	801048c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	4a06      	ldr	r2, [pc, #24]	@ (80104a0 <SDMMC_GetCmdResp2+0x90>)
 8010488:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801048a:	2300      	movs	r3, #0
}
 801048c:	4618      	mov	r0, r3
 801048e:	3714      	adds	r7, #20
 8010490:	46bd      	mov	sp, r7
 8010492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010496:	4770      	bx	lr
 8010498:	24000000 	.word	0x24000000
 801049c:	10624dd3 	.word	0x10624dd3
 80104a0:	002000c5 	.word	0x002000c5

080104a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80104a4:	b480      	push	{r7}
 80104a6:	b085      	sub	sp, #20
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80104ac:	4b1a      	ldr	r3, [pc, #104]	@ (8010518 <SDMMC_GetCmdResp3+0x74>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	4a1a      	ldr	r2, [pc, #104]	@ (801051c <SDMMC_GetCmdResp3+0x78>)
 80104b2:	fba2 2303 	umull	r2, r3, r2, r3
 80104b6:	0a5b      	lsrs	r3, r3, #9
 80104b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80104bc:	fb02 f303 	mul.w	r3, r2, r3
 80104c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	1e5a      	subs	r2, r3, #1
 80104c6:	60fa      	str	r2, [r7, #12]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d102      	bne.n	80104d2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80104cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80104d0:	e01b      	b.n	801050a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d0ef      	beq.n	80104c2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d1ea      	bne.n	80104c2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104f0:	f003 0304 	and.w	r3, r3, #4
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d004      	beq.n	8010502 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2204      	movs	r2, #4
 80104fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80104fe:	2304      	movs	r3, #4
 8010500:	e003      	b.n	801050a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	4a06      	ldr	r2, [pc, #24]	@ (8010520 <SDMMC_GetCmdResp3+0x7c>)
 8010506:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010508:	2300      	movs	r3, #0
}
 801050a:	4618      	mov	r0, r3
 801050c:	3714      	adds	r7, #20
 801050e:	46bd      	mov	sp, r7
 8010510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010514:	4770      	bx	lr
 8010516:	bf00      	nop
 8010518:	24000000 	.word	0x24000000
 801051c:	10624dd3 	.word	0x10624dd3
 8010520:	002000c5 	.word	0x002000c5

08010524 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b088      	sub	sp, #32
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	460b      	mov	r3, r1
 801052e:	607a      	str	r2, [r7, #4]
 8010530:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010532:	4b35      	ldr	r3, [pc, #212]	@ (8010608 <SDMMC_GetCmdResp6+0xe4>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	4a35      	ldr	r2, [pc, #212]	@ (801060c <SDMMC_GetCmdResp6+0xe8>)
 8010538:	fba2 2303 	umull	r2, r3, r2, r3
 801053c:	0a5b      	lsrs	r3, r3, #9
 801053e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010542:	fb02 f303 	mul.w	r3, r2, r3
 8010546:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010548:	69fb      	ldr	r3, [r7, #28]
 801054a:	1e5a      	subs	r2, r3, #1
 801054c:	61fa      	str	r2, [r7, #28]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d102      	bne.n	8010558 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010552:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010556:	e052      	b.n	80105fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801055c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010564:	2b00      	cmp	r3, #0
 8010566:	d0ef      	beq.n	8010548 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010568:	69bb      	ldr	r3, [r7, #24]
 801056a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801056e:	2b00      	cmp	r3, #0
 8010570:	d1ea      	bne.n	8010548 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010576:	f003 0304 	and.w	r3, r3, #4
 801057a:	2b00      	cmp	r3, #0
 801057c:	d004      	beq.n	8010588 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2204      	movs	r2, #4
 8010582:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010584:	2304      	movs	r3, #4
 8010586:	e03a      	b.n	80105fe <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801058c:	f003 0301 	and.w	r3, r3, #1
 8010590:	2b00      	cmp	r3, #0
 8010592:	d004      	beq.n	801059e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2201      	movs	r2, #1
 8010598:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801059a:	2301      	movs	r3, #1
 801059c:	e02f      	b.n	80105fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801059e:	68f8      	ldr	r0, [r7, #12]
 80105a0:	f7ff fb7c 	bl	800fc9c <SDMMC_GetCommandResponse>
 80105a4:	4603      	mov	r3, r0
 80105a6:	461a      	mov	r2, r3
 80105a8:	7afb      	ldrb	r3, [r7, #11]
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d001      	beq.n	80105b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80105ae:	2301      	movs	r3, #1
 80105b0:	e025      	b.n	80105fe <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	4a16      	ldr	r2, [pc, #88]	@ (8010610 <SDMMC_GetCmdResp6+0xec>)
 80105b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80105b8:	2100      	movs	r1, #0
 80105ba:	68f8      	ldr	r0, [r7, #12]
 80105bc:	f7ff fb7b 	bl	800fcb6 <SDMMC_GetResponse>
 80105c0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d106      	bne.n	80105da <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	0c1b      	lsrs	r3, r3, #16
 80105d0:	b29a      	uxth	r2, r3
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80105d6:	2300      	movs	r3, #0
 80105d8:	e011      	b.n	80105fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d002      	beq.n	80105ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80105e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80105e8:	e009      	b.n	80105fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d002      	beq.n	80105fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80105f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80105f8:	e001      	b.n	80105fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80105fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3720      	adds	r7, #32
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	24000000 	.word	0x24000000
 801060c:	10624dd3 	.word	0x10624dd3
 8010610:	002000c5 	.word	0x002000c5

08010614 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010614:	b480      	push	{r7}
 8010616:	b085      	sub	sp, #20
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801061c:	4b22      	ldr	r3, [pc, #136]	@ (80106a8 <SDMMC_GetCmdResp7+0x94>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	4a22      	ldr	r2, [pc, #136]	@ (80106ac <SDMMC_GetCmdResp7+0x98>)
 8010622:	fba2 2303 	umull	r2, r3, r2, r3
 8010626:	0a5b      	lsrs	r3, r3, #9
 8010628:	f241 3288 	movw	r2, #5000	@ 0x1388
 801062c:	fb02 f303 	mul.w	r3, r2, r3
 8010630:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	1e5a      	subs	r2, r3, #1
 8010636:	60fa      	str	r2, [r7, #12]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d102      	bne.n	8010642 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801063c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010640:	e02c      	b.n	801069c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010646:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801064e:	2b00      	cmp	r3, #0
 8010650:	d0ef      	beq.n	8010632 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1ea      	bne.n	8010632 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010660:	f003 0304 	and.w	r3, r3, #4
 8010664:	2b00      	cmp	r3, #0
 8010666:	d004      	beq.n	8010672 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2204      	movs	r2, #4
 801066c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801066e:	2304      	movs	r3, #4
 8010670:	e014      	b.n	801069c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010676:	f003 0301 	and.w	r3, r3, #1
 801067a:	2b00      	cmp	r3, #0
 801067c:	d004      	beq.n	8010688 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2201      	movs	r2, #1
 8010682:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010684:	2301      	movs	r3, #1
 8010686:	e009      	b.n	801069c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801068c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010690:	2b00      	cmp	r3, #0
 8010692:	d002      	beq.n	801069a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2240      	movs	r2, #64	@ 0x40
 8010698:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801069a:	2300      	movs	r3, #0

}
 801069c:	4618      	mov	r0, r3
 801069e:	3714      	adds	r7, #20
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr
 80106a8:	24000000 	.word	0x24000000
 80106ac:	10624dd3 	.word	0x10624dd3

080106b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b085      	sub	sp, #20
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80106b8:	4b11      	ldr	r3, [pc, #68]	@ (8010700 <SDMMC_GetCmdError+0x50>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	4a11      	ldr	r2, [pc, #68]	@ (8010704 <SDMMC_GetCmdError+0x54>)
 80106be:	fba2 2303 	umull	r2, r3, r2, r3
 80106c2:	0a5b      	lsrs	r3, r3, #9
 80106c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80106c8:	fb02 f303 	mul.w	r3, r2, r3
 80106cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	1e5a      	subs	r2, r3, #1
 80106d2:	60fa      	str	r2, [r7, #12]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d102      	bne.n	80106de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80106dc:	e009      	b.n	80106f2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d0f1      	beq.n	80106ce <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	4a06      	ldr	r2, [pc, #24]	@ (8010708 <SDMMC_GetCmdError+0x58>)
 80106ee:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80106f0:	2300      	movs	r3, #0
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3714      	adds	r7, #20
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	24000000 	.word	0x24000000
 8010704:	10624dd3 	.word	0x10624dd3
 8010708:	002000c5 	.word	0x002000c5

0801070c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801070c:	b084      	sub	sp, #16
 801070e:	b580      	push	{r7, lr}
 8010710:	b084      	sub	sp, #16
 8010712:	af00      	add	r7, sp, #0
 8010714:	6078      	str	r0, [r7, #4]
 8010716:	f107 001c 	add.w	r0, r7, #28
 801071a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801071e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010722:	2b01      	cmp	r3, #1
 8010724:	d121      	bne.n	801076a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801072a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	68da      	ldr	r2, [r3, #12]
 8010736:	4b2c      	ldr	r3, [pc, #176]	@ (80107e8 <USB_CoreInit+0xdc>)
 8010738:	4013      	ands	r3, r2
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	68db      	ldr	r3, [r3, #12]
 8010742:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801074a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801074e:	2b01      	cmp	r3, #1
 8010750:	d105      	bne.n	801075e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	68db      	ldr	r3, [r3, #12]
 8010756:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 faaa 	bl	8010cb8 <USB_CoreReset>
 8010764:	4603      	mov	r3, r0
 8010766:	73fb      	strb	r3, [r7, #15]
 8010768:	e01b      	b.n	80107a2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	68db      	ldr	r3, [r3, #12]
 801076e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f000 fa9e 	bl	8010cb8 <USB_CoreReset>
 801077c:	4603      	mov	r3, r0
 801077e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010780:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010784:	2b00      	cmp	r3, #0
 8010786:	d106      	bne.n	8010796 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801078c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	639a      	str	r2, [r3, #56]	@ 0x38
 8010794:	e005      	b.n	80107a2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801079a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80107a2:	7fbb      	ldrb	r3, [r7, #30]
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d116      	bne.n	80107d6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80107b6:	4b0d      	ldr	r3, [pc, #52]	@ (80107ec <USB_CoreInit+0xe0>)
 80107b8:	4313      	orrs	r3, r2
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	689b      	ldr	r3, [r3, #8]
 80107c2:	f043 0206 	orr.w	r2, r3, #6
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	689b      	ldr	r3, [r3, #8]
 80107ce:	f043 0220 	orr.w	r2, r3, #32
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80107d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3710      	adds	r7, #16
 80107dc:	46bd      	mov	sp, r7
 80107de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80107e2:	b004      	add	sp, #16
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop
 80107e8:	ffbdffbf 	.word	0xffbdffbf
 80107ec:	03ee0000 	.word	0x03ee0000

080107f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	689b      	ldr	r3, [r3, #8]
 80107fc:	f023 0201 	bic.w	r2, r3, #1
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010804:	2300      	movs	r3, #0
}
 8010806:	4618      	mov	r0, r3
 8010808:	370c      	adds	r7, #12
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010812:	b580      	push	{r7, lr}
 8010814:	b084      	sub	sp, #16
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
 801081a:	460b      	mov	r3, r1
 801081c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801081e:	2300      	movs	r3, #0
 8010820:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801082e:	78fb      	ldrb	r3, [r7, #3]
 8010830:	2b01      	cmp	r3, #1
 8010832:	d115      	bne.n	8010860 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	68db      	ldr	r3, [r3, #12]
 8010838:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010840:	200a      	movs	r0, #10
 8010842:	f7f3 fa8b 	bl	8003d5c <HAL_Delay>
      ms += 10U;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	330a      	adds	r3, #10
 801084a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f000 fa25 	bl	8010c9c <USB_GetMode>
 8010852:	4603      	mov	r3, r0
 8010854:	2b01      	cmp	r3, #1
 8010856:	d01e      	beq.n	8010896 <USB_SetCurrentMode+0x84>
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	2bc7      	cmp	r3, #199	@ 0xc7
 801085c:	d9f0      	bls.n	8010840 <USB_SetCurrentMode+0x2e>
 801085e:	e01a      	b.n	8010896 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010860:	78fb      	ldrb	r3, [r7, #3]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d115      	bne.n	8010892 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	68db      	ldr	r3, [r3, #12]
 801086a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010872:	200a      	movs	r0, #10
 8010874:	f7f3 fa72 	bl	8003d5c <HAL_Delay>
      ms += 10U;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	330a      	adds	r3, #10
 801087c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f000 fa0c 	bl	8010c9c <USB_GetMode>
 8010884:	4603      	mov	r3, r0
 8010886:	2b00      	cmp	r3, #0
 8010888:	d005      	beq.n	8010896 <USB_SetCurrentMode+0x84>
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2bc7      	cmp	r3, #199	@ 0xc7
 801088e:	d9f0      	bls.n	8010872 <USB_SetCurrentMode+0x60>
 8010890:	e001      	b.n	8010896 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010892:	2301      	movs	r3, #1
 8010894:	e005      	b.n	80108a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	2bc8      	cmp	r3, #200	@ 0xc8
 801089a:	d101      	bne.n	80108a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801089c:	2301      	movs	r3, #1
 801089e:	e000      	b.n	80108a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80108a0:	2300      	movs	r3, #0
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3710      	adds	r7, #16
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
	...

080108ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80108ac:	b084      	sub	sp, #16
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b086      	sub	sp, #24
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
 80108b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80108ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80108be:	2300      	movs	r3, #0
 80108c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80108c6:	2300      	movs	r3, #0
 80108c8:	613b      	str	r3, [r7, #16]
 80108ca:	e009      	b.n	80108e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	3340      	adds	r3, #64	@ 0x40
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	4413      	add	r3, r2
 80108d6:	2200      	movs	r2, #0
 80108d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80108da:	693b      	ldr	r3, [r7, #16]
 80108dc:	3301      	adds	r3, #1
 80108de:	613b      	str	r3, [r7, #16]
 80108e0:	693b      	ldr	r3, [r7, #16]
 80108e2:	2b0e      	cmp	r3, #14
 80108e4:	d9f2      	bls.n	80108cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80108e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d11c      	bne.n	8010928 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	68fa      	ldr	r2, [r7, #12]
 80108f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80108fc:	f043 0302 	orr.w	r3, r3, #2
 8010900:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010906:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	601a      	str	r2, [r3, #0]
 8010926:	e005      	b.n	8010934 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801092c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801093a:	461a      	mov	r2, r3
 801093c:	2300      	movs	r3, #0
 801093e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010940:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010944:	2b01      	cmp	r3, #1
 8010946:	d10d      	bne.n	8010964 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801094c:	2b00      	cmp	r3, #0
 801094e:	d104      	bne.n	801095a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010950:	2100      	movs	r1, #0
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f000 f968 	bl	8010c28 <USB_SetDevSpeed>
 8010958:	e008      	b.n	801096c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801095a:	2101      	movs	r1, #1
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f000 f963 	bl	8010c28 <USB_SetDevSpeed>
 8010962:	e003      	b.n	801096c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010964:	2103      	movs	r1, #3
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f000 f95e 	bl	8010c28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801096c:	2110      	movs	r1, #16
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f000 f8fa 	bl	8010b68 <USB_FlushTxFifo>
 8010974:	4603      	mov	r3, r0
 8010976:	2b00      	cmp	r3, #0
 8010978:	d001      	beq.n	801097e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801097a:	2301      	movs	r3, #1
 801097c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f000 f924 	bl	8010bcc <USB_FlushRxFifo>
 8010984:	4603      	mov	r3, r0
 8010986:	2b00      	cmp	r3, #0
 8010988:	d001      	beq.n	801098e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801098a:	2301      	movs	r3, #1
 801098c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010994:	461a      	mov	r2, r3
 8010996:	2300      	movs	r3, #0
 8010998:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109a0:	461a      	mov	r2, r3
 80109a2:	2300      	movs	r3, #0
 80109a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109ac:	461a      	mov	r2, r3
 80109ae:	2300      	movs	r3, #0
 80109b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80109b2:	2300      	movs	r3, #0
 80109b4:	613b      	str	r3, [r7, #16]
 80109b6:	e043      	b.n	8010a40 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80109b8:	693b      	ldr	r3, [r7, #16]
 80109ba:	015a      	lsls	r2, r3, #5
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	4413      	add	r3, r2
 80109c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80109ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80109ce:	d118      	bne.n	8010a02 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d10a      	bne.n	80109ec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	015a      	lsls	r2, r3, #5
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	4413      	add	r3, r2
 80109de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109e2:	461a      	mov	r2, r3
 80109e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80109e8:	6013      	str	r3, [r2, #0]
 80109ea:	e013      	b.n	8010a14 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	015a      	lsls	r2, r3, #5
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	4413      	add	r3, r2
 80109f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109f8:	461a      	mov	r2, r3
 80109fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80109fe:	6013      	str	r3, [r2, #0]
 8010a00:	e008      	b.n	8010a14 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	015a      	lsls	r2, r3, #5
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	4413      	add	r3, r2
 8010a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a0e:	461a      	mov	r2, r3
 8010a10:	2300      	movs	r3, #0
 8010a12:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010a14:	693b      	ldr	r3, [r7, #16]
 8010a16:	015a      	lsls	r2, r3, #5
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	4413      	add	r3, r2
 8010a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a20:	461a      	mov	r2, r3
 8010a22:	2300      	movs	r3, #0
 8010a24:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010a26:	693b      	ldr	r3, [r7, #16]
 8010a28:	015a      	lsls	r2, r3, #5
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010a32:	461a      	mov	r2, r3
 8010a34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010a38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	613b      	str	r3, [r7, #16]
 8010a40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010a44:	461a      	mov	r2, r3
 8010a46:	693b      	ldr	r3, [r7, #16]
 8010a48:	4293      	cmp	r3, r2
 8010a4a:	d3b5      	bcc.n	80109b8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	613b      	str	r3, [r7, #16]
 8010a50:	e043      	b.n	8010ada <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	015a      	lsls	r2, r3, #5
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	4413      	add	r3, r2
 8010a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010a64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010a68:	d118      	bne.n	8010a9c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d10a      	bne.n	8010a86 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	015a      	lsls	r2, r3, #5
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	4413      	add	r3, r2
 8010a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010a82:	6013      	str	r3, [r2, #0]
 8010a84:	e013      	b.n	8010aae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	015a      	lsls	r2, r3, #5
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a92:	461a      	mov	r2, r3
 8010a94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010a98:	6013      	str	r3, [r2, #0]
 8010a9a:	e008      	b.n	8010aae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	015a      	lsls	r2, r3, #5
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	4413      	add	r3, r2
 8010aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	2300      	movs	r3, #0
 8010aac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	015a      	lsls	r2, r3, #5
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010aba:	461a      	mov	r2, r3
 8010abc:	2300      	movs	r3, #0
 8010abe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	015a      	lsls	r2, r3, #5
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	4413      	add	r3, r2
 8010ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010acc:	461a      	mov	r2, r3
 8010ace:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010ad2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	613b      	str	r3, [r7, #16]
 8010ada:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010ade:	461a      	mov	r2, r3
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	d3b5      	bcc.n	8010a52 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010aec:	691b      	ldr	r3, [r3, #16]
 8010aee:	68fa      	ldr	r2, [r7, #12]
 8010af0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010af4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010af8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2200      	movs	r2, #0
 8010afe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8010b06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010b08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d105      	bne.n	8010b1c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	699b      	ldr	r3, [r3, #24]
 8010b14:	f043 0210 	orr.w	r2, r3, #16
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	699a      	ldr	r2, [r3, #24]
 8010b20:	4b0f      	ldr	r3, [pc, #60]	@ (8010b60 <USB_DevInit+0x2b4>)
 8010b22:	4313      	orrs	r3, r2
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010b28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d005      	beq.n	8010b3c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	699b      	ldr	r3, [r3, #24]
 8010b34:	f043 0208 	orr.w	r2, r3, #8
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010b3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d105      	bne.n	8010b50 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	699a      	ldr	r2, [r3, #24]
 8010b48:	4b06      	ldr	r3, [pc, #24]	@ (8010b64 <USB_DevInit+0x2b8>)
 8010b4a:	4313      	orrs	r3, r2
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3718      	adds	r7, #24
 8010b56:	46bd      	mov	sp, r7
 8010b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010b5c:	b004      	add	sp, #16
 8010b5e:	4770      	bx	lr
 8010b60:	803c3800 	.word	0x803c3800
 8010b64:	40000004 	.word	0x40000004

08010b68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b085      	sub	sp, #20
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010b72:	2300      	movs	r3, #0
 8010b74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	3301      	adds	r3, #1
 8010b7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010b82:	d901      	bls.n	8010b88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010b84:	2303      	movs	r3, #3
 8010b86:	e01b      	b.n	8010bc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	691b      	ldr	r3, [r3, #16]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	daf2      	bge.n	8010b76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010b90:	2300      	movs	r3, #0
 8010b92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	019b      	lsls	r3, r3, #6
 8010b98:	f043 0220 	orr.w	r2, r3, #32
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010bac:	d901      	bls.n	8010bb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010bae:	2303      	movs	r3, #3
 8010bb0:	e006      	b.n	8010bc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	691b      	ldr	r3, [r3, #16]
 8010bb6:	f003 0320 	and.w	r3, r3, #32
 8010bba:	2b20      	cmp	r3, #32
 8010bbc:	d0f0      	beq.n	8010ba0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010bbe:	2300      	movs	r3, #0
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3714      	adds	r7, #20
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bca:	4770      	bx	lr

08010bcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010bcc:	b480      	push	{r7}
 8010bce:	b085      	sub	sp, #20
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	3301      	adds	r3, #1
 8010bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010be4:	d901      	bls.n	8010bea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010be6:	2303      	movs	r3, #3
 8010be8:	e018      	b.n	8010c1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	691b      	ldr	r3, [r3, #16]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	daf2      	bge.n	8010bd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	2210      	movs	r2, #16
 8010bfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	3301      	adds	r3, #1
 8010c00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010c08:	d901      	bls.n	8010c0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010c0a:	2303      	movs	r3, #3
 8010c0c:	e006      	b.n	8010c1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	691b      	ldr	r3, [r3, #16]
 8010c12:	f003 0310 	and.w	r3, r3, #16
 8010c16:	2b10      	cmp	r3, #16
 8010c18:	d0f0      	beq.n	8010bfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010c1a:	2300      	movs	r3, #0
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3714      	adds	r7, #20
 8010c20:	46bd      	mov	sp, r7
 8010c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c26:	4770      	bx	lr

08010c28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b085      	sub	sp, #20
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	460b      	mov	r3, r1
 8010c32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	78fb      	ldrb	r3, [r7, #3]
 8010c42:	68f9      	ldr	r1, [r7, #12]
 8010c44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010c48:	4313      	orrs	r3, r2
 8010c4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010c4c:	2300      	movs	r3, #0
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3714      	adds	r7, #20
 8010c52:	46bd      	mov	sp, r7
 8010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c58:	4770      	bx	lr

08010c5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010c5a:	b480      	push	{r7}
 8010c5c:	b085      	sub	sp, #20
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	68fa      	ldr	r2, [r7, #12]
 8010c70:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010c74:	f023 0303 	bic.w	r3, r3, #3
 8010c78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	68fa      	ldr	r2, [r7, #12]
 8010c84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010c88:	f043 0302 	orr.w	r3, r3, #2
 8010c8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010c8e:	2300      	movs	r3, #0
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3714      	adds	r7, #20
 8010c94:	46bd      	mov	sp, r7
 8010c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9a:	4770      	bx	lr

08010c9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	695b      	ldr	r3, [r3, #20]
 8010ca8:	f003 0301 	and.w	r3, r3, #1
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	370c      	adds	r7, #12
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr

08010cb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010cb8:	b480      	push	{r7}
 8010cba:	b085      	sub	sp, #20
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010cd0:	d901      	bls.n	8010cd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010cd2:	2303      	movs	r3, #3
 8010cd4:	e01b      	b.n	8010d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	691b      	ldr	r3, [r3, #16]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	daf2      	bge.n	8010cc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	691b      	ldr	r3, [r3, #16]
 8010ce6:	f043 0201 	orr.w	r2, r3, #1
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010cfa:	d901      	bls.n	8010d00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010cfc:	2303      	movs	r3, #3
 8010cfe:	e006      	b.n	8010d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	691b      	ldr	r3, [r3, #16]
 8010d04:	f003 0301 	and.w	r3, r3, #1
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d0f0      	beq.n	8010cee <USB_CoreReset+0x36>

  return HAL_OK;
 8010d0c:	2300      	movs	r3, #0
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3714      	adds	r7, #20
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr
	...

08010d1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010d20:	4904      	ldr	r1, [pc, #16]	@ (8010d34 <MX_FATFS_Init+0x18>)
 8010d22:	4805      	ldr	r0, [pc, #20]	@ (8010d38 <MX_FATFS_Init+0x1c>)
 8010d24:	f00c fb2a 	bl	801d37c <FATFS_LinkDriver>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	4b03      	ldr	r3, [pc, #12]	@ (8010d3c <MX_FATFS_Init+0x20>)
 8010d2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010d30:	bf00      	nop
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	240084c4 	.word	0x240084c4
 8010d38:	0802008c 	.word	0x0802008c
 8010d3c:	240084c0 	.word	0x240084c0

08010d40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010d40:	b480      	push	{r7}
 8010d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010d44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr

08010d50 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b082      	sub	sp, #8
 8010d54:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010d56:	2300      	movs	r3, #0
 8010d58:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010d5a:	f000 f879 	bl	8010e50 <BSP_SD_IsDetected>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	d001      	beq.n	8010d68 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010d64:	2302      	movs	r3, #2
 8010d66:	e012      	b.n	8010d8e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010d68:	480b      	ldr	r0, [pc, #44]	@ (8010d98 <BSP_SD_Init+0x48>)
 8010d6a:	f7fa fc27 	bl	800b5bc <HAL_SD_Init>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010d72:	79fb      	ldrb	r3, [r7, #7]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d109      	bne.n	8010d8c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010d78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010d7c:	4806      	ldr	r0, [pc, #24]	@ (8010d98 <BSP_SD_Init+0x48>)
 8010d7e:	f7fb fae3 	bl	800c348 <HAL_SD_ConfigWideBusOperation>
 8010d82:	4603      	mov	r3, r0
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d001      	beq.n	8010d8c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010d88:	2301      	movs	r3, #1
 8010d8a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3708      	adds	r7, #8
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}
 8010d96:	bf00      	nop
 8010d98:	24000334 	.word	0x24000334

08010d9c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b088      	sub	sp, #32
 8010da0:	af02      	add	r7, sp, #8
 8010da2:	60f8      	str	r0, [r7, #12]
 8010da4:	60b9      	str	r1, [r7, #8]
 8010da6:	607a      	str	r2, [r7, #4]
 8010da8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010daa:	2300      	movs	r3, #0
 8010dac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	9300      	str	r3, [sp, #0]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	68ba      	ldr	r2, [r7, #8]
 8010db6:	68f9      	ldr	r1, [r7, #12]
 8010db8:	4806      	ldr	r0, [pc, #24]	@ (8010dd4 <BSP_SD_ReadBlocks+0x38>)
 8010dba:	f7fa fd1f 	bl	800b7fc <HAL_SD_ReadBlocks>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d001      	beq.n	8010dc8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3718      	adds	r7, #24
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	24000334 	.word	0x24000334

08010dd8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b088      	sub	sp, #32
 8010ddc:	af02      	add	r7, sp, #8
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	60b9      	str	r1, [r7, #8]
 8010de2:	607a      	str	r2, [r7, #4]
 8010de4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010de6:	2300      	movs	r3, #0
 8010de8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	9300      	str	r3, [sp, #0]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	68ba      	ldr	r2, [r7, #8]
 8010df2:	68f9      	ldr	r1, [r7, #12]
 8010df4:	4806      	ldr	r0, [pc, #24]	@ (8010e10 <BSP_SD_WriteBlocks+0x38>)
 8010df6:	f7fa fe8b 	bl	800bb10 <HAL_SD_WriteBlocks>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d001      	beq.n	8010e04 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010e00:	2301      	movs	r3, #1
 8010e02:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3718      	adds	r7, #24
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}
 8010e0e:	bf00      	nop
 8010e10:	24000334 	.word	0x24000334

08010e14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010e18:	4805      	ldr	r0, [pc, #20]	@ (8010e30 <BSP_SD_GetCardState+0x1c>)
 8010e1a:	f7fb fba7 	bl	800c56c <HAL_SD_GetCardState>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	2b04      	cmp	r3, #4
 8010e22:	bf14      	ite	ne
 8010e24:	2301      	movne	r3, #1
 8010e26:	2300      	moveq	r3, #0
 8010e28:	b2db      	uxtb	r3, r3
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	bd80      	pop	{r7, pc}
 8010e2e:	bf00      	nop
 8010e30:	24000334 	.word	0x24000334

08010e34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010e3c:	6879      	ldr	r1, [r7, #4]
 8010e3e:	4803      	ldr	r0, [pc, #12]	@ (8010e4c <BSP_SD_GetCardInfo+0x18>)
 8010e40:	f7fb fa56 	bl	800c2f0 <HAL_SD_GetCardInfo>
}
 8010e44:	bf00      	nop
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	24000334 	.word	0x24000334

08010e50 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010e50:	b480      	push	{r7}
 8010e52:	b083      	sub	sp, #12
 8010e54:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010e56:	2301      	movs	r3, #1
 8010e58:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8010e5a:	79fb      	ldrb	r3, [r7, #7]
 8010e5c:	b2db      	uxtb	r3, r3
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	370c      	adds	r7, #12
 8010e62:	46bd      	mov	sp, r7
 8010e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e68:	4770      	bx	lr
	...

08010e6c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b082      	sub	sp, #8
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	4603      	mov	r3, r0
 8010e74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010e76:	4b0b      	ldr	r3, [pc, #44]	@ (8010ea4 <SD_CheckStatus+0x38>)
 8010e78:	2201      	movs	r2, #1
 8010e7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010e7c:	f7ff ffca 	bl	8010e14 <BSP_SD_GetCardState>
 8010e80:	4603      	mov	r3, r0
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d107      	bne.n	8010e96 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e86:	4b07      	ldr	r3, [pc, #28]	@ (8010ea4 <SD_CheckStatus+0x38>)
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	f023 0301 	bic.w	r3, r3, #1
 8010e90:	b2da      	uxtb	r2, r3
 8010e92:	4b04      	ldr	r3, [pc, #16]	@ (8010ea4 <SD_CheckStatus+0x38>)
 8010e94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010e96:	4b03      	ldr	r3, [pc, #12]	@ (8010ea4 <SD_CheckStatus+0x38>)
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	b2db      	uxtb	r3, r3
}
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	3708      	adds	r7, #8
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}
 8010ea4:	2400000d 	.word	0x2400000d

08010ea8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	4603      	mov	r3, r0
 8010eb0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8010eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8010ee0 <SD_initialize+0x38>)
 8010eb4:	2201      	movs	r2, #1
 8010eb6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010eb8:	f7ff ff4a 	bl	8010d50 <BSP_SD_Init>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d107      	bne.n	8010ed2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8010ec2:	79fb      	ldrb	r3, [r7, #7]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7ff ffd1 	bl	8010e6c <SD_CheckStatus>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	461a      	mov	r2, r3
 8010ece:	4b04      	ldr	r3, [pc, #16]	@ (8010ee0 <SD_initialize+0x38>)
 8010ed0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010ed2:	4b03      	ldr	r3, [pc, #12]	@ (8010ee0 <SD_initialize+0x38>)
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	b2db      	uxtb	r3, r3
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	2400000d 	.word	0x2400000d

08010ee4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	4603      	mov	r3, r0
 8010eec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010eee:	79fb      	ldrb	r3, [r7, #7]
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7ff ffbb 	bl	8010e6c <SD_CheckStatus>
 8010ef6:	4603      	mov	r3, r0
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3708      	adds	r7, #8
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}

08010f00 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b086      	sub	sp, #24
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	60b9      	str	r1, [r7, #8]
 8010f08:	607a      	str	r2, [r7, #4]
 8010f0a:	603b      	str	r3, [r7, #0]
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f10:	2301      	movs	r3, #1
 8010f12:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010f14:	f04f 33ff 	mov.w	r3, #4294967295
 8010f18:	683a      	ldr	r2, [r7, #0]
 8010f1a:	6879      	ldr	r1, [r7, #4]
 8010f1c:	68b8      	ldr	r0, [r7, #8]
 8010f1e:	f7ff ff3d 	bl	8010d9c <BSP_SD_ReadBlocks>
 8010f22:	4603      	mov	r3, r0
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d107      	bne.n	8010f38 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010f28:	bf00      	nop
 8010f2a:	f7ff ff73 	bl	8010e14 <BSP_SD_GetCardState>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d1fa      	bne.n	8010f2a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8010f34:	2300      	movs	r3, #0
 8010f36:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3718      	adds	r7, #24
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}

08010f42 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010f42:	b580      	push	{r7, lr}
 8010f44:	b086      	sub	sp, #24
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	607a      	str	r2, [r7, #4]
 8010f4c:	603b      	str	r3, [r7, #0]
 8010f4e:	4603      	mov	r3, r0
 8010f50:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f52:	2301      	movs	r3, #1
 8010f54:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8010f56:	f04f 33ff 	mov.w	r3, #4294967295
 8010f5a:	683a      	ldr	r2, [r7, #0]
 8010f5c:	6879      	ldr	r1, [r7, #4]
 8010f5e:	68b8      	ldr	r0, [r7, #8]
 8010f60:	f7ff ff3a 	bl	8010dd8 <BSP_SD_WriteBlocks>
 8010f64:	4603      	mov	r3, r0
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d107      	bne.n	8010f7a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8010f6a:	bf00      	nop
 8010f6c:	f7ff ff52 	bl	8010e14 <BSP_SD_GetCardState>
 8010f70:	4603      	mov	r3, r0
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d1fa      	bne.n	8010f6c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8010f76:	2300      	movs	r3, #0
 8010f78:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3718      	adds	r7, #24
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}

08010f84 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b08c      	sub	sp, #48	@ 0x30
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	603a      	str	r2, [r7, #0]
 8010f8e:	71fb      	strb	r3, [r7, #7]
 8010f90:	460b      	mov	r3, r1
 8010f92:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010f94:	2301      	movs	r3, #1
 8010f96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010f9a:	4b25      	ldr	r3, [pc, #148]	@ (8011030 <SD_ioctl+0xac>)
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	b2db      	uxtb	r3, r3
 8010fa0:	f003 0301 	and.w	r3, r3, #1
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d001      	beq.n	8010fac <SD_ioctl+0x28>
 8010fa8:	2303      	movs	r3, #3
 8010faa:	e03c      	b.n	8011026 <SD_ioctl+0xa2>

  switch (cmd)
 8010fac:	79bb      	ldrb	r3, [r7, #6]
 8010fae:	2b03      	cmp	r3, #3
 8010fb0:	d834      	bhi.n	801101c <SD_ioctl+0x98>
 8010fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8010fb8 <SD_ioctl+0x34>)
 8010fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb8:	08010fc9 	.word	0x08010fc9
 8010fbc:	08010fd1 	.word	0x08010fd1
 8010fc0:	08010fe9 	.word	0x08010fe9
 8010fc4:	08011003 	.word	0x08011003
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010fce:	e028      	b.n	8011022 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010fd0:	f107 0308 	add.w	r3, r7, #8
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7ff ff2d 	bl	8010e34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010fda:	6a3a      	ldr	r2, [r7, #32]
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010fe6:	e01c      	b.n	8011022 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010fe8:	f107 0308 	add.w	r3, r7, #8
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7ff ff21 	bl	8010e34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff4:	b29a      	uxth	r2, r3
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011000:	e00f      	b.n	8011022 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011002:	f107 0308 	add.w	r3, r7, #8
 8011006:	4618      	mov	r0, r3
 8011008:	f7ff ff14 	bl	8010e34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801100e:	0a5a      	lsrs	r2, r3, #9
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011014:	2300      	movs	r3, #0
 8011016:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801101a:	e002      	b.n	8011022 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801101c:	2304      	movs	r3, #4
 801101e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011022:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011026:	4618      	mov	r0, r3
 8011028:	3730      	adds	r7, #48	@ 0x30
 801102a:	46bd      	mov	sp, r7
 801102c:	bd80      	pop	{r7, pc}
 801102e:	bf00      	nop
 8011030:	2400000d 	.word	0x2400000d

08011034 <arm_abs_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_abs_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8011034:	b480      	push	{r7}
 8011036:	b08b      	sub	sp, #44	@ 0x2c
 8011038:	af00      	add	r7, sp, #0
 801103a:	60f8      	str	r0, [r7, #12]
 801103c:	60b9      	str	r1, [r7, #8]
 801103e:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8011044:	e01e      	b.n	8011084 <arm_abs_q15+0x50>
  {
    /* C = |A| */

    /* Calculate absolute of input (if -1 then saturated to 0x7fff) and store result in destination buffer. */
    in = *pSrc++;
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	1c9a      	adds	r2, r3, #2
 801104a:	60fa      	str	r2, [r7, #12]
 801104c:	881b      	ldrh	r3, [r3, #0]
 801104e:	847b      	strh	r3, [r7, #34]	@ 0x22
#if defined (ARM_MATH_DSP)
    *pDst++ = (in > 0) ? in : (q15_t)__QSUB16(0, in);
 8011050:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011054:	2b00      	cmp	r3, #0
 8011056:	dc0c      	bgt.n	8011072 <arm_abs_q15+0x3e>
 8011058:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801105c:	2200      	movs	r2, #0
 801105e:	61fa      	str	r2, [r7, #28]
 8011060:	61bb      	str	r3, [r7, #24]

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	69ba      	ldr	r2, [r7, #24]
 8011066:	fad3 f312 	qsub16	r3, r3, r2
 801106a:	617b      	str	r3, [r7, #20]
  return(result);
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	b21a      	sxth	r2, r3
 8011070:	e001      	b.n	8011076 <arm_abs_q15+0x42>
 8011072:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	1c99      	adds	r1, r3, #2
 801107a:	60b9      	str	r1, [r7, #8]
 801107c:	801a      	strh	r2, [r3, #0]
#else
    *pDst++ = (in > 0) ? in : ((in == (q15_t) 0x8000) ? 0x7fff : -in);
#endif

    /* Decrement loop counter */
    blkCnt--;
 801107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011080:	3b01      	subs	r3, #1
 8011082:	627b      	str	r3, [r7, #36]	@ 0x24
  while (blkCnt > 0U)
 8011084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011086:	2b00      	cmp	r3, #0
 8011088:	d1dd      	bne.n	8011046 <arm_abs_q15+0x12>
  }

}
 801108a:	bf00      	nop
 801108c:	bf00      	nop
 801108e:	372c      	adds	r7, #44	@ 0x2c
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr

08011098 <arm_dot_prod_q15>:
ARM_DSP_ATTRIBUTE void arm_dot_prod_q15(
  const q15_t * pSrcA,
  const q15_t * pSrcB,
        uint32_t blockSize,
        q63_t * result)
{
 8011098:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801109c:	b089      	sub	sp, #36	@ 0x24
 801109e:	af00      	add	r7, sp, #0
 80110a0:	60f8      	str	r0, [r7, #12]
 80110a2:	60b9      	str	r1, [r7, #8]
 80110a4:	607a      	str	r2, [r7, #4]
 80110a6:	603b      	str	r3, [r7, #0]
        uint32_t blkCnt;                               /* Loop counter */
        q63_t sum = 0;                                 /* Temporary return variable */
 80110a8:	f04f 0200 	mov.w	r2, #0
 80110ac:	f04f 0300 	mov.w	r3, #0
 80110b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80110b8:	e01a      	b.n	80110f0 <arm_dot_prod_q15+0x58>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */

    /* Calculate dot product and store result in a temporary buffer. */
    sum += (q63_t)((q31_t) *pSrcA++ * *pSrcB++);
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	1c9a      	adds	r2, r3, #2
 80110be:	60fa      	str	r2, [r7, #12]
 80110c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110c4:	4619      	mov	r1, r3
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	1c9a      	adds	r2, r3, #2
 80110ca:	60ba      	str	r2, [r7, #8]
 80110cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110d0:	fb01 f303 	mul.w	r3, r1, r3
 80110d4:	17da      	asrs	r2, r3, #31
 80110d6:	461c      	mov	r4, r3
 80110d8:	4615      	mov	r5, r2
 80110da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80110de:	eb12 0804 	adds.w	r8, r2, r4
 80110e2:	eb43 0905 	adc.w	r9, r3, r5
 80110e6:	e9c7 8904 	strd	r8, r9, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 80110ea:	69fb      	ldr	r3, [r7, #28]
 80110ec:	3b01      	subs	r3, #1
 80110ee:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 80110f0:	69fb      	ldr	r3, [r7, #28]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d1e1      	bne.n	80110ba <arm_dot_prod_q15+0x22>
  }

  /* Store result in destination buffer in 34.30 format */
  *result = sum;
 80110f6:	6839      	ldr	r1, [r7, #0]
 80110f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80110fc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8011100:	bf00      	nop
 8011102:	3724      	adds	r7, #36	@ 0x24
 8011104:	46bd      	mov	sp, r7
 8011106:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 801110a:	4770      	bx	lr

0801110c <arm_mult_q15>:
ARM_DSP_ATTRIBUTE void arm_mult_q15(
  const q15_t * pSrcA,
  const q15_t * pSrcB,
        q15_t * pDst,
        uint32_t blockSize)
{
 801110c:	b480      	push	{r7}
 801110e:	b089      	sub	sp, #36	@ 0x24
 8011110:	af00      	add	r7, sp, #0
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	60b9      	str	r1, [r7, #8]
 8011116:	607a      	str	r2, [r7, #4]
 8011118:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801111a:	683b      	ldr	r3, [r7, #0]
 801111c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801111e:	e01b      	b.n	8011158 <arm_mult_q15+0x4c>
  {
    /* C = A * B */

    /* Multiply inputs and store result in destination buffer. */
    *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	1c9a      	adds	r2, r3, #2
 8011124:	60fa      	str	r2, [r7, #12]
 8011126:	f9b3 3000 	ldrsh.w	r3, [r3]
 801112a:	4619      	mov	r1, r3
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	1c9a      	adds	r2, r3, #2
 8011130:	60ba      	str	r2, [r7, #8]
 8011132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011136:	fb01 f303 	mul.w	r3, r1, r3
 801113a:	13db      	asrs	r3, r3, #15
 801113c:	61bb      	str	r3, [r7, #24]
 801113e:	69bb      	ldr	r3, [r7, #24]
 8011140:	f303 030f 	ssat	r3, #16, r3
 8011144:	617b      	str	r3, [r7, #20]
 8011146:	6979      	ldr	r1, [r7, #20]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	1c9a      	adds	r2, r3, #2
 801114c:	607a      	str	r2, [r7, #4]
 801114e:	b20a      	sxth	r2, r1
 8011150:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	3b01      	subs	r3, #1
 8011156:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8011158:	69fb      	ldr	r3, [r7, #28]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d1e0      	bne.n	8011120 <arm_mult_q15+0x14>
  }

}
 801115e:	bf00      	nop
 8011160:	bf00      	nop
 8011162:	3724      	adds	r7, #36	@ 0x24
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr

0801116c <arm_offset_q31>:
ARM_DSP_ATTRIBUTE void arm_offset_q31(
  const q31_t * pSrc,
        q31_t offset,
        q31_t * pDst,
        uint32_t blockSize)
{
 801116c:	b480      	push	{r7}
 801116e:	b089      	sub	sp, #36	@ 0x24
 8011170:	af00      	add	r7, sp, #0
 8011172:	60f8      	str	r0, [r7, #12]
 8011174:	60b9      	str	r1, [r7, #8]
 8011176:	607a      	str	r2, [r7, #4]
 8011178:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801117e:	e013      	b.n	80111a8 <arm_offset_q31+0x3c>
  {
    /* C = A + offset */

    /* Add offset and store result in destination buffer. */
#if defined (ARM_MATH_DSP)
    *pDst++ = __QADD(*pSrc++, offset);
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	1d1a      	adds	r2, r3, #4
 8011184:	60fa      	str	r2, [r7, #12]
 8011186:	681a      	ldr	r2, [r3, #0]
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	1d19      	adds	r1, r3, #4
 801118c:	6079      	str	r1, [r7, #4]
 801118e:	61ba      	str	r2, [r7, #24]
 8011190:	68ba      	ldr	r2, [r7, #8]
 8011192:	617a      	str	r2, [r7, #20]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8011194:	69ba      	ldr	r2, [r7, #24]
 8011196:	6979      	ldr	r1, [r7, #20]
 8011198:	fa81 f282 	qadd	r2, r2, r1
 801119c:	613a      	str	r2, [r7, #16]
  return(result);
 801119e:	693a      	ldr	r2, [r7, #16]
 80111a0:	601a      	str	r2, [r3, #0]
#else
    *pDst++ = (q31_t) clip_q63_to_q31((q63_t) * pSrc++ + offset);
#endif

    /* Decrement loop counter */
    blkCnt--;
 80111a2:	69fb      	ldr	r3, [r7, #28]
 80111a4:	3b01      	subs	r3, #1
 80111a6:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d1e8      	bne.n	8011180 <arm_offset_q31+0x14>
  }

}
 80111ae:	bf00      	nop
 80111b0:	bf00      	nop
 80111b2:	3724      	adds	r7, #36	@ 0x24
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr

080111bc <arm_scale_q15>:
  const q15_t *pSrc,
        q15_t scaleFract,
        int8_t shift,
        q15_t *pDst,
        uint32_t blockSize)
{
 80111bc:	b480      	push	{r7}
 80111be:	b089      	sub	sp, #36	@ 0x24
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	60f8      	str	r0, [r7, #12]
 80111c4:	607b      	str	r3, [r7, #4]
 80111c6:	460b      	mov	r3, r1
 80111c8:	817b      	strh	r3, [r7, #10]
 80111ca:	4613      	mov	r3, r2
 80111cc:	727b      	strb	r3, [r7, #9]
        uint32_t blkCnt;                               /* Loop counter */
        int8_t kShift = 15 - shift;                    /* Shift to apply after scaling */
 80111ce:	7a7b      	ldrb	r3, [r7, #9]
 80111d0:	f1c3 030f 	rsb	r3, r3, #15
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80111d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111da:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80111dc:	e01b      	b.n	8011216 <arm_scale_q15+0x5a>
  {
    /* C = A * scale */

    /* Scale input and store result in destination buffer. */
    *pDst++ = (q15_t) (__SSAT(((q31_t) *pSrc++ * scaleFract) >> kShift, 16));
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	1c9a      	adds	r2, r3, #2
 80111e2:	60fa      	str	r2, [r7, #12]
 80111e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80111e8:	461a      	mov	r2, r3
 80111ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80111ee:	fb03 f202 	mul.w	r2, r3, r2
 80111f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80111f6:	fa42 f303 	asr.w	r3, r2, r3
 80111fa:	617b      	str	r3, [r7, #20]
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	f303 030f 	ssat	r3, #16, r3
 8011202:	613b      	str	r3, [r7, #16]
 8011204:	6939      	ldr	r1, [r7, #16]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	1c9a      	adds	r2, r3, #2
 801120a:	607a      	str	r2, [r7, #4]
 801120c:	b20a      	sxth	r2, r1
 801120e:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8011210:	69fb      	ldr	r3, [r7, #28]
 8011212:	3b01      	subs	r3, #1
 8011214:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 8011216:	69fb      	ldr	r3, [r7, #28]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d1e0      	bne.n	80111de <arm_scale_q15+0x22>
  }

}
 801121c:	bf00      	nop
 801121e:	bf00      	nop
 8011220:	3724      	adds	r7, #36	@ 0x24
 8011222:	46bd      	mov	sp, r7
 8011224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011228:	4770      	bx	lr

0801122a <arm_scale_q31>:
  const q31_t *pSrc,
        q31_t scaleFract,
        int8_t shift,
        q31_t *pDst,
        uint32_t blockSize)
{
 801122a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801122e:	b08f      	sub	sp, #60	@ 0x3c
 8011230:	af00      	add	r7, sp, #0
 8011232:	6278      	str	r0, [r7, #36]	@ 0x24
 8011234:	6239      	str	r1, [r7, #32]
 8011236:	61bb      	str	r3, [r7, #24]
 8011238:	4613      	mov	r3, r2
 801123a:	77fb      	strb	r3, [r7, #31]
        uint32_t blkCnt;                               /* Loop counter */
        q31_t in, out;                                 /* Temporary variables */
        int8_t kShift = shift + 1;                     /* Shift to apply after scaling */
 801123c:	7ffb      	ldrb	r3, [r7, #31]
 801123e:	3301      	adds	r3, #1
 8011240:	b2db      	uxtb	r3, r3
 8011242:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        int8_t sign = (kShift & 0x80);
 8011246:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801124a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801124e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8011252:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011254:	637b      	str	r3, [r7, #52]	@ 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  if (sign == 0U)
 8011256:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 801125a:	2b00      	cmp	r3, #0
 801125c:	d17b      	bne.n	8011356 <arm_scale_q31+0x12c>
  {
    while (blkCnt > 0U)
 801125e:	e044      	b.n	80112ea <arm_scale_q31+0xc0>
    {
      /* C = A * scale */

      /* Scale input and store result in destination buffer. */
      in = *pSrc++;
 8011260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011262:	1d1a      	adds	r2, r3, #4
 8011264:	627a      	str	r2, [r7, #36]	@ 0x24
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	62bb      	str	r3, [r7, #40]	@ 0x28
      in = ((q63_t) in * scaleFract) >> 32;
 801126a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801126c:	17da      	asrs	r2, r3, #31
 801126e:	613b      	str	r3, [r7, #16]
 8011270:	617a      	str	r2, [r7, #20]
 8011272:	6a3b      	ldr	r3, [r7, #32]
 8011274:	17da      	asrs	r2, r3, #31
 8011276:	60bb      	str	r3, [r7, #8]
 8011278:	60fa      	str	r2, [r7, #12]
 801127a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801127e:	462b      	mov	r3, r5
 8011280:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8011284:	4652      	mov	r2, sl
 8011286:	fb02 f203 	mul.w	r2, r2, r3
 801128a:	465b      	mov	r3, fp
 801128c:	4621      	mov	r1, r4
 801128e:	fb01 f303 	mul.w	r3, r1, r3
 8011292:	4413      	add	r3, r2
 8011294:	4622      	mov	r2, r4
 8011296:	4651      	mov	r1, sl
 8011298:	fba2 8901 	umull	r8, r9, r2, r1
 801129c:	444b      	add	r3, r9
 801129e:	4699      	mov	r9, r3
 80112a0:	f04f 0200 	mov.w	r2, #0
 80112a4:	f04f 0300 	mov.w	r3, #0
 80112a8:	464a      	mov	r2, r9
 80112aa:	ea4f 73e9 	mov.w	r3, r9, asr #31
 80112ae:	4613      	mov	r3, r2
 80112b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      out = in << kShift;
 80112b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80112b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112b8:	fa02 f303 	lsl.w	r3, r2, r3
 80112bc:	633b      	str	r3, [r7, #48]	@ 0x30
      if (in != (out >> kShift))
 80112be:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80112c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112c4:	fa42 f303 	asr.w	r3, r2, r3
 80112c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d005      	beq.n	80112da <arm_scale_q31+0xb0>
          out = 0x7FFFFFFF ^ (in >> 31);
 80112ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112d0:	17da      	asrs	r2, r3, #31
 80112d2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80112d6:	4053      	eors	r3, r2
 80112d8:	633b      	str	r3, [r7, #48]	@ 0x30
      *pDst++ = out;
 80112da:	69bb      	ldr	r3, [r7, #24]
 80112dc:	1d1a      	adds	r2, r3, #4
 80112de:	61ba      	str	r2, [r7, #24]
 80112e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112e2:	601a      	str	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 80112e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112e6:	3b01      	subs	r3, #1
 80112e8:	637b      	str	r3, [r7, #52]	@ 0x34
    while (blkCnt > 0U)
 80112ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d1b7      	bne.n	8011260 <arm_scale_q31+0x36>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 80112f0:	e034      	b.n	801135c <arm_scale_q31+0x132>
      in = *pSrc++;
 80112f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112f4:	1d1a      	adds	r2, r3, #4
 80112f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      in = ((q63_t) in * scaleFract) >> 32;
 80112fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112fe:	17da      	asrs	r2, r3, #31
 8011300:	469a      	mov	sl, r3
 8011302:	4693      	mov	fp, r2
 8011304:	6a3b      	ldr	r3, [r7, #32]
 8011306:	17da      	asrs	r2, r3, #31
 8011308:	603b      	str	r3, [r7, #0]
 801130a:	607a      	str	r2, [r7, #4]
 801130c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011310:	4603      	mov	r3, r0
 8011312:	fb03 f20b 	mul.w	r2, r3, fp
 8011316:	460b      	mov	r3, r1
 8011318:	fb0a f303 	mul.w	r3, sl, r3
 801131c:	4413      	add	r3, r2
 801131e:	4602      	mov	r2, r0
 8011320:	fbaa 4502 	umull	r4, r5, sl, r2
 8011324:	442b      	add	r3, r5
 8011326:	461d      	mov	r5, r3
 8011328:	f04f 0200 	mov.w	r2, #0
 801132c:	f04f 0300 	mov.w	r3, #0
 8011330:	002a      	movs	r2, r5
 8011332:	17eb      	asrs	r3, r5, #31
 8011334:	4613      	mov	r3, r2
 8011336:	62bb      	str	r3, [r7, #40]	@ 0x28
      out = in >> -kShift;
 8011338:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 801133c:	425b      	negs	r3, r3
 801133e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011340:	fa42 f303 	asr.w	r3, r2, r3
 8011344:	633b      	str	r3, [r7, #48]	@ 0x30
      *pDst++ = out;
 8011346:	69bb      	ldr	r3, [r7, #24]
 8011348:	1d1a      	adds	r2, r3, #4
 801134a:	61ba      	str	r2, [r7, #24]
 801134c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801134e:	601a      	str	r2, [r3, #0]
      blkCnt--;
 8011350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011352:	3b01      	subs	r3, #1
 8011354:	637b      	str	r3, [r7, #52]	@ 0x34
    while (blkCnt > 0U)
 8011356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011358:	2b00      	cmp	r3, #0
 801135a:	d1ca      	bne.n	80112f2 <arm_scale_q31+0xc8>
}
 801135c:	bf00      	nop
 801135e:	373c      	adds	r7, #60	@ 0x3c
 8011360:	46bd      	mov	sp, r7
 8011362:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011366:	4770      	bx	lr

08011368 <arm_shift_q15>:
ARM_DSP_ATTRIBUTE void arm_shift_q15(
  const q15_t * pSrc,
        int8_t shiftBits,
        q15_t * pDst,
        uint32_t blockSize)
{
 8011368:	b480      	push	{r7}
 801136a:	b089      	sub	sp, #36	@ 0x24
 801136c:	af00      	add	r7, sp, #0
 801136e:	60f8      	str	r0, [r7, #12]
 8011370:	607a      	str	r2, [r7, #4]
 8011372:	603b      	str	r3, [r7, #0]
 8011374:	460b      	mov	r3, r1
 8011376:	72fb      	strb	r3, [r7, #11]
        uint32_t blkCnt;                               /* Loop counter */
        uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 8011378:	7afb      	ldrb	r3, [r7, #11]
 801137a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801137e:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* If the shift value is positive then do right shift else left shift */
  if (sign == 0U)
 8011384:	7efb      	ldrb	r3, [r7, #27]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d12f      	bne.n	80113ea <arm_shift_q15+0x82>
  {
    while (blkCnt > 0U)
 801138a:	e017      	b.n	80113bc <arm_shift_q15+0x54>
    {
      /* C = A << shiftBits */

      /* Shift input and store result in destination buffer. */
      *pDst++ = __SSAT(((q31_t) *pSrc++ << shiftBits), 16);
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	1c9a      	adds	r2, r3, #2
 8011390:	60fa      	str	r2, [r7, #12]
 8011392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011396:	461a      	mov	r2, r3
 8011398:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801139c:	fa02 f303 	lsl.w	r3, r2, r3
 80113a0:	617b      	str	r3, [r7, #20]
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	f303 030f 	ssat	r3, #16, r3
 80113a8:	613b      	str	r3, [r7, #16]
 80113aa:	6939      	ldr	r1, [r7, #16]
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	1c9a      	adds	r2, r3, #2
 80113b0:	607a      	str	r2, [r7, #4]
 80113b2:	b20a      	sxth	r2, r1
 80113b4:	801a      	strh	r2, [r3, #0]

      /* Decrement loop counter */
      blkCnt--;
 80113b6:	69fb      	ldr	r3, [r7, #28]
 80113b8:	3b01      	subs	r3, #1
 80113ba:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d1e4      	bne.n	801138c <arm_shift_q15+0x24>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 80113c2:	e015      	b.n	80113f0 <arm_shift_q15+0x88>
      *pDst++ = (*pSrc++ >> -shiftBits);
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	1c9a      	adds	r2, r3, #2
 80113c8:	60fa      	str	r2, [r7, #12]
 80113ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80113ce:	461a      	mov	r2, r3
 80113d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80113d4:	425b      	negs	r3, r3
 80113d6:	fa42 f103 	asr.w	r1, r2, r3
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	1c9a      	adds	r2, r3, #2
 80113de:	607a      	str	r2, [r7, #4]
 80113e0:	b20a      	sxth	r2, r1
 80113e2:	801a      	strh	r2, [r3, #0]
      blkCnt--;
 80113e4:	69fb      	ldr	r3, [r7, #28]
 80113e6:	3b01      	subs	r3, #1
 80113e8:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80113ea:	69fb      	ldr	r3, [r7, #28]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d1e9      	bne.n	80113c4 <arm_shift_q15+0x5c>
}
 80113f0:	bf00      	nop
 80113f2:	3724      	adds	r7, #36	@ 0x24
 80113f4:	46bd      	mov	sp, r7
 80113f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fa:	4770      	bx	lr

080113fc <arm_shift_q31>:
ARM_DSP_ATTRIBUTE void arm_shift_q31(
  const q31_t * pSrc,
        int8_t shiftBits,
        q31_t * pDst,
        uint32_t blockSize)
{
 80113fc:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8011400:	b088      	sub	sp, #32
 8011402:	af00      	add	r7, sp, #0
 8011404:	60f8      	str	r0, [r7, #12]
 8011406:	607a      	str	r2, [r7, #4]
 8011408:	603b      	str	r3, [r7, #0]
 801140a:	460b      	mov	r3, r1
 801140c:	72fb      	strb	r3, [r7, #11]
        uint32_t blkCnt;                               /* Loop counter */
        uint8_t sign = (shiftBits & 0x80);             /* Sign of shiftBits */
 801140e:	7afb      	ldrb	r3, [r7, #11]
 8011410:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011414:	76fb      	strb	r3, [r7, #27]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* If the shift value is positive then do right shift else left shift */
  if (sign == 0U)
 801141a:	7efb      	ldrb	r3, [r7, #27]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d14d      	bne.n	80114bc <arm_shift_q31+0xc0>
  {
    while (blkCnt > 0U)
 8011420:	e038      	b.n	8011494 <arm_shift_q31+0x98>
    {
      /* C = A << shiftBits */

      /* Shift input and store result in destination buffer. */
      *pDst++ = clip_q63_to_q31((q63_t) *pSrc++ << shiftBits);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	1d1a      	adds	r2, r3, #4
 8011426:	60fa      	str	r2, [r7, #12]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	17da      	asrs	r2, r3, #31
 801142c:	4698      	mov	r8, r3
 801142e:	4691      	mov	r9, r2
 8011430:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011434:	f1a3 0120 	sub.w	r1, r3, #32
 8011438:	f1c3 0220 	rsb	r2, r3, #32
 801143c:	fa09 f503 	lsl.w	r5, r9, r3
 8011440:	fa08 f101 	lsl.w	r1, r8, r1
 8011444:	430d      	orrs	r5, r1
 8011446:	fa28 f202 	lsr.w	r2, r8, r2
 801144a:	4315      	orrs	r5, r2
 801144c:	fa08 f403 	lsl.w	r4, r8, r3
 8011450:	687e      	ldr	r6, [r7, #4]
 8011452:	1d33      	adds	r3, r6, #4
 8011454:	607b      	str	r3, [r7, #4]
 8011456:	e9c7 4504 	strd	r4, r5, [r7, #16]
   * @brief Clips Q63 to Q31 values.
   */
  __STATIC_FORCEINLINE q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
 801145a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801145e:	f04f 0200 	mov.w	r2, #0
 8011462:	f04f 0300 	mov.w	r3, #0
 8011466:	000a      	movs	r2, r1
 8011468:	17cb      	asrs	r3, r1, #31
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	17db      	asrs	r3, r3, #31
      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
 801146e:	429a      	cmp	r2, r3
 8011470:	d00b      	beq.n	801148a <arm_shift_q31+0x8e>
 8011472:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011476:	f04f 0200 	mov.w	r2, #0
 801147a:	f04f 0300 	mov.w	r3, #0
 801147e:	17ca      	asrs	r2, r1, #31
 8011480:	17cb      	asrs	r3, r1, #31
 8011482:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011486:	4053      	eors	r3, r2
 8011488:	e000      	b.n	801148c <arm_shift_q31+0x90>
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	6033      	str	r3, [r6, #0]

      /* Decrement loop counter */
      blkCnt--;
 801148e:	69fb      	ldr	r3, [r7, #28]
 8011490:	3b01      	subs	r3, #1
 8011492:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d1c3      	bne.n	8011422 <arm_shift_q31+0x26>
      /* Decrement loop counter */
      blkCnt--;
    }
  }

}
 801149a:	e012      	b.n	80114c2 <arm_shift_q31+0xc6>
      *pDst++ = (*pSrc++ >> -shiftBits);
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	1d1a      	adds	r2, r3, #4
 80114a0:	60fa      	str	r2, [r7, #12]
 80114a2:	6819      	ldr	r1, [r3, #0]
 80114a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80114a8:	425a      	negs	r2, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	1d18      	adds	r0, r3, #4
 80114ae:	6078      	str	r0, [r7, #4]
 80114b0:	fa41 f202 	asr.w	r2, r1, r2
 80114b4:	601a      	str	r2, [r3, #0]
      blkCnt--;
 80114b6:	69fb      	ldr	r3, [r7, #28]
 80114b8:	3b01      	subs	r3, #1
 80114ba:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80114bc:	69fb      	ldr	r3, [r7, #28]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d1ec      	bne.n	801149c <arm_shift_q31+0xa0>
}
 80114c2:	bf00      	nop
 80114c4:	3720      	adds	r7, #32
 80114c6:	46bd      	mov	sp, r7
 80114c8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80114cc:	4770      	bx	lr

080114ce <arm_cmplx_mag_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_cmplx_mag_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t numSamples)
{
 80114ce:	b580      	push	{r7, lr}
 80114d0:	b08e      	sub	sp, #56	@ 0x38
 80114d2:	af00      	add	r7, sp, #0
 80114d4:	60f8      	str	r0, [r7, #12]
 80114d6:	60b9      	str	r1, [r7, #8]
 80114d8:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	637b      	str	r3, [r7, #52]	@ 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80114de:	e028      	b.n	8011532 <arm_cmplx_mag_q15+0x64>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

#if defined (ARM_MATH_DSP)
    in = read_q15x2_ia (&pSrc);
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	3304      	adds	r3, #4
 80114e4:	60fb      	str	r3, [r7, #12]
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	3b04      	subs	r3, #4
 80114ea:	61fb      	str	r3, [r7, #28]
  q15_t const * pQ15)
{
  q31_t val;

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (&val, pQ15, 4);
 80114ec:	69fb      	ldr	r3, [r7, #28]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	617b      	str	r3, [r7, #20]
#else
  val = (pQ15[1] << 16) | (pQ15[0] & 0x0FFFF) ;
#endif

  return (val);
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	633b      	str	r3, [r7, #48]	@ 0x30
    acc0 = __SMUAD(in, in);
 80114f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80114fc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80114fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011502:	fb23 f302 	smuad	r3, r3, r2
 8011506:	623b      	str	r3, [r7, #32]
  return(result);
 8011508:	6a3b      	ldr	r3, [r7, #32]
 801150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* store result in 2.14 format in destination buffer. */
    arm_sqrt_q31((uint32_t)acc0  >> 1 , &res);
 801150c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801150e:	085b      	lsrs	r3, r3, #1
 8011510:	461a      	mov	r2, r3
 8011512:	f107 0318 	add.w	r3, r7, #24
 8011516:	4619      	mov	r1, r3
 8011518:	4610      	mov	r0, r2
 801151a:	f000 f883 	bl	8011624 <arm_sqrt_q31>
    *pDst++ = res >> 16;
 801151e:	69bb      	ldr	r3, [r7, #24]
 8011520:	1419      	asrs	r1, r3, #16
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	1c9a      	adds	r2, r3, #2
 8011526:	60ba      	str	r2, [r7, #8]
 8011528:	b20a      	sxth	r2, r1
 801152a:	801a      	strh	r2, [r3, #0]
    *pDst++ = res >> 16;
 
#endif

    /* Decrement loop counter */
    blkCnt--;
 801152c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801152e:	3b01      	subs	r3, #1
 8011530:	637b      	str	r3, [r7, #52]	@ 0x34
  while (blkCnt > 0U)
 8011532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011534:	2b00      	cmp	r3, #0
 8011536:	d1d3      	bne.n	80114e0 <arm_cmplx_mag_q15+0x12>
  }

}
 8011538:	bf00      	nop
 801153a:	bf00      	nop
 801153c:	3738      	adds	r7, #56	@ 0x38
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}

08011542 <arm_divide_q15>:

ARM_DSP_ATTRIBUTE arm_status arm_divide_q15(q15_t numerator,
  q15_t denominator,
  q15_t *quotient,
  int16_t *shift)
{
 8011542:	b580      	push	{r7, lr}
 8011544:	b088      	sub	sp, #32
 8011546:	af00      	add	r7, sp, #0
 8011548:	60ba      	str	r2, [r7, #8]
 801154a:	607b      	str	r3, [r7, #4]
 801154c:	4603      	mov	r3, r0
 801154e:	81fb      	strh	r3, [r7, #14]
 8011550:	460b      	mov	r3, r1
 8011552:	81bb      	strh	r3, [r7, #12]
  int16_t sign=0;
 8011554:	2300      	movs	r3, #0
 8011556:	837b      	strh	r3, [r7, #26]
  q31_t temp;
  int16_t shiftForNormalizing;

  *shift = 0;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2200      	movs	r2, #0
 801155c:	801a      	strh	r2, [r3, #0]

  sign = (numerator<0) ^ (denominator<0);
 801155e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011562:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011566:	4053      	eors	r3, r2
 8011568:	b21b      	sxth	r3, r3
 801156a:	b29b      	uxth	r3, r3
 801156c:	0bdb      	lsrs	r3, r3, #15
 801156e:	b2db      	uxtb	r3, r3
 8011570:	837b      	strh	r3, [r7, #26]

  if (denominator == 0)
 8011572:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d10f      	bne.n	801159a <arm_divide_q15+0x58>
  {
     if (sign)
 801157a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d004      	beq.n	801158c <arm_divide_q15+0x4a>
     {
        *quotient = -32768;
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8011588:	801a      	strh	r2, [r3, #0]
 801158a:	e003      	b.n	8011594 <arm_divide_q15+0x52>
     }
     else
     {
        *quotient = 32767;
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8011592:	801a      	strh	r2, [r3, #0]
     }
     return(ARM_MATH_NANINF);
 8011594:	f06f 0303 	mvn.w	r3, #3
 8011598:	e03f      	b.n	801161a <arm_divide_q15+0xd8>
  }

  arm_abs_q15(&numerator,&numerator,1);
 801159a:	f107 010e 	add.w	r1, r7, #14
 801159e:	f107 030e 	add.w	r3, r7, #14
 80115a2:	2201      	movs	r2, #1
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7ff fd45 	bl	8011034 <arm_abs_q15>
  arm_abs_q15(&denominator,&denominator,1);
 80115aa:	f107 010c 	add.w	r1, r7, #12
 80115ae:	f107 030c 	add.w	r3, r7, #12
 80115b2:	2201      	movs	r2, #1
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7ff fd3d 	bl	8011034 <arm_abs_q15>
  
  temp = ((q31_t)numerator << 15) / ((q31_t)denominator);
 80115ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80115be:	03db      	lsls	r3, r3, #15
 80115c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80115c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80115c8:	61fb      	str	r3, [r7, #28]

  shiftForNormalizing= 17 - __CLZ(temp);
 80115ca:	69fb      	ldr	r3, [r7, #28]
 80115cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d101      	bne.n	80115d8 <arm_divide_q15+0x96>
    return 32U;
 80115d4:	2320      	movs	r3, #32
 80115d6:	e003      	b.n	80115e0 <arm_divide_q15+0x9e>
  return __builtin_clz(value);
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	fab3 f383 	clz	r3, r3
 80115de:	b2db      	uxtb	r3, r3
 80115e0:	f1c3 0311 	rsb	r3, r3, #17
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	833b      	strh	r3, [r7, #24]
  if (shiftForNormalizing > 0)
 80115e8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	dd08      	ble.n	8011602 <arm_divide_q15+0xc0>
  {
     *shift = shiftForNormalizing;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	8b3a      	ldrh	r2, [r7, #24]
 80115f4:	801a      	strh	r2, [r3, #0]
     temp = temp >> shiftForNormalizing;
 80115f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80115fa:	69fa      	ldr	r2, [r7, #28]
 80115fc:	fa42 f303 	asr.w	r3, r2, r3
 8011600:	61fb      	str	r3, [r7, #28]
  }

  if (sign)
 8011602:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d002      	beq.n	8011610 <arm_divide_q15+0xce>
  {
    temp = -temp;
 801160a:	69fb      	ldr	r3, [r7, #28]
 801160c:	425b      	negs	r3, r3
 801160e:	61fb      	str	r3, [r7, #28]
  }

  *quotient=temp;
 8011610:	69fb      	ldr	r3, [r7, #28]
 8011612:	b21a      	sxth	r2, r3
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	801a      	strh	r2, [r3, #0]

  return(ARM_MATH_SUCCESS);
 8011618:	2300      	movs	r3, #0
}
 801161a:	4618      	mov	r0, r3
 801161c:	3720      	adds	r7, #32
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
	...

08011624 <arm_sqrt_q31>:
 */

ARM_DSP_ATTRIBUTE arm_status arm_sqrt_q31(
  q31_t in,
  q31_t * pOut)
{
 8011624:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011628:	b0bf      	sub	sp, #252	@ 0xfc
 801162a:	af00      	add	r7, sp, #0
 801162c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
 8011630:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
  q31_t number, var1, signBits1 ,temp;
 
  number = in;
 8011634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011638:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

  /* If the input is a positive number then compute the signBits. */
  if (number > 0)
 801163c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011640:	2b00      	cmp	r3, #0
 8011642:	f340 8270 	ble.w	8011b26 <arm_sqrt_q31+0x502>
  {
    signBits1 = __CLZ(number) - 1;
 8011646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801164a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (value == 0U)
 801164e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011652:	2b00      	cmp	r3, #0
 8011654:	d101      	bne.n	801165a <arm_sqrt_q31+0x36>
    return 32U;
 8011656:	2320      	movs	r3, #32
 8011658:	e004      	b.n	8011664 <arm_sqrt_q31+0x40>
  return __builtin_clz(value);
 801165a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801165e:	fab3 f383 	clz	r3, r3
 8011662:	b2db      	uxtb	r3, r3
 8011664:	3b01      	subs	r3, #1
 8011666:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

    /* Shift by the number of signBits1 */
    if ((signBits1 % 2) == 0)
 801166a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801166e:	f003 0301 	and.w	r3, r3, #1
 8011672:	2b00      	cmp	r3, #0
 8011674:	d108      	bne.n	8011688 <arm_sqrt_q31+0x64>
    {
      number = number << signBits1;
 8011676:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801167a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801167e:	fa02 f303 	lsl.w	r3, r2, r3
 8011682:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8011686:	e007      	b.n	8011698 <arm_sqrt_q31+0x74>
    }
    else
    {
      number = number << (signBits1 - 1);
 8011688:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801168c:	1e5a      	subs	r2, r3, #1
 801168e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011692:	4093      	lsls	r3, r2
 8011694:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    }

    /* Start value for 1/sqrt(x) for the Newton iteration */
    var1 = sqrt_initial_lut_q31[(number>> 26) - (Q28QUARTER >> 26)];
 8011698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801169c:	169b      	asrs	r3, r3, #26
 801169e:	f1a3 0208 	sub.w	r2, r3, #8
 80116a2:	4bf0      	ldr	r3, [pc, #960]	@ (8011a64 <arm_sqrt_q31+0x440>)
 80116a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* 0.5 var1 * (3 - number * var1 * var1) */

    /* 1st iteration */

    temp = ((q63_t) var1 * var1) >> 28;
 80116ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80116b0:	17da      	asrs	r2, r3, #31
 80116b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80116b6:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80116ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80116be:	17da      	asrs	r2, r3, #31
 80116c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80116c4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80116c8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80116cc:	460b      	mov	r3, r1
 80116ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80116d2:	fb02 f203 	mul.w	r2, r2, r3
 80116d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80116da:	e9c7 0134 	strd	r0, r1, [r7, #208]	@ 0xd0
 80116de:	4601      	mov	r1, r0
 80116e0:	fb01 f303 	mul.w	r3, r1, r3
 80116e4:	4413      	add	r3, r2
 80116e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80116ea:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80116ee:	fba2 4501 	umull	r4, r5, r2, r1
 80116f2:	442b      	add	r3, r5
 80116f4:	461d      	mov	r5, r3
 80116f6:	f04f 0200 	mov.w	r2, #0
 80116fa:	f04f 0300 	mov.w	r3, #0
 80116fe:	0f22      	lsrs	r2, r4, #28
 8011700:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8011704:	172b      	asrs	r3, r5, #28
 8011706:	4613      	mov	r3, r2
 8011708:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 801170c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011710:	17da      	asrs	r2, r3, #31
 8011712:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011716:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801171a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801171e:	17da      	asrs	r2, r3, #31
 8011720:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011724:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011728:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801172c:	460b      	mov	r3, r1
 801172e:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8011732:	4622      	mov	r2, r4
 8011734:	fb02 f203 	mul.w	r2, r2, r3
 8011738:	e9c7 4530 	strd	r4, r5, [r7, #192]	@ 0xc0
 801173c:	462b      	mov	r3, r5
 801173e:	4604      	mov	r4, r0
 8011740:	460d      	mov	r5, r1
 8011742:	4621      	mov	r1, r4
 8011744:	fb01 f303 	mul.w	r3, r1, r3
 8011748:	4413      	add	r3, r2
 801174a:	4622      	mov	r2, r4
 801174c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8011750:	fba2 8901 	umull	r8, r9, r2, r1
 8011754:	444b      	add	r3, r9
 8011756:	4699      	mov	r9, r3
 8011758:	f04f 0200 	mov.w	r2, #0
 801175c:	f04f 0300 	mov.w	r3, #0
 8011760:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 8011764:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
 8011768:	ea4f 73e9 	mov.w	r3, r9, asr #31
 801176c:	4613      	mov	r3, r2
 801176e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 8011772:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011776:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 801177a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 801177e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011782:	17da      	asrs	r2, r3, #31
 8011784:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011786:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011788:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801178c:	17da      	asrs	r2, r3, #31
 801178e:	673b      	str	r3, [r7, #112]	@ 0x70
 8011790:	677a      	str	r2, [r7, #116]	@ 0x74
 8011792:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8011796:	462b      	mov	r3, r5
 8011798:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 801179c:	4642      	mov	r2, r8
 801179e:	fb02 f203 	mul.w	r2, r2, r3
 80117a2:	464b      	mov	r3, r9
 80117a4:	4621      	mov	r1, r4
 80117a6:	fb01 f303 	mul.w	r3, r1, r3
 80117aa:	4413      	add	r3, r2
 80117ac:	4622      	mov	r2, r4
 80117ae:	4641      	mov	r1, r8
 80117b0:	fba2 ab01 	umull	sl, fp, r2, r1
 80117b4:	445b      	add	r3, fp
 80117b6:	469b      	mov	fp, r3
 80117b8:	f04f 0200 	mov.w	r2, #0
 80117bc:	f04f 0300 	mov.w	r3, #0
 80117c0:	ea4f 725a 	mov.w	r2, sl, lsr #29
 80117c4:	ea42 02cb 	orr.w	r2, r2, fp, lsl #3
 80117c8:	ea4f 736b 	mov.w	r3, fp, asr #29
 80117cc:	4613      	mov	r3, r2
 80117ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    
    /* 2nd iteration */
    temp = ((q63_t) var1 * var1) >> 28;
 80117d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80117d6:	17da      	asrs	r2, r3, #31
 80117d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80117da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80117dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80117e0:	17da      	asrs	r2, r3, #31
 80117e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80117e4:	667a      	str	r2, [r7, #100]	@ 0x64
 80117e6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80117ea:	462b      	mov	r3, r5
 80117ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80117f0:	4642      	mov	r2, r8
 80117f2:	fb02 f203 	mul.w	r2, r2, r3
 80117f6:	464b      	mov	r3, r9
 80117f8:	4621      	mov	r1, r4
 80117fa:	fb01 f303 	mul.w	r3, r1, r3
 80117fe:	4413      	add	r3, r2
 8011800:	4622      	mov	r2, r4
 8011802:	4641      	mov	r1, r8
 8011804:	fba2 1201 	umull	r1, r2, r2, r1
 8011808:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 801180c:	460a      	mov	r2, r1
 801180e:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8011812:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8011816:	4413      	add	r3, r2
 8011818:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801181c:	f04f 0200 	mov.w	r2, #0
 8011820:	f04f 0300 	mov.w	r3, #0
 8011824:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8011828:	4621      	mov	r1, r4
 801182a:	0f0a      	lsrs	r2, r1, #28
 801182c:	4629      	mov	r1, r5
 801182e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8011832:	4629      	mov	r1, r5
 8011834:	170b      	asrs	r3, r1, #28
 8011836:	4613      	mov	r3, r2
 8011838:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 801183c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011840:	17da      	asrs	r2, r3, #31
 8011842:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011844:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8011846:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801184a:	17da      	asrs	r2, r3, #31
 801184c:	653b      	str	r3, [r7, #80]	@ 0x50
 801184e:	657a      	str	r2, [r7, #84]	@ 0x54
 8011850:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8011854:	462b      	mov	r3, r5
 8011856:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 801185a:	4642      	mov	r2, r8
 801185c:	fb02 f203 	mul.w	r2, r2, r3
 8011860:	464b      	mov	r3, r9
 8011862:	4621      	mov	r1, r4
 8011864:	fb01 f303 	mul.w	r3, r1, r3
 8011868:	4413      	add	r3, r2
 801186a:	4622      	mov	r2, r4
 801186c:	4641      	mov	r1, r8
 801186e:	fba2 1201 	umull	r1, r2, r2, r1
 8011872:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8011876:	460a      	mov	r2, r1
 8011878:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 801187c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011880:	4413      	add	r3, r2
 8011882:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011886:	f04f 0200 	mov.w	r2, #0
 801188a:	f04f 0300 	mov.w	r3, #0
 801188e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8011892:	4621      	mov	r1, r4
 8011894:	0fca      	lsrs	r2, r1, #31
 8011896:	4629      	mov	r1, r5
 8011898:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801189c:	4629      	mov	r1, r5
 801189e:	17cb      	asrs	r3, r1, #31
 80118a0:	4613      	mov	r3, r2
 80118a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 80118a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80118aa:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 80118ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 80118b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80118b6:	17da      	asrs	r2, r3, #31
 80118b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80118ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80118bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80118c0:	17da      	asrs	r2, r3, #31
 80118c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80118c4:	647a      	str	r2, [r7, #68]	@ 0x44
 80118c6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80118ca:	462b      	mov	r3, r5
 80118cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80118d0:	4642      	mov	r2, r8
 80118d2:	fb02 f203 	mul.w	r2, r2, r3
 80118d6:	464b      	mov	r3, r9
 80118d8:	4621      	mov	r1, r4
 80118da:	fb01 f303 	mul.w	r3, r1, r3
 80118de:	4413      	add	r3, r2
 80118e0:	4622      	mov	r2, r4
 80118e2:	4641      	mov	r1, r8
 80118e4:	fba2 1201 	umull	r1, r2, r2, r1
 80118e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80118ec:	460a      	mov	r2, r1
 80118ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80118f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80118f6:	4413      	add	r3, r2
 80118f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80118fc:	f04f 0200 	mov.w	r2, #0
 8011900:	f04f 0300 	mov.w	r3, #0
 8011904:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8011908:	4621      	mov	r1, r4
 801190a:	0f4a      	lsrs	r2, r1, #29
 801190c:	4629      	mov	r1, r5
 801190e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8011912:	4629      	mov	r1, r5
 8011914:	174b      	asrs	r3, r1, #29
 8011916:	4613      	mov	r3, r2
 8011918:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* 3rd iteration */
    temp = ((q63_t) var1 * var1) >> 28;
 801191c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011920:	17da      	asrs	r2, r3, #31
 8011922:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011924:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011926:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801192a:	17da      	asrs	r2, r3, #31
 801192c:	633b      	str	r3, [r7, #48]	@ 0x30
 801192e:	637a      	str	r2, [r7, #52]	@ 0x34
 8011930:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8011934:	462b      	mov	r3, r5
 8011936:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 801193a:	4642      	mov	r2, r8
 801193c:	fb02 f203 	mul.w	r2, r2, r3
 8011940:	464b      	mov	r3, r9
 8011942:	4621      	mov	r1, r4
 8011944:	fb01 f303 	mul.w	r3, r1, r3
 8011948:	4413      	add	r3, r2
 801194a:	4622      	mov	r2, r4
 801194c:	4641      	mov	r1, r8
 801194e:	fba2 1201 	umull	r1, r2, r2, r1
 8011952:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011956:	460a      	mov	r2, r1
 8011958:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 801195c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011960:	4413      	add	r3, r2
 8011962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011966:	f04f 0200 	mov.w	r2, #0
 801196a:	f04f 0300 	mov.w	r3, #0
 801196e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8011972:	4621      	mov	r1, r4
 8011974:	0f0a      	lsrs	r2, r1, #28
 8011976:	4629      	mov	r1, r5
 8011978:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 801197c:	4629      	mov	r1, r5
 801197e:	170b      	asrs	r3, r1, #28
 8011980:	4613      	mov	r3, r2
 8011982:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = ((q63_t) number * temp) >> 31;
 8011986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801198a:	17da      	asrs	r2, r3, #31
 801198c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801198e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011990:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011994:	17da      	asrs	r2, r3, #31
 8011996:	623b      	str	r3, [r7, #32]
 8011998:	627a      	str	r2, [r7, #36]	@ 0x24
 801199a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801199e:	462b      	mov	r3, r5
 80119a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80119a4:	4642      	mov	r2, r8
 80119a6:	fb02 f203 	mul.w	r2, r2, r3
 80119aa:	464b      	mov	r3, r9
 80119ac:	4621      	mov	r1, r4
 80119ae:	fb01 f303 	mul.w	r3, r1, r3
 80119b2:	4413      	add	r3, r2
 80119b4:	4622      	mov	r2, r4
 80119b6:	4641      	mov	r1, r8
 80119b8:	fba2 1201 	umull	r1, r2, r2, r1
 80119bc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80119c0:	460a      	mov	r2, r1
 80119c2:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80119c6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80119ca:	4413      	add	r3, r2
 80119cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80119d0:	f04f 0200 	mov.w	r2, #0
 80119d4:	f04f 0300 	mov.w	r3, #0
 80119d8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80119dc:	4621      	mov	r1, r4
 80119de:	0fca      	lsrs	r2, r1, #31
 80119e0:	4629      	mov	r1, r5
 80119e2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80119e6:	4629      	mov	r1, r5
 80119e8:	17cb      	asrs	r3, r1, #31
 80119ea:	4613      	mov	r3, r2
 80119ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    temp = 0x30000000 - temp; 
 80119f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80119f4:	f1c3 5340 	rsb	r3, r3, #805306368	@ 0x30000000
 80119f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    var1 = ((q63_t) var1 * temp) >> 29;
 80119fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011a00:	17da      	asrs	r2, r3, #31
 8011a02:	61bb      	str	r3, [r7, #24]
 8011a04:	61fa      	str	r2, [r7, #28]
 8011a06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8011a0a:	17da      	asrs	r2, r3, #31
 8011a0c:	613b      	str	r3, [r7, #16]
 8011a0e:	617a      	str	r2, [r7, #20]
 8011a10:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011a14:	462b      	mov	r3, r5
 8011a16:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8011a1a:	4642      	mov	r2, r8
 8011a1c:	fb02 f203 	mul.w	r2, r2, r3
 8011a20:	464b      	mov	r3, r9
 8011a22:	4621      	mov	r1, r4
 8011a24:	fb01 f303 	mul.w	r3, r1, r3
 8011a28:	4413      	add	r3, r2
 8011a2a:	4622      	mov	r2, r4
 8011a2c:	4641      	mov	r1, r8
 8011a2e:	fba2 1201 	umull	r1, r2, r2, r1
 8011a32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011a36:	460a      	mov	r2, r1
 8011a38:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011a3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011a40:	4413      	add	r3, r2
 8011a42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011a46:	f04f 0200 	mov.w	r2, #0
 8011a4a:	f04f 0300 	mov.w	r3, #0
 8011a4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8011a52:	4621      	mov	r1, r4
 8011a54:	0f4a      	lsrs	r2, r1, #29
 8011a56:	4629      	mov	r1, r5
 8011a58:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8011a5c:	4629      	mov	r1, r5
 8011a5e:	174b      	asrs	r3, r1, #29
 8011a60:	e002      	b.n	8011a68 <arm_sqrt_q31+0x444>
 8011a62:	bf00      	nop
 8011a64:	08031e68 	.word	0x08031e68
 8011a68:	4613      	mov	r3, r2
 8011a6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* Multiply the inverse square root with the original value */
    var1 = ((q31_t) (((q63_t) number * var1) >> 28));
 8011a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011a72:	17da      	asrs	r2, r3, #31
 8011a74:	60bb      	str	r3, [r7, #8]
 8011a76:	60fa      	str	r2, [r7, #12]
 8011a78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011a7c:	17da      	asrs	r2, r3, #31
 8011a7e:	603b      	str	r3, [r7, #0]
 8011a80:	607a      	str	r2, [r7, #4]
 8011a82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011a86:	462b      	mov	r3, r5
 8011a88:	e9d7 8900 	ldrd	r8, r9, [r7]
 8011a8c:	4642      	mov	r2, r8
 8011a8e:	fb02 f203 	mul.w	r2, r2, r3
 8011a92:	464b      	mov	r3, r9
 8011a94:	4621      	mov	r1, r4
 8011a96:	fb01 f303 	mul.w	r3, r1, r3
 8011a9a:	4413      	add	r3, r2
 8011a9c:	4622      	mov	r2, r4
 8011a9e:	4641      	mov	r1, r8
 8011aa0:	fba2 1201 	umull	r1, r2, r2, r1
 8011aa4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011aa8:	460a      	mov	r2, r1
 8011aaa:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8011aae:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011ab2:	4413      	add	r3, r2
 8011ab4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011ab8:	f04f 0200 	mov.w	r2, #0
 8011abc:	f04f 0300 	mov.w	r3, #0
 8011ac0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8011ac4:	4621      	mov	r1, r4
 8011ac6:	0f0a      	lsrs	r2, r1, #28
 8011ac8:	4629      	mov	r1, r5
 8011aca:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8011ace:	4629      	mov	r1, r5
 8011ad0:	170b      	asrs	r3, r1, #28
 8011ad2:	4613      	mov	r3, r2
 8011ad4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    /* Shift the output down accordingly */
    if ((signBits1 % 2) == 0)
 8011ad8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011adc:	f003 0301 	and.w	r3, r3, #1
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d10c      	bne.n	8011afe <arm_sqrt_q31+0x4da>
    {
      var1 = var1 >> (signBits1 / 2);
 8011ae4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	da00      	bge.n	8011aee <arm_sqrt_q31+0x4ca>
 8011aec:	3301      	adds	r3, #1
 8011aee:	105b      	asrs	r3, r3, #1
 8011af0:	461a      	mov	r2, r3
 8011af2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011af6:	4113      	asrs	r3, r2
 8011af8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8011afc:	e00c      	b.n	8011b18 <arm_sqrt_q31+0x4f4>
    }
    else
    {
      var1 = var1 >> ((signBits1 - 1) / 2);
 8011afe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011b02:	3b01      	subs	r3, #1
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	da00      	bge.n	8011b0a <arm_sqrt_q31+0x4e6>
 8011b08:	3301      	adds	r3, #1
 8011b0a:	105b      	asrs	r3, r3, #1
 8011b0c:	461a      	mov	r2, r3
 8011b0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011b12:	4113      	asrs	r3, r2
 8011b14:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    }
    *pOut = var1;
 8011b18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011b1c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8011b20:	601a      	str	r2, [r3, #0]

    return (ARM_MATH_SUCCESS);
 8011b22:	2300      	movs	r3, #0
 8011b24:	e00b      	b.n	8011b3e <arm_sqrt_q31+0x51a>
  }
  /* If the number is a negative number then store zero as its square root value */
  else
  {
    *pOut = 0;
 8011b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	601a      	str	r2, [r3, #0]

    if (number==0)
 8011b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d101      	bne.n	8011b3a <arm_sqrt_q31+0x516>
    {
       return (ARM_MATH_SUCCESS);
 8011b36:	2300      	movs	r3, #0
 8011b38:	e001      	b.n	8011b3e <arm_sqrt_q31+0x51a>
    }
    else
    {
       return (ARM_MATH_ARGUMENT_ERROR);
 8011b3a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	37fc      	adds	r7, #252	@ 0xfc
 8011b42:	46bd      	mov	sp, r7
 8011b44:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011b48:	4770      	bx	lr
 8011b4a:	bf00      	nop

08011b4c <arm_scalar_log_q31>:
/* 1.0 / Log2[Exp[1]] in Q31 */
#define LOG_Q31_INVLOG2EXP 0x58b90bfbuL

/* Clay Turner algorithm */
static uint32_t arm_scalar_log_q31(uint32_t src)
{
 8011b4c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011b50:	b08d      	sub	sp, #52	@ 0x34
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	60f8      	str	r0, [r7, #12]
 8011b56:	68f9      	ldr	r1, [r7, #12]
 8011b58:	6139      	str	r1, [r7, #16]
  if (value == 0U)
 8011b5a:	6939      	ldr	r1, [r7, #16]
 8011b5c:	2900      	cmp	r1, #0
 8011b5e:	d101      	bne.n	8011b64 <arm_scalar_log_q31+0x18>
    return 32U;
 8011b60:	2120      	movs	r1, #32
 8011b62:	e003      	b.n	8011b6c <arm_scalar_log_q31+0x20>
  return __builtin_clz(value);
 8011b64:	6939      	ldr	r1, [r7, #16]
 8011b66:	fab1 f181 	clz	r1, r1
 8011b6a:	b2c9      	uxtb	r1, r1
   int32_t i;

   int32_t c = __CLZ(src);
 8011b6c:	61f9      	str	r1, [r7, #28]
   int32_t normalization=0;
 8011b6e:	2100      	movs	r1, #0
 8011b70:	61b9      	str	r1, [r7, #24]

   /* 0.5 in q26 */
   uint32_t inc = LOQ_Q31_Q32_HALF >> (LOG_Q31_INTEGER_PART + 1);
 8011b72:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8011b76:	62b9      	str	r1, [r7, #40]	@ 0x28

   /* Will compute y = log2(x) for 1 <= x < 2.0 */
   uint32_t x;

   /* q26 */
   uint32_t y=0;
 8011b78:	2100      	movs	r1, #0
 8011b7a:	6239      	str	r1, [r7, #32]
   /* q26 */
   int32_t tmp;


   /* Normalize and convert to q30 format */
   x = src;
 8011b7c:	68f9      	ldr	r1, [r7, #12]
 8011b7e:	6279      	str	r1, [r7, #36]	@ 0x24
   if ((c-1) < 0)
 8011b80:	69f9      	ldr	r1, [r7, #28]
 8011b82:	2900      	cmp	r1, #0
 8011b84:	dc07      	bgt.n	8011b96 <arm_scalar_log_q31+0x4a>
   {
     x = x >> (1-c);
 8011b86:	69f9      	ldr	r1, [r7, #28]
 8011b88:	f1c1 0101 	rsb	r1, r1, #1
 8011b8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b8e:	fa20 f101 	lsr.w	r1, r0, r1
 8011b92:	6279      	str	r1, [r7, #36]	@ 0x24
 8011b94:	e005      	b.n	8011ba2 <arm_scalar_log_q31+0x56>
   }
   else
   {
     x = x << (c-1);
 8011b96:	69f9      	ldr	r1, [r7, #28]
 8011b98:	3901      	subs	r1, #1
 8011b9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b9c:	fa00 f101 	lsl.w	r1, r0, r1
 8011ba0:	6279      	str	r1, [r7, #36]	@ 0x24
   }
   normalization = c;
 8011ba2:	69f9      	ldr	r1, [r7, #28]
 8011ba4:	61b9      	str	r1, [r7, #24]
   /* Compute the Log2. Result is in q26
      because we know 0 <= y < 1.0 but
      do not want to use q32 to allow
      following computation with less instructions.
   */
   for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 8011ba6:	2100      	movs	r1, #0
 8011ba8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8011baa:	e02d      	b.n	8011c08 <arm_scalar_log_q31+0xbc>
   {
      x = ((int64_t)x*x)  >> (LOG_Q31_ACCURACY - 1);
 8011bac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011bae:	2000      	movs	r0, #0
 8011bb0:	468a      	mov	sl, r1
 8011bb2:	4683      	mov	fp, r0
 8011bb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011bb6:	2000      	movs	r0, #0
 8011bb8:	6039      	str	r1, [r7, #0]
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	6839      	ldr	r1, [r7, #0]
 8011bbe:	fb01 f00b 	mul.w	r0, r1, fp
 8011bc2:	6879      	ldr	r1, [r7, #4]
 8011bc4:	fb0a f101 	mul.w	r1, sl, r1
 8011bc8:	4401      	add	r1, r0
 8011bca:	6838      	ldr	r0, [r7, #0]
 8011bcc:	fbaa 4500 	umull	r4, r5, sl, r0
 8011bd0:	4429      	add	r1, r5
 8011bd2:	460d      	mov	r5, r1
 8011bd4:	f04f 0000 	mov.w	r0, #0
 8011bd8:	f04f 0100 	mov.w	r1, #0
 8011bdc:	0fa0      	lsrs	r0, r4, #30
 8011bde:	ea40 0085 	orr.w	r0, r0, r5, lsl #2
 8011be2:	17a9      	asrs	r1, r5, #30
 8011be4:	4601      	mov	r1, r0
 8011be6:	6279      	str	r1, [r7, #36]	@ 0x24

      if (x >= LOQ_Q31_THRESHOLD)
 8011be8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011bea:	2900      	cmp	r1, #0
 8011bec:	da06      	bge.n	8011bfc <arm_scalar_log_q31+0xb0>
      {
         y += inc ;
 8011bee:	6a38      	ldr	r0, [r7, #32]
 8011bf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011bf2:	4401      	add	r1, r0
 8011bf4:	6239      	str	r1, [r7, #32]
         x = x >> 1;
 8011bf6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011bf8:	0849      	lsrs	r1, r1, #1
 8011bfa:	6279      	str	r1, [r7, #36]	@ 0x24
      }
      inc = inc >> 1;
 8011bfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011bfe:	0849      	lsrs	r1, r1, #1
 8011c00:	62b9      	str	r1, [r7, #40]	@ 0x28
   for(i = 0; i < LOG_Q31_ACCURACY ; i++)
 8011c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011c04:	3101      	adds	r1, #1
 8011c06:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8011c08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011c0a:	291e      	cmp	r1, #30
 8011c0c:	ddce      	ble.n	8011bac <arm_scalar_log_q31+0x60>
      We compute (y - normalisation) * (1 / Log2[e]).

   */

   /* q26 */
   tmp = (int32_t)y - (normalization << (LOG_Q31_ACCURACY - LOG_Q31_INTEGER_PART));
 8011c0e:	6a38      	ldr	r0, [r7, #32]
 8011c10:	69b9      	ldr	r1, [r7, #24]
 8011c12:	0689      	lsls	r1, r1, #26
 8011c14:	1a41      	subs	r1, r0, r1
 8011c16:	6179      	str	r1, [r7, #20]


   /* q5.26 */
   y = ((int64_t)tmp * LOG_Q31_INVLOG2EXP) >> 31;
 8011c18:	6979      	ldr	r1, [r7, #20]
 8011c1a:	17c8      	asrs	r0, r1, #31
 8011c1c:	4688      	mov	r8, r1
 8011c1e:	4681      	mov	r9, r0
 8011c20:	490e      	ldr	r1, [pc, #56]	@ (8011c5c <arm_scalar_log_q31+0x110>)
 8011c22:	fb01 f009 	mul.w	r0, r1, r9
 8011c26:	2100      	movs	r1, #0
 8011c28:	fb01 f108 	mul.w	r1, r1, r8
 8011c2c:	4401      	add	r1, r0
 8011c2e:	480b      	ldr	r0, [pc, #44]	@ (8011c5c <arm_scalar_log_q31+0x110>)
 8011c30:	fba8 2300 	umull	r2, r3, r8, r0
 8011c34:	4419      	add	r1, r3
 8011c36:	460b      	mov	r3, r1
 8011c38:	f04f 0000 	mov.w	r0, #0
 8011c3c:	f04f 0100 	mov.w	r1, #0
 8011c40:	0fd0      	lsrs	r0, r2, #31
 8011c42:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8011c46:	17d9      	asrs	r1, r3, #31
 8011c48:	4603      	mov	r3, r0
 8011c4a:	623b      	str	r3, [r7, #32]



   return(y);
 8011c4c:	6a3b      	ldr	r3, [r7, #32]

}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3734      	adds	r7, #52	@ 0x34
 8011c52:	46bd      	mov	sp, r7
 8011c54:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011c58:	4770      	bx	lr
 8011c5a:	bf00      	nop
 8011c5c:	58b90bfb 	.word	0x58b90bfb

08011c60 <arm_vlog_q31>:
 */
ARM_DSP_ATTRIBUTE void arm_vlog_q31(
  const q31_t * pSrc,
        q31_t * pDst,
        uint32_t blockSize)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b086      	sub	sp, #24
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	60f8      	str	r0, [r7, #12]
 8011c68:	60b9      	str	r1, [r7, #8]
 8011c6a:	607a      	str	r2, [r7, #4]
      blkCnt--;
  }

  blkCnt = blockSize & 3;
  #else
  blkCnt = blockSize;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	617b      	str	r3, [r7, #20]
  #endif

  while (blkCnt > 0U)
 8011c70:	e00f      	b.n	8011c92 <arm_vlog_q31+0x32>
  {
     *pDst++=arm_scalar_log_q31(*pSrc++);
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	1d1a      	adds	r2, r3, #4
 8011c76:	60fa      	str	r2, [r7, #12]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7ff ff66 	bl	8011b4c <arm_scalar_log_q31>
 8011c80:	4601      	mov	r1, r0
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	1d1a      	adds	r2, r3, #4
 8011c86:	60ba      	str	r2, [r7, #8]
 8011c88:	460a      	mov	r2, r1
 8011c8a:	601a      	str	r2, [r3, #0]

     blkCnt--;
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	3b01      	subs	r3, #1
 8011c90:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d1ec      	bne.n	8011c72 <arm_vlog_q31+0x12>
  }

}
 8011c98:	bf00      	nop
 8011c9a:	bf00      	nop
 8011c9c:	3718      	adds	r7, #24
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <arm_mat_vec_mult_q15>:
    }
}

#else
ARM_DSP_ATTRIBUTE void arm_mat_vec_mult_q15(const arm_matrix_instance_q15 *pSrcMat, const q15_t *pVec, q15_t *pDst)
{
 8011ca2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011ca6:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8011caa:	af00      	add	r7, sp, #0
 8011cac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cb0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011cb4:	6018      	str	r0, [r3, #0]
 8011cb6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011cbe:	6019      	str	r1, [r3, #0]
 8011cc0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cc4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8011cc8:	601a      	str	r2, [r3, #0]
    uint32_t numRows = pSrcMat->numRows;
 8011cca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cce:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	881b      	ldrh	r3, [r3, #0]
 8011cd6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    uint32_t numCols = pSrcMat->numCols;
 8011cda:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cde:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	885b      	ldrh	r3, [r3, #2]
 8011ce6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    const q15_t *pSrcA = pSrcMat->pData;
 8011cea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011cee:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    uint16_t i, row, colCnt; /* loop counters */
    q31_t matData, matData2, vecData, vecData2;


    /* Process 4 rows at a time */
    row = numRows >> 2;
 8011cfa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8011cfe:	089b      	lsrs	r3, r3, #2
 8011d00:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    i = 0u;
 8011d04:	2300      	movs	r3, #0
 8011d06:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
    px = pDst;
 8011d0a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d0e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c

    /* The following loop performs the dot-product of each row in pSrcA with the vector */
    /* row loop */
    while (row > 0) {
 8011d18:	e34b      	b.n	80123b2 <arm_mat_vec_mult_q15+0x710>
        /* Initialize accumulators */
        q63_t sum1 = 0;
 8011d1a:	f04f 0200 	mov.w	r2, #0
 8011d1e:	f04f 0300 	mov.w	r3, #0
 8011d22:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
        q63_t sum2 = 0;
 8011d26:	f04f 0200 	mov.w	r2, #0
 8011d2a:	f04f 0300 	mov.w	r3, #0
 8011d2e:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
        q63_t sum3 = 0;
 8011d32:	f04f 0200 	mov.w	r2, #0
 8011d36:	f04f 0300 	mov.w	r3, #0
 8011d3a:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
        q63_t sum4 = 0;
 8011d3e:	f04f 0200 	mov.w	r2, #0
 8011d42:	f04f 0300 	mov.w	r3, #0
 8011d46:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0

        /* For every row wise process, the pInVec pointer is set
         ** to the starting address of the vector */
        pInVec = pVec;
 8011d4a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d4e:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8011d52:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d56:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	6013      	str	r3, [r2, #0]

        /* Loop unrolling: process 2 columns per iteration */
        colCnt = numCols >> 1;
 8011d5e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011d62:	085b      	lsrs	r3, r3, #1
 8011d64:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216

        /* Initialize pointers to the starting address of the column being processed */
        pInA1 = pSrcA + i;
 8011d68:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8011d6c:	005a      	lsls	r2, r3, #1
 8011d6e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8011d72:	441a      	add	r2, r3
 8011d74:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d78:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011d7c:	601a      	str	r2, [r3, #0]
        pInA2 = pInA1 + numCols;
 8011d7e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d82:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011d86:	681a      	ldr	r2, [r3, #0]
 8011d88:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011d8c:	005b      	lsls	r3, r3, #1
 8011d8e:	441a      	add	r2, r3
 8011d90:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d94:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011d98:	601a      	str	r2, [r3, #0]
        pInA3 = pInA2 + numCols;
 8011d9a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011d9e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011da2:	681a      	ldr	r2, [r3, #0]
 8011da4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011da8:	005b      	lsls	r3, r3, #1
 8011daa:	441a      	add	r2, r3
 8011dac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011db0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011db4:	601a      	str	r2, [r3, #0]
        pInA4 = pInA3 + numCols;
 8011db6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011dba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011dbe:	681a      	ldr	r2, [r3, #0]
 8011dc0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8011dc4:	005b      	lsls	r3, r3, #1
 8011dc6:	441a      	add	r2, r3
 8011dc8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011dcc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8011dd0:	601a      	str	r2, [r3, #0]

        // Main loop: matrix-vector multiplication
        while (colCnt > 0u) {
 8011dd2:	e16b      	b.n	80120ac <arm_mat_vec_mult_q15+0x40a>
            // Read 2 values from vector
            vecData = read_q15x2_ia (&pInVec);
 8011dd4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011dd8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	1d1a      	adds	r2, r3, #4
 8011de0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011de4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011de8:	601a      	str	r2, [r3, #0]
 8011dea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011dee:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	3b04      	subs	r3, #4
 8011df6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  memcpy (&val, pQ15, 4);
 8011dfa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	461a      	mov	r2, r3
 8011e02:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e06:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8011e0a:	601a      	str	r2, [r3, #0]
  return (val);
 8011e0c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e10:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

            // Read 8 values from the matrix - 2 values from each of 4 rows, and do multiply accumulate
            matData =  read_q15x2_ia (&pInA1);
 8011e1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e1e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	1d1a      	adds	r2, r3, #4
 8011e26:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011e2e:	601a      	str	r2, [r3, #0]
 8011e30:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e34:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	3b04      	subs	r3, #4
 8011e3c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  memcpy (&val, pQ15, 4);
 8011e40:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	461a      	mov	r2, r3
 8011e48:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e50:	601a      	str	r2, [r3, #0]
  return (val);
 8011e52:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum1 = __SMLALD(matData, vecData, sum1);
 8011e60:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8011e64:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8011e68:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8011e6c:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
 8011e70:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 8011e74:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
  llr.w64 = acc;
 8011e78:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8011e7c:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8011e80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e84:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011e88:	6819      	ldr	r1, [r3, #0]
 8011e8a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011e8e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011e92:	685a      	ldr	r2, [r3, #4]
 8011e94:	f8d7 0158 	ldr.w	r0, [r7, #344]	@ 0x158
 8011e98:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8011e9c:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8011ea0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ea4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011ea8:	6019      	str	r1, [r3, #0]
 8011eaa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011eae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011eb2:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8011eb4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8011eb8:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
            matData = read_q15x2_ia (&pInA2);
 8011ebc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ec0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	1d1a      	adds	r2, r3, #4
 8011ec8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ecc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011ed0:	601a      	str	r2, [r3, #0]
 8011ed2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ed6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	3b04      	subs	r3, #4
 8011ede:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  memcpy (&val, pQ15, 4);
 8011ee2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	461a      	mov	r2, r3
 8011eea:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011eee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8011ef2:	601a      	str	r2, [r3, #0]
  return (val);
 8011ef4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ef8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum2 = __SMLALD(matData, vecData, sum2);
 8011f02:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8011f06:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8011f0a:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8011f0e:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170
 8011f12:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
 8011f16:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
  llr.w64 = acc;
 8011f1a:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8011f1e:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8011f22:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f26:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011f2a:	6819      	ldr	r1, [r3, #0]
 8011f2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f30:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011f34:	685a      	ldr	r2, [r3, #4]
 8011f36:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 8011f3a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8011f3e:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8011f42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f46:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011f4a:	6019      	str	r1, [r3, #0]
 8011f4c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f50:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8011f54:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8011f56:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8011f5a:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
            matData = read_q15x2_ia (&pInA3);
 8011f5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f62:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	1d1a      	adds	r2, r3, #4
 8011f6a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f6e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011f72:	601a      	str	r2, [r3, #0]
 8011f74:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f78:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	3b04      	subs	r3, #4
 8011f80:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
  memcpy (&val, pQ15, 4);
 8011f84:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	461a      	mov	r2, r3
 8011f8c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f90:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011f94:	601a      	str	r2, [r3, #0]
  return (val);
 8011f96:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011f9a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum3 = __SMLALD(matData, vecData, sum3);
 8011fa4:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8011fa8:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8011fac:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8011fb0:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
 8011fb4:	f8c7 1184 	str.w	r1, [r7, #388]	@ 0x184
 8011fb8:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
  llr.w64 = acc;
 8011fbc:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8011fc0:	e9c7 2332 	strd	r2, r3, [r7, #200]	@ 0xc8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8011fc4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fc8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011fcc:	6819      	ldr	r1, [r3, #0]
 8011fce:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fd2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011fd6:	685a      	ldr	r2, [r3, #4]
 8011fd8:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8011fdc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8011fe0:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8011fe4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011fe8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011fec:	6019      	str	r1, [r3, #0]
 8011fee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8011ff2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8011ff6:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8011ff8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8011ffc:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
            matData = read_q15x2_ia (&pInA4);
 8012000:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012004:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	1d1a      	adds	r2, r3, #4
 801200c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012010:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8012014:	601a      	str	r2, [r3, #0]
 8012016:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801201a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	3b04      	subs	r3, #4
 8012022:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  memcpy (&val, pQ15, 4);
 8012026:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	461a      	mov	r2, r3
 801202e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012032:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8012036:	601a      	str	r2, [r3, #0]
  return (val);
 8012038:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801203c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            sum4 = __SMLALD(matData, vecData, sum4);
 8012046:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 801204a:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 801204e:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8012052:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
 8012056:	f8c7 119c 	str.w	r1, [r7, #412]	@ 0x19c
 801205a:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
  llr.w64 = acc;
 801205e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8012062:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8012066:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801206a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801206e:	6819      	ldr	r1, [r3, #0]
 8012070:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012074:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8012078:	685a      	ldr	r2, [r3, #4]
 801207a:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 801207e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8012082:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8012086:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801208a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 801208e:	6019      	str	r1, [r3, #0]
 8012090:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012094:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8012098:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 801209a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 801209e:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0

            // Decrement the loop counter
            colCnt--;
 80120a2:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80120a6:	3b01      	subs	r3, #1
 80120a8:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0u) {
 80120ac:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	f47f ae8f 	bne.w	8011dd4 <arm_mat_vec_mult_q15+0x132>
        }

        /* process any remaining columns */
        colCnt = numCols & 1u;
 80120b6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	f003 0301 	and.w	r3, r3, #1
 80120c0:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        if (numCols & 1u) {
 80120c4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80120c8:	f003 0301 	and.w	r3, r3, #1
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	f000 80f1 	beq.w	80122b4 <arm_mat_vec_mult_q15+0x612>
            vecData = *pInVec++;
 80120d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120d6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80120da:	6819      	ldr	r1, [r3, #0]
 80120dc:	1c8a      	adds	r2, r1, #2
 80120de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120e2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80120e6:	601a      	str	r2, [r3, #0]
 80120e8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80120ec:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
            sum1 += (q63_t)*pInA1++ * vecData;
 80120f0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80120f4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80120f8:	6819      	ldr	r1, [r3, #0]
 80120fa:	1c8a      	adds	r2, r1, #2
 80120fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012100:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012104:	601a      	str	r2, [r3, #0]
 8012106:	f9b1 3000 	ldrsh.w	r3, [r1]
 801210a:	b21b      	sxth	r3, r3
 801210c:	17da      	asrs	r2, r3, #31
 801210e:	673b      	str	r3, [r7, #112]	@ 0x70
 8012110:	677a      	str	r2, [r7, #116]	@ 0x74
 8012112:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012116:	17da      	asrs	r2, r3, #31
 8012118:	66bb      	str	r3, [r7, #104]	@ 0x68
 801211a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801211c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8012120:	460b      	mov	r3, r1
 8012122:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012124:	fb02 f203 	mul.w	r2, r2, r3
 8012128:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801212a:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
 801212e:	4601      	mov	r1, r0
 8012130:	fb01 f303 	mul.w	r3, r1, r3
 8012134:	4413      	add	r3, r2
 8012136:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8012138:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801213a:	fba2 1201 	umull	r1, r2, r2, r1
 801213e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8012142:	460a      	mov	r2, r1
 8012144:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012148:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801214c:	4413      	add	r3, r2
 801214e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012152:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8012156:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801215a:	1851      	adds	r1, r2, r1
 801215c:	6239      	str	r1, [r7, #32]
 801215e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8012162:	414b      	adcs	r3, r1
 8012164:	627b      	str	r3, [r7, #36]	@ 0x24
 8012166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801216a:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
            sum2 += (q63_t)*pInA2++ * vecData;
 801216e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012172:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8012176:	6819      	ldr	r1, [r3, #0]
 8012178:	1c8a      	adds	r2, r1, #2
 801217a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801217e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8012182:	601a      	str	r2, [r3, #0]
 8012184:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012188:	b21b      	sxth	r3, r3
 801218a:	17da      	asrs	r2, r3, #31
 801218c:	663b      	str	r3, [r7, #96]	@ 0x60
 801218e:	667a      	str	r2, [r7, #100]	@ 0x64
 8012190:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012194:	17da      	asrs	r2, r3, #31
 8012196:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012198:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801219a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801219e:	460b      	mov	r3, r1
 80121a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80121a2:	fb02 f203 	mul.w	r2, r2, r3
 80121a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121a8:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 80121ac:	4601      	mov	r1, r0
 80121ae:	fb01 f303 	mul.w	r3, r1, r3
 80121b2:	4413      	add	r3, r2
 80121b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80121b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80121b8:	fba2 1201 	umull	r1, r2, r2, r1
 80121bc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80121be:	460a      	mov	r2, r1
 80121c0:	67ba      	str	r2, [r7, #120]	@ 0x78
 80121c2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80121c4:	4413      	add	r3, r2
 80121c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80121c8:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80121cc:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80121ce:	1851      	adds	r1, r2, r1
 80121d0:	61b9      	str	r1, [r7, #24]
 80121d2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80121d4:	414b      	adcs	r3, r1
 80121d6:	61fb      	str	r3, [r7, #28]
 80121d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80121dc:	e9c7 2380 	strd	r2, r3, [r7, #512]	@ 0x200
            sum3 += (q63_t)*pInA3++ * vecData;
 80121e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80121e4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80121e8:	6819      	ldr	r1, [r3, #0]
 80121ea:	1c8a      	adds	r2, r1, #2
 80121ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80121f0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80121f4:	601a      	str	r2, [r3, #0]
 80121f6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80121fa:	b21b      	sxth	r3, r3
 80121fc:	17da      	asrs	r2, r3, #31
 80121fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8012200:	657a      	str	r2, [r7, #84]	@ 0x54
 8012202:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012206:	17da      	asrs	r2, r3, #31
 8012208:	64bb      	str	r3, [r7, #72]	@ 0x48
 801220a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801220c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8012210:	460b      	mov	r3, r1
 8012212:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012214:	fb02 f203 	mul.w	r2, r2, r3
 8012218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801221a:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 801221e:	4601      	mov	r1, r0
 8012220:	fb01 f303 	mul.w	r3, r1, r3
 8012224:	4413      	add	r3, r2
 8012226:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012228:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801222a:	fba2 ab01 	umull	sl, fp, r2, r1
 801222e:	445b      	add	r3, fp
 8012230:	469b      	mov	fp, r3
 8012232:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8012236:	eb12 010a 	adds.w	r1, r2, sl
 801223a:	6139      	str	r1, [r7, #16]
 801223c:	eb43 030b 	adc.w	r3, r3, fp
 8012240:	617b      	str	r3, [r7, #20]
 8012242:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012246:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
            sum4 += (q63_t)*pInA4++ * vecData;
 801224a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801224e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8012252:	6819      	ldr	r1, [r3, #0]
 8012254:	1c8a      	adds	r2, r1, #2
 8012256:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801225a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801225e:	601a      	str	r2, [r3, #0]
 8012260:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012264:	b21b      	sxth	r3, r3
 8012266:	17da      	asrs	r2, r3, #31
 8012268:	643b      	str	r3, [r7, #64]	@ 0x40
 801226a:	647a      	str	r2, [r7, #68]	@ 0x44
 801226c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012270:	17da      	asrs	r2, r3, #31
 8012272:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012274:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8012276:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801227a:	460b      	mov	r3, r1
 801227c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801227e:	fb02 f203 	mul.w	r2, r2, r3
 8012282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012284:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8012288:	4601      	mov	r1, r0
 801228a:	fb01 f303 	mul.w	r3, r1, r3
 801228e:	4413      	add	r3, r2
 8012290:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012292:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012294:	fba2 8901 	umull	r8, r9, r2, r1
 8012298:	444b      	add	r3, r9
 801229a:	4699      	mov	r9, r3
 801229c:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 80122a0:	eb12 0108 	adds.w	r1, r2, r8
 80122a4:	60b9      	str	r1, [r7, #8]
 80122a6:	eb43 0309 	adc.w	r3, r3, r9
 80122aa:	60fb      	str	r3, [r7, #12]
 80122ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80122b0:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
        }

        /* Saturate and store the result in the destination buffer */
        *px++ = (q15_t)(__SSAT((sum1 >> 15), 16));
 80122b4:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80122b8:	f04f 0000 	mov.w	r0, #0
 80122bc:	f04f 0100 	mov.w	r1, #0
 80122c0:	0bd0      	lsrs	r0, r2, #15
 80122c2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80122c6:	13d9      	asrs	r1, r3, #15
 80122c8:	4603      	mov	r3, r0
 80122ca:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80122ce:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80122d2:	f303 030f 	ssat	r3, #16, r3
 80122d6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80122da:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 80122de:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80122e2:	1c93      	adds	r3, r2, #2
 80122e4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 80122e8:	b20b      	sxth	r3, r1
 80122ea:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum2 >> 15), 16));
 80122ec:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80122f0:	f04f 0000 	mov.w	r0, #0
 80122f4:	f04f 0100 	mov.w	r1, #0
 80122f8:	0bd0      	lsrs	r0, r2, #15
 80122fa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80122fe:	13d9      	asrs	r1, r3, #15
 8012300:	4603      	mov	r3, r0
 8012302:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8012306:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 801230a:	f303 030f 	ssat	r3, #16, r3
 801230e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8012312:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 8012316:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801231a:	1c93      	adds	r3, r2, #2
 801231c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8012320:	b20b      	sxth	r3, r1
 8012322:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum3 >> 15), 16));
 8012324:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8012328:	f04f 0000 	mov.w	r0, #0
 801232c:	f04f 0100 	mov.w	r1, #0
 8012330:	0bd0      	lsrs	r0, r2, #15
 8012332:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8012336:	13d9      	asrs	r1, r3, #15
 8012338:	4603      	mov	r3, r0
 801233a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 801233e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8012342:	f303 030f 	ssat	r3, #16, r3
 8012346:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 801234a:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 801234e:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8012352:	1c93      	adds	r3, r2, #2
 8012354:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8012358:	b20b      	sxth	r3, r1
 801235a:	8013      	strh	r3, [r2, #0]
        *px++ = (q15_t)(__SSAT((sum4 >> 15), 16));
 801235c:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8012360:	f04f 0000 	mov.w	r0, #0
 8012364:	f04f 0100 	mov.w	r1, #0
 8012368:	0bd0      	lsrs	r0, r2, #15
 801236a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 801236e:	13d9      	asrs	r1, r3, #15
 8012370:	4603      	mov	r3, r0
 8012372:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8012376:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 801237a:	f303 030f 	ssat	r3, #16, r3
 801237e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8012382:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8012386:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801238a:	1c93      	adds	r3, r2, #2
 801238c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8012390:	b20b      	sxth	r3, r1
 8012392:	8013      	strh	r3, [r2, #0]

        i = i + numCols * 4;
 8012394:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8012398:	b29b      	uxth	r3, r3
 801239a:	009b      	lsls	r3, r3, #2
 801239c:	b29a      	uxth	r2, r3
 801239e:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 80123a2:	4413      	add	r3, r2
 80123a4:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a

        /* Decrement the row loop counter */
        row--;
 80123a8:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80123ac:	3b01      	subs	r3, #1
 80123ae:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 80123b2:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	f47f acaf 	bne.w	8011d1a <arm_mat_vec_mult_q15+0x78>
    }

    /* process any remaining rows */
    row = numRows & 3u;
 80123bc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80123c0:	b29b      	uxth	r3, r3
 80123c2:	f003 0303 	and.w	r3, r3, #3
 80123c6:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 80123ca:	e1a3      	b.n	8012714 <arm_mat_vec_mult_q15+0xa72>

        q63_t sum = 0;
 80123cc:	f04f 0200 	mov.w	r2, #0
 80123d0:	f04f 0300 	mov.w	r3, #0
 80123d4:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
        pInVec = pVec;
 80123d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80123e0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80123e4:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 80123e8:	6812      	ldr	r2, [r2, #0]
 80123ea:	601a      	str	r2, [r3, #0]
        pInA1 = pSrcA + i;
 80123ec:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 80123f0:	005b      	lsls	r3, r3, #1
 80123f2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80123f6:	441a      	add	r2, r3
 80123f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80123fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012400:	601a      	str	r2, [r3, #0]

        // loop unrolling - process 4 elements at a time
        colCnt = numCols >> 2;
 8012402:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8012406:	089b      	lsrs	r3, r3, #2
 8012408:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216

        while (colCnt > 0) {
 801240c:	e104      	b.n	8012618 <arm_mat_vec_mult_q15+0x976>
            vecData = read_q15x2_ia (&pInVec);
 801240e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012412:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	1d1a      	adds	r2, r3, #4
 801241a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801241e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012422:	601a      	str	r2, [r3, #0]
 8012424:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012428:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	1f1a      	subs	r2, r3, #4
 8012430:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012434:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8012438:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801243a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801243e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	461a      	mov	r2, r3
 8012448:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801244c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8012450:	601a      	str	r2, [r3, #0]
  return (val);
 8012452:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012456:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
            vecData2 = read_q15x2_ia (&pInVec);
 8012460:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012464:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	1d1a      	adds	r2, r3, #4
 801246c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012470:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012474:	601a      	str	r2, [r3, #0]
 8012476:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801247a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	1f1a      	subs	r2, r3, #4
 8012482:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012486:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801248a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801248c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012490:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	461a      	mov	r2, r3
 801249a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801249e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80124a2:	601a      	str	r2, [r3, #0]
  return (val);
 80124a4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124a8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
            matData = read_q15x2_ia (&pInA1);
 80124b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	1d1a      	adds	r2, r3, #4
 80124be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80124c6:	601a      	str	r2, [r3, #0]
 80124c8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	1f1a      	subs	r2, r3, #4
 80124d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80124dc:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80124de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	461a      	mov	r2, r3
 80124ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124f0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80124f4:	601a      	str	r2, [r3, #0]
  return (val);
 80124f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80124fa:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
            matData2 = read_q15x2_ia (&pInA1);
 8012504:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012508:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	1d1a      	adds	r2, r3, #4
 8012510:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012514:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012518:	601a      	str	r2, [r3, #0]
 801251a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801251e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	1f1a      	subs	r2, r3, #4
 8012526:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801252a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801252e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8012530:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	461a      	mov	r2, r3
 801253e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012542:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8012546:	601a      	str	r2, [r3, #0]
  return (val);
 8012548:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801254c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
            sum = __SMLALD(matData, vecData, sum);
 8012556:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 801255a:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 801255e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8012562:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 8012566:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 801256a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
  llr.w64 = acc;
 801256e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8012572:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8012576:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801257a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 801257e:	681a      	ldr	r2, [r3, #0]
 8012580:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012584:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 801258e:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8012592:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8012596:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 801259a:	f5a1 71c0 	sub.w	r1, r1, #384	@ 0x180
 801259e:	600a      	str	r2, [r1, #0]
 80125a0:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80125a4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80125a8:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 80125aa:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80125ae:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            sum = __SMLALD(matData2, vecData2, sum);
 80125b2:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 80125b6:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 80125ba:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80125be:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
 80125c2:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 80125c6:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
  llr.w64 = acc;
 80125ca:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80125ce:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80125d2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80125d6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80125da:	681a      	ldr	r2, [r3, #0]
 80125dc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80125e0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80125e4:	685b      	ldr	r3, [r3, #4]
 80125e6:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80125ea:	f8d7 0138 	ldr.w	r0, [r7, #312]	@ 0x138
 80125ee:	fbc1 23c0 	smlald	r2, r3, r1, r0
 80125f2:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 80125f6:	f5a1 71c4 	sub.w	r1, r1, #392	@ 0x188
 80125fa:	600a      	str	r2, [r1, #0]
 80125fc:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8012600:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8012604:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8012606:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 801260a:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            colCnt--;
 801260e:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8012612:	3b01      	subs	r3, #1
 8012614:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 8012618:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 801261c:	2b00      	cmp	r3, #0
 801261e:	f47f aef6 	bne.w	801240e <arm_mat_vec_mult_q15+0x76c>
        }

        // process remainder of row
        colCnt = numCols & 3u;
 8012622:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8012626:	b29b      	uxth	r3, r3
 8012628:	f003 0303 	and.w	r3, r3, #3
 801262c:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 8012630:	e043      	b.n	80126ba <arm_mat_vec_mult_q15+0xa18>
            sum += (q63_t)*pInA1++ * *pInVec++;
 8012632:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012636:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	1c99      	adds	r1, r3, #2
 801263e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8012642:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8012646:	6011      	str	r1, [r2, #0]
 8012648:	f9b3 3000 	ldrsh.w	r3, [r3]
 801264c:	b21b      	sxth	r3, r3
 801264e:	17da      	asrs	r2, r3, #31
 8012650:	633b      	str	r3, [r7, #48]	@ 0x30
 8012652:	637a      	str	r2, [r7, #52]	@ 0x34
 8012654:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8012658:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	1c99      	adds	r1, r3, #2
 8012660:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8012664:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8012668:	6011      	str	r1, [r2, #0]
 801266a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801266e:	b21b      	sxth	r3, r3
 8012670:	17da      	asrs	r2, r3, #31
 8012672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012674:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012676:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 801267a:	464b      	mov	r3, r9
 801267c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 8012680:	4652      	mov	r2, sl
 8012682:	fb02 f203 	mul.w	r2, r2, r3
 8012686:	465b      	mov	r3, fp
 8012688:	4641      	mov	r1, r8
 801268a:	fb01 f303 	mul.w	r3, r1, r3
 801268e:	4413      	add	r3, r2
 8012690:	4642      	mov	r2, r8
 8012692:	4651      	mov	r1, sl
 8012694:	fba2 4501 	umull	r4, r5, r2, r1
 8012698:	442b      	add	r3, r5
 801269a:	461d      	mov	r5, r3
 801269c:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 80126a0:	1911      	adds	r1, r2, r4
 80126a2:	6039      	str	r1, [r7, #0]
 80126a4:	416b      	adcs	r3, r5
 80126a6:	607b      	str	r3, [r7, #4]
 80126a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80126ac:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
            colCnt--;
 80126b0:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80126b4:	3b01      	subs	r3, #1
 80126b6:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
        while (colCnt > 0) {
 80126ba:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d1b7      	bne.n	8012632 <arm_mat_vec_mult_q15+0x990>
        }
        *px++ = (q15_t)(__SSAT((sum >> 15), 16));
 80126c2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 80126c6:	f04f 0200 	mov.w	r2, #0
 80126ca:	f04f 0300 	mov.w	r3, #0
 80126ce:	0bc2      	lsrs	r2, r0, #15
 80126d0:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80126d4:	13cb      	asrs	r3, r1, #15
 80126d6:	4613      	mov	r3, r2
 80126d8:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80126dc:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80126e0:	f303 030f 	ssat	r3, #16, r3
 80126e4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80126e8:	f8d7 11d4 	ldr.w	r1, [r7, #468]	@ 0x1d4
 80126ec:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80126f0:	1c9a      	adds	r2, r3, #2
 80126f2:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 80126f6:	b20a      	sxth	r2, r1
 80126f8:	801a      	strh	r2, [r3, #0]
        i = i + numCols;
 80126fa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80126fe:	b29a      	uxth	r2, r3
 8012700:	f8b7 321a 	ldrh.w	r3, [r7, #538]	@ 0x21a
 8012704:	4413      	add	r3, r2
 8012706:	f8a7 321a 	strh.w	r3, [r7, #538]	@ 0x21a
        row--;
 801270a:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 801270e:	3b01      	subs	r3, #1
 8012710:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    while (row > 0) {
 8012714:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8012718:	2b00      	cmp	r3, #0
 801271a:	f47f ae57 	bne.w	80123cc <arm_mat_vec_mult_q15+0x72a>
    }
}
 801271e:	bf00      	nop
 8012720:	bf00      	nop
 8012722:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 8012726:	46bd      	mov	sp, r7
 8012728:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801272c:	4770      	bx	lr

0801272e <arm_absmax_q15>:
ARM_DSP_ATTRIBUTE void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 801272e:	b480      	push	{r7}
 8012730:	b09d      	sub	sp, #116	@ 0x74
 8012732:	af00      	add	r7, sp, #0
 8012734:	60f8      	str	r0, [r7, #12]
 8012736:	60b9      	str	r1, [r7, #8]
 8012738:	607a      	str	r2, [r7, #4]
 801273a:	603b      	str	r3, [r7, #0]
        q15_t cur_absmax, out;                     /* Temporary variables to store the output value. */\
        uint32_t blkCnt, outIndex;                     /* Loop counter */                                   \
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
 801273c:	2300      	movs	r3, #0
 801273e:	667b      	str	r3, [r7, #100]	@ 0x64
  /* Load first input value that act as reference value for comparison */                                  \
  out = *pSrc++;                                                                                            \
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	1c9a      	adds	r2, r3, #2
 8012744:	60fa      	str	r2, [r7, #12]
 8012746:	881b      	ldrh	r3, [r3, #0]
 8012748:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 801274c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012750:	2b00      	cmp	r3, #0
 8012752:	dc0c      	bgt.n	801276e <arm_absmax_q15+0x40>
 8012754:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012758:	2200      	movs	r2, #0
 801275a:	65ba      	str	r2, [r7, #88]	@ 0x58
 801275c:	657b      	str	r3, [r7, #84]	@ 0x54
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801275e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012760:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012762:	fad3 f312 	qsub16	r3, r3, r2
 8012766:	653b      	str	r3, [r7, #80]	@ 0x50
  return(result);
 8012768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801276a:	b21b      	sxth	r3, r3
 801276c:	e001      	b.n	8012772 <arm_absmax_q15+0x44>
 801276e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012772:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
 8012776:	2300      	movs	r3, #0
 8012778:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	3b01      	subs	r3, #1
 801277e:	089b      	lsrs	r3, r3, #2
 8012780:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8012782:	e0a5      	b.n	80128d0 <arm_absmax_q15+0x1a2>
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	1c9a      	adds	r2, r3, #2
 8012788:	60fa      	str	r2, [r7, #12]
 801278a:	881b      	ldrh	r3, [r3, #0]
 801278c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8012790:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012794:	2b00      	cmp	r3, #0
 8012796:	dc0c      	bgt.n	80127b2 <arm_absmax_q15+0x84>
 8012798:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 801279c:	2200      	movs	r2, #0
 801279e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80127a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80127a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80127a6:	fad3 f312 	qsub16	r3, r3, r2
 80127aa:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80127ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127ae:	b21b      	sxth	r3, r3
 80127b0:	e001      	b.n	80127b6 <arm_absmax_q15+0x88>
 80127b2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80127b6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 80127ba:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 80127be:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80127c2:	429a      	cmp	r2, r3
 80127c4:	dd06      	ble.n	80127d4 <arm_absmax_q15+0xa6>
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
 80127c6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80127ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 1U;                                                                                \
 80127ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80127d0:	3301      	adds	r3, #1
 80127d2:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	1c9a      	adds	r2, r3, #2
 80127d8:	60fa      	str	r2, [r7, #12]
 80127da:	881b      	ldrh	r3, [r3, #0]
 80127dc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80127e0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	dc0c      	bgt.n	8012802 <arm_absmax_q15+0xd4>
 80127e8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80127ec:	2200      	movs	r2, #0
 80127ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80127f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80127f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80127f6:	fad3 f312 	qsub16	r3, r3, r2
 80127fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80127fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127fe:	b21b      	sxth	r3, r3
 8012800:	e001      	b.n	8012806 <arm_absmax_q15+0xd8>
 8012802:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012806:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 801280a:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 801280e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012812:	429a      	cmp	r2, r3
 8012814:	dd06      	ble.n	8012824 <arm_absmax_q15+0xf6>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8012816:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801281a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 2U;                                                                                \
 801281e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012820:	3302      	adds	r3, #2
 8012822:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	1c9a      	adds	r2, r3, #2
 8012828:	60fa      	str	r2, [r7, #12]
 801282a:	881b      	ldrh	r3, [r3, #0]
 801282c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8012830:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012834:	2b00      	cmp	r3, #0
 8012836:	dc0c      	bgt.n	8012852 <arm_absmax_q15+0x124>
 8012838:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 801283c:	2200      	movs	r2, #0
 801283e:	637a      	str	r2, [r7, #52]	@ 0x34
 8012840:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012846:	fad3 f312 	qsub16	r3, r3, r2
 801284a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801284c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801284e:	b21b      	sxth	r3, r3
 8012850:	e001      	b.n	8012856 <arm_absmax_q15+0x128>
 8012852:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012856:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 801285a:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 801285e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012862:	429a      	cmp	r2, r3
 8012864:	dd06      	ble.n	8012874 <arm_absmax_q15+0x146>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8012866:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801286a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 3U;                                                                                \
 801286e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012870:	3303      	adds	r3, #3
 8012872:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	1c9a      	adds	r2, r3, #2
 8012878:	60fa      	str	r2, [r7, #12]
 801287a:	881b      	ldrh	r3, [r3, #0]
 801287c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8012880:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012884:	2b00      	cmp	r3, #0
 8012886:	dc0c      	bgt.n	80128a2 <arm_absmax_q15+0x174>
 8012888:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 801288c:	2200      	movs	r2, #0
 801288e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012890:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012896:	fad3 f312 	qsub16	r3, r3, r2
 801289a:	623b      	str	r3, [r7, #32]
  return(result);
 801289c:	6a3b      	ldr	r3, [r7, #32]
 801289e:	b21b      	sxth	r3, r3
 80128a0:	e001      	b.n	80128a6 <arm_absmax_q15+0x178>
 80128a2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80128a6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 80128aa:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 80128ae:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80128b2:	429a      	cmp	r2, r3
 80128b4:	dd06      	ble.n	80128c4 <arm_absmax_q15+0x196>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 80128b6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80128ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 4U;                                                                                \
 80128be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80128c0:	3304      	adds	r3, #4
 80128c2:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    index += 4U;                                                                                            \
 80128c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80128c6:	3304      	adds	r3, #4
 80128c8:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 80128ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80128cc:	3b01      	subs	r3, #1
 80128ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 80128d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	f47f af56 	bne.w	8012784 <arm_absmax_q15+0x56>
  }                                                                                                         \
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	3b01      	subs	r3, #1
 80128dc:	f003 0303 	and.w	r3, r3, #3
 80128e0:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 80128e2:	e02b      	b.n	801293c <arm_absmax_q15+0x20e>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	1c9a      	adds	r2, r3, #2
 80128e8:	60fa      	str	r2, [r7, #12]
 80128ea:	881b      	ldrh	r3, [r3, #0]
 80128ec:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 80128f0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	dc0c      	bgt.n	8012912 <arm_absmax_q15+0x1e4>
 80128f8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80128fc:	2200      	movs	r2, #0
 80128fe:	61fa      	str	r2, [r7, #28]
 8012900:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012902:	69fb      	ldr	r3, [r7, #28]
 8012904:	69ba      	ldr	r2, [r7, #24]
 8012906:	fad3 f312 	qsub16	r3, r3, r2
 801290a:	617b      	str	r3, [r7, #20]
  return(result);
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	b21b      	sxth	r3, r3
 8012910:	e001      	b.n	8012916 <arm_absmax_q15+0x1e8>
 8012912:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8012916:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 801291a:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 801291e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8012922:	429a      	cmp	r2, r3
 8012924:	dd07      	ble.n	8012936 <arm_absmax_q15+0x208>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8012926:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801292a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = blockSize - blkCnt;                                                                        \
 801292e:	68ba      	ldr	r2, [r7, #8]
 8012930:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012932:	1ad3      	subs	r3, r2, r3
 8012934:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 8012936:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012938:	3b01      	subs	r3, #1
 801293a:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 801293c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801293e:	2b00      	cmp	r3, #0
 8012940:	d1d0      	bne.n	80128e4 <arm_absmax_q15+0x1b6>
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8012948:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;  
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801294e:	601a      	str	r2, [r3, #0]
}
 8012950:	bf00      	nop
 8012952:	3774      	adds	r7, #116	@ 0x74
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr

0801295c <arm_copy_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_copy_q15(
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 801295c:	b480      	push	{r7}
 801295e:	b087      	sub	sp, #28
 8012960:	af00      	add	r7, sp, #0
 8012962:	60f8      	str	r0, [r7, #12]
 8012964:	60b9      	str	r1, [r7, #8]
 8012966:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 801296c:	e00b      	b.n	8012986 <arm_copy_q15+0x2a>
  {
    /* C = A */

    /* Copy and store result in destination buffer */
    *pDst++ = *pSrc++;
 801296e:	68fa      	ldr	r2, [r7, #12]
 8012970:	1c93      	adds	r3, r2, #2
 8012972:	60fb      	str	r3, [r7, #12]
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	1c99      	adds	r1, r3, #2
 8012978:	60b9      	str	r1, [r7, #8]
 801297a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801297e:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    blkCnt--;
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	3b01      	subs	r3, #1
 8012984:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d1f0      	bne.n	801296e <arm_copy_q15+0x12>
  }
}
 801298c:	bf00      	nop
 801298e:	bf00      	nop
 8012990:	371c      	adds	r7, #28
 8012992:	46bd      	mov	sp, r7
 8012994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012998:	4770      	bx	lr

0801299a <arm_bitreversal_16>:

ARM_DSP_ATTRIBUTE void arm_bitreversal_16(
        uint16_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 801299a:	b480      	push	{r7}
 801299c:	b089      	sub	sp, #36	@ 0x24
 801299e:	af00      	add	r7, sp, #0
 80129a0:	60f8      	str	r0, [r7, #12]
 80129a2:	460b      	mov	r3, r1
 80129a4:	607a      	str	r2, [r7, #4]
 80129a6:	817b      	strh	r3, [r7, #10]
  uint16_t a, b, tmp;
  uint32_t i;

  for (i = 0; i < bitRevLen; )
 80129a8:	2300      	movs	r3, #0
 80129aa:	61fb      	str	r3, [r7, #28]
 80129ac:	e041      	b.n	8012a32 <arm_bitreversal_16+0x98>
  {
     a = pBitRevTab[i    ] >> 2;
 80129ae:	69fb      	ldr	r3, [r7, #28]
 80129b0:	005b      	lsls	r3, r3, #1
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	4413      	add	r3, r2
 80129b6:	881b      	ldrh	r3, [r3, #0]
 80129b8:	089b      	lsrs	r3, r3, #2
 80129ba:	837b      	strh	r3, [r7, #26]
     b = pBitRevTab[i + 1] >> 2;
 80129bc:	69fb      	ldr	r3, [r7, #28]
 80129be:	3301      	adds	r3, #1
 80129c0:	005b      	lsls	r3, r3, #1
 80129c2:	687a      	ldr	r2, [r7, #4]
 80129c4:	4413      	add	r3, r2
 80129c6:	881b      	ldrh	r3, [r3, #0]
 80129c8:	089b      	lsrs	r3, r3, #2
 80129ca:	833b      	strh	r3, [r7, #24]

     //real
     tmp = pSrc[a];
 80129cc:	8b7b      	ldrh	r3, [r7, #26]
 80129ce:	005b      	lsls	r3, r3, #1
 80129d0:	68fa      	ldr	r2, [r7, #12]
 80129d2:	4413      	add	r3, r2
 80129d4:	881b      	ldrh	r3, [r3, #0]
 80129d6:	82fb      	strh	r3, [r7, #22]
     pSrc[a] = pSrc[b];
 80129d8:	8b3b      	ldrh	r3, [r7, #24]
 80129da:	005b      	lsls	r3, r3, #1
 80129dc:	68fa      	ldr	r2, [r7, #12]
 80129de:	441a      	add	r2, r3
 80129e0:	8b7b      	ldrh	r3, [r7, #26]
 80129e2:	005b      	lsls	r3, r3, #1
 80129e4:	68f9      	ldr	r1, [r7, #12]
 80129e6:	440b      	add	r3, r1
 80129e8:	8812      	ldrh	r2, [r2, #0]
 80129ea:	801a      	strh	r2, [r3, #0]
     pSrc[b] = tmp;
 80129ec:	8b3b      	ldrh	r3, [r7, #24]
 80129ee:	005b      	lsls	r3, r3, #1
 80129f0:	68fa      	ldr	r2, [r7, #12]
 80129f2:	4413      	add	r3, r2
 80129f4:	8afa      	ldrh	r2, [r7, #22]
 80129f6:	801a      	strh	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 80129f8:	8b7b      	ldrh	r3, [r7, #26]
 80129fa:	3301      	adds	r3, #1
 80129fc:	005b      	lsls	r3, r3, #1
 80129fe:	68fa      	ldr	r2, [r7, #12]
 8012a00:	4413      	add	r3, r2
 8012a02:	881b      	ldrh	r3, [r3, #0]
 8012a04:	82fb      	strh	r3, [r7, #22]
     pSrc[a+1] = pSrc[b+1];
 8012a06:	8b3b      	ldrh	r3, [r7, #24]
 8012a08:	3301      	adds	r3, #1
 8012a0a:	005b      	lsls	r3, r3, #1
 8012a0c:	68fa      	ldr	r2, [r7, #12]
 8012a0e:	441a      	add	r2, r3
 8012a10:	8b7b      	ldrh	r3, [r7, #26]
 8012a12:	3301      	adds	r3, #1
 8012a14:	005b      	lsls	r3, r3, #1
 8012a16:	68f9      	ldr	r1, [r7, #12]
 8012a18:	440b      	add	r3, r1
 8012a1a:	8812      	ldrh	r2, [r2, #0]
 8012a1c:	801a      	strh	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8012a1e:	8b3b      	ldrh	r3, [r7, #24]
 8012a20:	3301      	adds	r3, #1
 8012a22:	005b      	lsls	r3, r3, #1
 8012a24:	68fa      	ldr	r2, [r7, #12]
 8012a26:	4413      	add	r3, r2
 8012a28:	8afa      	ldrh	r2, [r7, #22]
 8012a2a:	801a      	strh	r2, [r3, #0]

    i += 2;
 8012a2c:	69fb      	ldr	r3, [r7, #28]
 8012a2e:	3302      	adds	r3, #2
 8012a30:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8012a32:	897b      	ldrh	r3, [r7, #10]
 8012a34:	69fa      	ldr	r2, [r7, #28]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d3b9      	bcc.n	80129ae <arm_bitreversal_16+0x14>
  }
}
 8012a3a:	bf00      	nop
 8012a3c:	bf00      	nop
 8012a3e:	3724      	adds	r7, #36	@ 0x24
 8012a40:	46bd      	mov	sp, r7
 8012a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a46:	4770      	bx	lr

08012a48 <arm_cfft_q15>:
ARM_DSP_ATTRIBUTE void arm_cfft_q15(
  const arm_cfft_instance_q15 * S,
        q15_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b086      	sub	sp, #24
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	60f8      	str	r0, [r7, #12]
 8012a50:	60b9      	str	r1, [r7, #8]
 8012a52:	4611      	mov	r1, r2
 8012a54:	461a      	mov	r2, r3
 8012a56:	460b      	mov	r3, r1
 8012a58:	71fb      	strb	r3, [r7, #7]
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	71bb      	strb	r3, [r7, #6]
  uint32_t L = S->fftLen;
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	881b      	ldrh	r3, [r3, #0]
 8012a62:	617b      	str	r3, [r7, #20]

  if (ifftFlag == 1U)
 8012a64:	79fb      	ldrb	r3, [r7, #7]
 8012a66:	2b01      	cmp	r3, #1
 8012a68:	d14c      	bne.n	8012b04 <arm_cfft_q15+0xbc>
  {
     switch (L)
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012a70:	d038      	beq.n	8012ae4 <arm_cfft_q15+0x9c>
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012a78:	f200 808f 	bhi.w	8012b9a <arm_cfft_q15+0x152>
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012a82:	d037      	beq.n	8012af4 <arm_cfft_q15+0xac>
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012a8a:	f200 8086 	bhi.w	8012b9a <arm_cfft_q15+0x152>
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012a94:	d026      	beq.n	8012ae4 <arm_cfft_q15+0x9c>
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012a9c:	d87d      	bhi.n	8012b9a <arm_cfft_q15+0x152>
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012aa4:	d026      	beq.n	8012af4 <arm_cfft_q15+0xac>
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012aac:	d875      	bhi.n	8012b9a <arm_cfft_q15+0x152>
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ab4:	d016      	beq.n	8012ae4 <arm_cfft_q15+0x9c>
 8012ab6:	697b      	ldr	r3, [r7, #20]
 8012ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012abc:	d86d      	bhi.n	8012b9a <arm_cfft_q15+0x152>
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	2b80      	cmp	r3, #128	@ 0x80
 8012ac2:	d017      	beq.n	8012af4 <arm_cfft_q15+0xac>
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	2b80      	cmp	r3, #128	@ 0x80
 8012ac8:	d867      	bhi.n	8012b9a <arm_cfft_q15+0x152>
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	2b40      	cmp	r3, #64	@ 0x40
 8012ace:	d009      	beq.n	8012ae4 <arm_cfft_q15+0x9c>
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	2b40      	cmp	r3, #64	@ 0x40
 8012ad4:	d861      	bhi.n	8012b9a <arm_cfft_q15+0x152>
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	2b10      	cmp	r3, #16
 8012ada:	d003      	beq.n	8012ae4 <arm_cfft_q15+0x9c>
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	2b20      	cmp	r3, #32
 8012ae0:	d008      	beq.n	8012af4 <arm_cfft_q15+0xac>
 8012ae2:	e05a      	b.n	8012b9a <arm_cfft_q15+0x152>
     case 16:
     case 64:
     case 256:
     case 1024:
     case 4096:
       arm_radix4_butterfly_inverse_q15 ( p1, L, (q15_t*)S->pTwiddle, 1 );
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	685a      	ldr	r2, [r3, #4]
 8012ae8:	2301      	movs	r3, #1
 8012aea:	6979      	ldr	r1, [r7, #20]
 8012aec:	68b8      	ldr	r0, [r7, #8]
 8012aee:	f001 ffdf 	bl	8014ab0 <arm_radix4_butterfly_inverse_q15>
       break;
 8012af2:	e052      	b.n	8012b9a <arm_cfft_q15+0x152>

     case 32:
     case 128:
     case 512:
     case 2048:
       arm_cfft_radix4by2_inverse_q15 ( p1, L, S->pTwiddle );
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	685b      	ldr	r3, [r3, #4]
 8012af8:	461a      	mov	r2, r3
 8012afa:	6979      	ldr	r1, [r7, #20]
 8012afc:	68b8      	ldr	r0, [r7, #8]
 8012afe:	f000 f9a7 	bl	8012e50 <arm_cfft_radix4by2_inverse_q15>
       break;
 8012b02:	e04a      	b.n	8012b9a <arm_cfft_q15+0x152>
     }
  }
  else
  {
     switch (L)
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012b0a:	d036      	beq.n	8012b7a <arm_cfft_q15+0x132>
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012b12:	d842      	bhi.n	8012b9a <arm_cfft_q15+0x152>
 8012b14:	697b      	ldr	r3, [r7, #20]
 8012b16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012b1a:	d036      	beq.n	8012b8a <arm_cfft_q15+0x142>
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012b22:	d83a      	bhi.n	8012b9a <arm_cfft_q15+0x152>
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012b2a:	d026      	beq.n	8012b7a <arm_cfft_q15+0x132>
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012b32:	d832      	bhi.n	8012b9a <arm_cfft_q15+0x152>
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b3a:	d026      	beq.n	8012b8a <arm_cfft_q15+0x142>
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012b42:	d82a      	bhi.n	8012b9a <arm_cfft_q15+0x152>
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b4a:	d016      	beq.n	8012b7a <arm_cfft_q15+0x132>
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b52:	d822      	bhi.n	8012b9a <arm_cfft_q15+0x152>
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	2b80      	cmp	r3, #128	@ 0x80
 8012b58:	d017      	beq.n	8012b8a <arm_cfft_q15+0x142>
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	2b80      	cmp	r3, #128	@ 0x80
 8012b5e:	d81c      	bhi.n	8012b9a <arm_cfft_q15+0x152>
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	2b40      	cmp	r3, #64	@ 0x40
 8012b64:	d009      	beq.n	8012b7a <arm_cfft_q15+0x132>
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	2b40      	cmp	r3, #64	@ 0x40
 8012b6a:	d816      	bhi.n	8012b9a <arm_cfft_q15+0x152>
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	2b10      	cmp	r3, #16
 8012b70:	d003      	beq.n	8012b7a <arm_cfft_q15+0x132>
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	2b20      	cmp	r3, #32
 8012b76:	d008      	beq.n	8012b8a <arm_cfft_q15+0x142>
 8012b78:	e00f      	b.n	8012b9a <arm_cfft_q15+0x152>
     case 16:
     case 64:
     case 256:
     case 1024:
     case 4096:
       arm_radix4_butterfly_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	685a      	ldr	r2, [r3, #4]
 8012b7e:	2301      	movs	r3, #1
 8012b80:	6979      	ldr	r1, [r7, #20]
 8012b82:	68b8      	ldr	r0, [r7, #8]
 8012b84:	f000 fab0 	bl	80130e8 <arm_radix4_butterfly_q15>
       break;
 8012b88:	e007      	b.n	8012b9a <arm_cfft_q15+0x152>

     case 32:
     case 128:
     case 512:
     case 2048:
       arm_cfft_radix4by2_q15  ( p1, L, S->pTwiddle );
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	461a      	mov	r2, r3
 8012b90:	6979      	ldr	r1, [r7, #20]
 8012b92:	68b8      	ldr	r0, [r7, #8]
 8012b94:	f000 f810 	bl	8012bb8 <arm_cfft_radix4by2_q15>
       break;
 8012b98:	bf00      	nop
     }
  }

  if ( bitReverseFlag )
 8012b9a:	79bb      	ldrb	r3, [r7, #6]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d007      	beq.n	8012bb0 <arm_cfft_q15+0x168>
    arm_bitreversal_16 ((uint16_t*) p1, S->bitRevLength, S->pBitRevTable);
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	8999      	ldrh	r1, [r3, #12]
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	689b      	ldr	r3, [r3, #8]
 8012ba8:	461a      	mov	r2, r3
 8012baa:	68b8      	ldr	r0, [r7, #8]
 8012bac:	f7ff fef5 	bl	801299a <arm_bitreversal_16>
}
 8012bb0:	bf00      	nop
 8012bb2:	3718      	adds	r7, #24
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <arm_cfft_radix4by2_q15>:

ARM_DSP_ATTRIBUTE void arm_cfft_radix4by2_q15(
        q15_t * pSrc,
        uint32_t fftLen,
  const q15_t * pCoef)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b0b0      	sub	sp, #192	@ 0xc0
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	60f8      	str	r0, [r7, #12]
 8012bc0:	60b9      	str	r1, [r7, #8]
 8012bc2:	607a      	str	r2, [r7, #4]
        uint32_t n2;
        q15_t p0, p1, p2, p3;
#if defined (ARM_MATH_DSP)
        q31_t T, S, R;
        q31_t coeff, out1, out2;
  const q15_t *pC = pCoef;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	633b      	str	r3, [r7, #48]	@ 0x30
        q15_t *pSi = pSrc;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        q15_t *pSl = pSrc + fftLen;
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	005b      	lsls	r3, r3, #1
 8012bd0:	68fa      	ldr	r2, [r7, #12]
 8012bd2:	4413      	add	r3, r2
 8012bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        uint32_t l;
        q15_t xt, yt, cosVal, sinVal;
#endif

  n2 = fftLen >> 1U;
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	085b      	lsrs	r3, r3, #1
 8012bda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

#if defined (ARM_MATH_DSP)

  for (i = n2; i > 0; i--)
 8012bde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012be2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012be6:	e0a9      	b.n	8012d3c <arm_cfft_radix4by2_q15+0x184>
  {
      coeff = read_q15x2_ia (&pC);
 8012be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bea:	3304      	adds	r3, #4
 8012bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8012bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bf0:	3b04      	subs	r3, #4
 8012bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  memcpy (&val, pQ15, 4);
 8012bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8012bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      T = read_q15x2 (pSi);
 8012c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c02:	63bb      	str	r3, [r7, #56]	@ 0x38
  memcpy (&val, pQ15, 4);
 8012c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	623b      	str	r3, [r7, #32]
  return (val);
 8012c0a:	6a3b      	ldr	r3, [r7, #32]
 8012c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8012c16:	2300      	movs	r3, #0
 8012c18:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012c1e:	fa93 f322 	shadd16	r3, r3, r2
 8012c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8012c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012c26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      S = read_q15x2 (pSl);
 8012c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 8012c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	61fb      	str	r3, [r7, #28]
  return (val);
 8012c34:	69fb      	ldr	r3, [r7, #28]
 8012c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      S = __SHADD16(S, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012c3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8012c40:	2300      	movs	r3, #0
 8012c42:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012c48:	fa93 f322 	shadd16	r3, r3, r2
 8012c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8012c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      R = __QSUB16(T, S);
 8012c54:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012c58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012c5c:	663a      	str	r2, [r7, #96]	@ 0x60
 8012c5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012c62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012c64:	fad3 f312 	qsub16	r3, r3, r2
 8012c68:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8012c6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

      write_q15x2_ia (&pSi, __SHADD16(T, S));
 8012c70:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012c74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012c78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012c7a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012c7e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012c80:	fa93 f322 	shadd16	r3, r3, r2
 8012c84:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8012c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c88:	461a      	mov	r2, r3
 8012c8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012c8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8012c90:	673a      	str	r2, [r7, #112]	@ 0x70
 */
__STATIC_FORCEINLINE void write_q15x2_ia (
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
 8012c92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012c94:	61bb      	str	r3, [r7, #24]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 8012c96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	69ba      	ldr	r2, [r7, #24]
 8012c9c:	601a      	str	r2, [r3, #0]
#else
  (*pQ15)[0] = (q15_t)(val & 0x0FFFF);
  (*pQ15)[1] = (q15_t)((val >> 16) & 0x0FFFF);
#endif

 *pQ15 += 2;
 8012c9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	1d1a      	adds	r2, r3, #4
 8012ca4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012ca6:	601a      	str	r2, [r3, #0]
}
 8012ca8:	bf00      	nop

#ifndef ARM_MATH_BIG_ENDIAN
      out1 = __SMUAD(coeff, R) >> 16U;
 8012caa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012cb2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012cb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012cb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012cbc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012cbe:	fb23 f302 	smuad	r3, r3, r2
 8012cc2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 8012cc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012cc6:	0c1b      	lsrs	r3, r3, #16
 8012cc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      out2 = __SMUSDX(coeff, R);
 8012ccc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012cd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012cd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012cd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012ce0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012ce4:	fb43 f312 	smusdx	r3, r3, r2
 8012ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8012cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012cf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
#else
      out1 = __SMUSDX(R, coeff) >> 16U;
      out2 = __SMUAD(coeff, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      write_q15x2_ia (&pSl, (q31_t)__PKHBT( out1, out2, 0 ) );
 8012cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012cf8:	b29a      	uxth	r2, r3
 8012cfa:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8012cfe:	4b53      	ldr	r3, [pc, #332]	@ (8012e4c <arm_cfft_radix4by2_q15+0x294>)
 8012d00:	400b      	ands	r3, r1
 8012d02:	4313      	orrs	r3, r2
 8012d04:	461a      	mov	r2, r3
 8012d06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012d0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012d0e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
  q31_t val = value;
 8012d12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012d16:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8012d18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	697a      	ldr	r2, [r7, #20]
 8012d20:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8012d22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	1d1a      	adds	r2, r3, #4
 8012d2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012d2e:	601a      	str	r2, [r3, #0]
}
 8012d30:	bf00      	nop
  for (i = n2; i > 0; i--)
 8012d32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012d36:	3b01      	subs	r3, #1
 8012d38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012d3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	f47f af51 	bne.w	8012be8 <arm_cfft_radix4by2_q15+0x30>
  }

#endif /* #if defined (ARM_MATH_DSP) */

  /* first col */
  arm_radix4_butterfly_q15( pSrc,          n2, (q15_t*)pCoef, 2U);
 8012d46:	2302      	movs	r3, #2
 8012d48:	687a      	ldr	r2, [r7, #4]
 8012d4a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8012d4e:	68f8      	ldr	r0, [r7, #12]
 8012d50:	f000 f9ca 	bl	80130e8 <arm_radix4_butterfly_q15>

  /* second col */
  arm_radix4_butterfly_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	005b      	lsls	r3, r3, #1
 8012d58:	68fa      	ldr	r2, [r7, #12]
 8012d5a:	18d0      	adds	r0, r2, r3
 8012d5c:	2302      	movs	r3, #2
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8012d64:	f000 f9c0 	bl	80130e8 <arm_radix4_butterfly_q15>

  n2 = fftLen >> 1U;
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	085b      	lsrs	r3, r3, #1
 8012d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  for (i = 0; i < n2; i++)
 8012d70:	2300      	movs	r3, #0
 8012d72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012d76:	e05e      	b.n	8012e36 <arm_cfft_radix4by2_q15+0x27e>
  {
     p0 = pSrc[4 * i + 0];
 8012d78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012d7c:	00db      	lsls	r3, r3, #3
 8012d7e:	68fa      	ldr	r2, [r7, #12]
 8012d80:	4413      	add	r3, r2
 8012d82:	881b      	ldrh	r3, [r3, #0]
 8012d84:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 = pSrc[4 * i + 1];
 8012d88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012d8c:	00db      	lsls	r3, r3, #3
 8012d8e:	3302      	adds	r3, #2
 8012d90:	68fa      	ldr	r2, [r7, #12]
 8012d92:	4413      	add	r3, r2
 8012d94:	881b      	ldrh	r3, [r3, #0]
 8012d96:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 = pSrc[4 * i + 2];
 8012d9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012d9e:	00db      	lsls	r3, r3, #3
 8012da0:	3304      	adds	r3, #4
 8012da2:	68fa      	ldr	r2, [r7, #12]
 8012da4:	4413      	add	r3, r2
 8012da6:	881b      	ldrh	r3, [r3, #0]
 8012da8:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 = pSrc[4 * i + 3];
 8012dac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012db0:	00db      	lsls	r3, r3, #3
 8012db2:	3306      	adds	r3, #6
 8012db4:	68fa      	ldr	r2, [r7, #12]
 8012db6:	4413      	add	r3, r2
 8012db8:	881b      	ldrh	r3, [r3, #0]
 8012dba:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     p0 <<= 1U;
 8012dbe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8012dc2:	005b      	lsls	r3, r3, #1
 8012dc4:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 <<= 1U;
 8012dc8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8012dcc:	005b      	lsls	r3, r3, #1
 8012dce:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 <<= 1U;
 8012dd2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8012dd6:	005b      	lsls	r3, r3, #1
 8012dd8:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 <<= 1U;
 8012ddc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8012de0:	005b      	lsls	r3, r3, #1
 8012de2:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     pSrc[4 * i + 0] = p0;
 8012de6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012dea:	00db      	lsls	r3, r3, #3
 8012dec:	68fa      	ldr	r2, [r7, #12]
 8012dee:	4413      	add	r3, r2
 8012df0:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 8012df4:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 1] = p1;
 8012df6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012dfa:	00db      	lsls	r3, r3, #3
 8012dfc:	3302      	adds	r3, #2
 8012dfe:	68fa      	ldr	r2, [r7, #12]
 8012e00:	4413      	add	r3, r2
 8012e02:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 8012e06:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 2] = p2;
 8012e08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012e0c:	00db      	lsls	r3, r3, #3
 8012e0e:	3304      	adds	r3, #4
 8012e10:	68fa      	ldr	r2, [r7, #12]
 8012e12:	4413      	add	r3, r2
 8012e14:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 8012e18:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 3] = p3;
 8012e1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012e1e:	00db      	lsls	r3, r3, #3
 8012e20:	3306      	adds	r3, #6
 8012e22:	68fa      	ldr	r2, [r7, #12]
 8012e24:	4413      	add	r3, r2
 8012e26:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8012e2a:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < n2; i++)
 8012e2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012e30:	3301      	adds	r3, #1
 8012e32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012e36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8012e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012e3e:	429a      	cmp	r2, r3
 8012e40:	d39a      	bcc.n	8012d78 <arm_cfft_radix4by2_q15+0x1c0>
  }

}
 8012e42:	bf00      	nop
 8012e44:	bf00      	nop
 8012e46:	37c0      	adds	r7, #192	@ 0xc0
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}
 8012e4c:	ffff0000 	.word	0xffff0000

08012e50 <arm_cfft_radix4by2_inverse_q15>:

ARM_DSP_ATTRIBUTE void arm_cfft_radix4by2_inverse_q15(
        q15_t * pSrc,
        uint32_t fftLen,
  const q15_t * pCoef)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b0b0      	sub	sp, #192	@ 0xc0
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	60f8      	str	r0, [r7, #12]
 8012e58:	60b9      	str	r1, [r7, #8]
 8012e5a:	607a      	str	r2, [r7, #4]
        uint32_t n2;
        q15_t p0, p1, p2, p3;
#if defined (ARM_MATH_DSP)
        q31_t T, S, R;
        q31_t coeff, out1, out2;
  const q15_t *pC = pCoef;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	633b      	str	r3, [r7, #48]	@ 0x30
        q15_t *pSi = pSrc;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        q15_t *pSl = pSrc + fftLen;
 8012e64:	68bb      	ldr	r3, [r7, #8]
 8012e66:	005b      	lsls	r3, r3, #1
 8012e68:	68fa      	ldr	r2, [r7, #12]
 8012e6a:	4413      	add	r3, r2
 8012e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        uint32_t l;
        q15_t xt, yt, cosVal, sinVal;
#endif

  n2 = fftLen >> 1U;
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	085b      	lsrs	r3, r3, #1
 8012e72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

#if defined (ARM_MATH_DSP)

  for (i = n2; i > 0; i--)
 8012e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012e7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012e7e:	e0a9      	b.n	8012fd4 <arm_cfft_radix4by2_inverse_q15+0x184>
  {
     coeff = read_q15x2_ia (&pC);
 8012e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e82:	3304      	adds	r3, #4
 8012e84:	633b      	str	r3, [r7, #48]	@ 0x30
 8012e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e88:	3b04      	subs	r3, #4
 8012e8a:	637b      	str	r3, [r7, #52]	@ 0x34
  memcpy (&val, pQ15, 4);
 8012e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8012e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

     T = read_q15x2 (pSi);
 8012e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  memcpy (&val, pQ15, 4);
 8012e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	623b      	str	r3, [r7, #32]
  return (val);
 8012ea2:	6a3b      	ldr	r3, [r7, #32]
 8012ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
     T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8012eae:	2300      	movs	r3, #0
 8012eb0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012eb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012eb6:	fa93 f322 	shadd16	r3, r3, r2
 8012eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8012ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

     S = read_q15x2 (pSl);
 8012ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 8012ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	61fb      	str	r3, [r7, #28]
  return (val);
 8012ecc:	69fb      	ldr	r3, [r7, #28]
 8012ece:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
     S = __SHADD16(S, 0); /* this is just a SIMD arithmetic shift right by 1 */
 8012ed2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012ed6:	657b      	str	r3, [r7, #84]	@ 0x54
 8012ed8:	2300      	movs	r3, #0
 8012eda:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ede:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012ee0:	fa93 f322 	shadd16	r3, r3, r2
 8012ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8012ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

     R = __QSUB16(T, S);
 8012eec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012ef0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012ef4:	663a      	str	r2, [r7, #96]	@ 0x60
 8012ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012ef8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012efa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012efc:	fad3 f312 	qsub16	r3, r3, r2
 8012f00:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8012f02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012f04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

     write_q15x2_ia (&pSi, __SHADD16(T, S));
 8012f08:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012f0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012f10:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012f12:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012f16:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012f18:	fa93 f322 	shadd16	r3, r3, r2
 8012f1c:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8012f1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012f20:	461a      	mov	r2, r3
 8012f22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012f26:	677b      	str	r3, [r7, #116]	@ 0x74
 8012f28:	673a      	str	r2, [r7, #112]	@ 0x70
  q31_t val = value;
 8012f2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012f2c:	61bb      	str	r3, [r7, #24]
  memcpy (*pQ15, &val, 4);
 8012f2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	69ba      	ldr	r2, [r7, #24]
 8012f34:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8012f36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	1d1a      	adds	r2, r3, #4
 8012f3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012f3e:	601a      	str	r2, [r3, #0]
}
 8012f40:	bf00      	nop

#ifndef ARM_MATH_BIG_ENDIAN
     out1 = __SMUSD(coeff, R) >> 16U;
 8012f42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012f4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012f4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012f54:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012f56:	fb43 f302 	smusd	r3, r3, r2
 8012f5a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 8012f5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012f5e:	0c1b      	lsrs	r3, r3, #16
 8012f60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
     out2 = __SMUADX(coeff, R);
 8012f64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012f68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012f6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012f70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8012f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012f78:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012f7c:	fb23 f312 	smuadx	r3, r3, r2
 8012f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8012f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
#else
     out1 = __SMUADX(R, coeff) >> 16U;
     out2 = __SMUSD(__QSUB(0, coeff), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

     write_q15x2_ia (&pSl, (q31_t)__PKHBT( out1, out2, 0 ));
 8012f8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012f90:	b29a      	uxth	r2, r3
 8012f92:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8012f96:	4b53      	ldr	r3, [pc, #332]	@ (80130e4 <arm_cfft_radix4by2_inverse_q15+0x294>)
 8012f98:	400b      	ands	r3, r1
 8012f9a:	4313      	orrs	r3, r2
 8012f9c:	461a      	mov	r2, r3
 8012f9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012fa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012fa6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
  q31_t val = value;
 8012faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012fae:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8012fb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	697a      	ldr	r2, [r7, #20]
 8012fb8:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8012fba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	1d1a      	adds	r2, r3, #4
 8012fc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012fc6:	601a      	str	r2, [r3, #0]
}
 8012fc8:	bf00      	nop
  for (i = n2; i > 0; i--)
 8012fca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012fce:	3b01      	subs	r3, #1
 8012fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012fd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	f47f af51 	bne.w	8012e80 <arm_cfft_radix4by2_inverse_q15+0x30>
  }

#endif /* #if defined (ARM_MATH_DSP) */

  /* first col */
  arm_radix4_butterfly_inverse_q15( pSrc,          n2, (q15_t*)pCoef, 2U);
 8012fde:	2302      	movs	r3, #2
 8012fe0:	687a      	ldr	r2, [r7, #4]
 8012fe2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8012fe6:	68f8      	ldr	r0, [r7, #12]
 8012fe8:	f001 fd62 	bl	8014ab0 <arm_radix4_butterfly_inverse_q15>

  /* second col */
  arm_radix4_butterfly_inverse_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	005b      	lsls	r3, r3, #1
 8012ff0:	68fa      	ldr	r2, [r7, #12]
 8012ff2:	18d0      	adds	r0, r2, r3
 8012ff4:	2302      	movs	r3, #2
 8012ff6:	687a      	ldr	r2, [r7, #4]
 8012ff8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8012ffc:	f001 fd58 	bl	8014ab0 <arm_radix4_butterfly_inverse_q15>

  n2 = fftLen >> 1U;
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	085b      	lsrs	r3, r3, #1
 8013004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  for (i = 0; i < n2; i++)
 8013008:	2300      	movs	r3, #0
 801300a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801300e:	e05e      	b.n	80130ce <arm_cfft_radix4by2_inverse_q15+0x27e>
  {
     p0 = pSrc[4 * i + 0];
 8013010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013014:	00db      	lsls	r3, r3, #3
 8013016:	68fa      	ldr	r2, [r7, #12]
 8013018:	4413      	add	r3, r2
 801301a:	881b      	ldrh	r3, [r3, #0]
 801301c:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 = pSrc[4 * i + 1];
 8013020:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013024:	00db      	lsls	r3, r3, #3
 8013026:	3302      	adds	r3, #2
 8013028:	68fa      	ldr	r2, [r7, #12]
 801302a:	4413      	add	r3, r2
 801302c:	881b      	ldrh	r3, [r3, #0]
 801302e:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 = pSrc[4 * i + 2];
 8013032:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013036:	00db      	lsls	r3, r3, #3
 8013038:	3304      	adds	r3, #4
 801303a:	68fa      	ldr	r2, [r7, #12]
 801303c:	4413      	add	r3, r2
 801303e:	881b      	ldrh	r3, [r3, #0]
 8013040:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 = pSrc[4 * i + 3];
 8013044:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013048:	00db      	lsls	r3, r3, #3
 801304a:	3306      	adds	r3, #6
 801304c:	68fa      	ldr	r2, [r7, #12]
 801304e:	4413      	add	r3, r2
 8013050:	881b      	ldrh	r3, [r3, #0]
 8013052:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     p0 <<= 1U;
 8013056:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 801305a:	005b      	lsls	r3, r3, #1
 801305c:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
     p1 <<= 1U;
 8013060:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8013064:	005b      	lsls	r3, r3, #1
 8013066:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
     p2 <<= 1U;
 801306a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801306e:	005b      	lsls	r3, r3, #1
 8013070:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
     p3 <<= 1U;
 8013074:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8013078:	005b      	lsls	r3, r3, #1
 801307a:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

     pSrc[4 * i + 0] = p0;
 801307e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013082:	00db      	lsls	r3, r3, #3
 8013084:	68fa      	ldr	r2, [r7, #12]
 8013086:	4413      	add	r3, r2
 8013088:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 801308c:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 1] = p1;
 801308e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8013092:	00db      	lsls	r3, r3, #3
 8013094:	3302      	adds	r3, #2
 8013096:	68fa      	ldr	r2, [r7, #12]
 8013098:	4413      	add	r3, r2
 801309a:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 801309e:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 2] = p2;
 80130a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80130a4:	00db      	lsls	r3, r3, #3
 80130a6:	3304      	adds	r3, #4
 80130a8:	68fa      	ldr	r2, [r7, #12]
 80130aa:	4413      	add	r3, r2
 80130ac:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 80130b0:	801a      	strh	r2, [r3, #0]
     pSrc[4 * i + 3] = p3;
 80130b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80130b6:	00db      	lsls	r3, r3, #3
 80130b8:	3306      	adds	r3, #6
 80130ba:	68fa      	ldr	r2, [r7, #12]
 80130bc:	4413      	add	r3, r2
 80130be:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 80130c2:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < n2; i++)
 80130c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80130c8:	3301      	adds	r3, #1
 80130ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80130ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80130d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80130d6:	429a      	cmp	r2, r3
 80130d8:	d39a      	bcc.n	8013010 <arm_cfft_radix4by2_inverse_q15+0x1c0>
  }
}
 80130da:	bf00      	nop
 80130dc:	bf00      	nop
 80130de:	37c0      	adds	r7, #192	@ 0xc0
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}
 80130e4:	ffff0000 	.word	0xffff0000

080130e8 <arm_radix4_butterfly_q15>:
ARM_DSP_ATTRIBUTE void arm_radix4_butterfly_q15(
        q15_t * pSrc16,
        uint32_t fftLen,
  const q15_t * pCoef16,
        uint32_t twidCoefModifier)
{
 80130e8:	b490      	push	{r4, r7}
 80130ea:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 80130ee:	af00      	add	r7, sp, #0
 80130f0:	f507 6481 	add.w	r4, r7, #1032	@ 0x408
 80130f4:	f5a4 747f 	sub.w	r4, r4, #1020	@ 0x3fc
 80130f8:	6020      	str	r0, [r4, #0]
 80130fa:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 80130fe:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
 8013102:	6001      	str	r1, [r0, #0]
 8013104:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8013108:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 801310c:	600a      	str	r2, [r1, #0]
 801310e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013112:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8013116:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 8013118:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801311c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
  n1 = n2;
 8013126:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 801312a:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 801312e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013132:	089b      	lsrs	r3, r3, #2
 8013134:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404

  /* Index for twiddle coefficient */
  ic = 0U;
 8013138:	2300      	movs	r3, #0
 801313a:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  /* Index for input read and output write */
  j = n2;
 801313e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013142:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  pSi0 = pSrc16;
 8013146:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801314a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 801314e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013152:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8013156:	6812      	ldr	r2, [r2, #0]
 8013158:	601a      	str	r2, [r3, #0]
  pSi1 = pSi0 + 2 * n2;
 801315a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801315e:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013162:	681a      	ldr	r2, [r3, #0]
 8013164:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013168:	009b      	lsls	r3, r3, #2
 801316a:	441a      	add	r2, r3
 801316c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013170:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013174:	601a      	str	r2, [r3, #0]
  pSi2 = pSi1 + 2 * n2;
 8013176:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801317a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801317e:	681a      	ldr	r2, [r3, #0]
 8013180:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	441a      	add	r2, r3
 8013188:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801318c:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013190:	601a      	str	r2, [r3, #0]
  pSi3 = pSi2 + 2 * n2;
 8013192:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013196:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80131a0:	009b      	lsls	r3, r3, #2
 80131a2:	441a      	add	r2, r3
 80131a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131a8:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80131ac:	601a      	str	r2, [r3, #0]
  {
    /*  Butterfly implementation */

    /* Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = read_q15x2 (pSi0);
 80131ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131b2:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80131b6:	681a      	ldr	r2, [r3, #0]
 80131b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131bc:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80131c0:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80131c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131c6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	461a      	mov	r2, r3
 80131d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131d4:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80131d8:	601a      	str	r2, [r3, #0]
  return (val);
 80131da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131de:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0); /* this is just a SIMD arithmetic shift right by 1 */
 80131e8:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80131ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80131f4:	601a      	str	r2, [r3, #0]
 80131f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80131fa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80131fe:	2200      	movs	r2, #0
 8013200:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013202:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013206:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013210:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 8013214:	6812      	ldr	r2, [r2, #0]
 8013216:	fa93 f222 	shadd16	r2, r3, r2
 801321a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801321e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8013222:	601a      	str	r2, [r3, #0]
  return(result);
 8013224:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013228:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0); /* it turns out doing this twice is 2 cycles, the alternative takes 3 cycles */
 8013232:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013236:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801323a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 801323e:	601a      	str	r2, [r3, #0]
 8013240:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013244:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8013248:	2200      	movs	r2, #0
 801324a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801324c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013250:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801325a:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 801325e:	6812      	ldr	r2, [r2, #0]
 8013260:	fa93 f222 	shadd16	r2, r3, r2
 8013264:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013268:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 801326c:	601a      	str	r2, [r3, #0]
  return(result);
 801326e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013272:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    in = ((int16_t) (T & 0xFFFF)) >> 2;       // alternative code that takes 3 cycles
     T = ((T >> 2) & 0xFFFF0000) | (in & 0xFFFF);
*/

    /* Read yc (real), xc(imag) input */
    S = read_q15x2 (pSi2);
 801327c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013280:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013284:	681a      	ldr	r2, [r3, #0]
 8013286:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801328a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 801328e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013290:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013294:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	461a      	mov	r2, r3
 801329e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132a2:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 80132a6:	601a      	str	r2, [r3, #0]
  return (val);
 80132a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132ac:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 80132b6:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80132ba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132be:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80132c2:	601a      	str	r2, [r3, #0]
 80132c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132c8:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80132cc:	2200      	movs	r2, #0
 80132ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80132d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132d4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80132de:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80132e2:	6812      	ldr	r2, [r2, #0]
 80132e4:	fa93 f222 	shadd16	r2, r3, r2
 80132e8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132ec:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80132f0:	601a      	str	r2, [r3, #0]
  return(result);
 80132f2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80132f6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 8013300:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013304:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013308:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 801330c:	601a      	str	r2, [r3, #0]
 801330e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013312:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8013316:	2200      	movs	r2, #0
 8013318:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801331a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801331e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013328:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 801332c:	6812      	ldr	r2, [r2, #0]
 801332e:	fa93 f222 	shadd16	r2, r3, r2
 8013332:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013336:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 801333a:	601a      	str	r2, [r3, #0]
  return(result);
 801333c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013340:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 801334a:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 801334e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013352:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013356:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 801335a:	6019      	str	r1, [r3, #0]
 801335c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013360:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8013364:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013366:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801336a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013374:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8013378:	6812      	ldr	r2, [r2, #0]
 801337a:	fa93 f212 	qadd16	r2, r3, r2
 801337e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013382:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8013386:	601a      	str	r2, [r3, #0]
  return(result);
 8013388:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801338c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 8013396:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 801339a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801339e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133a2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80133a6:	6019      	str	r1, [r3, #0]
 80133a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133ac:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80133b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80133b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133b6:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80133c0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80133c4:	6812      	ldr	r2, [r2, #0]
 80133c6:	fad3 f212 	qsub16	r2, r3, r2
 80133ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133ce:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80133d2:	601a      	str	r2, [r3, #0]
  return(result);
 80133d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133d8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = read_q15x2 (pSi1);
 80133e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133e6:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80133ea:	681a      	ldr	r2, [r3, #0]
 80133ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133f0:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80133f4:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80133f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80133fa:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	461a      	mov	r2, r3
 8013404:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013408:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 801340c:	601a      	str	r2, [r3, #0]
  return (val);
 801340e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013412:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 801341c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013420:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013424:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8013428:	601a      	str	r2, [r3, #0]
 801342a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801342e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8013432:	2200      	movs	r2, #0
 8013434:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013436:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801343a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013444:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8013448:	6812      	ldr	r2, [r2, #0]
 801344a:	fa93 f222 	shadd16	r2, r3, r2
 801344e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013452:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8013456:	601a      	str	r2, [r3, #0]
  return(result);
 8013458:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801345c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8013466:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801346a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801346e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8013472:	601a      	str	r2, [r3, #0]
 8013474:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013478:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 801347c:	2200      	movs	r2, #0
 801347e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013480:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013484:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801348e:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8013492:	6812      	ldr	r2, [r2, #0]
 8013494:	fa93 f222 	shadd16	r2, r3, r2
 8013498:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801349c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80134a0:	601a      	str	r2, [r3, #0]
  return(result);
 80134a2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134a6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yd (real), xd(imag) input */
    U = read_q15x2 (pSi3);
 80134b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134b4:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80134b8:	681a      	ldr	r2, [r3, #0]
 80134ba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134be:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80134c2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80134c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134c8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	461a      	mov	r2, r3
 80134d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134d6:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 80134da:	601a      	str	r2, [r3, #0]
  return (val);
 80134dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134e0:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 80134ea:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80134ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134f2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80134f6:	601a      	str	r2, [r3, #0]
 80134f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80134fc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8013500:	2200      	movs	r2, #0
 8013502:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013504:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013508:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013512:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8013516:	6812      	ldr	r2, [r2, #0]
 8013518:	fa93 f222 	shadd16	r2, r3, r2
 801351c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013520:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8013524:	601a      	str	r2, [r3, #0]
  return(result);
 8013526:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801352a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8013534:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8013538:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801353c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8013540:	601a      	str	r2, [r3, #0]
 8013542:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013546:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801354a:	2200      	movs	r2, #0
 801354c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801354e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013552:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801355c:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8013560:	6812      	ldr	r2, [r2, #0]
 8013562:	fa93 f222 	shadd16	r2, r3, r2
 8013566:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801356a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801356e:	601a      	str	r2, [r3, #0]
  return(result);
 8013570:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013574:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 801357e:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8013582:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8013586:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801358a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801358e:	6019      	str	r1, [r3, #0]
 8013590:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013594:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8013598:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801359a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801359e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80135a8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80135ac:	6812      	ldr	r2, [r2, #0]
 80135ae:	fa93 f212 	qadd16	r2, r3, r2
 80135b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135b6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80135ba:	601a      	str	r2, [r3, #0]
  return(result);
 80135bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&pSi0, __SHADD16(R, T));
 80135ca:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80135ce:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80135d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80135da:	6019      	str	r1, [r3, #0]
 80135dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80135e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80135e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80135ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80135f4:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80135f8:	6812      	ldr	r2, [r2, #0]
 80135fa:	fa93 f222 	shadd16	r2, r3, r2
 80135fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013602:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013606:	601a      	str	r2, [r3, #0]
  return(result);
 8013608:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801360c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	4619      	mov	r1, r3
 8013614:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013618:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801361c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8013620:	601a      	str	r2, [r3, #0]
 8013622:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013626:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801362a:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 801362c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013630:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8013634:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013638:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 801363c:	6812      	ldr	r2, [r2, #0]
 801363e:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8013640:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013644:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013650:	f5a2 7276 	sub.w	r2, r2, #984	@ 0x3d8
 8013654:	6812      	ldr	r2, [r2, #0]
 8013656:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013658:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801365c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	1d1a      	adds	r2, r3, #4
 8013666:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801366a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	601a      	str	r2, [r3, #0]
}
 8013672:	bf00      	nop

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 8013674:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8013678:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801367c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013680:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013684:	6019      	str	r1, [r3, #0]
 8013686:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801368a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801368e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013690:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013694:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801369e:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80136a2:	6812      	ldr	r2, [r2, #0]
 80136a4:	fad3 f212 	qsub16	r2, r3, r2
 80136a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136ac:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80136b0:	601a      	str	r2, [r3, #0]
  return(result);
 80136b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 80136c0:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 80136c4:	00db      	lsls	r3, r3, #3
 80136c6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80136ca:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 80136ce:	6812      	ldr	r2, [r2, #0]
 80136d0:	441a      	add	r2, r3
 80136d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80136da:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80136dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	461a      	mov	r2, r3
 80136ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136ee:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 80136f2:	601a      	str	r2, [r3, #0]
  return (val);
 80136f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80136f8:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc

#ifndef ARM_MATH_BIG_ENDIAN
    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUAD(C2, R) >> 16U;
 8013702:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8013706:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 801370a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801370e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013712:	6019      	str	r1, [r3, #0]
 8013714:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013718:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801371c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801371e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801372c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8013730:	6812      	ldr	r2, [r2, #0]
 8013732:	fb23 f202 	smuad	r2, r3, r2
 8013736:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801373a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801373e:	601a      	str	r2, [r3, #0]
  return(result);
 8013740:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013744:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	0c1b      	lsrs	r3, r3, #16
 801374c:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUSDX(C2, R);
 8013750:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 8013754:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8013758:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 801375c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013760:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013764:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013766:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801376a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801376e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8013772:	6812      	ldr	r2, [r2, #0]
 8013774:	fb43 f212 	smusdx	r2, r3, r2
 8013778:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801377c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8013780:	601a      	str	r2, [r3, #0]
  return(result);
 8013782:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    out2 = __SMUAD(C2, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = read_q15x2 (pSi1);
 8013790:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013794:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
  memcpy (&val, pQ15, 4);
 801379e:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	461a      	mov	r2, r3
 80137a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80137aa:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 80137ae:	601a      	str	r2, [r3, #0]
  return (val);
 80137b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80137b4:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 80137be:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80137c2:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 80137c6:	2300      	movs	r3, #0
 80137c8:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137cc:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 80137d0:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 80137d4:	fa93 f322 	shadd16	r3, r3, r2
 80137d8:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
  return(result);
 80137dc:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80137e0:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 80137e4:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80137e8:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80137ec:	2300      	movs	r3, #0
 80137ee:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137f2:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80137f6:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 80137fa:	fa93 f322 	shadd16	r3, r3, r2
 80137fe:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
  return(result);
 8013802:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8013806:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    write_q15x2_ia (&pSi1, (q31_t) __PKHBT( out1, out2, 0 ));
 801380a:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 801380e:	b29a      	uxth	r2, r3
 8013810:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8013814:	4bd7      	ldr	r3, [pc, #860]	@ (8013b74 <arm_radix4_butterfly_q15+0xa8c>)
 8013816:	400b      	ands	r3, r1
 8013818:	4313      	orrs	r3, r2
 801381a:	461a      	mov	r2, r3
 801381c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8013820:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8013824:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
  q31_t val = value;
 8013828:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801382c:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 8013830:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8013834:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8013836:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013840:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 8013844:	6812      	ldr	r2, [r2, #0]
 8013846:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013848:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	1d1a      	adds	r2, r3, #4
 8013850:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8013854:	601a      	str	r2, [r3, #0]
}
 8013856:	bf00      	nop

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = read_q15x2 (pSi3);
 8013858:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801385c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
  memcpy (&val, pQ15, 4);
 8013866:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	461a      	mov	r2, r3
 801386e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013872:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8013876:	601a      	str	r2, [r3, #0]
  return (val);
 8013878:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801387c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8013886:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 801388a:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 801388e:	2300      	movs	r3, #0
 8013890:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013894:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8013898:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 801389c:	fa93 f322 	shadd16	r3, r3, r2
 80138a0:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
  return(result);
 80138a4:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 80138a8:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 80138ac:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80138b0:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 80138b4:	2300      	movs	r3, #0
 80138b6:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80138ba:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80138be:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 80138c2:	fa93 f322 	shadd16	r3, r3, r2
 80138c6:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
  return(result);
 80138ca:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80138ce:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 80138d2:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80138d6:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80138da:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 80138de:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80138e2:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 80138e6:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 80138ea:	fad3 f312 	qsub16	r3, r3, r2
 80138ee:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
  return(result);
 80138f2:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80138f6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QASX(S, T);
 80138fa:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80138fe:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8013902:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 8013906:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801390a:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801390e:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 8013912:	faa3 f312 	qasx	r3, r3, r2
 8013916:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
  return(result);
 801391a:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 801391e:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QSAX(S, T);
 8013922:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013926:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 801392a:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 801392e:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013932:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8013936:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 801393a:	fae3 f312 	qsax	r3, r3, r2
 801393e:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  return(result);
 8013942:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8013946:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QASX(S, T);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 801394a:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013954:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8013958:	6812      	ldr	r2, [r2, #0]
 801395a:	4413      	add	r3, r2
 801395c:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
  memcpy (&val, pQ15, 4);
 8013960:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	461a      	mov	r2, r3
 8013968:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801396c:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8013970:	601a      	str	r2, [r3, #0]
  return (val);
 8013972:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013976:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUAD(C1, S) >> 16U;
 8013980:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8013984:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8013988:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 801398c:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013990:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8013994:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8013998:	fb23 f302 	smuad	r3, r3, r2
 801399c:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  return(result);
 80139a0:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80139a4:	0c1b      	lsrs	r3, r3, #16
 80139a6:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUSDX(C1, S);
 80139aa:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 80139ae:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 80139b2:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 80139b6:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80139ba:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80139be:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 80139c2:	fb43 f312 	smusdx	r3, r3, r2
 80139c6:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  return(result);
 80139ca:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80139ce:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out2 = __SMUAD(C1, S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xb', yb') in little endian format */
    write_q15x2_ia (&pSi2, __PKHBT( out1, out2, 0 ));
 80139d2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80139d6:	b29a      	uxth	r2, r3
 80139d8:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 80139dc:	4b65      	ldr	r3, [pc, #404]	@ (8013b74 <arm_radix4_butterfly_q15+0xa8c>)
 80139de:	400b      	ands	r3, r1
 80139e0:	4313      	orrs	r3, r2
 80139e2:	461a      	mov	r2, r3
 80139e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80139e8:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80139ec:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
  q31_t val = value;
 80139f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80139f4:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 80139f8:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 80139fc:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80139fe:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013a08:	f5a2 727c 	sub.w	r2, r2, #1008	@ 0x3f0
 8013a0c:	6812      	ldr	r2, [r2, #0]
 8013a0e:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013a10:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	1d1a      	adds	r2, r3, #4
 8013a18:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8013a1c:	601a      	str	r2, [r3, #0]
}
 8013a1e:	bf00      	nop

    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 8013a20:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013a24:	4613      	mov	r3, r2
 8013a26:	005b      	lsls	r3, r3, #1
 8013a28:	4413      	add	r3, r2
 8013a2a:	009b      	lsls	r3, r3, #2
 8013a2c:	461a      	mov	r2, r3
 8013a2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a32:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	4413      	add	r3, r2
 8013a3a:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  memcpy (&val, pQ15, 4);
 8013a3e:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	461a      	mov	r2, r3
 8013a46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a4a:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8013a4e:	601a      	str	r2, [r3, #0]
  return (val);
 8013a50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013a54:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUAD(C3, R) >> 16U;
 8013a5e:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8013a62:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8013a66:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8013a6a:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013a6e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8013a72:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8013a76:	fb23 f302 	smuad	r3, r3, r2
 8013a7a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  return(result);
 8013a7e:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8013a82:	0c1b      	lsrs	r3, r3, #16
 8013a84:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUSDX(C3, R);
 8013a88:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8013a8c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8013a90:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 8013a94:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013a98:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8013a9c:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8013aa0:	fb43 f312 	smusdx	r3, r3, r2
 8013aa4:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
  return(result);
 8013aa8:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8013aac:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out2 = __SMUAD(C3, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xd', yd') in little endian format */
    write_q15x2_ia (&pSi3, __PKHBT( out1, out2, 0 ));
 8013ab0:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8013ab4:	b29a      	uxth	r2, r3
 8013ab6:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8013aba:	4b2e      	ldr	r3, [pc, #184]	@ (8013b74 <arm_radix4_butterfly_q15+0xa8c>)
 8013abc:	400b      	ands	r3, r1
 8013abe:	4313      	orrs	r3, r2
 8013ac0:	461a      	mov	r2, r3
 8013ac2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8013ac6:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8013aca:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
  q31_t val = value;
 8013ace:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ad2:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 8013ad6:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 8013ada:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8013adc:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013ae6:	f5a2 727e 	sub.w	r2, r2, #1016	@ 0x3f8
 8013aea:	6812      	ldr	r2, [r2, #0]
 8013aec:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8013aee:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	1d1a      	adds	r2, r3, #4
 8013af6:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8013afa:	601a      	str	r2, [r3, #0]
}
 8013afc:	bf00      	nop

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 8013afe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b02:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8013b06:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  } while (--j);
 8013b12:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013b16:	3b01      	subs	r3, #1
 8013b18:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8013b1c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	f47f ab44 	bne.w	80131ae <arm_radix4_butterfly_q15+0xc6>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 8013b26:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b2a:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8013b2e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013b32:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8013b36:	6812      	ldr	r2, [r2, #0]
 8013b38:	0092      	lsls	r2, r2, #2
 8013b3a:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8013b3c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b40:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	089b      	lsrs	r3, r3, #2
 8013b48:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8013b4c:	f000 bcc6 	b.w	80144dc <arm_radix4_butterfly_q15+0x13f4>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 8013b50:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013b54:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
    n2 >>= 2U;
 8013b58:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013b5c:	089b      	lsrs	r3, r3, #2
 8013b5e:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    ic = 0U;
 8013b62:	2300      	movs	r3, #0
 8013b64:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

    for (j = 0U; j <= (n2 - 1U); j++)
 8013b68:	2300      	movs	r3, #0
 8013b6a:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8013b6e:	f000 bc9d 	b.w	80144ac <arm_radix4_butterfly_q15+0x13c4>
 8013b72:	bf00      	nop
 8013b74:	ffff0000 	.word	0xffff0000
    {
      /*  index calculation for the coefficients */
      C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 8013b78:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8013b7c:	009b      	lsls	r3, r3, #2
 8013b7e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013b82:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8013b86:	6812      	ldr	r2, [r2, #0]
 8013b88:	441a      	add	r2, r3
 8013b8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b8e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8013b92:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013b94:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013b98:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ba6:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8013baa:	601a      	str	r2, [r3, #0]
  return (val);
 8013bac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bb0:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
      C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8013bba:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8013bbe:	00db      	lsls	r3, r3, #3
 8013bc0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013bc4:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8013bc8:	6812      	ldr	r2, [r2, #0]
 8013bca:	441a      	add	r2, r3
 8013bcc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bd0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8013bd4:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013bd6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bda:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	461a      	mov	r2, r3
 8013be4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013be8:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8013bec:	601a      	str	r2, [r3, #0]
  return (val);
 8013bee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013bf2:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
      C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 8013bfc:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013c00:	4613      	mov	r3, r2
 8013c02:	005b      	lsls	r3, r3, #1
 8013c04:	4413      	add	r3, r2
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	461a      	mov	r2, r3
 8013c0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c0e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	441a      	add	r2, r3
 8013c16:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c1a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8013c1e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013c20:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c24:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c32:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8013c36:	601a      	str	r2, [r3, #0]
  return (val);
 8013c38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c3c:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 8013c46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c4a:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8013c4e:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	4413      	add	r3, r2
 8013c56:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

      pSi0 = pSrc16 + 2 * j;
 8013c5a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013c5e:	009b      	lsls	r3, r3, #2
 8013c60:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013c64:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8013c68:	6812      	ldr	r2, [r2, #0]
 8013c6a:	441a      	add	r2, r3
 8013c6c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c70:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013c74:	601a      	str	r2, [r3, #0]
      pSi1 = pSi0 + 2 * n2;
 8013c76:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c7a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013c84:	009b      	lsls	r3, r3, #2
 8013c86:	441a      	add	r2, r3
 8013c88:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c8c:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013c90:	601a      	str	r2, [r3, #0]
      pSi2 = pSi1 + 2 * n2;
 8013c92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013c96:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013c9a:	681a      	ldr	r2, [r3, #0]
 8013c9c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013ca0:	009b      	lsls	r3, r3, #2
 8013ca2:	441a      	add	r2, r3
 8013ca4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ca8:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013cac:	601a      	str	r2, [r3, #0]
      pSi3 = pSi2 + 2 * n2;
 8013cae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cb2:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013cb6:	681a      	ldr	r2, [r3, #0]
 8013cb8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8013cbc:	009b      	lsls	r3, r3, #2
 8013cbe:	441a      	add	r2, r3
 8013cc0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cc4:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013cc8:	601a      	str	r2, [r3, #0]

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 8013cca:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8013cce:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8013cd2:	e3dc      	b.n	801448e <arm_radix4_butterfly_q15+0x13a6>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = read_q15x2 (pSi0);
 8013cd4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cd8:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013cdc:	681a      	ldr	r2, [r3, #0]
 8013cde:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ce2:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8013ce6:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013ce8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cec:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	461a      	mov	r2, r3
 8013cf6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013cfa:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8013cfe:	601a      	str	r2, [r3, #0]
  return (val);
 8013d00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d04:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yc (real), xc(imag) input */
        S = read_q15x2 (pSi2);
 8013d0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d12:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8013d16:	681a      	ldr	r2, [r3, #0]
 8013d18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d1c:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8013d20:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013d22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d26:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	461a      	mov	r2, r3
 8013d30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d34:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8013d38:	601a      	str	r2, [r3, #0]
  return (val);
 8013d3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d3e:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 8013d48:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8013d4c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013d50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d54:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8013d58:	6019      	str	r1, [r3, #0]
 8013d5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d5e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8013d62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013d64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d68:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013d72:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8013d76:	6812      	ldr	r2, [r2, #0]
 8013d78:	fa93 f212 	qadd16	r2, r3, r2
 8013d7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d80:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8013d84:	601a      	str	r2, [r3, #0]
  return(result);
 8013d86:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013d8a:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 8013d94:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8013d98:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8013d9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013da0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013da4:	6019      	str	r1, [r3, #0]
 8013da6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013daa:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8013dae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013db0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013db4:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013dbe:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 8013dc2:	6812      	ldr	r2, [r2, #0]
 8013dc4:	fad3 f212 	qsub16	r2, r3, r2
 8013dc8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dcc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8013dd0:	601a      	str	r2, [r3, #0]
  return(result);
 8013dd2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dd6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8013de0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013de4:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8013de8:	681a      	ldr	r2, [r3, #0]
 8013dea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013dee:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8013df2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013df4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013df8:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	461a      	mov	r2, r3
 8013e02:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e06:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8013e0a:	601a      	str	r2, [r3, #0]
  return (val);
 8013e0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e10:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8013e1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e1e:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e28:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8013e2c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8013e2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e32:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e40:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8013e44:	601a      	str	r2, [r3, #0]
  return (val);
 8013e46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e4a:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 8013e54:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8013e58:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8013e5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e60:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8013e64:	6019      	str	r1, [r3, #0]
 8013e66:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e6a:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8013e6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013e70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e74:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013e7e:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 8013e82:	6812      	ldr	r2, [r2, #0]
 8013e84:	fa93 f212 	qadd16	r2, r3, r2
 8013e88:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e8c:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8013e90:	601a      	str	r2, [r3, #0]
  return(result);
 8013e92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013e96:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 8013ea0:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8013ea4:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013ea8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013eac:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8013eb0:	6019      	str	r1, [r3, #0]
 8013eb2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013eb6:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8013eba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013ebc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ec0:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013eca:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 8013ece:	6812      	ldr	r2, [r2, #0]
 8013ed0:	fa93 f222 	shadd16	r2, r3, r2
 8013ed4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ed8:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8013edc:	601a      	str	r2, [r3, #0]
  return(result);
 8013ede:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ee2:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out1 = __SHADD16(out1, 0);
 8013eec:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8013ef0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ef4:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8013ef8:	601a      	str	r2, [r3, #0]
 8013efa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013efe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8013f02:	2200      	movs	r2, #0
 8013f04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013f06:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f0a:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013f14:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 8013f18:	6812      	ldr	r2, [r2, #0]
 8013f1a:	fa93 f222 	shadd16	r2, r3, r2
 8013f1e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f22:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8013f26:	601a      	str	r2, [r3, #0]
  return(result);
 8013f28:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f2c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        write_q15x2 (pSi0, out1);
 8013f36:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f3a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013f3e:	681a      	ldr	r2, [r3, #0]
 8013f40:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f44:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8013f48:	601a      	str	r2, [r3, #0]
 8013f4a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f4e:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8013f52:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8013f56:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE void write_q15x2 (
  q15_t * pQ15,
  q31_t   value)
{
  q31_t val = value;
 8013f58:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f5c:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8013f60:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013f64:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8013f68:	6812      	ldr	r2, [r2, #0]
 8013f6a:	601a      	str	r2, [r3, #0]

#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (pQ15, &val, 4);
 8013f6c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f70:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8013f74:	681a      	ldr	r2, [r3, #0]
 8013f76:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f7a:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	601a      	str	r2, [r3, #0]
#else
  pQ15[0] = (q15_t)(val & 0x0FFFF);
  pQ15[1] = (q15_t)(val >> 16);
#endif
}
 8013f82:	bf00      	nop
        pSi0 += 2 * n1;
 8013f84:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f88:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8013f92:	009b      	lsls	r3, r3, #2
 8013f94:	441a      	add	r2, r3
 8013f96:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013f9a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8013f9e:	601a      	str	r2, [r3, #0]

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 8013fa0:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8013fa4:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8013fa8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8013fb0:	6019      	str	r1, [r3, #0]
 8013fb2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fb6:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8013fba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013fbc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fc0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8013fca:	f5a2 721a 	sub.w	r2, r2, #616	@ 0x268
 8013fce:	6812      	ldr	r2, [r2, #0]
 8013fd0:	fad3 f222 	shsub16	r2, r3, r2
 8013fd4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fd8:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8013fdc:	601a      	str	r2, [r3, #0]
  return(result);
 8013fde:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013fe2:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

#ifndef ARM_MATH_BIG_ENDIAN
        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUAD(C2, R) >> 16U;
 8013fec:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8013ff0:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8013ff4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8013ff8:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8013ffc:	6019      	str	r1, [r3, #0]
 8013ffe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014002:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8014006:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014008:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801400c:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014016:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 801401a:	6812      	ldr	r2, [r2, #0]
 801401c:	fb23 f202 	smuad	r2, r3, r2
 8014020:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014024:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8014028:	601a      	str	r2, [r3, #0]
  return(result);
 801402a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801402e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	0c1b      	lsrs	r3, r3, #16
 8014036:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUSDX(C2, R);
 801403a:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 801403e:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8014042:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014046:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 801404a:	6019      	str	r1, [r3, #0]
 801404c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014050:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8014054:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014056:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801405a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014064:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8014068:	6812      	ldr	r2, [r2, #0]
 801406a:	fb43 f212 	smusdx	r2, r3, r2
 801406e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014072:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8014076:	601a      	str	r2, [r3, #0]
  return(result);
 8014078:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801407c:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C2, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8014086:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801408a:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 801408e:	681a      	ldr	r2, [r3, #0]
 8014090:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014094:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8014098:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801409a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801409e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	461a      	mov	r2, r3
 80140a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140ac:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80140b0:	601a      	str	r2, [r3, #0]
  return (val);
 80140b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140b6:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        write_q15x2 (pSi1, __PKHBT( out1, out2, 0 ));
 80140c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140c4:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80140c8:	681a      	ldr	r2, [r3, #0]
 80140ca:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80140ce:	b299      	uxth	r1, r3
 80140d0:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 80140d4:	4bd9      	ldr	r3, [pc, #868]	@ (801443c <arm_radix4_butterfly_q15+0x1354>)
 80140d6:	4003      	ands	r3, r0
 80140d8:	430b      	orrs	r3, r1
 80140da:	4619      	mov	r1, r3
 80140dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140e0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80140e4:	601a      	str	r2, [r3, #0]
 80140e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140ea:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80140ee:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 80140f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80140f4:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 80140f8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80140fc:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8014100:	6812      	ldr	r2, [r2, #0]
 8014102:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8014104:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014108:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 801410c:	681a      	ldr	r2, [r3, #0]
 801410e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014112:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	601a      	str	r2, [r3, #0]
}
 801411a:	bf00      	nop
        pSi1 += 2 * n1;
 801411c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014120:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014124:	681a      	ldr	r2, [r3, #0]
 8014126:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 801412a:	009b      	lsls	r3, r3, #2
 801412c:	441a      	add	r2, r3
 801412e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014132:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014136:	601a      	str	r2, [r3, #0]

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8014138:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801413c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8014140:	681a      	ldr	r2, [r3, #0]
 8014142:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014146:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 801414a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801414c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014150:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	461a      	mov	r2, r3
 801415a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801415e:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8014162:	601a      	str	r2, [r3, #0]
  return (val);
 8014164:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014168:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 8014172:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014176:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 801417a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801417e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8014182:	6019      	str	r1, [r3, #0]
 8014184:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014188:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 801418c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801418e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014192:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801419c:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 80141a0:	6812      	ldr	r2, [r2, #0]
 80141a2:	fad3 f212 	qsub16	r2, r3, r2
 80141a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141aa:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80141ae:	601a      	str	r2, [r3, #0]
  return(result);
 80141b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141b4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHASX(S, T);
 80141be:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80141c2:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80141c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141ca:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80141ce:	6019      	str	r1, [r3, #0]
 80141d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141d4:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80141d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80141da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141de:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80141e8:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 80141ec:	6812      	ldr	r2, [r2, #0]
 80141ee:	faa3 f222 	shasx	r2, r3, r2
 80141f2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80141f6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80141fa:	601a      	str	r2, [r3, #0]
  return(result);
 80141fc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014200:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHSAX(S, T);
 801420a:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 801420e:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014212:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014216:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801421a:	6019      	str	r1, [r3, #0]
 801421c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014220:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8014224:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014226:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801422a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014234:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8014238:	6812      	ldr	r2, [r2, #0]
 801423a:	fae3 f222 	shsax	r2, r3, r2
 801423e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014242:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8014246:	601a      	str	r2, [r3, #0]
  return(result);
 8014248:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801424c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8


        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUAD(C1, S) >> 16U;
 8014256:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 801425a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 801425e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014262:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8014266:	6019      	str	r1, [r3, #0]
 8014268:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801426c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8014270:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014272:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014276:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014280:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8014284:	6812      	ldr	r2, [r2, #0]
 8014286:	fb23 f202 	smuad	r2, r3, r2
 801428a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801428e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8014292:	601a      	str	r2, [r3, #0]
  return(result);
 8014294:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014298:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	0c1b      	lsrs	r3, r3, #16
 80142a0:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUSDX(C1, S);
 80142a4:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 80142a8:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80142ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142b0:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80142b4:	6019      	str	r1, [r3, #0]
 80142b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80142be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80142c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142c4:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80142ce:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 80142d2:	6812      	ldr	r2, [r2, #0]
 80142d4:	fb43 f212 	smusdx	r2, r3, r2
 80142d8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142dc:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80142e0:	601a      	str	r2, [r3, #0]
  return(result);
 80142e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142e6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C1, S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        write_q15x2 (pSi2, __PKHBT( out1, out2, 0 ));
 80142f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80142f4:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 80142f8:	681a      	ldr	r2, [r3, #0]
 80142fa:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80142fe:	b299      	uxth	r1, r3
 8014300:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8014304:	4b4d      	ldr	r3, [pc, #308]	@ (801443c <arm_radix4_butterfly_q15+0x1354>)
 8014306:	4003      	ands	r3, r0
 8014308:	430b      	orrs	r3, r1
 801430a:	4619      	mov	r1, r3
 801430c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014310:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8014314:	601a      	str	r2, [r3, #0]
 8014316:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801431a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 801431e:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014320:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014324:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8014328:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801432c:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
 8014330:	6812      	ldr	r2, [r2, #0]
 8014332:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8014334:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014338:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 801433c:	681a      	ldr	r2, [r3, #0]
 801433e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014342:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	601a      	str	r2, [r3, #0]
}
 801434a:	bf00      	nop
        pSi2 += 2 * n1;
 801434c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014350:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014354:	681a      	ldr	r2, [r3, #0]
 8014356:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 801435a:	009b      	lsls	r3, r3, #2
 801435c:	441a      	add	r2, r3
 801435e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014362:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014366:	601a      	str	r2, [r3, #0]

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
        out1 = __SMUAD(C3, R) >> 16U;
 8014368:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 801436c:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8014370:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014374:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8014378:	6019      	str	r1, [r3, #0]
 801437a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801437e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8014382:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014384:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014388:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014392:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8014396:	6812      	ldr	r2, [r2, #0]
 8014398:	fb23 f202 	smuad	r2, r3, r2
 801439c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143a0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80143a4:	601a      	str	r2, [r3, #0]
  return(result);
 80143a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143aa:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	0c1b      	lsrs	r3, r3, #16
 80143b2:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUSDX(C3, R);
 80143b6:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 80143ba:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80143be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143c2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80143c6:	6019      	str	r1, [r3, #0]
 80143c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143cc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80143d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80143d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143d6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80143e0:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 80143e4:	6812      	ldr	r2, [r2, #0]
 80143e6:	fb43 f212 	smusdx	r2, r3, r2
 80143ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143ee:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80143f2:	601a      	str	r2, [r3, #0]
  return(result);
 80143f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80143f8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUAD(C3, R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        write_q15x2 (pSi3, __PKHBT( out1, out2, 0 ));
 8014402:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014406:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801440a:	681a      	ldr	r2, [r3, #0]
 801440c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8014410:	b299      	uxth	r1, r3
 8014412:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8014416:	4b09      	ldr	r3, [pc, #36]	@ (801443c <arm_radix4_butterfly_q15+0x1354>)
 8014418:	4003      	ands	r3, r0
 801441a:	430b      	orrs	r3, r1
 801441c:	4619      	mov	r1, r3
 801441e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014422:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8014426:	601a      	str	r2, [r3, #0]
 8014428:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801442c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8014430:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014432:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014436:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 801443a:	e001      	b.n	8014440 <arm_radix4_butterfly_q15+0x1358>
 801443c:	ffff0000 	.word	0xffff0000
 8014440:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014444:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 8014448:	6812      	ldr	r2, [r2, #0]
 801444a:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 801444c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014450:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8014454:	681a      	ldr	r2, [r3, #0]
 8014456:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801445a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	601a      	str	r2, [r3, #0]
}
 8014462:	bf00      	nop
        pSi3 += 2 * n1;
 8014464:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014468:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801446c:	681a      	ldr	r2, [r3, #0]
 801446e:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8014472:	009b      	lsls	r3, r3, #2
 8014474:	441a      	add	r2, r3
 8014476:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801447a:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 801447e:	601a      	str	r2, [r3, #0]
      for (i0 = j; i0 < fftLen; i0 += n1)
 8014480:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8014484:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8014488:	4413      	add	r3, r2
 801448a:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 801448e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014492:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8014496:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	429a      	cmp	r2, r3
 801449e:	f4ff ac19 	bcc.w	8013cd4 <arm_radix4_butterfly_q15+0xbec>
    for (j = 0U; j <= (n2 - 1U); j++)
 80144a2:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80144a6:	3301      	adds	r3, #1
 80144a8:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 80144ac:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80144b0:	3b01      	subs	r3, #1
 80144b2:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 80144b6:	429a      	cmp	r2, r3
 80144b8:	f67f ab5e 	bls.w	8013b78 <arm_radix4_butterfly_q15+0xa90>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 80144bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144c0:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80144c4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80144c8:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 80144cc:	6812      	ldr	r2, [r2, #0]
 80144ce:	0092      	lsls	r2, r2, #2
 80144d0:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 80144d2:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80144d6:	089b      	lsrs	r3, r3, #2
 80144d8:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 80144dc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80144e0:	2b04      	cmp	r3, #4
 80144e2:	f63f ab35 	bhi.w	8013b50 <arm_radix4_butterfly_q15+0xa68>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 80144e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144ea:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	089b      	lsrs	r3, r3, #2
 80144f2:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  ptr1 = &pSrc16[0];
 80144f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80144fa:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80144fe:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014502:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8014506:	6812      	ldr	r2, [r2, #0]
 8014508:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = read_q15x2_ia (&ptr1);
 801450a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801450e:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	1d1a      	adds	r2, r3, #4
 8014516:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801451a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801451e:	601a      	str	r2, [r3, #0]
 8014520:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014524:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	1f1a      	subs	r2, r3, #4
 801452c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014530:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8014534:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014536:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801453a:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	461a      	mov	r2, r3
 8014544:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014548:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 801454c:	601a      	str	r2, [r3, #0]
  return (val);
 801454e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014552:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

    /* Read xb (real), yb(imag) input */
    xbyb = read_q15x2_ia (&ptr1);
 801455c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014560:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	1d1a      	adds	r2, r3, #4
 8014568:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801456c:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014570:	601a      	str	r2, [r3, #0]
 8014572:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014576:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	1f1a      	subs	r2, r3, #4
 801457e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014582:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8014586:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014588:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801458c:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	461a      	mov	r2, r3
 8014596:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801459a:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 801459e:	601a      	str	r2, [r3, #0]
  return (val);
 80145a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145a4:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4

    /* Read xc (real), yc(imag) input */
    xcyc = read_q15x2_ia (&ptr1);
 80145ae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145b2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	1d1a      	adds	r2, r3, #4
 80145ba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145be:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80145c2:	601a      	str	r2, [r3, #0]
 80145c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145c8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	1f1a      	subs	r2, r3, #4
 80145d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145d4:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80145d8:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80145da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145de:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	461a      	mov	r2, r3
 80145e8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145ec:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80145f0:	601a      	str	r2, [r3, #0]
  return (val);
 80145f2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80145f6:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

    /* Read xd (real), yd(imag) input */
    xdyd = read_q15x2_ia (&ptr1);
 8014600:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014604:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	1d1a      	adds	r2, r3, #4
 801460c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014610:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014614:	601a      	str	r2, [r3, #0]
 8014616:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801461a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	1f1a      	subs	r2, r3, #4
 8014622:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014626:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 801462a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801462c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014630:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	461a      	mov	r2, r3
 801463a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801463e:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8014642:	601a      	str	r2, [r3, #0]
  return (val);
 8014644:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014648:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 8014652:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 8014656:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 801465a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801465e:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8014662:	6019      	str	r1, [r3, #0]
 8014664:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014668:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 801466c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801466e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014672:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801467c:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 8014680:	6812      	ldr	r2, [r2, #0]
 8014682:	fa93 f212 	qadd16	r2, r3, r2
 8014686:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801468a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 801468e:	601a      	str	r2, [r3, #0]
  return(result);
 8014690:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014694:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 801469e:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 80146a2:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 80146a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146aa:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80146ae:	6019      	str	r1, [r3, #0]
 80146b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146b4:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 80146b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80146ba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146be:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80146c8:	f5a2 724f 	sub.w	r2, r2, #828	@ 0x33c
 80146cc:	6812      	ldr	r2, [r2, #0]
 80146ce:	fa93 f212 	qadd16	r2, r3, r2
 80146d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146d6:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 80146da:	601a      	str	r2, [r3, #0]
  return(result);
 80146dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146e0:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* pointer updation for writing */
    ptr1 = ptr1 - 8U;
 80146ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146ee:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	f1a3 0210 	sub.w	r2, r3, #16
 80146f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80146fc:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8014700:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&ptr1, __SHADD16(R, T));
 8014702:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8014706:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801470a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801470e:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8014712:	6019      	str	r1, [r3, #0]
 8014714:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014718:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 801471c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801471e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014722:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801472c:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 8014730:	6812      	ldr	r2, [r2, #0]
 8014732:	fa93 f222 	shadd16	r2, r3, r2
 8014736:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801473a:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 801473e:	601a      	str	r2, [r3, #0]
  return(result);
 8014740:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014744:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	4619      	mov	r1, r3
 801474c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014750:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014754:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8014758:	601a      	str	r2, [r3, #0]
 801475a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801475e:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8014762:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014764:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014768:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 801476c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014770:	f5a2 724a 	sub.w	r2, r2, #808	@ 0x328
 8014774:	6812      	ldr	r2, [r2, #0]
 8014776:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014778:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801477c:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014788:	f5a2 7261 	sub.w	r2, r2, #900	@ 0x384
 801478c:	6812      	ldr	r2, [r2, #0]
 801478e:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014790:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014794:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	1d1a      	adds	r2, r3, #4
 801479e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147a2:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	601a      	str	r2, [r3, #0]
}
 80147aa:	bf00      	nop

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 80147ac:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 80147b0:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 80147b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147b8:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80147bc:	6019      	str	r1, [r3, #0]
 80147be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147c2:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 80147c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80147c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147cc:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80147d6:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 80147da:	6812      	ldr	r2, [r2, #0]
 80147dc:	fa93 f212 	qadd16	r2, r3, r2
 80147e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147e4:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80147e8:	601a      	str	r2, [r3, #0]
  return(result);
 80147ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80147ee:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    write_q15x2_ia (&ptr1, __SHSUB16(R, T));
 80147f8:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80147fc:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014800:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014804:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8014808:	6019      	str	r1, [r3, #0]
 801480a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801480e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8014812:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014814:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014818:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014822:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 8014826:	6812      	ldr	r2, [r2, #0]
 8014828:	fad3 f222 	shsub16	r2, r3, r2
 801482c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014830:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8014834:	601a      	str	r2, [r3, #0]
  return(result);
 8014836:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801483a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	4619      	mov	r1, r3
 8014842:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014846:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801484a:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 801484e:	601a      	str	r2, [r3, #0]
 8014850:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014854:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8014858:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 801485a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801485e:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 8014862:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014866:	f5a2 7242 	sub.w	r2, r2, #776	@ 0x308
 801486a:	6812      	ldr	r2, [r2, #0]
 801486c:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 801486e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014872:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801487e:	f5a2 7262 	sub.w	r2, r2, #904	@ 0x388
 8014882:	6812      	ldr	r2, [r2, #0]
 8014884:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014886:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801488a:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	1d1a      	adds	r2, r3, #4
 8014894:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014898:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	601a      	str	r2, [r3, #0]
}
 80148a0:	bf00      	nop

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 80148a2:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 80148a6:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 80148aa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148ae:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 80148b2:	6019      	str	r1, [r3, #0]
 80148b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148b8:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 80148bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80148be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148c2:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80148cc:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 80148d0:	6812      	ldr	r2, [r2, #0]
 80148d2:	fad3 f212 	qsub16	r2, r3, r2
 80148d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148da:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80148de:	601a      	str	r2, [r3, #0]
  return(result);
 80148e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148e4:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 80148ee:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 80148f2:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 80148f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80148fa:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80148fe:	6019      	str	r1, [r3, #0]
 8014900:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014904:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8014908:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801490a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801490e:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014918:	f5a2 723c 	sub.w	r2, r2, #752	@ 0x2f0
 801491c:	6812      	ldr	r2, [r2, #0]
 801491e:	fad3 f212 	qsub16	r2, r3, r2
 8014922:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014926:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 801492a:	601a      	str	r2, [r3, #0]
  return(result);
 801492c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014930:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
 801493a:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 801493e:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014942:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014946:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801494a:	6019      	str	r1, [r3, #0]
 801494c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014950:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8014954:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014956:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801495a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014964:	f5a2 7239 	sub.w	r2, r2, #740	@ 0x2e4
 8014968:	6812      	ldr	r2, [r2, #0]
 801496a:	fae3 f222 	shsax	r2, r3, r2
 801496e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014972:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8014976:	601a      	str	r2, [r3, #0]
  return(result);
 8014978:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801497c:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	4619      	mov	r1, r3
 8014984:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014988:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 801498c:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8014990:	601a      	str	r2, [r3, #0]
 8014992:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014996:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801499a:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 801499c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149a0:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 80149a4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80149a8:	f5a2 7237 	sub.w	r2, r2, #732	@ 0x2dc
 80149ac:	6812      	ldr	r2, [r2, #0]
 80149ae:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80149b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149b4:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80149c0:	f5a2 7263 	sub.w	r2, r2, #908	@ 0x38c
 80149c4:	6812      	ldr	r2, [r2, #0]
 80149c6:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80149c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149cc:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	1d1a      	adds	r2, r3, #4
 80149d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149da:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	601a      	str	r2, [r3, #0]
}
 80149e2:	bf00      	nop

    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
 80149e4:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80149e8:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80149ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149f0:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80149f4:	6019      	str	r1, [r3, #0]
 80149f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80149fa:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80149fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014a00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a04:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014a0e:	f5a2 7234 	sub.w	r2, r2, #720	@ 0x2d0
 8014a12:	6812      	ldr	r2, [r2, #0]
 8014a14:	faa3 f222 	shasx	r2, r3, r2
 8014a18:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a1c:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8014a20:	601a      	str	r2, [r3, #0]
  return(result);
 8014a22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a26:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a32:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014a36:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8014a3a:	601a      	str	r2, [r3, #0]
 8014a3c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a40:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8014a44:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014a46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a4a:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8014a4e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014a52:	f5a2 7232 	sub.w	r2, r2, #712	@ 0x2c8
 8014a56:	6812      	ldr	r2, [r2, #0]
 8014a58:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8014a5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a5e:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014a6a:	f5a2 7264 	sub.w	r2, r2, #912	@ 0x390
 8014a6e:	6812      	ldr	r2, [r2, #0]
 8014a70:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8014a72:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a76:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	1d1a      	adds	r2, r3, #4
 8014a80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014a84:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	601a      	str	r2, [r3, #0]
}
 8014a8c:	bf00      	nop
    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

  } while (--j);
 8014a8e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8014a92:	3b01      	subs	r3, #1
 8014a94:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8014a98:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	f47f ad34 	bne.w	801450a <arm_radix4_butterfly_q15+0x1422>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 8014aa2:	bf00      	nop
 8014aa4:	bf00      	nop
 8014aa6:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bc90      	pop	{r4, r7}
 8014aae:	4770      	bx	lr

08014ab0 <arm_radix4_butterfly_inverse_q15>:
ARM_DSP_ATTRIBUTE void arm_radix4_butterfly_inverse_q15(
        q15_t * pSrc16,
        uint32_t fftLen,
  const q15_t * pCoef16,
        uint32_t twidCoefModifier)
{
 8014ab0:	b490      	push	{r4, r7}
 8014ab2:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8014ab6:	af00      	add	r7, sp, #0
 8014ab8:	f507 6481 	add.w	r4, r7, #1032	@ 0x408
 8014abc:	f5a4 747f 	sub.w	r4, r4, #1020	@ 0x3fc
 8014ac0:	6020      	str	r0, [r4, #0]
 8014ac2:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 8014ac6:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
 8014aca:	6001      	str	r1, [r0, #0]
 8014acc:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8014ad0:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8014ad4:	600a      	str	r2, [r1, #0]
 8014ad6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014ada:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8014ade:	6013      	str	r3, [r2, #0]
  /* Total process is divided into three stages */

  /* process first stage, middle stages, & last stage */

  /*  Initializations for the first stage */
  n2 = fftLen;
 8014ae0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ae4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
  n1 = n2;
 8014aee:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014af2:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 8014af6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014afa:	089b      	lsrs	r3, r3, #2
 8014afc:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404

  /* Index for twiddle coefficient */
  ic = 0U;
 8014b00:	2300      	movs	r3, #0
 8014b02:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  /* Index for input read and output write */
  j = n2;
 8014b06:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014b0a:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  pSi0 = pSrc16;
 8014b0e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b12:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8014b16:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014b1a:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8014b1e:	6812      	ldr	r2, [r2, #0]
 8014b20:	601a      	str	r2, [r3, #0]
  pSi1 = pSi0 + 2 * n2;
 8014b22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b26:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8014b2a:	681a      	ldr	r2, [r3, #0]
 8014b2c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014b30:	009b      	lsls	r3, r3, #2
 8014b32:	441a      	add	r2, r3
 8014b34:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b38:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014b3c:	601a      	str	r2, [r3, #0]
  pSi2 = pSi1 + 2 * n2;
 8014b3e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b42:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014b46:	681a      	ldr	r2, [r3, #0]
 8014b48:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014b4c:	009b      	lsls	r3, r3, #2
 8014b4e:	441a      	add	r2, r3
 8014b50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b54:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014b58:	601a      	str	r2, [r3, #0]
  pSi3 = pSi2 + 2 * n2;
 8014b5a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b5e:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014b62:	681a      	ldr	r2, [r3, #0]
 8014b64:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8014b68:	009b      	lsls	r3, r3, #2
 8014b6a:	441a      	add	r2, r3
 8014b6c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b70:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8014b74:	601a      	str	r2, [r3, #0]
  {
    /*  Butterfly implementation */

    /*  Reading i0, i0+fftLen/2 inputs */
    /* Read ya (real), xa(imag) input */
    T = read_q15x2 (pSi0);
 8014b76:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b7a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8014b7e:	681a      	ldr	r2, [r3, #0]
 8014b80:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b84:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8014b88:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014b8a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b8e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	461a      	mov	r2, r3
 8014b98:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014b9c:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8014ba0:	601a      	str	r2, [r3, #0]
  return (val);
 8014ba2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ba6:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014bb0:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014bb4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bb8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8014bbc:	601a      	str	r2, [r3, #0]
 8014bbe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bc2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014bca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014bd8:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 8014bdc:	6812      	ldr	r2, [r2, #0]
 8014bde:	fa93 f222 	shadd16	r2, r3, r2
 8014be2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014be6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8014bea:	601a      	str	r2, [r3, #0]
  return(result);
 8014bec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014bf0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014bfa:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014bfe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c02:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8014c06:	601a      	str	r2, [r3, #0]
 8014c08:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c0c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8014c10:	2200      	movs	r2, #0
 8014c12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014c14:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c18:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014c22:	f5a2 72da 	sub.w	r2, r2, #436	@ 0x1b4
 8014c26:	6812      	ldr	r2, [r2, #0]
 8014c28:	fa93 f222 	shadd16	r2, r3, r2
 8014c2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c30:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8014c34:	601a      	str	r2, [r3, #0]
  return(result);
 8014c36:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c3a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yc (real), xc(imag) input */
    S = read_q15x2 (pSi2);
 8014c44:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c48:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8014c4c:	681a      	ldr	r2, [r3, #0]
 8014c4e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c52:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8014c56:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014c58:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c5c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	461a      	mov	r2, r3
 8014c66:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c6a:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8014c6e:	601a      	str	r2, [r3, #0]
  return (val);
 8014c70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c74:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 8014c7e:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014c82:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c86:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8014c8a:	601a      	str	r2, [r3, #0]
 8014c8c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c90:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8014c94:	2200      	movs	r2, #0
 8014c96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014c98:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014c9c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014ca6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8014caa:	6812      	ldr	r2, [r2, #0]
 8014cac:	fa93 f222 	shadd16	r2, r3, r2
 8014cb0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cb4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8014cb8:	601a      	str	r2, [r3, #0]
  return(result);
 8014cba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cbe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    S = __SHADD16(S, 0);
 8014cc8:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014ccc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cd0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8014cd4:	601a      	str	r2, [r3, #0]
 8014cd6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cda:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8014cde:	2200      	movs	r2, #0
 8014ce0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014ce2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ce6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014cf0:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8014cf4:	6812      	ldr	r2, [r2, #0]
 8014cf6:	fa93 f222 	shadd16	r2, r3, r2
 8014cfa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014cfe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8014d02:	601a      	str	r2, [r3, #0]
  return(result);
 8014d04:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d08:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* R = packed((ya + yc), (xa + xc) ) */
    R = __QADD16(T, S);
 8014d12:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014d16:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014d1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d1e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8014d22:	6019      	str	r1, [r3, #0]
 8014d24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d28:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8014d2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014d2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d32:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014d3c:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8014d40:	6812      	ldr	r2, [r2, #0]
 8014d42:	fa93 f212 	qadd16	r2, r3, r2
 8014d46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d4a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8014d4e:	601a      	str	r2, [r3, #0]
  return(result);
 8014d50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d54:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* S = packed((ya - yc), (xa - xc) ) */
    S = __QSUB16(T, S);
 8014d5e:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014d62:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8014d66:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d6a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8014d6e:	6019      	str	r1, [r3, #0]
 8014d70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d74:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8014d78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014d7a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d7e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014d88:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8014d8c:	6812      	ldr	r2, [r2, #0]
 8014d8e:	fad3 f212 	qsub16	r2, r3, r2
 8014d92:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014d96:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8014d9a:	601a      	str	r2, [r3, #0]
  return(result);
 8014d9c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014da0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
    /* Read yb (real), xb(imag) input */
    T = read_q15x2 (pSi1);
 8014daa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dae:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8014db2:	681a      	ldr	r2, [r3, #0]
 8014db4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014db8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8014dbc:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014dbe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dc2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	461a      	mov	r2, r3
 8014dcc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dd0:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8014dd4:	601a      	str	r2, [r3, #0]
  return (val);
 8014dd6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dda:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014de4:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014de8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014dec:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8014df0:	601a      	str	r2, [r3, #0]
 8014df2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014df6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014dfe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e02:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014e0c:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 8014e10:	6812      	ldr	r2, [r2, #0]
 8014e12:	fa93 f222 	shadd16	r2, r3, r2
 8014e16:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e1a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8014e1e:	601a      	str	r2, [r3, #0]
  return(result);
 8014e20:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e24:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8014e2e:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014e32:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e36:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8014e3a:	601a      	str	r2, [r3, #0]
 8014e3c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e40:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8014e44:	2200      	movs	r2, #0
 8014e46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014e48:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e4c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014e56:	f5a2 72b2 	sub.w	r2, r2, #356	@ 0x164
 8014e5a:	6812      	ldr	r2, [r2, #0]
 8014e5c:	fa93 f222 	shadd16	r2, r3, r2
 8014e60:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e64:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8014e68:	601a      	str	r2, [r3, #0]
  return(result);
 8014e6a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e6e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* Read yd (real), xd(imag) input */
    U = read_q15x2 (pSi3);
 8014e78:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e7c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e86:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8014e8a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8014e8c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e90:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	461a      	mov	r2, r3
 8014e9a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014e9e:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8014ea2:	601a      	str	r2, [r3, #0]
  return (val);
 8014ea4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ea8:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8014eb2:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014eb6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014eba:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8014ebe:	601a      	str	r2, [r3, #0]
 8014ec0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ec4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8014ec8:	2200      	movs	r2, #0
 8014eca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014ecc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ed0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014eda:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8014ede:	6812      	ldr	r2, [r2, #0]
 8014ee0:	fa93 f222 	shadd16	r2, r3, r2
 8014ee4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ee8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014eec:	601a      	str	r2, [r3, #0]
  return(result);
 8014eee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ef2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8014efc:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014f00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f04:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8014f08:	601a      	str	r2, [r3, #0]
 8014f0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f0e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8014f12:	2200      	movs	r2, #0
 8014f14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014f16:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f1a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014f24:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8014f28:	6812      	ldr	r2, [r2, #0]
 8014f2a:	fa93 f222 	shadd16	r2, r3, r2
 8014f2e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f32:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8014f36:	601a      	str	r2, [r3, #0]
  return(result);
 8014f38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f3c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed((yb + yd), (xb + xd) ) */
    T = __QADD16(T, U);
 8014f46:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8014f4a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8014f4e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f52:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014f56:	6019      	str	r1, [r3, #0]
 8014f58:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f5c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014f60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014f62:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f66:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014f70:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8014f74:	6812      	ldr	r2, [r2, #0]
 8014f76:	fa93 f212 	qadd16	r2, r3, r2
 8014f7a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f7e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8014f82:	601a      	str	r2, [r3, #0]
  return(result);
 8014f84:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f88:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&pSi0, __SHADD16(R, T));
 8014f92:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8014f96:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8014f9a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014f9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014fa2:	6019      	str	r1, [r3, #0]
 8014fa4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fa8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014fac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8014fae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8014fbc:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8014fc0:	6812      	ldr	r2, [r2, #0]
 8014fc2:	fa93 f222 	shadd16	r2, r3, r2
 8014fc6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014fce:	601a      	str	r2, [r3, #0]
  return(result);
 8014fd0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fd4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	4619      	mov	r1, r3
 8014fdc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fe0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014fe4:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8014fe8:	601a      	str	r2, [r3, #0]
 8014fea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014fee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014ff2:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8014ff4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8014ff8:	f5a3 7376 	sub.w	r3, r3, #984	@ 0x3d8
 8014ffc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015000:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8015004:	6812      	ldr	r2, [r2, #0]
 8015006:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8015008:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801500c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015018:	f5a2 7276 	sub.w	r2, r2, #984	@ 0x3d8
 801501c:	6812      	ldr	r2, [r2, #0]
 801501e:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8015020:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015024:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	1d1a      	adds	r2, r3, #4
 801502e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015032:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	601a      	str	r2, [r3, #0]
}
 801503a:	bf00      	nop

    /* R = packed((ya + yc) - (yb + yd), (xa + xc)- (xb + xd)) */
    R = __QSUB16(R, T);
 801503c:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 8015040:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015044:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015048:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801504c:	6019      	str	r1, [r3, #0]
 801504e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015052:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015056:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015058:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801505c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015066:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 801506a:	6812      	ldr	r2, [r2, #0]
 801506c:	fad3 f212 	qsub16	r2, r3, r2
 8015070:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015074:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015078:	601a      	str	r2, [r3, #0]
  return(result);
 801507a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801507e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* co2 & si2 are read from SIMD Coefficient pointer */
    C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8015088:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 801508c:	00db      	lsls	r3, r3, #3
 801508e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015092:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8015096:	6812      	ldr	r2, [r2, #0]
 8015098:	441a      	add	r2, r3
 801509a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801509e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80150a2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80150a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	461a      	mov	r2, r3
 80150b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150b6:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 80150ba:	601a      	str	r2, [r3, #0]
  return (val);
 80150bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150c0:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc

#ifndef ARM_MATH_BIG_ENDIAN
    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUSD(C2, R) >> 16U;
 80150ca:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 80150ce:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80150d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80150da:	6019      	str	r1, [r3, #0]
 80150dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80150e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80150e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80150ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80150f4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80150f8:	6812      	ldr	r2, [r2, #0]
 80150fa:	fb43 f202 	smusd	r2, r3, r2
 80150fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015102:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015106:	601a      	str	r2, [r3, #0]
  return(result);
 8015108:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801510c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	0c1b      	lsrs	r3, r3, #16
 8015114:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
    out2 = __SMUADX(C2, R);
 8015118:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 801511c:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015120:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8015124:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015128:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801512c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801512e:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8015132:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015136:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 801513a:	6812      	ldr	r2, [r2, #0]
 801513c:	fb23 f212 	smuadx	r2, r3, r2
 8015140:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015144:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8015148:	601a      	str	r2, [r3, #0]
  return(result);
 801514a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801514e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    out2 = __SMUSD(__QSUB16(0, C2), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /*  Reading i0+fftLen/4 */
    /* T = packed(yb, xb) */
    T = read_q15x2 (pSi1);
 8015158:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801515c:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
  memcpy (&val, pQ15, 4);
 8015166:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	461a      	mov	r2, r3
 801516e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015172:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8015176:	601a      	str	r2, [r3, #0]
  return (val);
 8015178:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801517c:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 8015186:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 801518a:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 801518e:	2300      	movs	r3, #0
 8015190:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015194:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8015198:	f8d7 2318 	ldr.w	r2, [r7, #792]	@ 0x318
 801519c:	fa93 f322 	shadd16	r3, r3, r2
 80151a0:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
  return(result);
 80151a4:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80151a8:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
    T = __SHADD16(T, 0);
 80151ac:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80151b0:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80151b4:	2300      	movs	r3, #0
 80151b6:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80151ba:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80151be:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 80151c2:	fa93 f322 	shadd16	r3, r3, r2
 80151c6:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
  return(result);
 80151ca:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 80151ce:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    write_q15x2_ia (&pSi1, (q31_t) __PKHBT( out1, out2, 0 ));
 80151d2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80151d6:	b29a      	uxth	r2, r3
 80151d8:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 80151dc:	4bd7      	ldr	r3, [pc, #860]	@ (801553c <arm_radix4_butterfly_inverse_q15+0xa8c>)
 80151de:	400b      	ands	r3, r1
 80151e0:	4313      	orrs	r3, r2
 80151e2:	461a      	mov	r2, r3
 80151e4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80151e8:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 80151ec:	f8c7 232c 	str.w	r2, [r7, #812]	@ 0x32c
  q31_t val = value;
 80151f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80151f4:	f5a3 7379 	sub.w	r3, r3, #996	@ 0x3e4
 80151f8:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 80151fc:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80151fe:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015208:	f5a2 7279 	sub.w	r2, r2, #996	@ 0x3e4
 801520c:	6812      	ldr	r2, [r2, #0]
 801520e:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8015210:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	1d1a      	adds	r2, r3, #4
 8015218:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 801521c:	601a      	str	r2, [r3, #0]
}
 801521e:	bf00      	nop

    /*  Butterfly calculations */
    /* U = packed(yd, xd) */
    U = read_q15x2 (pSi3);
 8015220:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015224:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
  memcpy (&val, pQ15, 4);
 801522e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	461a      	mov	r2, r3
 8015236:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801523a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801523e:	601a      	str	r2, [r3, #0]
  return (val);
 8015240:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015244:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 801524e:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8015252:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 8015256:	2300      	movs	r3, #0
 8015258:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801525c:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8015260:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8015264:	fa93 f322 	shadd16	r3, r3, r2
 8015268:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
  return(result);
 801526c:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8015270:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
    U = __SHADD16(U, 0);
 8015274:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8015278:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 801527c:	2300      	movs	r3, #0
 801527e:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015282:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8015286:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 801528a:	fa93 f322 	shadd16	r3, r3, r2
 801528e:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
  return(result);
 8015292:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8015296:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

    /* T = packed(yb-yd, xb-xd) */
    T = __QSUB16(T, U);
 801529a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 801529e:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 80152a2:	f8c7 2358 	str.w	r2, [r7, #856]	@ 0x358
 80152a6:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80152aa:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 80152ae:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 80152b2:	fad3 f312 	qsub16	r3, r3, r2
 80152b6:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
  return(result);
 80152ba:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80152be:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
    /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
    R = __QSAX(S, T);
 80152c2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80152c6:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80152ca:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 80152ce:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80152d2:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80152d6:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 80152da:	fae3 f312 	qsax	r3, r3, r2
 80152de:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
  return(result);
 80152e2:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 80152e6:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
    /* S = packed((ya-yc) + (xb- xd),  (xa-xc) - (yb-yd)) */
    S = __QASX(S, T);
 80152ea:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 80152ee:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 80152f2:	f8c7 2370 	str.w	r2, [r7, #880]	@ 0x370
 80152f6:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80152fa:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 80152fe:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8015302:	faa3 f312 	qasx	r3, r3, r2
 8015306:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  return(result);
 801530a:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801530e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
    /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
    S = __QSAX(S, T);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* co1 & si1 are read from SIMD Coefficient pointer */
    C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 8015312:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015316:	009b      	lsls	r3, r3, #2
 8015318:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801531c:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8015320:	6812      	ldr	r2, [r2, #0]
 8015322:	4413      	add	r3, r2
 8015324:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
  memcpy (&val, pQ15, 4);
 8015328:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	461a      	mov	r2, r3
 8015330:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015334:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8015338:	601a      	str	r2, [r3, #0]
  return (val);
 801533a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801533e:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUSD(C1, S) >> 16U;
 8015348:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 801534c:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8015350:	f8c7 2380 	str.w	r2, [r7, #896]	@ 0x380
 8015354:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015358:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801535c:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8015360:	fb43 f302 	smusd	r3, r3, r2
 8015364:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  return(result);
 8015368:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801536c:	0c1b      	lsrs	r3, r3, #16
 801536e:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
    out2 = __SMUADX(C1, S);
 8015372:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8015376:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 801537a:	f8c7 238c 	str.w	r2, [r7, #908]	@ 0x38c
 801537e:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015382:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8015386:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 801538a:	fb23 f312 	smuadx	r3, r3, r2
 801538e:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  return(result);
 8015392:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8015396:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out2 = __SMUSD(__QSUB16(0, C1), S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xb', yb') in little endian format */
    write_q15x2_ia (&pSi2, __PKHBT( out1, out2, 0 ));
 801539a:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 801539e:	b29a      	uxth	r2, r3
 80153a0:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 80153a4:	4b65      	ldr	r3, [pc, #404]	@ (801553c <arm_radix4_butterfly_inverse_q15+0xa8c>)
 80153a6:	400b      	ands	r3, r1
 80153a8:	4313      	orrs	r3, r2
 80153aa:	461a      	mov	r2, r3
 80153ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80153b0:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80153b4:	f8c7 2390 	str.w	r2, [r7, #912]	@ 0x390
  q31_t val = value;
 80153b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153bc:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 80153c0:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 80153c4:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80153c6:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80153d0:	f5a2 727c 	sub.w	r2, r2, #1008	@ 0x3f0
 80153d4:	6812      	ldr	r2, [r2, #0]
 80153d6:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80153d8:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	1d1a      	adds	r2, r3, #4
 80153e0:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80153e4:	601a      	str	r2, [r3, #0]
}
 80153e6:	bf00      	nop

    /* co3 & si3 are read from SIMD Coefficient pointer */
    C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 80153e8:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80153ec:	4613      	mov	r3, r2
 80153ee:	005b      	lsls	r3, r3, #1
 80153f0:	4413      	add	r3, r2
 80153f2:	009b      	lsls	r3, r3, #2
 80153f4:	461a      	mov	r2, r3
 80153f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80153fa:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	4413      	add	r3, r2
 8015402:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  memcpy (&val, pQ15, 4);
 8015406:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	461a      	mov	r2, r3
 801540e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015412:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8015416:	601a      	str	r2, [r3, #0]
  return (val);
 8015418:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801541c:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUSD(C3, R) >> 16U;
 8015426:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 801542a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 801542e:	f8c7 23a4 	str.w	r2, [r7, #932]	@ 0x3a4
 8015432:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015436:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 801543a:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 801543e:	fb43 f302 	smusd	r3, r3, r2
 8015442:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  return(result);
 8015446:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801544a:	0c1b      	lsrs	r3, r3, #16
 801544c:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
    /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
    out2 = __SMUADX(C3, R);
 8015450:	f8d7 23cc 	ldr.w	r2, [r7, #972]	@ 0x3cc
 8015454:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8015458:	f8c7 23b0 	str.w	r2, [r7, #944]	@ 0x3b0
 801545c:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015460:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8015464:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8015468:	fb23 f312 	smuadx	r3, r3, r2
 801546c:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
  return(result);
 8015470:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8015474:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
    /* yd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out2 = __SMUSD(__QSUB16(0, C3), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

    /* writing output(xd', yd') in little endian format */
    write_q15x2_ia (&pSi3, __PKHBT( out1, out2, 0 ));
 8015478:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 801547c:	b29a      	uxth	r2, r3
 801547e:	f8d7 13d4 	ldr.w	r1, [r7, #980]	@ 0x3d4
 8015482:	4b2e      	ldr	r3, [pc, #184]	@ (801553c <arm_radix4_butterfly_inverse_q15+0xa8c>)
 8015484:	400b      	ands	r3, r1
 8015486:	4313      	orrs	r3, r2
 8015488:	461a      	mov	r2, r3
 801548a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801548e:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8015492:	f8c7 23b8 	str.w	r2, [r7, #952]	@ 0x3b8
  q31_t val = value;
 8015496:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801549a:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 801549e:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 80154a2:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 80154a4:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80154ae:	f5a2 727e 	sub.w	r2, r2, #1016	@ 0x3f8
 80154b2:	6812      	ldr	r2, [r2, #0]
 80154b4:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 80154b6:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	1d1a      	adds	r2, r3, #4
 80154be:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 80154c2:	601a      	str	r2, [r3, #0]
}
 80154c4:	bf00      	nop

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 80154c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154ca:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80154ce:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	4413      	add	r3, r2
 80154d6:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

  } while (--j);
 80154da:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80154de:	3b01      	subs	r3, #1
 80154e0:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 80154e4:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	f47f ab44 	bne.w	8014b76 <arm_radix4_butterfly_inverse_q15+0xc6>


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 80154ee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80154f2:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80154f6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80154fa:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 80154fe:	6812      	ldr	r2, [r2, #0]
 8015500:	0092      	lsls	r2, r2, #2
 8015502:	601a      	str	r2, [r3, #0]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8015504:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015508:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	089b      	lsrs	r3, r3, #2
 8015510:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8015514:	f000 bcc6 	b.w	8015ea4 <arm_radix4_butterfly_inverse_q15+0x13f4>
  {
    /*  Initializations for the middle stage */
    n1 = n2;
 8015518:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 801551c:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
    n2 >>= 2U;
 8015520:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015524:	089b      	lsrs	r3, r3, #2
 8015526:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    ic = 0U;
 801552a:	2300      	movs	r3, #0
 801552c:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

    for (j = 0U; j <= (n2 - 1U); j++)
 8015530:	2300      	movs	r3, #0
 8015532:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8015536:	f000 bc9d 	b.w	8015e74 <arm_radix4_butterfly_inverse_q15+0x13c4>
 801553a:	bf00      	nop
 801553c:	ffff0000 	.word	0xffff0000
    {
      /*  index calculation for the coefficients */
      C1 = read_q15x2 ((q15_t *) pCoef16 + (2U * ic));
 8015540:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015544:	009b      	lsls	r3, r3, #2
 8015546:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801554a:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 801554e:	6812      	ldr	r2, [r2, #0]
 8015550:	441a      	add	r2, r3
 8015552:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015556:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801555a:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801555c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015560:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	461a      	mov	r2, r3
 801556a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801556e:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 8015572:	601a      	str	r2, [r3, #0]
  return (val);
 8015574:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015578:	f5a3 736f 	sub.w	r3, r3, #956	@ 0x3bc
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
      C2 = read_q15x2 ((q15_t *) pCoef16 + (4U * ic));
 8015582:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8015586:	00db      	lsls	r3, r3, #3
 8015588:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801558c:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8015590:	6812      	ldr	r2, [r2, #0]
 8015592:	441a      	add	r2, r3
 8015594:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015598:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 801559c:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 801559e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155a2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	461a      	mov	r2, r3
 80155ac:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155b0:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 80155b4:	601a      	str	r2, [r3, #0]
  return (val);
 80155b6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155ba:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
      C3 = read_q15x2 ((q15_t *) pCoef16 + (6U * ic));
 80155c4:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 80155c8:	4613      	mov	r3, r2
 80155ca:	005b      	lsls	r3, r3, #1
 80155cc:	4413      	add	r3, r2
 80155ce:	009b      	lsls	r3, r3, #2
 80155d0:	461a      	mov	r2, r3
 80155d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155d6:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	441a      	add	r2, r3
 80155de:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155e2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80155e6:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80155e8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155ec:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	461a      	mov	r2, r3
 80155f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80155fa:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 80155fe:	601a      	str	r2, [r3, #0]
  return (val);
 8015600:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015604:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;
 801560e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015612:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8015616:	f8d7 2400 	ldr.w	r2, [r7, #1024]	@ 0x400
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	4413      	add	r3, r2
 801561e:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400

      pSi0 = pSrc16 + 2 * j;
 8015622:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8015626:	009b      	lsls	r3, r3, #2
 8015628:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801562c:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8015630:	6812      	ldr	r2, [r2, #0]
 8015632:	441a      	add	r2, r3
 8015634:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015638:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 801563c:	601a      	str	r2, [r3, #0]
      pSi1 = pSi0 + 2 * n2;
 801563e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015642:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015646:	681a      	ldr	r2, [r3, #0]
 8015648:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 801564c:	009b      	lsls	r3, r3, #2
 801564e:	441a      	add	r2, r3
 8015650:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015654:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015658:	601a      	str	r2, [r3, #0]
      pSi2 = pSi1 + 2 * n2;
 801565a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801565e:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015662:	681a      	ldr	r2, [r3, #0]
 8015664:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015668:	009b      	lsls	r3, r3, #2
 801566a:	441a      	add	r2, r3
 801566c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015670:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015674:	601a      	str	r2, [r3, #0]
      pSi3 = pSi2 + 2 * n2;
 8015676:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801567a:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 801567e:	681a      	ldr	r2, [r3, #0]
 8015680:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015684:	009b      	lsls	r3, r3, #2
 8015686:	441a      	add	r2, r3
 8015688:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801568c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015690:	601a      	str	r2, [r3, #0]

      /*  Butterfly implementation */
      for (i0 = j; i0 < fftLen; i0 += n1)
 8015692:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8015696:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 801569a:	e3dc      	b.n	8015e56 <arm_radix4_butterfly_inverse_q15+0x13a6>
      {
        /*  Reading i0, i0+fftLen/2 inputs */
        /* Read ya (real), xa(imag) input */
        T = read_q15x2 (pSi0);
 801569c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156a0:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156aa:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 80156ae:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80156b0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156b4:	f5a3 7330 	sub.w	r3, r3, #704	@ 0x2c0
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	461a      	mov	r2, r3
 80156be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156c2:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 80156c6:	601a      	str	r2, [r3, #0]
  return (val);
 80156c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156cc:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yc (real), xc(imag) input */
        S = read_q15x2 (pSi2);
 80156d6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156da:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 80156de:	681a      	ldr	r2, [r3, #0]
 80156e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156e4:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80156e8:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80156ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156ee:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	461a      	mov	r2, r3
 80156f8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80156fc:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8015700:	601a      	str	r2, [r3, #0]
  return (val);
 8015702:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015706:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /* R = packed( (ya + yc), (xa + xc)) */
        R = __QADD16(T, S);
 8015710:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8015714:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015718:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801571c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8015720:	6019      	str	r1, [r3, #0]
 8015722:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015726:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 801572a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801572c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015730:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801573a:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 801573e:	6812      	ldr	r2, [r2, #0]
 8015740:	fa93 f212 	qadd16	r2, r3, r2
 8015744:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015748:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 801574c:	601a      	str	r2, [r3, #0]
  return(result);
 801574e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015752:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya - yc), (xa - xc)) */
        S = __QSUB16(T, S);
 801575c:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8015760:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015764:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015768:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 801576c:	6019      	str	r1, [r3, #0]
 801576e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015772:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8015776:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015778:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801577c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015786:	f5a2 722a 	sub.w	r2, r2, #680	@ 0x2a8
 801578a:	6812      	ldr	r2, [r2, #0]
 801578c:	fad3 f212 	qsub16	r2, r3, r2
 8015790:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015794:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8015798:	601a      	str	r2, [r3, #0]
  return(result);
 801579a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801579e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Reading i0+fftLen/4 , i0+3fftLen/4 inputs */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 80157a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157ac:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 80157b0:	681a      	ldr	r2, [r3, #0]
 80157b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157b6:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80157ba:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80157bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157c0:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	461a      	mov	r2, r3
 80157ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157ce:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80157d2:	601a      	str	r2, [r3, #0]
  return (val);
 80157d4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157d8:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 80157e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157e6:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80157ea:	681a      	ldr	r2, [r3, #0]
 80157ec:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157f0:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80157f4:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 80157f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80157fa:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	461a      	mov	r2, r3
 8015804:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015808:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 801580c:	601a      	str	r2, [r3, #0]
  return (val);
 801580e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015812:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed( (yb + yd), (xb + xd)) */
        T = __QADD16(T, U);
 801581c:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8015820:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8015824:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015828:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 801582c:	6019      	str	r1, [r3, #0]
 801582e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015832:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8015836:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015838:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801583c:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015846:	f5a2 7225 	sub.w	r2, r2, #660	@ 0x294
 801584a:	6812      	ldr	r2, [r2, #0]
 801584c:	fa93 f212 	qadd16	r2, r3, r2
 8015850:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015854:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8015858:	601a      	str	r2, [r3, #0]
  return(result);
 801585a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801585e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 sample */

        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
 8015868:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 801586c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015870:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015874:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8015878:	6019      	str	r1, [r3, #0]
 801587a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801587e:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8015882:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015884:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015888:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015892:	f5a2 7222 	sub.w	r2, r2, #648	@ 0x288
 8015896:	6812      	ldr	r2, [r2, #0]
 8015898:	fa93 f222 	shadd16	r2, r3, r2
 801589c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158a0:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80158a4:	601a      	str	r2, [r3, #0]
  return(result);
 80158a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158aa:	f5a3 7323 	sub.w	r3, r3, #652	@ 0x28c
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out1 = __SHADD16(out1, 0);
 80158b4:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 80158b8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158bc:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80158c0:	601a      	str	r2, [r3, #0]
 80158c2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158c6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80158ca:	2200      	movs	r2, #0
 80158cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80158ce:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158d2:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80158dc:	f5a2 721f 	sub.w	r2, r2, #636	@ 0x27c
 80158e0:	6812      	ldr	r2, [r2, #0]
 80158e2:	fa93 f222 	shadd16	r2, r3, r2
 80158e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158ea:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80158ee:	601a      	str	r2, [r3, #0]
  return(result);
 80158f0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80158f4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        write_q15x2 (pSi0, out1);
 80158fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015902:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015906:	681a      	ldr	r2, [r3, #0]
 8015908:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801590c:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8015910:	601a      	str	r2, [r3, #0]
 8015912:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015916:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 801591a:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 801591e:	601a      	str	r2, [r3, #0]
  q31_t val = value;
 8015920:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015924:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8015928:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801592c:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8015930:	6812      	ldr	r2, [r2, #0]
 8015932:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015934:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015938:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 801593c:	681a      	ldr	r2, [r3, #0]
 801593e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015942:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	601a      	str	r2, [r3, #0]
}
 801594a:	bf00      	nop
        pSi0 += 2 * n1;
 801594c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015950:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015954:	681a      	ldr	r2, [r3, #0]
 8015956:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 801595a:	009b      	lsls	r3, r3, #2
 801595c:	441a      	add	r2, r3
 801595e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015962:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8015966:	601a      	str	r2, [r3, #0]

        /* R = packed( (ya + yc) - (yb + yd), (xa + xc) - (xb + xd)) */
        R = __SHSUB16(R, T);
 8015968:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 801596c:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015970:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015974:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8015978:	6019      	str	r1, [r3, #0]
 801597a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801597e:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8015982:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015984:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015988:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015992:	f5a2 721a 	sub.w	r2, r2, #616	@ 0x268
 8015996:	6812      	ldr	r2, [r2, #0]
 8015998:	fad3 f222 	shsub16	r2, r3, r2
 801599c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159a0:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80159a4:	601a      	str	r2, [r3, #0]
  return(result);
 80159a6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159aa:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

#ifndef ARM_MATH_BIG_ENDIAN
        /* (ya-yb+yc-yd)* (si2) + (xa-xb+xc-xd)* co2 */
        out1 = __SMUSD(C2, R) >> 16U;
 80159b4:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 80159b8:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 80159bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159c0:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80159c4:	6019      	str	r1, [r3, #0]
 80159c6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159ca:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80159ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80159d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159d4:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80159de:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 80159e2:	6812      	ldr	r2, [r2, #0]
 80159e4:	fb43 f202 	smusd	r2, r3, r2
 80159e8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159ec:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80159f0:	601a      	str	r2, [r3, #0]
  return(result);
 80159f2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80159f6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	0c1b      	lsrs	r3, r3, #16
 80159fe:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8

        /* (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        out2 = __SMUADX(C2, R);
 8015a02:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8015a06:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015a0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a0e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8015a12:	6019      	str	r1, [r3, #0]
 8015a14:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a18:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8015a1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015a1e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a22:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015a2c:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8015a30:	6812      	ldr	r2, [r2, #0]
 8015a32:	fb23 f212 	smuadx	r2, r3, r2
 8015a36:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a3a:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8015a3e:	601a      	str	r2, [r3, #0]
  return(result);
 8015a40:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a44:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C2), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = read_q15x2 (pSi1);
 8015a4e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a52:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015a56:	681a      	ldr	r2, [r3, #0]
 8015a58:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a5c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8015a60:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015a62:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a66:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	461a      	mov	r2, r3
 8015a70:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a74:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8015a78:	601a      	str	r2, [r3, #0]
  return (val);
 8015a7a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a7e:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        write_q15x2 (pSi1, __PKHBT( out1, out2, 0 ));
 8015a88:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015a8c:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015a90:	681a      	ldr	r2, [r3, #0]
 8015a92:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015a96:	b299      	uxth	r1, r3
 8015a98:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8015a9c:	4bd9      	ldr	r3, [pc, #868]	@ (8015e04 <arm_radix4_butterfly_inverse_q15+0x1354>)
 8015a9e:	4003      	ands	r3, r0
 8015aa0:	430b      	orrs	r3, r1
 8015aa2:	4619      	mov	r1, r3
 8015aa4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015aa8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8015aac:	601a      	str	r2, [r3, #0]
 8015aae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ab2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8015ab6:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015ab8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015abc:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8015ac0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015ac4:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8015ac8:	6812      	ldr	r2, [r2, #0]
 8015aca:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015acc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ad0:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 8015ad4:	681a      	ldr	r2, [r3, #0]
 8015ad6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ada:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	601a      	str	r2, [r3, #0]
}
 8015ae2:	bf00      	nop
        pSi1 += 2 * n1;
 8015ae4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ae8:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015aec:	681a      	ldr	r2, [r3, #0]
 8015aee:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015af2:	009b      	lsls	r3, r3, #2
 8015af4:	441a      	add	r2, r3
 8015af6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015afa:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8015afe:	601a      	str	r2, [r3, #0]

        /*  Butterfly calculations */

        /* Read yd (real), xd(imag) input */
        U = read_q15x2 (pSi3);
 8015b00:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b04:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015b08:	681a      	ldr	r2, [r3, #0]
 8015b0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b0e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8015b12:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015b14:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b18:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	461a      	mov	r2, r3
 8015b22:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b26:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8015b2a:	601a      	str	r2, [r3, #0]
  return (val);
 8015b2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b30:	f5a3 736c 	sub.w	r3, r3, #944	@ 0x3b0
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

        /* T = packed(yb-yd, xb-xd) */
        T = __QSUB16(T, U);
 8015b3a:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8015b3e:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8015b42:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b46:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8015b4a:	6019      	str	r1, [r3, #0]
 8015b4c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b50:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8015b54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015b56:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b5a:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015b64:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8015b68:	6812      	ldr	r2, [r2, #0]
 8015b6a:	fad3 f212 	qsub16	r2, r3, r2
 8015b6e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b72:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8015b76:	601a      	str	r2, [r3, #0]
  return(result);
 8015b78:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b7c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

#ifndef ARM_MATH_BIG_ENDIAN
        /* R = packed((ya-yc) + (xb- xd) , (xa-xc) - (yb-yd)) */
        R = __SHSAX(S, T);
 8015b86:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8015b8a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015b8e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b92:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015b96:	6019      	str	r1, [r3, #0]
 8015b98:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015b9c:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8015ba0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015ba2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ba6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015bb0:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 8015bb4:	6812      	ldr	r2, [r2, #0]
 8015bb6:	fae3 f222 	shsax	r2, r3, r2
 8015bba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bbe:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8015bc2:	601a      	str	r2, [r3, #0]
  return(result);
 8015bc4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bc8:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

        /* S = packed((ya-yc) - (xb- xd),  (xa-xc) + (yb-yd)) */
        S = __SHASX(S, T);
 8015bd2:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8015bd6:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 8015bda:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bde:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8015be2:	6019      	str	r1, [r3, #0]
 8015be4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015be8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8015bec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015bee:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015bf2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015bfc:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8015c00:	6812      	ldr	r2, [r2, #0]
 8015c02:	faa3 f222 	shasx	r2, r3, r2
 8015c06:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c0a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015c0e:	601a      	str	r2, [r3, #0]
  return(result);
 8015c10:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c14:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

        /*  Butterfly process for the i0+fftLen/2 sample */
        out1 = __SMUSD(C1, S) >> 16U;
 8015c1e:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8015c22:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015c26:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c2a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8015c2e:	6019      	str	r1, [r3, #0]
 8015c30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c34:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8015c38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015c3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c3e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015c48:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8015c4c:	6812      	ldr	r2, [r2, #0]
 8015c4e:	fb43 f202 	smusd	r2, r3, r2
 8015c52:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c56:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8015c5a:	601a      	str	r2, [r3, #0]
  return(result);
 8015c5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c60:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	0c1b      	lsrs	r3, r3, #16
 8015c68:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUADX(C1, S);
 8015c6c:	f8d7 13d0 	ldr.w	r1, [r7, #976]	@ 0x3d0
 8015c70:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	@ 0x3e8
 8015c74:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c78:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8015c7c:	6019      	str	r1, [r3, #0]
 8015c7e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c82:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8015c86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015c88:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015c8c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015c96:	f5a2 7201 	sub.w	r2, r2, #516	@ 0x204
 8015c9a:	6812      	ldr	r2, [r2, #0]
 8015c9c:	fb23 f212 	smuadx	r2, r3, r2
 8015ca0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ca4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8015ca8:	601a      	str	r2, [r3, #0]
  return(result);
 8015caa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cae:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C1), S);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        write_q15x2 (pSi2, __PKHBT( out1, out2, 0 ));
 8015cb8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cbc:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015cc0:	681a      	ldr	r2, [r3, #0]
 8015cc2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015cc6:	b299      	uxth	r1, r3
 8015cc8:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8015ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8015e04 <arm_radix4_butterfly_inverse_q15+0x1354>)
 8015cce:	4003      	ands	r3, r0
 8015cd0:	430b      	orrs	r3, r1
 8015cd2:	4619      	mov	r1, r3
 8015cd4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cd8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8015cdc:	601a      	str	r2, [r3, #0]
 8015cde:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ce2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8015ce6:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015ce8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015cec:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8015cf0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015cf4:	f5a2 72fe 	sub.w	r2, r2, #508	@ 0x1fc
 8015cf8:	6812      	ldr	r2, [r2, #0]
 8015cfa:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015cfc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d00:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8015d04:	681a      	ldr	r2, [r3, #0]
 8015d06:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d0a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	601a      	str	r2, [r3, #0]
}
 8015d12:	bf00      	nop
        pSi2 += 2 * n1;
 8015d14:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d18:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015d1c:	681a      	ldr	r2, [r3, #0]
 8015d1e:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015d22:	009b      	lsls	r3, r3, #2
 8015d24:	441a      	add	r2, r3
 8015d26:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d2a:	f5a3 735b 	sub.w	r3, r3, #876	@ 0x36c
 8015d2e:	601a      	str	r2, [r3, #0]

        /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN
        out1 = __SMUSD(C3, R) >> 16U;
 8015d30:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8015d34:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015d38:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d3c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8015d40:	6019      	str	r1, [r3, #0]
 8015d42:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d46:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8015d4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015d4c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d50:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015d5a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8015d5e:	6812      	ldr	r2, [r2, #0]
 8015d60:	fb43 f202 	smusd	r2, r3, r2
 8015d64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d68:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8015d6c:	601a      	str	r2, [r3, #0]
  return(result);
 8015d6e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d72:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	0c1b      	lsrs	r3, r3, #16
 8015d7a:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
        out2 = __SMUADX(C3, R);
 8015d7e:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8015d82:	f8d7 23e4 	ldr.w	r2, [r7, #996]	@ 0x3e4
 8015d86:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d8a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8015d8e:	6019      	str	r1, [r3, #0]
 8015d90:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d94:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8015d98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8015d9a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015d9e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015da8:	f5a2 72f2 	sub.w	r2, r2, #484	@ 0x1e4
 8015dac:	6812      	ldr	r2, [r2, #0]
 8015dae:	fb23 f212 	smuadx	r2, r3, r2
 8015db2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015db6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8015dba:	601a      	str	r2, [r3, #0]
  return(result);
 8015dbc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dc0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
        out2 = __SMUSD(__QSUB16(0, C3), R);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        write_q15x2 (pSi3, __PKHBT( out1, out2, 0 ));
 8015dca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dce:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015dd2:	681a      	ldr	r2, [r3, #0]
 8015dd4:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8015dd8:	b299      	uxth	r1, r3
 8015dda:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8015dde:	4b09      	ldr	r3, [pc, #36]	@ (8015e04 <arm_radix4_butterfly_inverse_q15+0x1354>)
 8015de0:	4003      	ands	r3, r0
 8015de2:	430b      	orrs	r3, r1
 8015de4:	4619      	mov	r1, r3
 8015de6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dea:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8015dee:	601a      	str	r2, [r3, #0]
 8015df0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015df4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8015df8:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8015dfa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015dfe:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8015e02:	e001      	b.n	8015e08 <arm_radix4_butterfly_inverse_q15+0x1358>
 8015e04:	ffff0000 	.word	0xffff0000
 8015e08:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015e0c:	f5a2 72ee 	sub.w	r2, r2, #476	@ 0x1dc
 8015e10:	6812      	ldr	r2, [r2, #0]
 8015e12:	601a      	str	r2, [r3, #0]
  memcpy (pQ15, &val, 4);
 8015e14:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e18:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 8015e1c:	681a      	ldr	r2, [r3, #0]
 8015e1e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e22:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	601a      	str	r2, [r3, #0]
}
 8015e2a:	bf00      	nop
        pSi3 += 2 * n1;
 8015e2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e30:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015e34:	681a      	ldr	r2, [r3, #0]
 8015e36:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015e3a:	009b      	lsls	r3, r3, #2
 8015e3c:	441a      	add	r2, r3
 8015e3e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e42:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 8015e46:	601a      	str	r2, [r3, #0]
      for (i0 = j; i0 < fftLen; i0 += n1)
 8015e48:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8015e4c:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8015e50:	4413      	add	r3, r2
 8015e52:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8015e56:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e5a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8015e5e:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	@ 0x3fc
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	429a      	cmp	r2, r3
 8015e66:	f4ff ac19 	bcc.w	801569c <arm_radix4_butterfly_inverse_q15+0xbec>
    for (j = 0U; j <= (n2 - 1U); j++)
 8015e6a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8015e6e:	3301      	adds	r3, #1
 8015e70:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8015e74:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8015e78:	3b01      	subs	r3, #1
 8015e7a:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	f67f ab5e 	bls.w	8015540 <arm_radix4_butterfly_inverse_q15+0xa90>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 8015e84:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015e88:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8015e8c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015e90:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 8015e94:	6812      	ldr	r2, [r2, #0]
 8015e96:	0092      	lsls	r2, r2, #2
 8015e98:	601a      	str	r2, [r3, #0]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8015e9a:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8015e9e:	089b      	lsrs	r3, r3, #2
 8015ea0:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8015ea4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8015ea8:	2b04      	cmp	r3, #4
 8015eaa:	f63f ab35 	bhi.w	8015518 <arm_radix4_butterfly_inverse_q15+0xa68>
  /* data is in 8.8(q8) format for the 256 point */
  /* data is in 6.10(q10) format for the 64 point */
  /* data is in 4.12(q12) format for the 16 point */

  /*  Initializations for the last stage */
  j = fftLen >> 2;
 8015eae:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015eb2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	089b      	lsrs	r3, r3, #2
 8015eba:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

  ptr1 = &pSrc16[0];
 8015ebe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ec2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015ec6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8015eca:	f5a2 727f 	sub.w	r2, r2, #1020	@ 0x3fc
 8015ece:	6812      	ldr	r2, [r2, #0]
 8015ed0:	601a      	str	r2, [r3, #0]

  /*  Butterfly implementation */
  do
  {
    /* Read xa (real), ya(imag) input */
    xaya = read_q15x2_ia (&ptr1);
 8015ed2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ed6:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	1d1a      	adds	r2, r3, #4
 8015ede:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ee2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015ee6:	601a      	str	r2, [r3, #0]
 8015ee8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015eec:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	1f1a      	subs	r2, r3, #4
 8015ef4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ef8:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8015efc:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015efe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f02:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f10:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8015f14:	601a      	str	r2, [r3, #0]
  return (val);
 8015f16:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f1a:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8

    /* Read xb (real), yb(imag) input */
    xbyb = read_q15x2_ia (&ptr1);
 8015f24:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f28:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	1d1a      	adds	r2, r3, #4
 8015f30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f34:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f38:	601a      	str	r2, [r3, #0]
 8015f3a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f3e:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	1f1a      	subs	r2, r3, #4
 8015f46:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f4a:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8015f4e:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015f50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f54:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	461a      	mov	r2, r3
 8015f5e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f62:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8015f66:	601a      	str	r2, [r3, #0]
  return (val);
 8015f68:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f6c:	f5a3 735e 	sub.w	r3, r3, #888	@ 0x378
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4

    /* Read xc (real), yc(imag) input */
    xcyc = read_q15x2_ia (&ptr1);
 8015f76:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f7a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	1d1a      	adds	r2, r3, #4
 8015f82:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f86:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f8a:	601a      	str	r2, [r3, #0]
 8015f8c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f90:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	1f1a      	subs	r2, r3, #4
 8015f98:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015f9c:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8015fa0:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015fa2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fa6:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	461a      	mov	r2, r3
 8015fb0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fb4:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8015fb8:	601a      	str	r2, [r3, #0]
  return (val);
 8015fba:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fbe:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0

    /* Read xd (real), yd(imag) input */
    xdyd = read_q15x2_ia (&ptr1);
 8015fc8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fcc:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	1d1a      	adds	r2, r3, #4
 8015fd4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fd8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015fdc:	601a      	str	r2, [r3, #0]
 8015fde:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fe2:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	1f1a      	subs	r2, r3, #4
 8015fea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015fee:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8015ff2:	601a      	str	r2, [r3, #0]
  memcpy (&val, pQ15, 4);
 8015ff4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8015ff8:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	461a      	mov	r2, r3
 8016002:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016006:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 801600a:	601a      	str	r2, [r3, #0]
  return (val);
 801600c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016010:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 801601a:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 801601e:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8016022:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016026:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 801602a:	6019      	str	r1, [r3, #0]
 801602c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016030:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8016034:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016036:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801603a:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016044:	f5a2 7252 	sub.w	r2, r2, #840	@ 0x348
 8016048:	6812      	ldr	r2, [r2, #0]
 801604a:	fa93 f212 	qadd16	r2, r3, r2
 801604e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016052:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8016056:	601a      	str	r2, [r3, #0]
  return(result);
 8016058:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801605c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8016066:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 801606a:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 801606e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016072:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8016076:	6019      	str	r1, [r3, #0]
 8016078:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801607c:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8016080:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016082:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016086:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016090:	f5a2 724f 	sub.w	r2, r2, #828	@ 0x33c
 8016094:	6812      	ldr	r2, [r2, #0]
 8016096:	fa93 f212 	qadd16	r2, r3, r2
 801609a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801609e:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 80160a2:	601a      	str	r2, [r3, #0]
  return(result);
 80160a4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160a8:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* pointer updation for writing */
    ptr1 = ptr1 - 8U;
 80160b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160b6:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	f1a3 0210 	sub.w	r2, r3, #16
 80160c0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160c4:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 80160c8:	601a      	str	r2, [r3, #0]


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    write_q15x2_ia (&ptr1, __SHADD16(R, T));
 80160ca:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80160ce:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80160d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160d6:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80160da:	6019      	str	r1, [r3, #0]
 80160dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160e0:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 80160e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80160e6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80160ea:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80160f4:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 80160f8:	6812      	ldr	r2, [r2, #0]
 80160fa:	fa93 f222 	shadd16	r2, r3, r2
 80160fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016102:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8016106:	601a      	str	r2, [r3, #0]
  return(result);
 8016108:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801610c:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	4619      	mov	r1, r3
 8016114:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016118:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 801611c:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8016120:	601a      	str	r2, [r3, #0]
 8016122:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016126:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 801612a:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 801612c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016130:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8016134:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016138:	f5a2 724a 	sub.w	r2, r2, #808	@ 0x328
 801613c:	6812      	ldr	r2, [r2, #0]
 801613e:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8016140:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016144:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016150:	f5a2 7261 	sub.w	r2, r2, #900	@ 0x384
 8016154:	6812      	ldr	r2, [r2, #0]
 8016156:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8016158:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801615c:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	1d1a      	adds	r2, r3, #4
 8016166:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801616a:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	601a      	str	r2, [r3, #0]
}
 8016172:	bf00      	nop

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8016174:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 8016178:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 801617c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016180:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8016184:	6019      	str	r1, [r3, #0]
 8016186:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801618a:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 801618e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016190:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016194:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801619e:	f5a2 7247 	sub.w	r2, r2, #796	@ 0x31c
 80161a2:	6812      	ldr	r2, [r2, #0]
 80161a4:	fa93 f212 	qadd16	r2, r3, r2
 80161a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161ac:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80161b0:	601a      	str	r2, [r3, #0]
  return(result);
 80161b2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161b6:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    write_q15x2_ia (&ptr1, __SHSUB16(R, T));
 80161c0:	f8d7 13e4 	ldr.w	r1, [r7, #996]	@ 0x3e4
 80161c4:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	@ 0x3ec
 80161c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161cc:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80161d0:	6019      	str	r1, [r3, #0]
 80161d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161d6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80161da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80161dc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161e0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80161ea:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 80161ee:	6812      	ldr	r2, [r2, #0]
 80161f0:	fad3 f222 	shsub16	r2, r3, r2
 80161f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80161f8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80161fc:	601a      	str	r2, [r3, #0]
  return(result);
 80161fe:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016202:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	4619      	mov	r1, r3
 801620a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801620e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8016212:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8016216:	601a      	str	r2, [r3, #0]
 8016218:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801621c:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8016220:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8016222:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016226:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 801622a:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801622e:	f5a2 7242 	sub.w	r2, r2, #776	@ 0x308
 8016232:	6812      	ldr	r2, [r2, #0]
 8016234:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8016236:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801623a:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016246:	f5a2 7262 	sub.w	r2, r2, #904	@ 0x388
 801624a:	6812      	ldr	r2, [r2, #0]
 801624c:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801624e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016252:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	1d1a      	adds	r2, r3, #4
 801625c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016260:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	601a      	str	r2, [r3, #0]
}
 8016268:	bf00      	nop

    /* S = packed((ya - yc), (xa - xc)) */
    S = __QSUB16(xaya, xcyc);
 801626a:	f8d7 13c8 	ldr.w	r1, [r7, #968]	@ 0x3c8
 801626e:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8016272:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016276:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 801627a:	6019      	str	r1, [r3, #0]
 801627c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016280:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8016284:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016286:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801628a:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016294:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 8016298:	6812      	ldr	r2, [r2, #0]
 801629a:	fad3 f212 	qsub16	r2, r3, r2
 801629e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162a2:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80162a6:	601a      	str	r2, [r3, #0]
  return(result);
 80162a8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162ac:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8

    /* Read yd (real), xd(imag) input */
    /* T = packed( (yb - yd), (xb - xd))  */
    U = __QSUB16(xbyb, xdyd);
 80162b6:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 80162ba:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 80162be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162c2:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80162c6:	6019      	str	r1, [r3, #0]
 80162c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162cc:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80162d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80162d2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162d6:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80162e0:	f5a2 723c 	sub.w	r2, r2, #752	@ 0x2f0
 80162e4:	6812      	ldr	r2, [r2, #0]
 80162e6:	fad3 f212 	qsub16	r2, r3, r2
 80162ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162ee:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80162f2:	601a      	str	r2, [r3, #0]
  return(result);
 80162f4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80162f8:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0

#ifndef ARM_MATH_BIG_ENDIAN
    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
 8016302:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 8016306:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 801630a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801630e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8016312:	6019      	str	r1, [r3, #0]
 8016314:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016318:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 801631c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801631e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016322:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801632c:	f5a2 7239 	sub.w	r2, r2, #740	@ 0x2e4
 8016330:	6812      	ldr	r2, [r2, #0]
 8016332:	faa3 f222 	shasx	r2, r3, r2
 8016336:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801633a:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 801633e:	601a      	str	r2, [r3, #0]
  return(result);
 8016340:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016344:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	4619      	mov	r1, r3
 801634c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016350:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8016354:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8016358:	601a      	str	r2, [r3, #0]
 801635a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801635e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8016362:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 8016364:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016368:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 801636c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016370:	f5a2 7237 	sub.w	r2, r2, #732	@ 0x2dc
 8016374:	6812      	ldr	r2, [r2, #0]
 8016376:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8016378:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801637c:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016388:	f5a2 7263 	sub.w	r2, r2, #908	@ 0x38c
 801638c:	6812      	ldr	r2, [r2, #0]
 801638e:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8016390:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016394:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	1d1a      	adds	r2, r3, #4
 801639e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163a2:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	601a      	str	r2, [r3, #0]
}
 80163aa:	bf00      	nop

    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHSAX(S, U));
 80163ac:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	@ 0x3e8
 80163b0:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 80163b4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163b8:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80163bc:	6019      	str	r1, [r3, #0]
 80163be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163c2:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80163c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80163c8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163cc:	f5a3 7333 	sub.w	r3, r3, #716	@ 0x2cc
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80163d6:	f5a2 7234 	sub.w	r2, r2, #720	@ 0x2d0
 80163da:	6812      	ldr	r2, [r2, #0]
 80163dc:	fae3 f222 	shsax	r2, r3, r2
 80163e0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163e4:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80163e8:	601a      	str	r2, [r3, #0]
  return(result);
 80163ea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163ee:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	4619      	mov	r1, r3
 80163f6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80163fa:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 80163fe:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8016402:	601a      	str	r2, [r3, #0]
 8016404:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016408:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 801640c:	6019      	str	r1, [r3, #0]
  q31_t val = value;
 801640e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016412:	f5a3 7364 	sub.w	r3, r3, #912	@ 0x390
 8016416:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 801641a:	f5a2 7232 	sub.w	r2, r2, #712	@ 0x2c8
 801641e:	6812      	ldr	r2, [r2, #0]
 8016420:	601a      	str	r2, [r3, #0]
  memcpy (*pQ15, &val, 4);
 8016422:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8016426:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8016432:	f5a2 7264 	sub.w	r2, r2, #912	@ 0x390
 8016436:	6812      	ldr	r2, [r2, #0]
 8016438:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 801643a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801643e:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	1d1a      	adds	r2, r3, #4
 8016448:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 801644c:	f5a3 7331 	sub.w	r3, r3, #708	@ 0x2c4
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	601a      	str	r2, [r3, #0]
}
 8016454:	bf00      	nop
    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    write_q15x2_ia (&ptr1, __SHASX(S, U));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

  } while (--j);
 8016456:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 801645a:	3b01      	subs	r3, #1
 801645c:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8016460:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8016464:	2b00      	cmp	r3, #0
 8016466:	f47f ad34 	bne.w	8015ed2 <arm_radix4_butterfly_inverse_q15+0x1422>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 801646a:	bf00      	nop
 801646c:	bf00      	nop
 801646e:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8016472:	46bd      	mov	sp, r7
 8016474:	bc90      	pop	{r4, r7}
 8016476:	4770      	bx	lr

08016478 <arm_mfcc_init_q15>:
  const uint32_t *filterPos,
  const uint32_t *filterLengths,
  const q15_t *filterCoefs,
  const q15_t *windowCoefs
  )
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b086      	sub	sp, #24
 801647c:	af00      	add	r7, sp, #0
 801647e:	60f8      	str	r0, [r7, #12]
 8016480:	60b9      	str	r1, [r7, #8]
 8016482:	607a      	str	r2, [r7, #4]
 8016484:	603b      	str	r3, [r7, #0]
 arm_status status;

 S->fftLen=fftLen;
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	68ba      	ldr	r2, [r7, #8]
 801648a:	615a      	str	r2, [r3, #20]
 S->nbMelFilters=nbMelFilters;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	687a      	ldr	r2, [r7, #4]
 8016490:	619a      	str	r2, [r3, #24]
 S->nbDctOutputs=nbDctOutputs;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	683a      	ldr	r2, [r7, #0]
 8016496:	61da      	str	r2, [r3, #28]
 S->dctCoefs=dctCoefs;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	6a3a      	ldr	r2, [r7, #32]
 801649c:	601a      	str	r2, [r3, #0]
 S->filterPos=filterPos;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80164a2:	60da      	str	r2, [r3, #12]
 S->filterLengths=filterLengths;
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80164a8:	611a      	str	r2, [r3, #16]
 S->filterCoefs=filterCoefs;
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80164ae:	605a      	str	r2, [r3, #4]
 S->windowCoefs=windowCoefs;
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80164b4:	609a      	str	r2, [r3, #8]

 #if defined(ARM_MFCC_CFFT_BASED)
 status=arm_cfft_init_q15(&(S->cfft),fftLen);
 #else
 RFFT_INIT(fftLen);
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	f103 0020 	add.w	r0, r3, #32
 80164bc:	2301      	movs	r3, #1
 80164be:	2200      	movs	r2, #0
 80164c0:	68b9      	ldr	r1, [r7, #8]
 80164c2:	f000 fab5 	bl	8016a30 <arm_rfft_init_q15>
 80164c6:	4603      	mov	r3, r0
 80164c8:	75fb      	strb	r3, [r7, #23]
 #endif
 
 return(status);
 80164ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80164ce:	4618      	mov	r0, r3
 80164d0:	3718      	adds	r7, #24
 80164d2:	46bd      	mov	sp, r7
 80164d4:	bd80      	pop	{r7, pc}
	...

080164d8 <arm_mfcc_q15>:
  q15_t *pSrc,
  q15_t *pDst,
  q31_t *pTmp
  )
#endif
{
 80164d8:	b5b0      	push	{r4, r5, r7, lr}
 80164da:	b09a      	sub	sp, #104	@ 0x68
 80164dc:	af02      	add	r7, sp, #8
 80164de:	60f8      	str	r0, [r7, #12]
 80164e0:	60b9      	str	r1, [r7, #8]
 80164e2:	607a      	str	r2, [r7, #4]
 80164e4:	603b      	str	r3, [r7, #0]
    q15_t m;
    uint32_t index;
    uint32_t fftShift=0;
 80164e6:	2300      	movs	r3, #0
 80164e8:	653b      	str	r3, [r7, #80]	@ 0x50
    q63_t result;
    arm_matrix_instance_q15 pDctMat;
    uint32_t i;
    uint32_t coefsPos;
    uint32_t filterLimit;
    q15_t *pTmp2=(q15_t*)pTmp;
 80164ea:	683b      	ldr	r3, [r7, #0]
 80164ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

    arm_status status = ARM_MATH_SUCCESS;
 80164ee:	2300      	movs	r3, #0
 80164f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    
    // q15
    arm_absmax_q15(pSrc,S->fftLen,&m,&index);
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	6959      	ldr	r1, [r3, #20]
 80164f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80164fc:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 8016500:	68b8      	ldr	r0, [r7, #8]
 8016502:	f7fc f914 	bl	801272e <arm_absmax_q15>

    if ((m != 0) && (m != 0x7FFF))
 8016506:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 801650a:	2b00      	cmp	r3, #0
 801650c:	d025      	beq.n	801655a <arm_mfcc_q15+0x82>
 801650e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8016512:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8016516:	4293      	cmp	r3, r2
 8016518:	d01f      	beq.n	801655a <arm_mfcc_q15+0x82>
    {
       q15_t quotient;
       int16_t shift;

       status = arm_divide_q15(0x7FFF,m,&quotient,&shift);
 801651a:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	@ 0x2e
 801651e:	f107 0314 	add.w	r3, r7, #20
 8016522:	f107 0216 	add.w	r2, r7, #22
 8016526:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 801652a:	f7fb f80a 	bl	8011542 <arm_divide_q15>
 801652e:	4603      	mov	r3, r0
 8016530:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
       if (status != ARM_MATH_SUCCESS)
 8016534:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8016538:	2b00      	cmp	r3, #0
 801653a:	d002      	beq.n	8016542 <arm_mfcc_q15+0x6a>
       {
          return(status);
 801653c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8016540:	e0e8      	b.n	8016714 <arm_mfcc_q15+0x23c>
       }
 
       arm_scale_q15(pSrc,quotient,shift,pSrc,S->fftLen);
 8016542:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8016546:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801654a:	b25a      	sxtb	r2, r3
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	695b      	ldr	r3, [r3, #20]
 8016550:	9300      	str	r3, [sp, #0]
 8016552:	68bb      	ldr	r3, [r7, #8]
 8016554:	68b8      	ldr	r0, [r7, #8]
 8016556:	f7fa fe31 	bl	80111bc <arm_scale_q15>
    }


    // q15
    arm_mult_q15(pSrc,S->windowCoefs, pSrc, S->fftLen);
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	6899      	ldr	r1, [r3, #8]
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	695b      	ldr	r3, [r3, #20]
 8016562:	68ba      	ldr	r2, [r7, #8]
 8016564:	68b8      	ldr	r0, [r7, #8]
 8016566:	f7fa fdd1 	bl	801110c <arm_mult_q15>


    /* Compute spectrum magnitude 
    */
    fftShift = 31 - __CLZ(S->fftLen);
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	695b      	ldr	r3, [r3, #20]
 801656e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8016570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016572:	2b00      	cmp	r3, #0
 8016574:	d101      	bne.n	801657a <arm_mfcc_q15+0xa2>
    return 32U;
 8016576:	2320      	movs	r3, #32
 8016578:	e003      	b.n	8016582 <arm_mfcc_q15+0xaa>
  return __builtin_clz(value);
 801657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801657c:	fab3 f383 	clz	r3, r3
 8016580:	b2db      	uxtb	r3, r3
 8016582:	f1c3 031f 	rsb	r3, r3, #31
 8016586:	653b      	str	r3, [r7, #80]	@ 0x50
      pTmp2[2*i+1] = 0;
    }
    arm_cfft_q15(&(S->cfft),pTmp2,0,1);
#else
    /* Default RFFT based implementation */
    arm_rfft_q15(&(S->rfft),pSrc,pTmp2);
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	3320      	adds	r3, #32
 801658c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801658e:	68b9      	ldr	r1, [r7, #8]
 8016590:	4618      	mov	r0, r3
 8016592:	f000 fae4 	bl	8016b5e <arm_rfft_q15>
#endif
#endif
    filterLimit = 1 + (S->fftLen >> 1);
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	695b      	ldr	r3, [r3, #20]
 801659a:	085b      	lsrs	r3, r3, #1
 801659c:	3301      	adds	r3, #1
 801659e:	64bb      	str	r3, [r7, #72]	@ 0x48


    // q15 - fftShift
    arm_cmplx_mag_q15(pTmp2,pSrc,filterLimit);
 80165a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80165a2:	68b9      	ldr	r1, [r7, #8]
 80165a4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80165a6:	f7fa ff92 	bl	80114ce <arm_cmplx_mag_q15>
    // q14 - fftShift

    /* Apply MEL filters */
    coefsPos = 0;
 80165aa:	2300      	movs	r3, #0
 80165ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    for(i=0; i<S->nbMelFilters; i++)
 80165ae:	2300      	movs	r3, #0
 80165b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80165b2:	e046      	b.n	8016642 <arm_mfcc_q15+0x16a>
    {
      arm_dot_prod_q15(pSrc+S->filterPos[i],
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	68da      	ldr	r2, [r3, #12]
 80165b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80165ba:	009b      	lsls	r3, r3, #2
 80165bc:	4413      	add	r3, r2
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	005b      	lsls	r3, r3, #1
 80165c2:	68ba      	ldr	r2, [r7, #8]
 80165c4:	18d0      	adds	r0, r2, r3
        &(S->filterCoefs[coefsPos]),
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	685a      	ldr	r2, [r3, #4]
 80165ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80165cc:	005b      	lsls	r3, r3, #1
 80165ce:	18d1      	adds	r1, r2, r3
        S->filterLengths[i],
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	691a      	ldr	r2, [r3, #16]
 80165d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80165d6:	009b      	lsls	r3, r3, #2
 80165d8:	4413      	add	r3, r2
      arm_dot_prod_q15(pSrc+S->filterPos[i],
 80165da:	681a      	ldr	r2, [r3, #0]
 80165dc:	f107 0320 	add.w	r3, r7, #32
 80165e0:	f7fa fd5a 	bl	8011098 <arm_dot_prod_q15>
        &result);

      coefsPos += S->filterLengths[i];
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	691a      	ldr	r2, [r3, #16]
 80165e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80165ea:	009b      	lsls	r3, r3, #2
 80165ec:	4413      	add	r3, r2
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80165f2:	4413      	add	r3, r2
 80165f4:	65bb      	str	r3, [r7, #88]	@ 0x58

      // q34.29 - fftShift
      result += MICRO_Q15;
 80165f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80165fa:	f240 2119 	movw	r1, #537	@ 0x219
 80165fe:	1854      	adds	r4, r2, r1
 8016600:	f143 0500 	adc.w	r5, r3, #0
 8016604:	e9c7 4508 	strd	r4, r5, [r7, #32]
      result >>= SHIFT_MELFILTER_SATURATION_Q15;
 8016608:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801660c:	f04f 0200 	mov.w	r2, #0
 8016610:	f04f 0300 	mov.w	r3, #0
 8016614:	0a82      	lsrs	r2, r0, #10
 8016616:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 801661a:	128b      	asrs	r3, r1, #10
 801661c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      // q34.29 - fftShift - satShift
      pTmp[i] = __SSAT(result,31) ;
 8016620:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016624:	4613      	mov	r3, r2
 8016626:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801662a:	f303 031e 	ssat	r3, #31, r3
 801662e:	637b      	str	r3, [r7, #52]	@ 0x34
 8016630:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016634:	009b      	lsls	r3, r3, #2
 8016636:	6839      	ldr	r1, [r7, #0]
 8016638:	440b      	add	r3, r1
 801663a:	601a      	str	r2, [r3, #0]
    for(i=0; i<S->nbMelFilters; i++)
 801663c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801663e:	3301      	adds	r3, #1
 8016640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	699b      	ldr	r3, [r3, #24]
 8016646:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8016648:	429a      	cmp	r2, r3
 801664a:	d3b3      	bcc.n	80165b4 <arm_mfcc_q15+0xdc>

    }

    if ((m != 0) && (m != 0x7FFF))
 801664c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8016650:	2b00      	cmp	r3, #0
 8016652:	d010      	beq.n	8016676 <arm_mfcc_q15+0x19e>
 8016654:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8016658:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801665c:	4293      	cmp	r3, r2
 801665e:	d00a      	beq.n	8016676 <arm_mfcc_q15+0x19e>
    {
      arm_scale_q31(pTmp,m<<16,0,pTmp,S->nbMelFilters);
 8016660:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8016664:	0419      	lsls	r1, r3, #16
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	699b      	ldr	r3, [r3, #24]
 801666a:	9300      	str	r3, [sp, #0]
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	2200      	movs	r2, #0
 8016670:	6838      	ldr	r0, [r7, #0]
 8016672:	f7fa fdda 	bl	801122a <arm_scale_q31>
    }
   
    // q34.29 - fftShift - satShift
    /* Compute the log */
    arm_vlog_q31(pTmp,pTmp,S->nbMelFilters);
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	699b      	ldr	r3, [r3, #24]
 801667a:	461a      	mov	r2, r3
 801667c:	6839      	ldr	r1, [r7, #0]
 801667e:	6838      	ldr	r0, [r7, #0]
 8016680:	f7fb faee 	bl	8011c60 <arm_vlog_q31>


    // q5.26
   
    logExponent = fftShift + 2 + SHIFT_MELFILTER_SATURATION_Q15;
 8016684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016686:	330c      	adds	r3, #12
 8016688:	647b      	str	r3, [r7, #68]	@ 0x44
    logExponent = logExponent * LOG2TOLOG_Q15;
 801668a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801668c:	4a23      	ldr	r2, [pc, #140]	@ (801671c <arm_mfcc_q15+0x244>)
 801668e:	fb02 f303 	mul.w	r3, r2, r3
 8016692:	647b      	str	r3, [r7, #68]	@ 0x44


    // q8.26
    arm_offset_q31(pTmp,logExponent,pTmp,S->nbMelFilters);
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	699b      	ldr	r3, [r3, #24]
 8016698:	683a      	ldr	r2, [r7, #0]
 801669a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801669c:	6838      	ldr	r0, [r7, #0]
 801669e:	f7fa fd65 	bl	801116c <arm_offset_q31>
    arm_shift_q31(pTmp,-19,pTmp,S->nbMelFilters);
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	699b      	ldr	r3, [r3, #24]
 80166a6:	683a      	ldr	r2, [r7, #0]
 80166a8:	f06f 0112 	mvn.w	r1, #18
 80166ac:	6838      	ldr	r0, [r7, #0]
 80166ae:	f7fa fea5 	bl	80113fc <arm_shift_q31>
    for(i=0; i<S->nbMelFilters; i++)
 80166b2:	2300      	movs	r3, #0
 80166b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80166b6:	e014      	b.n	80166e2 <arm_mfcc_q15+0x20a>
    { 
      pSrc[i] = __SSAT((q15_t)pTmp[i],16);
 80166b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80166ba:	009b      	lsls	r3, r3, #2
 80166bc:	683a      	ldr	r2, [r7, #0]
 80166be:	4413      	add	r3, r2
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	b21b      	sxth	r3, r3
 80166c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80166c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80166c8:	f303 030f 	ssat	r3, #16, r3
 80166cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80166ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80166d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80166d2:	005b      	lsls	r3, r3, #1
 80166d4:	68ba      	ldr	r2, [r7, #8]
 80166d6:	4413      	add	r3, r2
 80166d8:	b20a      	sxth	r2, r1
 80166da:	801a      	strh	r2, [r3, #0]
    for(i=0; i<S->nbMelFilters; i++)
 80166dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80166de:	3301      	adds	r3, #1
 80166e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	699b      	ldr	r3, [r3, #24]
 80166e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80166e8:	429a      	cmp	r2, r3
 80166ea:	d3e5      	bcc.n	80166b8 <arm_mfcc_q15+0x1e0>
    }

    // q8.7

    pDctMat.numRows=S->nbDctOutputs;
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	69db      	ldr	r3, [r3, #28]
 80166f0:	b29b      	uxth	r3, r3
 80166f2:	833b      	strh	r3, [r7, #24]
    pDctMat.numCols=S->nbMelFilters;
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	699b      	ldr	r3, [r3, #24]
 80166f8:	b29b      	uxth	r3, r3
 80166fa:	837b      	strh	r3, [r7, #26]
    pDctMat.pData=(q15_t*)S->dctCoefs;
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	61fb      	str	r3, [r7, #28]

    arm_mat_vec_mult_q15(&pDctMat, pSrc, pDst);
 8016702:	f107 0318 	add.w	r3, r7, #24
 8016706:	687a      	ldr	r2, [r7, #4]
 8016708:	68b9      	ldr	r1, [r7, #8]
 801670a:	4618      	mov	r0, r3
 801670c:	f7fb fac9 	bl	8011ca2 <arm_mat_vec_mult_q15>

    return(status);
 8016710:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8016714:	4618      	mov	r0, r3
 8016716:	3760      	adds	r7, #96	@ 0x60
 8016718:	46bd      	mov	sp, r7
 801671a:	bdb0      	pop	{r4, r5, r7, pc}
 801671c:	02c5c860 	.word	0x02c5c860

08016720 <arm_rfft_init_8192_q15>:
  @par
                   This function also initializes Twiddle factor table.

 */

RFFTINIT_Q15(8192,4096,1)
 8016720:	b480      	push	{r7}
 8016722:	b085      	sub	sp, #20
 8016724:	af00      	add	r7, sp, #0
 8016726:	60f8      	str	r0, [r7, #12]
 8016728:	60b9      	str	r1, [r7, #8]
 801672a:	607a      	str	r2, [r7, #4]
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8016732:	601a      	str	r2, [r3, #0]
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	4a0d      	ldr	r2, [pc, #52]	@ (801676c <arm_rfft_init_8192_q15+0x4c>)
 8016738:	60da      	str	r2, [r3, #12]
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	4a0c      	ldr	r2, [pc, #48]	@ (8016770 <arm_rfft_init_8192_q15+0x50>)
 801673e:	611a      	str	r2, [r3, #16]
 8016740:	68bb      	ldr	r3, [r7, #8]
 8016742:	b2da      	uxtb	r2, r3
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	711a      	strb	r2, [r3, #4]
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	b2da      	uxtb	r2, r3
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	715a      	strb	r2, [r3, #5]
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	2201      	movs	r2, #1
 8016754:	609a      	str	r2, [r3, #8]
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	4a06      	ldr	r2, [pc, #24]	@ (8016774 <arm_rfft_init_8192_q15+0x54>)
 801675a:	615a      	str	r2, [r3, #20]
 801675c:	2300      	movs	r3, #0
 801675e:	4618      	mov	r0, r3
 8016760:	3714      	adds	r7, #20
 8016762:	46bd      	mov	sp, r7
 8016764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016768:	4770      	bx	lr
 801676a:	bf00      	nop
 801676c:	08029e68 	.word	0x08029e68
 8016770:	0802de68 	.word	0x0802de68
 8016774:	08031f68 	.word	0x08031f68

08016778 <arm_rfft_init_4096_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(4096,2048,2)
 8016778:	b480      	push	{r7}
 801677a:	b085      	sub	sp, #20
 801677c:	af00      	add	r7, sp, #0
 801677e:	60f8      	str	r0, [r7, #12]
 8016780:	60b9      	str	r1, [r7, #8]
 8016782:	607a      	str	r2, [r7, #4]
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801678a:	601a      	str	r2, [r3, #0]
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	4a0d      	ldr	r2, [pc, #52]	@ (80167c4 <arm_rfft_init_4096_q15+0x4c>)
 8016790:	60da      	str	r2, [r3, #12]
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	4a0c      	ldr	r2, [pc, #48]	@ (80167c8 <arm_rfft_init_4096_q15+0x50>)
 8016796:	611a      	str	r2, [r3, #16]
 8016798:	68bb      	ldr	r3, [r7, #8]
 801679a:	b2da      	uxtb	r2, r3
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	711a      	strb	r2, [r3, #4]
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	b2da      	uxtb	r2, r3
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	715a      	strb	r2, [r3, #5]
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	2202      	movs	r2, #2
 80167ac:	609a      	str	r2, [r3, #8]
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	4a06      	ldr	r2, [pc, #24]	@ (80167cc <arm_rfft_init_4096_q15+0x54>)
 80167b2:	615a      	str	r2, [r3, #20]
 80167b4:	2300      	movs	r3, #0
 80167b6:	4618      	mov	r0, r3
 80167b8:	3714      	adds	r7, #20
 80167ba:	46bd      	mov	sp, r7
 80167bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c0:	4770      	bx	lr
 80167c2:	bf00      	nop
 80167c4:	08029e68 	.word	0x08029e68
 80167c8:	0802de68 	.word	0x0802de68
 80167cc:	08031f58 	.word	0x08031f58

080167d0 <arm_rfft_init_2048_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(2048,1024,4)
 80167d0:	b480      	push	{r7}
 80167d2:	b085      	sub	sp, #20
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	60f8      	str	r0, [r7, #12]
 80167d8:	60b9      	str	r1, [r7, #8]
 80167da:	607a      	str	r2, [r7, #4]
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80167e2:	601a      	str	r2, [r3, #0]
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	4a0d      	ldr	r2, [pc, #52]	@ (801681c <arm_rfft_init_2048_q15+0x4c>)
 80167e8:	60da      	str	r2, [r3, #12]
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	4a0c      	ldr	r2, [pc, #48]	@ (8016820 <arm_rfft_init_2048_q15+0x50>)
 80167ee:	611a      	str	r2, [r3, #16]
 80167f0:	68bb      	ldr	r3, [r7, #8]
 80167f2:	b2da      	uxtb	r2, r3
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	711a      	strb	r2, [r3, #4]
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	b2da      	uxtb	r2, r3
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	715a      	strb	r2, [r3, #5]
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	2204      	movs	r2, #4
 8016804:	609a      	str	r2, [r3, #8]
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	4a06      	ldr	r2, [pc, #24]	@ (8016824 <arm_rfft_init_2048_q15+0x54>)
 801680a:	615a      	str	r2, [r3, #20]
 801680c:	2300      	movs	r3, #0
 801680e:	4618      	mov	r0, r3
 8016810:	3714      	adds	r7, #20
 8016812:	46bd      	mov	sp, r7
 8016814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016818:	4770      	bx	lr
 801681a:	bf00      	nop
 801681c:	08029e68 	.word	0x08029e68
 8016820:	0802de68 	.word	0x0802de68
 8016824:	08031f48 	.word	0x08031f48

08016828 <arm_rfft_init_1024_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(1024,512,8)
 8016828:	b480      	push	{r7}
 801682a:	b085      	sub	sp, #20
 801682c:	af00      	add	r7, sp, #0
 801682e:	60f8      	str	r0, [r7, #12]
 8016830:	60b9      	str	r1, [r7, #8]
 8016832:	607a      	str	r2, [r7, #4]
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801683a:	601a      	str	r2, [r3, #0]
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	4a0d      	ldr	r2, [pc, #52]	@ (8016874 <arm_rfft_init_1024_q15+0x4c>)
 8016840:	60da      	str	r2, [r3, #12]
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	4a0c      	ldr	r2, [pc, #48]	@ (8016878 <arm_rfft_init_1024_q15+0x50>)
 8016846:	611a      	str	r2, [r3, #16]
 8016848:	68bb      	ldr	r3, [r7, #8]
 801684a:	b2da      	uxtb	r2, r3
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	711a      	strb	r2, [r3, #4]
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	b2da      	uxtb	r2, r3
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	715a      	strb	r2, [r3, #5]
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	2208      	movs	r2, #8
 801685c:	609a      	str	r2, [r3, #8]
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	4a06      	ldr	r2, [pc, #24]	@ (801687c <arm_rfft_init_1024_q15+0x54>)
 8016862:	615a      	str	r2, [r3, #20]
 8016864:	2300      	movs	r3, #0
 8016866:	4618      	mov	r0, r3
 8016868:	3714      	adds	r7, #20
 801686a:	46bd      	mov	sp, r7
 801686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016870:	4770      	bx	lr
 8016872:	bf00      	nop
 8016874:	08029e68 	.word	0x08029e68
 8016878:	0802de68 	.word	0x0802de68
 801687c:	08031f38 	.word	0x08031f38

08016880 <arm_rfft_init_512_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(512,256,16)
 8016880:	b480      	push	{r7}
 8016882:	b085      	sub	sp, #20
 8016884:	af00      	add	r7, sp, #0
 8016886:	60f8      	str	r0, [r7, #12]
 8016888:	60b9      	str	r1, [r7, #8]
 801688a:	607a      	str	r2, [r7, #4]
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016892:	601a      	str	r2, [r3, #0]
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	4a0d      	ldr	r2, [pc, #52]	@ (80168cc <arm_rfft_init_512_q15+0x4c>)
 8016898:	60da      	str	r2, [r3, #12]
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	4a0c      	ldr	r2, [pc, #48]	@ (80168d0 <arm_rfft_init_512_q15+0x50>)
 801689e:	611a      	str	r2, [r3, #16]
 80168a0:	68bb      	ldr	r3, [r7, #8]
 80168a2:	b2da      	uxtb	r2, r3
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	711a      	strb	r2, [r3, #4]
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	b2da      	uxtb	r2, r3
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	715a      	strb	r2, [r3, #5]
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	2210      	movs	r2, #16
 80168b4:	609a      	str	r2, [r3, #8]
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	4a06      	ldr	r2, [pc, #24]	@ (80168d4 <arm_rfft_init_512_q15+0x54>)
 80168ba:	615a      	str	r2, [r3, #20]
 80168bc:	2300      	movs	r3, #0
 80168be:	4618      	mov	r0, r3
 80168c0:	3714      	adds	r7, #20
 80168c2:	46bd      	mov	sp, r7
 80168c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c8:	4770      	bx	lr
 80168ca:	bf00      	nop
 80168cc:	08029e68 	.word	0x08029e68
 80168d0:	0802de68 	.word	0x0802de68
 80168d4:	08031f28 	.word	0x08031f28

080168d8 <arm_rfft_init_256_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(256,128,32)
 80168d8:	b480      	push	{r7}
 80168da:	b085      	sub	sp, #20
 80168dc:	af00      	add	r7, sp, #0
 80168de:	60f8      	str	r0, [r7, #12]
 80168e0:	60b9      	str	r1, [r7, #8]
 80168e2:	607a      	str	r2, [r7, #4]
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80168ea:	601a      	str	r2, [r3, #0]
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	4a0d      	ldr	r2, [pc, #52]	@ (8016924 <arm_rfft_init_256_q15+0x4c>)
 80168f0:	60da      	str	r2, [r3, #12]
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	4a0c      	ldr	r2, [pc, #48]	@ (8016928 <arm_rfft_init_256_q15+0x50>)
 80168f6:	611a      	str	r2, [r3, #16]
 80168f8:	68bb      	ldr	r3, [r7, #8]
 80168fa:	b2da      	uxtb	r2, r3
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	711a      	strb	r2, [r3, #4]
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	b2da      	uxtb	r2, r3
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	715a      	strb	r2, [r3, #5]
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	2220      	movs	r2, #32
 801690c:	609a      	str	r2, [r3, #8]
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	4a06      	ldr	r2, [pc, #24]	@ (801692c <arm_rfft_init_256_q15+0x54>)
 8016912:	615a      	str	r2, [r3, #20]
 8016914:	2300      	movs	r3, #0
 8016916:	4618      	mov	r0, r3
 8016918:	3714      	adds	r7, #20
 801691a:	46bd      	mov	sp, r7
 801691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016920:	4770      	bx	lr
 8016922:	bf00      	nop
 8016924:	08029e68 	.word	0x08029e68
 8016928:	0802de68 	.word	0x0802de68
 801692c:	08031f18 	.word	0x08031f18

08016930 <arm_rfft_init_128_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(128,64,64)
 8016930:	b480      	push	{r7}
 8016932:	b085      	sub	sp, #20
 8016934:	af00      	add	r7, sp, #0
 8016936:	60f8      	str	r0, [r7, #12]
 8016938:	60b9      	str	r1, [r7, #8]
 801693a:	607a      	str	r2, [r7, #4]
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	2280      	movs	r2, #128	@ 0x80
 8016940:	601a      	str	r2, [r3, #0]
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	4a0c      	ldr	r2, [pc, #48]	@ (8016978 <arm_rfft_init_128_q15+0x48>)
 8016946:	60da      	str	r2, [r3, #12]
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	4a0c      	ldr	r2, [pc, #48]	@ (801697c <arm_rfft_init_128_q15+0x4c>)
 801694c:	611a      	str	r2, [r3, #16]
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	b2da      	uxtb	r2, r3
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	711a      	strb	r2, [r3, #4]
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	b2da      	uxtb	r2, r3
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	715a      	strb	r2, [r3, #5]
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	2240      	movs	r2, #64	@ 0x40
 8016962:	609a      	str	r2, [r3, #8]
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	4a06      	ldr	r2, [pc, #24]	@ (8016980 <arm_rfft_init_128_q15+0x50>)
 8016968:	615a      	str	r2, [r3, #20]
 801696a:	2300      	movs	r3, #0
 801696c:	4618      	mov	r0, r3
 801696e:	3714      	adds	r7, #20
 8016970:	46bd      	mov	sp, r7
 8016972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016976:	4770      	bx	lr
 8016978:	08029e68 	.word	0x08029e68
 801697c:	0802de68 	.word	0x0802de68
 8016980:	08031f08 	.word	0x08031f08

08016984 <arm_rfft_init_64_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(64,32,128)
 8016984:	b480      	push	{r7}
 8016986:	b085      	sub	sp, #20
 8016988:	af00      	add	r7, sp, #0
 801698a:	60f8      	str	r0, [r7, #12]
 801698c:	60b9      	str	r1, [r7, #8]
 801698e:	607a      	str	r2, [r7, #4]
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	2240      	movs	r2, #64	@ 0x40
 8016994:	601a      	str	r2, [r3, #0]
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	4a0c      	ldr	r2, [pc, #48]	@ (80169cc <arm_rfft_init_64_q15+0x48>)
 801699a:	60da      	str	r2, [r3, #12]
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	4a0c      	ldr	r2, [pc, #48]	@ (80169d0 <arm_rfft_init_64_q15+0x4c>)
 80169a0:	611a      	str	r2, [r3, #16]
 80169a2:	68bb      	ldr	r3, [r7, #8]
 80169a4:	b2da      	uxtb	r2, r3
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	711a      	strb	r2, [r3, #4]
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	b2da      	uxtb	r2, r3
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	715a      	strb	r2, [r3, #5]
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	2280      	movs	r2, #128	@ 0x80
 80169b6:	609a      	str	r2, [r3, #8]
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	4a06      	ldr	r2, [pc, #24]	@ (80169d4 <arm_rfft_init_64_q15+0x50>)
 80169bc:	615a      	str	r2, [r3, #20]
 80169be:	2300      	movs	r3, #0
 80169c0:	4618      	mov	r0, r3
 80169c2:	3714      	adds	r7, #20
 80169c4:	46bd      	mov	sp, r7
 80169c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ca:	4770      	bx	lr
 80169cc:	08029e68 	.word	0x08029e68
 80169d0:	0802de68 	.word	0x0802de68
 80169d4:	08031ef8 	.word	0x08031ef8

080169d8 <arm_rfft_init_32_q15>:
                   The parameter <code>bitReverseFlag</code> controls whether output is in normal order or bit reversed order.
                   Set(=1) bitReverseFlag for output to be in normal order otherwise output is in bit reversed order.
  @par
                   This function also initializes Twiddle factor table.
 */
RFFTINIT_Q15(32,16,256)
 80169d8:	b480      	push	{r7}
 80169da:	b085      	sub	sp, #20
 80169dc:	af00      	add	r7, sp, #0
 80169de:	60f8      	str	r0, [r7, #12]
 80169e0:	60b9      	str	r1, [r7, #8]
 80169e2:	607a      	str	r2, [r7, #4]
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	2220      	movs	r2, #32
 80169e8:	601a      	str	r2, [r3, #0]
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	4a0d      	ldr	r2, [pc, #52]	@ (8016a24 <arm_rfft_init_32_q15+0x4c>)
 80169ee:	60da      	str	r2, [r3, #12]
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	4a0d      	ldr	r2, [pc, #52]	@ (8016a28 <arm_rfft_init_32_q15+0x50>)
 80169f4:	611a      	str	r2, [r3, #16]
 80169f6:	68bb      	ldr	r3, [r7, #8]
 80169f8:	b2da      	uxtb	r2, r3
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	711a      	strb	r2, [r3, #4]
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	b2da      	uxtb	r2, r3
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	715a      	strb	r2, [r3, #5]
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016a0c:	609a      	str	r2, [r3, #8]
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	4a06      	ldr	r2, [pc, #24]	@ (8016a2c <arm_rfft_init_32_q15+0x54>)
 8016a12:	615a      	str	r2, [r3, #20]
 8016a14:	2300      	movs	r3, #0
 8016a16:	4618      	mov	r0, r3
 8016a18:	3714      	adds	r7, #20
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a20:	4770      	bx	lr
 8016a22:	bf00      	nop
 8016a24:	08029e68 	.word	0x08029e68
 8016a28:	0802de68 	.word	0x0802de68
 8016a2c:	08031ee8 	.word	0x08031ee8

08016a30 <arm_rfft_init_q15>:
ARM_DSP_ATTRIBUTE arm_status arm_rfft_init_q15(
    arm_rfft_instance_q15 * S,
    uint32_t fftLenReal,
    uint32_t ifftFlagR,
    uint32_t bitReverseFlag)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b086      	sub	sp, #24
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	60f8      	str	r0, [r7, #12]
 8016a38:	60b9      	str	r1, [r7, #8]
 8016a3a:	607a      	str	r2, [r7, #4]
 8016a3c:	603b      	str	r3, [r7, #0]
     /*  Initialise the default arm status */
    arm_status status = ARM_MATH_ARGUMENT_ERROR;
 8016a3e:	23ff      	movs	r3, #255	@ 0xff
 8016a40:	75fb      	strb	r3, [r7, #23]

    /*  Initialization of coef modifier depending on the FFT length */
    switch (fftLenReal)
 8016a42:	68bb      	ldr	r3, [r7, #8]
 8016a44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016a48:	d038      	beq.n	8016abc <arm_rfft_init_q15+0x8c>
 8016a4a:	68bb      	ldr	r3, [r7, #8]
 8016a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016a50:	d87c      	bhi.n	8016b4c <arm_rfft_init_q15+0x11c>
 8016a52:	68bb      	ldr	r3, [r7, #8]
 8016a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016a58:	d038      	beq.n	8016acc <arm_rfft_init_q15+0x9c>
 8016a5a:	68bb      	ldr	r3, [r7, #8]
 8016a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016a60:	d874      	bhi.n	8016b4c <arm_rfft_init_q15+0x11c>
 8016a62:	68bb      	ldr	r3, [r7, #8]
 8016a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016a68:	d038      	beq.n	8016adc <arm_rfft_init_q15+0xac>
 8016a6a:	68bb      	ldr	r3, [r7, #8]
 8016a6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016a70:	d86c      	bhi.n	8016b4c <arm_rfft_init_q15+0x11c>
 8016a72:	68bb      	ldr	r3, [r7, #8]
 8016a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016a78:	d038      	beq.n	8016aec <arm_rfft_init_q15+0xbc>
 8016a7a:	68bb      	ldr	r3, [r7, #8]
 8016a7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016a80:	d864      	bhi.n	8016b4c <arm_rfft_init_q15+0x11c>
 8016a82:	68bb      	ldr	r3, [r7, #8]
 8016a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016a88:	d038      	beq.n	8016afc <arm_rfft_init_q15+0xcc>
 8016a8a:	68bb      	ldr	r3, [r7, #8]
 8016a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016a90:	d85c      	bhi.n	8016b4c <arm_rfft_init_q15+0x11c>
 8016a92:	68bb      	ldr	r3, [r7, #8]
 8016a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016a98:	d038      	beq.n	8016b0c <arm_rfft_init_q15+0xdc>
 8016a9a:	68bb      	ldr	r3, [r7, #8]
 8016a9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016aa0:	d854      	bhi.n	8016b4c <arm_rfft_init_q15+0x11c>
 8016aa2:	68bb      	ldr	r3, [r7, #8]
 8016aa4:	2b80      	cmp	r3, #128	@ 0x80
 8016aa6:	d039      	beq.n	8016b1c <arm_rfft_init_q15+0xec>
 8016aa8:	68bb      	ldr	r3, [r7, #8]
 8016aaa:	2b80      	cmp	r3, #128	@ 0x80
 8016aac:	d84e      	bhi.n	8016b4c <arm_rfft_init_q15+0x11c>
 8016aae:	68bb      	ldr	r3, [r7, #8]
 8016ab0:	2b20      	cmp	r3, #32
 8016ab2:	d043      	beq.n	8016b3c <arm_rfft_init_q15+0x10c>
 8016ab4:	68bb      	ldr	r3, [r7, #8]
 8016ab6:	2b40      	cmp	r3, #64	@ 0x40
 8016ab8:	d038      	beq.n	8016b2c <arm_rfft_init_q15+0xfc>
 8016aba:	e047      	b.n	8016b4c <arm_rfft_init_q15+0x11c>
    {
    case 8192U:
        status = arm_rfft_init_8192_q15( S,ifftFlagR,bitReverseFlag );
 8016abc:	683a      	ldr	r2, [r7, #0]
 8016abe:	6879      	ldr	r1, [r7, #4]
 8016ac0:	68f8      	ldr	r0, [r7, #12]
 8016ac2:	f7ff fe2d 	bl	8016720 <arm_rfft_init_8192_q15>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	75fb      	strb	r3, [r7, #23]
        break;
 8016aca:	e042      	b.n	8016b52 <arm_rfft_init_q15+0x122>
    case 4096U:
        status = arm_rfft_init_4096_q15( S,ifftFlagR,bitReverseFlag );
 8016acc:	683a      	ldr	r2, [r7, #0]
 8016ace:	6879      	ldr	r1, [r7, #4]
 8016ad0:	68f8      	ldr	r0, [r7, #12]
 8016ad2:	f7ff fe51 	bl	8016778 <arm_rfft_init_4096_q15>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	75fb      	strb	r3, [r7, #23]
        break;
 8016ada:	e03a      	b.n	8016b52 <arm_rfft_init_q15+0x122>
    case 2048U:
        status = arm_rfft_init_2048_q15( S,ifftFlagR,bitReverseFlag );
 8016adc:	683a      	ldr	r2, [r7, #0]
 8016ade:	6879      	ldr	r1, [r7, #4]
 8016ae0:	68f8      	ldr	r0, [r7, #12]
 8016ae2:	f7ff fe75 	bl	80167d0 <arm_rfft_init_2048_q15>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	75fb      	strb	r3, [r7, #23]
        break;
 8016aea:	e032      	b.n	8016b52 <arm_rfft_init_q15+0x122>
    case 1024U:
        status = arm_rfft_init_1024_q15( S,ifftFlagR,bitReverseFlag );
 8016aec:	683a      	ldr	r2, [r7, #0]
 8016aee:	6879      	ldr	r1, [r7, #4]
 8016af0:	68f8      	ldr	r0, [r7, #12]
 8016af2:	f7ff fe99 	bl	8016828 <arm_rfft_init_1024_q15>
 8016af6:	4603      	mov	r3, r0
 8016af8:	75fb      	strb	r3, [r7, #23]
        break;
 8016afa:	e02a      	b.n	8016b52 <arm_rfft_init_q15+0x122>
    case 512U:
        status = arm_rfft_init_512_q15( S,ifftFlagR,bitReverseFlag );
 8016afc:	683a      	ldr	r2, [r7, #0]
 8016afe:	6879      	ldr	r1, [r7, #4]
 8016b00:	68f8      	ldr	r0, [r7, #12]
 8016b02:	f7ff febd 	bl	8016880 <arm_rfft_init_512_q15>
 8016b06:	4603      	mov	r3, r0
 8016b08:	75fb      	strb	r3, [r7, #23]
        break;
 8016b0a:	e022      	b.n	8016b52 <arm_rfft_init_q15+0x122>
    case 256U:
        status = arm_rfft_init_256_q15( S,ifftFlagR,bitReverseFlag );
 8016b0c:	683a      	ldr	r2, [r7, #0]
 8016b0e:	6879      	ldr	r1, [r7, #4]
 8016b10:	68f8      	ldr	r0, [r7, #12]
 8016b12:	f7ff fee1 	bl	80168d8 <arm_rfft_init_256_q15>
 8016b16:	4603      	mov	r3, r0
 8016b18:	75fb      	strb	r3, [r7, #23]
        break;
 8016b1a:	e01a      	b.n	8016b52 <arm_rfft_init_q15+0x122>
    case 128U:
        status = arm_rfft_init_128_q15( S,ifftFlagR,bitReverseFlag );
 8016b1c:	683a      	ldr	r2, [r7, #0]
 8016b1e:	6879      	ldr	r1, [r7, #4]
 8016b20:	68f8      	ldr	r0, [r7, #12]
 8016b22:	f7ff ff05 	bl	8016930 <arm_rfft_init_128_q15>
 8016b26:	4603      	mov	r3, r0
 8016b28:	75fb      	strb	r3, [r7, #23]
        break;
 8016b2a:	e012      	b.n	8016b52 <arm_rfft_init_q15+0x122>
    case 64U:
        status = arm_rfft_init_64_q15( S,ifftFlagR,bitReverseFlag );
 8016b2c:	683a      	ldr	r2, [r7, #0]
 8016b2e:	6879      	ldr	r1, [r7, #4]
 8016b30:	68f8      	ldr	r0, [r7, #12]
 8016b32:	f7ff ff27 	bl	8016984 <arm_rfft_init_64_q15>
 8016b36:	4603      	mov	r3, r0
 8016b38:	75fb      	strb	r3, [r7, #23]
        break;
 8016b3a:	e00a      	b.n	8016b52 <arm_rfft_init_q15+0x122>
   case 32U:
        status = arm_rfft_init_32_q15( S,ifftFlagR,bitReverseFlag );
 8016b3c:	683a      	ldr	r2, [r7, #0]
 8016b3e:	6879      	ldr	r1, [r7, #4]
 8016b40:	68f8      	ldr	r0, [r7, #12]
 8016b42:	f7ff ff49 	bl	80169d8 <arm_rfft_init_32_q15>
 8016b46:	4603      	mov	r3, r0
 8016b48:	75fb      	strb	r3, [r7, #23]
        break;
 8016b4a:	e002      	b.n	8016b52 <arm_rfft_init_q15+0x122>
    default:
        /*  Reporting argument error if rfftSize is not valid value */
        status = ARM_MATH_ARGUMENT_ERROR;
 8016b4c:	23ff      	movs	r3, #255	@ 0xff
 8016b4e:	75fb      	strb	r3, [r7, #23]
        break;
 8016b50:	bf00      	nop
    }

    /* return the status of RFFT Init function */
    return (status);
 8016b52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016b56:	4618      	mov	r0, r3
 8016b58:	3718      	adds	r7, #24
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}

08016b5e <arm_rfft_q15>:
#else
ARM_DSP_ATTRIBUTE void arm_rfft_q15(
  const arm_rfft_instance_q15 * S,
        q15_t * pSrc,
        q15_t * pDst)
{
 8016b5e:	b580      	push	{r7, lr}
 8016b60:	b088      	sub	sp, #32
 8016b62:	af02      	add	r7, sp, #8
 8016b64:	60f8      	str	r0, [r7, #12]
 8016b66:	60b9      	str	r1, [r7, #8]
 8016b68:	607a      	str	r2, [r7, #4]
#if defined(ARM_MATH_MVEI) && !defined(ARM_MATH_AUTOVECTORIZE)
  const arm_cfft_instance_q15 *S_CFFT = &(S->cfftInst);
#else
  const arm_cfft_instance_q15 *S_CFFT = S->pCfft;
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	695b      	ldr	r3, [r3, #20]
 8016b6e:	617b      	str	r3, [r7, #20]
#endif
        uint32_t L2 = S->fftLenReal >> 1U;
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	085b      	lsrs	r3, r3, #1
 8016b76:	613b      	str	r3, [r7, #16]

  /* Calculation of RIFFT of input */
  if (S->ifftFlagR == 1U)
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	791b      	ldrb	r3, [r3, #4]
 8016b7c:	2b01      	cmp	r3, #1
 8016b7e:	d11d      	bne.n	8016bbc <arm_rfft_q15+0x5e>
  {
     /*  Real IFFT core process */
     arm_split_rifft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	68da      	ldr	r2, [r3, #12]
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	6919      	ldr	r1, [r3, #16]
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	689b      	ldr	r3, [r3, #8]
 8016b8c:	9301      	str	r3, [sp, #4]
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	9300      	str	r3, [sp, #0]
 8016b92:	460b      	mov	r3, r1
 8016b94:	6939      	ldr	r1, [r7, #16]
 8016b96:	68b8      	ldr	r0, [r7, #8]
 8016b98:	f000 f951 	bl	8016e3e <arm_split_rifft_q15>

     /* Complex IFFT process */
     arm_cfft_q15 (S_CFFT, pDst, S->ifftFlagR, S->bitReverseFlagR);
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	791a      	ldrb	r2, [r3, #4]
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	795b      	ldrb	r3, [r3, #5]
 8016ba4:	6879      	ldr	r1, [r7, #4]
 8016ba6:	6978      	ldr	r0, [r7, #20]
 8016ba8:	f7fb ff4e 	bl	8012a48 <arm_cfft_q15>

     arm_shift_q15(pDst, 1, pDst, S->fftLenReal);
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	687a      	ldr	r2, [r7, #4]
 8016bb2:	2101      	movs	r1, #1
 8016bb4:	6878      	ldr	r0, [r7, #4]
 8016bb6:	f7fa fbd7 	bl	8011368 <arm_shift_q15>

     /*  Real FFT core process */
     arm_split_rfft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
  }

}
 8016bba:	e015      	b.n	8016be8 <arm_rfft_q15+0x8a>
     arm_cfft_q15 (S_CFFT, pSrc, S->ifftFlagR, S->bitReverseFlagR);
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	791a      	ldrb	r2, [r3, #4]
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	795b      	ldrb	r3, [r3, #5]
 8016bc4:	68b9      	ldr	r1, [r7, #8]
 8016bc6:	6978      	ldr	r0, [r7, #20]
 8016bc8:	f7fb ff3e 	bl	8012a48 <arm_cfft_q15>
     arm_split_rfft_q15 (pSrc, L2, S->pTwiddleAReal, S->pTwiddleBReal, pDst, S->twidCoefRModifier);
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	68da      	ldr	r2, [r3, #12]
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	6919      	ldr	r1, [r3, #16]
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	689b      	ldr	r3, [r3, #8]
 8016bd8:	9301      	str	r3, [sp, #4]
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	9300      	str	r3, [sp, #0]
 8016bde:	460b      	mov	r3, r1
 8016be0:	6939      	ldr	r1, [r7, #16]
 8016be2:	68b8      	ldr	r0, [r7, #8]
 8016be4:	f000 f804 	bl	8016bf0 <arm_split_rfft_q15>
}
 8016be8:	bf00      	nop
 8016bea:	3718      	adds	r7, #24
 8016bec:	46bd      	mov	sp, r7
 8016bee:	bd80      	pop	{r7, pc}

08016bf0 <arm_split_rfft_q15>:
        uint32_t fftLen,
  const q15_t * pATable,
  const q15_t * pBTable,
        q15_t * pDst,
        uint32_t modifier)
{       
 8016bf0:	b480      	push	{r7}
 8016bf2:	b0ad      	sub	sp, #180	@ 0xb4
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	60f8      	str	r0, [r7, #12]
 8016bf8:	60b9      	str	r1, [r7, #8]
 8016bfa:	607a      	str	r2, [r7, #4]
 8016bfc:	603b      	str	r3, [r7, #0]
#if defined (ARM_MATH_DSP)
        q15_t *pD1, *pD2;
#endif

  /* Init coefficient pointers */
  pCoefA = &pATable[modifier * 2];
 8016bfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016c02:	009b      	lsls	r3, r3, #2
 8016c04:	687a      	ldr	r2, [r7, #4]
 8016c06:	4413      	add	r3, r2
 8016c08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pCoefB = &pBTable[modifier * 2];
 8016c0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016c10:	009b      	lsls	r3, r3, #2
 8016c12:	683a      	ldr	r2, [r7, #0]
 8016c14:	4413      	add	r3, r2
 8016c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

  pSrc1 = &pSrc[2];
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	3304      	adds	r3, #4
 8016c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  pSrc2 = &pSrc[(2U * fftLen) - 2U];
 8016c20:	68ba      	ldr	r2, [r7, #8]
 8016c22:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8016c26:	4413      	add	r3, r2
 8016c28:	009b      	lsls	r3, r3, #2
 8016c2a:	68fa      	ldr	r2, [r7, #12]
 8016c2c:	4413      	add	r3, r2
 8016c2e:	637b      	str	r3, [r7, #52]	@ 0x34

#if defined (ARM_MATH_DSP)

    i = 1U;
 8016c30:	2301      	movs	r3, #1
 8016c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pD1 = pDst + 2;
 8016c36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016c3a:	3304      	adds	r3, #4
 8016c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    pD2 = pDst + (4U * fftLen) - 2;
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	00db      	lsls	r3, r3, #3
 8016c44:	3b04      	subs	r3, #4
 8016c46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8016c4a:	4413      	add	r3, r2
 8016c4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    for (i = fftLen - 1; i > 0; i--)
 8016c50:	68bb      	ldr	r3, [r7, #8]
 8016c52:	3b01      	subs	r3, #1
 8016c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016c58:	e0ba      	b.n	8016dd0 <arm_split_rfft_q15+0x1e0>
         */


#ifndef ARM_MATH_BIG_ENDIAN
        /* pSrc[2 * i] * pATable[2 * i] - pSrc[2 * i + 1] * pATable[2 * i + 1] */
        outR = __SMUSD(read_q15x2 (pSrc1), read_q15x2((q15_t *) pCoefA));
 8016c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  memcpy (&val, pQ15, 4);
 8016c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	633b      	str	r3, [r7, #48]	@ 0x30
  return (val);
 8016c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c66:	461a      	mov	r2, r3
 8016c68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016c6c:	643b      	str	r3, [r7, #64]	@ 0x40
  memcpy (&val, pQ15, 4);
 8016c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return (val);
 8016c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c76:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8016c78:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016c7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016c7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016c7e:	fb43 f302 	smusd	r3, r3, r2
 8016c82:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8016c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        /* -(pSrc[2 * i + 1] * pATable[2 * i + 1] - pSrc[2 * i] * pATable[2 * i]) */
        outR = -(__SMUSD(read_q15x2 (pSrc1), read_q15x2((q15_t *) pCoefA)));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* pSrc[2 * n - 2 * i] * pBTable[2 * i] + pSrc[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
        outR = __SMLAD(read_q15x2 (pSrc2), read_q15x2((q15_t *) pCoefB), outR) >> 16U;
 8016c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016c8c:	653b      	str	r3, [r7, #80]	@ 0x50
  memcpy (&val, pQ15, 4);
 8016c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (val);
 8016c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c96:	4619      	mov	r1, r3
 8016c98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016c9c:	657b      	str	r3, [r7, #84]	@ 0x54
  memcpy (&val, pQ15, 4);
 8016c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8016ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ca6:	461a      	mov	r2, r3
 8016ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016cac:	6679      	str	r1, [r7, #100]	@ 0x64
 8016cae:	663a      	str	r2, [r7, #96]	@ 0x60
 8016cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016cb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016cb4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8016cb6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8016cb8:	fb23 1302 	smlad	r3, r3, r2, r1
 8016cbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return(result);
 8016cbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016cc0:	0c1b      	lsrs	r3, r3, #16
 8016cc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

        /* pIn[2 * n - 2 * i] * pBTable[2 * i + 1] - pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
#ifndef ARM_MATH_BIG_ENDIAN
        outI = __SMUSDX(read_q15x2_da (&pSrc2), read_q15x2((q15_t *) pCoefB));
 8016cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cc8:	3b04      	subs	r3, #4
 8016cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8016ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cce:	3304      	adds	r3, #4
 8016cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
  memcpy (&val, pQ15, 4);
 8016cd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	623b      	str	r3, [r7, #32]
  return (val);
 8016cd8:	6a3b      	ldr	r3, [r7, #32]
 8016cda:	461a      	mov	r2, r3
 8016cdc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016ce0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  memcpy (&val, pQ15, 4);
 8016ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	61fb      	str	r3, [r7, #28]
  return (val);
 8016ce8:	69fb      	ldr	r3, [r7, #28]
 8016cea:	67ba      	str	r2, [r7, #120]	@ 0x78
 8016cec:	677b      	str	r3, [r7, #116]	@ 0x74
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016cee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016cf0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016cf2:	fb43 f312 	smusdx	r3, r3, r2
 8016cf6:	673b      	str	r3, [r7, #112]	@ 0x70
  return(result);
 8016cf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016cfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
#else
        outI = __SMUSDX(read_q15x2 ((q15_t *) pCoefB), read_q15x2_da (&pSrc2));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

        /* (pIn[2 * i + 1] * pATable[2 * i] + pIn[2 * i] * pATable[2 * i + 1] */
        outI = __SMLADX(read_q15x2_ia (&pSrc1), read_q15x2 ((q15_t *) pCoefA), outI);
 8016cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d00:	3304      	adds	r3, #4
 8016d02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016d06:	3b04      	subs	r3, #4
 8016d08:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memcpy (&val, pQ15, 4);
 8016d0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	61bb      	str	r3, [r7, #24]
  return (val);
 8016d10:	69bb      	ldr	r3, [r7, #24]
 8016d12:	4619      	mov	r1, r3
 8016d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016d18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  memcpy (&val, pQ15, 4);
 8016d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	617b      	str	r3, [r7, #20]
  return (val);
 8016d24:	697b      	ldr	r3, [r7, #20]
 8016d26:	461a      	mov	r2, r3
 8016d28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016d2c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8016d30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8016d34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016d38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016d3c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016d40:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8016d44:	fb23 1312 	smladx	r3, r3, r2, r1
 8016d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return(result);
 8016d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016d50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

        /* write output */
        *pD1++ = (q15_t) outR;
 8016d54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d58:	1c9a      	adds	r2, r3, #2
 8016d5a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8016d5e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8016d62:	b212      	sxth	r2, r2
 8016d64:	801a      	strh	r2, [r3, #0]
        *pD1++ = outI >> 16U;
 8016d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016d6a:	1419      	asrs	r1, r3, #16
 8016d6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d70:	1c9a      	adds	r2, r3, #2
 8016d72:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8016d76:	b20a      	sxth	r2, r1
 8016d78:	801a      	strh	r2, [r3, #0]

        /* write complex conjugate output */
        pD2[0] = (q15_t) outR;
 8016d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016d7e:	b21a      	sxth	r2, r3
 8016d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016d84:	801a      	strh	r2, [r3, #0]
        pD2[1] = -(outI >> 16U);
 8016d86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8016d8a:	141b      	asrs	r3, r3, #16
 8016d8c:	b29b      	uxth	r3, r3
 8016d8e:	425b      	negs	r3, r3
 8016d90:	b29a      	uxth	r2, r3
 8016d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016d96:	3302      	adds	r3, #2
 8016d98:	b212      	sxth	r2, r2
 8016d9a:	801a      	strh	r2, [r3, #0]
        pD2 -= 2;
 8016d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016da0:	3b04      	subs	r3, #4
 8016da2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

        /* update coefficient pointer */
        pCoefB = pCoefB + (2U * modifier);
 8016da6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016daa:	009b      	lsls	r3, r3, #2
 8016dac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8016db0:	4413      	add	r3, r2
 8016db2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        pCoefA = pCoefA + (2U * modifier);
 8016db6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8016dba:	009b      	lsls	r3, r3, #2
 8016dbc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8016dc0:	4413      	add	r3, r2
 8016dc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    for (i = fftLen - 1; i > 0; i--)
 8016dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016dca:	3b01      	subs	r3, #1
 8016dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8016dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	f47f af40 	bne.w	8016c5a <arm_split_rfft_q15+0x6a>
    }

    pDst[2U * fftLen]      = (pSrc[0] - pSrc[1]) >> 1U;
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016de0:	461a      	mov	r2, r3
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	3302      	adds	r3, #2
 8016de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dea:	1ad3      	subs	r3, r2, r3
 8016dec:	1059      	asrs	r1, r3, #1
 8016dee:	68bb      	ldr	r3, [r7, #8]
 8016df0:	009b      	lsls	r3, r3, #2
 8016df2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8016df6:	4413      	add	r3, r2
 8016df8:	b20a      	sxth	r2, r1
 8016dfa:	801a      	strh	r2, [r3, #0]
    pDst[2U * fftLen + 1U] = 0;
 8016dfc:	68bb      	ldr	r3, [r7, #8]
 8016dfe:	009b      	lsls	r3, r3, #2
 8016e00:	3302      	adds	r3, #2
 8016e02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8016e06:	4413      	add	r3, r2
 8016e08:	2200      	movs	r2, #0
 8016e0a:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1U;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e12:	461a      	mov	r2, r3
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	3302      	adds	r3, #2
 8016e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e1c:	4413      	add	r3, r2
 8016e1e:	105b      	asrs	r3, r3, #1
 8016e20:	b21a      	sxth	r2, r3
 8016e22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016e26:	801a      	strh	r2, [r3, #0]
    pDst[1] = 0;
 8016e28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016e2c:	3302      	adds	r3, #2
 8016e2e:	2200      	movs	r2, #0
 8016e30:	801a      	strh	r2, [r3, #0]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
    pDst[1] = 0;

#endif /* #if defined (ARM_MATH_DSP) */
}
 8016e32:	bf00      	nop
 8016e34:	37b4      	adds	r7, #180	@ 0xb4
 8016e36:	46bd      	mov	sp, r7
 8016e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e3c:	4770      	bx	lr

08016e3e <arm_split_rifft_q15>:
        uint32_t fftLen,
  const q15_t * pATable,
  const q15_t * pBTable,
        q15_t * pDst,
        uint32_t modifier)
{
 8016e3e:	b480      	push	{r7}
 8016e40:	b0af      	sub	sp, #188	@ 0xbc
 8016e42:	af00      	add	r7, sp, #0
 8016e44:	60f8      	str	r0, [r7, #12]
 8016e46:	60b9      	str	r1, [r7, #8]
 8016e48:	607a      	str	r2, [r7, #4]
 8016e4a:	603b      	str	r3, [r7, #0]
        uint32_t i;                                    /* Loop Counter */
        q31_t outR, outI;                              /* Temporary variables for output */
  const q15_t *pCoefA, *pCoefB;                        /* Temporary pointers for twiddle factors */
        q15_t *pSrc1, *pSrc2;
        q15_t *pDst1 = &pDst[0];
 8016e4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8016e50:	63bb      	str	r3, [r7, #56]	@ 0x38

  pCoefA = &pATable[0];
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pCoefB = &pBTable[0];
 8016e58:	683b      	ldr	r3, [r7, #0]
 8016e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  pSrc1 = &pSrc[0];
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	643b      	str	r3, [r7, #64]	@ 0x40
  pSrc2 = &pSrc[2 * fftLen];
 8016e62:	68bb      	ldr	r3, [r7, #8]
 8016e64:	009b      	lsls	r3, r3, #2
 8016e66:	68fa      	ldr	r2, [r7, #12]
 8016e68:	4413      	add	r3, r2
 8016e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  i = fftLen;
 8016e6c:	68bb      	ldr	r3, [r7, #8]
 8016e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  while (i > 0U)
 8016e72:	e0b5      	b.n	8016fe0 <arm_split_rifft_q15+0x1a2>

#if defined (ARM_MATH_DSP)

#ifndef ARM_MATH_BIG_ENDIAN
      /* pIn[2 * n - 2 * i] * pBTable[2 * i] - pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
      outR = __SMUSD(read_q15x2(pSrc2), read_q15x2((q15_t *) pCoefB));
 8016e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e76:	647b      	str	r3, [r7, #68]	@ 0x44
  memcpy (&val, pQ15, 4);
 8016e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  return (val);
 8016e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e80:	461a      	mov	r2, r3
 8016e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016e86:	64bb      	str	r3, [r7, #72]	@ 0x48
  memcpy (&val, pQ15, 4);
 8016e88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  return (val);
 8016e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e90:	657a      	str	r2, [r7, #84]	@ 0x54
 8016e92:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016e96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016e98:	fb43 f302 	smusd	r3, r3, r2
 8016e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return(result);
 8016e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
      /* -(-pIn[2 * n - 2 * i] * pBTable[2 * i] + pIn[2 * n - 2 * i + 1] * pBTable[2 * i + 1])) */
      outR = -(__SMUSD(read_q15x2(pSrc2), read_q15x2((q15_t *) pCoefB)));
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      /* pIn[2 * i] * pATable[2 * i] + pIn[2 * i + 1] * pATable[2 * i + 1] + pIn[2 * n - 2 * i] * pBTable[2 * i] */
      outR = __SMLAD(read_q15x2(pSrc1), read_q15x2 ((q15_t *) pCoefA), outR) >> 16U;
 8016ea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016ea6:	65bb      	str	r3, [r7, #88]	@ 0x58
  memcpy (&val, pQ15, 4);
 8016ea8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return (val);
 8016eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016eb0:	4619      	mov	r1, r3
 8016eb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8016eb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  memcpy (&val, pQ15, 4);
 8016eb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return (val);
 8016ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ec0:	461a      	mov	r2, r3
 8016ec2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016ec6:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8016ec8:	66ba      	str	r2, [r7, #104]	@ 0x68
 8016eca:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016ece:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016ed0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8016ed2:	fb23 1302 	smlad	r3, r3, r2, r1
 8016ed6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8016ed8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016eda:	0c1b      	lsrs	r3, r3, #16
 8016edc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      /* -pIn[2 * n - 2 * i] * pBTable[2 * i + 1] + pIn[2 * n - 2 * i + 1] * pBTable[2 * i] */
      outI = __SMUADX(read_q15x2_da (&pSrc2), read_q15x2((q15_t *) pCoefB));
 8016ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ee2:	3b04      	subs	r3, #4
 8016ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ee8:	3304      	adds	r3, #4
 8016eea:	673b      	str	r3, [r7, #112]	@ 0x70
  memcpy (&val, pQ15, 4);
 8016eec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  return (val);
 8016ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ef4:	461a      	mov	r2, r3
 8016ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016efa:	677b      	str	r3, [r7, #116]	@ 0x74
  memcpy (&val, pQ15, 4);
 8016efc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	623b      	str	r3, [r7, #32]
  return (val);
 8016f02:	6a3b      	ldr	r3, [r7, #32]
 8016f04:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8016f08:	67fb      	str	r3, [r7, #124]	@ 0x7c
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8016f0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016f0e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8016f10:	fb23 f312 	smuadx	r3, r3, r2
 8016f14:	67bb      	str	r3, [r7, #120]	@ 0x78
  return(result);
 8016f16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016f18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8016f1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8016f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  memcpy (&val, pQ15, 4);
 8016f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	61fb      	str	r3, [r7, #28]
  return (val);
 8016f2c:	69fb      	ldr	r3, [r7, #28]

      /* pIn[2 * i + 1] * pATable[2 * i] - pIn[2 * i] * pATable[2 * i + 1] */
#ifndef ARM_MATH_BIG_ENDIAN
      outI = __SMLSDX(read_q15x2 ((q15_t *) pCoefA), read_q15x2_ia (&pSrc1), -outI);
 8016f2e:	4619      	mov	r1, r3
 8016f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f32:	3304      	adds	r3, #4
 8016f34:	643b      	str	r3, [r7, #64]	@ 0x40
 8016f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f38:	3b04      	subs	r3, #4
 8016f3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  memcpy (&val, pQ15, 4);
 8016f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	61bb      	str	r3, [r7, #24]
  return (val);
 8016f46:	69bb      	ldr	r3, [r7, #24]
 8016f48:	461a      	mov	r2, r3
 8016f4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016f4e:	425b      	negs	r3, r3
 8016f50:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8016f54:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8016f58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  __ASM volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8016f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016f60:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8016f64:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8016f68:	fb43 1312 	smlsdx	r3, r3, r2, r1
 8016f6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  return(result);
 8016f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016f74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      outI = __SMLSDX(read_q15x2_ia (&pSrc1), read_q15x2 ((q15_t *) pCoefA), -outI);
#endif /* #ifndef ARM_MATH_BIG_ENDIAN */

      /* write output */
#ifndef ARM_MATH_BIG_ENDIAN
      write_q15x2_ia (&pDst1, __PKHBT(outR, (outI >> 16U), 16));
 8016f78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016f7c:	b29a      	uxth	r2, r3
 8016f7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016f82:	141b      	asrs	r3, r3, #16
 8016f84:	041b      	lsls	r3, r3, #16
 8016f86:	4313      	orrs	r3, r2
 8016f88:	461a      	mov	r2, r3
 8016f8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8016f92:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
  q31_t val = value;
 8016f96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016f9a:	617b      	str	r3, [r7, #20]
  memcpy (*pQ15, &val, 4);
 8016f9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	697a      	ldr	r2, [r7, #20]
 8016fa4:	601a      	str	r2, [r3, #0]
 *pQ15 += 2;
 8016fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	1d1a      	adds	r2, r3, #4
 8016fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016fb2:	601a      	str	r2, [r3, #0]
}
 8016fb4:	bf00      	nop
      *pDst1++ = (q15_t) (outI >> 16);

#endif /* #if defined (ARM_MATH_DSP) */

      /* update coefficient pointer */
      pCoefB = pCoefB + (2 * modifier);
 8016fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8016fba:	009b      	lsls	r3, r3, #2
 8016fbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8016fc0:	4413      	add	r3, r2
 8016fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      pCoefA = pCoefA + (2 * modifier);
 8016fc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8016fca:	009b      	lsls	r3, r3, #2
 8016fcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8016fd0:	4413      	add	r3, r2
 8016fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

      i--;
 8016fd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8016fda:	3b01      	subs	r3, #1
 8016fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  while (i > 0U)
 8016fe0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	f47f af45 	bne.w	8016e74 <arm_split_rifft_q15+0x36>
  }

}
 8016fea:	bf00      	nop
 8016fec:	bf00      	nop
 8016fee:	37bc      	adds	r7, #188	@ 0xbc
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff6:	4770      	bx	lr

08016ff8 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_fifo_t _cdcd_fifo_cfg;

static bool _prep_out_transaction(uint8_t itf) {
 8016ff8:	b580      	push	{r7, lr}
 8016ffa:	b086      	sub	sp, #24
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	4603      	mov	r3, r0
 8017000:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8017002:	2300      	movs	r3, #0
 8017004:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8017006:	79fb      	ldrb	r3, [r7, #7]
 8017008:	22a8      	movs	r2, #168	@ 0xa8
 801700a:	fb02 f303 	mul.w	r3, r2, r3
 801700e:	4a30      	ldr	r2, [pc, #192]	@ (80170d0 <_prep_out_transaction+0xd8>)
 8017010:	4413      	add	r3, r2
 8017012:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8017014:	79fb      	ldrb	r3, [r7, #7]
 8017016:	01db      	lsls	r3, r3, #7
 8017018:	4a2e      	ldr	r2, [pc, #184]	@ (80170d4 <_prep_out_transaction+0xdc>)
 801701a:	4413      	add	r3, r2
 801701c:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 801701e:	f001 f9b1 	bl	8018384 <tud_mounted>
 8017022:	4603      	mov	r3, r0
 8017024:	2b00      	cmp	r3, #0
 8017026:	d009      	beq.n	801703c <_prep_out_transaction+0x44>
 8017028:	f001 f9be 	bl	80183a8 <tud_suspended>
 801702c:	4603      	mov	r3, r0
 801702e:	f083 0301 	eor.w	r3, r3, #1
 8017032:	b2db      	uxtb	r3, r3
 8017034:	2b00      	cmp	r3, #0
 8017036:	d001      	beq.n	801703c <_prep_out_transaction+0x44>
 8017038:	2301      	movs	r3, #1
 801703a:	e000      	b.n	801703e <_prep_out_transaction+0x46>
 801703c:	2300      	movs	r3, #0
 801703e:	f003 0301 	and.w	r3, r3, #1
 8017042:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8017044:	f083 0301 	eor.w	r3, r3, #1
 8017048:	b2db      	uxtb	r3, r3
 801704a:	2b00      	cmp	r3, #0
 801704c:	d103      	bne.n	8017056 <_prep_out_transaction+0x5e>
 801704e:	693b      	ldr	r3, [r7, #16]
 8017050:	78db      	ldrb	r3, [r3, #3]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d101      	bne.n	801705a <_prep_out_transaction+0x62>
 8017056:	2300      	movs	r3, #0
 8017058:	e035      	b.n	80170c6 <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 801705a:	693b      	ldr	r3, [r7, #16]
 801705c:	3310      	adds	r3, #16
 801705e:	4618      	mov	r0, r3
 8017060:	f001 f88e 	bl	8018180 <tu_fifo_remaining>
 8017064:	4603      	mov	r3, r0
 8017066:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8017068:	897b      	ldrh	r3, [r7, #10]
 801706a:	2b3f      	cmp	r3, #63	@ 0x3f
 801706c:	d801      	bhi.n	8017072 <_prep_out_transaction+0x7a>
 801706e:	2300      	movs	r3, #0
 8017070:	e029      	b.n	80170c6 <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8017072:	693b      	ldr	r3, [r7, #16]
 8017074:	78da      	ldrb	r2, [r3, #3]
 8017076:	7dfb      	ldrb	r3, [r7, #23]
 8017078:	4611      	mov	r1, r2
 801707a:	4618      	mov	r0, r3
 801707c:	f001 fd22 	bl	8018ac4 <usbd_edpt_claim>
 8017080:	4603      	mov	r3, r0
 8017082:	f083 0301 	eor.w	r3, r3, #1
 8017086:	b2db      	uxtb	r3, r3
 8017088:	2b00      	cmp	r3, #0
 801708a:	d001      	beq.n	8017090 <_prep_out_transaction+0x98>
 801708c:	2300      	movs	r3, #0
 801708e:	e01a      	b.n	80170c6 <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8017090:	693b      	ldr	r3, [r7, #16]
 8017092:	3310      	adds	r3, #16
 8017094:	4618      	mov	r0, r3
 8017096:	f001 f873 	bl	8018180 <tu_fifo_remaining>
 801709a:	4603      	mov	r3, r0
 801709c:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 801709e:	897b      	ldrh	r3, [r7, #10]
 80170a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80170a2:	d908      	bls.n	80170b6 <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 80170a4:	693b      	ldr	r3, [r7, #16]
 80170a6:	78d9      	ldrb	r1, [r3, #3]
 80170a8:	68fa      	ldr	r2, [r7, #12]
 80170aa:	7df8      	ldrb	r0, [r7, #23]
 80170ac:	2340      	movs	r3, #64	@ 0x40
 80170ae:	f001 fd5d 	bl	8018b6c <usbd_edpt_xfer>
 80170b2:	4603      	mov	r3, r0
 80170b4:	e007      	b.n	80170c6 <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 80170b6:	693b      	ldr	r3, [r7, #16]
 80170b8:	78da      	ldrb	r2, [r3, #3]
 80170ba:	7dfb      	ldrb	r3, [r7, #23]
 80170bc:	4611      	mov	r1, r2
 80170be:	4618      	mov	r0, r3
 80170c0:	f001 fd2a 	bl	8018b18 <usbd_edpt_release>
    return false;
 80170c4:	2300      	movs	r3, #0
  }
}
 80170c6:	4618      	mov	r0, r3
 80170c8:	3718      	adds	r7, #24
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
 80170ce:	bf00      	nop
 80170d0:	240084c8 	.word	0x240084c8
 80170d4:	24008618 	.word	0x24008618

080170d8 <tud_cdc_n_write_flush>:
  }

  return ret;
}

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 80170d8:	b580      	push	{r7, lr}
 80170da:	b086      	sub	sp, #24
 80170dc:	af00      	add	r7, sp, #0
 80170de:	4603      	mov	r3, r0
 80170e0:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80170e2:	79fb      	ldrb	r3, [r7, #7]
 80170e4:	22a8      	movs	r2, #168	@ 0xa8
 80170e6:	fb02 f303 	mul.w	r3, r2, r3
 80170ea:	4a39      	ldr	r2, [pc, #228]	@ (80171d0 <tud_cdc_n_write_flush+0xf8>)
 80170ec:	4413      	add	r3, r2
 80170ee:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 80170f0:	79fb      	ldrb	r3, [r7, #7]
 80170f2:	01db      	lsls	r3, r3, #7
 80170f4:	4a37      	ldr	r2, [pc, #220]	@ (80171d4 <tud_cdc_n_write_flush+0xfc>)
 80170f6:	4413      	add	r3, r2
 80170f8:	613b      	str	r3, [r7, #16]
 80170fa:	f001 f943 	bl	8018384 <tud_mounted>
 80170fe:	4603      	mov	r3, r0
 8017100:	2b00      	cmp	r3, #0
 8017102:	d009      	beq.n	8017118 <tud_cdc_n_write_flush+0x40>
 8017104:	f001 f950 	bl	80183a8 <tud_suspended>
 8017108:	4603      	mov	r3, r0
 801710a:	f083 0301 	eor.w	r3, r3, #1
 801710e:	b2db      	uxtb	r3, r3
 8017110:	2b00      	cmp	r3, #0
 8017112:	d001      	beq.n	8017118 <tud_cdc_n_write_flush+0x40>
 8017114:	2301      	movs	r3, #1
 8017116:	e000      	b.n	801711a <tud_cdc_n_write_flush+0x42>
 8017118:	2300      	movs	r3, #0
 801711a:	f003 0301 	and.w	r3, r3, #1
 801711e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8017120:	f083 0301 	eor.w	r3, r3, #1
 8017124:	b2db      	uxtb	r3, r3
 8017126:	2b00      	cmp	r3, #0
 8017128:	d001      	beq.n	801712e <tud_cdc_n_write_flush+0x56>
 801712a:	2300      	movs	r3, #0
 801712c:	e04c      	b.n	80171c8 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 801712e:	697b      	ldr	r3, [r7, #20]
 8017130:	331c      	adds	r3, #28
 8017132:	4618      	mov	r0, r3
 8017134:	f000 ffaf 	bl	8018096 <tu_fifo_count>
 8017138:	4603      	mov	r3, r0
 801713a:	2b00      	cmp	r3, #0
 801713c:	d101      	bne.n	8017142 <tud_cdc_n_write_flush+0x6a>
    return 0;
 801713e:	2300      	movs	r3, #0
 8017140:	e042      	b.n	80171c8 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8017142:	2300      	movs	r3, #0
 8017144:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8017146:	697b      	ldr	r3, [r7, #20]
 8017148:	789a      	ldrb	r2, [r3, #2]
 801714a:	7bfb      	ldrb	r3, [r7, #15]
 801714c:	4611      	mov	r1, r2
 801714e:	4618      	mov	r0, r3
 8017150:	f001 fcb8 	bl	8018ac4 <usbd_edpt_claim>
 8017154:	4603      	mov	r3, r0
 8017156:	f083 0301 	eor.w	r3, r3, #1
 801715a:	b2db      	uxtb	r3, r3
 801715c:	2b00      	cmp	r3, #0
 801715e:	d001      	beq.n	8017164 <tud_cdc_n_write_flush+0x8c>
 8017160:	2300      	movs	r3, #0
 8017162:	e031      	b.n	80171c8 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8017164:	697b      	ldr	r3, [r7, #20]
 8017166:	f103 001c 	add.w	r0, r3, #28
 801716a:	693b      	ldr	r3, [r7, #16]
 801716c:	3340      	adds	r3, #64	@ 0x40
 801716e:	2240      	movs	r2, #64	@ 0x40
 8017170:	4619      	mov	r1, r3
 8017172:	f001 f83d 	bl	80181f0 <tu_fifo_read_n>
 8017176:	4603      	mov	r3, r0
 8017178:	81bb      	strh	r3, [r7, #12]

  if (count) {
 801717a:	89bb      	ldrh	r3, [r7, #12]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d01b      	beq.n	80171b8 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8017180:	697b      	ldr	r3, [r7, #20]
 8017182:	7899      	ldrb	r1, [r3, #2]
 8017184:	693b      	ldr	r3, [r7, #16]
 8017186:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 801718a:	89bb      	ldrh	r3, [r7, #12]
 801718c:	7bf8      	ldrb	r0, [r7, #15]
 801718e:	f001 fced 	bl	8018b6c <usbd_edpt_xfer>
 8017192:	4603      	mov	r3, r0
 8017194:	f083 0301 	eor.w	r3, r3, #1
 8017198:	b2db      	uxtb	r3, r3
 801719a:	2b00      	cmp	r3, #0
 801719c:	d00a      	beq.n	80171b4 <tud_cdc_n_write_flush+0xdc>
 801719e:	4b0e      	ldr	r3, [pc, #56]	@ (80171d8 <tud_cdc_n_write_flush+0x100>)
 80171a0:	60bb      	str	r3, [r7, #8]
 80171a2:	68bb      	ldr	r3, [r7, #8]
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	f003 0301 	and.w	r3, r3, #1
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d000      	beq.n	80171b0 <tud_cdc_n_write_flush+0xd8>
 80171ae:	be00      	bkpt	0x0000
 80171b0:	2300      	movs	r3, #0
 80171b2:	e009      	b.n	80171c8 <tud_cdc_n_write_flush+0xf0>
    return count;
 80171b4:	89bb      	ldrh	r3, [r7, #12]
 80171b6:	e007      	b.n	80171c8 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	789a      	ldrb	r2, [r3, #2]
 80171bc:	7bfb      	ldrb	r3, [r7, #15]
 80171be:	4611      	mov	r1, r2
 80171c0:	4618      	mov	r0, r3
 80171c2:	f001 fca9 	bl	8018b18 <usbd_edpt_release>
    return 0;
 80171c6:	2300      	movs	r3, #0
  }
}
 80171c8:	4618      	mov	r0, r3
 80171ca:	3718      	adds	r7, #24
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}
 80171d0:	240084c8 	.word	0x240084c8
 80171d4:	24008618 	.word	0x24008618
 80171d8:	e000edf0 	.word	0xe000edf0

080171dc <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 80171dc:	b580      	push	{r7, lr}
 80171de:	b084      	sub	sp, #16
 80171e0:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80171e2:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 80171e6:	2100      	movs	r1, #0
 80171e8:	4822      	ldr	r0, [pc, #136]	@ (8017274 <cdcd_init+0x98>)
 80171ea:	f006 fbfd 	bl	801d9e8 <memset>
  tu_memclr(&_cdcd_fifo_cfg, sizeof(_cdcd_fifo_cfg));
 80171ee:	2201      	movs	r2, #1
 80171f0:	2100      	movs	r1, #0
 80171f2:	4821      	ldr	r0, [pc, #132]	@ (8017278 <cdcd_init+0x9c>)
 80171f4:	f006 fbf8 	bl	801d9e8 <memset>

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80171f8:	2300      	movs	r3, #0
 80171fa:	71fb      	strb	r3, [r7, #7]
 80171fc:	e031      	b.n	8017262 <cdcd_init+0x86>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80171fe:	79fb      	ldrb	r3, [r7, #7]
 8017200:	22a8      	movs	r2, #168	@ 0xa8
 8017202:	fb02 f303 	mul.w	r3, r2, r3
 8017206:	4a1b      	ldr	r2, [pc, #108]	@ (8017274 <cdcd_init+0x98>)
 8017208:	4413      	add	r3, r2
 801720a:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	22ff      	movs	r2, #255	@ 0xff
 8017210:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8017212:	683b      	ldr	r3, [r7, #0]
 8017214:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8017218:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 801721a:	683b      	ldr	r3, [r7, #0]
 801721c:	2200      	movs	r2, #0
 801721e:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8017220:	683b      	ldr	r3, [r7, #0]
 8017222:	2200      	movs	r2, #0
 8017224:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	2208      	movs	r2, #8
 801722a:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 801722c:	683b      	ldr	r3, [r7, #0]
 801722e:	f103 0010 	add.w	r0, r3, #16
 8017232:	683b      	ldr	r3, [r7, #0]
 8017234:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8017238:	2300      	movs	r3, #0
 801723a:	9300      	str	r3, [sp, #0]
 801723c:	2301      	movs	r3, #1
 801723e:	2240      	movs	r2, #64	@ 0x40
 8017240:	f000 fb1c 	bl	801787c <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8017244:	683b      	ldr	r3, [r7, #0]
 8017246:	f103 001c 	add.w	r0, r3, #28
 801724a:	683b      	ldr	r3, [r7, #0]
 801724c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8017250:	2301      	movs	r3, #1
 8017252:	9300      	str	r3, [sp, #0]
 8017254:	2301      	movs	r3, #1
 8017256:	2240      	movs	r2, #64	@ 0x40
 8017258:	f000 fb10 	bl	801787c <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 801725c:	79fb      	ldrb	r3, [r7, #7]
 801725e:	3301      	adds	r3, #1
 8017260:	71fb      	strb	r3, [r7, #7]
 8017262:	79fb      	ldrb	r3, [r7, #7]
 8017264:	2b01      	cmp	r3, #1
 8017266:	d9ca      	bls.n	80171fe <cdcd_init+0x22>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 8017268:	bf00      	nop
 801726a:	bf00      	nop
 801726c:	3708      	adds	r7, #8
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}
 8017272:	bf00      	nop
 8017274:	240084c8 	.word	0x240084c8
 8017278:	24008718 	.word	0x24008718

0801727c <cdcd_deinit>:

bool cdcd_deinit(void) {
 801727c:	b480      	push	{r7}
 801727e:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8017280:	2301      	movs	r3, #1
}
 8017282:	4618      	mov	r0, r3
 8017284:	46bd      	mov	sp, r7
 8017286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801728a:	4770      	bx	lr

0801728c <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 801728c:	b580      	push	{r7, lr}
 801728e:	b084      	sub	sp, #16
 8017290:	af00      	add	r7, sp, #0
 8017292:	4603      	mov	r3, r0
 8017294:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8017296:	2300      	movs	r3, #0
 8017298:	73fb      	strb	r3, [r7, #15]
 801729a:	e02c      	b.n	80172f6 <cdcd_reset+0x6a>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 801729c:	7bfb      	ldrb	r3, [r7, #15]
 801729e:	22a8      	movs	r2, #168	@ 0xa8
 80172a0:	fb02 f303 	mul.w	r3, r2, r3
 80172a4:	4a18      	ldr	r2, [pc, #96]	@ (8017308 <cdcd_reset+0x7c>)
 80172a6:	4413      	add	r3, r2
 80172a8:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 80172aa:	2205      	movs	r2, #5
 80172ac:	2100      	movs	r1, #0
 80172ae:	68b8      	ldr	r0, [r7, #8]
 80172b0:	f006 fb9a 	bl	801d9e8 <memset>
    if (!_cdcd_fifo_cfg.rx_persistent) {
 80172b4:	4b15      	ldr	r3, [pc, #84]	@ (801730c <cdcd_reset+0x80>)
 80172b6:	781b      	ldrb	r3, [r3, #0]
 80172b8:	f003 0301 	and.w	r3, r3, #1
 80172bc:	b2db      	uxtb	r3, r3
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d104      	bne.n	80172cc <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 80172c2:	68bb      	ldr	r3, [r7, #8]
 80172c4:	3310      	adds	r3, #16
 80172c6:	4618      	mov	r0, r3
 80172c8:	f001 f81d 	bl	8018306 <tu_fifo_clear>
    }
    if (!_cdcd_fifo_cfg.tx_persistent) {
 80172cc:	4b0f      	ldr	r3, [pc, #60]	@ (801730c <cdcd_reset+0x80>)
 80172ce:	781b      	ldrb	r3, [r3, #0]
 80172d0:	f003 0302 	and.w	r3, r3, #2
 80172d4:	b2db      	uxtb	r3, r3
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d104      	bne.n	80172e4 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 80172da:	68bb      	ldr	r3, [r7, #8]
 80172dc:	331c      	adds	r3, #28
 80172de:	4618      	mov	r0, r3
 80172e0:	f001 f811 	bl	8018306 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 80172e4:	68bb      	ldr	r3, [r7, #8]
 80172e6:	331c      	adds	r3, #28
 80172e8:	2101      	movs	r1, #1
 80172ea:	4618      	mov	r0, r3
 80172ec:	f001 f81c 	bl	8018328 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80172f0:	7bfb      	ldrb	r3, [r7, #15]
 80172f2:	3301      	adds	r3, #1
 80172f4:	73fb      	strb	r3, [r7, #15]
 80172f6:	7bfb      	ldrb	r3, [r7, #15]
 80172f8:	2b01      	cmp	r3, #1
 80172fa:	d9cf      	bls.n	801729c <cdcd_reset+0x10>
  }
}
 80172fc:	bf00      	nop
 80172fe:	bf00      	nop
 8017300:	3710      	adds	r7, #16
 8017302:	46bd      	mov	sp, r7
 8017304:	bd80      	pop	{r7, pc}
 8017306:	bf00      	nop
 8017308:	240084c8 	.word	0x240084c8
 801730c:	24008718 	.word	0x24008718

08017310 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8017310:	b580      	push	{r7, lr}
 8017312:	b09a      	sub	sp, #104	@ 0x68
 8017314:	af02      	add	r7, sp, #8
 8017316:	4603      	mov	r3, r0
 8017318:	6039      	str	r1, [r7, #0]
 801731a:	71fb      	strb	r3, [r7, #7]
 801731c:	4613      	mov	r3, r2
 801731e:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8017320:	683b      	ldr	r3, [r7, #0]
 8017322:	795b      	ldrb	r3, [r3, #5]
 8017324:	2b02      	cmp	r3, #2
 8017326:	d103      	bne.n	8017330 <cdcd_open+0x20>
 8017328:	683b      	ldr	r3, [r7, #0]
 801732a:	799b      	ldrb	r3, [r3, #6]
 801732c:	2b02      	cmp	r3, #2
 801732e:	d001      	beq.n	8017334 <cdcd_open+0x24>
 8017330:	2300      	movs	r3, #0
 8017332:	e0da      	b.n	80174ea <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8017334:	2300      	movs	r3, #0
 8017336:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 801733a:	e010      	b.n	801735e <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 801733c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8017340:	22a8      	movs	r2, #168	@ 0xa8
 8017342:	fb02 f303 	mul.w	r3, r2, r3
 8017346:	4a6b      	ldr	r2, [pc, #428]	@ (80174f4 <cdcd_open+0x1e4>)
 8017348:	4413      	add	r3, r2
 801734a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 801734c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801734e:	789b      	ldrb	r3, [r3, #2]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d009      	beq.n	8017368 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8017354:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8017358:	3301      	adds	r3, #1
 801735a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 801735e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8017362:	2b01      	cmp	r3, #1
 8017364:	d9ea      	bls.n	801733c <cdcd_open+0x2c>
 8017366:	e000      	b.n	801736a <cdcd_open+0x5a>
      break;
 8017368:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 801736a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 801736e:	2b01      	cmp	r3, #1
 8017370:	d90a      	bls.n	8017388 <cdcd_open+0x78>
 8017372:	4b61      	ldr	r3, [pc, #388]	@ (80174f8 <cdcd_open+0x1e8>)
 8017374:	647b      	str	r3, [r7, #68]	@ 0x44
 8017376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	f003 0301 	and.w	r3, r3, #1
 801737e:	2b00      	cmp	r3, #0
 8017380:	d000      	beq.n	8017384 <cdcd_open+0x74>
 8017382:	be00      	bkpt	0x0000
 8017384:	2300      	movs	r3, #0
 8017386:	e0b0      	b.n	80174ea <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	789a      	ldrb	r2, [r3, #2]
 801738c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801738e:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8017390:	2309      	movs	r3, #9
 8017392:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8017396:	683b      	ldr	r3, [r7, #0]
 8017398:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 801739a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801739c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 801739e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80173a0:	781b      	ldrb	r3, [r3, #0]
 80173a2:	461a      	mov	r2, r3
 80173a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80173a6:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 80173a8:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80173aa:	e013      	b.n	80173d4 <cdcd_open+0xc4>
 80173ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173ae:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80173b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173b2:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 80173b4:	461a      	mov	r2, r3
 80173b6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80173ba:	4413      	add	r3, r2
 80173bc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80173c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 80173c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173c6:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 80173c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173ca:	781b      	ldrb	r3, [r3, #0]
 80173cc:	461a      	mov	r2, r3
 80173ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173d0:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 80173d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80173d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80173d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173da:	3301      	adds	r3, #1
 80173dc:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80173de:	2b24      	cmp	r3, #36	@ 0x24
 80173e0:	d104      	bne.n	80173ec <cdcd_open+0xdc>
 80173e2:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80173e6:	88bb      	ldrh	r3, [r7, #4]
 80173e8:	429a      	cmp	r2, r3
 80173ea:	d9df      	bls.n	80173ac <cdcd_open+0x9c>
 80173ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80173f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173f2:	3301      	adds	r3, #1
 80173f4:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 80173f6:	2b05      	cmp	r3, #5
 80173f8:	d12f      	bne.n	801745a <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 80173fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173fc:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 80173fe:	79fb      	ldrb	r3, [r7, #7]
 8017400:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8017402:	4618      	mov	r0, r3
 8017404:	f001 fb18 	bl	8018a38 <usbd_edpt_open>
 8017408:	4603      	mov	r3, r0
 801740a:	f083 0301 	eor.w	r3, r3, #1
 801740e:	b2db      	uxtb	r3, r3
 8017410:	2b00      	cmp	r3, #0
 8017412:	d00a      	beq.n	801742a <cdcd_open+0x11a>
 8017414:	4b38      	ldr	r3, [pc, #224]	@ (80174f8 <cdcd_open+0x1e8>)
 8017416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	f003 0301 	and.w	r3, r3, #1
 8017420:	2b00      	cmp	r3, #0
 8017422:	d000      	beq.n	8017426 <cdcd_open+0x116>
 8017424:	be00      	bkpt	0x0000
 8017426:	2300      	movs	r3, #0
 8017428:	e05f      	b.n	80174ea <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 801742a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801742c:	789a      	ldrb	r2, [r3, #2]
 801742e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017430:	705a      	strb	r2, [r3, #1]
 8017432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017434:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8017436:	69fb      	ldr	r3, [r7, #28]
 8017438:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 801743a:	461a      	mov	r2, r3
 801743c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8017440:	4413      	add	r3, r2
 8017442:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8017446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017448:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 801744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801744c:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 801744e:	6a3b      	ldr	r3, [r7, #32]
 8017450:	781b      	ldrb	r3, [r3, #0]
 8017452:	461a      	mov	r2, r3
 8017454:	6a3b      	ldr	r3, [r7, #32]
 8017456:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8017458:	657b      	str	r3, [r7, #84]	@ 0x54
 801745a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801745c:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 801745e:	69bb      	ldr	r3, [r7, #24]
 8017460:	3301      	adds	r3, #1
 8017462:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8017464:	2b04      	cmp	r3, #4
 8017466:	d139      	bne.n	80174dc <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8017468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801746a:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 801746c:	2b0a      	cmp	r3, #10
 801746e:	d135      	bne.n	80174dc <cdcd_open+0x1cc>
 8017470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017472:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8017478:	461a      	mov	r2, r3
 801747a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801747e:	4413      	add	r3, r2
 8017480:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8017484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017486:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8017488:	697b      	ldr	r3, [r7, #20]
 801748a:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 801748c:	693b      	ldr	r3, [r7, #16]
 801748e:	781b      	ldrb	r3, [r3, #0]
 8017490:	461a      	mov	r2, r3
 8017492:	693b      	ldr	r3, [r7, #16]
 8017494:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8017496:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 8017498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801749a:	3303      	adds	r3, #3
 801749c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801749e:	3202      	adds	r2, #2
 80174a0:	79f8      	ldrb	r0, [r7, #7]
 80174a2:	9201      	str	r2, [sp, #4]
 80174a4:	9300      	str	r3, [sp, #0]
 80174a6:	2302      	movs	r3, #2
 80174a8:	2202      	movs	r2, #2
 80174aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80174ac:	f001 fa5c 	bl	8018968 <usbd_open_edpt_pair>
 80174b0:	4603      	mov	r3, r0
 80174b2:	f083 0301 	eor.w	r3, r3, #1
 80174b6:	b2db      	uxtb	r3, r3
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d00a      	beq.n	80174d2 <cdcd_open+0x1c2>
 80174bc:	4b0e      	ldr	r3, [pc, #56]	@ (80174f8 <cdcd_open+0x1e8>)
 80174be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80174c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	f003 0301 	and.w	r3, r3, #1
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d000      	beq.n	80174ce <cdcd_open+0x1be>
 80174cc:	be00      	bkpt	0x0000
 80174ce:	2300      	movs	r3, #0
 80174d0:	e00b      	b.n	80174ea <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 80174d2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80174d6:	330e      	adds	r3, #14
 80174d8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 80174dc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80174e0:	4618      	mov	r0, r3
 80174e2:	f7ff fd89 	bl	8016ff8 <_prep_out_transaction>

  return drv_len;
 80174e6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 80174ea:	4618      	mov	r0, r3
 80174ec:	3760      	adds	r7, #96	@ 0x60
 80174ee:	46bd      	mov	sp, r7
 80174f0:	bd80      	pop	{r7, pc}
 80174f2:	bf00      	nop
 80174f4:	240084c8 	.word	0x240084c8
 80174f8:	e000edf0 	.word	0xe000edf0

080174fc <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b08a      	sub	sp, #40	@ 0x28
 8017500:	af00      	add	r7, sp, #0
 8017502:	4603      	mov	r3, r0
 8017504:	603a      	str	r2, [r7, #0]
 8017506:	71fb      	strb	r3, [r7, #7]
 8017508:	460b      	mov	r3, r1
 801750a:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 801750c:	683b      	ldr	r3, [r7, #0]
 801750e:	781b      	ldrb	r3, [r3, #0]
 8017510:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017514:	b2db      	uxtb	r3, r3
 8017516:	2b20      	cmp	r3, #32
 8017518:	d001      	beq.n	801751e <cdcd_control_xfer_cb+0x22>
 801751a:	2300      	movs	r3, #0
 801751c:	e0d7      	b.n	80176ce <cdcd_control_xfer_cb+0x1d2>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 801751e:	2300      	movs	r3, #0
 8017520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017524:	e014      	b.n	8017550 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8017526:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801752a:	22a8      	movs	r2, #168	@ 0xa8
 801752c:	fb02 f303 	mul.w	r3, r2, r3
 8017530:	4a69      	ldr	r2, [pc, #420]	@ (80176d8 <cdcd_control_xfer_cb+0x1dc>)
 8017532:	4413      	add	r3, r2
 8017534:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8017536:	6a3b      	ldr	r3, [r7, #32]
 8017538:	781b      	ldrb	r3, [r3, #0]
 801753a:	461a      	mov	r2, r3
 801753c:	683b      	ldr	r3, [r7, #0]
 801753e:	889b      	ldrh	r3, [r3, #4]
 8017540:	b29b      	uxth	r3, r3
 8017542:	429a      	cmp	r2, r3
 8017544:	d009      	beq.n	801755a <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8017546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801754a:	3301      	adds	r3, #1
 801754c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017554:	2b01      	cmp	r3, #1
 8017556:	d9e6      	bls.n	8017526 <cdcd_control_xfer_cb+0x2a>
 8017558:	e000      	b.n	801755c <cdcd_control_xfer_cb+0x60>
      break;
 801755a:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 801755c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017560:	2b01      	cmp	r3, #1
 8017562:	d901      	bls.n	8017568 <cdcd_control_xfer_cb+0x6c>
 8017564:	2300      	movs	r3, #0
 8017566:	e0b2      	b.n	80176ce <cdcd_control_xfer_cb+0x1d2>

  switch (request->bRequest) {
 8017568:	683b      	ldr	r3, [r7, #0]
 801756a:	785b      	ldrb	r3, [r3, #1]
 801756c:	3b20      	subs	r3, #32
 801756e:	2b03      	cmp	r3, #3
 8017570:	f200 80a3 	bhi.w	80176ba <cdcd_control_xfer_cb+0x1be>
 8017574:	a201      	add	r2, pc, #4	@ (adr r2, 801757c <cdcd_control_xfer_cb+0x80>)
 8017576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801757a:	bf00      	nop
 801757c:	0801758d 	.word	0x0801758d
 8017580:	080175c9 	.word	0x080175c9
 8017584:	080175e1 	.word	0x080175e1
 8017588:	08017689 	.word	0x08017689
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 801758c:	79bb      	ldrb	r3, [r7, #6]
 801758e:	2b01      	cmp	r3, #1
 8017590:	d108      	bne.n	80175a4 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8017592:	6a3b      	ldr	r3, [r7, #32]
 8017594:	f103 0208 	add.w	r2, r3, #8
 8017598:	79f8      	ldrb	r0, [r7, #7]
 801759a:	2307      	movs	r3, #7
 801759c:	6839      	ldr	r1, [r7, #0]
 801759e:	f001 fbe9 	bl	8018d74 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 80175a2:	e08c      	b.n	80176be <cdcd_control_xfer_cb+0x1c2>
      } else if (stage == CONTROL_STAGE_ACK) {
 80175a4:	79bb      	ldrb	r3, [r7, #6]
 80175a6:	2b03      	cmp	r3, #3
 80175a8:	f040 8089 	bne.w	80176be <cdcd_control_xfer_cb+0x1c2>
        if (tud_cdc_line_coding_cb) {
 80175ac:	4b4b      	ldr	r3, [pc, #300]	@ (80176dc <cdcd_control_xfer_cb+0x1e0>)
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	f000 8085 	beq.w	80176be <cdcd_control_xfer_cb+0x1c2>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 80175b4:	6a3b      	ldr	r3, [r7, #32]
 80175b6:	f103 0208 	add.w	r2, r3, #8
 80175ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175be:	4611      	mov	r1, r2
 80175c0:	4618      	mov	r0, r3
 80175c2:	f3af 8000 	nop.w
      break;
 80175c6:	e07a      	b.n	80176be <cdcd_control_xfer_cb+0x1c2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 80175c8:	79bb      	ldrb	r3, [r7, #6]
 80175ca:	2b01      	cmp	r3, #1
 80175cc:	d179      	bne.n	80176c2 <cdcd_control_xfer_cb+0x1c6>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80175ce:	6a3b      	ldr	r3, [r7, #32]
 80175d0:	f103 0208 	add.w	r2, r3, #8
 80175d4:	79f8      	ldrb	r0, [r7, #7]
 80175d6:	2307      	movs	r3, #7
 80175d8:	6839      	ldr	r1, [r7, #0]
 80175da:	f001 fbcb 	bl	8018d74 <tud_control_xfer>
      }
      break;
 80175de:	e070      	b.n	80176c2 <cdcd_control_xfer_cb+0x1c6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 80175e0:	79bb      	ldrb	r3, [r7, #6]
 80175e2:	2b01      	cmp	r3, #1
 80175e4:	d105      	bne.n	80175f2 <cdcd_control_xfer_cb+0xf6>
        tud_control_status(rhport, request);
 80175e6:	79fb      	ldrb	r3, [r7, #7]
 80175e8:	6839      	ldr	r1, [r7, #0]
 80175ea:	4618      	mov	r0, r3
 80175ec:	f001 fb50 	bl	8018c90 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 80175f0:	e069      	b.n	80176c6 <cdcd_control_xfer_cb+0x1ca>
      } else if (stage == CONTROL_STAGE_ACK) {
 80175f2:	79bb      	ldrb	r3, [r7, #6]
 80175f4:	2b03      	cmp	r3, #3
 80175f6:	d166      	bne.n	80176c6 <cdcd_control_xfer_cb+0x1ca>
        bool const dtr = tu_bit_test(request->wValue, 0);
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	885b      	ldrh	r3, [r3, #2]
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	613b      	str	r3, [r7, #16]
 8017600:	2300      	movs	r3, #0
 8017602:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8017604:	7bfb      	ldrb	r3, [r7, #15]
 8017606:	693a      	ldr	r2, [r7, #16]
 8017608:	fa22 f303 	lsr.w	r3, r2, r3
 801760c:	f003 0301 	and.w	r3, r3, #1
 8017610:	2b00      	cmp	r3, #0
 8017612:	bf14      	ite	ne
 8017614:	2301      	movne	r3, #1
 8017616:	2300      	moveq	r3, #0
 8017618:	b2db      	uxtb	r3, r3
 801761a:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 801761c:	683b      	ldr	r3, [r7, #0]
 801761e:	885b      	ldrh	r3, [r3, #2]
 8017620:	b29b      	uxth	r3, r3
 8017622:	61bb      	str	r3, [r7, #24]
 8017624:	2301      	movs	r3, #1
 8017626:	75fb      	strb	r3, [r7, #23]
 8017628:	7dfb      	ldrb	r3, [r7, #23]
 801762a:	69ba      	ldr	r2, [r7, #24]
 801762c:	fa22 f303 	lsr.w	r3, r2, r3
 8017630:	f003 0301 	and.w	r3, r3, #1
 8017634:	2b00      	cmp	r3, #0
 8017636:	bf14      	ite	ne
 8017638:	2301      	movne	r3, #1
 801763a:	2300      	moveq	r3, #0
 801763c:	b2db      	uxtb	r3, r3
 801763e:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8017640:	683b      	ldr	r3, [r7, #0]
 8017642:	885b      	ldrh	r3, [r3, #2]
 8017644:	b29b      	uxth	r3, r3
 8017646:	b2da      	uxtb	r2, r3
 8017648:	6a3b      	ldr	r3, [r7, #32]
 801764a:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 801764c:	6a3b      	ldr	r3, [r7, #32]
 801764e:	f103 021c 	add.w	r2, r3, #28
 8017652:	7ffb      	ldrb	r3, [r7, #31]
 8017654:	2b00      	cmp	r3, #0
 8017656:	bf14      	ite	ne
 8017658:	2301      	movne	r3, #1
 801765a:	2300      	moveq	r3, #0
 801765c:	b2db      	uxtb	r3, r3
 801765e:	f083 0301 	eor.w	r3, r3, #1
 8017662:	b2db      	uxtb	r3, r3
 8017664:	f003 0301 	and.w	r3, r3, #1
 8017668:	b2db      	uxtb	r3, r3
 801766a:	4619      	mov	r1, r3
 801766c:	4610      	mov	r0, r2
 801766e:	f000 fe5b 	bl	8018328 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 8017672:	4b1b      	ldr	r3, [pc, #108]	@ (80176e0 <cdcd_control_xfer_cb+0x1e4>)
 8017674:	2b00      	cmp	r3, #0
 8017676:	d026      	beq.n	80176c6 <cdcd_control_xfer_cb+0x1ca>
          tud_cdc_line_state_cb(itf, dtr, rts);
 8017678:	7fba      	ldrb	r2, [r7, #30]
 801767a:	7ff9      	ldrb	r1, [r7, #31]
 801767c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017680:	4618      	mov	r0, r3
 8017682:	f3af 8000 	nop.w
      break;
 8017686:	e01e      	b.n	80176c6 <cdcd_control_xfer_cb+0x1ca>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 8017688:	79bb      	ldrb	r3, [r7, #6]
 801768a:	2b01      	cmp	r3, #1
 801768c:	d105      	bne.n	801769a <cdcd_control_xfer_cb+0x19e>
        tud_control_status(rhport, request);
 801768e:	79fb      	ldrb	r3, [r7, #7]
 8017690:	6839      	ldr	r1, [r7, #0]
 8017692:	4618      	mov	r0, r3
 8017694:	f001 fafc 	bl	8018c90 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 8017698:	e017      	b.n	80176ca <cdcd_control_xfer_cb+0x1ce>
      } else if (stage == CONTROL_STAGE_ACK) {
 801769a:	79bb      	ldrb	r3, [r7, #6]
 801769c:	2b03      	cmp	r3, #3
 801769e:	d114      	bne.n	80176ca <cdcd_control_xfer_cb+0x1ce>
        if (tud_cdc_send_break_cb) {
 80176a0:	4b10      	ldr	r3, [pc, #64]	@ (80176e4 <cdcd_control_xfer_cb+0x1e8>)
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d011      	beq.n	80176ca <cdcd_control_xfer_cb+0x1ce>
          tud_cdc_send_break_cb(itf, request->wValue);
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	885b      	ldrh	r3, [r3, #2]
 80176aa:	b29a      	uxth	r2, r3
 80176ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80176b0:	4611      	mov	r1, r2
 80176b2:	4618      	mov	r0, r3
 80176b4:	f3af 8000 	nop.w
      break;
 80176b8:	e007      	b.n	80176ca <cdcd_control_xfer_cb+0x1ce>

    default:
      return false; // stall unsupported request
 80176ba:	2300      	movs	r3, #0
 80176bc:	e007      	b.n	80176ce <cdcd_control_xfer_cb+0x1d2>
      break;
 80176be:	bf00      	nop
 80176c0:	e004      	b.n	80176cc <cdcd_control_xfer_cb+0x1d0>
      break;
 80176c2:	bf00      	nop
 80176c4:	e002      	b.n	80176cc <cdcd_control_xfer_cb+0x1d0>
      break;
 80176c6:	bf00      	nop
 80176c8:	e000      	b.n	80176cc <cdcd_control_xfer_cb+0x1d0>
      break;
 80176ca:	bf00      	nop
  }

  return true;
 80176cc:	2301      	movs	r3, #1
}
 80176ce:	4618      	mov	r0, r3
 80176d0:	3728      	adds	r7, #40	@ 0x28
 80176d2:	46bd      	mov	sp, r7
 80176d4:	bd80      	pop	{r7, pc}
 80176d6:	bf00      	nop
 80176d8:	240084c8 	.word	0x240084c8
	...

080176e8 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b088      	sub	sp, #32
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	603b      	str	r3, [r7, #0]
 80176f0:	4603      	mov	r3, r0
 80176f2:	71fb      	strb	r3, [r7, #7]
 80176f4:	460b      	mov	r3, r1
 80176f6:	71bb      	strb	r3, [r7, #6]
 80176f8:	4613      	mov	r3, r2
 80176fa:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80176fc:	2300      	movs	r3, #0
 80176fe:	77fb      	strb	r3, [r7, #31]
 8017700:	e013      	b.n	801772a <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 8017702:	7ffb      	ldrb	r3, [r7, #31]
 8017704:	22a8      	movs	r2, #168	@ 0xa8
 8017706:	fb02 f303 	mul.w	r3, r2, r3
 801770a:	4a56      	ldr	r2, [pc, #344]	@ (8017864 <cdcd_xfer_cb+0x17c>)
 801770c:	4413      	add	r3, r2
 801770e:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 8017710:	69bb      	ldr	r3, [r7, #24]
 8017712:	78db      	ldrb	r3, [r3, #3]
 8017714:	79ba      	ldrb	r2, [r7, #6]
 8017716:	429a      	cmp	r2, r3
 8017718:	d00a      	beq.n	8017730 <cdcd_xfer_cb+0x48>
 801771a:	69bb      	ldr	r3, [r7, #24]
 801771c:	789b      	ldrb	r3, [r3, #2]
 801771e:	79ba      	ldrb	r2, [r7, #6]
 8017720:	429a      	cmp	r2, r3
 8017722:	d005      	beq.n	8017730 <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8017724:	7ffb      	ldrb	r3, [r7, #31]
 8017726:	3301      	adds	r3, #1
 8017728:	77fb      	strb	r3, [r7, #31]
 801772a:	7ffb      	ldrb	r3, [r7, #31]
 801772c:	2b01      	cmp	r3, #1
 801772e:	d9e8      	bls.n	8017702 <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8017730:	7ffb      	ldrb	r3, [r7, #31]
 8017732:	2b01      	cmp	r3, #1
 8017734:	d90a      	bls.n	801774c <cdcd_xfer_cb+0x64>
 8017736:	4b4c      	ldr	r3, [pc, #304]	@ (8017868 <cdcd_xfer_cb+0x180>)
 8017738:	60fb      	str	r3, [r7, #12]
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	f003 0301 	and.w	r3, r3, #1
 8017742:	2b00      	cmp	r3, #0
 8017744:	d000      	beq.n	8017748 <cdcd_xfer_cb+0x60>
 8017746:	be00      	bkpt	0x0000
 8017748:	2300      	movs	r3, #0
 801774a:	e087      	b.n	801785c <cdcd_xfer_cb+0x174>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 801774c:	7ffb      	ldrb	r3, [r7, #31]
 801774e:	01db      	lsls	r3, r3, #7
 8017750:	4a46      	ldr	r2, [pc, #280]	@ (801786c <cdcd_xfer_cb+0x184>)
 8017752:	4413      	add	r3, r2
 8017754:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 8017756:	69bb      	ldr	r3, [r7, #24]
 8017758:	78db      	ldrb	r3, [r3, #3]
 801775a:	79ba      	ldrb	r2, [r7, #6]
 801775c:	429a      	cmp	r2, r3
 801775e:	d148      	bne.n	80177f2 <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8017760:	69bb      	ldr	r3, [r7, #24]
 8017762:	3310      	adds	r3, #16
 8017764:	6939      	ldr	r1, [r7, #16]
 8017766:	683a      	ldr	r2, [r7, #0]
 8017768:	b292      	uxth	r2, r2
 801776a:	4618      	mov	r0, r3
 801776c:	f000 fda7 	bl	80182be <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8017770:	4b3f      	ldr	r3, [pc, #252]	@ (8017870 <cdcd_xfer_cb+0x188>)
 8017772:	2b00      	cmp	r3, #0
 8017774:	d027      	beq.n	80177c6 <cdcd_xfer_cb+0xde>
 8017776:	69bb      	ldr	r3, [r7, #24]
 8017778:	795b      	ldrb	r3, [r3, #5]
 801777a:	2bff      	cmp	r3, #255	@ 0xff
 801777c:	d023      	beq.n	80177c6 <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 801777e:	2300      	movs	r3, #0
 8017780:	617b      	str	r3, [r7, #20]
 8017782:	e01c      	b.n	80177be <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8017784:	69bb      	ldr	r3, [r7, #24]
 8017786:	795a      	ldrb	r2, [r3, #5]
 8017788:	6939      	ldr	r1, [r7, #16]
 801778a:	697b      	ldr	r3, [r7, #20]
 801778c:	440b      	add	r3, r1
 801778e:	781b      	ldrb	r3, [r3, #0]
 8017790:	429a      	cmp	r2, r3
 8017792:	d111      	bne.n	80177b8 <cdcd_xfer_cb+0xd0>
 8017794:	69bb      	ldr	r3, [r7, #24]
 8017796:	3310      	adds	r3, #16
 8017798:	4618      	mov	r0, r3
 801779a:	f000 fcae 	bl	80180fa <tu_fifo_empty>
 801779e:	4603      	mov	r3, r0
 80177a0:	f083 0301 	eor.w	r3, r3, #1
 80177a4:	b2db      	uxtb	r3, r3
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d006      	beq.n	80177b8 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 80177aa:	69bb      	ldr	r3, [r7, #24]
 80177ac:	795a      	ldrb	r2, [r3, #5]
 80177ae:	7ffb      	ldrb	r3, [r7, #31]
 80177b0:	4611      	mov	r1, r2
 80177b2:	4618      	mov	r0, r3
 80177b4:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	3301      	adds	r3, #1
 80177bc:	617b      	str	r3, [r7, #20]
 80177be:	697a      	ldr	r2, [r7, #20]
 80177c0:	683b      	ldr	r3, [r7, #0]
 80177c2:	429a      	cmp	r2, r3
 80177c4:	d3de      	bcc.n	8017784 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80177c6:	4b2b      	ldr	r3, [pc, #172]	@ (8017874 <cdcd_xfer_cb+0x18c>)
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d00e      	beq.n	80177ea <cdcd_xfer_cb+0x102>
 80177cc:	69bb      	ldr	r3, [r7, #24]
 80177ce:	3310      	adds	r3, #16
 80177d0:	4618      	mov	r0, r3
 80177d2:	f000 fc92 	bl	80180fa <tu_fifo_empty>
 80177d6:	4603      	mov	r3, r0
 80177d8:	f083 0301 	eor.w	r3, r3, #1
 80177dc:	b2db      	uxtb	r3, r3
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d003      	beq.n	80177ea <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 80177e2:	7ffb      	ldrb	r3, [r7, #31]
 80177e4:	4618      	mov	r0, r3
 80177e6:	f3af 8000 	nop.w
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 80177ea:	7ffb      	ldrb	r3, [r7, #31]
 80177ec:	4618      	mov	r0, r3
 80177ee:	f7ff fc03 	bl	8016ff8 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 80177f2:	69bb      	ldr	r3, [r7, #24]
 80177f4:	789b      	ldrb	r3, [r3, #2]
 80177f6:	79ba      	ldrb	r2, [r7, #6]
 80177f8:	429a      	cmp	r2, r3
 80177fa:	d12e      	bne.n	801785a <cdcd_xfer_cb+0x172>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 80177fc:	4b1e      	ldr	r3, [pc, #120]	@ (8017878 <cdcd_xfer_cb+0x190>)
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d003      	beq.n	801780a <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 8017802:	7ffb      	ldrb	r3, [r7, #31]
 8017804:	4618      	mov	r0, r3
 8017806:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 801780a:	7ffb      	ldrb	r3, [r7, #31]
 801780c:	4618      	mov	r0, r3
 801780e:	f7ff fc63 	bl	80170d8 <tud_cdc_n_write_flush>
 8017812:	4603      	mov	r3, r0
 8017814:	2b00      	cmp	r3, #0
 8017816:	d120      	bne.n	801785a <cdcd_xfer_cb+0x172>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8017818:	69bb      	ldr	r3, [r7, #24]
 801781a:	331c      	adds	r3, #28
 801781c:	4618      	mov	r0, r3
 801781e:	f000 fc3a 	bl	8018096 <tu_fifo_count>
 8017822:	4603      	mov	r3, r0
 8017824:	2b00      	cmp	r3, #0
 8017826:	d118      	bne.n	801785a <cdcd_xfer_cb+0x172>
 8017828:	683b      	ldr	r3, [r7, #0]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d015      	beq.n	801785a <cdcd_xfer_cb+0x172>
 801782e:	683b      	ldr	r3, [r7, #0]
 8017830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017834:	2b00      	cmp	r3, #0
 8017836:	d110      	bne.n	801785a <cdcd_xfer_cb+0x172>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8017838:	69bb      	ldr	r3, [r7, #24]
 801783a:	789a      	ldrb	r2, [r3, #2]
 801783c:	79fb      	ldrb	r3, [r7, #7]
 801783e:	4611      	mov	r1, r2
 8017840:	4618      	mov	r0, r3
 8017842:	f001 f93f 	bl	8018ac4 <usbd_edpt_claim>
 8017846:	4603      	mov	r3, r0
 8017848:	2b00      	cmp	r3, #0
 801784a:	d006      	beq.n	801785a <cdcd_xfer_cb+0x172>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 801784c:	69bb      	ldr	r3, [r7, #24]
 801784e:	7899      	ldrb	r1, [r3, #2]
 8017850:	79f8      	ldrb	r0, [r7, #7]
 8017852:	2300      	movs	r3, #0
 8017854:	2200      	movs	r2, #0
 8017856:	f001 f989 	bl	8018b6c <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 801785a:	2301      	movs	r3, #1
}
 801785c:	4618      	mov	r0, r3
 801785e:	3720      	adds	r7, #32
 8017860:	46bd      	mov	sp, r7
 8017862:	bd80      	pop	{r7, pc}
 8017864:	240084c8 	.word	0x240084c8
 8017868:	e000edf0 	.word	0xe000edf0
 801786c:	24008618 	.word	0x24008618
	...

0801787c <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 801787c:	b480      	push	{r7}
 801787e:	b085      	sub	sp, #20
 8017880:	af00      	add	r7, sp, #0
 8017882:	60f8      	str	r0, [r7, #12]
 8017884:	60b9      	str	r1, [r7, #8]
 8017886:	4611      	mov	r1, r2
 8017888:	461a      	mov	r2, r3
 801788a:	460b      	mov	r3, r1
 801788c:	80fb      	strh	r3, [r7, #6]
 801788e:	4613      	mov	r3, r2
 8017890:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8017892:	88fb      	ldrh	r3, [r7, #6]
 8017894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017898:	d901      	bls.n	801789e <tu_fifo_config+0x22>
 801789a:	2300      	movs	r3, #0
 801789c:	e01b      	b.n	80178d6 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	68ba      	ldr	r2, [r7, #8]
 80178a2:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	88fa      	ldrh	r2, [r7, #6]
 80178a8:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 80178aa:	88bb      	ldrh	r3, [r7, #4]
 80178ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80178b0:	b299      	uxth	r1, r3
 80178b2:	68fa      	ldr	r2, [r7, #12]
 80178b4:	88d3      	ldrh	r3, [r2, #6]
 80178b6:	f361 030e 	bfi	r3, r1, #0, #15
 80178ba:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 80178bc:	68fa      	ldr	r2, [r7, #12]
 80178be:	79d3      	ldrb	r3, [r2, #7]
 80178c0:	7e39      	ldrb	r1, [r7, #24]
 80178c2:	f361 13c7 	bfi	r3, r1, #7, #1
 80178c6:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	2200      	movs	r2, #0
 80178cc:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	2200      	movs	r2, #0
 80178d2:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80178d4:	2301      	movs	r3, #1
}
 80178d6:	4618      	mov	r0, r3
 80178d8:	3714      	adds	r7, #20
 80178da:	46bd      	mov	sp, r7
 80178dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e0:	4770      	bx	lr

080178e2 <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 80178e2:	b580      	push	{r7, lr}
 80178e4:	b08a      	sub	sp, #40	@ 0x28
 80178e6:	af00      	add	r7, sp, #0
 80178e8:	60f8      	str	r0, [r7, #12]
 80178ea:	60b9      	str	r1, [r7, #8]
 80178ec:	4613      	mov	r3, r2
 80178ee:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 80178f0:	68bb      	ldr	r3, [r7, #8]
 80178f2:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 80178f4:	88fb      	ldrh	r3, [r7, #6]
 80178f6:	089b      	lsrs	r3, r3, #2
 80178f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 80178fa:	e00b      	b.n	8017914 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 80178fc:	6a3b      	ldr	r3, [r7, #32]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	68fa      	ldr	r2, [r7, #12]
 8017902:	61ba      	str	r2, [r7, #24]
 8017904:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8017906:	69bb      	ldr	r3, [r7, #24]
 8017908:	697a      	ldr	r2, [r7, #20]
 801790a:	601a      	str	r2, [r3, #0]
}
 801790c:	bf00      	nop
    ff_buf += 4;
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	3304      	adds	r3, #4
 8017912:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8017914:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017916:	1e5a      	subs	r2, r3, #1
 8017918:	84fa      	strh	r2, [r7, #38]	@ 0x26
 801791a:	2b00      	cmp	r3, #0
 801791c:	d1ee      	bne.n	80178fc <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 801791e:	88fb      	ldrh	r3, [r7, #6]
 8017920:	b2db      	uxtb	r3, r3
 8017922:	f003 0303 	and.w	r3, r3, #3
 8017926:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8017928:	7ffb      	ldrb	r3, [r7, #31]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d009      	beq.n	8017942 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 801792e:	6a3b      	ldr	r3, [r7, #32]
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8017934:	7ffa      	ldrb	r2, [r7, #31]
 8017936:	f107 0310 	add.w	r3, r7, #16
 801793a:	4619      	mov	r1, r3
 801793c:	68f8      	ldr	r0, [r7, #12]
 801793e:	f006 f8e4 	bl	801db0a <memcpy>
  }
}
 8017942:	bf00      	nop
 8017944:	3728      	adds	r7, #40	@ 0x28
 8017946:	46bd      	mov	sp, r7
 8017948:	bd80      	pop	{r7, pc}

0801794a <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 801794a:	b580      	push	{r7, lr}
 801794c:	b08a      	sub	sp, #40	@ 0x28
 801794e:	af00      	add	r7, sp, #0
 8017950:	60f8      	str	r0, [r7, #12]
 8017952:	60b9      	str	r1, [r7, #8]
 8017954:	4613      	mov	r3, r2
 8017956:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 801795c:	88fb      	ldrh	r3, [r7, #6]
 801795e:	089b      	lsrs	r3, r3, #2
 8017960:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8017962:	e008      	b.n	8017976 <_ff_pull_const_addr+0x2c>
 8017964:	68bb      	ldr	r3, [r7, #8]
 8017966:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8017968:	69bb      	ldr	r3, [r7, #24]
 801796a:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 801796c:	6a3b      	ldr	r3, [r7, #32]
 801796e:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8017970:	68bb      	ldr	r3, [r7, #8]
 8017972:	3304      	adds	r3, #4
 8017974:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8017976:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017978:	1e5a      	subs	r2, r3, #1
 801797a:	84fa      	strh	r2, [r7, #38]	@ 0x26
 801797c:	2b00      	cmp	r3, #0
 801797e:	d1f1      	bne.n	8017964 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8017980:	88fb      	ldrh	r3, [r7, #6]
 8017982:	b2db      	uxtb	r3, r3
 8017984:	f003 0303 	and.w	r3, r3, #3
 8017988:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 801798a:	7ffb      	ldrb	r3, [r7, #31]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d00b      	beq.n	80179a8 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8017990:	2300      	movs	r3, #0
 8017992:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8017994:	7ffa      	ldrb	r2, [r7, #31]
 8017996:	f107 0314 	add.w	r3, r7, #20
 801799a:	68b9      	ldr	r1, [r7, #8]
 801799c:	4618      	mov	r0, r3
 801799e:	f006 f8b4 	bl	801db0a <memcpy>

    *reg_tx = tmp32;
 80179a2:	697a      	ldr	r2, [r7, #20]
 80179a4:	6a3b      	ldr	r3, [r7, #32]
 80179a6:	601a      	str	r2, [r3, #0]
  }
}
 80179a8:	bf00      	nop
 80179aa:	3728      	adds	r7, #40	@ 0x28
 80179ac:	46bd      	mov	sp, r7
 80179ae:	bd80      	pop	{r7, pc}

080179b0 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 80179b0:	b580      	push	{r7, lr}
 80179b2:	b084      	sub	sp, #16
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	60f8      	str	r0, [r7, #12]
 80179b8:	60b9      	str	r1, [r7, #8]
 80179ba:	4613      	mov	r3, r2
 80179bc:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	88fa      	ldrh	r2, [r7, #6]
 80179c4:	68f9      	ldr	r1, [r7, #12]
 80179c6:	88c9      	ldrh	r1, [r1, #6]
 80179c8:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80179cc:	b289      	uxth	r1, r1
 80179ce:	fb01 f202 	mul.w	r2, r1, r2
 80179d2:	1898      	adds	r0, r3, r2
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	88db      	ldrh	r3, [r3, #6]
 80179d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80179dc:	b29b      	uxth	r3, r3
 80179de:	461a      	mov	r2, r3
 80179e0:	68b9      	ldr	r1, [r7, #8]
 80179e2:	f006 f892 	bl	801db0a <memcpy>
}
 80179e6:	bf00      	nop
 80179e8:	3710      	adds	r7, #16
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bd80      	pop	{r7, pc}

080179ee <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80179ee:	b580      	push	{r7, lr}
 80179f0:	b08e      	sub	sp, #56	@ 0x38
 80179f2:	af00      	add	r7, sp, #0
 80179f4:	60f8      	str	r0, [r7, #12]
 80179f6:	60b9      	str	r1, [r7, #8]
 80179f8:	4611      	mov	r1, r2
 80179fa:	461a      	mov	r2, r3
 80179fc:	460b      	mov	r3, r1
 80179fe:	80fb      	strh	r3, [r7, #6]
 8017a00:	4613      	mov	r3, r2
 8017a02:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	889a      	ldrh	r2, [r3, #4]
 8017a08:	88bb      	ldrh	r3, [r7, #4]
 8017a0a:	1ad3      	subs	r3, r2, r3
 8017a0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8017a0e:	88fa      	ldrh	r2, [r7, #6]
 8017a10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017a12:	1ad3      	subs	r3, r2, r3
 8017a14:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	88db      	ldrh	r3, [r3, #6]
 8017a1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017a1e:	b29b      	uxth	r3, r3
 8017a20:	461a      	mov	r2, r3
 8017a22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017a24:	fb13 f302 	smulbb	r3, r3, r2
 8017a28:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	88db      	ldrh	r3, [r3, #6]
 8017a2e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017a32:	b29b      	uxth	r3, r3
 8017a34:	461a      	mov	r2, r3
 8017a36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017a38:	fb13 f302 	smulbb	r3, r3, r2
 8017a3c:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	88ba      	ldrh	r2, [r7, #4]
 8017a44:	68f9      	ldr	r1, [r7, #12]
 8017a46:	88c9      	ldrh	r1, [r1, #6]
 8017a48:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8017a4c:	b289      	uxth	r1, r1
 8017a4e:	fb01 f202 	mul.w	r2, r1, r2
 8017a52:	4413      	add	r3, r2
 8017a54:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8017a56:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d002      	beq.n	8017a64 <_ff_push_n+0x76>
 8017a5e:	2b01      	cmp	r3, #1
 8017a60:	d022      	beq.n	8017aa8 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8017a62:	e09e      	b.n	8017ba2 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8017a64:	88fa      	ldrh	r2, [r7, #6]
 8017a66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017a68:	429a      	cmp	r2, r3
 8017a6a:	d80d      	bhi.n	8017a88 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8017a6c:	88fb      	ldrh	r3, [r7, #6]
 8017a6e:	68fa      	ldr	r2, [r7, #12]
 8017a70:	88d2      	ldrh	r2, [r2, #6]
 8017a72:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017a76:	b292      	uxth	r2, r2
 8017a78:	fb02 f303 	mul.w	r3, r2, r3
 8017a7c:	461a      	mov	r2, r3
 8017a7e:	68b9      	ldr	r1, [r7, #8]
 8017a80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017a82:	f006 f842 	bl	801db0a <memcpy>
      break;
 8017a86:	e08c      	b.n	8017ba2 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8017a88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017a8a:	461a      	mov	r2, r3
 8017a8c:	68b9      	ldr	r1, [r7, #8]
 8017a8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017a90:	f006 f83b 	bl	801db0a <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	6818      	ldr	r0, [r3, #0]
 8017a98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017a9a:	68ba      	ldr	r2, [r7, #8]
 8017a9c:	4413      	add	r3, r2
 8017a9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017aa0:	4619      	mov	r1, r3
 8017aa2:	f006 f832 	bl	801db0a <memcpy>
      break;
 8017aa6:	e07c      	b.n	8017ba2 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8017aa8:	88fa      	ldrh	r2, [r7, #6]
 8017aaa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017aac:	429a      	cmp	r2, r3
 8017aae:	d80f      	bhi.n	8017ad0 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8017ab0:	68fb      	ldr	r3, [r7, #12]
 8017ab2:	88db      	ldrh	r3, [r3, #6]
 8017ab4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017ab8:	b29b      	uxth	r3, r3
 8017aba:	461a      	mov	r2, r3
 8017abc:	88fb      	ldrh	r3, [r7, #6]
 8017abe:	fb13 f302 	smulbb	r3, r3, r2
 8017ac2:	b29b      	uxth	r3, r3
 8017ac4:	461a      	mov	r2, r3
 8017ac6:	68b9      	ldr	r1, [r7, #8]
 8017ac8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017aca:	f7ff ff0a 	bl	80178e2 <_ff_push_const_addr>
      break;
 8017ace:	e067      	b.n	8017ba0 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8017ad0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017ad2:	f023 0303 	bic.w	r3, r3, #3
 8017ad6:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8017ad8:	8c3b      	ldrh	r3, [r7, #32]
 8017ada:	461a      	mov	r2, r3
 8017adc:	68b9      	ldr	r1, [r7, #8]
 8017ade:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017ae0:	f7ff feff 	bl	80178e2 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8017ae4:	8c3b      	ldrh	r3, [r7, #32]
 8017ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017ae8:	4413      	add	r3, r2
 8017aea:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8017aec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017aee:	b2db      	uxtb	r3, r3
 8017af0:	f003 0303 	and.w	r3, r3, #3
 8017af4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8017af8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d043      	beq.n	8017b88 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8017b00:	68bb      	ldr	r3, [r7, #8]
 8017b02:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8017b04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017b08:	b29b      	uxth	r3, r3
 8017b0a:	f1c3 0304 	rsb	r3, r3, #4
 8017b0e:	b29a      	uxth	r2, r3
 8017b10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017b12:	837b      	strh	r3, [r7, #26]
 8017b14:	4613      	mov	r3, r2
 8017b16:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8017b18:	8b7a      	ldrh	r2, [r7, #26]
 8017b1a:	8b3b      	ldrh	r3, [r7, #24]
 8017b1c:	4293      	cmp	r3, r2
 8017b1e:	bf28      	it	cs
 8017b20:	4613      	movcs	r3, r2
 8017b22:	b29b      	uxth	r3, r3
 8017b24:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8017b28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017b2c:	b29b      	uxth	r3, r3
 8017b2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017b30:	1ad3      	subs	r3, r2, r3
 8017b32:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8017b34:	69fb      	ldr	r3, [r7, #28]
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8017b3a:	f107 0314 	add.w	r3, r7, #20
 8017b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8017b40:	e007      	b.n	8017b52 <_ff_push_n+0x164>
 8017b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017b44:	1c53      	adds	r3, r2, #1
 8017b46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b4a:	1c59      	adds	r1, r3, #1
 8017b4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8017b4e:	7812      	ldrb	r2, [r2, #0]
 8017b50:	701a      	strb	r2, [r3, #0]
 8017b52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017b56:	1e5a      	subs	r2, r3, #1
 8017b58:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d1f0      	bne.n	8017b42 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8017b66:	e007      	b.n	8017b78 <_ff_push_n+0x18a>
 8017b68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017b6a:	1c53      	adds	r3, r2, #1
 8017b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b70:	1c59      	adds	r1, r3, #1
 8017b72:	6339      	str	r1, [r7, #48]	@ 0x30
 8017b74:	7812      	ldrb	r2, [r2, #0]
 8017b76:	701a      	strb	r2, [r3, #0]
 8017b78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017b7c:	1e5a      	subs	r2, r3, #1
 8017b7e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d1f0      	bne.n	8017b68 <_ff_push_n+0x17a>
 8017b86:	e002      	b.n	8017b8e <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8017b8e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d005      	beq.n	8017ba0 <_ff_push_n+0x1b2>
 8017b94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017b96:	461a      	mov	r2, r3
 8017b98:	68b9      	ldr	r1, [r7, #8]
 8017b9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017b9c:	f7ff fea1 	bl	80178e2 <_ff_push_const_addr>
      break;
 8017ba0:	bf00      	nop
  }
}
 8017ba2:	bf00      	nop
 8017ba4:	3738      	adds	r7, #56	@ 0x38
 8017ba6:	46bd      	mov	sp, r7
 8017ba8:	bd80      	pop	{r7, pc}

08017baa <_ff_pull_n>:
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
}

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8017baa:	b580      	push	{r7, lr}
 8017bac:	b08e      	sub	sp, #56	@ 0x38
 8017bae:	af00      	add	r7, sp, #0
 8017bb0:	60f8      	str	r0, [r7, #12]
 8017bb2:	60b9      	str	r1, [r7, #8]
 8017bb4:	4611      	mov	r1, r2
 8017bb6:	461a      	mov	r2, r3
 8017bb8:	460b      	mov	r3, r1
 8017bba:	80fb      	strh	r3, [r7, #6]
 8017bbc:	4613      	mov	r3, r2
 8017bbe:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	889a      	ldrh	r2, [r3, #4]
 8017bc4:	88bb      	ldrh	r3, [r7, #4]
 8017bc6:	1ad3      	subs	r3, r2, r3
 8017bc8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8017bca:	88fa      	ldrh	r2, [r7, #6]
 8017bcc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017bce:	1ad3      	subs	r3, r2, r3
 8017bd0:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	88db      	ldrh	r3, [r3, #6]
 8017bd6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017bda:	b29b      	uxth	r3, r3
 8017bdc:	461a      	mov	r2, r3
 8017bde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017be0:	fb13 f302 	smulbb	r3, r3, r2
 8017be4:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	88db      	ldrh	r3, [r3, #6]
 8017bea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017bee:	b29b      	uxth	r3, r3
 8017bf0:	461a      	mov	r2, r3
 8017bf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017bf4:	fb13 f302 	smulbb	r3, r3, r2
 8017bf8:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	88ba      	ldrh	r2, [r7, #4]
 8017c00:	68f9      	ldr	r1, [r7, #12]
 8017c02:	88c9      	ldrh	r1, [r1, #6]
 8017c04:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8017c08:	b289      	uxth	r1, r1
 8017c0a:	fb01 f202 	mul.w	r2, r1, r2
 8017c0e:	4413      	add	r3, r2
 8017c10:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8017c12:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d002      	beq.n	8017c20 <_ff_pull_n+0x76>
 8017c1a:	2b01      	cmp	r3, #1
 8017c1c:	d022      	beq.n	8017c64 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8017c1e:	e0a0      	b.n	8017d62 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8017c20:	88fa      	ldrh	r2, [r7, #6]
 8017c22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017c24:	429a      	cmp	r2, r3
 8017c26:	d80d      	bhi.n	8017c44 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8017c28:	88fb      	ldrh	r3, [r7, #6]
 8017c2a:	68fa      	ldr	r2, [r7, #12]
 8017c2c:	88d2      	ldrh	r2, [r2, #6]
 8017c2e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017c32:	b292      	uxth	r2, r2
 8017c34:	fb02 f303 	mul.w	r3, r2, r3
 8017c38:	461a      	mov	r2, r3
 8017c3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017c3c:	68b8      	ldr	r0, [r7, #8]
 8017c3e:	f005 ff64 	bl	801db0a <memcpy>
    break;
 8017c42:	e08e      	b.n	8017d62 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8017c44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017c46:	461a      	mov	r2, r3
 8017c48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017c4a:	68b8      	ldr	r0, [r7, #8]
 8017c4c:	f005 ff5d 	bl	801db0a <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8017c50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017c52:	68ba      	ldr	r2, [r7, #8]
 8017c54:	18d0      	adds	r0, r2, r3
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017c5c:	4619      	mov	r1, r3
 8017c5e:	f005 ff54 	bl	801db0a <memcpy>
    break;
 8017c62:	e07e      	b.n	8017d62 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8017c64:	88fa      	ldrh	r2, [r7, #6]
 8017c66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017c68:	429a      	cmp	r2, r3
 8017c6a:	d80f      	bhi.n	8017c8c <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	88db      	ldrh	r3, [r3, #6]
 8017c70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017c74:	b29b      	uxth	r3, r3
 8017c76:	461a      	mov	r2, r3
 8017c78:	88fb      	ldrh	r3, [r7, #6]
 8017c7a:	fb13 f302 	smulbb	r3, r3, r2
 8017c7e:	b29b      	uxth	r3, r3
 8017c80:	461a      	mov	r2, r3
 8017c82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017c84:	68b8      	ldr	r0, [r7, #8]
 8017c86:	f7ff fe60 	bl	801794a <_ff_pull_const_addr>
    break;
 8017c8a:	e069      	b.n	8017d60 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8017c8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017c8e:	f023 0303 	bic.w	r3, r3, #3
 8017c92:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8017c94:	8c3b      	ldrh	r3, [r7, #32]
 8017c96:	461a      	mov	r2, r3
 8017c98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017c9a:	68b8      	ldr	r0, [r7, #8]
 8017c9c:	f7ff fe55 	bl	801794a <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8017ca0:	8c3b      	ldrh	r3, [r7, #32]
 8017ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017ca4:	4413      	add	r3, r2
 8017ca6:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8017ca8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017caa:	b2db      	uxtb	r3, r3
 8017cac:	f003 0303 	and.w	r3, r3, #3
 8017cb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8017cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d045      	beq.n	8017d48 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8017cbc:	68bb      	ldr	r3, [r7, #8]
 8017cbe:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8017cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017cc4:	b29b      	uxth	r3, r3
 8017cc6:	f1c3 0304 	rsb	r3, r3, #4
 8017cca:	b29a      	uxth	r2, r3
 8017ccc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017cce:	837b      	strh	r3, [r7, #26]
 8017cd0:	4613      	mov	r3, r2
 8017cd2:	833b      	strh	r3, [r7, #24]
 8017cd4:	8b7a      	ldrh	r2, [r7, #26]
 8017cd6:	8b3b      	ldrh	r3, [r7, #24]
 8017cd8:	4293      	cmp	r3, r2
 8017cda:	bf28      	it	cs
 8017cdc:	4613      	movcs	r3, r2
 8017cde:	b29b      	uxth	r3, r3
 8017ce0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8017ce4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017ce8:	b29b      	uxth	r3, r3
 8017cea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017cec:	1ad3      	subs	r3, r2, r3
 8017cee:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8017cf4:	f107 0314 	add.w	r3, r7, #20
 8017cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8017cfa:	e007      	b.n	8017d0c <_ff_pull_n+0x162>
 8017cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017cfe:	1c53      	adds	r3, r2, #1
 8017d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8017d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d04:	1c59      	adds	r1, r3, #1
 8017d06:	62b9      	str	r1, [r7, #40]	@ 0x28
 8017d08:	7812      	ldrb	r2, [r2, #0]
 8017d0a:	701a      	strb	r2, [r3, #0]
 8017d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017d10:	1e5a      	subs	r2, r3, #1
 8017d12:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d1f0      	bne.n	8017cfc <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8017d20:	e007      	b.n	8017d32 <_ff_pull_n+0x188>
 8017d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017d24:	1c53      	adds	r3, r2, #1
 8017d26:	633b      	str	r3, [r7, #48]	@ 0x30
 8017d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d2a:	1c59      	adds	r1, r3, #1
 8017d2c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8017d2e:	7812      	ldrb	r2, [r2, #0]
 8017d30:	701a      	strb	r2, [r3, #0]
 8017d32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8017d36:	1e5a      	subs	r2, r3, #1
 8017d38:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d1f0      	bne.n	8017d22 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8017d40:	697a      	ldr	r2, [r7, #20]
 8017d42:	69fb      	ldr	r3, [r7, #28]
 8017d44:	601a      	str	r2, [r3, #0]
 8017d46:	e002      	b.n	8017d4e <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8017d4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d005      	beq.n	8017d60 <_ff_pull_n+0x1b6>
 8017d54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017d56:	461a      	mov	r2, r3
 8017d58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017d5a:	68b8      	ldr	r0, [r7, #8]
 8017d5c:	f7ff fdf5 	bl	801794a <_ff_pull_const_addr>
    break;
 8017d60:	bf00      	nop
  }
}
 8017d62:	bf00      	nop
 8017d64:	3738      	adds	r7, #56	@ 0x38
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}

08017d6a <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8017d6a:	b480      	push	{r7}
 8017d6c:	b085      	sub	sp, #20
 8017d6e:	af00      	add	r7, sp, #0
 8017d70:	4603      	mov	r3, r0
 8017d72:	80fb      	strh	r3, [r7, #6]
 8017d74:	460b      	mov	r3, r1
 8017d76:	80bb      	strh	r3, [r7, #4]
 8017d78:	4613      	mov	r3, r2
 8017d7a:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8017d7c:	88ba      	ldrh	r2, [r7, #4]
 8017d7e:	887b      	ldrh	r3, [r7, #2]
 8017d80:	4413      	add	r3, r2
 8017d82:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8017d84:	88ba      	ldrh	r2, [r7, #4]
 8017d86:	89fb      	ldrh	r3, [r7, #14]
 8017d88:	429a      	cmp	r2, r3
 8017d8a:	d804      	bhi.n	8017d96 <advance_index+0x2c>
 8017d8c:	89fa      	ldrh	r2, [r7, #14]
 8017d8e:	88fb      	ldrh	r3, [r7, #6]
 8017d90:	005b      	lsls	r3, r3, #1
 8017d92:	429a      	cmp	r2, r3
 8017d94:	db08      	blt.n	8017da8 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8017d96:	88fb      	ldrh	r3, [r7, #6]
 8017d98:	005b      	lsls	r3, r3, #1
 8017d9a:	b29b      	uxth	r3, r3
 8017d9c:	425b      	negs	r3, r3
 8017d9e:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8017da0:	89fa      	ldrh	r2, [r7, #14]
 8017da2:	89bb      	ldrh	r3, [r7, #12]
 8017da4:	4413      	add	r3, r2
 8017da6:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8017da8:	89fb      	ldrh	r3, [r7, #14]
}
 8017daa:	4618      	mov	r0, r3
 8017dac:	3714      	adds	r7, #20
 8017dae:	46bd      	mov	sp, r7
 8017db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db4:	4770      	bx	lr

08017db6 <_tu_fifo_peek_n>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8017db6:	b580      	push	{r7, lr}
 8017db8:	b08c      	sub	sp, #48	@ 0x30
 8017dba:	af02      	add	r7, sp, #8
 8017dbc:	60f8      	str	r0, [r7, #12]
 8017dbe:	60b9      	str	r1, [r7, #8]
 8017dc0:	4611      	mov	r1, r2
 8017dc2:	461a      	mov	r2, r3
 8017dc4:	460b      	mov	r3, r1
 8017dc6:	80fb      	strh	r3, [r7, #6]
 8017dc8:	4613      	mov	r3, r2
 8017dca:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	889b      	ldrh	r3, [r3, #4]
 8017dd0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8017dd2:	88bb      	ldrh	r3, [r7, #4]
 8017dd4:	843b      	strh	r3, [r7, #32]
 8017dd6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017dd8:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8017dda:	8c3a      	ldrh	r2, [r7, #32]
 8017ddc:	8bfb      	ldrh	r3, [r7, #30]
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d304      	bcc.n	8017dec <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8017de2:	8c3a      	ldrh	r2, [r7, #32]
 8017de4:	8bfb      	ldrh	r3, [r7, #30]
 8017de6:	1ad3      	subs	r3, r2, r3
 8017de8:	b29b      	uxth	r3, r3
 8017dea:	e008      	b.n	8017dfe <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8017dec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017dee:	005b      	lsls	r3, r3, #1
 8017df0:	b29a      	uxth	r2, r3
 8017df2:	8c39      	ldrh	r1, [r7, #32]
 8017df4:	8bfb      	ldrh	r3, [r7, #30]
 8017df6:	1acb      	subs	r3, r1, r3
 8017df8:	b29b      	uxth	r3, r3
 8017dfa:	4413      	add	r3, r2
 8017dfc:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8017dfe:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8017e00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d101      	bne.n	8017e0a <_tu_fifo_peek_n+0x54>
 8017e06:	2300      	movs	r3, #0
 8017e08:	e041      	b.n	8017e8e <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	889b      	ldrh	r3, [r3, #4]
 8017e0e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017e10:	429a      	cmp	r2, r3
 8017e12:	d91b      	bls.n	8017e4c <_tu_fifo_peek_n+0x96>
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	61bb      	str	r3, [r7, #24]
 8017e18:	88bb      	ldrh	r3, [r7, #4]
 8017e1a:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8017e1c:	69bb      	ldr	r3, [r7, #24]
 8017e1e:	889b      	ldrh	r3, [r3, #4]
 8017e20:	8afa      	ldrh	r2, [r7, #22]
 8017e22:	429a      	cmp	r2, r3
 8017e24:	d305      	bcc.n	8017e32 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8017e26:	69bb      	ldr	r3, [r7, #24]
 8017e28:	889b      	ldrh	r3, [r3, #4]
 8017e2a:	8afa      	ldrh	r2, [r7, #22]
 8017e2c:	1ad3      	subs	r3, r2, r3
 8017e2e:	82bb      	strh	r3, [r7, #20]
 8017e30:	e004      	b.n	8017e3c <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8017e32:	69bb      	ldr	r3, [r7, #24]
 8017e34:	889a      	ldrh	r2, [r3, #4]
 8017e36:	8afb      	ldrh	r3, [r7, #22]
 8017e38:	4413      	add	r3, r2
 8017e3a:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8017e3c:	69bb      	ldr	r3, [r7, #24]
 8017e3e:	8aba      	ldrh	r2, [r7, #20]
 8017e40:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8017e42:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8017e44:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	889b      	ldrh	r3, [r3, #4]
 8017e4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8017e4c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017e4e:	88fb      	ldrh	r3, [r7, #6]
 8017e50:	429a      	cmp	r2, r3
 8017e52:	d201      	bcs.n	8017e58 <_tu_fifo_peek_n+0xa2>
 8017e54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017e56:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	889b      	ldrh	r3, [r3, #4]
 8017e5c:	827b      	strh	r3, [r7, #18]
 8017e5e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017e60:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8017e62:	e003      	b.n	8017e6c <_tu_fifo_peek_n+0xb6>
 8017e64:	8a3a      	ldrh	r2, [r7, #16]
 8017e66:	8a7b      	ldrh	r3, [r7, #18]
 8017e68:	1ad3      	subs	r3, r2, r3
 8017e6a:	823b      	strh	r3, [r7, #16]
 8017e6c:	8a7a      	ldrh	r2, [r7, #18]
 8017e6e:	8a3b      	ldrh	r3, [r7, #16]
 8017e70:	429a      	cmp	r2, r3
 8017e72:	d9f7      	bls.n	8017e64 <_tu_fifo_peek_n+0xae>
  return idx;
 8017e74:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8017e76:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8017e78:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8017e7a:	88fa      	ldrh	r2, [r7, #6]
 8017e7c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017e80:	9300      	str	r3, [sp, #0]
 8017e82:	460b      	mov	r3, r1
 8017e84:	68b9      	ldr	r1, [r7, #8]
 8017e86:	68f8      	ldr	r0, [r7, #12]
 8017e88:	f7ff fe8f 	bl	8017baa <_ff_pull_n>

  return n;
 8017e8c:	88fb      	ldrh	r3, [r7, #6]
}
 8017e8e:	4618      	mov	r0, r3
 8017e90:	3728      	adds	r7, #40	@ 0x28
 8017e92:	46bd      	mov	sp, r7
 8017e94:	bd80      	pop	{r7, pc}

08017e96 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8017e96:	b580      	push	{r7, lr}
 8017e98:	b092      	sub	sp, #72	@ 0x48
 8017e9a:	af02      	add	r7, sp, #8
 8017e9c:	60f8      	str	r0, [r7, #12]
 8017e9e:	60b9      	str	r1, [r7, #8]
 8017ea0:	4611      	mov	r1, r2
 8017ea2:	461a      	mov	r2, r3
 8017ea4:	460b      	mov	r3, r1
 8017ea6:	80fb      	strh	r3, [r7, #6]
 8017ea8:	4613      	mov	r3, r2
 8017eaa:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8017eac:	88fb      	ldrh	r3, [r7, #6]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d101      	bne.n	8017eb6 <_tu_fifo_write_n+0x20>
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	e0bc      	b.n	8018030 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	891b      	ldrh	r3, [r3, #8]
 8017eba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	895b      	ldrh	r3, [r3, #10]
 8017ec0:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8017ec2:	68bb      	ldr	r3, [r7, #8]
 8017ec4:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	79db      	ldrb	r3, [r3, #7]
 8017eca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8017ece:	b2db      	uxtb	r3, r3
 8017ed0:	f083 0301 	eor.w	r3, r3, #1
 8017ed4:	b2db      	uxtb	r3, r3
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d036      	beq.n	8017f48 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	889b      	ldrh	r3, [r3, #4]
 8017ede:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8017ee0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017ee2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8017ee4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017ee6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017ee8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017eea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8017eec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017eee:	847b      	strh	r3, [r7, #34]	@ 0x22
 8017ef0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017ef2:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8017ef4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017ef6:	8c3b      	ldrh	r3, [r7, #32]
 8017ef8:	429a      	cmp	r2, r3
 8017efa:	d304      	bcc.n	8017f06 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8017efc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017efe:	8c3b      	ldrh	r3, [r7, #32]
 8017f00:	1ad3      	subs	r3, r2, r3
 8017f02:	b29b      	uxth	r3, r3
 8017f04:	e008      	b.n	8017f18 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8017f06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017f08:	005b      	lsls	r3, r3, #1
 8017f0a:	b29a      	uxth	r2, r3
 8017f0c:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8017f0e:	8c3b      	ldrh	r3, [r7, #32]
 8017f10:	1acb      	subs	r3, r1, r3
 8017f12:	b29b      	uxth	r3, r3
 8017f14:	4413      	add	r3, r2
 8017f16:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8017f18:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8017f1a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8017f1c:	8bfb      	ldrh	r3, [r7, #30]
 8017f1e:	429a      	cmp	r2, r3
 8017f20:	d904      	bls.n	8017f2c <_tu_fifo_write_n+0x96>
 8017f22:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8017f24:	8bfb      	ldrh	r3, [r7, #30]
 8017f26:	1ad3      	subs	r3, r2, r3
 8017f28:	b29b      	uxth	r3, r3
 8017f2a:	e000      	b.n	8017f2e <_tu_fifo_write_n+0x98>
 8017f2c:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8017f2e:	867b      	strh	r3, [r7, #50]	@ 0x32
 8017f30:	88fb      	ldrh	r3, [r7, #6]
 8017f32:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8017f34:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8017f36:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8017f38:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8017f3a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017f3c:	4293      	cmp	r3, r2
 8017f3e:	bf28      	it	cs
 8017f40:	4613      	movcs	r3, r2
 8017f42:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8017f44:	80fb      	strh	r3, [r7, #6]
 8017f46:	e04b      	b.n	8017fe0 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	889b      	ldrh	r3, [r3, #4]
 8017f4c:	88fa      	ldrh	r2, [r7, #6]
 8017f4e:	429a      	cmp	r2, r3
 8017f50:	d317      	bcc.n	8017f82 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8017f52:	797b      	ldrb	r3, [r7, #5]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d10e      	bne.n	8017f76 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8017f58:	88fb      	ldrh	r3, [r7, #6]
 8017f5a:	68fa      	ldr	r2, [r7, #12]
 8017f5c:	8892      	ldrh	r2, [r2, #4]
 8017f5e:	1a9b      	subs	r3, r3, r2
 8017f60:	68fa      	ldr	r2, [r7, #12]
 8017f62:	88d2      	ldrh	r2, [r2, #6]
 8017f64:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8017f68:	b292      	uxth	r2, r2
 8017f6a:	fb02 f303 	mul.w	r3, r2, r3
 8017f6e:	461a      	mov	r2, r3
 8017f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f72:	4413      	add	r3, r2
 8017f74:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	889b      	ldrh	r3, [r3, #4]
 8017f7a:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8017f7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017f7e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8017f80:	e02e      	b.n	8017fe0 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	889b      	ldrh	r3, [r3, #4]
 8017f86:	83bb      	strh	r3, [r7, #28]
 8017f88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017f8a:	837b      	strh	r3, [r7, #26]
 8017f8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017f8e:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8017f90:	8b7a      	ldrh	r2, [r7, #26]
 8017f92:	8b3b      	ldrh	r3, [r7, #24]
 8017f94:	429a      	cmp	r2, r3
 8017f96:	d304      	bcc.n	8017fa2 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8017f98:	8b7a      	ldrh	r2, [r7, #26]
 8017f9a:	8b3b      	ldrh	r3, [r7, #24]
 8017f9c:	1ad3      	subs	r3, r2, r3
 8017f9e:	b29b      	uxth	r3, r3
 8017fa0:	e008      	b.n	8017fb4 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8017fa2:	8bbb      	ldrh	r3, [r7, #28]
 8017fa4:	005b      	lsls	r3, r3, #1
 8017fa6:	b29a      	uxth	r2, r3
 8017fa8:	8b79      	ldrh	r1, [r7, #26]
 8017faa:	8b3b      	ldrh	r3, [r7, #24]
 8017fac:	1acb      	subs	r3, r1, r3
 8017fae:	b29b      	uxth	r3, r3
 8017fb0:	4413      	add	r3, r2
 8017fb2:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8017fb4:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8017fb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8017fb8:	88fb      	ldrh	r3, [r7, #6]
 8017fba:	441a      	add	r2, r3
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	889b      	ldrh	r3, [r3, #4]
 8017fc0:	005b      	lsls	r3, r3, #1
 8017fc2:	429a      	cmp	r2, r3
 8017fc4:	db0c      	blt.n	8017fe0 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	8898      	ldrh	r0, [r3, #4]
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	889a      	ldrh	r2, [r3, #4]
 8017fce:	88fb      	ldrh	r3, [r7, #6]
 8017fd0:	1ad3      	subs	r3, r2, r3
 8017fd2:	b29a      	uxth	r2, r3
 8017fd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017fd6:	4619      	mov	r1, r3
 8017fd8:	f7ff fec7 	bl	8017d6a <advance_index>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8017fe0:	88fb      	ldrh	r3, [r7, #6]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d023      	beq.n	801802e <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	889b      	ldrh	r3, [r3, #4]
 8017fea:	82fb      	strh	r3, [r7, #22]
 8017fec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017fee:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8017ff0:	e003      	b.n	8017ffa <_tu_fifo_write_n+0x164>
 8017ff2:	8aba      	ldrh	r2, [r7, #20]
 8017ff4:	8afb      	ldrh	r3, [r7, #22]
 8017ff6:	1ad3      	subs	r3, r2, r3
 8017ff8:	82bb      	strh	r3, [r7, #20]
 8017ffa:	8afa      	ldrh	r2, [r7, #22]
 8017ffc:	8abb      	ldrh	r3, [r7, #20]
 8017ffe:	429a      	cmp	r2, r3
 8018000:	d9f7      	bls.n	8017ff2 <_tu_fifo_write_n+0x15c>
  return idx;
 8018002:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8018004:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8018006:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8018008:	88fa      	ldrh	r2, [r7, #6]
 801800a:	797b      	ldrb	r3, [r7, #5]
 801800c:	9300      	str	r3, [sp, #0]
 801800e:	460b      	mov	r3, r1
 8018010:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018012:	68f8      	ldr	r0, [r7, #12]
 8018014:	f7ff fceb 	bl	80179ee <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	889b      	ldrh	r3, [r3, #4]
 801801c:	88fa      	ldrh	r2, [r7, #6]
 801801e:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8018020:	4618      	mov	r0, r3
 8018022:	f7ff fea2 	bl	8017d6a <advance_index>
 8018026:	4603      	mov	r3, r0
 8018028:	461a      	mov	r2, r3
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 801802e:	88fb      	ldrh	r3, [r7, #6]
}
 8018030:	4618      	mov	r0, r3
 8018032:	3740      	adds	r7, #64	@ 0x40
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}

08018038 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8018038:	b580      	push	{r7, lr}
 801803a:	b086      	sub	sp, #24
 801803c:	af02      	add	r7, sp, #8
 801803e:	60f8      	str	r0, [r7, #12]
 8018040:	60b9      	str	r1, [r7, #8]
 8018042:	4611      	mov	r1, r2
 8018044:	461a      	mov	r2, r3
 8018046:	460b      	mov	r3, r1
 8018048:	80fb      	strh	r3, [r7, #6]
 801804a:	4613      	mov	r3, r2
 801804c:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	891b      	ldrh	r3, [r3, #8]
 8018052:	b298      	uxth	r0, r3
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	895b      	ldrh	r3, [r3, #10]
 8018058:	b29b      	uxth	r3, r3
 801805a:	88f9      	ldrh	r1, [r7, #6]
 801805c:	797a      	ldrb	r2, [r7, #5]
 801805e:	9201      	str	r2, [sp, #4]
 8018060:	9300      	str	r3, [sp, #0]
 8018062:	4603      	mov	r3, r0
 8018064:	460a      	mov	r2, r1
 8018066:	68b9      	ldr	r1, [r7, #8]
 8018068:	68f8      	ldr	r0, [r7, #12]
 801806a:	f7ff fea4 	bl	8017db6 <_tu_fifo_peek_n>
 801806e:	4603      	mov	r3, r0
 8018070:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	8898      	ldrh	r0, [r3, #4]
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	895b      	ldrh	r3, [r3, #10]
 801807a:	b29b      	uxth	r3, r3
 801807c:	88fa      	ldrh	r2, [r7, #6]
 801807e:	4619      	mov	r1, r3
 8018080:	f7ff fe73 	bl	8017d6a <advance_index>
 8018084:	4603      	mov	r3, r0
 8018086:	461a      	mov	r2, r3
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 801808c:	88fb      	ldrh	r3, [r7, #6]
}
 801808e:	4618      	mov	r0, r3
 8018090:	3710      	adds	r7, #16
 8018092:	46bd      	mov	sp, r7
 8018094:	bd80      	pop	{r7, pc}

08018096 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8018096:	b480      	push	{r7}
 8018098:	b087      	sub	sp, #28
 801809a:	af00      	add	r7, sp, #0
 801809c:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	8899      	ldrh	r1, [r3, #4]
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	891b      	ldrh	r3, [r3, #8]
 80180a6:	b29a      	uxth	r2, r3
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	895b      	ldrh	r3, [r3, #10]
 80180ac:	b29b      	uxth	r3, r3
 80180ae:	8279      	strh	r1, [r7, #18]
 80180b0:	823a      	strh	r2, [r7, #16]
 80180b2:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 80180b4:	8a3a      	ldrh	r2, [r7, #16]
 80180b6:	89fb      	ldrh	r3, [r7, #14]
 80180b8:	429a      	cmp	r2, r3
 80180ba:	d304      	bcc.n	80180c6 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80180bc:	8a3a      	ldrh	r2, [r7, #16]
 80180be:	89fb      	ldrh	r3, [r7, #14]
 80180c0:	1ad3      	subs	r3, r2, r3
 80180c2:	b29b      	uxth	r3, r3
 80180c4:	e008      	b.n	80180d8 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80180c6:	8a7b      	ldrh	r3, [r7, #18]
 80180c8:	005b      	lsls	r3, r3, #1
 80180ca:	b29a      	uxth	r2, r3
 80180cc:	8a39      	ldrh	r1, [r7, #16]
 80180ce:	89fb      	ldrh	r3, [r7, #14]
 80180d0:	1acb      	subs	r3, r1, r3
 80180d2:	b29b      	uxth	r3, r3
 80180d4:	4413      	add	r3, r2
 80180d6:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80180d8:	687a      	ldr	r2, [r7, #4]
 80180da:	8892      	ldrh	r2, [r2, #4]
 80180dc:	82fb      	strh	r3, [r7, #22]
 80180de:	4613      	mov	r3, r2
 80180e0:	82bb      	strh	r3, [r7, #20]
 80180e2:	8afa      	ldrh	r2, [r7, #22]
 80180e4:	8abb      	ldrh	r3, [r7, #20]
 80180e6:	4293      	cmp	r3, r2
 80180e8:	bf28      	it	cs
 80180ea:	4613      	movcs	r3, r2
 80180ec:	b29b      	uxth	r3, r3
}
 80180ee:	4618      	mov	r0, r3
 80180f0:	371c      	adds	r7, #28
 80180f2:	46bd      	mov	sp, r7
 80180f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f8:	4770      	bx	lr

080180fa <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 80180fa:	b480      	push	{r7}
 80180fc:	b083      	sub	sp, #12
 80180fe:	af00      	add	r7, sp, #0
 8018100:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	891b      	ldrh	r3, [r3, #8]
 8018106:	b29a      	uxth	r2, r3
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	895b      	ldrh	r3, [r3, #10]
 801810c:	b29b      	uxth	r3, r3
 801810e:	429a      	cmp	r2, r3
 8018110:	bf0c      	ite	eq
 8018112:	2301      	moveq	r3, #1
 8018114:	2300      	movne	r3, #0
 8018116:	b2db      	uxtb	r3, r3
}
 8018118:	4618      	mov	r0, r3
 801811a:	370c      	adds	r7, #12
 801811c:	46bd      	mov	sp, r7
 801811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018122:	4770      	bx	lr

08018124 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8018124:	b480      	push	{r7}
 8018126:	b085      	sub	sp, #20
 8018128:	af00      	add	r7, sp, #0
 801812a:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	8899      	ldrh	r1, [r3, #4]
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	891b      	ldrh	r3, [r3, #8]
 8018134:	b29a      	uxth	r2, r3
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	895b      	ldrh	r3, [r3, #10]
 801813a:	b29b      	uxth	r3, r3
 801813c:	81f9      	strh	r1, [r7, #14]
 801813e:	81ba      	strh	r2, [r7, #12]
 8018140:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8018142:	89ba      	ldrh	r2, [r7, #12]
 8018144:	897b      	ldrh	r3, [r7, #10]
 8018146:	429a      	cmp	r2, r3
 8018148:	d304      	bcc.n	8018154 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 801814a:	89ba      	ldrh	r2, [r7, #12]
 801814c:	897b      	ldrh	r3, [r7, #10]
 801814e:	1ad3      	subs	r3, r2, r3
 8018150:	b29b      	uxth	r3, r3
 8018152:	e008      	b.n	8018166 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8018154:	89fb      	ldrh	r3, [r7, #14]
 8018156:	005b      	lsls	r3, r3, #1
 8018158:	b29a      	uxth	r2, r3
 801815a:	89b9      	ldrh	r1, [r7, #12]
 801815c:	897b      	ldrh	r3, [r7, #10]
 801815e:	1acb      	subs	r3, r1, r3
 8018160:	b29b      	uxth	r3, r3
 8018162:	4413      	add	r3, r2
 8018164:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8018166:	687a      	ldr	r2, [r7, #4]
 8018168:	8892      	ldrh	r2, [r2, #4]
 801816a:	4293      	cmp	r3, r2
 801816c:	bf2c      	ite	cs
 801816e:	2301      	movcs	r3, #1
 8018170:	2300      	movcc	r3, #0
 8018172:	b2db      	uxtb	r3, r3
}
 8018174:	4618      	mov	r0, r3
 8018176:	3714      	adds	r7, #20
 8018178:	46bd      	mov	sp, r7
 801817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817e:	4770      	bx	lr

08018180 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8018180:	b480      	push	{r7}
 8018182:	b087      	sub	sp, #28
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	8899      	ldrh	r1, [r3, #4]
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	891b      	ldrh	r3, [r3, #8]
 8018190:	b29a      	uxth	r2, r3
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	895b      	ldrh	r3, [r3, #10]
 8018196:	b29b      	uxth	r3, r3
 8018198:	82f9      	strh	r1, [r7, #22]
 801819a:	82ba      	strh	r2, [r7, #20]
 801819c:	827b      	strh	r3, [r7, #18]
 801819e:	8afb      	ldrh	r3, [r7, #22]
 80181a0:	823b      	strh	r3, [r7, #16]
 80181a2:	8abb      	ldrh	r3, [r7, #20]
 80181a4:	81fb      	strh	r3, [r7, #14]
 80181a6:	8a7b      	ldrh	r3, [r7, #18]
 80181a8:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 80181aa:	89fa      	ldrh	r2, [r7, #14]
 80181ac:	89bb      	ldrh	r3, [r7, #12]
 80181ae:	429a      	cmp	r2, r3
 80181b0:	d304      	bcc.n	80181bc <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 80181b2:	89fa      	ldrh	r2, [r7, #14]
 80181b4:	89bb      	ldrh	r3, [r7, #12]
 80181b6:	1ad3      	subs	r3, r2, r3
 80181b8:	b29b      	uxth	r3, r3
 80181ba:	e008      	b.n	80181ce <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80181bc:	8a3b      	ldrh	r3, [r7, #16]
 80181be:	005b      	lsls	r3, r3, #1
 80181c0:	b29a      	uxth	r2, r3
 80181c2:	89f9      	ldrh	r1, [r7, #14]
 80181c4:	89bb      	ldrh	r3, [r7, #12]
 80181c6:	1acb      	subs	r3, r1, r3
 80181c8:	b29b      	uxth	r3, r3
 80181ca:	4413      	add	r3, r2
 80181cc:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80181ce:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 80181d0:	8afa      	ldrh	r2, [r7, #22]
 80181d2:	897b      	ldrh	r3, [r7, #10]
 80181d4:	429a      	cmp	r2, r3
 80181d6:	d904      	bls.n	80181e2 <tu_fifo_remaining+0x62>
 80181d8:	8afa      	ldrh	r2, [r7, #22]
 80181da:	897b      	ldrh	r3, [r7, #10]
 80181dc:	1ad3      	subs	r3, r2, r3
 80181de:	b29b      	uxth	r3, r3
 80181e0:	e000      	b.n	80181e4 <tu_fifo_remaining+0x64>
 80181e2:	2300      	movs	r3, #0
}
 80181e4:	4618      	mov	r0, r3
 80181e6:	371c      	adds	r7, #28
 80181e8:	46bd      	mov	sp, r7
 80181ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ee:	4770      	bx	lr

080181f0 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b084      	sub	sp, #16
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	60f8      	str	r0, [r7, #12]
 80181f8:	60b9      	str	r1, [r7, #8]
 80181fa:	4613      	mov	r3, r2
 80181fc:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 80181fe:	88fa      	ldrh	r2, [r7, #6]
 8018200:	2300      	movs	r3, #0
 8018202:	68b9      	ldr	r1, [r7, #8]
 8018204:	68f8      	ldr	r0, [r7, #12]
 8018206:	f7ff ff17 	bl	8018038 <_tu_fifo_read_n>
 801820a:	4603      	mov	r3, r0
}
 801820c:	4618      	mov	r0, r3
 801820e:	3710      	adds	r7, #16
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}

08018214 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b084      	sub	sp, #16
 8018218:	af00      	add	r7, sp, #0
 801821a:	60f8      	str	r0, [r7, #12]
 801821c:	60b9      	str	r1, [r7, #8]
 801821e:	4613      	mov	r3, r2
 8018220:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8018222:	88fa      	ldrh	r2, [r7, #6]
 8018224:	2301      	movs	r3, #1
 8018226:	68b9      	ldr	r1, [r7, #8]
 8018228:	68f8      	ldr	r0, [r7, #12]
 801822a:	f7ff ff05 	bl	8018038 <_tu_fifo_read_n>
 801822e:	4603      	mov	r3, r0
}
 8018230:	4618      	mov	r0, r3
 8018232:	3710      	adds	r7, #16
 8018234:	46bd      	mov	sp, r7
 8018236:	bd80      	pop	{r7, pc}

08018238 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8018238:	b580      	push	{r7, lr}
 801823a:	b086      	sub	sp, #24
 801823c:	af00      	add	r7, sp, #0
 801823e:	6078      	str	r0, [r7, #4]
 8018240:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	891b      	ldrh	r3, [r3, #8]
 8018246:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8018248:	6878      	ldr	r0, [r7, #4]
 801824a:	f7ff ff6b 	bl	8018124 <tu_fifo_full>
 801824e:	4603      	mov	r3, r0
 8018250:	2b00      	cmp	r3, #0
 8018252:	d00c      	beq.n	801826e <tu_fifo_write+0x36>
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	79db      	ldrb	r3, [r3, #7]
 8018258:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801825c:	b2db      	uxtb	r3, r3
 801825e:	f083 0301 	eor.w	r3, r3, #1
 8018262:	b2db      	uxtb	r3, r3
 8018264:	2b00      	cmp	r3, #0
 8018266:	d002      	beq.n	801826e <tu_fifo_write+0x36>
  {
    ret = false;
 8018268:	2300      	movs	r3, #0
 801826a:	75fb      	strb	r3, [r7, #23]
 801826c:	e022      	b.n	80182b4 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	889b      	ldrh	r3, [r3, #4]
 8018272:	823b      	strh	r3, [r7, #16]
 8018274:	8abb      	ldrh	r3, [r7, #20]
 8018276:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8018278:	e003      	b.n	8018282 <tu_fifo_write+0x4a>
 801827a:	89fa      	ldrh	r2, [r7, #14]
 801827c:	8a3b      	ldrh	r3, [r7, #16]
 801827e:	1ad3      	subs	r3, r2, r3
 8018280:	81fb      	strh	r3, [r7, #14]
 8018282:	8a3a      	ldrh	r2, [r7, #16]
 8018284:	89fb      	ldrh	r3, [r7, #14]
 8018286:	429a      	cmp	r2, r3
 8018288:	d9f7      	bls.n	801827a <tu_fifo_write+0x42>
  return idx;
 801828a:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 801828c:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 801828e:	8a7b      	ldrh	r3, [r7, #18]
 8018290:	461a      	mov	r2, r3
 8018292:	6839      	ldr	r1, [r7, #0]
 8018294:	6878      	ldr	r0, [r7, #4]
 8018296:	f7ff fb8b 	bl	80179b0 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	889b      	ldrh	r3, [r3, #4]
 801829e:	8ab9      	ldrh	r1, [r7, #20]
 80182a0:	2201      	movs	r2, #1
 80182a2:	4618      	mov	r0, r3
 80182a4:	f7ff fd61 	bl	8017d6a <advance_index>
 80182a8:	4603      	mov	r3, r0
 80182aa:	461a      	mov	r2, r3
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	811a      	strh	r2, [r3, #8]

    ret = true;
 80182b0:	2301      	movs	r3, #1
 80182b2:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 80182b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80182b6:	4618      	mov	r0, r3
 80182b8:	3718      	adds	r7, #24
 80182ba:	46bd      	mov	sp, r7
 80182bc:	bd80      	pop	{r7, pc}

080182be <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 80182be:	b580      	push	{r7, lr}
 80182c0:	b084      	sub	sp, #16
 80182c2:	af00      	add	r7, sp, #0
 80182c4:	60f8      	str	r0, [r7, #12]
 80182c6:	60b9      	str	r1, [r7, #8]
 80182c8:	4613      	mov	r3, r2
 80182ca:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 80182cc:	88fa      	ldrh	r2, [r7, #6]
 80182ce:	2300      	movs	r3, #0
 80182d0:	68b9      	ldr	r1, [r7, #8]
 80182d2:	68f8      	ldr	r0, [r7, #12]
 80182d4:	f7ff fddf 	bl	8017e96 <_tu_fifo_write_n>
 80182d8:	4603      	mov	r3, r0
}
 80182da:	4618      	mov	r0, r3
 80182dc:	3710      	adds	r7, #16
 80182de:	46bd      	mov	sp, r7
 80182e0:	bd80      	pop	{r7, pc}

080182e2 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 80182e2:	b580      	push	{r7, lr}
 80182e4:	b084      	sub	sp, #16
 80182e6:	af00      	add	r7, sp, #0
 80182e8:	60f8      	str	r0, [r7, #12]
 80182ea:	60b9      	str	r1, [r7, #8]
 80182ec:	4613      	mov	r3, r2
 80182ee:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80182f0:	88fa      	ldrh	r2, [r7, #6]
 80182f2:	2301      	movs	r3, #1
 80182f4:	68b9      	ldr	r1, [r7, #8]
 80182f6:	68f8      	ldr	r0, [r7, #12]
 80182f8:	f7ff fdcd 	bl	8017e96 <_tu_fifo_write_n>
 80182fc:	4603      	mov	r3, r0
}
 80182fe:	4618      	mov	r0, r3
 8018300:	3710      	adds	r7, #16
 8018302:	46bd      	mov	sp, r7
 8018304:	bd80      	pop	{r7, pc}

08018306 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8018306:	b480      	push	{r7}
 8018308:	b083      	sub	sp, #12
 801830a:	af00      	add	r7, sp, #0
 801830c:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	2200      	movs	r2, #0
 8018312:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	2200      	movs	r2, #0
 8018318:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 801831a:	2301      	movs	r3, #1
}
 801831c:	4618      	mov	r0, r3
 801831e:	370c      	adds	r7, #12
 8018320:	46bd      	mov	sp, r7
 8018322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018326:	4770      	bx	lr

08018328 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8018328:	b480      	push	{r7}
 801832a:	b083      	sub	sp, #12
 801832c:	af00      	add	r7, sp, #0
 801832e:	6078      	str	r0, [r7, #4]
 8018330:	460b      	mov	r3, r1
 8018332:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8018334:	687a      	ldr	r2, [r7, #4]
 8018336:	79d3      	ldrb	r3, [r2, #7]
 8018338:	78f9      	ldrb	r1, [r7, #3]
 801833a:	f361 13c7 	bfi	r3, r1, #7, #1
 801833e:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8018340:	2301      	movs	r3, #1
}
 8018342:	4618      	mov	r0, r3
 8018344:	370c      	adds	r7, #12
 8018346:	46bd      	mov	sp, r7
 8018348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801834c:	4770      	bx	lr

0801834e <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 801834e:	b480      	push	{r7}
 8018350:	b083      	sub	sp, #12
 8018352:	af00      	add	r7, sp, #0
 8018354:	4603      	mov	r3, r0
 8018356:	6039      	str	r1, [r7, #0]
 8018358:	71fb      	strb	r3, [r7, #7]
 801835a:	4613      	mov	r3, r2
 801835c:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 801835e:	bf00      	nop
 8018360:	370c      	adds	r7, #12
 8018362:	46bd      	mov	sp, r7
 8018364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018368:	4770      	bx	lr

0801836a <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 801836a:	b480      	push	{r7}
 801836c:	b083      	sub	sp, #12
 801836e:	af00      	add	r7, sp, #0
 8018370:	6078      	str	r0, [r7, #4]
 8018372:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8018374:	2301      	movs	r3, #1
}
 8018376:	4618      	mov	r0, r3
 8018378:	370c      	adds	r7, #12
 801837a:	46bd      	mov	sp, r7
 801837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018380:	4770      	bx	lr
	...

08018384 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8018384:	b480      	push	{r7}
 8018386:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8018388:	4b06      	ldr	r3, [pc, #24]	@ (80183a4 <tud_mounted+0x20>)
 801838a:	785b      	ldrb	r3, [r3, #1]
 801838c:	b2db      	uxtb	r3, r3
 801838e:	2b00      	cmp	r3, #0
 8018390:	bf14      	ite	ne
 8018392:	2301      	movne	r3, #1
 8018394:	2300      	moveq	r3, #0
 8018396:	b2db      	uxtb	r3, r3
}
 8018398:	4618      	mov	r0, r3
 801839a:	46bd      	mov	sp, r7
 801839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183a0:	4770      	bx	lr
 80183a2:	bf00      	nop
 80183a4:	2400871c 	.word	0x2400871c

080183a8 <tud_suspended>:

bool tud_suspended(void) {
 80183a8:	b480      	push	{r7}
 80183aa:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 80183ac:	4b07      	ldr	r3, [pc, #28]	@ (80183cc <tud_suspended+0x24>)
 80183ae:	781b      	ldrb	r3, [r3, #0]
 80183b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80183b4:	b2db      	uxtb	r3, r3
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	bf14      	ite	ne
 80183ba:	2301      	movne	r3, #1
 80183bc:	2300      	moveq	r3, #0
 80183be:	b2db      	uxtb	r3, r3
}
 80183c0:	4618      	mov	r0, r3
 80183c2:	46bd      	mov	sp, r7
 80183c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c8:	4770      	bx	lr
 80183ca:	bf00      	nop
 80183cc:	2400871c 	.word	0x2400871c

080183d0 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 80183d0:	b480      	push	{r7}
 80183d2:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 80183d4:	4b05      	ldr	r3, [pc, #20]	@ (80183ec <tud_inited+0x1c>)
 80183d6:	781b      	ldrb	r3, [r3, #0]
 80183d8:	2bff      	cmp	r3, #255	@ 0xff
 80183da:	bf14      	ite	ne
 80183dc:	2301      	movne	r3, #1
 80183de:	2300      	moveq	r3, #0
 80183e0:	b2db      	uxtb	r3, r3
}
 80183e2:	4618      	mov	r0, r3
 80183e4:	46bd      	mov	sp, r7
 80183e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ea:	4770      	bx	lr
 80183ec:	2400000e 	.word	0x2400000e

080183f0 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b08c      	sub	sp, #48	@ 0x30
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	4603      	mov	r3, r0
 80183f8:	6039      	str	r1, [r7, #0]
 80183fa:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 80183fc:	f7ff ffe8 	bl	80183d0 <tud_inited>
 8018400:	4603      	mov	r3, r0
 8018402:	2b00      	cmp	r3, #0
 8018404:	d001      	beq.n	801840a <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8018406:	2301      	movs	r3, #1
 8018408:	e099      	b.n	801853e <tud_rhport_init+0x14e>
  }
  TU_ASSERT(rh_init);
 801840a:	683b      	ldr	r3, [r7, #0]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d10a      	bne.n	8018426 <tud_rhport_init+0x36>
 8018410:	4b4d      	ldr	r3, [pc, #308]	@ (8018548 <tud_rhport_init+0x158>)
 8018412:	61bb      	str	r3, [r7, #24]
 8018414:	69bb      	ldr	r3, [r7, #24]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	f003 0301 	and.w	r3, r3, #1
 801841c:	2b00      	cmp	r3, #0
 801841e:	d000      	beq.n	8018422 <tud_rhport_init+0x32>
 8018420:	be00      	bkpt	0x0000
 8018422:	2300      	movs	r3, #0
 8018424:	e08b      	b.n	801853e <tud_rhport_init+0x14e>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8018426:	2238      	movs	r2, #56	@ 0x38
 8018428:	2100      	movs	r1, #0
 801842a:	4848      	ldr	r0, [pc, #288]	@ (801854c <tud_rhport_init+0x15c>)
 801842c:	f005 fadc 	bl	801d9e8 <memset>
  _usbd_queued_setup = 0;
 8018430:	4b47      	ldr	r3, [pc, #284]	@ (8018550 <tud_rhport_init+0x160>)
 8018432:	2200      	movs	r2, #0
 8018434:	701a      	strb	r2, [r3, #0]
 8018436:	4b47      	ldr	r3, [pc, #284]	@ (8018554 <tud_rhport_init+0x164>)
 8018438:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 801843a:	697b      	ldr	r3, [r7, #20]
 801843c:	3304      	adds	r3, #4
 801843e:	4618      	mov	r0, r3
 8018440:	f7ff ff61 	bl	8018306 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8018444:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8018446:	4a44      	ldr	r2, [pc, #272]	@ (8018558 <tud_rhport_init+0x168>)
 8018448:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 801844a:	4b43      	ldr	r3, [pc, #268]	@ (8018558 <tud_rhport_init+0x168>)
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d10a      	bne.n	8018468 <tud_rhport_init+0x78>
 8018452:	4b3d      	ldr	r3, [pc, #244]	@ (8018548 <tud_rhport_init+0x158>)
 8018454:	61fb      	str	r3, [r7, #28]
 8018456:	69fb      	ldr	r3, [r7, #28]
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	f003 0301 	and.w	r3, r3, #1
 801845e:	2b00      	cmp	r3, #0
 8018460:	d000      	beq.n	8018464 <tud_rhport_init+0x74>
 8018462:	be00      	bkpt	0x0000
 8018464:	2300      	movs	r3, #0
 8018466:	e06a      	b.n	801853e <tud_rhport_init+0x14e>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8018468:	4b3c      	ldr	r3, [pc, #240]	@ (801855c <tud_rhport_init+0x16c>)
 801846a:	2b00      	cmp	r3, #0
 801846c:	d005      	beq.n	801847a <tud_rhport_init+0x8a>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 801846e:	483c      	ldr	r0, [pc, #240]	@ (8018560 <tud_rhport_init+0x170>)
 8018470:	f3af 8000 	nop.w
 8018474:	4603      	mov	r3, r0
 8018476:	4a3b      	ldr	r2, [pc, #236]	@ (8018564 <tud_rhport_init+0x174>)
 8018478:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 801847a:	2300      	movs	r3, #0
 801847c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8018480:	e039      	b.n	80184f6 <tud_rhport_init+0x106>
 8018482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018486:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8018488:	2300      	movs	r3, #0
 801848a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 801848c:	4b34      	ldr	r3, [pc, #208]	@ (8018560 <tud_rhport_init+0x170>)
 801848e:	781b      	ldrb	r3, [r3, #0]
 8018490:	7cfa      	ldrb	r2, [r7, #19]
 8018492:	429a      	cmp	r2, r3
 8018494:	d206      	bcs.n	80184a4 <tud_rhport_init+0xb4>
    driver = &_app_driver[drvid];
 8018496:	4b33      	ldr	r3, [pc, #204]	@ (8018564 <tud_rhport_init+0x174>)
 8018498:	681a      	ldr	r2, [r3, #0]
 801849a:	7cfb      	ldrb	r3, [r7, #19]
 801849c:	015b      	lsls	r3, r3, #5
 801849e:	4413      	add	r3, r2
 80184a0:	60fb      	str	r3, [r7, #12]
 80184a2:	e00c      	b.n	80184be <tud_rhport_init+0xce>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80184a4:	4b2e      	ldr	r3, [pc, #184]	@ (8018560 <tud_rhport_init+0x170>)
 80184a6:	781b      	ldrb	r3, [r3, #0]
 80184a8:	7cfa      	ldrb	r2, [r7, #19]
 80184aa:	429a      	cmp	r2, r3
 80184ac:	d807      	bhi.n	80184be <tud_rhport_init+0xce>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80184ae:	7cfb      	ldrb	r3, [r7, #19]
 80184b0:	4a2b      	ldr	r2, [pc, #172]	@ (8018560 <tud_rhport_init+0x170>)
 80184b2:	7812      	ldrb	r2, [r2, #0]
 80184b4:	1a9b      	subs	r3, r3, r2
 80184b6:	015b      	lsls	r3, r3, #5
 80184b8:	4a2b      	ldr	r2, [pc, #172]	@ (8018568 <tud_rhport_init+0x178>)
 80184ba:	4413      	add	r3, r2
 80184bc:	60fb      	str	r3, [r7, #12]
  return driver;
 80184be:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 80184c0:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 80184c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d003      	beq.n	80184d0 <tud_rhport_init+0xe0>
 80184c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184ca:	685b      	ldr	r3, [r3, #4]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d10a      	bne.n	80184e6 <tud_rhport_init+0xf6>
 80184d0:	4b1d      	ldr	r3, [pc, #116]	@ (8018548 <tud_rhport_init+0x158>)
 80184d2:	623b      	str	r3, [r7, #32]
 80184d4:	6a3b      	ldr	r3, [r7, #32]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	f003 0301 	and.w	r3, r3, #1
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d000      	beq.n	80184e2 <tud_rhport_init+0xf2>
 80184e0:	be00      	bkpt	0x0000
 80184e2:	2300      	movs	r3, #0
 80184e4:	e02b      	b.n	801853e <tud_rhport_init+0x14e>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 80184e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184e8:	685b      	ldr	r3, [r3, #4]
 80184ea:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80184ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80184f0:	3301      	adds	r3, #1
 80184f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80184f6:	4b1a      	ldr	r3, [pc, #104]	@ (8018560 <tud_rhport_init+0x170>)
 80184f8:	781b      	ldrb	r3, [r3, #0]
 80184fa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80184fe:	429a      	cmp	r2, r3
 8018500:	d9bf      	bls.n	8018482 <tud_rhport_init+0x92>
  }

  _usbd_rhport = rhport;
 8018502:	4a1a      	ldr	r2, [pc, #104]	@ (801856c <tud_rhport_init+0x17c>)
 8018504:	79fb      	ldrb	r3, [r7, #7]
 8018506:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8018508:	79fb      	ldrb	r3, [r7, #7]
 801850a:	6839      	ldr	r1, [r7, #0]
 801850c:	4618      	mov	r0, r3
 801850e:	f000 ffd7 	bl	80194c0 <dcd_init>
 8018512:	4603      	mov	r3, r0
 8018514:	f083 0301 	eor.w	r3, r3, #1
 8018518:	b2db      	uxtb	r3, r3
 801851a:	2b00      	cmp	r3, #0
 801851c:	d00a      	beq.n	8018534 <tud_rhport_init+0x144>
 801851e:	4b0a      	ldr	r3, [pc, #40]	@ (8018548 <tud_rhport_init+0x158>)
 8018520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	f003 0301 	and.w	r3, r3, #1
 801852a:	2b00      	cmp	r3, #0
 801852c:	d000      	beq.n	8018530 <tud_rhport_init+0x140>
 801852e:	be00      	bkpt	0x0000
 8018530:	2300      	movs	r3, #0
 8018532:	e004      	b.n	801853e <tud_rhport_init+0x14e>
  dcd_int_enable(rhport);
 8018534:	79fb      	ldrb	r3, [r7, #7]
 8018536:	4618      	mov	r0, r3
 8018538:	f001 f856 	bl	80195e8 <dcd_int_enable>

  return true;
 801853c:	2301      	movs	r3, #1
}
 801853e:	4618      	mov	r0, r3
 8018540:	3730      	adds	r7, #48	@ 0x30
 8018542:	46bd      	mov	sp, r7
 8018544:	bd80      	pop	{r7, pc}
 8018546:	bf00      	nop
 8018548:	e000edf0 	.word	0xe000edf0
 801854c:	2400871c 	.word	0x2400871c
 8018550:	24008754 	.word	0x24008754
 8018554:	24000010 	.word	0x24000010
 8018558:	24008820 	.word	0x24008820
 801855c:	00000000 	.word	0x00000000
 8018560:	2400875c 	.word	0x2400875c
 8018564:	24008758 	.word	0x24008758
 8018568:	08031f78 	.word	0x08031f78
 801856c:	2400000e 	.word	0x2400000e

08018570 <dcd_event_handler>:
}

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8018570:	b580      	push	{r7, lr}
 8018572:	b0a0      	sub	sp, #128	@ 0x80
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
 8018578:	460b      	mov	r3, r1
 801857a:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 801857c:	2300      	movs	r3, #0
 801857e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	785b      	ldrb	r3, [r3, #1]
 8018586:	3b02      	subs	r3, #2
 8018588:	2b04      	cmp	r3, #4
 801858a:	f200 8173 	bhi.w	8018874 <dcd_event_handler+0x304>
 801858e:	a201      	add	r2, pc, #4	@ (adr r2, 8018594 <dcd_event_handler+0x24>)
 8018590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018594:	080185a9 	.word	0x080185a9
 8018598:	08018619 	.word	0x08018619
 801859c:	080185d5 	.word	0x080185d5
 80185a0:	080185f7 	.word	0x080185f7
 80185a4:	08018841 	.word	0x08018841
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 80185a8:	4aab      	ldr	r2, [pc, #684]	@ (8018858 <dcd_event_handler+0x2e8>)
 80185aa:	7813      	ldrb	r3, [r2, #0]
 80185ac:	f023 0301 	bic.w	r3, r3, #1
 80185b0:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 80185b2:	4aa9      	ldr	r2, [pc, #676]	@ (8018858 <dcd_event_handler+0x2e8>)
 80185b4:	7813      	ldrb	r3, [r2, #0]
 80185b6:	f023 0302 	bic.w	r3, r3, #2
 80185ba:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 80185bc:	4ba6      	ldr	r3, [pc, #664]	@ (8018858 <dcd_event_handler+0x2e8>)
 80185be:	2200      	movs	r2, #0
 80185c0:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 80185c2:	4aa5      	ldr	r2, [pc, #660]	@ (8018858 <dcd_event_handler+0x2e8>)
 80185c4:	7813      	ldrb	r3, [r2, #0]
 80185c6:	f023 0304 	bic.w	r3, r3, #4
 80185ca:	7013      	strb	r3, [r2, #0]
      send = true;
 80185cc:	2301      	movs	r3, #1
 80185ce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 80185d2:	e158      	b.n	8018886 <dcd_event_handler+0x316>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 80185d4:	4ba0      	ldr	r3, [pc, #640]	@ (8018858 <dcd_event_handler+0x2e8>)
 80185d6:	781b      	ldrb	r3, [r3, #0]
 80185d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80185dc:	b2db      	uxtb	r3, r3
 80185de:	2b00      	cmp	r3, #0
 80185e0:	f000 814c 	beq.w	801887c <dcd_event_handler+0x30c>
        _usbd_dev.suspended = 1;
 80185e4:	4a9c      	ldr	r2, [pc, #624]	@ (8018858 <dcd_event_handler+0x2e8>)
 80185e6:	7813      	ldrb	r3, [r2, #0]
 80185e8:	f043 0304 	orr.w	r3, r3, #4
 80185ec:	7013      	strb	r3, [r2, #0]
        send = true;
 80185ee:	2301      	movs	r3, #1
 80185f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 80185f4:	e142      	b.n	801887c <dcd_event_handler+0x30c>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 80185f6:	4b98      	ldr	r3, [pc, #608]	@ (8018858 <dcd_event_handler+0x2e8>)
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80185fe:	b2db      	uxtb	r3, r3
 8018600:	2b00      	cmp	r3, #0
 8018602:	f000 813d 	beq.w	8018880 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 0;
 8018606:	4a94      	ldr	r2, [pc, #592]	@ (8018858 <dcd_event_handler+0x2e8>)
 8018608:	7813      	ldrb	r3, [r2, #0]
 801860a:	f023 0304 	bic.w	r3, r3, #4
 801860e:	7013      	strb	r3, [r2, #0]
        send = true;
 8018610:	2301      	movs	r3, #1
 8018612:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8018616:	e133      	b.n	8018880 <dcd_event_handler+0x310>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8018618:	2300      	movs	r3, #0
 801861a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 801861e:	e038      	b.n	8018692 <dcd_event_handler+0x122>
 8018620:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8018624:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8018628:	2300      	movs	r3, #0
 801862a:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 801862c:	4b8b      	ldr	r3, [pc, #556]	@ (801885c <dcd_event_handler+0x2ec>)
 801862e:	781b      	ldrb	r3, [r3, #0]
 8018630:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8018634:	429a      	cmp	r2, r3
 8018636:	d207      	bcs.n	8018648 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8018638:	4b89      	ldr	r3, [pc, #548]	@ (8018860 <dcd_event_handler+0x2f0>)
 801863a:	681a      	ldr	r2, [r3, #0]
 801863c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8018640:	015b      	lsls	r3, r3, #5
 8018642:	4413      	add	r3, r2
 8018644:	673b      	str	r3, [r7, #112]	@ 0x70
 8018646:	e00e      	b.n	8018666 <dcd_event_handler+0xf6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8018648:	4b84      	ldr	r3, [pc, #528]	@ (801885c <dcd_event_handler+0x2ec>)
 801864a:	781b      	ldrb	r3, [r3, #0]
 801864c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8018650:	429a      	cmp	r2, r3
 8018652:	d808      	bhi.n	8018666 <dcd_event_handler+0xf6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8018654:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8018658:	4a80      	ldr	r2, [pc, #512]	@ (801885c <dcd_event_handler+0x2ec>)
 801865a:	7812      	ldrb	r2, [r2, #0]
 801865c:	1a9b      	subs	r3, r3, r2
 801865e:	015b      	lsls	r3, r3, #5
 8018660:	4a80      	ldr	r2, [pc, #512]	@ (8018864 <dcd_event_handler+0x2f4>)
 8018662:	4413      	add	r3, r2
 8018664:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8018666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8018668:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 801866a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801866c:	2b00      	cmp	r3, #0
 801866e:	d00b      	beq.n	8018688 <dcd_event_handler+0x118>
 8018670:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018672:	69db      	ldr	r3, [r3, #28]
 8018674:	2b00      	cmp	r3, #0
 8018676:	d007      	beq.n	8018688 <dcd_event_handler+0x118>
          driver->sof(event->rhport, event->sof.frame_count);
 8018678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801867a:	69db      	ldr	r3, [r3, #28]
 801867c:	687a      	ldr	r2, [r7, #4]
 801867e:	7810      	ldrb	r0, [r2, #0]
 8018680:	687a      	ldr	r2, [r7, #4]
 8018682:	6852      	ldr	r2, [r2, #4]
 8018684:	4611      	mov	r1, r2
 8018686:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8018688:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 801868c:	3301      	adds	r3, #1
 801868e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8018692:	4b72      	ldr	r3, [pc, #456]	@ (801885c <dcd_event_handler+0x2ec>)
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 801869a:	429a      	cmp	r2, r3
 801869c:	d9c0      	bls.n	8018620 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 801869e:	4b6e      	ldr	r3, [pc, #440]	@ (8018858 <dcd_event_handler+0x2e8>)
 80186a0:	781b      	ldrb	r3, [r3, #0]
 80186a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80186a6:	b2db      	uxtb	r3, r3
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d05a      	beq.n	8018762 <dcd_event_handler+0x1f2>
        _usbd_dev.suspended = 0;
 80186ac:	4a6a      	ldr	r2, [pc, #424]	@ (8018858 <dcd_event_handler+0x2e8>)
 80186ae:	7813      	ldrb	r3, [r2, #0]
 80186b0:	f023 0304 	bic.w	r3, r3, #4
 80186b4:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 80186b6:	f107 0314 	add.w	r3, r7, #20
 80186ba:	2200      	movs	r2, #0
 80186bc:	601a      	str	r2, [r3, #0]
 80186be:	605a      	str	r2, [r3, #4]
 80186c0:	609a      	str	r2, [r3, #8]
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	781b      	ldrb	r3, [r3, #0]
 80186c6:	753b      	strb	r3, [r7, #20]
 80186c8:	2305      	movs	r3, #5
 80186ca:	757b      	strb	r3, [r7, #21]
 80186cc:	f107 0314 	add.w	r3, r7, #20
 80186d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80186d2:	78fb      	ldrb	r3, [r7, #3]
 80186d4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80186d8:	4b63      	ldr	r3, [pc, #396]	@ (8018868 <dcd_event_handler+0x2f8>)
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80186de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80186e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80186e2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80186e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 80186ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80186ee:	f083 0301 	eor.w	r3, r3, #1
 80186f2:	b2db      	uxtb	r3, r3
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d003      	beq.n	8018700 <dcd_event_handler+0x190>
    qhdl->interrupt_set(false);
 80186f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	2000      	movs	r0, #0
 80186fe:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8018700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018702:	3304      	adds	r3, #4
 8018704:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8018706:	4618      	mov	r0, r3
 8018708:	f7ff fd96 	bl	8018238 <tu_fifo_write>
 801870c:	4603      	mov	r3, r0
 801870e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8018712:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8018716:	f083 0301 	eor.w	r3, r3, #1
 801871a:	b2db      	uxtb	r3, r3
 801871c:	2b00      	cmp	r3, #0
 801871e:	d003      	beq.n	8018728 <dcd_event_handler+0x1b8>
    qhdl->interrupt_set(true);
 8018720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	2001      	movs	r0, #1
 8018726:	4798      	blx	r3
  }

  return success;
 8018728:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 801872c:	f083 0301 	eor.w	r3, r3, #1
 8018730:	b2db      	uxtb	r3, r3
 8018732:	2b00      	cmp	r3, #0
 8018734:	d009      	beq.n	801874a <dcd_event_handler+0x1da>
 8018736:	4b4d      	ldr	r3, [pc, #308]	@ (801886c <dcd_event_handler+0x2fc>)
 8018738:	65bb      	str	r3, [r7, #88]	@ 0x58
 801873a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	f003 0301 	and.w	r3, r3, #1
 8018742:	2b00      	cmp	r3, #0
 8018744:	d00c      	beq.n	8018760 <dcd_event_handler+0x1f0>
 8018746:	be00      	bkpt	0x0000
 8018748:	e00a      	b.n	8018760 <dcd_event_handler+0x1f0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 801874a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801874c:	7818      	ldrb	r0, [r3, #0]
 801874e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018750:	785b      	ldrb	r3, [r3, #1]
 8018752:	4619      	mov	r1, r3
 8018754:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8018758:	461a      	mov	r2, r3
 801875a:	f7ff fdf8 	bl	801834e <tud_event_hook_cb>
  return true;
 801875e:	e000      	b.n	8018762 <dcd_event_handler+0x1f2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8018760:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8018762:	4b3d      	ldr	r3, [pc, #244]	@ (8018858 <dcd_event_handler+0x2e8>)
 8018764:	78db      	ldrb	r3, [r3, #3]
 8018766:	b2db      	uxtb	r3, r3
 8018768:	657b      	str	r3, [r7, #84]	@ 0x54
 801876a:	2300      	movs	r3, #0
 801876c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8018770:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8018774:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018776:	fa22 f303 	lsr.w	r3, r2, r3
 801877a:	f003 0301 	and.w	r3, r3, #1
 801877e:	2b00      	cmp	r3, #0
 8018780:	bf14      	ite	ne
 8018782:	2301      	movne	r3, #1
 8018784:	2300      	moveq	r3, #0
 8018786:	b2db      	uxtb	r3, r3
 8018788:	2b00      	cmp	r3, #0
 801878a:	d07b      	beq.n	8018884 <dcd_event_handler+0x314>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 801878c:	f107 0308 	add.w	r3, r7, #8
 8018790:	2200      	movs	r2, #0
 8018792:	601a      	str	r2, [r3, #0]
 8018794:	605a      	str	r2, [r3, #4]
 8018796:	609a      	str	r2, [r3, #8]
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	781b      	ldrb	r3, [r3, #0]
 801879c:	723b      	strb	r3, [r7, #8]
 801879e:	2303      	movs	r3, #3
 80187a0:	727b      	strb	r3, [r7, #9]
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	685b      	ldr	r3, [r3, #4]
 80187a6:	60fb      	str	r3, [r7, #12]
 80187a8:	f107 0308 	add.w	r3, r7, #8
 80187ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80187ae:	78fb      	ldrb	r3, [r7, #3]
 80187b0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80187b4:	4b2c      	ldr	r3, [pc, #176]	@ (8018868 <dcd_event_handler+0x2f8>)
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80187ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80187bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80187be:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80187c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 80187c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80187ca:	f083 0301 	eor.w	r3, r3, #1
 80187ce:	b2db      	uxtb	r3, r3
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d003      	beq.n	80187dc <dcd_event_handler+0x26c>
    qhdl->interrupt_set(false);
 80187d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	2000      	movs	r0, #0
 80187da:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 80187dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80187de:	3304      	adds	r3, #4
 80187e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7ff fd28 	bl	8018238 <tu_fifo_write>
 80187e8:	4603      	mov	r3, r0
 80187ea:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 80187ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80187f2:	f083 0301 	eor.w	r3, r3, #1
 80187f6:	b2db      	uxtb	r3, r3
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d003      	beq.n	8018804 <dcd_event_handler+0x294>
    qhdl->interrupt_set(true);
 80187fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	2001      	movs	r0, #1
 8018802:	4798      	blx	r3
  return success;
 8018804:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8018808:	f083 0301 	eor.w	r3, r3, #1
 801880c:	b2db      	uxtb	r3, r3
 801880e:	2b00      	cmp	r3, #0
 8018810:	d009      	beq.n	8018826 <dcd_event_handler+0x2b6>
 8018812:	4b16      	ldr	r3, [pc, #88]	@ (801886c <dcd_event_handler+0x2fc>)
 8018814:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	f003 0301 	and.w	r3, r3, #1
 801881e:	2b00      	cmp	r3, #0
 8018820:	d00c      	beq.n	801883c <dcd_event_handler+0x2cc>
 8018822:	be00      	bkpt	0x0000
 8018824:	e00a      	b.n	801883c <dcd_event_handler+0x2cc>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8018826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018828:	7818      	ldrb	r0, [r3, #0]
 801882a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801882c:	785b      	ldrb	r3, [r3, #1]
 801882e:	4619      	mov	r1, r3
 8018830:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8018834:	461a      	mov	r2, r3
 8018836:	f7ff fd8a 	bl	801834e <tud_event_hook_cb>
  return true;
 801883a:	e000      	b.n	801883e <dcd_event_handler+0x2ce>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 801883c:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 801883e:	e021      	b.n	8018884 <dcd_event_handler+0x314>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8018840:	4b0b      	ldr	r3, [pc, #44]	@ (8018870 <dcd_event_handler+0x300>)
 8018842:	781b      	ldrb	r3, [r3, #0]
 8018844:	b2db      	uxtb	r3, r3
 8018846:	3301      	adds	r3, #1
 8018848:	b2da      	uxtb	r2, r3
 801884a:	4b09      	ldr	r3, [pc, #36]	@ (8018870 <dcd_event_handler+0x300>)
 801884c:	701a      	strb	r2, [r3, #0]
      send = true;
 801884e:	2301      	movs	r3, #1
 8018850:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8018854:	e017      	b.n	8018886 <dcd_event_handler+0x316>
 8018856:	bf00      	nop
 8018858:	2400871c 	.word	0x2400871c
 801885c:	2400875c 	.word	0x2400875c
 8018860:	24008758 	.word	0x24008758
 8018864:	08031f78 	.word	0x08031f78
 8018868:	24008820 	.word	0x24008820
 801886c:	e000edf0 	.word	0xe000edf0
 8018870:	24008754 	.word	0x24008754

    default:
      send = true;
 8018874:	2301      	movs	r3, #1
 8018876:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 801887a:	e004      	b.n	8018886 <dcd_event_handler+0x316>
      break;
 801887c:	bf00      	nop
 801887e:	e002      	b.n	8018886 <dcd_event_handler+0x316>
      break;
 8018880:	bf00      	nop
 8018882:	e000      	b.n	8018886 <dcd_event_handler+0x316>
      break;
 8018884:	bf00      	nop
  }

  if (send) {
 8018886:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801888a:	2b00      	cmp	r3, #0
 801888c:	d049      	beq.n	8018922 <dcd_event_handler+0x3b2>
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	637b      	str	r3, [r7, #52]	@ 0x34
 8018892:	78fb      	ldrb	r3, [r7, #3]
 8018894:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8018898:	4b24      	ldr	r3, [pc, #144]	@ (801892c <dcd_event_handler+0x3bc>)
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801889e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80188a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80188a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80188a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 80188aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80188ae:	f083 0301 	eor.w	r3, r3, #1
 80188b2:	b2db      	uxtb	r3, r3
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d003      	beq.n	80188c0 <dcd_event_handler+0x350>
    qhdl->interrupt_set(false);
 80188b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	2000      	movs	r0, #0
 80188be:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 80188c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188c2:	3304      	adds	r3, #4
 80188c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7ff fcb6 	bl	8018238 <tu_fifo_write>
 80188cc:	4603      	mov	r3, r0
 80188ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 80188d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80188d6:	f083 0301 	eor.w	r3, r3, #1
 80188da:	b2db      	uxtb	r3, r3
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d003      	beq.n	80188e8 <dcd_event_handler+0x378>
    qhdl->interrupt_set(true);
 80188e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	2001      	movs	r0, #1
 80188e6:	4798      	blx	r3
  return success;
 80188e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80188ec:	f083 0301 	eor.w	r3, r3, #1
 80188f0:	b2db      	uxtb	r3, r3
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d009      	beq.n	801890a <dcd_event_handler+0x39a>
 80188f6:	4b0e      	ldr	r3, [pc, #56]	@ (8018930 <dcd_event_handler+0x3c0>)
 80188f8:	623b      	str	r3, [r7, #32]
 80188fa:	6a3b      	ldr	r3, [r7, #32]
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	f003 0301 	and.w	r3, r3, #1
 8018902:	2b00      	cmp	r3, #0
 8018904:	d00c      	beq.n	8018920 <dcd_event_handler+0x3b0>
 8018906:	be00      	bkpt	0x0000
 8018908:	e00a      	b.n	8018920 <dcd_event_handler+0x3b0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 801890a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801890c:	7818      	ldrb	r0, [r3, #0]
 801890e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018910:	785b      	ldrb	r3, [r3, #1]
 8018912:	4619      	mov	r1, r3
 8018914:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018918:	461a      	mov	r2, r3
 801891a:	f7ff fd18 	bl	801834e <tud_event_hook_cb>
  return true;
 801891e:	e000      	b.n	8018922 <dcd_event_handler+0x3b2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8018920:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8018922:	bf00      	nop
 8018924:	3780      	adds	r7, #128	@ 0x80
 8018926:	46bd      	mov	sp, r7
 8018928:	bd80      	pop	{r7, pc}
 801892a:	bf00      	nop
 801892c:	24008820 	.word	0x24008820
 8018930:	e000edf0 	.word	0xe000edf0

08018934 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b082      	sub	sp, #8
 8018938:	af00      	add	r7, sp, #0
 801893a:	4603      	mov	r3, r0
 801893c:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 801893e:	79fb      	ldrb	r3, [r7, #7]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d005      	beq.n	8018950 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 8018944:	4b07      	ldr	r3, [pc, #28]	@ (8018964 <usbd_int_set+0x30>)
 8018946:	781b      	ldrb	r3, [r3, #0]
 8018948:	4618      	mov	r0, r3
 801894a:	f000 fe4d 	bl	80195e8 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 801894e:	e004      	b.n	801895a <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8018950:	4b04      	ldr	r3, [pc, #16]	@ (8018964 <usbd_int_set+0x30>)
 8018952:	781b      	ldrb	r3, [r3, #0]
 8018954:	4618      	mov	r0, r3
 8018956:	f000 fe6f 	bl	8019638 <dcd_int_disable>
}
 801895a:	bf00      	nop
 801895c:	3708      	adds	r7, #8
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}
 8018962:	bf00      	nop
 8018964:	2400000e 	.word	0x2400000e

08018968 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b08a      	sub	sp, #40	@ 0x28
 801896c:	af00      	add	r7, sp, #0
 801896e:	6039      	str	r1, [r7, #0]
 8018970:	4611      	mov	r1, r2
 8018972:	461a      	mov	r2, r3
 8018974:	4603      	mov	r3, r0
 8018976:	71fb      	strb	r3, [r7, #7]
 8018978:	460b      	mov	r3, r1
 801897a:	71bb      	strb	r3, [r7, #6]
 801897c:	4613      	mov	r3, r2
 801897e:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8018980:	2300      	movs	r3, #0
 8018982:	627b      	str	r3, [r7, #36]	@ 0x24
 8018984:	e04d      	b.n	8018a22 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8018986:	683b      	ldr	r3, [r7, #0]
 8018988:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 801898a:	6a3b      	ldr	r3, [r7, #32]
 801898c:	785b      	ldrb	r3, [r3, #1]
 801898e:	2b05      	cmp	r3, #5
 8018990:	d108      	bne.n	80189a4 <usbd_open_edpt_pair+0x3c>
 8018992:	6a3b      	ldr	r3, [r7, #32]
 8018994:	78db      	ldrb	r3, [r3, #3]
 8018996:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801899a:	b2db      	uxtb	r3, r3
 801899c:	461a      	mov	r2, r3
 801899e:	797b      	ldrb	r3, [r7, #5]
 80189a0:	4293      	cmp	r3, r2
 80189a2:	d00a      	beq.n	80189ba <usbd_open_edpt_pair+0x52>
 80189a4:	4b23      	ldr	r3, [pc, #140]	@ (8018a34 <usbd_open_edpt_pair+0xcc>)
 80189a6:	61bb      	str	r3, [r7, #24]
 80189a8:	69bb      	ldr	r3, [r7, #24]
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	f003 0301 	and.w	r3, r3, #1
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d000      	beq.n	80189b6 <usbd_open_edpt_pair+0x4e>
 80189b4:	be00      	bkpt	0x0000
 80189b6:	2300      	movs	r3, #0
 80189b8:	e038      	b.n	8018a2c <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 80189ba:	79fb      	ldrb	r3, [r7, #7]
 80189bc:	6a39      	ldr	r1, [r7, #32]
 80189be:	4618      	mov	r0, r3
 80189c0:	f000 f83a 	bl	8018a38 <usbd_edpt_open>
 80189c4:	4603      	mov	r3, r0
 80189c6:	f083 0301 	eor.w	r3, r3, #1
 80189ca:	b2db      	uxtb	r3, r3
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d00a      	beq.n	80189e6 <usbd_open_edpt_pair+0x7e>
 80189d0:	4b18      	ldr	r3, [pc, #96]	@ (8018a34 <usbd_open_edpt_pair+0xcc>)
 80189d2:	61fb      	str	r3, [r7, #28]
 80189d4:	69fb      	ldr	r3, [r7, #28]
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	f003 0301 	and.w	r3, r3, #1
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d000      	beq.n	80189e2 <usbd_open_edpt_pair+0x7a>
 80189e0:	be00      	bkpt	0x0000
 80189e2:	2300      	movs	r3, #0
 80189e4:	e022      	b.n	8018a2c <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 80189e6:	6a3b      	ldr	r3, [r7, #32]
 80189e8:	789b      	ldrb	r3, [r3, #2]
 80189ea:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80189ec:	7dfb      	ldrb	r3, [r7, #23]
 80189ee:	09db      	lsrs	r3, r3, #7
 80189f0:	b2db      	uxtb	r3, r3
 80189f2:	2b01      	cmp	r3, #1
 80189f4:	d104      	bne.n	8018a00 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 80189f6:	6a3b      	ldr	r3, [r7, #32]
 80189f8:	789a      	ldrb	r2, [r3, #2]
 80189fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80189fc:	701a      	strb	r2, [r3, #0]
 80189fe:	e003      	b.n	8018a08 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8018a00:	6a3b      	ldr	r3, [r7, #32]
 8018a02:	789a      	ldrb	r2, [r3, #2]
 8018a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a06:	701a      	strb	r2, [r3, #0]
 8018a08:	683b      	ldr	r3, [r7, #0]
 8018a0a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8018a0c:	693b      	ldr	r3, [r7, #16]
 8018a0e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	781b      	ldrb	r3, [r3, #0]
 8018a14:	461a      	mov	r2, r3
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8018a1a:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8018a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a1e:	3301      	adds	r3, #1
 8018a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8018a22:	79bb      	ldrb	r3, [r7, #6]
 8018a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018a26:	429a      	cmp	r2, r3
 8018a28:	dbad      	blt.n	8018986 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8018a2a:	2301      	movs	r3, #1
}
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	3728      	adds	r7, #40	@ 0x28
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd80      	pop	{r7, pc}
 8018a34:	e000edf0 	.word	0xe000edf0

08018a38 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8018a38:	b580      	push	{r7, lr}
 8018a3a:	b086      	sub	sp, #24
 8018a3c:	af00      	add	r7, sp, #0
 8018a3e:	4603      	mov	r3, r0
 8018a40:	6039      	str	r1, [r7, #0]
 8018a42:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8018a44:	4b1c      	ldr	r3, [pc, #112]	@ (8018ab8 <usbd_edpt_open+0x80>)
 8018a46:	781b      	ldrb	r3, [r3, #0]
 8018a48:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8018a4a:	683b      	ldr	r3, [r7, #0]
 8018a4c:	789b      	ldrb	r3, [r3, #2]
 8018a4e:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018a50:	7bfb      	ldrb	r3, [r7, #15]
 8018a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018a56:	b2db      	uxtb	r3, r3
 8018a58:	2b08      	cmp	r3, #8
 8018a5a:	d90a      	bls.n	8018a72 <usbd_edpt_open+0x3a>
 8018a5c:	4b17      	ldr	r3, [pc, #92]	@ (8018abc <usbd_edpt_open+0x84>)
 8018a5e:	613b      	str	r3, [r7, #16]
 8018a60:	693b      	ldr	r3, [r7, #16]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	f003 0301 	and.w	r3, r3, #1
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d000      	beq.n	8018a6e <usbd_edpt_open+0x36>
 8018a6c:	be00      	bkpt	0x0000
 8018a6e:	2300      	movs	r3, #0
 8018a70:	e01d      	b.n	8018aae <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 8018a72:	4b13      	ldr	r3, [pc, #76]	@ (8018ac0 <usbd_edpt_open+0x88>)
 8018a74:	789b      	ldrb	r3, [r3, #2]
 8018a76:	2200      	movs	r2, #0
 8018a78:	4619      	mov	r1, r3
 8018a7a:	6838      	ldr	r0, [r7, #0]
 8018a7c:	f001 fea0 	bl	801a7c0 <tu_edpt_validate>
 8018a80:	4603      	mov	r3, r0
 8018a82:	f083 0301 	eor.w	r3, r3, #1
 8018a86:	b2db      	uxtb	r3, r3
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d00a      	beq.n	8018aa2 <usbd_edpt_open+0x6a>
 8018a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8018abc <usbd_edpt_open+0x84>)
 8018a8e:	617b      	str	r3, [r7, #20]
 8018a90:	697b      	ldr	r3, [r7, #20]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	f003 0301 	and.w	r3, r3, #1
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d000      	beq.n	8018a9e <usbd_edpt_open+0x66>
 8018a9c:	be00      	bkpt	0x0000
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	e005      	b.n	8018aae <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 8018aa2:	79fb      	ldrb	r3, [r7, #7]
 8018aa4:	6839      	ldr	r1, [r7, #0]
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	f000 fe32 	bl	8019710 <dcd_edpt_open>
 8018aac:	4603      	mov	r3, r0
}
 8018aae:	4618      	mov	r0, r3
 8018ab0:	3718      	adds	r7, #24
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	bd80      	pop	{r7, pc}
 8018ab6:	bf00      	nop
 8018ab8:	2400000e 	.word	0x2400000e
 8018abc:	e000edf0 	.word	0xe000edf0
 8018ac0:	2400871c 	.word	0x2400871c

08018ac4 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8018ac4:	b580      	push	{r7, lr}
 8018ac6:	b086      	sub	sp, #24
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	4603      	mov	r3, r0
 8018acc:	460a      	mov	r2, r1
 8018ace:	71fb      	strb	r3, [r7, #7]
 8018ad0:	4613      	mov	r3, r2
 8018ad2:	71bb      	strb	r3, [r7, #6]
 8018ad4:	79bb      	ldrb	r3, [r7, #6]
 8018ad6:	73bb      	strb	r3, [r7, #14]
 8018ad8:	7bbb      	ldrb	r3, [r7, #14]
 8018ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018ade:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8018ae0:	75fb      	strb	r3, [r7, #23]
 8018ae2:	79bb      	ldrb	r3, [r7, #6]
 8018ae4:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8018ae6:	7bfb      	ldrb	r3, [r7, #15]
 8018ae8:	09db      	lsrs	r3, r3, #7
 8018aea:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8018aec:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8018aee:	7dfa      	ldrb	r2, [r7, #23]
 8018af0:	7dbb      	ldrb	r3, [r7, #22]
 8018af2:	0052      	lsls	r2, r2, #1
 8018af4:	4413      	add	r3, r2
 8018af6:	3320      	adds	r3, #32
 8018af8:	4a06      	ldr	r2, [pc, #24]	@ (8018b14 <usbd_edpt_claim+0x50>)
 8018afa:	4413      	add	r3, r2
 8018afc:	3306      	adds	r3, #6
 8018afe:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8018b00:	2100      	movs	r1, #0
 8018b02:	6938      	ldr	r0, [r7, #16]
 8018b04:	f001 fdf7 	bl	801a6f6 <tu_edpt_claim>
 8018b08:	4603      	mov	r3, r0
}
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	3718      	adds	r7, #24
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd80      	pop	{r7, pc}
 8018b12:	bf00      	nop
 8018b14:	2400871c 	.word	0x2400871c

08018b18 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b086      	sub	sp, #24
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	4603      	mov	r3, r0
 8018b20:	460a      	mov	r2, r1
 8018b22:	71fb      	strb	r3, [r7, #7]
 8018b24:	4613      	mov	r3, r2
 8018b26:	71bb      	strb	r3, [r7, #6]
 8018b28:	79bb      	ldrb	r3, [r7, #6]
 8018b2a:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018b2c:	7bbb      	ldrb	r3, [r7, #14]
 8018b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018b32:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8018b34:	75fb      	strb	r3, [r7, #23]
 8018b36:	79bb      	ldrb	r3, [r7, #6]
 8018b38:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8018b3a:	7bfb      	ldrb	r3, [r7, #15]
 8018b3c:	09db      	lsrs	r3, r3, #7
 8018b3e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8018b40:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8018b42:	7dfa      	ldrb	r2, [r7, #23]
 8018b44:	7dbb      	ldrb	r3, [r7, #22]
 8018b46:	0052      	lsls	r2, r2, #1
 8018b48:	4413      	add	r3, r2
 8018b4a:	3320      	adds	r3, #32
 8018b4c:	4a06      	ldr	r2, [pc, #24]	@ (8018b68 <usbd_edpt_release+0x50>)
 8018b4e:	4413      	add	r3, r2
 8018b50:	3306      	adds	r3, #6
 8018b52:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8018b54:	2100      	movs	r1, #0
 8018b56:	6938      	ldr	r0, [r7, #16]
 8018b58:	f001 fe07 	bl	801a76a <tu_edpt_release>
 8018b5c:	4603      	mov	r3, r0
}
 8018b5e:	4618      	mov	r0, r3
 8018b60:	3718      	adds	r7, #24
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd80      	pop	{r7, pc}
 8018b66:	bf00      	nop
 8018b68:	2400871c 	.word	0x2400871c

08018b6c <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8018b6c:	b580      	push	{r7, lr}
 8018b6e:	b086      	sub	sp, #24
 8018b70:	af00      	add	r7, sp, #0
 8018b72:	603a      	str	r2, [r7, #0]
 8018b74:	461a      	mov	r2, r3
 8018b76:	4603      	mov	r3, r0
 8018b78:	71fb      	strb	r3, [r7, #7]
 8018b7a:	460b      	mov	r3, r1
 8018b7c:	71bb      	strb	r3, [r7, #6]
 8018b7e:	4613      	mov	r3, r2
 8018b80:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8018b82:	4b32      	ldr	r3, [pc, #200]	@ (8018c4c <usbd_edpt_xfer+0xe0>)
 8018b84:	781b      	ldrb	r3, [r3, #0]
 8018b86:	71fb      	strb	r3, [r7, #7]
 8018b88:	79bb      	ldrb	r3, [r7, #6]
 8018b8a:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018b8c:	7abb      	ldrb	r3, [r7, #10]
 8018b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018b92:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8018b94:	75fb      	strb	r3, [r7, #23]
 8018b96:	79bb      	ldrb	r3, [r7, #6]
 8018b98:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8018b9a:	7afb      	ldrb	r3, [r7, #11]
 8018b9c:	09db      	lsrs	r3, r3, #7
 8018b9e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8018ba0:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8018ba2:	7dfa      	ldrb	r2, [r7, #23]
 8018ba4:	7dbb      	ldrb	r3, [r7, #22]
 8018ba6:	492a      	ldr	r1, [pc, #168]	@ (8018c50 <usbd_edpt_xfer+0xe4>)
 8018ba8:	0052      	lsls	r2, r2, #1
 8018baa:	440a      	add	r2, r1
 8018bac:	4413      	add	r3, r2
 8018bae:	3320      	adds	r3, #32
 8018bb0:	799b      	ldrb	r3, [r3, #6]
 8018bb2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018bb6:	b2db      	uxtb	r3, r3
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d00a      	beq.n	8018bd2 <usbd_edpt_xfer+0x66>
 8018bbc:	4b25      	ldr	r3, [pc, #148]	@ (8018c54 <usbd_edpt_xfer+0xe8>)
 8018bbe:	60fb      	str	r3, [r7, #12]
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	f003 0301 	and.w	r3, r3, #1
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d000      	beq.n	8018bce <usbd_edpt_xfer+0x62>
 8018bcc:	be00      	bkpt	0x0000
 8018bce:	2300      	movs	r3, #0
 8018bd0:	e038      	b.n	8018c44 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8018bd2:	7dfa      	ldrb	r2, [r7, #23]
 8018bd4:	7dbb      	ldrb	r3, [r7, #22]
 8018bd6:	491e      	ldr	r1, [pc, #120]	@ (8018c50 <usbd_edpt_xfer+0xe4>)
 8018bd8:	0052      	lsls	r2, r2, #1
 8018bda:	440a      	add	r2, r1
 8018bdc:	4413      	add	r3, r2
 8018bde:	f103 0220 	add.w	r2, r3, #32
 8018be2:	7993      	ldrb	r3, [r2, #6]
 8018be4:	f043 0301 	orr.w	r3, r3, #1
 8018be8:	7193      	strb	r3, [r2, #6]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8018bea:	88bb      	ldrh	r3, [r7, #4]
 8018bec:	79b9      	ldrb	r1, [r7, #6]
 8018bee:	79f8      	ldrb	r0, [r7, #7]
 8018bf0:	683a      	ldr	r2, [r7, #0]
 8018bf2:	f000 fdbf 	bl	8019774 <dcd_edpt_xfer>
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d001      	beq.n	8018c00 <usbd_edpt_xfer+0x94>
    return true;
 8018bfc:	2301      	movs	r3, #1
 8018bfe:	e021      	b.n	8018c44 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8018c00:	7dfa      	ldrb	r2, [r7, #23]
 8018c02:	7dbb      	ldrb	r3, [r7, #22]
 8018c04:	4912      	ldr	r1, [pc, #72]	@ (8018c50 <usbd_edpt_xfer+0xe4>)
 8018c06:	0052      	lsls	r2, r2, #1
 8018c08:	440a      	add	r2, r1
 8018c0a:	4413      	add	r3, r2
 8018c0c:	f103 0220 	add.w	r2, r3, #32
 8018c10:	7993      	ldrb	r3, [r2, #6]
 8018c12:	f023 0301 	bic.w	r3, r3, #1
 8018c16:	7193      	strb	r3, [r2, #6]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8018c18:	7dfa      	ldrb	r2, [r7, #23]
 8018c1a:	7dbb      	ldrb	r3, [r7, #22]
 8018c1c:	490c      	ldr	r1, [pc, #48]	@ (8018c50 <usbd_edpt_xfer+0xe4>)
 8018c1e:	0052      	lsls	r2, r2, #1
 8018c20:	440a      	add	r2, r1
 8018c22:	4413      	add	r3, r2
 8018c24:	f103 0220 	add.w	r2, r3, #32
 8018c28:	7993      	ldrb	r3, [r2, #6]
 8018c2a:	f023 0304 	bic.w	r3, r3, #4
 8018c2e:	7193      	strb	r3, [r2, #6]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8018c30:	4b08      	ldr	r3, [pc, #32]	@ (8018c54 <usbd_edpt_xfer+0xe8>)
 8018c32:	613b      	str	r3, [r7, #16]
 8018c34:	693b      	ldr	r3, [r7, #16]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	f003 0301 	and.w	r3, r3, #1
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d000      	beq.n	8018c42 <usbd_edpt_xfer+0xd6>
 8018c40:	be00      	bkpt	0x0000
    return false;
 8018c42:	2300      	movs	r3, #0
  }
}
 8018c44:	4618      	mov	r0, r3
 8018c46:	3718      	adds	r7, #24
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	bd80      	pop	{r7, pc}
 8018c4c:	2400000e 	.word	0x2400000e
 8018c50:	2400871c 	.word	0x2400871c
 8018c54:	e000edf0 	.word	0xe000edf0

08018c58 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b084      	sub	sp, #16
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	4603      	mov	r3, r0
 8018c60:	6039      	str	r1, [r7, #0]
 8018c62:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8018c64:	683b      	ldr	r3, [r7, #0]
 8018c66:	781b      	ldrb	r3, [r3, #0]
 8018c68:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8018c6c:	b2db      	uxtb	r3, r3
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d001      	beq.n	8018c76 <status_stage_xact+0x1e>
 8018c72:	2300      	movs	r3, #0
 8018c74:	e000      	b.n	8018c78 <status_stage_xact+0x20>
 8018c76:	2380      	movs	r3, #128	@ 0x80
 8018c78:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8018c7a:	7bf9      	ldrb	r1, [r7, #15]
 8018c7c:	79f8      	ldrb	r0, [r7, #7]
 8018c7e:	2300      	movs	r3, #0
 8018c80:	2200      	movs	r2, #0
 8018c82:	f7ff ff73 	bl	8018b6c <usbd_edpt_xfer>
 8018c86:	4603      	mov	r3, r0
}
 8018c88:	4618      	mov	r0, r3
 8018c8a:	3710      	adds	r7, #16
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bd80      	pop	{r7, pc}

08018c90 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b082      	sub	sp, #8
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	4603      	mov	r3, r0
 8018c98:	6039      	str	r1, [r7, #0]
 8018c9a:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 8018c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8018ccc <tud_control_status+0x3c>)
 8018c9e:	683a      	ldr	r2, [r7, #0]
 8018ca0:	6810      	ldr	r0, [r2, #0]
 8018ca2:	6851      	ldr	r1, [r2, #4]
 8018ca4:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8018ca6:	4b09      	ldr	r3, [pc, #36]	@ (8018ccc <tud_control_status+0x3c>)
 8018ca8:	2200      	movs	r2, #0
 8018caa:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8018cac:	4b07      	ldr	r3, [pc, #28]	@ (8018ccc <tud_control_status+0x3c>)
 8018cae:	2200      	movs	r2, #0
 8018cb0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8018cb2:	4b06      	ldr	r3, [pc, #24]	@ (8018ccc <tud_control_status+0x3c>)
 8018cb4:	2200      	movs	r2, #0
 8018cb6:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 8018cb8:	79fb      	ldrb	r3, [r7, #7]
 8018cba:	6839      	ldr	r1, [r7, #0]
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	f7ff ffcb 	bl	8018c58 <status_stage_xact>
 8018cc2:	4603      	mov	r3, r0
}
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	3708      	adds	r7, #8
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}
 8018ccc:	24008824 	.word	0x24008824

08018cd0 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b088      	sub	sp, #32
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8018cda:	4b24      	ldr	r3, [pc, #144]	@ (8018d6c <data_stage_xact+0x9c>)
 8018cdc:	899a      	ldrh	r2, [r3, #12]
 8018cde:	4b23      	ldr	r3, [pc, #140]	@ (8018d6c <data_stage_xact+0x9c>)
 8018ce0:	89db      	ldrh	r3, [r3, #14]
 8018ce2:	1ad3      	subs	r3, r2, r3
 8018ce4:	b29b      	uxth	r3, r3
 8018ce6:	837b      	strh	r3, [r7, #26]
 8018ce8:	2340      	movs	r3, #64	@ 0x40
 8018cea:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8018cec:	8b7a      	ldrh	r2, [r7, #26]
 8018cee:	8b3b      	ldrh	r3, [r7, #24]
 8018cf0:	4293      	cmp	r3, r2
 8018cf2:	bf28      	it	cs
 8018cf4:	4613      	movcs	r3, r2
 8018cf6:	b29b      	uxth	r3, r3
 8018cf8:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 8018cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8018d6c <data_stage_xact+0x9c>)
 8018d00:	781b      	ldrb	r3, [r3, #0]
 8018d02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8018d06:	b2db      	uxtb	r3, r3
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d01e      	beq.n	8018d4a <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 8018d0c:	2380      	movs	r3, #128	@ 0x80
 8018d0e:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8018d10:	8bbb      	ldrh	r3, [r7, #28]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d019      	beq.n	8018d4a <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8018d16:	4b15      	ldr	r3, [pc, #84]	@ (8018d6c <data_stage_xact+0x9c>)
 8018d18:	689a      	ldr	r2, [r3, #8]
 8018d1a:	8bbb      	ldrh	r3, [r7, #28]
 8018d1c:	4914      	ldr	r1, [pc, #80]	@ (8018d70 <data_stage_xact+0xa0>)
 8018d1e:	6179      	str	r1, [r7, #20]
 8018d20:	2140      	movs	r1, #64	@ 0x40
 8018d22:	6139      	str	r1, [r7, #16]
 8018d24:	60fa      	str	r2, [r7, #12]
 8018d26:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8018d28:	693a      	ldr	r2, [r7, #16]
 8018d2a:	68bb      	ldr	r3, [r7, #8]
 8018d2c:	429a      	cmp	r2, r3
 8018d2e:	d202      	bcs.n	8018d36 <data_stage_xact+0x66>
    return -1;
 8018d30:	f04f 33ff 	mov.w	r3, #4294967295
 8018d34:	e005      	b.n	8018d42 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 8018d36:	68ba      	ldr	r2, [r7, #8]
 8018d38:	68f9      	ldr	r1, [r7, #12]
 8018d3a:	6978      	ldr	r0, [r7, #20]
 8018d3c:	f004 fee5 	bl	801db0a <memcpy>
  return 0;
 8018d40:	2300      	movs	r3, #0
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d001      	beq.n	8018d4a <data_stage_xact+0x7a>
 8018d46:	2300      	movs	r3, #0
 8018d48:	e00b      	b.n	8018d62 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 8018d4a:	8bbb      	ldrh	r3, [r7, #28]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d001      	beq.n	8018d54 <data_stage_xact+0x84>
 8018d50:	4a07      	ldr	r2, [pc, #28]	@ (8018d70 <data_stage_xact+0xa0>)
 8018d52:	e000      	b.n	8018d56 <data_stage_xact+0x86>
 8018d54:	2200      	movs	r2, #0
 8018d56:	8bbb      	ldrh	r3, [r7, #28]
 8018d58:	7ff9      	ldrb	r1, [r7, #31]
 8018d5a:	79f8      	ldrb	r0, [r7, #7]
 8018d5c:	f7ff ff06 	bl	8018b6c <usbd_edpt_xfer>
 8018d60:	4603      	mov	r3, r0
}
 8018d62:	4618      	mov	r0, r3
 8018d64:	3720      	adds	r7, #32
 8018d66:	46bd      	mov	sp, r7
 8018d68:	bd80      	pop	{r7, pc}
 8018d6a:	bf00      	nop
 8018d6c:	24008824 	.word	0x24008824
 8018d70:	24008838 	.word	0x24008838

08018d74 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 8018d74:	b580      	push	{r7, lr}
 8018d76:	b088      	sub	sp, #32
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	60b9      	str	r1, [r7, #8]
 8018d7c:	607a      	str	r2, [r7, #4]
 8018d7e:	461a      	mov	r2, r3
 8018d80:	4603      	mov	r3, r0
 8018d82:	73fb      	strb	r3, [r7, #15]
 8018d84:	4613      	mov	r3, r2
 8018d86:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 8018d88:	4b30      	ldr	r3, [pc, #192]	@ (8018e4c <tud_control_xfer+0xd8>)
 8018d8a:	68ba      	ldr	r2, [r7, #8]
 8018d8c:	6810      	ldr	r0, [r2, #0]
 8018d8e:	6851      	ldr	r1, [r2, #4]
 8018d90:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8018d92:	4a2e      	ldr	r2, [pc, #184]	@ (8018e4c <tud_control_xfer+0xd8>)
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8018d98:	4b2c      	ldr	r3, [pc, #176]	@ (8018e4c <tud_control_xfer+0xd8>)
 8018d9a:	2200      	movs	r2, #0
 8018d9c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 8018d9e:	68bb      	ldr	r3, [r7, #8]
 8018da0:	88db      	ldrh	r3, [r3, #6]
 8018da2:	b29a      	uxth	r2, r3
 8018da4:	89bb      	ldrh	r3, [r7, #12]
 8018da6:	827b      	strh	r3, [r7, #18]
 8018da8:	4613      	mov	r3, r2
 8018daa:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8018dac:	8a7a      	ldrh	r2, [r7, #18]
 8018dae:	8a3b      	ldrh	r3, [r7, #16]
 8018db0:	4293      	cmp	r3, r2
 8018db2:	bf28      	it	cs
 8018db4:	4613      	movcs	r3, r2
 8018db6:	b29a      	uxth	r2, r3
 8018db8:	4b24      	ldr	r3, [pc, #144]	@ (8018e4c <tud_control_xfer+0xd8>)
 8018dba:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 8018dbc:	68bb      	ldr	r3, [r7, #8]
 8018dbe:	88db      	ldrh	r3, [r3, #6]
 8018dc0:	b29b      	uxth	r3, r3
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d026      	beq.n	8018e14 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 8018dc6:	4b21      	ldr	r3, [pc, #132]	@ (8018e4c <tud_control_xfer+0xd8>)
 8018dc8:	899b      	ldrh	r3, [r3, #12]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d00d      	beq.n	8018dea <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d10a      	bne.n	8018dea <tud_control_xfer+0x76>
 8018dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8018e50 <tud_control_xfer+0xdc>)
 8018dd6:	61bb      	str	r3, [r7, #24]
 8018dd8:	69bb      	ldr	r3, [r7, #24]
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	f003 0301 	and.w	r3, r3, #1
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d000      	beq.n	8018de6 <tud_control_xfer+0x72>
 8018de4:	be00      	bkpt	0x0000
 8018de6:	2300      	movs	r3, #0
 8018de8:	e02b      	b.n	8018e42 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 8018dea:	7bfb      	ldrb	r3, [r7, #15]
 8018dec:	4618      	mov	r0, r3
 8018dee:	f7ff ff6f 	bl	8018cd0 <data_stage_xact>
 8018df2:	4603      	mov	r3, r0
 8018df4:	f083 0301 	eor.w	r3, r3, #1
 8018df8:	b2db      	uxtb	r3, r3
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d020      	beq.n	8018e40 <tud_control_xfer+0xcc>
 8018dfe:	4b14      	ldr	r3, [pc, #80]	@ (8018e50 <tud_control_xfer+0xdc>)
 8018e00:	617b      	str	r3, [r7, #20]
 8018e02:	697b      	ldr	r3, [r7, #20]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	f003 0301 	and.w	r3, r3, #1
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d000      	beq.n	8018e10 <tud_control_xfer+0x9c>
 8018e0e:	be00      	bkpt	0x0000
 8018e10:	2300      	movs	r3, #0
 8018e12:	e016      	b.n	8018e42 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 8018e14:	7bfb      	ldrb	r3, [r7, #15]
 8018e16:	68b9      	ldr	r1, [r7, #8]
 8018e18:	4618      	mov	r0, r3
 8018e1a:	f7ff ff1d 	bl	8018c58 <status_stage_xact>
 8018e1e:	4603      	mov	r3, r0
 8018e20:	f083 0301 	eor.w	r3, r3, #1
 8018e24:	b2db      	uxtb	r3, r3
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d00a      	beq.n	8018e40 <tud_control_xfer+0xcc>
 8018e2a:	4b09      	ldr	r3, [pc, #36]	@ (8018e50 <tud_control_xfer+0xdc>)
 8018e2c:	61fb      	str	r3, [r7, #28]
 8018e2e:	69fb      	ldr	r3, [r7, #28]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	f003 0301 	and.w	r3, r3, #1
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d000      	beq.n	8018e3c <tud_control_xfer+0xc8>
 8018e3a:	be00      	bkpt	0x0000
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	e000      	b.n	8018e42 <tud_control_xfer+0xce>
  }

  return true;
 8018e40:	2301      	movs	r3, #1
}
 8018e42:	4618      	mov	r0, r3
 8018e44:	3720      	adds	r7, #32
 8018e46:	46bd      	mov	sp, r7
 8018e48:	bd80      	pop	{r7, pc}
 8018e4a:	bf00      	nop
 8018e4c:	24008824 	.word	0x24008824
 8018e50:	e000edf0 	.word	0xe000edf0

08018e54 <__NVIC_EnableIRQ>:
{
 8018e54:	b480      	push	{r7}
 8018e56:	b083      	sub	sp, #12
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8018e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	db0b      	blt.n	8018e7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018e66:	88fb      	ldrh	r3, [r7, #6]
 8018e68:	f003 021f 	and.w	r2, r3, #31
 8018e6c:	4907      	ldr	r1, [pc, #28]	@ (8018e8c <__NVIC_EnableIRQ+0x38>)
 8018e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018e72:	095b      	lsrs	r3, r3, #5
 8018e74:	2001      	movs	r0, #1
 8018e76:	fa00 f202 	lsl.w	r2, r0, r2
 8018e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8018e7e:	bf00      	nop
 8018e80:	370c      	adds	r7, #12
 8018e82:	46bd      	mov	sp, r7
 8018e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e88:	4770      	bx	lr
 8018e8a:	bf00      	nop
 8018e8c:	e000e100 	.word	0xe000e100

08018e90 <__NVIC_DisableIRQ>:
{
 8018e90:	b480      	push	{r7}
 8018e92:	b083      	sub	sp, #12
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	4603      	mov	r3, r0
 8018e98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8018e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	db12      	blt.n	8018ec8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018ea2:	88fb      	ldrh	r3, [r7, #6]
 8018ea4:	f003 021f 	and.w	r2, r3, #31
 8018ea8:	490a      	ldr	r1, [pc, #40]	@ (8018ed4 <__NVIC_DisableIRQ+0x44>)
 8018eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018eae:	095b      	lsrs	r3, r3, #5
 8018eb0:	2001      	movs	r0, #1
 8018eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8018eb6:	3320      	adds	r3, #32
 8018eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8018ebc:	f3bf 8f4f 	dsb	sy
}
 8018ec0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8018ec2:	f3bf 8f6f 	isb	sy
}
 8018ec6:	bf00      	nop
}
 8018ec8:	bf00      	nop
 8018eca:	370c      	adds	r7, #12
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed2:	4770      	bx	lr
 8018ed4:	e000e100 	.word	0xe000e100

08018ed8 <dma_setup_prepare>:
  (void) dwc2;
  // Internal DMA only
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 8018ed8:	b480      	push	{r7}
 8018eda:	b085      	sub	sp, #20
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	4603      	mov	r3, r0
 8018ee0:	71fb      	strb	r3, [r7, #7]
 8018ee2:	79fb      	ldrb	r3, [r7, #7]
 8018ee4:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8018ee6:	7afb      	ldrb	r3, [r7, #11]
 8018ee8:	2b01      	cmp	r3, #1
 8018eea:	d901      	bls.n	8018ef0 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 8018eec:	2300      	movs	r3, #0
 8018eee:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8018ef0:	7afb      	ldrb	r3, [r7, #11]
 8018ef2:	4a13      	ldr	r2, [pc, #76]	@ (8018f40 <dma_setup_prepare+0x68>)
 8018ef4:	011b      	lsls	r3, r3, #4
 8018ef6:	4413      	add	r3, r2
 8018ef8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8018efa:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018f00:	4a10      	ldr	r2, [pc, #64]	@ (8018f44 <dma_setup_prepare+0x6c>)
 8018f02:	4293      	cmp	r3, r2
 8018f04:	d904      	bls.n	8018f10 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	db10      	blt.n	8018f32 <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	4a0d      	ldr	r2, [pc, #52]	@ (8018f48 <dma_setup_prepare+0x70>)
 8018f14:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 8018f18:	4a0c      	ldr	r2, [pc, #48]	@ (8018f4c <dma_setup_prepare+0x74>)
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8018f26:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8018f30:	e000      	b.n	8018f34 <dma_setup_prepare+0x5c>
      return;
 8018f32:	bf00      	nop
}
 8018f34:	3714      	adds	r7, #20
 8018f36:	46bd      	mov	sp, r7
 8018f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f3c:	4770      	bx	lr
 8018f3e:	bf00      	nop
 8018f40:	08031f98 	.word	0x08031f98
 8018f44:	4f543009 	.word	0x4f543009
 8018f48:	20080008 	.word	0x20080008
 8018f4c:	240089a0 	.word	0x240089a0

08018f50 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8018f50:	b480      	push	{r7}
 8018f52:	b091      	sub	sp, #68	@ 0x44
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	4603      	mov	r3, r0
 8018f58:	71fb      	strb	r3, [r7, #7]
 8018f5a:	460b      	mov	r3, r1
 8018f5c:	71bb      	strb	r3, [r7, #6]
 8018f5e:	4613      	mov	r3, r2
 8018f60:	80bb      	strh	r3, [r7, #4]
 8018f62:	79fb      	ldrb	r3, [r7, #7]
 8018f64:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8018f66:	7e7b      	ldrb	r3, [r7, #25]
 8018f68:	2b01      	cmp	r3, #1
 8018f6a:	d901      	bls.n	8018f70 <dfifo_alloc+0x20>
    rhport = 0;
 8018f6c:	2300      	movs	r3, #0
 8018f6e:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8018f70:	7e7b      	ldrb	r3, [r7, #25]
 8018f72:	4a65      	ldr	r2, [pc, #404]	@ (8019108 <dfifo_alloc+0x1b8>)
 8018f74:	011b      	lsls	r3, r3, #4
 8018f76:	4413      	add	r3, r2
 8018f78:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8018f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8018f7c:	79fb      	ldrb	r3, [r7, #7]
 8018f7e:	011b      	lsls	r3, r3, #4
 8018f80:	4a61      	ldr	r2, [pc, #388]	@ (8019108 <dfifo_alloc+0x1b8>)
 8018f82:	4413      	add	r3, r2
 8018f84:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 8018f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f88:	7a1b      	ldrb	r3, [r3, #8]
 8018f8a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8018f8e:	79bb      	ldrb	r3, [r7, #6]
 8018f90:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8018f92:	7ebb      	ldrb	r3, [r7, #26]
 8018f94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018f98:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8018f9a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8018f9e:	79bb      	ldrb	r3, [r7, #6]
 8018fa0:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8018fa2:	7efb      	ldrb	r3, [r7, #27]
 8018fa4:	09db      	lsrs	r3, r3, #7
 8018fa6:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8018fa8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8018fac:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8018fb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018fb4:	429a      	cmp	r2, r3
 8018fb6:	d30a      	bcc.n	8018fce <dfifo_alloc+0x7e>
 8018fb8:	4b54      	ldr	r3, [pc, #336]	@ (801910c <dfifo_alloc+0x1bc>)
 8018fba:	61fb      	str	r3, [r7, #28]
 8018fbc:	69fb      	ldr	r3, [r7, #28]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	f003 0301 	and.w	r3, r3, #1
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d000      	beq.n	8018fca <dfifo_alloc+0x7a>
 8018fc8:	be00      	bkpt	0x0000
 8018fca:	2300      	movs	r3, #0
 8018fcc:	e095      	b.n	80190fa <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8018fce:	88bb      	ldrh	r3, [r7, #4]
 8018fd0:	617b      	str	r3, [r7, #20]
 8018fd2:	2304      	movs	r3, #4
 8018fd4:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8018fd6:	697a      	ldr	r2, [r7, #20]
 8018fd8:	693b      	ldr	r3, [r7, #16]
 8018fda:	4413      	add	r3, r2
 8018fdc:	1e5a      	subs	r2, r3, #1
 8018fde:	693b      	ldr	r3, [r7, #16]
 8018fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8018fe4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 8018fe6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d12a      	bne.n	8019044 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8018fee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018ff0:	009b      	lsls	r3, r3, #2
 8018ff2:	b29b      	uxth	r3, r3
 8018ff4:	81fb      	strh	r3, [r7, #14]
 8018ff6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8018ffa:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8018ffc:	89fb      	ldrh	r3, [r7, #14]
 8018ffe:	089b      	lsrs	r3, r3, #2
 8019000:	b29b      	uxth	r3, r3
 8019002:	f103 0208 	add.w	r2, r3, #8
 8019006:	7b7b      	ldrb	r3, [r7, #13]
 8019008:	4413      	add	r3, r2
 801900a:	b29b      	uxth	r3, r3
 801900c:	005b      	lsls	r3, r3, #1
 801900e:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8019010:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 8019012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019016:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019018:	429a      	cmp	r2, r3
 801901a:	d26d      	bcs.n	80190f8 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 801901c:	4b3c      	ldr	r3, [pc, #240]	@ (8019110 <dfifo_alloc+0x1c0>)
 801901e:	889b      	ldrh	r3, [r3, #4]
 8019020:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8019022:	429a      	cmp	r2, r3
 8019024:	d90a      	bls.n	801903c <dfifo_alloc+0xec>
 8019026:	4b39      	ldr	r3, [pc, #228]	@ (801910c <dfifo_alloc+0x1bc>)
 8019028:	623b      	str	r3, [r7, #32]
 801902a:	6a3b      	ldr	r3, [r7, #32]
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	f003 0301 	and.w	r3, r3, #1
 8019032:	2b00      	cmp	r3, #0
 8019034:	d000      	beq.n	8019038 <dfifo_alloc+0xe8>
 8019036:	be00      	bkpt	0x0000
 8019038:	2300      	movs	r3, #0
 801903a:	e05e      	b.n	80190fa <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 801903c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801903e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019040:	625a      	str	r2, [r3, #36]	@ 0x24
 8019042:	e059      	b.n	80190f8 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8019044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019046:	7a5b      	ldrb	r3, [r3, #9]
 8019048:	2b00      	cmp	r3, #0
 801904a:	d016      	beq.n	801907a <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 801904c:	4b30      	ldr	r3, [pc, #192]	@ (8019110 <dfifo_alloc+0x1c0>)
 801904e:	799a      	ldrb	r2, [r3, #6]
 8019050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019052:	7a5b      	ldrb	r3, [r3, #9]
 8019054:	429a      	cmp	r2, r3
 8019056:	d30a      	bcc.n	801906e <dfifo_alloc+0x11e>
 8019058:	4b2c      	ldr	r3, [pc, #176]	@ (801910c <dfifo_alloc+0x1bc>)
 801905a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801905c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	f003 0301 	and.w	r3, r3, #1
 8019064:	2b00      	cmp	r3, #0
 8019066:	d000      	beq.n	801906a <dfifo_alloc+0x11a>
 8019068:	be00      	bkpt	0x0000
 801906a:	2300      	movs	r3, #0
 801906c:	e045      	b.n	80190fa <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 801906e:	4b28      	ldr	r3, [pc, #160]	@ (8019110 <dfifo_alloc+0x1c0>)
 8019070:	799b      	ldrb	r3, [r3, #6]
 8019072:	3301      	adds	r3, #1
 8019074:	b2da      	uxtb	r2, r3
 8019076:	4b26      	ldr	r3, [pc, #152]	@ (8019110 <dfifo_alloc+0x1c0>)
 8019078:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 801907a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801907c:	689b      	ldr	r3, [r3, #8]
 801907e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019082:	2b00      	cmp	r3, #0
 8019084:	d102      	bne.n	801908c <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8019086:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019088:	005b      	lsls	r3, r3, #1
 801908a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 801908c:	4b20      	ldr	r3, [pc, #128]	@ (8019110 <dfifo_alloc+0x1c0>)
 801908e:	889b      	ldrh	r3, [r3, #4]
 8019090:	4619      	mov	r1, r3
 8019092:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019098:	4413      	add	r3, r2
 801909a:	4299      	cmp	r1, r3
 801909c:	d20a      	bcs.n	80190b4 <dfifo_alloc+0x164>
 801909e:	4b1b      	ldr	r3, [pc, #108]	@ (801910c <dfifo_alloc+0x1bc>)
 80190a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80190a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	f003 0301 	and.w	r3, r3, #1
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d000      	beq.n	80190b0 <dfifo_alloc+0x160>
 80190ae:	be00      	bkpt	0x0000
 80190b0:	2300      	movs	r3, #0
 80190b2:	e022      	b.n	80190fa <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 80190b4:	4b16      	ldr	r3, [pc, #88]	@ (8019110 <dfifo_alloc+0x1c0>)
 80190b6:	889a      	ldrh	r2, [r3, #4]
 80190b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80190ba:	1ad3      	subs	r3, r2, r3
 80190bc:	b29a      	uxth	r2, r3
 80190be:	4b14      	ldr	r3, [pc, #80]	@ (8019110 <dfifo_alloc+0x1c0>)
 80190c0:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 80190c2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d108      	bne.n	80190dc <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 80190ca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80190cc:	041b      	lsls	r3, r3, #16
 80190ce:	4a10      	ldr	r2, [pc, #64]	@ (8019110 <dfifo_alloc+0x1c0>)
 80190d0:	8892      	ldrh	r2, [r2, #4]
 80190d2:	4313      	orrs	r3, r2
 80190d4:	461a      	mov	r2, r3
 80190d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80190da:	e00d      	b.n	80190f8 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 80190dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80190de:	041b      	lsls	r3, r3, #16
 80190e0:	4a0b      	ldr	r2, [pc, #44]	@ (8019110 <dfifo_alloc+0x1c0>)
 80190e2:	8892      	ldrh	r2, [r2, #4]
 80190e4:	431a      	orrs	r2, r3
 80190e6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80190ea:	3b01      	subs	r3, #1
 80190ec:	4611      	mov	r1, r2
 80190ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80190f0:	3340      	adds	r3, #64	@ 0x40
 80190f2:	009b      	lsls	r3, r3, #2
 80190f4:	4413      	add	r3, r2
 80190f6:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 80190f8:	2301      	movs	r3, #1
}
 80190fa:	4618      	mov	r0, r3
 80190fc:	3744      	adds	r7, #68	@ 0x44
 80190fe:	46bd      	mov	sp, r7
 8019100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019104:	4770      	bx	lr
 8019106:	bf00      	nop
 8019108:	08031f98 	.word	0x08031f98
 801910c:	e000edf0 	.word	0xe000edf0
 8019110:	24008998 	.word	0x24008998

08019114 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8019114:	b580      	push	{r7, lr}
 8019116:	b088      	sub	sp, #32
 8019118:	af00      	add	r7, sp, #0
 801911a:	4603      	mov	r3, r0
 801911c:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 801911e:	79fb      	ldrb	r3, [r7, #7]
 8019120:	011b      	lsls	r3, r3, #4
 8019122:	4a25      	ldr	r2, [pc, #148]	@ (80191b8 <dfifo_device_init+0xa4>)
 8019124:	4413      	add	r3, r2
 8019126:	61fb      	str	r3, [r7, #28]
 8019128:	79fb      	ldrb	r3, [r7, #7]
 801912a:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801912c:	7b3b      	ldrb	r3, [r7, #12]
 801912e:	2b01      	cmp	r3, #1
 8019130:	d901      	bls.n	8019136 <dfifo_device_init+0x22>
    rhport = 0;
 8019132:	2300      	movs	r3, #0
 8019134:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019136:	7b3b      	ldrb	r3, [r7, #12]
 8019138:	4a1f      	ldr	r2, [pc, #124]	@ (80191b8 <dfifo_device_init+0xa4>)
 801913a:	011b      	lsls	r3, r3, #4
 801913c:	4413      	add	r3, r2
 801913e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8019140:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8019142:	69fb      	ldr	r3, [r7, #28]
 8019144:	7a1b      	ldrb	r3, [r3, #8]
 8019146:	2240      	movs	r2, #64	@ 0x40
 8019148:	81fa      	strh	r2, [r7, #14]
 801914a:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 801914c:	89fb      	ldrh	r3, [r7, #14]
 801914e:	089b      	lsrs	r3, r3, #2
 8019150:	b29b      	uxth	r3, r3
 8019152:	f103 0208 	add.w	r2, r3, #8
 8019156:	7b7b      	ldrb	r3, [r7, #13]
 8019158:	4413      	add	r3, r2
 801915a:	b29b      	uxth	r3, r3
 801915c:	005b      	lsls	r3, r3, #1
 801915e:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8019160:	461a      	mov	r2, r3
 8019162:	69bb      	ldr	r3, [r7, #24]
 8019164:	625a      	str	r2, [r3, #36]	@ 0x24
 8019166:	69bb      	ldr	r3, [r7, #24]
 8019168:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 801916a:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 801916c:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 801916e:	69fb      	ldr	r3, [r7, #28]
 8019170:	68db      	ldr	r3, [r3, #12]
 8019172:	089b      	lsrs	r3, r3, #2
 8019174:	b29a      	uxth	r2, r3
 8019176:	4b11      	ldr	r3, [pc, #68]	@ (80191bc <dfifo_device_init+0xa8>)
 8019178:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 801917a:	7dfb      	ldrb	r3, [r7, #23]
 801917c:	2b00      	cmp	r3, #0
 801917e:	d009      	beq.n	8019194 <dfifo_device_init+0x80>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8019180:	4b0e      	ldr	r3, [pc, #56]	@ (80191bc <dfifo_device_init+0xa8>)
 8019182:	889a      	ldrh	r2, [r3, #4]
 8019184:	69fb      	ldr	r3, [r7, #28]
 8019186:	7a1b      	ldrb	r3, [r3, #8]
 8019188:	005b      	lsls	r3, r3, #1
 801918a:	b29b      	uxth	r3, r3
 801918c:	1ad3      	subs	r3, r2, r3
 801918e:	b29a      	uxth	r2, r3
 8019190:	4b0a      	ldr	r3, [pc, #40]	@ (80191bc <dfifo_device_init+0xa8>)
 8019192:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8019194:	4b09      	ldr	r3, [pc, #36]	@ (80191bc <dfifo_device_init+0xa8>)
 8019196:	889b      	ldrh	r3, [r3, #4]
 8019198:	461a      	mov	r2, r3
 801919a:	4613      	mov	r3, r2
 801919c:	041b      	lsls	r3, r3, #16
 801919e:	441a      	add	r2, r3
 80191a0:	69bb      	ldr	r3, [r7, #24]
 80191a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 80191a4:	79fb      	ldrb	r3, [r7, #7]
 80191a6:	2240      	movs	r2, #64	@ 0x40
 80191a8:	2180      	movs	r1, #128	@ 0x80
 80191aa:	4618      	mov	r0, r3
 80191ac:	f7ff fed0 	bl	8018f50 <dfifo_alloc>
}
 80191b0:	bf00      	nop
 80191b2:	3720      	adds	r7, #32
 80191b4:	46bd      	mov	sp, r7
 80191b6:	bd80      	pop	{r7, pc}
 80191b8:	08031f98 	.word	0x08031f98
 80191bc:	24008998 	.word	0x24008998

080191c0 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 80191c0:	b480      	push	{r7}
 80191c2:	b08b      	sub	sp, #44	@ 0x2c
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	4603      	mov	r3, r0
 80191c8:	6039      	str	r1, [r7, #0]
 80191ca:	71fb      	strb	r3, [r7, #7]
 80191cc:	79fb      	ldrb	r3, [r7, #7]
 80191ce:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80191d0:	7c7b      	ldrb	r3, [r7, #17]
 80191d2:	2b01      	cmp	r3, #1
 80191d4:	d901      	bls.n	80191da <edpt_activate+0x1a>
    rhport = 0;
 80191d6:	2300      	movs	r3, #0
 80191d8:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80191da:	7c7b      	ldrb	r3, [r7, #17]
 80191dc:	4a45      	ldr	r2, [pc, #276]	@ (80192f4 <edpt_activate+0x134>)
 80191de:	011b      	lsls	r3, r3, #4
 80191e0:	4413      	add	r3, r2
 80191e2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80191e4:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 80191e6:	683b      	ldr	r3, [r7, #0]
 80191e8:	789b      	ldrb	r3, [r3, #2]
 80191ea:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80191ec:	7cbb      	ldrb	r3, [r7, #18]
 80191ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80191f2:	b2db      	uxtb	r3, r3
 80191f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 80191f8:	683b      	ldr	r3, [r7, #0]
 80191fa:	789b      	ldrb	r3, [r3, #2]
 80191fc:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80191fe:	7cfb      	ldrb	r3, [r7, #19]
 8019200:	09db      	lsrs	r3, r3, #7
 8019202:	b2db      	uxtb	r3, r3
 8019204:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8019208:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 801920c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019210:	0052      	lsls	r2, r2, #1
 8019212:	4413      	add	r3, r2
 8019214:	011b      	lsls	r3, r3, #4
 8019216:	4a38      	ldr	r2, [pc, #224]	@ (80192f8 <edpt_activate+0x138>)
 8019218:	4413      	add	r3, r2
 801921a:	61fb      	str	r3, [r7, #28]
 801921c:	683b      	ldr	r3, [r7, #0]
 801921e:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8019220:	697b      	ldr	r3, [r7, #20]
 8019222:	889b      	ldrh	r3, [r3, #4]
 8019224:	b29b      	uxth	r3, r3
 8019226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801922a:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 801922c:	69fb      	ldr	r3, [r7, #28]
 801922e:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 8019230:	683b      	ldr	r3, [r7, #0]
 8019232:	799a      	ldrb	r2, [r3, #6]
 8019234:	69fb      	ldr	r3, [r7, #28]
 8019236:	731a      	strb	r2, [r3, #12]
  // Endpoint control
  union {
    uint32_t value;
    dwc2_depctl_t bm;
  } depctl;
  depctl.value = 0;
 8019238:	2300      	movs	r3, #0
 801923a:	60fb      	str	r3, [r7, #12]

  depctl.bm.mps = xfer->max_size;
 801923c:	69fb      	ldr	r3, [r7, #28]
 801923e:	895b      	ldrh	r3, [r3, #10]
 8019240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019244:	b29a      	uxth	r2, r3
 8019246:	89bb      	ldrh	r3, [r7, #12]
 8019248:	f362 030a 	bfi	r3, r2, #0, #11
 801924c:	81bb      	strh	r3, [r7, #12]
  depctl.bm.active = 1;
 801924e:	7b7b      	ldrb	r3, [r7, #13]
 8019250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019254:	737b      	strb	r3, [r7, #13]
  depctl.bm.type = p_endpoint_desc->bmAttributes.xfer;
 8019256:	683b      	ldr	r3, [r7, #0]
 8019258:	78db      	ldrb	r3, [r3, #3]
 801925a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801925e:	b2da      	uxtb	r2, r3
 8019260:	7bbb      	ldrb	r3, [r7, #14]
 8019262:	f362 0383 	bfi	r3, r2, #2, #2
 8019266:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8019268:	683b      	ldr	r3, [r7, #0]
 801926a:	78db      	ldrb	r3, [r3, #3]
 801926c:	f003 0303 	and.w	r3, r3, #3
 8019270:	b2db      	uxtb	r3, r3
 8019272:	2b01      	cmp	r3, #1
 8019274:	d003      	beq.n	801927e <edpt_activate+0xbe>
    depctl.bm.set_data0_iso_even = 1;
 8019276:	7bfb      	ldrb	r3, [r7, #15]
 8019278:	f043 0310 	orr.w	r3, r3, #16
 801927c:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 801927e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019282:	2b01      	cmp	r3, #1
 8019284:	d108      	bne.n	8019298 <edpt_activate+0xd8>
    depctl.bm.tx_fifo_num = epnum;
 8019286:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801928a:	f003 030f 	and.w	r3, r3, #15
 801928e:	b2da      	uxtb	r2, r3
 8019290:	89fb      	ldrh	r3, [r7, #14]
 8019292:	f362 1389 	bfi	r3, r2, #6, #4
 8019296:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8019298:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801929c:	2b01      	cmp	r3, #1
 801929e:	bf14      	ite	ne
 80192a0:	2301      	movne	r3, #1
 80192a2:	2300      	moveq	r3, #0
 80192a4:	b2db      	uxtb	r3, r3
 80192a6:	461a      	mov	r2, r3
 80192a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80192ac:	0112      	lsls	r2, r2, #4
 80192ae:	4413      	add	r3, r2
 80192b0:	3348      	adds	r3, #72	@ 0x48
 80192b2:	015b      	lsls	r3, r3, #5
 80192b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80192b6:	4413      	add	r3, r2
 80192b8:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 80192ba:	68fa      	ldr	r2, [r7, #12]
 80192bc:	69bb      	ldr	r3, [r7, #24]
 80192be:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 80192c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192c2:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 80192c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80192ca:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 80192ce:	2901      	cmp	r1, #1
 80192d0:	d101      	bne.n	80192d6 <edpt_activate+0x116>
 80192d2:	2100      	movs	r1, #0
 80192d4:	e000      	b.n	80192d8 <edpt_activate+0x118>
 80192d6:	2110      	movs	r1, #16
 80192d8:	440b      	add	r3, r1
 80192da:	2101      	movs	r1, #1
 80192dc:	fa01 f303 	lsl.w	r3, r1, r3
 80192e0:	431a      	orrs	r2, r3
 80192e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192e4:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 80192e8:	bf00      	nop
 80192ea:	372c      	adds	r7, #44	@ 0x2c
 80192ec:	46bd      	mov	sp, r7
 80192ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f2:	4770      	bx	lr
 80192f4:	08031f98 	.word	0x08031f98
 80192f8:	24008878 	.word	0x24008878

080192fc <edpt_schedule_packets>:
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}

static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b08e      	sub	sp, #56	@ 0x38
 8019300:	af00      	add	r7, sp, #0
 8019302:	4603      	mov	r3, r0
 8019304:	71fb      	strb	r3, [r7, #7]
 8019306:	460b      	mov	r3, r1
 8019308:	71bb      	strb	r3, [r7, #6]
 801930a:	4613      	mov	r3, r2
 801930c:	717b      	strb	r3, [r7, #5]
 801930e:	79fb      	ldrb	r3, [r7, #7]
 8019310:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019314:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019318:	2b01      	cmp	r3, #1
 801931a:	d902      	bls.n	8019322 <edpt_schedule_packets+0x26>
    rhport = 0;
 801931c:	2300      	movs	r3, #0
 801931e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019322:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019326:	4a63      	ldr	r2, [pc, #396]	@ (80194b4 <edpt_schedule_packets+0x1b8>)
 8019328:	011b      	lsls	r3, r3, #4
 801932a:	4413      	add	r3, r2
 801932c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801932e:	633b      	str	r3, [r7, #48]	@ 0x30
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8019330:	79ba      	ldrb	r2, [r7, #6]
 8019332:	797b      	ldrb	r3, [r7, #5]
 8019334:	0052      	lsls	r2, r2, #1
 8019336:	4413      	add	r3, r2
 8019338:	011b      	lsls	r3, r3, #4
 801933a:	4a5f      	ldr	r2, [pc, #380]	@ (80194b8 <edpt_schedule_packets+0x1bc>)
 801933c:	4413      	add	r3, r2
 801933e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8019340:	797b      	ldrb	r3, [r7, #5]
 8019342:	2b01      	cmp	r3, #1
 8019344:	bf14      	ite	ne
 8019346:	2301      	movne	r3, #1
 8019348:	2300      	moveq	r3, #0
 801934a:	b2db      	uxtb	r3, r3
 801934c:	461a      	mov	r2, r3
 801934e:	79bb      	ldrb	r3, [r7, #6]
 8019350:	0112      	lsls	r2, r2, #4
 8019352:	4413      	add	r3, r2
 8019354:	3348      	adds	r3, #72	@ 0x48
 8019356:	015b      	lsls	r3, r3, #5
 8019358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801935a:	4413      	add	r3, r2
 801935c:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 801935e:	79bb      	ldrb	r3, [r7, #6]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d11c      	bne.n	801939e <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 8019364:	797b      	ldrb	r3, [r7, #5]
 8019366:	4a55      	ldr	r2, [pc, #340]	@ (80194bc <edpt_schedule_packets+0x1c0>)
 8019368:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801936c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801936e:	895b      	ldrh	r3, [r3, #10]
 8019370:	843a      	strh	r2, [r7, #32]
 8019372:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8019374:	8c3a      	ldrh	r2, [r7, #32]
 8019376:	8bfb      	ldrh	r3, [r7, #30]
 8019378:	4293      	cmp	r3, r2
 801937a:	bf28      	it	cs
 801937c:	4613      	movcs	r3, r2
 801937e:	b29b      	uxth	r3, r3
 8019380:	86bb      	strh	r3, [r7, #52]	@ 0x34
    _dcd_data.ep0_pending[dir] -= total_bytes;
 8019382:	797b      	ldrb	r3, [r7, #5]
 8019384:	4a4d      	ldr	r2, [pc, #308]	@ (80194bc <edpt_schedule_packets+0x1c0>)
 8019386:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 801938a:	797b      	ldrb	r3, [r7, #5]
 801938c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801938e:	1a8a      	subs	r2, r1, r2
 8019390:	b291      	uxth	r1, r2
 8019392:	4a4a      	ldr	r2, [pc, #296]	@ (80194bc <edpt_schedule_packets+0x1c0>)
 8019394:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 8019398:	2301      	movs	r3, #1
 801939a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801939c:	e014      	b.n	80193c8 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 801939e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193a0:	891b      	ldrh	r3, [r3, #8]
 80193a2:	86bb      	strh	r3, [r7, #52]	@ 0x34
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 80193a4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80193a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80193a8:	8952      	ldrh	r2, [r2, #10]
 80193aa:	61bb      	str	r3, [r7, #24]
 80193ac:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 80193ae:	69ba      	ldr	r2, [r7, #24]
 80193b0:	697b      	ldr	r3, [r7, #20]
 80193b2:	4413      	add	r3, r2
 80193b4:	1e5a      	subs	r2, r3, #1
 80193b6:	697b      	ldr	r3, [r7, #20]
 80193b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80193bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    if (num_packets == 0) {
 80193be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d101      	bne.n	80193c8 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 80193c4:	2301      	movs	r3, #1
 80193c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  union {
    uint32_t value;
    dwc2_ep_tsize_t bm;
  } deptsiz;
  deptsiz.value = 0;
 80193c8:	2300      	movs	r3, #0
 80193ca:	60fb      	str	r3, [r7, #12]
  deptsiz.bm.xfer_size =  total_bytes;
 80193cc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80193ce:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	f362 0312 	bfi	r3, r2, #0, #19
 80193d8:	60fb      	str	r3, [r7, #12]
  deptsiz.bm.packet_count = num_packets;
 80193da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80193dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80193e0:	b29a      	uxth	r2, r3
 80193e2:	89fb      	ldrh	r3, [r7, #14]
 80193e4:	f362 03cc 	bfi	r3, r2, #3, #10
 80193e8:	81fb      	strh	r3, [r7, #14]

  dep->tsiz = deptsiz.value;
 80193ea:	68fa      	ldr	r2, [r7, #12]
 80193ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193ee:	611a      	str	r2, [r3, #16]
  // control
  union {
    dwc2_depctl_t bm;
    uint32_t value;
  } depctl;
  depctl.value = dep->ctl;
 80193f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	60bb      	str	r3, [r7, #8]

  depctl.bm.clear_nak = 1;
 80193f6:	7afb      	ldrb	r3, [r7, #11]
 80193f8:	f043 0304 	orr.w	r3, r3, #4
 80193fc:	72fb      	strb	r3, [r7, #11]
  depctl.bm.enable = 1;
 80193fe:	7afb      	ldrb	r3, [r7, #11]
 8019400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019404:	72fb      	strb	r3, [r7, #11]
  if (depctl.bm.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 8019406:	7abb      	ldrb	r3, [r7, #10]
 8019408:	f003 030c 	and.w	r3, r3, #12
 801940c:	b2db      	uxtb	r3, r3
 801940e:	2b04      	cmp	r3, #4
 8019410:	d118      	bne.n	8019444 <edpt_schedule_packets+0x148>
 8019412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019414:	7b1b      	ldrb	r3, [r3, #12]
 8019416:	2b01      	cmp	r3, #1
 8019418:	d114      	bne.n	8019444 <edpt_schedule_packets+0x148>
    const uint32_t odd_now = (dwc2->dsts_bm.frame_number & 1u);
 801941a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801941c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8019420:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8019424:	b29b      	uxth	r3, r3
 8019426:	f003 0301 	and.w	r3, r3, #1
 801942a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (odd_now) {
 801942c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801942e:	2b00      	cmp	r3, #0
 8019430:	d004      	beq.n	801943c <edpt_schedule_packets+0x140>
      depctl.bm.set_data0_iso_even = 1;
 8019432:	7afb      	ldrb	r3, [r7, #11]
 8019434:	f043 0310 	orr.w	r3, r3, #16
 8019438:	72fb      	strb	r3, [r7, #11]
 801943a:	e003      	b.n	8019444 <edpt_schedule_packets+0x148>
    } else {
      depctl.bm.set_data1_iso_odd = 1;
 801943c:	7afb      	ldrb	r3, [r7, #11]
 801943e:	f043 0320 	orr.w	r3, r3, #32
 8019442:	72fb      	strb	r3, [r7, #11]
 8019444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019446:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8019448:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 801944a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if(is_dma) {
 801944e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019452:	2b00      	cmp	r3, #0
 8019454:	d015      	beq.n	8019482 <edpt_schedule_packets+0x186>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8019456:	797b      	ldrb	r3, [r7, #5]
 8019458:	2b01      	cmp	r3, #1
 801945a:	d109      	bne.n	8019470 <edpt_schedule_packets+0x174>
 801945c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801945e:	2b00      	cmp	r3, #0
 8019460:	d006      	beq.n	8019470 <edpt_schedule_packets+0x174>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 8019462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8019468:	4611      	mov	r1, r2
 801946a:	4618      	mov	r0, r3
 801946c:	f7fe ff7d 	bl	801836a <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 8019470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	461a      	mov	r2, r3
 8019476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019478:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 801947a:	68ba      	ldr	r2, [r7, #8]
 801947c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801947e:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 8019480:	e013      	b.n	80194aa <edpt_schedule_packets+0x1ae>
    dep->diepctl = depctl.value; // enable endpoint
 8019482:	68ba      	ldr	r2, [r7, #8]
 8019484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019486:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8019488:	797b      	ldrb	r3, [r7, #5]
 801948a:	2b01      	cmp	r3, #1
 801948c:	d10d      	bne.n	80194aa <edpt_schedule_packets+0x1ae>
 801948e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019490:	2b00      	cmp	r3, #0
 8019492:	d00a      	beq.n	80194aa <edpt_schedule_packets+0x1ae>
      dwc2->diepempmsk |= (1 << epnum);
 8019494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019496:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 801949a:	79ba      	ldrb	r2, [r7, #6]
 801949c:	2101      	movs	r1, #1
 801949e:	fa01 f202 	lsl.w	r2, r1, r2
 80194a2:	431a      	orrs	r2, r3
 80194a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194a6:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 80194aa:	bf00      	nop
 80194ac:	3738      	adds	r7, #56	@ 0x38
 80194ae:	46bd      	mov	sp, r7
 80194b0:	bd80      	pop	{r7, pc}
 80194b2:	bf00      	nop
 80194b4:	08031f98 	.word	0x08031f98
 80194b8:	24008878 	.word	0x24008878
 80194bc:	24008998 	.word	0x24008998

080194c0 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 80194c0:	b580      	push	{r7, lr}
 80194c2:	b08a      	sub	sp, #40	@ 0x28
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	4603      	mov	r3, r0
 80194c8:	6039      	str	r1, [r7, #0]
 80194ca:	71fb      	strb	r3, [r7, #7]
 80194cc:	79fb      	ldrb	r3, [r7, #7]
 80194ce:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80194d0:	7bfb      	ldrb	r3, [r7, #15]
 80194d2:	2b01      	cmp	r3, #1
 80194d4:	d901      	bls.n	80194da <dcd_init+0x1a>
    rhport = 0;
 80194d6:	2300      	movs	r3, #0
 80194d8:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80194da:	7bfb      	ldrb	r3, [r7, #15]
 80194dc:	4a3e      	ldr	r2, [pc, #248]	@ (80195d8 <dcd_init+0x118>)
 80194de:	011b      	lsls	r3, r3, #4
 80194e0:	4413      	add	r3, r2
 80194e2:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80194e4:	623b      	str	r3, [r7, #32]

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 80194e6:	2208      	movs	r2, #8
 80194e8:	2100      	movs	r1, #0
 80194ea:	483c      	ldr	r0, [pc, #240]	@ (80195dc <dcd_init+0x11c>)
 80194ec:	f004 fa7c 	bl	801d9e8 <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 80194f0:	2101      	movs	r1, #1
 80194f2:	6a38      	ldr	r0, [r7, #32]
 80194f4:	f000 ffbc 	bl	801a470 <dwc2_core_is_highspeed>
 80194f8:	4603      	mov	r3, r0
 80194fa:	77fb      	strb	r3, [r7, #31]
 80194fc:	6a3b      	ldr	r3, [r7, #32]
 80194fe:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8019500:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 8019502:	77bb      	strb	r3, [r7, #30]
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 8019504:	7fba      	ldrb	r2, [r7, #30]
 8019506:	7ff9      	ldrb	r1, [r7, #31]
 8019508:	79fb      	ldrb	r3, [r7, #7]
 801950a:	4618      	mov	r0, r3
 801950c:	f000 ffcc 	bl	801a4a8 <dwc2_core_init>
 8019510:	4603      	mov	r3, r0
 8019512:	f083 0301 	eor.w	r3, r3, #1
 8019516:	b2db      	uxtb	r3, r3
 8019518:	2b00      	cmp	r3, #0
 801951a:	d00a      	beq.n	8019532 <dcd_init+0x72>
 801951c:	4b30      	ldr	r3, [pc, #192]	@ (80195e0 <dcd_init+0x120>)
 801951e:	617b      	str	r3, [r7, #20]
 8019520:	697b      	ldr	r3, [r7, #20]
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	f003 0301 	and.w	r3, r3, #1
 8019528:	2b00      	cmp	r3, #0
 801952a:	d000      	beq.n	801952e <dcd_init+0x6e>
 801952c:	be00      	bkpt	0x0000
 801952e:	2300      	movs	r3, #0
 8019530:	e04d      	b.n	80195ce <dcd_init+0x10e>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 8019532:	6a3b      	ldr	r3, [r7, #32]
 8019534:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8019538:	f023 0303 	bic.w	r3, r3, #3
 801953c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_highspeed) {
 801953e:	7ffb      	ldrb	r3, [r7, #31]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d00b      	beq.n	801955c <dcd_init+0x9c>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    if (dwc2->ghwcfg2_bm.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 8019544:	6a3b      	ldr	r3, [r7, #32]
 8019546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019548:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801954c:	b2db      	uxtb	r3, r3
 801954e:	2b02      	cmp	r3, #2
 8019550:	d108      	bne.n	8019564 <dcd_init+0xa4>
      dcfg |= DCFG_XCVRDLY;
 8019552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8019558:	627b      	str	r3, [r7, #36]	@ 0x24
 801955a:	e003      	b.n	8019564 <dcd_init+0xa4>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 801955c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801955e:	f043 0303 	orr.w	r3, r3, #3
 8019562:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 8019564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019566:	f043 0304 	orr.w	r3, r3, #4
 801956a:	627b      	str	r3, [r7, #36]	@ 0x24
  dwc2->dcfg = dcfg;
 801956c:	6a3b      	ldr	r3, [r7, #32]
 801956e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019570:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 8019574:	79fb      	ldrb	r3, [r7, #7]
 8019576:	4618      	mov	r0, r3
 8019578:	f000 f8a8 	bl	80196cc <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 801957c:	6a3b      	ldr	r3, [r7, #32]
 801957e:	68db      	ldr	r3, [r3, #12]
 8019580:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8019584:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8019588:	6a3b      	ldr	r3, [r7, #32]
 801958a:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 801958c:	6a3b      	ldr	r3, [r7, #32]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8019594:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8019598:	6a3b      	ldr	r3, [r7, #32]
 801959a:	601a      	str	r2, [r3, #0]

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 801959c:	6a3b      	ldr	r3, [r7, #32]
 801959e:	699a      	ldr	r2, [r3, #24]
 80195a0:	4b10      	ldr	r3, [pc, #64]	@ (80195e4 <dcd_init+0x124>)
 80195a2:	4313      	orrs	r3, r2
 80195a4:	6a3a      	ldr	r2, [r7, #32]
 80195a6:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 80195a8:	6a3b      	ldr	r3, [r7, #32]
 80195aa:	689b      	ldr	r3, [r3, #8]
 80195ac:	61bb      	str	r3, [r7, #24]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 80195ae:	69bb      	ldr	r3, [r7, #24]
 80195b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80195b4:	61bb      	str	r3, [r7, #24]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 80195b6:	69bb      	ldr	r3, [r7, #24]
 80195b8:	f043 0301 	orr.w	r3, r3, #1
 80195bc:	61bb      	str	r3, [r7, #24]
  dwc2->gahbcfg = gahbcfg;
 80195be:	6a3b      	ldr	r3, [r7, #32]
 80195c0:	69ba      	ldr	r2, [r7, #24]
 80195c2:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 80195c4:	79fb      	ldrb	r3, [r7, #7]
 80195c6:	4618      	mov	r0, r3
 80195c8:	f000 f85e 	bl	8019688 <dcd_connect>
  return true;
 80195cc:	2301      	movs	r3, #1
}
 80195ce:	4618      	mov	r0, r3
 80195d0:	3728      	adds	r7, #40	@ 0x28
 80195d2:	46bd      	mov	sp, r7
 80195d4:	bd80      	pop	{r7, pc}
 80195d6:	bf00      	nop
 80195d8:	08031f98 	.word	0x08031f98
 80195dc:	24008998 	.word	0x24008998
 80195e0:	e000edf0 	.word	0xe000edf0
 80195e4:	80003804 	.word	0x80003804

080195e8 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 80195e8:	b580      	push	{r7, lr}
 80195ea:	b084      	sub	sp, #16
 80195ec:	af00      	add	r7, sp, #0
 80195ee:	4603      	mov	r3, r0
 80195f0:	71fb      	strb	r3, [r7, #7]
 80195f2:	79fb      	ldrb	r3, [r7, #7]
 80195f4:	73fb      	strb	r3, [r7, #15]
 80195f6:	2301      	movs	r3, #1
 80195f8:	73bb      	strb	r3, [r7, #14]
 80195fa:	2301      	movs	r3, #1
 80195fc:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 80195fe:	7bfb      	ldrb	r3, [r7, #15]
 8019600:	4a0c      	ldr	r2, [pc, #48]	@ (8019634 <dcd_int_enable+0x4c>)
 8019602:	011b      	lsls	r3, r3, #4
 8019604:	4413      	add	r3, r2
 8019606:	3304      	adds	r3, #4
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	817b      	strh	r3, [r7, #10]
  if (enabled) {
 801960c:	7b7b      	ldrb	r3, [r7, #13]
 801960e:	2b00      	cmp	r3, #0
 8019610:	d005      	beq.n	801961e <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 8019612:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019616:	4618      	mov	r0, r3
 8019618:	f7ff fc1c 	bl	8018e54 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 801961c:	e004      	b.n	8019628 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 801961e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019622:	4618      	mov	r0, r3
 8019624:	f7ff fc34 	bl	8018e90 <__NVIC_DisableIRQ>
}
 8019628:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 801962a:	bf00      	nop
 801962c:	3710      	adds	r7, #16
 801962e:	46bd      	mov	sp, r7
 8019630:	bd80      	pop	{r7, pc}
 8019632:	bf00      	nop
 8019634:	08031f98 	.word	0x08031f98

08019638 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 8019638:	b580      	push	{r7, lr}
 801963a:	b084      	sub	sp, #16
 801963c:	af00      	add	r7, sp, #0
 801963e:	4603      	mov	r3, r0
 8019640:	71fb      	strb	r3, [r7, #7]
 8019642:	79fb      	ldrb	r3, [r7, #7]
 8019644:	73fb      	strb	r3, [r7, #15]
 8019646:	2301      	movs	r3, #1
 8019648:	73bb      	strb	r3, [r7, #14]
 801964a:	2300      	movs	r3, #0
 801964c:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 801964e:	7bfb      	ldrb	r3, [r7, #15]
 8019650:	4a0c      	ldr	r2, [pc, #48]	@ (8019684 <dcd_int_disable+0x4c>)
 8019652:	011b      	lsls	r3, r3, #4
 8019654:	4413      	add	r3, r2
 8019656:	3304      	adds	r3, #4
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	817b      	strh	r3, [r7, #10]
  if (enabled) {
 801965c:	7b7b      	ldrb	r3, [r7, #13]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d005      	beq.n	801966e <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 8019662:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019666:	4618      	mov	r0, r3
 8019668:	f7ff fbf4 	bl	8018e54 <__NVIC_EnableIRQ>
}
 801966c:	e004      	b.n	8019678 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 801966e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019672:	4618      	mov	r0, r3
 8019674:	f7ff fc0c 	bl	8018e90 <__NVIC_DisableIRQ>
}
 8019678:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 801967a:	bf00      	nop
 801967c:	3710      	adds	r7, #16
 801967e:	46bd      	mov	sp, r7
 8019680:	bd80      	pop	{r7, pc}
 8019682:	bf00      	nop
 8019684:	08031f98 	.word	0x08031f98

08019688 <dcd_connect>:
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport) {
 8019688:	b480      	push	{r7}
 801968a:	b085      	sub	sp, #20
 801968c:	af00      	add	r7, sp, #0
 801968e:	4603      	mov	r3, r0
 8019690:	71fb      	strb	r3, [r7, #7]
 8019692:	79fb      	ldrb	r3, [r7, #7]
 8019694:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019696:	7afb      	ldrb	r3, [r7, #11]
 8019698:	2b01      	cmp	r3, #1
 801969a:	d901      	bls.n	80196a0 <dcd_connect+0x18>
    rhport = 0;
 801969c:	2300      	movs	r3, #0
 801969e:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80196a0:	7afb      	ldrb	r3, [r7, #11]
 80196a2:	4a09      	ldr	r2, [pc, #36]	@ (80196c8 <dcd_connect+0x40>)
 80196a4:	011b      	lsls	r3, r3, #4
 80196a6:	4413      	add	r3, r2
 80196a8:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80196aa:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80196b2:	f023 0202 	bic.w	r2, r3, #2
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 80196bc:	bf00      	nop
 80196be:	3714      	adds	r7, #20
 80196c0:	46bd      	mov	sp, r7
 80196c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196c6:	4770      	bx	lr
 80196c8:	08031f98 	.word	0x08031f98

080196cc <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 80196cc:	b480      	push	{r7}
 80196ce:	b085      	sub	sp, #20
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	4603      	mov	r3, r0
 80196d4:	71fb      	strb	r3, [r7, #7]
 80196d6:	79fb      	ldrb	r3, [r7, #7]
 80196d8:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80196da:	7afb      	ldrb	r3, [r7, #11]
 80196dc:	2b01      	cmp	r3, #1
 80196de:	d901      	bls.n	80196e4 <dcd_disconnect+0x18>
    rhport = 0;
 80196e0:	2300      	movs	r3, #0
 80196e2:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80196e4:	7afb      	ldrb	r3, [r7, #11]
 80196e6:	4a09      	ldr	r2, [pc, #36]	@ (801970c <dcd_disconnect+0x40>)
 80196e8:	011b      	lsls	r3, r3, #4
 80196ea:	4413      	add	r3, r2
 80196ec:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80196ee:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80196f6:	f043 0202 	orr.w	r2, r3, #2
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8019700:	bf00      	nop
 8019702:	3714      	adds	r7, #20
 8019704:	46bd      	mov	sp, r7
 8019706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801970a:	4770      	bx	lr
 801970c:	08031f98 	.word	0x08031f98

08019710 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8019710:	b580      	push	{r7, lr}
 8019712:	b084      	sub	sp, #16
 8019714:	af00      	add	r7, sp, #0
 8019716:	4603      	mov	r3, r0
 8019718:	6039      	str	r1, [r7, #0]
 801971a:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 801971c:	683b      	ldr	r3, [r7, #0]
 801971e:	7899      	ldrb	r1, [r3, #2]
 8019720:	683b      	ldr	r3, [r7, #0]
 8019722:	60bb      	str	r3, [r7, #8]
 8019724:	68bb      	ldr	r3, [r7, #8]
 8019726:	889b      	ldrh	r3, [r3, #4]
 8019728:	b29b      	uxth	r3, r3
 801972a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801972e:	b29a      	uxth	r2, r3
 8019730:	79fb      	ldrb	r3, [r7, #7]
 8019732:	4618      	mov	r0, r3
 8019734:	f7ff fc0c 	bl	8018f50 <dfifo_alloc>
 8019738:	4603      	mov	r3, r0
 801973a:	f083 0301 	eor.w	r3, r3, #1
 801973e:	b2db      	uxtb	r3, r3
 8019740:	2b00      	cmp	r3, #0
 8019742:	d00a      	beq.n	801975a <dcd_edpt_open+0x4a>
 8019744:	4b0a      	ldr	r3, [pc, #40]	@ (8019770 <dcd_edpt_open+0x60>)
 8019746:	60fb      	str	r3, [r7, #12]
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	f003 0301 	and.w	r3, r3, #1
 8019750:	2b00      	cmp	r3, #0
 8019752:	d000      	beq.n	8019756 <dcd_edpt_open+0x46>
 8019754:	be00      	bkpt	0x0000
 8019756:	2300      	movs	r3, #0
 8019758:	e005      	b.n	8019766 <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 801975a:	79fb      	ldrb	r3, [r7, #7]
 801975c:	6839      	ldr	r1, [r7, #0]
 801975e:	4618      	mov	r0, r3
 8019760:	f7ff fd2e 	bl	80191c0 <edpt_activate>
  return true;
 8019764:	2301      	movs	r3, #1
}
 8019766:	4618      	mov	r0, r3
 8019768:	3710      	adds	r7, #16
 801976a:	46bd      	mov	sp, r7
 801976c:	bd80      	pop	{r7, pc}
 801976e:	bf00      	nop
 8019770:	e000edf0 	.word	0xe000edf0

08019774 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8019774:	b580      	push	{r7, lr}
 8019776:	b086      	sub	sp, #24
 8019778:	af00      	add	r7, sp, #0
 801977a:	603a      	str	r2, [r7, #0]
 801977c:	461a      	mov	r2, r3
 801977e:	4603      	mov	r3, r0
 8019780:	71fb      	strb	r3, [r7, #7]
 8019782:	460b      	mov	r3, r1
 8019784:	71bb      	strb	r3, [r7, #6]
 8019786:	4613      	mov	r3, r2
 8019788:	80bb      	strh	r3, [r7, #4]
 801978a:	79bb      	ldrb	r3, [r7, #6]
 801978c:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 801978e:	7bbb      	ldrb	r3, [r7, #14]
 8019790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019794:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8019796:	75fb      	strb	r3, [r7, #23]
 8019798:	79bb      	ldrb	r3, [r7, #6]
 801979a:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 801979c:	7bfb      	ldrb	r3, [r7, #15]
 801979e:	09db      	lsrs	r3, r3, #7
 80197a0:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80197a2:	75bb      	strb	r3, [r7, #22]

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 80197a4:	7dfa      	ldrb	r2, [r7, #23]
 80197a6:	7dbb      	ldrb	r3, [r7, #22]
 80197a8:	0052      	lsls	r2, r2, #1
 80197aa:	4413      	add	r3, r2
 80197ac:	011b      	lsls	r3, r3, #4
 80197ae:	4a0f      	ldr	r2, [pc, #60]	@ (80197ec <dcd_edpt_xfer+0x78>)
 80197b0:	4413      	add	r3, r2
 80197b2:	613b      	str	r3, [r7, #16]
  xfer->buffer = buffer;
 80197b4:	693b      	ldr	r3, [r7, #16]
 80197b6:	683a      	ldr	r2, [r7, #0]
 80197b8:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 80197ba:	693b      	ldr	r3, [r7, #16]
 80197bc:	2200      	movs	r2, #0
 80197be:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 80197c0:	693b      	ldr	r3, [r7, #16]
 80197c2:	88ba      	ldrh	r2, [r7, #4]
 80197c4:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if (epnum == 0) {
 80197c6:	7dfb      	ldrb	r3, [r7, #23]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d104      	bne.n	80197d6 <dcd_edpt_xfer+0x62>
    _dcd_data.ep0_pending[dir] = total_bytes;
 80197cc:	7dbb      	ldrb	r3, [r7, #22]
 80197ce:	4908      	ldr	r1, [pc, #32]	@ (80197f0 <dcd_edpt_xfer+0x7c>)
 80197d0:	88ba      	ldrh	r2, [r7, #4]
 80197d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir);
 80197d6:	7dba      	ldrb	r2, [r7, #22]
 80197d8:	7df9      	ldrb	r1, [r7, #23]
 80197da:	79fb      	ldrb	r3, [r7, #7]
 80197dc:	4618      	mov	r0, r3
 80197de:	f7ff fd8d 	bl	80192fc <edpt_schedule_packets>

  return true;
 80197e2:	2301      	movs	r3, #1
}
 80197e4:	4618      	mov	r0, r3
 80197e6:	3718      	adds	r7, #24
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bd80      	pop	{r7, pc}
 80197ec:	24008878 	.word	0x24008878
 80197f0:	24008998 	.word	0x24008998

080197f4 <handle_bus_reset>:
//--------------------------------------------------------------------
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
static void handle_bus_reset(uint8_t rhport) {
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b08a      	sub	sp, #40	@ 0x28
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	4603      	mov	r3, r0
 80197fc:	71fb      	strb	r3, [r7, #7]
 80197fe:	79fb      	ldrb	r3, [r7, #7]
 8019800:	77bb      	strb	r3, [r7, #30]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019802:	7fbb      	ldrb	r3, [r7, #30]
 8019804:	2b01      	cmp	r3, #1
 8019806:	d901      	bls.n	801980c <handle_bus_reset+0x18>
    rhport = 0;
 8019808:	2300      	movs	r3, #0
 801980a:	77bb      	strb	r3, [r7, #30]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801980c:	7fbb      	ldrb	r3, [r7, #30]
 801980e:	4a63      	ldr	r2, [pc, #396]	@ (801999c <handle_bus_reset+0x1a8>)
 8019810:	011b      	lsls	r3, r3, #4
 8019812:	4413      	add	r3, r2
 8019814:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8019816:	623b      	str	r3, [r7, #32]
  const uint8_t ep_count =  DWC2_EP_COUNT(dwc2);
 8019818:	6a3b      	ldr	r3, [r7, #32]
 801981a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801981c:	f3c3 2383 	ubfx	r3, r3, #10, #4
 8019820:	b2db      	uxtb	r3, r3
 8019822:	3301      	adds	r3, #1
 8019824:	77fb      	strb	r3, [r7, #31]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8019826:	f44f 7290 	mov.w	r2, #288	@ 0x120
 801982a:	2100      	movs	r1, #0
 801982c:	485c      	ldr	r0, [pc, #368]	@ (80199a0 <handle_bus_reset+0x1ac>)
 801982e:	f004 f8db 	bl	801d9e8 <memset>

  _dcd_data.sof_en = false;
 8019832:	4b5c      	ldr	r3, [pc, #368]	@ (80199a4 <handle_bus_reset+0x1b0>)
 8019834:	2200      	movs	r2, #0
 8019836:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 8019838:	4b5a      	ldr	r3, [pc, #360]	@ (80199a4 <handle_bus_reset+0x1b0>)
 801983a:	2200      	movs	r2, #0
 801983c:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 801983e:	2300      	movs	r3, #0
 8019840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019844:	e014      	b.n	8019870 <handle_bus_reset+0x7c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8019846:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801984a:	6a3a      	ldr	r2, [r7, #32]
 801984c:	3358      	adds	r3, #88	@ 0x58
 801984e:	015b      	lsls	r3, r3, #5
 8019850:	4413      	add	r3, r2
 8019852:	681a      	ldr	r2, [r3, #0]
 8019854:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019858:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 801985c:	6a39      	ldr	r1, [r7, #32]
 801985e:	3358      	adds	r3, #88	@ 0x58
 8019860:	015b      	lsls	r3, r3, #5
 8019862:	440b      	add	r3, r1
 8019864:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8019866:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801986a:	3301      	adds	r3, #1
 801986c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019870:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019874:	7ffb      	ldrb	r3, [r7, #31]
 8019876:	429a      	cmp	r2, r3
 8019878:	d3e5      	bcc.n	8019846 <handle_bus_reset+0x52>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 801987a:	2300      	movs	r3, #0
 801987c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8019880:	e01d      	b.n	80198be <handle_bus_reset+0xca>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 8019882:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019886:	6a3a      	ldr	r2, [r7, #32]
 8019888:	3348      	adds	r3, #72	@ 0x48
 801988a:	015b      	lsls	r3, r3, #5
 801988c:	4413      	add	r3, r2
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	2b00      	cmp	r3, #0
 8019892:	da0f      	bge.n	80198b4 <handle_bus_reset+0xc0>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 8019894:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019898:	6a3a      	ldr	r2, [r7, #32]
 801989a:	3348      	adds	r3, #72	@ 0x48
 801989c:	015b      	lsls	r3, r3, #5
 801989e:	4413      	add	r3, r2
 80198a0:	681a      	ldr	r2, [r3, #0]
 80198a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80198a6:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 80198aa:	6a39      	ldr	r1, [r7, #32]
 80198ac:	3348      	adds	r3, #72	@ 0x48
 80198ae:	015b      	lsls	r3, r3, #5
 80198b0:	440b      	add	r3, r1
 80198b2:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 80198b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80198b8:	3301      	adds	r3, #1
 80198ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80198be:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80198c2:	7ffb      	ldrb	r3, [r7, #31]
 80198c4:	429a      	cmp	r2, r3
 80198c6:	d3dc      	bcc.n	8019882 <handle_bus_reset+0x8e>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 80198c8:	6a3b      	ldr	r3, [r7, #32]
 80198ca:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80198ce:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 80198d2:	6a3b      	ldr	r3, [r7, #32]
 80198d4:	2209      	movs	r2, #9
 80198d6:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 80198da:	6a3b      	ldr	r3, [r7, #32]
 80198dc:	2209      	movs	r2, #9
 80198de:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 80198e2:	6a3b      	ldr	r3, [r7, #32]
 80198e4:	613b      	str	r3, [r7, #16]
 80198e6:	2310      	movs	r3, #16
 80198e8:	73fb      	strb	r3, [r7, #15]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 80198ea:	7bfb      	ldrb	r3, [r7, #15]
 80198ec:	019b      	lsls	r3, r3, #6
 80198ee:	f043 0220 	orr.w	r2, r3, #32
 80198f2:	693b      	ldr	r3, [r7, #16]
 80198f4:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 80198f6:	bf00      	nop
 80198f8:	693b      	ldr	r3, [r7, #16]
 80198fa:	691b      	ldr	r3, [r3, #16]
 80198fc:	f003 0320 	and.w	r3, r3, #32
 8019900:	2b00      	cmp	r3, #0
 8019902:	d1f9      	bne.n	80198f8 <handle_bus_reset+0x104>
}
 8019904:	bf00      	nop
 8019906:	6a3b      	ldr	r3, [r7, #32]
 8019908:	617b      	str	r3, [r7, #20]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 801990a:	697b      	ldr	r3, [r7, #20]
 801990c:	2210      	movs	r2, #16
 801990e:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8019910:	bf00      	nop
 8019912:	697b      	ldr	r3, [r7, #20]
 8019914:	691b      	ldr	r3, [r3, #16]
 8019916:	f003 0310 	and.w	r3, r3, #16
 801991a:	2b00      	cmp	r3, #0
 801991c:	d1f9      	bne.n	8019912 <handle_bus_reset+0x11e>
}
 801991e:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 8019920:	79fb      	ldrb	r3, [r7, #7]
 8019922:	4618      	mov	r0, r3
 8019924:	f7ff fbf6 	bl	8019114 <dfifo_device_init>

  // 5. Reset device address
  dwc2->dcfg_bm.address = 0;
 8019928:	6a3a      	ldr	r2, [r7, #32]
 801992a:	f8d2 3800 	ldr.w	r3, [r2, #2048]	@ 0x800
 801992e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8019932:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8019936:	6a3b      	ldr	r3, [r7, #32]
 8019938:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 801993c:	f023 0203 	bic.w	r2, r3, #3
 8019940:	6a3b      	ldr	r3, [r7, #32]
 8019942:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 8019946:	6a3b      	ldr	r3, [r7, #32]
 8019948:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 801994c:	f023 0203 	bic.w	r2, r3, #3
 8019950:	6a3b      	ldr	r3, [r7, #32]
 8019952:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8019956:	4b12      	ldr	r3, [pc, #72]	@ (80199a0 <handle_bus_reset+0x1ac>)
 8019958:	2240      	movs	r2, #64	@ 0x40
 801995a:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 801995c:	4b10      	ldr	r3, [pc, #64]	@ (80199a0 <handle_bus_reset+0x1ac>)
 801995e:	2240      	movs	r2, #64	@ 0x40
 8019960:	835a      	strh	r2, [r3, #26]
 8019962:	6a3b      	ldr	r3, [r7, #32]
 8019964:	61bb      	str	r3, [r7, #24]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8019966:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 8019968:	2b00      	cmp	r3, #0
 801996a:	d004      	beq.n	8019976 <handle_bus_reset+0x182>
    dma_setup_prepare(rhport);
 801996c:	79fb      	ldrb	r3, [r7, #7]
 801996e:	4618      	mov	r0, r3
 8019970:	f7ff fab2 	bl	8018ed8 <dma_setup_prepare>
 8019974:	e007      	b.n	8019986 <handle_bus_reset+0x192>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8019976:	6a3b      	ldr	r3, [r7, #32]
 8019978:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 801997c:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8019980:	6a3b      	ldr	r3, [r7, #32]
 8019982:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8019986:	6a3b      	ldr	r3, [r7, #32]
 8019988:	699b      	ldr	r3, [r3, #24]
 801998a:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 801998e:	6a3b      	ldr	r3, [r7, #32]
 8019990:	619a      	str	r2, [r3, #24]
}
 8019992:	bf00      	nop
 8019994:	3728      	adds	r7, #40	@ 0x28
 8019996:	46bd      	mov	sp, r7
 8019998:	bd80      	pop	{r7, pc}
 801999a:	bf00      	nop
 801999c:	08031f98 	.word	0x08031f98
 80199a0:	24008878 	.word	0x24008878
 80199a4:	24008998 	.word	0x24008998

080199a8 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b088      	sub	sp, #32
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	4603      	mov	r3, r0
 80199b0:	71fb      	strb	r3, [r7, #7]
 80199b2:	79fb      	ldrb	r3, [r7, #7]
 80199b4:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80199b6:	7dfb      	ldrb	r3, [r7, #23]
 80199b8:	2b01      	cmp	r3, #1
 80199ba:	d901      	bls.n	80199c0 <handle_enum_done+0x18>
    rhport = 0;
 80199bc:	2300      	movs	r3, #0
 80199be:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80199c0:	7dfb      	ldrb	r3, [r7, #23]
 80199c2:	4a18      	ldr	r2, [pc, #96]	@ (8019a24 <handle_enum_done+0x7c>)
 80199c4:	011b      	lsls	r3, r3, #4
 80199c6:	4413      	add	r3, r2
 80199c8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 80199ca:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dwc2->dsts_bm.enum_speed) {
 80199cc:	69bb      	ldr	r3, [r7, #24]
 80199ce:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80199d2:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80199d6:	b2db      	uxtb	r3, r3
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d002      	beq.n	80199e2 <handle_enum_done+0x3a>
 80199dc:	2b02      	cmp	r3, #2
 80199de:	d003      	beq.n	80199e8 <handle_enum_done+0x40>
 80199e0:	e005      	b.n	80199ee <handle_enum_done+0x46>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 80199e2:	2302      	movs	r3, #2
 80199e4:	77fb      	strb	r3, [r7, #31]
    break;
 80199e6:	e005      	b.n	80199f4 <handle_enum_done+0x4c>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 80199e8:	2301      	movs	r3, #1
 80199ea:	77fb      	strb	r3, [r7, #31]
    break;
 80199ec:	e002      	b.n	80199f4 <handle_enum_done+0x4c>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 80199ee:	2300      	movs	r3, #0
 80199f0:	77fb      	strb	r3, [r7, #31]
    break;
 80199f2:	bf00      	nop
 80199f4:	79fb      	ldrb	r3, [r7, #7]
 80199f6:	75bb      	strb	r3, [r7, #22]
 80199f8:	7ffb      	ldrb	r3, [r7, #31]
 80199fa:	757b      	strb	r3, [r7, #21]
 80199fc:	2301      	movs	r3, #1
 80199fe:	753b      	strb	r3, [r7, #20]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8019a00:	7dbb      	ldrb	r3, [r7, #22]
 8019a02:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_BUS_RESET;
 8019a04:	2301      	movs	r3, #1
 8019a06:	727b      	strb	r3, [r7, #9]
  event.bus_reset.speed = speed;
 8019a08:	7d7b      	ldrb	r3, [r7, #21]
 8019a0a:	733b      	strb	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8019a0c:	7d3a      	ldrb	r2, [r7, #20]
 8019a0e:	f107 0308 	add.w	r3, r7, #8
 8019a12:	4611      	mov	r1, r2
 8019a14:	4618      	mov	r0, r3
 8019a16:	f7fe fdab 	bl	8018570 <dcd_event_handler>
}
 8019a1a:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 8019a1c:	bf00      	nop
 8019a1e:	3720      	adds	r7, #32
 8019a20:	46bd      	mov	sp, r7
 8019a22:	bd80      	pop	{r7, pc}
 8019a24:	08031f98 	.word	0x08031f98

08019a28 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 8019a28:	b580      	push	{r7, lr}
 8019a2a:	b08c      	sub	sp, #48	@ 0x30
 8019a2c:	af00      	add	r7, sp, #0
 8019a2e:	4603      	mov	r3, r0
 8019a30:	71fb      	strb	r3, [r7, #7]
 8019a32:	79fb      	ldrb	r3, [r7, #7]
 8019a34:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019a36:	7cfb      	ldrb	r3, [r7, #19]
 8019a38:	2b01      	cmp	r3, #1
 8019a3a:	d901      	bls.n	8019a40 <handle_rxflvl_irq+0x18>
    rhport = 0;
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019a40:	7cfb      	ldrb	r3, [r7, #19]
 8019a42:	4a48      	ldr	r2, [pc, #288]	@ (8019b64 <handle_rxflvl_irq+0x13c>)
 8019a44:	011b      	lsls	r3, r3, #4
 8019a46:	4413      	add	r3, r2
 8019a48:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8019a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 8019a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019a52:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp_bm = dwc2->grxstsp_bm;
 8019a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a56:	6a1b      	ldr	r3, [r3, #32]
 8019a58:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp_bm.ep_ch_num;
 8019a5a:	7b3b      	ldrb	r3, [r7, #12]
 8019a5c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019a60:	b2db      	uxtb	r3, r3
 8019a62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 8019a66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a6a:	3358      	adds	r3, #88	@ 0x58
 8019a6c:	015b      	lsls	r3, r3, #5
 8019a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019a70:	4413      	add	r3, r2
 8019a72:	623b      	str	r3, [r7, #32]

  switch (grxstsp_bm.packet_status) {
 8019a74:	7bbb      	ldrb	r3, [r7, #14]
 8019a76:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8019a7a:	b2db      	uxtb	r3, r3
 8019a7c:	3b01      	subs	r3, #1
 8019a7e:	2b05      	cmp	r3, #5
 8019a80:	d868      	bhi.n	8019b54 <handle_rxflvl_irq+0x12c>
 8019a82:	a201      	add	r2, pc, #4	@ (adr r2, 8019a88 <handle_rxflvl_irq+0x60>)
 8019a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a88:	08019b55 	.word	0x08019b55
 8019a8c:	08019ac7 	.word	0x08019ac7
 8019a90:	08019b55 	.word	0x08019b55
 8019a94:	08019ab9 	.word	0x08019ab9
 8019a98:	08019b55 	.word	0x08019b55
 8019a9c:	08019aa1 	.word	0x08019aa1
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 8019aa0:	4b31      	ldr	r3, [pc, #196]	@ (8019b68 <handle_rxflvl_irq+0x140>)
 8019aa2:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 8019aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019aa6:	681a      	ldr	r2, [r3, #0]
 8019aa8:	69fb      	ldr	r3, [r7, #28]
 8019aaa:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 8019aac:	69fb      	ldr	r3, [r7, #28]
 8019aae:	3304      	adds	r3, #4
 8019ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019ab2:	6812      	ldr	r2, [r2, #0]
 8019ab4:	601a      	str	r2, [r3, #0]
      break;
 8019ab6:	e050      	b.n	8019b5a <handle_rxflvl_irq+0x132>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8019ab8:	6a3b      	ldr	r3, [r7, #32]
 8019aba:	691b      	ldr	r3, [r3, #16]
 8019abc:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8019ac0:	6a3b      	ldr	r3, [r7, #32]
 8019ac2:	611a      	str	r2, [r3, #16]
      break;
 8019ac4:	e049      	b.n	8019b5a <handle_rxflvl_irq+0x132>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp_bm.byte_count;
 8019ac6:	89bb      	ldrh	r3, [r7, #12]
 8019ac8:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8019acc:	b29b      	uxth	r3, r3
 8019ace:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8019ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019ad4:	015b      	lsls	r3, r3, #5
 8019ad6:	4a25      	ldr	r2, [pc, #148]	@ (8019b6c <handle_rxflvl_irq+0x144>)
 8019ad8:	4413      	add	r3, r2
 8019ada:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 8019adc:	8b7b      	ldrh	r3, [r7, #26]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d03a      	beq.n	8019b58 <handle_rxflvl_irq+0x130>
        // Read packet off RxFIFO
        if (xfer->ff) {
 8019ae2:	697b      	ldr	r3, [r7, #20]
 8019ae4:	685b      	ldr	r3, [r3, #4]
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d007      	beq.n	8019afa <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 8019aea:	697b      	ldr	r3, [r7, #20]
 8019aec:	685b      	ldr	r3, [r3, #4]
 8019aee:	8b7a      	ldrh	r2, [r7, #26]
 8019af0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019af2:	4618      	mov	r0, r3
 8019af4:	f7fe fbf5 	bl	80182e2 <tu_fifo_write_n_const_addr_full_words>
 8019af8:	e00c      	b.n	8019b14 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 8019afa:	697b      	ldr	r3, [r7, #20]
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	8b7a      	ldrh	r2, [r7, #26]
 8019b00:	4619      	mov	r1, r3
 8019b02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019b04:	f000 fd5c 	bl	801a5c0 <dfifo_read_packet>
          xfer->buffer += byte_count;
 8019b08:	697b      	ldr	r3, [r7, #20]
 8019b0a:	681a      	ldr	r2, [r3, #0]
 8019b0c:	8b7b      	ldrh	r3, [r7, #26]
 8019b0e:	441a      	add	r2, r3
 8019b10:	697b      	ldr	r3, [r7, #20]
 8019b12:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 8019b14:	697b      	ldr	r3, [r7, #20]
 8019b16:	895b      	ldrh	r3, [r3, #10]
 8019b18:	8b7a      	ldrh	r2, [r7, #26]
 8019b1a:	429a      	cmp	r2, r3
 8019b1c:	d21c      	bcs.n	8019b58 <handle_rxflvl_irq+0x130>
          xfer->total_len -= epout->tsiz_bm.xfer_size;
 8019b1e:	6a3b      	ldr	r3, [r7, #32]
 8019b20:	691b      	ldr	r3, [r3, #16]
 8019b22:	f3c3 0112 	ubfx	r1, r3, #0, #19
 8019b26:	697b      	ldr	r3, [r7, #20]
 8019b28:	891a      	ldrh	r2, [r3, #8]
 8019b2a:	b28b      	uxth	r3, r1
 8019b2c:	1ad3      	subs	r3, r2, r3
 8019b2e:	b29a      	uxth	r2, r3
 8019b30:	697b      	ldr	r3, [r7, #20]
 8019b32:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 8019b34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d10d      	bne.n	8019b58 <handle_rxflvl_irq+0x130>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 8019b3c:	697b      	ldr	r3, [r7, #20]
 8019b3e:	891a      	ldrh	r2, [r3, #8]
 8019b40:	4b0b      	ldr	r3, [pc, #44]	@ (8019b70 <handle_rxflvl_irq+0x148>)
 8019b42:	881b      	ldrh	r3, [r3, #0]
 8019b44:	1ad3      	subs	r3, r2, r3
 8019b46:	b29a      	uxth	r2, r3
 8019b48:	697b      	ldr	r3, [r7, #20]
 8019b4a:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 8019b4c:	4b08      	ldr	r3, [pc, #32]	@ (8019b70 <handle_rxflvl_irq+0x148>)
 8019b4e:	2200      	movs	r2, #0
 8019b50:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 8019b52:	e001      	b.n	8019b58 <handle_rxflvl_irq+0x130>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 8019b54:	bf00      	nop
 8019b56:	e000      	b.n	8019b5a <handle_rxflvl_irq+0x132>
      break;
 8019b58:	bf00      	nop
  }
}
 8019b5a:	bf00      	nop
 8019b5c:	3730      	adds	r7, #48	@ 0x30
 8019b5e:	46bd      	mov	sp, r7
 8019b60:	bd80      	pop	{r7, pc}
 8019b62:	bf00      	nop
 8019b64:	08031f98 	.word	0x08031f98
 8019b68:	240089a0 	.word	0x240089a0
 8019b6c:	24008878 	.word	0x24008878
 8019b70:	24008998 	.word	0x24008998

08019b74 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 8019b74:	b580      	push	{r7, lr}
 8019b76:	b08e      	sub	sp, #56	@ 0x38
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	4603      	mov	r3, r0
 8019b7c:	603a      	str	r2, [r7, #0]
 8019b7e:	71fb      	strb	r3, [r7, #7]
 8019b80:	460b      	mov	r3, r1
 8019b82:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 8019b84:	783b      	ldrb	r3, [r7, #0]
 8019b86:	f003 0308 	and.w	r3, r3, #8
 8019b8a:	b2db      	uxtb	r3, r3
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d01c      	beq.n	8019bca <handle_epout_slave+0x56>
 8019b90:	79fb      	ldrb	r3, [r7, #7]
 8019b92:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8019b96:	4b34      	ldr	r3, [pc, #208]	@ (8019c68 <handle_epout_slave+0xf4>)
 8019b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019b9a:	2301      	movs	r3, #1
 8019b9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8019ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8019ba4:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 8019ba6:	2306      	movs	r3, #6
 8019ba8:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8019baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019bac:	f107 0318 	add.w	r3, r7, #24
 8019bb0:	6810      	ldr	r0, [r2, #0]
 8019bb2:	6851      	ldr	r1, [r2, #4]
 8019bb4:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8019bb6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8019bba:	f107 0314 	add.w	r3, r7, #20
 8019bbe:	4611      	mov	r1, r2
 8019bc0:	4618      	mov	r0, r3
 8019bc2:	f7fe fcd5 	bl	8018570 <dcd_event_handler>
}
 8019bc6:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 8019bc8:	e04a      	b.n	8019c60 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 8019bca:	783b      	ldrb	r3, [r7, #0]
 8019bcc:	f003 0301 	and.w	r3, r3, #1
 8019bd0:	b2db      	uxtb	r3, r3
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d044      	beq.n	8019c60 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 8019bd6:	783b      	ldrb	r3, [r7, #0]
 8019bd8:	f003 0320 	and.w	r3, r3, #32
 8019bdc:	b2db      	uxtb	r3, r3
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d13e      	bne.n	8019c60 <handle_epout_slave+0xec>
 8019be2:	787b      	ldrb	r3, [r7, #1]
 8019be4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8019be8:	b2db      	uxtb	r3, r3
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d138      	bne.n	8019c60 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8019bee:	79bb      	ldrb	r3, [r7, #6]
 8019bf0:	015b      	lsls	r3, r3, #5
 8019bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8019c6c <handle_epout_slave+0xf8>)
 8019bf4:	4413      	add	r3, r2
 8019bf6:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 8019bf8:	79bb      	ldrb	r3, [r7, #6]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d10a      	bne.n	8019c14 <handle_epout_slave+0xa0>
 8019bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8019c70 <handle_epout_slave+0xfc>)
 8019c00:	881b      	ldrh	r3, [r3, #0]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d006      	beq.n	8019c14 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 8019c06:	79b9      	ldrb	r1, [r7, #6]
 8019c08:	79fb      	ldrb	r3, [r7, #7]
 8019c0a:	2200      	movs	r2, #0
 8019c0c:	4618      	mov	r0, r3
 8019c0e:	f7ff fb75 	bl	80192fc <edpt_schedule_packets>
 8019c12:	e025      	b.n	8019c60 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8019c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c16:	891b      	ldrh	r3, [r3, #8]
 8019c18:	461a      	mov	r2, r3
 8019c1a:	79fb      	ldrb	r3, [r7, #7]
 8019c1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8019c20:	79bb      	ldrb	r3, [r7, #6]
 8019c22:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8019c26:	627a      	str	r2, [r7, #36]	@ 0x24
 8019c28:	2300      	movs	r3, #0
 8019c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019c2e:	2301      	movs	r3, #1
 8019c30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8019c34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8019c38:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8019c3a:	2307      	movs	r3, #7
 8019c3c:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8019c3e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8019c42:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8019c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c46:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8019c48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019c4c:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8019c4e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8019c52:	f107 0308 	add.w	r3, r7, #8
 8019c56:	4611      	mov	r1, r2
 8019c58:	4618      	mov	r0, r3
 8019c5a:	f7fe fc89 	bl	8018570 <dcd_event_handler>
}
 8019c5e:	bf00      	nop
      }
    }
  }
}
 8019c60:	3738      	adds	r7, #56	@ 0x38
 8019c62:	46bd      	mov	sp, r7
 8019c64:	bd80      	pop	{r7, pc}
 8019c66:	bf00      	nop
 8019c68:	240089a0 	.word	0x240089a0
 8019c6c:	24008878 	.word	0x24008878
 8019c70:	24008998 	.word	0x24008998

08019c74 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 8019c74:	b580      	push	{r7, lr}
 8019c76:	b090      	sub	sp, #64	@ 0x40
 8019c78:	af00      	add	r7, sp, #0
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	603a      	str	r2, [r7, #0]
 8019c7e:	71fb      	strb	r3, [r7, #7]
 8019c80:	460b      	mov	r3, r1
 8019c82:	71bb      	strb	r3, [r7, #6]
 8019c84:	79fb      	ldrb	r3, [r7, #7]
 8019c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019c8e:	2b01      	cmp	r3, #1
 8019c90:	d902      	bls.n	8019c98 <handle_epin_slave+0x24>
    rhport = 0;
 8019c92:	2300      	movs	r3, #0
 8019c94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019c98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019c9c:	4a5d      	ldr	r2, [pc, #372]	@ (8019e14 <handle_epin_slave+0x1a0>)
 8019c9e:	011b      	lsls	r3, r3, #4
 8019ca0:	4413      	add	r3, r2
 8019ca2:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8019ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 8019ca6:	79bb      	ldrb	r3, [r7, #6]
 8019ca8:	3348      	adds	r3, #72	@ 0x48
 8019caa:	015b      	lsls	r3, r3, #5
 8019cac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019cae:	4413      	add	r3, r2
 8019cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 8019cb2:	79bb      	ldrb	r3, [r7, #6]
 8019cb4:	015b      	lsls	r3, r3, #5
 8019cb6:	3310      	adds	r3, #16
 8019cb8:	4a57      	ldr	r2, [pc, #348]	@ (8019e18 <handle_epin_slave+0x1a4>)
 8019cba:	4413      	add	r3, r2
 8019cbc:	633b      	str	r3, [r7, #48]	@ 0x30

  if (diepint_bm.xfer_complete) {
 8019cbe:	783b      	ldrb	r3, [r7, #0]
 8019cc0:	f003 0301 	and.w	r3, r3, #1
 8019cc4:	b2db      	uxtb	r3, r3
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d033      	beq.n	8019d32 <handle_epin_slave+0xbe>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 8019cca:	79bb      	ldrb	r3, [r7, #6]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d10a      	bne.n	8019ce6 <handle_epin_slave+0x72>
 8019cd0:	4b52      	ldr	r3, [pc, #328]	@ (8019e1c <handle_epin_slave+0x1a8>)
 8019cd2:	885b      	ldrh	r3, [r3, #2]
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d006      	beq.n	8019ce6 <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 8019cd8:	79b9      	ldrb	r1, [r7, #6]
 8019cda:	79fb      	ldrb	r3, [r7, #7]
 8019cdc:	2201      	movs	r2, #1
 8019cde:	4618      	mov	r0, r3
 8019ce0:	f7ff fb0c 	bl	80192fc <edpt_schedule_packets>
 8019ce4:	e025      	b.n	8019d32 <handle_epin_slave+0xbe>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8019ce6:	79bb      	ldrb	r3, [r7, #6]
 8019ce8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8019cec:	b2d9      	uxtb	r1, r3
 8019cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cf0:	891b      	ldrh	r3, [r3, #8]
 8019cf2:	461a      	mov	r2, r3
 8019cf4:	79fb      	ldrb	r3, [r7, #7]
 8019cf6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8019cfa:	460b      	mov	r3, r1
 8019cfc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8019d00:	61fa      	str	r2, [r7, #28]
 8019d02:	2300      	movs	r3, #0
 8019d04:	76fb      	strb	r3, [r7, #27]
 8019d06:	2301      	movs	r3, #1
 8019d08:	76bb      	strb	r3, [r7, #26]
  event.rhport = rhport;
 8019d0a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019d0e:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8019d10:	2307      	movs	r3, #7
 8019d12:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8019d14:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8019d18:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8019d1a:	69fb      	ldr	r3, [r7, #28]
 8019d1c:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8019d1e:	7efb      	ldrb	r3, [r7, #27]
 8019d20:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8019d22:	7eba      	ldrb	r2, [r7, #26]
 8019d24:	f107 0308 	add.w	r3, r7, #8
 8019d28:	4611      	mov	r1, r2
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	f7fe fc20 	bl	8018570 <dcd_event_handler>
}
 8019d30:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 8019d32:	783b      	ldrb	r3, [r7, #0]
 8019d34:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8019d38:	b2db      	uxtb	r3, r3
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d066      	beq.n	8019e0c <handle_epin_slave+0x198>
 8019d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d40:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8019d44:	79ba      	ldrb	r2, [r7, #6]
 8019d46:	2101      	movs	r1, #1
 8019d48:	fa01 f202 	lsl.w	r2, r1, r2
 8019d4c:	4013      	ands	r3, r2
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d05c      	beq.n	8019e0c <handle_epin_slave+0x198>
    const uint16_t remain_packets = epin->tsiz_bm.packet_count;
 8019d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d54:	691b      	ldr	r3, [r3, #16]
 8019d56:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 8019d5a:	b29b      	uxth	r3, r3
 8019d5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 8019d5e:	2300      	movs	r3, #0
 8019d60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019d62:	e03b      	b.n	8019ddc <handle_epin_slave+0x168>
      const uint16_t remain_bytes = (uint16_t) epin->tsiz_bm.xfer_size;
 8019d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d66:	691b      	ldr	r3, [r3, #16]
 8019d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019d6c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 8019d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d70:	895a      	ldrh	r2, [r3, #10]
 8019d72:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019d74:	833b      	strh	r3, [r7, #24]
 8019d76:	4613      	mov	r3, r2
 8019d78:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8019d7a:	8b3a      	ldrh	r2, [r7, #24]
 8019d7c:	8afb      	ldrh	r3, [r7, #22]
 8019d7e:	4293      	cmp	r3, r2
 8019d80:	bf28      	it	cs
 8019d82:	4613      	movcs	r3, r2
 8019d84:	b29b      	uxth	r3, r3
 8019d86:	857b      	strh	r3, [r7, #42]	@ 0x2a

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 8019d88:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8019d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d8c:	699b      	ldr	r3, [r3, #24]
 8019d8e:	0099      	lsls	r1, r3, #2
 8019d90:	4b23      	ldr	r3, [pc, #140]	@ (8019e20 <handle_epin_slave+0x1ac>)
 8019d92:	400b      	ands	r3, r1
 8019d94:	429a      	cmp	r2, r3
 8019d96:	d826      	bhi.n	8019de6 <handle_epin_slave+0x172>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 8019d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d9a:	685b      	ldr	r3, [r3, #4]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d00d      	beq.n	8019dbc <handle_epin_slave+0x148>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 8019da0:	79bb      	ldrb	r3, [r7, #6]
 8019da2:	3301      	adds	r3, #1
 8019da4:	031b      	lsls	r3, r3, #12
 8019da6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019da8:	4413      	add	r3, r2
 8019daa:	627b      	str	r3, [r7, #36]	@ 0x24
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 8019dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dae:	685b      	ldr	r3, [r3, #4]
 8019db0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8019db2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019db4:	4618      	mov	r0, r3
 8019db6:	f7fe fa2d 	bl	8018214 <tu_fifo_read_n_const_addr_full_words>
 8019dba:	e00c      	b.n	8019dd6 <handle_epin_slave+0x162>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 8019dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dbe:	681a      	ldr	r2, [r3, #0]
 8019dc0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019dc2:	79b9      	ldrb	r1, [r7, #6]
 8019dc4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019dc6:	f000 fc4c 	bl	801a662 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 8019dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dcc:	681a      	ldr	r2, [r3, #0]
 8019dce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019dd0:	441a      	add	r2, r3
 8019dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019dd4:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 8019dd6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019dd8:	3301      	adds	r3, #1
 8019dda:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019ddc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019dde:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019de0:	429a      	cmp	r2, r3
 8019de2:	d3bf      	bcc.n	8019d64 <handle_epin_slave+0xf0>
 8019de4:	e000      	b.n	8019de8 <handle_epin_slave+0x174>
        break;
 8019de6:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    if (epin->tsiz_bm.xfer_size == 0) {
 8019de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019dea:	691b      	ldr	r3, [r3, #16]
 8019dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d10b      	bne.n	8019e0c <handle_epin_slave+0x198>
      dwc2->diepempmsk &= ~(1 << epnum);
 8019df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019df6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8019dfa:	79ba      	ldrb	r2, [r7, #6]
 8019dfc:	2101      	movs	r1, #1
 8019dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8019e02:	43d2      	mvns	r2, r2
 8019e04:	401a      	ands	r2, r3
 8019e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e08:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 8019e0c:	bf00      	nop
 8019e0e:	3740      	adds	r7, #64	@ 0x40
 8019e10:	46bd      	mov	sp, r7
 8019e12:	bd80      	pop	{r7, pc}
 8019e14:	08031f98 	.word	0x08031f98
 8019e18:	24008878 	.word	0x24008878
 8019e1c:	24008998 	.word	0x24008998
 8019e20:	0003fffc 	.word	0x0003fffc

08019e24 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b08a      	sub	sp, #40	@ 0x28
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	460a      	mov	r2, r1
 8019e2e:	71fb      	strb	r3, [r7, #7]
 8019e30:	4613      	mov	r3, r2
 8019e32:	71bb      	strb	r3, [r7, #6]
 8019e34:	79fb      	ldrb	r3, [r7, #7]
 8019e36:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019e38:	7bfb      	ldrb	r3, [r7, #15]
 8019e3a:	2b01      	cmp	r3, #1
 8019e3c:	d901      	bls.n	8019e42 <handle_ep_irq+0x1e>
    rhport = 0;
 8019e3e:	2300      	movs	r3, #0
 8019e40:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019e42:	7bfb      	ldrb	r3, [r7, #15]
 8019e44:	4a31      	ldr	r2, [pc, #196]	@ (8019f0c <handle_ep_irq+0xe8>)
 8019e46:	011b      	lsls	r3, r3, #4
 8019e48:	4413      	add	r3, r2
 8019e4a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8019e4c:	623b      	str	r3, [r7, #32]
 8019e4e:	6a3b      	ldr	r3, [r7, #32]
 8019e50:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8019e52:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 8019e54:	77fb      	strb	r3, [r7, #31]
  const uint8_t ep_count = DWC2_EP_COUNT(dwc2);
 8019e56:	6a3b      	ldr	r3, [r7, #32]
 8019e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019e5a:	f3c3 2383 	ubfx	r3, r3, #10, #4
 8019e5e:	b2db      	uxtb	r3, r3
 8019e60:	3301      	adds	r3, #1
 8019e62:	77bb      	strb	r3, [r7, #30]
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 8019e64:	79bb      	ldrb	r3, [r7, #6]
 8019e66:	2b01      	cmp	r3, #1
 8019e68:	d101      	bne.n	8019e6e <handle_ep_irq+0x4a>
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	e000      	b.n	8019e70 <handle_ep_irq+0x4c>
 8019e6e:	2310      	movs	r3, #16
 8019e70:	777b      	strb	r3, [r7, #29]
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 8019e72:	79bb      	ldrb	r3, [r7, #6]
 8019e74:	2b01      	cmp	r3, #1
 8019e76:	bf14      	ite	ne
 8019e78:	2301      	movne	r3, #1
 8019e7a:	2300      	moveq	r3, #0
 8019e7c:	b2db      	uxtb	r3, r3
 8019e7e:	025b      	lsls	r3, r3, #9
 8019e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8019e84:	6a3a      	ldr	r2, [r7, #32]
 8019e86:	4413      	add	r3, r2
 8019e88:	61bb      	str	r3, [r7, #24]

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8019e8a:	2300      	movs	r3, #0
 8019e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019e90:	e032      	b.n	8019ef8 <handle_ep_irq+0xd4>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 8019e92:	6a3b      	ldr	r3, [r7, #32]
 8019e94:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8019e98:	7f79      	ldrb	r1, [r7, #29]
 8019e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e9e:	440b      	add	r3, r1
 8019ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8019ea4:	f003 0301 	and.w	r3, r3, #1
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d020      	beq.n	8019eee <handle_ep_irq+0xca>
      dwc2_dep_t* epout = &ep_base[epnum];
 8019eac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019eb0:	015b      	lsls	r3, r3, #5
 8019eb2:	69ba      	ldr	r2, [r7, #24]
 8019eb4:	4413      	add	r3, r2
 8019eb6:	617b      	str	r3, [r7, #20]
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 8019eb8:	697b      	ldr	r3, [r7, #20]
 8019eba:	689b      	ldr	r3, [r3, #8]
 8019ebc:	60bb      	str	r3, [r7, #8]

      epout->intr = intr.value; // Clear interrupt
 8019ebe:	68ba      	ldr	r2, [r7, #8]
 8019ec0:	697b      	ldr	r3, [r7, #20]
 8019ec2:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 8019ec4:	7ffb      	ldrb	r3, [r7, #31]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d111      	bne.n	8019eee <handle_ep_irq+0xca>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 8019eca:	79bb      	ldrb	r3, [r7, #6]
 8019ecc:	2b01      	cmp	r3, #1
 8019ece:	d107      	bne.n	8019ee0 <handle_ep_irq+0xbc>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 8019ed0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8019ed4:	79fb      	ldrb	r3, [r7, #7]
 8019ed6:	68ba      	ldr	r2, [r7, #8]
 8019ed8:	4618      	mov	r0, r3
 8019eda:	f7ff fecb 	bl	8019c74 <handle_epin_slave>
 8019ede:	e006      	b.n	8019eee <handle_ep_irq+0xca>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 8019ee0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8019ee4:	79fb      	ldrb	r3, [r7, #7]
 8019ee6:	68ba      	ldr	r2, [r7, #8]
 8019ee8:	4618      	mov	r0, r3
 8019eea:	f7ff fe43 	bl	8019b74 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8019eee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019ef2:	3301      	adds	r3, #1
 8019ef4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019ef8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019efc:	7fbb      	ldrb	r3, [r7, #30]
 8019efe:	429a      	cmp	r2, r3
 8019f00:	d3c7      	bcc.n	8019e92 <handle_ep_irq+0x6e>
        }
        #endif
      }
    }
  }
}
 8019f02:	bf00      	nop
 8019f04:	bf00      	nop
 8019f06:	3728      	adds	r7, #40	@ 0x28
 8019f08:	46bd      	mov	sp, r7
 8019f0a:	bd80      	pop	{r7, pc}
 8019f0c:	08031f98 	.word	0x08031f98

08019f10 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 8019f10:	b580      	push	{r7, lr}
 8019f12:	b098      	sub	sp, #96	@ 0x60
 8019f14:	af00      	add	r7, sp, #0
 8019f16:	4603      	mov	r3, r0
 8019f18:	71fb      	strb	r3, [r7, #7]
 8019f1a:	79fb      	ldrb	r3, [r7, #7]
 8019f1c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8019f20:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8019f24:	2b01      	cmp	r3, #1
 8019f26:	d902      	bls.n	8019f2e <dcd_int_handler+0x1e>
    rhport = 0;
 8019f28:	2300      	movs	r3, #0
 8019f2a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8019f2e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8019f32:	4a7d      	ldr	r2, [pc, #500]	@ (801a128 <dcd_int_handler+0x218>)
 8019f34:	011b      	lsls	r3, r3, #4
 8019f36:	4413      	add	r3, r2
 8019f38:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8019f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c

  const uint32_t gintmask = dwc2->gintmsk;
 8019f3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f3e:	699b      	ldr	r3, [r3, #24]
 8019f40:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 8019f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f44:	695b      	ldr	r3, [r3, #20]
 8019f46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019f48:	4013      	ands	r3, r2
 8019f4a:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 8019f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d007      	beq.n	8019f66 <dcd_int_handler+0x56>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8019f56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8019f5c:	615a      	str	r2, [r3, #20]
    handle_bus_reset(rhport);
 8019f5e:	79fb      	ldrb	r3, [r7, #7]
 8019f60:	4618      	mov	r0, r3
 8019f62:	f7ff fc47 	bl	80197f4 <handle_bus_reset>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 8019f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d007      	beq.n	8019f80 <dcd_int_handler+0x70>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 8019f70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8019f76:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 8019f78:	79fb      	ldrb	r3, [r7, #7]
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	f7ff fd14 	bl	80199a8 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 8019f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d01d      	beq.n	8019fc6 <dcd_int_handler+0xb6>
    dwc2->gintsts = GINTSTS_USBSUSP;
 8019f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019f90:	615a      	str	r2, [r3, #20]
 8019f92:	79fb      	ldrb	r3, [r7, #7]
 8019f94:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8019f98:	2304      	movs	r3, #4
 8019f9a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8019f9e:	2301      	movs	r3, #1
 8019fa0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 8019fa4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8019fa8:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 8019fac:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8019fb0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 8019fb4:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8019fb8:	f107 0320 	add.w	r3, r7, #32
 8019fbc:	4611      	mov	r1, r2
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	f7fe fad6 	bl	8018570 <dcd_event_handler>
}
 8019fc4:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 8019fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	da1d      	bge.n	801a008 <dcd_int_handler+0xf8>
    dwc2->gintsts = GINTSTS_WKUINT;
 8019fcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019fce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8019fd2:	615a      	str	r2, [r3, #20]
 8019fd4:	79fb      	ldrb	r3, [r7, #7]
 8019fd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8019fda:	2305      	movs	r3, #5
 8019fdc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8019fe0:	2301      	movs	r3, #1
 8019fe2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 8019fe6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8019fea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 8019fee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8019ff2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 8019ff6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8019ffa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019ffe:	4611      	mov	r1, r2
 801a000:	4618      	mov	r0, r3
 801a002:	f7fe fab5 	bl	8018570 <dcd_event_handler>
}
 801a006:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 801a008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a00a:	f003 0304 	and.w	r3, r3, #4
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d022      	beq.n	801a058 <dcd_int_handler+0x148>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 801a012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a014:	685b      	ldr	r3, [r3, #4]
 801a016:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 801a018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a01a:	f003 0304 	and.w	r3, r3, #4
 801a01e:	2b00      	cmp	r3, #0
 801a020:	d017      	beq.n	801a052 <dcd_int_handler+0x142>
 801a022:	79fb      	ldrb	r3, [r7, #7]
 801a024:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 801a028:	2302      	movs	r3, #2
 801a02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a02e:	2301      	movs	r3, #1
 801a030:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 801a034:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801a038:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 801a03a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801a03e:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 801a040:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 801a044:	f107 0314 	add.w	r3, r7, #20
 801a048:	4611      	mov	r1, r2
 801a04a:	4618      	mov	r0, r3
 801a04c:	f7fe fa90 	bl	8018570 <dcd_event_handler>
}
 801a050:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 801a052:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a054:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a056:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 801a058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a05a:	f003 0308 	and.w	r3, r3, #8
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d02e      	beq.n	801a0c0 <dcd_int_handler+0x1b0>
    dwc2->gintsts = GINTSTS_SOF;
 801a062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a064:	2208      	movs	r2, #8
 801a066:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 801a068:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a06a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 801a06e:	0a1b      	lsrs	r3, r3, #8
 801a070:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a074:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 801a076:	4b2d      	ldr	r3, [pc, #180]	@ (801a12c <dcd_int_handler+0x21c>)
 801a078:	79db      	ldrb	r3, [r3, #7]
 801a07a:	f083 0301 	eor.w	r3, r3, #1
 801a07e:	b2db      	uxtb	r3, r3
 801a080:	2b00      	cmp	r3, #0
 801a082:	d005      	beq.n	801a090 <dcd_int_handler+0x180>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 801a084:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a086:	699b      	ldr	r3, [r3, #24]
 801a088:	f023 0208 	bic.w	r2, r3, #8
 801a08c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a08e:	619a      	str	r2, [r3, #24]
 801a090:	79fb      	ldrb	r3, [r7, #7]
 801a092:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 801a096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a09a:	2301      	movs	r3, #1
 801a09c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 801a0a0:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 801a0a4:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 801a0a6:	2303      	movs	r3, #3
 801a0a8:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 801a0aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a0ac:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 801a0ae:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 801a0b2:	f107 0308 	add.w	r3, r7, #8
 801a0b6:	4611      	mov	r1, r2
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	f7fe fa59 	bl	8018570 <dcd_event_handler>
}
 801a0be:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 801a0c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0c2:	f003 0310 	and.w	r3, r3, #16
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d015      	beq.n	801a0f6 <dcd_int_handler+0x1e6>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 801a0ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a0cc:	699b      	ldr	r3, [r3, #24]
 801a0ce:	f023 0210 	bic.w	r2, r3, #16
 801a0d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a0d4:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 801a0d6:	79fb      	ldrb	r3, [r7, #7]
 801a0d8:	4618      	mov	r0, r3
 801a0da:	f7ff fca5 	bl	8019a28 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 801a0de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a0e0:	695b      	ldr	r3, [r3, #20]
 801a0e2:	f003 0310 	and.w	r3, r3, #16
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d1f5      	bne.n	801a0d6 <dcd_int_handler+0x1c6>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 801a0ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a0ec:	699b      	ldr	r3, [r3, #24]
 801a0ee:	f043 0210 	orr.w	r2, r3, #16
 801a0f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a0f4:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 801a0f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d004      	beq.n	801a10a <dcd_int_handler+0x1fa>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 801a100:	79fb      	ldrb	r3, [r7, #7]
 801a102:	2100      	movs	r1, #0
 801a104:	4618      	mov	r0, r3
 801a106:	f7ff fe8d 	bl	8019e24 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 801a10a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a10c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801a110:	2b00      	cmp	r3, #0
 801a112:	d004      	beq.n	801a11e <dcd_int_handler+0x20e>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 801a114:	79fb      	ldrb	r3, [r7, #7]
 801a116:	2101      	movs	r1, #1
 801a118:	4618      	mov	r0, r3
 801a11a:	f7ff fe83 	bl	8019e24 <handle_ep_irq>
  }
}
 801a11e:	bf00      	nop
 801a120:	3760      	adds	r7, #96	@ 0x60
 801a122:	46bd      	mov	sp, r7
 801a124:	bd80      	pop	{r7, pc}
 801a126:	bf00      	nop
 801a128:	08031f98 	.word	0x08031f98
 801a12c:	24008998 	.word	0x24008998

0801a130 <dwc2_phy_init>:
}

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 801a130:	b480      	push	{r7}
 801a132:	b083      	sub	sp, #12
 801a134:	af00      	add	r7, sp, #0
 801a136:	6078      	str	r0, [r7, #4]
 801a138:	460b      	mov	r3, r1
 801a13a:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 801a13c:	78fb      	ldrb	r3, [r7, #3]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d112      	bne.n	801a168 <dwc2_phy_init+0x38>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a146:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	639a      	str	r2, [r3, #56]	@ 0x38
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB2OTGFSULPILPEN;
    }
    #endif

    #if defined(USB_OTG_HS_PERIPH_BASE) && defined(RCC_AHB1LPENR_USB1OTGHSULPILPEN)
    if ( USB_OTG_HS_PERIPH_BASE == (uint32_t) dwc2 ) {
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	4a0b      	ldr	r2, [pc, #44]	@ (801a180 <dwc2_phy_init+0x50>)
 801a152:	4293      	cmp	r3, r2
 801a154:	d10e      	bne.n	801a174 <dwc2_phy_init+0x44>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB1OTGHSULPILPEN;
 801a156:	4b0b      	ldr	r3, [pc, #44]	@ (801a184 <dwc2_phy_init+0x54>)
 801a158:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801a15c:	4a09      	ldr	r2, [pc, #36]	@ (801a184 <dwc2_phy_init+0x54>)
 801a15e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a162:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      #else

      #endif
    }
  }
}
 801a166:	e005      	b.n	801a174 <dwc2_phy_init+0x44>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a16c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	639a      	str	r2, [r3, #56]	@ 0x38
}
 801a174:	bf00      	nop
 801a176:	370c      	adds	r7, #12
 801a178:	46bd      	mov	sp, r7
 801a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a17e:	4770      	bx	lr
 801a180:	40040000 	.word	0x40040000
 801a184:	58024400 	.word	0x58024400

0801a188 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 801a188:	b480      	push	{r7}
 801a18a:	b085      	sub	sp, #20
 801a18c:	af00      	add	r7, sp, #0
 801a18e:	6078      	str	r0, [r7, #4]
 801a190:	460b      	mov	r3, r1
 801a192:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 801a194:	78fb      	ldrb	r3, [r7, #3]
 801a196:	2b00      	cmp	r3, #0
 801a198:	d152      	bne.n	801a240 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 801a19a:	4b2c      	ldr	r3, [pc, #176]	@ (801a24c <dwc2_phy_update+0xc4>)
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	4a2c      	ldr	r2, [pc, #176]	@ (801a250 <dwc2_phy_update+0xc8>)
 801a1a0:	4293      	cmp	r3, r2
 801a1a2:	d302      	bcc.n	801a1aa <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 801a1a4:	2306      	movs	r3, #6
 801a1a6:	60fb      	str	r3, [r7, #12]
 801a1a8:	e041      	b.n	801a22e <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 801a1aa:	4b28      	ldr	r3, [pc, #160]	@ (801a24c <dwc2_phy_update+0xc4>)
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	4a29      	ldr	r2, [pc, #164]	@ (801a254 <dwc2_phy_update+0xcc>)
 801a1b0:	4293      	cmp	r3, r2
 801a1b2:	d902      	bls.n	801a1ba <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 801a1b4:	2307      	movs	r3, #7
 801a1b6:	60fb      	str	r3, [r7, #12]
 801a1b8:	e039      	b.n	801a22e <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 801a1ba:	4b24      	ldr	r3, [pc, #144]	@ (801a24c <dwc2_phy_update+0xc4>)
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	4a26      	ldr	r2, [pc, #152]	@ (801a258 <dwc2_phy_update+0xd0>)
 801a1c0:	4293      	cmp	r3, r2
 801a1c2:	d302      	bcc.n	801a1ca <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 801a1c4:	2308      	movs	r3, #8
 801a1c6:	60fb      	str	r3, [r7, #12]
 801a1c8:	e031      	b.n	801a22e <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 801a1ca:	4b20      	ldr	r3, [pc, #128]	@ (801a24c <dwc2_phy_update+0xc4>)
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	4a23      	ldr	r2, [pc, #140]	@ (801a25c <dwc2_phy_update+0xd4>)
 801a1d0:	4293      	cmp	r3, r2
 801a1d2:	d902      	bls.n	801a1da <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 801a1d4:	2309      	movs	r3, #9
 801a1d6:	60fb      	str	r3, [r7, #12]
 801a1d8:	e029      	b.n	801a22e <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 801a1da:	4b1c      	ldr	r3, [pc, #112]	@ (801a24c <dwc2_phy_update+0xc4>)
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	4a20      	ldr	r2, [pc, #128]	@ (801a260 <dwc2_phy_update+0xd8>)
 801a1e0:	4293      	cmp	r3, r2
 801a1e2:	d902      	bls.n	801a1ea <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 801a1e4:	230a      	movs	r3, #10
 801a1e6:	60fb      	str	r3, [r7, #12]
 801a1e8:	e021      	b.n	801a22e <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 801a1ea:	4b18      	ldr	r3, [pc, #96]	@ (801a24c <dwc2_phy_update+0xc4>)
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	4a1d      	ldr	r2, [pc, #116]	@ (801a264 <dwc2_phy_update+0xdc>)
 801a1f0:	4293      	cmp	r3, r2
 801a1f2:	d902      	bls.n	801a1fa <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 801a1f4:	230b      	movs	r3, #11
 801a1f6:	60fb      	str	r3, [r7, #12]
 801a1f8:	e019      	b.n	801a22e <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 801a1fa:	4b14      	ldr	r3, [pc, #80]	@ (801a24c <dwc2_phy_update+0xc4>)
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	4a1a      	ldr	r2, [pc, #104]	@ (801a268 <dwc2_phy_update+0xe0>)
 801a200:	4293      	cmp	r3, r2
 801a202:	d302      	bcc.n	801a20a <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 801a204:	230c      	movs	r3, #12
 801a206:	60fb      	str	r3, [r7, #12]
 801a208:	e011      	b.n	801a22e <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 801a20a:	4b10      	ldr	r3, [pc, #64]	@ (801a24c <dwc2_phy_update+0xc4>)
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	4a17      	ldr	r2, [pc, #92]	@ (801a26c <dwc2_phy_update+0xe4>)
 801a210:	4293      	cmp	r3, r2
 801a212:	d302      	bcc.n	801a21a <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 801a214:	230d      	movs	r3, #13
 801a216:	60fb      	str	r3, [r7, #12]
 801a218:	e009      	b.n	801a22e <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 801a21a:	4b0c      	ldr	r3, [pc, #48]	@ (801a24c <dwc2_phy_update+0xc4>)
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	4a14      	ldr	r2, [pc, #80]	@ (801a270 <dwc2_phy_update+0xe8>)
 801a220:	4293      	cmp	r3, r2
 801a222:	d302      	bcc.n	801a22a <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 801a224:	230e      	movs	r3, #14
 801a226:	60fb      	str	r3, [r7, #12]
 801a228:	e001      	b.n	801a22e <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 801a22a:	230f      	movs	r3, #15
 801a22c:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	68db      	ldr	r3, [r3, #12]
 801a232:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	029b      	lsls	r3, r3, #10
 801a23a:	431a      	orrs	r2, r3
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	60da      	str	r2, [r3, #12]
  }
}
 801a240:	bf00      	nop
 801a242:	3714      	adds	r7, #20
 801a244:	46bd      	mov	sp, r7
 801a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a24a:	4770      	bx	lr
 801a24c:	24000000 	.word	0x24000000
 801a250:	01e84800 	.word	0x01e84800
 801a254:	01a39ddf 	.word	0x01a39ddf
 801a258:	016e3600 	.word	0x016e3600
 801a25c:	014ca43f 	.word	0x014ca43f
 801a260:	01312cff 	.word	0x01312cff
 801a264:	011a499f 	.word	0x011a499f
 801a268:	01067380 	.word	0x01067380
 801a26c:	00f42400 	.word	0x00f42400
 801a270:	00e4e1c0 	.word	0x00e4e1c0

0801a274 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 801a274:	b480      	push	{r7}
 801a276:	b083      	sub	sp, #12
 801a278:	af00      	add	r7, sp, #0
 801a27a:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	691b      	ldr	r3, [r3, #16]
 801a280:	f043 0201 	orr.w	r2, r3, #1
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a28c:	b29b      	uxth	r3, r3
 801a28e:	f244 2209 	movw	r2, #16905	@ 0x4209
 801a292:	4293      	cmp	r3, r2
 801a294:	d807      	bhi.n	801a2a6 <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 801a296:	bf00      	nop
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	691b      	ldr	r3, [r3, #16]
 801a29c:	f003 0301 	and.w	r3, r3, #1
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d1f9      	bne.n	801a298 <reset_core+0x24>
 801a2a4:	e00e      	b.n	801a2c4 <reset_core+0x50>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 801a2a6:	bf00      	nop
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	691b      	ldr	r3, [r3, #16]
 801a2ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d0f9      	beq.n	801a2a8 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	691a      	ldr	r2, [r3, #16]
 801a2b8:	4b08      	ldr	r3, [pc, #32]	@ (801a2dc <reset_core+0x68>)
 801a2ba:	4013      	ands	r3, r2
 801a2bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 801a2c4:	bf00      	nop
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	691b      	ldr	r3, [r3, #16]
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	dafb      	bge.n	801a2c6 <reset_core+0x52>
}
 801a2ce:	bf00      	nop
 801a2d0:	bf00      	nop
 801a2d2:	370c      	adds	r7, #12
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2da:	4770      	bx	lr
 801a2dc:	dffffffe 	.word	0xdffffffe

0801a2e0 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b084      	sub	sp, #16
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	68db      	ldr	r3, [r3, #12]
 801a2ec:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a2f4:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	68fa      	ldr	r2, [r7, #12]
 801a2fa:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 801a2fc:	2100      	movs	r1, #0
 801a2fe:	6878      	ldr	r0, [r7, #4]
 801a300:	f7ff ff16 	bl	801a130 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 801a304:	6878      	ldr	r0, [r7, #4]
 801a306:	f7ff ffb5 	bl	801a274 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 801a30a:	68fb      	ldr	r3, [r7, #12]
 801a30c:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 801a310:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 801a318:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	68fa      	ldr	r2, [r7, #12]
 801a31e:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 801a320:	2100      	movs	r1, #0
 801a322:	6878      	ldr	r0, [r7, #4]
 801a324:	f7ff ff30 	bl	801a188 <dwc2_phy_update>
}
 801a328:	bf00      	nop
 801a32a:	3710      	adds	r7, #16
 801a32c:	46bd      	mov	sp, r7
 801a32e:	bd80      	pop	{r7, pc}

0801a330 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 801a330:	b580      	push	{r7, lr}
 801a332:	b084      	sub	sp, #16
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	68db      	ldr	r3, [r3, #12]
 801a33c:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a344:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a34a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801a34e:	b2db      	uxtb	r3, r3
 801a350:	2b02      	cmp	r3, #2
 801a352:	d114      	bne.n	801a37e <phy_hs_init+0x4e>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	f043 0310 	orr.w	r3, r3, #16
 801a35a:	60fb      	str	r3, [r7, #12]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 801a35c:	68fb      	ldr	r3, [r7, #12]
 801a35e:	f023 0308 	bic.w	r3, r3, #8
 801a362:	60fb      	str	r3, [r7, #12]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a36a:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 801a372:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 801a374:	68fb      	ldr	r3, [r7, #12]
 801a376:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 801a37a:	60fb      	str	r3, [r7, #12]
 801a37c:	e013      	b.n	801a3a6 <phy_hs_init+0x76>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 801a37e:	68fb      	ldr	r3, [r7, #12]
 801a380:	f023 0310 	bic.w	r3, r3, #16
 801a384:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.phy_data_width) {
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a38a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 801a38e:	b2db      	uxtb	r3, r3
 801a390:	2b00      	cmp	r3, #0
 801a392:	d004      	beq.n	801a39e <phy_hs_init+0x6e>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 801a394:	68fb      	ldr	r3, [r7, #12]
 801a396:	f043 0308 	orr.w	r3, r3, #8
 801a39a:	60fb      	str	r3, [r7, #12]
 801a39c:	e003      	b.n	801a3a6 <phy_hs_init+0x76>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	f023 0308 	bic.w	r3, r3, #8
 801a3a4:	60fb      	str	r3, [r7, #12]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	68fa      	ldr	r2, [r7, #12]
 801a3aa:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a3b0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801a3b4:	b2db      	uxtb	r3, r3
 801a3b6:	4619      	mov	r1, r3
 801a3b8:	6878      	ldr	r0, [r7, #4]
 801a3ba:	f7ff feb9 	bl	801a130 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 801a3be:	6878      	ldr	r0, [r7, #4]
 801a3c0:	f7ff ff58 	bl	801a274 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 801a3ca:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a3d0:	f3c3 3381 	ubfx	r3, r3, #14, #2
 801a3d4:	b2db      	uxtb	r3, r3
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d002      	beq.n	801a3e0 <phy_hs_init+0xb0>
 801a3da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 801a3de:	e001      	b.n	801a3e4 <phy_hs_init+0xb4>
 801a3e0:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 801a3e4:	68fa      	ldr	r2, [r7, #12]
 801a3e6:	4313      	orrs	r3, r2
 801a3e8:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	68fa      	ldr	r2, [r7, #12]
 801a3ee:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a3f4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801a3f8:	b2db      	uxtb	r3, r3
 801a3fa:	4619      	mov	r1, r3
 801a3fc:	6878      	ldr	r0, [r7, #4]
 801a3fe:	f7ff fec3 	bl	801a188 <dwc2_phy_update>
}
 801a402:	bf00      	nop
 801a404:	3710      	adds	r7, #16
 801a406:	46bd      	mov	sp, r7
 801a408:	bd80      	pop	{r7, pc}
	...

0801a40c <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 801a40c:	b480      	push	{r7}
 801a40e:	b085      	sub	sp, #20
 801a410:	af00      	add	r7, sp, #0
 801a412:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a418:	4b10      	ldr	r3, [pc, #64]	@ (801a45c <check_dwc2+0x50>)
 801a41a:	4013      	ands	r3, r2
 801a41c:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	4a0f      	ldr	r2, [pc, #60]	@ (801a460 <check_dwc2+0x54>)
 801a422:	4293      	cmp	r3, r2
 801a424:	d012      	beq.n	801a44c <check_dwc2+0x40>
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	4a0e      	ldr	r2, [pc, #56]	@ (801a464 <check_dwc2+0x58>)
 801a42a:	4293      	cmp	r3, r2
 801a42c:	d00e      	beq.n	801a44c <check_dwc2+0x40>
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	4a0d      	ldr	r2, [pc, #52]	@ (801a468 <check_dwc2+0x5c>)
 801a432:	4293      	cmp	r3, r2
 801a434:	d00a      	beq.n	801a44c <check_dwc2+0x40>
 801a436:	4b0d      	ldr	r3, [pc, #52]	@ (801a46c <check_dwc2+0x60>)
 801a438:	60bb      	str	r3, [r7, #8]
 801a43a:	68bb      	ldr	r3, [r7, #8]
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	f003 0301 	and.w	r3, r3, #1
 801a442:	2b00      	cmp	r3, #0
 801a444:	d000      	beq.n	801a448 <check_dwc2+0x3c>
 801a446:	be00      	bkpt	0x0000
 801a448:	2300      	movs	r3, #0
 801a44a:	e000      	b.n	801a44e <check_dwc2+0x42>
#endif

  return true;
 801a44c:	2301      	movs	r3, #1
}
 801a44e:	4618      	mov	r0, r3
 801a450:	3714      	adds	r7, #20
 801a452:	46bd      	mov	sp, r7
 801a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a458:	4770      	bx	lr
 801a45a:	bf00      	nop
 801a45c:	ffff0000 	.word	0xffff0000
 801a460:	4f540000 	.word	0x4f540000
 801a464:	55310000 	.word	0x55310000
 801a468:	55320000 	.word	0x55320000
 801a46c:	e000edf0 	.word	0xe000edf0

0801a470 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 801a470:	b480      	push	{r7}
 801a472:	b083      	sub	sp, #12
 801a474:	af00      	add	r7, sp, #0
 801a476:	6078      	str	r0, [r7, #4]
 801a478:	460b      	mov	r3, r1
 801a47a:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;

#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 801a47c:	78fb      	ldrb	r3, [r7, #3]
 801a47e:	2b01      	cmp	r3, #1
 801a480:	d101      	bne.n	801a486 <dwc2_core_is_highspeed+0x16>
    return false;
 801a482:	2300      	movs	r3, #0
 801a484:	e009      	b.n	801a49a <dwc2_core_is_highspeed+0x2a>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  return dwc2->ghwcfg2_bm.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a48a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801a48e:	b2db      	uxtb	r3, r3
 801a490:	2b00      	cmp	r3, #0
 801a492:	bf14      	ite	ne
 801a494:	2301      	movne	r3, #1
 801a496:	2300      	moveq	r3, #0
 801a498:	b2db      	uxtb	r3, r3
}
 801a49a:	4618      	mov	r0, r3
 801a49c:	370c      	adds	r7, #12
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a4:	4770      	bx	lr
	...

0801a4a8 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 801a4a8:	b580      	push	{r7, lr}
 801a4aa:	b088      	sub	sp, #32
 801a4ac:	af00      	add	r7, sp, #0
 801a4ae:	4603      	mov	r3, r0
 801a4b0:	71fb      	strb	r3, [r7, #7]
 801a4b2:	460b      	mov	r3, r1
 801a4b4:	71bb      	strb	r3, [r7, #6]
 801a4b6:	4613      	mov	r3, r2
 801a4b8:	717b      	strb	r3, [r7, #5]
 801a4ba:	79fb      	ldrb	r3, [r7, #7]
 801a4bc:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 801a4be:	7dfb      	ldrb	r3, [r7, #23]
 801a4c0:	2b01      	cmp	r3, #1
 801a4c2:	d901      	bls.n	801a4c8 <dwc2_core_init+0x20>
    rhport = 0;
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 801a4c8:	7dfb      	ldrb	r3, [r7, #23]
 801a4ca:	4a3b      	ldr	r2, [pc, #236]	@ (801a5b8 <dwc2_core_init+0x110>)
 801a4cc:	011b      	lsls	r3, r3, #4
 801a4ce:	4413      	add	r3, r2
 801a4d0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 801a4d2:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 801a4d4:	69f8      	ldr	r0, [r7, #28]
 801a4d6:	f7ff ff99 	bl	801a40c <check_dwc2>
 801a4da:	4603      	mov	r3, r0
 801a4dc:	f083 0301 	eor.w	r3, r3, #1
 801a4e0:	b2db      	uxtb	r3, r3
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d00a      	beq.n	801a4fc <dwc2_core_init+0x54>
 801a4e6:	4b35      	ldr	r3, [pc, #212]	@ (801a5bc <dwc2_core_init+0x114>)
 801a4e8:	61bb      	str	r3, [r7, #24]
 801a4ea:	69bb      	ldr	r3, [r7, #24]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	f003 0301 	and.w	r3, r3, #1
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d000      	beq.n	801a4f8 <dwc2_core_init+0x50>
 801a4f6:	be00      	bkpt	0x0000
 801a4f8:	2300      	movs	r3, #0
 801a4fa:	e058      	b.n	801a5ae <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 801a4fc:	69fb      	ldr	r3, [r7, #28]
 801a4fe:	689b      	ldr	r3, [r3, #8]
 801a500:	f023 0201 	bic.w	r2, r3, #1
 801a504:	69fb      	ldr	r3, [r7, #28]
 801a506:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 801a508:	79bb      	ldrb	r3, [r7, #6]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d003      	beq.n	801a516 <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 801a50e:	69f8      	ldr	r0, [r7, #28]
 801a510:	f7ff ff0e 	bl	801a330 <phy_hs_init>
 801a514:	e002      	b.n	801a51c <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 801a516:	69f8      	ldr	r0, [r7, #28]
 801a518:	f7ff fee2 	bl	801a2e0 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 801a51c:	69fb      	ldr	r3, [r7, #28]
 801a51e:	68db      	ldr	r3, [r3, #12]
 801a520:	f043 0207 	orr.w	r2, r3, #7
 801a524:	69fb      	ldr	r3, [r7, #28]
 801a526:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 801a528:	69fb      	ldr	r3, [r7, #28]
 801a52a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 801a52e:	f023 020f 	bic.w	r2, r3, #15
 801a532:	69fb      	ldr	r3, [r7, #28]
 801a534:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 801a538:	69fb      	ldr	r3, [r7, #28]
 801a53a:	60fb      	str	r3, [r7, #12]
 801a53c:	2310      	movs	r3, #16
 801a53e:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 801a540:	7afb      	ldrb	r3, [r7, #11]
 801a542:	019b      	lsls	r3, r3, #6
 801a544:	f043 0220 	orr.w	r2, r3, #32
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 801a54c:	bf00      	nop
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	691b      	ldr	r3, [r3, #16]
 801a552:	f003 0320 	and.w	r3, r3, #32
 801a556:	2b00      	cmp	r3, #0
 801a558:	d1f9      	bne.n	801a54e <dwc2_core_init+0xa6>
}
 801a55a:	bf00      	nop
 801a55c:	69fb      	ldr	r3, [r7, #28]
 801a55e:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 801a560:	693b      	ldr	r3, [r7, #16]
 801a562:	2210      	movs	r2, #16
 801a564:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 801a566:	bf00      	nop
 801a568:	693b      	ldr	r3, [r7, #16]
 801a56a:	691b      	ldr	r3, [r3, #16]
 801a56c:	f003 0310 	and.w	r3, r3, #16
 801a570:	2b00      	cmp	r3, #0
 801a572:	d1f9      	bne.n	801a568 <dwc2_core_init+0xc0>
}
 801a574:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 801a576:	69fb      	ldr	r3, [r7, #28]
 801a578:	f04f 32ff 	mov.w	r2, #4294967295
 801a57c:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 801a57e:	69fb      	ldr	r3, [r7, #28]
 801a580:	f04f 32ff 	mov.w	r2, #4294967295
 801a584:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 801a586:	69fb      	ldr	r3, [r7, #28]
 801a588:	2200      	movs	r2, #0
 801a58a:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 801a58c:	797b      	ldrb	r3, [r7, #5]
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d006      	beq.n	801a5a0 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 801a592:	69fb      	ldr	r3, [r7, #28]
 801a594:	689b      	ldr	r3, [r3, #8]
 801a596:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 801a59a:	69fb      	ldr	r3, [r7, #28]
 801a59c:	609a      	str	r2, [r3, #8]
 801a59e:	e005      	b.n	801a5ac <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 801a5a0:	69fb      	ldr	r3, [r7, #28]
 801a5a2:	699b      	ldr	r3, [r3, #24]
 801a5a4:	f043 0210 	orr.w	r2, r3, #16
 801a5a8:	69fb      	ldr	r3, [r7, #28]
 801a5aa:	619a      	str	r2, [r3, #24]
  }

  return true;
 801a5ac:	2301      	movs	r3, #1
}
 801a5ae:	4618      	mov	r0, r3
 801a5b0:	3720      	adds	r7, #32
 801a5b2:	46bd      	mov	sp, r7
 801a5b4:	bd80      	pop	{r7, pc}
 801a5b6:	bf00      	nop
 801a5b8:	08031fb8 	.word	0x08031fb8
 801a5bc:	e000edf0 	.word	0xe000edf0

0801a5c0 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 801a5c0:	b480      	push	{r7}
 801a5c2:	b08f      	sub	sp, #60	@ 0x3c
 801a5c4:	af00      	add	r7, sp, #0
 801a5c6:	60f8      	str	r0, [r7, #12]
 801a5c8:	60b9      	str	r1, [r7, #8]
 801a5ca:	4613      	mov	r3, r2
 801a5cc:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a5d4:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 801a5d6:	88fb      	ldrh	r3, [r7, #6]
 801a5d8:	089b      	lsrs	r3, r3, #2
 801a5da:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 801a5dc:	e00b      	b.n	801a5f6 <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 801a5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5e0:	681b      	ldr	r3, [r3, #0]
 801a5e2:	68ba      	ldr	r2, [r7, #8]
 801a5e4:	627a      	str	r2, [r7, #36]	@ 0x24
 801a5e6:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 801a5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5ea:	6a3a      	ldr	r2, [r7, #32]
 801a5ec:	601a      	str	r2, [r3, #0]
}
 801a5ee:	bf00      	nop
    dst += 4;
 801a5f0:	68bb      	ldr	r3, [r7, #8]
 801a5f2:	3304      	adds	r3, #4
 801a5f4:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 801a5f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a5f8:	1e5a      	subs	r2, r3, #1
 801a5fa:	86fa      	strh	r2, [r7, #54]	@ 0x36
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d1ee      	bne.n	801a5de <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 801a600:	88fb      	ldrh	r3, [r7, #6]
 801a602:	b2db      	uxtb	r3, r3
 801a604:	f003 0303 	and.w	r3, r3, #3
 801a608:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 801a60c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a610:	2b00      	cmp	r3, #0
 801a612:	d020      	beq.n	801a656 <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 801a614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a61c:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 801a61e:	69fb      	ldr	r3, [r7, #28]
 801a620:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 801a622:	68bb      	ldr	r3, [r7, #8]
 801a624:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 801a626:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a62a:	2b01      	cmp	r3, #1
 801a62c:	d907      	bls.n	801a63e <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 801a62e:	68bb      	ldr	r3, [r7, #8]
 801a630:	3301      	adds	r3, #1
 801a632:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a634:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 801a636:	69ba      	ldr	r2, [r7, #24]
 801a638:	0a12      	lsrs	r2, r2, #8
 801a63a:	b2d2      	uxtb	r2, r2
 801a63c:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 801a63e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801a642:	2b02      	cmp	r3, #2
 801a644:	d907      	bls.n	801a656 <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 801a646:	68bb      	ldr	r3, [r7, #8]
 801a648:	3302      	adds	r3, #2
 801a64a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a64c:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 801a64e:	697a      	ldr	r2, [r7, #20]
 801a650:	0c12      	lsrs	r2, r2, #16
 801a652:	b2d2      	uxtb	r2, r2
 801a654:	701a      	strb	r2, [r3, #0]
    }
  }
}
 801a656:	bf00      	nop
 801a658:	373c      	adds	r7, #60	@ 0x3c
 801a65a:	46bd      	mov	sp, r7
 801a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a660:	4770      	bx	lr

0801a662 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 801a662:	b480      	push	{r7}
 801a664:	b08b      	sub	sp, #44	@ 0x2c
 801a666:	af00      	add	r7, sp, #0
 801a668:	60f8      	str	r0, [r7, #12]
 801a66a:	607a      	str	r2, [r7, #4]
 801a66c:	461a      	mov	r2, r3
 801a66e:	460b      	mov	r3, r1
 801a670:	72fb      	strb	r3, [r7, #11]
 801a672:	4613      	mov	r3, r2
 801a674:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 801a676:	7afb      	ldrb	r3, [r7, #11]
 801a678:	3301      	adds	r3, #1
 801a67a:	031b      	lsls	r3, r3, #12
 801a67c:	68fa      	ldr	r2, [r7, #12]
 801a67e:	4413      	add	r3, r2
 801a680:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 801a682:	893b      	ldrh	r3, [r7, #8]
 801a684:	089b      	lsrs	r3, r3, #2
 801a686:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 801a688:	e008      	b.n	801a69c <dfifo_write_packet+0x3a>
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 801a68e:	697b      	ldr	r3, [r7, #20]
 801a690:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 801a692:	69fb      	ldr	r3, [r7, #28]
 801a694:	601a      	str	r2, [r3, #0]
    src += 4;
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	3304      	adds	r3, #4
 801a69a:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 801a69c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a69e:	1e5a      	subs	r2, r3, #1
 801a6a0:	84fa      	strh	r2, [r7, #38]	@ 0x26
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d1f1      	bne.n	801a68a <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 801a6a6:	893b      	ldrh	r3, [r7, #8]
 801a6a8:	b2db      	uxtb	r3, r3
 801a6aa:	f003 0303 	and.w	r3, r3, #3
 801a6ae:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 801a6b0:	7efb      	ldrb	r3, [r7, #27]
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d019      	beq.n	801a6ea <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	781b      	ldrb	r3, [r3, #0]
 801a6ba:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 801a6bc:	7efb      	ldrb	r3, [r7, #27]
 801a6be:	2b01      	cmp	r3, #1
 801a6c0:	d906      	bls.n	801a6d0 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	3301      	adds	r3, #1
 801a6c6:	781b      	ldrb	r3, [r3, #0]
 801a6c8:	021b      	lsls	r3, r3, #8
 801a6ca:	6a3a      	ldr	r2, [r7, #32]
 801a6cc:	4313      	orrs	r3, r2
 801a6ce:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 801a6d0:	7efb      	ldrb	r3, [r7, #27]
 801a6d2:	2b02      	cmp	r3, #2
 801a6d4:	d906      	bls.n	801a6e4 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	3302      	adds	r3, #2
 801a6da:	781b      	ldrb	r3, [r3, #0]
 801a6dc:	041b      	lsls	r3, r3, #16
 801a6de:	6a3a      	ldr	r2, [r7, #32]
 801a6e0:	4313      	orrs	r3, r2
 801a6e2:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 801a6e4:	69fb      	ldr	r3, [r7, #28]
 801a6e6:	6a3a      	ldr	r2, [r7, #32]
 801a6e8:	601a      	str	r2, [r3, #0]
  }
}
 801a6ea:	bf00      	nop
 801a6ec:	372c      	adds	r7, #44	@ 0x2c
 801a6ee:	46bd      	mov	sp, r7
 801a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6f4:	4770      	bx	lr

0801a6f6 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 801a6f6:	b480      	push	{r7}
 801a6f8:	b085      	sub	sp, #20
 801a6fa:	af00      	add	r7, sp, #0
 801a6fc:	6078      	str	r0, [r7, #4]
 801a6fe:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	781b      	ldrb	r3, [r3, #0]
 801a704:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a708:	b2db      	uxtb	r3, r3
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d106      	bne.n	801a71c <tu_edpt_claim+0x26>
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	781b      	ldrb	r3, [r3, #0]
 801a712:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a716:	b2db      	uxtb	r3, r3
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d001      	beq.n	801a720 <tu_edpt_claim+0x2a>
 801a71c:	2300      	movs	r3, #0
 801a71e:	e01e      	b.n	801a75e <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	781b      	ldrb	r3, [r3, #0]
 801a724:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a728:	b2db      	uxtb	r3, r3
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	d108      	bne.n	801a740 <tu_edpt_claim+0x4a>
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	781b      	ldrb	r3, [r3, #0]
 801a732:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a736:	b2db      	uxtb	r3, r3
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d101      	bne.n	801a740 <tu_edpt_claim+0x4a>
 801a73c:	2301      	movs	r3, #1
 801a73e:	e000      	b.n	801a742 <tu_edpt_claim+0x4c>
 801a740:	2300      	movs	r3, #0
 801a742:	73fb      	strb	r3, [r7, #15]
 801a744:	7bfb      	ldrb	r3, [r7, #15]
 801a746:	f003 0301 	and.w	r3, r3, #1
 801a74a:	73fb      	strb	r3, [r7, #15]
  if (available) {
 801a74c:	7bfb      	ldrb	r3, [r7, #15]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d004      	beq.n	801a75c <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 801a752:	687a      	ldr	r2, [r7, #4]
 801a754:	7813      	ldrb	r3, [r2, #0]
 801a756:	f043 0304 	orr.w	r3, r3, #4
 801a75a:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 801a75c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a75e:	4618      	mov	r0, r3
 801a760:	3714      	adds	r7, #20
 801a762:	46bd      	mov	sp, r7
 801a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a768:	4770      	bx	lr

0801a76a <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 801a76a:	b480      	push	{r7}
 801a76c:	b085      	sub	sp, #20
 801a76e:	af00      	add	r7, sp, #0
 801a770:	6078      	str	r0, [r7, #4]
 801a772:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	781b      	ldrb	r3, [r3, #0]
 801a778:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a77c:	b2db      	uxtb	r3, r3
 801a77e:	2b01      	cmp	r3, #1
 801a780:	d108      	bne.n	801a794 <tu_edpt_release+0x2a>
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	781b      	ldrb	r3, [r3, #0]
 801a786:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a78a:	b2db      	uxtb	r3, r3
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d101      	bne.n	801a794 <tu_edpt_release+0x2a>
 801a790:	2301      	movs	r3, #1
 801a792:	e000      	b.n	801a796 <tu_edpt_release+0x2c>
 801a794:	2300      	movs	r3, #0
 801a796:	73fb      	strb	r3, [r7, #15]
 801a798:	7bfb      	ldrb	r3, [r7, #15]
 801a79a:	f003 0301 	and.w	r3, r3, #1
 801a79e:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 801a7a0:	7bfb      	ldrb	r3, [r7, #15]
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d004      	beq.n	801a7b0 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 801a7a6:	687a      	ldr	r2, [r7, #4]
 801a7a8:	7813      	ldrb	r3, [r2, #0]
 801a7aa:	f023 0304 	bic.w	r3, r3, #4
 801a7ae:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 801a7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 801a7b2:	4618      	mov	r0, r3
 801a7b4:	3714      	adds	r7, #20
 801a7b6:	46bd      	mov	sp, r7
 801a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7bc:	4770      	bx	lr
	...

0801a7c0 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 801a7c0:	b480      	push	{r7}
 801a7c2:	b08b      	sub	sp, #44	@ 0x2c
 801a7c4:	af00      	add	r7, sp, #0
 801a7c6:	6078      	str	r0, [r7, #4]
 801a7c8:	460b      	mov	r3, r1
 801a7ca:	70fb      	strb	r3, [r7, #3]
 801a7cc:	4613      	mov	r3, r2
 801a7ce:	70bb      	strb	r3, [r7, #2]
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 801a7d4:	68bb      	ldr	r3, [r7, #8]
 801a7d6:	889b      	ldrh	r3, [r3, #4]
 801a7d8:	b29b      	uxth	r3, r3
 801a7da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a7de:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 801a7e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	78db      	ldrb	r3, [r3, #3]
 801a7e6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801a7ea:	b2db      	uxtb	r3, r3
 801a7ec:	2b03      	cmp	r3, #3
 801a7ee:	d059      	beq.n	801a8a4 <tu_edpt_validate+0xe4>
 801a7f0:	2b03      	cmp	r3, #3
 801a7f2:	dc6e      	bgt.n	801a8d2 <tu_edpt_validate+0x112>
 801a7f4:	2b01      	cmp	r3, #1
 801a7f6:	d002      	beq.n	801a7fe <tu_edpt_validate+0x3e>
 801a7f8:	2b02      	cmp	r3, #2
 801a7fa:	d018      	beq.n	801a82e <tu_edpt_validate+0x6e>
 801a7fc:	e069      	b.n	801a8d2 <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 801a7fe:	78fb      	ldrb	r3, [r7, #3]
 801a800:	2b02      	cmp	r3, #2
 801a802:	d102      	bne.n	801a80a <tu_edpt_validate+0x4a>
 801a804:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a808:	e001      	b.n	801a80e <tu_edpt_validate+0x4e>
 801a80a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801a80e:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 801a810:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a812:	8a7b      	ldrh	r3, [r7, #18]
 801a814:	429a      	cmp	r2, r3
 801a816:	d95e      	bls.n	801a8d6 <tu_edpt_validate+0x116>
 801a818:	4b35      	ldr	r3, [pc, #212]	@ (801a8f0 <tu_edpt_validate+0x130>)
 801a81a:	60fb      	str	r3, [r7, #12]
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	f003 0301 	and.w	r3, r3, #1
 801a824:	2b00      	cmp	r3, #0
 801a826:	d000      	beq.n	801a82a <tu_edpt_validate+0x6a>
 801a828:	be00      	bkpt	0x0000
 801a82a:	2300      	movs	r3, #0
 801a82c:	e059      	b.n	801a8e2 <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 801a82e:	78fb      	ldrb	r3, [r7, #3]
 801a830:	2b02      	cmp	r3, #2
 801a832:	d10e      	bne.n	801a852 <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 801a834:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a83a:	d04e      	beq.n	801a8da <tu_edpt_validate+0x11a>
 801a83c:	4b2c      	ldr	r3, [pc, #176]	@ (801a8f0 <tu_edpt_validate+0x130>)
 801a83e:	617b      	str	r3, [r7, #20]
 801a840:	697b      	ldr	r3, [r7, #20]
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	f003 0301 	and.w	r3, r3, #1
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d000      	beq.n	801a84e <tu_edpt_validate+0x8e>
 801a84c:	be00      	bkpt	0x0000
 801a84e:	2300      	movs	r3, #0
 801a850:	e047      	b.n	801a8e2 <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 801a852:	78bb      	ldrb	r3, [r7, #2]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d00e      	beq.n	801a876 <tu_edpt_validate+0xb6>
 801a858:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a85a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a85e:	d10a      	bne.n	801a876 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 801a864:	69fb      	ldr	r3, [r7, #28]
 801a866:	2200      	movs	r2, #0
 801a868:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801a86c:	711a      	strb	r2, [r3, #4]
 801a86e:	2200      	movs	r2, #0
 801a870:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 801a872:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 801a874:	e031      	b.n	801a8da <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 801a876:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a878:	2b08      	cmp	r3, #8
 801a87a:	d02e      	beq.n	801a8da <tu_edpt_validate+0x11a>
 801a87c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a87e:	2b10      	cmp	r3, #16
 801a880:	d02b      	beq.n	801a8da <tu_edpt_validate+0x11a>
 801a882:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a884:	2b20      	cmp	r3, #32
 801a886:	d028      	beq.n	801a8da <tu_edpt_validate+0x11a>
 801a888:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a88a:	2b40      	cmp	r3, #64	@ 0x40
 801a88c:	d025      	beq.n	801a8da <tu_edpt_validate+0x11a>
 801a88e:	4b18      	ldr	r3, [pc, #96]	@ (801a8f0 <tu_edpt_validate+0x130>)
 801a890:	61bb      	str	r3, [r7, #24]
 801a892:	69bb      	ldr	r3, [r7, #24]
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	f003 0301 	and.w	r3, r3, #1
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d000      	beq.n	801a8a0 <tu_edpt_validate+0xe0>
 801a89e:	be00      	bkpt	0x0000
 801a8a0:	2300      	movs	r3, #0
 801a8a2:	e01e      	b.n	801a8e2 <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 801a8a4:	78fb      	ldrb	r3, [r7, #3]
 801a8a6:	2b02      	cmp	r3, #2
 801a8a8:	d102      	bne.n	801a8b0 <tu_edpt_validate+0xf0>
 801a8aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a8ae:	e000      	b.n	801a8b2 <tu_edpt_validate+0xf2>
 801a8b0:	2340      	movs	r3, #64	@ 0x40
 801a8b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 801a8b4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a8b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a8b8:	429a      	cmp	r2, r3
 801a8ba:	d910      	bls.n	801a8de <tu_edpt_validate+0x11e>
 801a8bc:	4b0c      	ldr	r3, [pc, #48]	@ (801a8f0 <tu_edpt_validate+0x130>)
 801a8be:	623b      	str	r3, [r7, #32]
 801a8c0:	6a3b      	ldr	r3, [r7, #32]
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	f003 0301 	and.w	r3, r3, #1
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d000      	beq.n	801a8ce <tu_edpt_validate+0x10e>
 801a8cc:	be00      	bkpt	0x0000
 801a8ce:	2300      	movs	r3, #0
 801a8d0:	e007      	b.n	801a8e2 <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 801a8d2:	2300      	movs	r3, #0
 801a8d4:	e005      	b.n	801a8e2 <tu_edpt_validate+0x122>
      break;
 801a8d6:	bf00      	nop
 801a8d8:	e002      	b.n	801a8e0 <tu_edpt_validate+0x120>
      break;
 801a8da:	bf00      	nop
 801a8dc:	e000      	b.n	801a8e0 <tu_edpt_validate+0x120>
      break;
 801a8de:	bf00      	nop
  }

  return true;
 801a8e0:	2301      	movs	r3, #1
}
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	372c      	adds	r7, #44	@ 0x2c
 801a8e6:	46bd      	mov	sp, r7
 801a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8ec:	4770      	bx	lr
 801a8ee:	bf00      	nop
 801a8f0:	e000edf0 	.word	0xe000edf0

0801a8f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801a8f4:	b580      	push	{r7, lr}
 801a8f6:	b084      	sub	sp, #16
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	4603      	mov	r3, r0
 801a8fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801a8fe:	79fb      	ldrb	r3, [r7, #7]
 801a900:	4a08      	ldr	r2, [pc, #32]	@ (801a924 <disk_status+0x30>)
 801a902:	009b      	lsls	r3, r3, #2
 801a904:	4413      	add	r3, r2
 801a906:	685b      	ldr	r3, [r3, #4]
 801a908:	685b      	ldr	r3, [r3, #4]
 801a90a:	79fa      	ldrb	r2, [r7, #7]
 801a90c:	4905      	ldr	r1, [pc, #20]	@ (801a924 <disk_status+0x30>)
 801a90e:	440a      	add	r2, r1
 801a910:	7a12      	ldrb	r2, [r2, #8]
 801a912:	4610      	mov	r0, r2
 801a914:	4798      	blx	r3
 801a916:	4603      	mov	r3, r0
 801a918:	73fb      	strb	r3, [r7, #15]
  return stat;
 801a91a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a91c:	4618      	mov	r0, r3
 801a91e:	3710      	adds	r7, #16
 801a920:	46bd      	mov	sp, r7
 801a922:	bd80      	pop	{r7, pc}
 801a924:	240089f0 	.word	0x240089f0

0801a928 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801a928:	b580      	push	{r7, lr}
 801a92a:	b084      	sub	sp, #16
 801a92c:	af00      	add	r7, sp, #0
 801a92e:	4603      	mov	r3, r0
 801a930:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801a932:	2300      	movs	r3, #0
 801a934:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801a936:	79fb      	ldrb	r3, [r7, #7]
 801a938:	4a0e      	ldr	r2, [pc, #56]	@ (801a974 <disk_initialize+0x4c>)
 801a93a:	5cd3      	ldrb	r3, [r2, r3]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d114      	bne.n	801a96a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801a940:	79fb      	ldrb	r3, [r7, #7]
 801a942:	4a0c      	ldr	r2, [pc, #48]	@ (801a974 <disk_initialize+0x4c>)
 801a944:	009b      	lsls	r3, r3, #2
 801a946:	4413      	add	r3, r2
 801a948:	685b      	ldr	r3, [r3, #4]
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	79fa      	ldrb	r2, [r7, #7]
 801a94e:	4909      	ldr	r1, [pc, #36]	@ (801a974 <disk_initialize+0x4c>)
 801a950:	440a      	add	r2, r1
 801a952:	7a12      	ldrb	r2, [r2, #8]
 801a954:	4610      	mov	r0, r2
 801a956:	4798      	blx	r3
 801a958:	4603      	mov	r3, r0
 801a95a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801a95c:	7bfb      	ldrb	r3, [r7, #15]
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d103      	bne.n	801a96a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801a962:	79fb      	ldrb	r3, [r7, #7]
 801a964:	4a03      	ldr	r2, [pc, #12]	@ (801a974 <disk_initialize+0x4c>)
 801a966:	2101      	movs	r1, #1
 801a968:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801a96a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a96c:	4618      	mov	r0, r3
 801a96e:	3710      	adds	r7, #16
 801a970:	46bd      	mov	sp, r7
 801a972:	bd80      	pop	{r7, pc}
 801a974:	240089f0 	.word	0x240089f0

0801a978 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801a978:	b590      	push	{r4, r7, lr}
 801a97a:	b087      	sub	sp, #28
 801a97c:	af00      	add	r7, sp, #0
 801a97e:	60b9      	str	r1, [r7, #8]
 801a980:	607a      	str	r2, [r7, #4]
 801a982:	603b      	str	r3, [r7, #0]
 801a984:	4603      	mov	r3, r0
 801a986:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801a988:	7bfb      	ldrb	r3, [r7, #15]
 801a98a:	4a0a      	ldr	r2, [pc, #40]	@ (801a9b4 <disk_read+0x3c>)
 801a98c:	009b      	lsls	r3, r3, #2
 801a98e:	4413      	add	r3, r2
 801a990:	685b      	ldr	r3, [r3, #4]
 801a992:	689c      	ldr	r4, [r3, #8]
 801a994:	7bfb      	ldrb	r3, [r7, #15]
 801a996:	4a07      	ldr	r2, [pc, #28]	@ (801a9b4 <disk_read+0x3c>)
 801a998:	4413      	add	r3, r2
 801a99a:	7a18      	ldrb	r0, [r3, #8]
 801a99c:	683b      	ldr	r3, [r7, #0]
 801a99e:	687a      	ldr	r2, [r7, #4]
 801a9a0:	68b9      	ldr	r1, [r7, #8]
 801a9a2:	47a0      	blx	r4
 801a9a4:	4603      	mov	r3, r0
 801a9a6:	75fb      	strb	r3, [r7, #23]
  return res;
 801a9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 801a9aa:	4618      	mov	r0, r3
 801a9ac:	371c      	adds	r7, #28
 801a9ae:	46bd      	mov	sp, r7
 801a9b0:	bd90      	pop	{r4, r7, pc}
 801a9b2:	bf00      	nop
 801a9b4:	240089f0 	.word	0x240089f0

0801a9b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801a9b8:	b590      	push	{r4, r7, lr}
 801a9ba:	b087      	sub	sp, #28
 801a9bc:	af00      	add	r7, sp, #0
 801a9be:	60b9      	str	r1, [r7, #8]
 801a9c0:	607a      	str	r2, [r7, #4]
 801a9c2:	603b      	str	r3, [r7, #0]
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801a9c8:	7bfb      	ldrb	r3, [r7, #15]
 801a9ca:	4a0a      	ldr	r2, [pc, #40]	@ (801a9f4 <disk_write+0x3c>)
 801a9cc:	009b      	lsls	r3, r3, #2
 801a9ce:	4413      	add	r3, r2
 801a9d0:	685b      	ldr	r3, [r3, #4]
 801a9d2:	68dc      	ldr	r4, [r3, #12]
 801a9d4:	7bfb      	ldrb	r3, [r7, #15]
 801a9d6:	4a07      	ldr	r2, [pc, #28]	@ (801a9f4 <disk_write+0x3c>)
 801a9d8:	4413      	add	r3, r2
 801a9da:	7a18      	ldrb	r0, [r3, #8]
 801a9dc:	683b      	ldr	r3, [r7, #0]
 801a9de:	687a      	ldr	r2, [r7, #4]
 801a9e0:	68b9      	ldr	r1, [r7, #8]
 801a9e2:	47a0      	blx	r4
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	75fb      	strb	r3, [r7, #23]
  return res;
 801a9e8:	7dfb      	ldrb	r3, [r7, #23]
}
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	371c      	adds	r7, #28
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	bd90      	pop	{r4, r7, pc}
 801a9f2:	bf00      	nop
 801a9f4:	240089f0 	.word	0x240089f0

0801a9f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b084      	sub	sp, #16
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	4603      	mov	r3, r0
 801aa00:	603a      	str	r2, [r7, #0]
 801aa02:	71fb      	strb	r3, [r7, #7]
 801aa04:	460b      	mov	r3, r1
 801aa06:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801aa08:	79fb      	ldrb	r3, [r7, #7]
 801aa0a:	4a09      	ldr	r2, [pc, #36]	@ (801aa30 <disk_ioctl+0x38>)
 801aa0c:	009b      	lsls	r3, r3, #2
 801aa0e:	4413      	add	r3, r2
 801aa10:	685b      	ldr	r3, [r3, #4]
 801aa12:	691b      	ldr	r3, [r3, #16]
 801aa14:	79fa      	ldrb	r2, [r7, #7]
 801aa16:	4906      	ldr	r1, [pc, #24]	@ (801aa30 <disk_ioctl+0x38>)
 801aa18:	440a      	add	r2, r1
 801aa1a:	7a10      	ldrb	r0, [r2, #8]
 801aa1c:	79b9      	ldrb	r1, [r7, #6]
 801aa1e:	683a      	ldr	r2, [r7, #0]
 801aa20:	4798      	blx	r3
 801aa22:	4603      	mov	r3, r0
 801aa24:	73fb      	strb	r3, [r7, #15]
  return res;
 801aa26:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa28:	4618      	mov	r0, r3
 801aa2a:	3710      	adds	r7, #16
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	bd80      	pop	{r7, pc}
 801aa30:	240089f0 	.word	0x240089f0

0801aa34 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801aa34:	b480      	push	{r7}
 801aa36:	b085      	sub	sp, #20
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	3301      	adds	r3, #1
 801aa40:	781b      	ldrb	r3, [r3, #0]
 801aa42:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801aa44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801aa48:	021b      	lsls	r3, r3, #8
 801aa4a:	b21a      	sxth	r2, r3
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	781b      	ldrb	r3, [r3, #0]
 801aa50:	b21b      	sxth	r3, r3
 801aa52:	4313      	orrs	r3, r2
 801aa54:	b21b      	sxth	r3, r3
 801aa56:	81fb      	strh	r3, [r7, #14]
	return rv;
 801aa58:	89fb      	ldrh	r3, [r7, #14]
}
 801aa5a:	4618      	mov	r0, r3
 801aa5c:	3714      	adds	r7, #20
 801aa5e:	46bd      	mov	sp, r7
 801aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa64:	4770      	bx	lr

0801aa66 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801aa66:	b480      	push	{r7}
 801aa68:	b085      	sub	sp, #20
 801aa6a:	af00      	add	r7, sp, #0
 801aa6c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	3303      	adds	r3, #3
 801aa72:	781b      	ldrb	r3, [r3, #0]
 801aa74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	021b      	lsls	r3, r3, #8
 801aa7a:	687a      	ldr	r2, [r7, #4]
 801aa7c:	3202      	adds	r2, #2
 801aa7e:	7812      	ldrb	r2, [r2, #0]
 801aa80:	4313      	orrs	r3, r2
 801aa82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	021b      	lsls	r3, r3, #8
 801aa88:	687a      	ldr	r2, [r7, #4]
 801aa8a:	3201      	adds	r2, #1
 801aa8c:	7812      	ldrb	r2, [r2, #0]
 801aa8e:	4313      	orrs	r3, r2
 801aa90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	021b      	lsls	r3, r3, #8
 801aa96:	687a      	ldr	r2, [r7, #4]
 801aa98:	7812      	ldrb	r2, [r2, #0]
 801aa9a:	4313      	orrs	r3, r2
 801aa9c:	60fb      	str	r3, [r7, #12]
	return rv;
 801aa9e:	68fb      	ldr	r3, [r7, #12]
}
 801aaa0:	4618      	mov	r0, r3
 801aaa2:	3714      	adds	r7, #20
 801aaa4:	46bd      	mov	sp, r7
 801aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaaa:	4770      	bx	lr

0801aaac <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801aaac:	b480      	push	{r7}
 801aaae:	b083      	sub	sp, #12
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	6078      	str	r0, [r7, #4]
 801aab4:	460b      	mov	r3, r1
 801aab6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	1c5a      	adds	r2, r3, #1
 801aabc:	607a      	str	r2, [r7, #4]
 801aabe:	887a      	ldrh	r2, [r7, #2]
 801aac0:	b2d2      	uxtb	r2, r2
 801aac2:	701a      	strb	r2, [r3, #0]
 801aac4:	887b      	ldrh	r3, [r7, #2]
 801aac6:	0a1b      	lsrs	r3, r3, #8
 801aac8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	1c5a      	adds	r2, r3, #1
 801aace:	607a      	str	r2, [r7, #4]
 801aad0:	887a      	ldrh	r2, [r7, #2]
 801aad2:	b2d2      	uxtb	r2, r2
 801aad4:	701a      	strb	r2, [r3, #0]
}
 801aad6:	bf00      	nop
 801aad8:	370c      	adds	r7, #12
 801aada:	46bd      	mov	sp, r7
 801aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aae0:	4770      	bx	lr

0801aae2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801aae2:	b480      	push	{r7}
 801aae4:	b083      	sub	sp, #12
 801aae6:	af00      	add	r7, sp, #0
 801aae8:	6078      	str	r0, [r7, #4]
 801aaea:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	1c5a      	adds	r2, r3, #1
 801aaf0:	607a      	str	r2, [r7, #4]
 801aaf2:	683a      	ldr	r2, [r7, #0]
 801aaf4:	b2d2      	uxtb	r2, r2
 801aaf6:	701a      	strb	r2, [r3, #0]
 801aaf8:	683b      	ldr	r3, [r7, #0]
 801aafa:	0a1b      	lsrs	r3, r3, #8
 801aafc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	1c5a      	adds	r2, r3, #1
 801ab02:	607a      	str	r2, [r7, #4]
 801ab04:	683a      	ldr	r2, [r7, #0]
 801ab06:	b2d2      	uxtb	r2, r2
 801ab08:	701a      	strb	r2, [r3, #0]
 801ab0a:	683b      	ldr	r3, [r7, #0]
 801ab0c:	0a1b      	lsrs	r3, r3, #8
 801ab0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	1c5a      	adds	r2, r3, #1
 801ab14:	607a      	str	r2, [r7, #4]
 801ab16:	683a      	ldr	r2, [r7, #0]
 801ab18:	b2d2      	uxtb	r2, r2
 801ab1a:	701a      	strb	r2, [r3, #0]
 801ab1c:	683b      	ldr	r3, [r7, #0]
 801ab1e:	0a1b      	lsrs	r3, r3, #8
 801ab20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	1c5a      	adds	r2, r3, #1
 801ab26:	607a      	str	r2, [r7, #4]
 801ab28:	683a      	ldr	r2, [r7, #0]
 801ab2a:	b2d2      	uxtb	r2, r2
 801ab2c:	701a      	strb	r2, [r3, #0]
}
 801ab2e:	bf00      	nop
 801ab30:	370c      	adds	r7, #12
 801ab32:	46bd      	mov	sp, r7
 801ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab38:	4770      	bx	lr

0801ab3a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801ab3a:	b480      	push	{r7}
 801ab3c:	b087      	sub	sp, #28
 801ab3e:	af00      	add	r7, sp, #0
 801ab40:	60f8      	str	r0, [r7, #12]
 801ab42:	60b9      	str	r1, [r7, #8]
 801ab44:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801ab4a:	68bb      	ldr	r3, [r7, #8]
 801ab4c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d00d      	beq.n	801ab70 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801ab54:	693a      	ldr	r2, [r7, #16]
 801ab56:	1c53      	adds	r3, r2, #1
 801ab58:	613b      	str	r3, [r7, #16]
 801ab5a:	697b      	ldr	r3, [r7, #20]
 801ab5c:	1c59      	adds	r1, r3, #1
 801ab5e:	6179      	str	r1, [r7, #20]
 801ab60:	7812      	ldrb	r2, [r2, #0]
 801ab62:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	3b01      	subs	r3, #1
 801ab68:	607b      	str	r3, [r7, #4]
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d1f1      	bne.n	801ab54 <mem_cpy+0x1a>
	}
}
 801ab70:	bf00      	nop
 801ab72:	371c      	adds	r7, #28
 801ab74:	46bd      	mov	sp, r7
 801ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab7a:	4770      	bx	lr

0801ab7c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801ab7c:	b480      	push	{r7}
 801ab7e:	b087      	sub	sp, #28
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	60f8      	str	r0, [r7, #12]
 801ab84:	60b9      	str	r1, [r7, #8]
 801ab86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801ab8c:	697b      	ldr	r3, [r7, #20]
 801ab8e:	1c5a      	adds	r2, r3, #1
 801ab90:	617a      	str	r2, [r7, #20]
 801ab92:	68ba      	ldr	r2, [r7, #8]
 801ab94:	b2d2      	uxtb	r2, r2
 801ab96:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	3b01      	subs	r3, #1
 801ab9c:	607b      	str	r3, [r7, #4]
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d1f3      	bne.n	801ab8c <mem_set+0x10>
}
 801aba4:	bf00      	nop
 801aba6:	bf00      	nop
 801aba8:	371c      	adds	r7, #28
 801abaa:	46bd      	mov	sp, r7
 801abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb0:	4770      	bx	lr

0801abb2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801abb2:	b480      	push	{r7}
 801abb4:	b089      	sub	sp, #36	@ 0x24
 801abb6:	af00      	add	r7, sp, #0
 801abb8:	60f8      	str	r0, [r7, #12]
 801abba:	60b9      	str	r1, [r7, #8]
 801abbc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801abbe:	68fb      	ldr	r3, [r7, #12]
 801abc0:	61fb      	str	r3, [r7, #28]
 801abc2:	68bb      	ldr	r3, [r7, #8]
 801abc4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801abc6:	2300      	movs	r3, #0
 801abc8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801abca:	69fb      	ldr	r3, [r7, #28]
 801abcc:	1c5a      	adds	r2, r3, #1
 801abce:	61fa      	str	r2, [r7, #28]
 801abd0:	781b      	ldrb	r3, [r3, #0]
 801abd2:	4619      	mov	r1, r3
 801abd4:	69bb      	ldr	r3, [r7, #24]
 801abd6:	1c5a      	adds	r2, r3, #1
 801abd8:	61ba      	str	r2, [r7, #24]
 801abda:	781b      	ldrb	r3, [r3, #0]
 801abdc:	1acb      	subs	r3, r1, r3
 801abde:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	3b01      	subs	r3, #1
 801abe4:	607b      	str	r3, [r7, #4]
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d002      	beq.n	801abf2 <mem_cmp+0x40>
 801abec:	697b      	ldr	r3, [r7, #20]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d0eb      	beq.n	801abca <mem_cmp+0x18>

	return r;
 801abf2:	697b      	ldr	r3, [r7, #20]
}
 801abf4:	4618      	mov	r0, r3
 801abf6:	3724      	adds	r7, #36	@ 0x24
 801abf8:	46bd      	mov	sp, r7
 801abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abfe:	4770      	bx	lr

0801ac00 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801ac00:	b480      	push	{r7}
 801ac02:	b083      	sub	sp, #12
 801ac04:	af00      	add	r7, sp, #0
 801ac06:	6078      	str	r0, [r7, #4]
 801ac08:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801ac0a:	e002      	b.n	801ac12 <chk_chr+0x12>
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	3301      	adds	r3, #1
 801ac10:	607b      	str	r3, [r7, #4]
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	781b      	ldrb	r3, [r3, #0]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d005      	beq.n	801ac26 <chk_chr+0x26>
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	781b      	ldrb	r3, [r3, #0]
 801ac1e:	461a      	mov	r2, r3
 801ac20:	683b      	ldr	r3, [r7, #0]
 801ac22:	4293      	cmp	r3, r2
 801ac24:	d1f2      	bne.n	801ac0c <chk_chr+0xc>
	return *str;
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	781b      	ldrb	r3, [r3, #0]
}
 801ac2a:	4618      	mov	r0, r3
 801ac2c:	370c      	adds	r7, #12
 801ac2e:	46bd      	mov	sp, r7
 801ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac34:	4770      	bx	lr
	...

0801ac38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801ac38:	b480      	push	{r7}
 801ac3a:	b085      	sub	sp, #20
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	6078      	str	r0, [r7, #4]
 801ac40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801ac42:	2300      	movs	r3, #0
 801ac44:	60bb      	str	r3, [r7, #8]
 801ac46:	68bb      	ldr	r3, [r7, #8]
 801ac48:	60fb      	str	r3, [r7, #12]
 801ac4a:	e029      	b.n	801aca0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801ac4c:	4a27      	ldr	r2, [pc, #156]	@ (801acec <chk_lock+0xb4>)
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	011b      	lsls	r3, r3, #4
 801ac52:	4413      	add	r3, r2
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d01d      	beq.n	801ac96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801ac5a:	4a24      	ldr	r2, [pc, #144]	@ (801acec <chk_lock+0xb4>)
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	011b      	lsls	r3, r3, #4
 801ac60:	4413      	add	r3, r2
 801ac62:	681a      	ldr	r2, [r3, #0]
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	429a      	cmp	r2, r3
 801ac6a:	d116      	bne.n	801ac9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801ac6c:	4a1f      	ldr	r2, [pc, #124]	@ (801acec <chk_lock+0xb4>)
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	011b      	lsls	r3, r3, #4
 801ac72:	4413      	add	r3, r2
 801ac74:	3304      	adds	r3, #4
 801ac76:	681a      	ldr	r2, [r3, #0]
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801ac7c:	429a      	cmp	r2, r3
 801ac7e:	d10c      	bne.n	801ac9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801ac80:	4a1a      	ldr	r2, [pc, #104]	@ (801acec <chk_lock+0xb4>)
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	011b      	lsls	r3, r3, #4
 801ac86:	4413      	add	r3, r2
 801ac88:	3308      	adds	r3, #8
 801ac8a:	681a      	ldr	r2, [r3, #0]
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801ac90:	429a      	cmp	r2, r3
 801ac92:	d102      	bne.n	801ac9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801ac94:	e007      	b.n	801aca6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801ac96:	2301      	movs	r3, #1
 801ac98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801ac9a:	68fb      	ldr	r3, [r7, #12]
 801ac9c:	3301      	adds	r3, #1
 801ac9e:	60fb      	str	r3, [r7, #12]
 801aca0:	68fb      	ldr	r3, [r7, #12]
 801aca2:	2b03      	cmp	r3, #3
 801aca4:	d9d2      	bls.n	801ac4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	2b04      	cmp	r3, #4
 801acaa:	d109      	bne.n	801acc0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801acac:	68bb      	ldr	r3, [r7, #8]
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d102      	bne.n	801acb8 <chk_lock+0x80>
 801acb2:	683b      	ldr	r3, [r7, #0]
 801acb4:	2b02      	cmp	r3, #2
 801acb6:	d101      	bne.n	801acbc <chk_lock+0x84>
 801acb8:	2300      	movs	r3, #0
 801acba:	e010      	b.n	801acde <chk_lock+0xa6>
 801acbc:	2312      	movs	r3, #18
 801acbe:	e00e      	b.n	801acde <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801acc0:	683b      	ldr	r3, [r7, #0]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d108      	bne.n	801acd8 <chk_lock+0xa0>
 801acc6:	4a09      	ldr	r2, [pc, #36]	@ (801acec <chk_lock+0xb4>)
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	011b      	lsls	r3, r3, #4
 801accc:	4413      	add	r3, r2
 801acce:	330c      	adds	r3, #12
 801acd0:	881b      	ldrh	r3, [r3, #0]
 801acd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801acd6:	d101      	bne.n	801acdc <chk_lock+0xa4>
 801acd8:	2310      	movs	r3, #16
 801acda:	e000      	b.n	801acde <chk_lock+0xa6>
 801acdc:	2300      	movs	r3, #0
}
 801acde:	4618      	mov	r0, r3
 801ace0:	3714      	adds	r7, #20
 801ace2:	46bd      	mov	sp, r7
 801ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ace8:	4770      	bx	lr
 801acea:	bf00      	nop
 801acec:	240089b0 	.word	0x240089b0

0801acf0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801acf0:	b480      	push	{r7}
 801acf2:	b083      	sub	sp, #12
 801acf4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801acf6:	2300      	movs	r3, #0
 801acf8:	607b      	str	r3, [r7, #4]
 801acfa:	e002      	b.n	801ad02 <enq_lock+0x12>
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	3301      	adds	r3, #1
 801ad00:	607b      	str	r3, [r7, #4]
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	2b03      	cmp	r3, #3
 801ad06:	d806      	bhi.n	801ad16 <enq_lock+0x26>
 801ad08:	4a09      	ldr	r2, [pc, #36]	@ (801ad30 <enq_lock+0x40>)
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	011b      	lsls	r3, r3, #4
 801ad0e:	4413      	add	r3, r2
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d1f2      	bne.n	801acfc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	2b04      	cmp	r3, #4
 801ad1a:	bf14      	ite	ne
 801ad1c:	2301      	movne	r3, #1
 801ad1e:	2300      	moveq	r3, #0
 801ad20:	b2db      	uxtb	r3, r3
}
 801ad22:	4618      	mov	r0, r3
 801ad24:	370c      	adds	r7, #12
 801ad26:	46bd      	mov	sp, r7
 801ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad2c:	4770      	bx	lr
 801ad2e:	bf00      	nop
 801ad30:	240089b0 	.word	0x240089b0

0801ad34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801ad34:	b480      	push	{r7}
 801ad36:	b085      	sub	sp, #20
 801ad38:	af00      	add	r7, sp, #0
 801ad3a:	6078      	str	r0, [r7, #4]
 801ad3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801ad3e:	2300      	movs	r3, #0
 801ad40:	60fb      	str	r3, [r7, #12]
 801ad42:	e01f      	b.n	801ad84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801ad44:	4a41      	ldr	r2, [pc, #260]	@ (801ae4c <inc_lock+0x118>)
 801ad46:	68fb      	ldr	r3, [r7, #12]
 801ad48:	011b      	lsls	r3, r3, #4
 801ad4a:	4413      	add	r3, r2
 801ad4c:	681a      	ldr	r2, [r3, #0]
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	429a      	cmp	r2, r3
 801ad54:	d113      	bne.n	801ad7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801ad56:	4a3d      	ldr	r2, [pc, #244]	@ (801ae4c <inc_lock+0x118>)
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	011b      	lsls	r3, r3, #4
 801ad5c:	4413      	add	r3, r2
 801ad5e:	3304      	adds	r3, #4
 801ad60:	681a      	ldr	r2, [r3, #0]
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801ad66:	429a      	cmp	r2, r3
 801ad68:	d109      	bne.n	801ad7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801ad6a:	4a38      	ldr	r2, [pc, #224]	@ (801ae4c <inc_lock+0x118>)
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	011b      	lsls	r3, r3, #4
 801ad70:	4413      	add	r3, r2
 801ad72:	3308      	adds	r3, #8
 801ad74:	681a      	ldr	r2, [r3, #0]
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801ad7a:	429a      	cmp	r2, r3
 801ad7c:	d006      	beq.n	801ad8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	3301      	adds	r3, #1
 801ad82:	60fb      	str	r3, [r7, #12]
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	2b03      	cmp	r3, #3
 801ad88:	d9dc      	bls.n	801ad44 <inc_lock+0x10>
 801ad8a:	e000      	b.n	801ad8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801ad8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	2b04      	cmp	r3, #4
 801ad92:	d132      	bne.n	801adfa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801ad94:	2300      	movs	r3, #0
 801ad96:	60fb      	str	r3, [r7, #12]
 801ad98:	e002      	b.n	801ada0 <inc_lock+0x6c>
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	3301      	adds	r3, #1
 801ad9e:	60fb      	str	r3, [r7, #12]
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	2b03      	cmp	r3, #3
 801ada4:	d806      	bhi.n	801adb4 <inc_lock+0x80>
 801ada6:	4a29      	ldr	r2, [pc, #164]	@ (801ae4c <inc_lock+0x118>)
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	011b      	lsls	r3, r3, #4
 801adac:	4413      	add	r3, r2
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d1f2      	bne.n	801ad9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	2b04      	cmp	r3, #4
 801adb8:	d101      	bne.n	801adbe <inc_lock+0x8a>
 801adba:	2300      	movs	r3, #0
 801adbc:	e040      	b.n	801ae40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	681a      	ldr	r2, [r3, #0]
 801adc2:	4922      	ldr	r1, [pc, #136]	@ (801ae4c <inc_lock+0x118>)
 801adc4:	68fb      	ldr	r3, [r7, #12]
 801adc6:	011b      	lsls	r3, r3, #4
 801adc8:	440b      	add	r3, r1
 801adca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	689a      	ldr	r2, [r3, #8]
 801add0:	491e      	ldr	r1, [pc, #120]	@ (801ae4c <inc_lock+0x118>)
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	011b      	lsls	r3, r3, #4
 801add6:	440b      	add	r3, r1
 801add8:	3304      	adds	r3, #4
 801adda:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	695a      	ldr	r2, [r3, #20]
 801ade0:	491a      	ldr	r1, [pc, #104]	@ (801ae4c <inc_lock+0x118>)
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	011b      	lsls	r3, r3, #4
 801ade6:	440b      	add	r3, r1
 801ade8:	3308      	adds	r3, #8
 801adea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801adec:	4a17      	ldr	r2, [pc, #92]	@ (801ae4c <inc_lock+0x118>)
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	011b      	lsls	r3, r3, #4
 801adf2:	4413      	add	r3, r2
 801adf4:	330c      	adds	r3, #12
 801adf6:	2200      	movs	r2, #0
 801adf8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801adfa:	683b      	ldr	r3, [r7, #0]
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d009      	beq.n	801ae14 <inc_lock+0xe0>
 801ae00:	4a12      	ldr	r2, [pc, #72]	@ (801ae4c <inc_lock+0x118>)
 801ae02:	68fb      	ldr	r3, [r7, #12]
 801ae04:	011b      	lsls	r3, r3, #4
 801ae06:	4413      	add	r3, r2
 801ae08:	330c      	adds	r3, #12
 801ae0a:	881b      	ldrh	r3, [r3, #0]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d001      	beq.n	801ae14 <inc_lock+0xe0>
 801ae10:	2300      	movs	r3, #0
 801ae12:	e015      	b.n	801ae40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801ae14:	683b      	ldr	r3, [r7, #0]
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	d108      	bne.n	801ae2c <inc_lock+0xf8>
 801ae1a:	4a0c      	ldr	r2, [pc, #48]	@ (801ae4c <inc_lock+0x118>)
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	011b      	lsls	r3, r3, #4
 801ae20:	4413      	add	r3, r2
 801ae22:	330c      	adds	r3, #12
 801ae24:	881b      	ldrh	r3, [r3, #0]
 801ae26:	3301      	adds	r3, #1
 801ae28:	b29a      	uxth	r2, r3
 801ae2a:	e001      	b.n	801ae30 <inc_lock+0xfc>
 801ae2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ae30:	4906      	ldr	r1, [pc, #24]	@ (801ae4c <inc_lock+0x118>)
 801ae32:	68fb      	ldr	r3, [r7, #12]
 801ae34:	011b      	lsls	r3, r3, #4
 801ae36:	440b      	add	r3, r1
 801ae38:	330c      	adds	r3, #12
 801ae3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	3301      	adds	r3, #1
}
 801ae40:	4618      	mov	r0, r3
 801ae42:	3714      	adds	r7, #20
 801ae44:	46bd      	mov	sp, r7
 801ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae4a:	4770      	bx	lr
 801ae4c:	240089b0 	.word	0x240089b0

0801ae50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801ae50:	b480      	push	{r7}
 801ae52:	b085      	sub	sp, #20
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	3b01      	subs	r3, #1
 801ae5c:	607b      	str	r3, [r7, #4]
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	2b03      	cmp	r3, #3
 801ae62:	d825      	bhi.n	801aeb0 <dec_lock+0x60>
		n = Files[i].ctr;
 801ae64:	4a17      	ldr	r2, [pc, #92]	@ (801aec4 <dec_lock+0x74>)
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	011b      	lsls	r3, r3, #4
 801ae6a:	4413      	add	r3, r2
 801ae6c:	330c      	adds	r3, #12
 801ae6e:	881b      	ldrh	r3, [r3, #0]
 801ae70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801ae72:	89fb      	ldrh	r3, [r7, #14]
 801ae74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ae78:	d101      	bne.n	801ae7e <dec_lock+0x2e>
 801ae7a:	2300      	movs	r3, #0
 801ae7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801ae7e:	89fb      	ldrh	r3, [r7, #14]
 801ae80:	2b00      	cmp	r3, #0
 801ae82:	d002      	beq.n	801ae8a <dec_lock+0x3a>
 801ae84:	89fb      	ldrh	r3, [r7, #14]
 801ae86:	3b01      	subs	r3, #1
 801ae88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801ae8a:	4a0e      	ldr	r2, [pc, #56]	@ (801aec4 <dec_lock+0x74>)
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	011b      	lsls	r3, r3, #4
 801ae90:	4413      	add	r3, r2
 801ae92:	330c      	adds	r3, #12
 801ae94:	89fa      	ldrh	r2, [r7, #14]
 801ae96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801ae98:	89fb      	ldrh	r3, [r7, #14]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d105      	bne.n	801aeaa <dec_lock+0x5a>
 801ae9e:	4a09      	ldr	r2, [pc, #36]	@ (801aec4 <dec_lock+0x74>)
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	011b      	lsls	r3, r3, #4
 801aea4:	4413      	add	r3, r2
 801aea6:	2200      	movs	r2, #0
 801aea8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801aeaa:	2300      	movs	r3, #0
 801aeac:	737b      	strb	r3, [r7, #13]
 801aeae:	e001      	b.n	801aeb4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801aeb0:	2302      	movs	r3, #2
 801aeb2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801aeb4:	7b7b      	ldrb	r3, [r7, #13]
}
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	3714      	adds	r7, #20
 801aeba:	46bd      	mov	sp, r7
 801aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aec0:	4770      	bx	lr
 801aec2:	bf00      	nop
 801aec4:	240089b0 	.word	0x240089b0

0801aec8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801aec8:	b480      	push	{r7}
 801aeca:	b085      	sub	sp, #20
 801aecc:	af00      	add	r7, sp, #0
 801aece:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801aed0:	2300      	movs	r3, #0
 801aed2:	60fb      	str	r3, [r7, #12]
 801aed4:	e010      	b.n	801aef8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801aed6:	4a0d      	ldr	r2, [pc, #52]	@ (801af0c <clear_lock+0x44>)
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	011b      	lsls	r3, r3, #4
 801aedc:	4413      	add	r3, r2
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	687a      	ldr	r2, [r7, #4]
 801aee2:	429a      	cmp	r2, r3
 801aee4:	d105      	bne.n	801aef2 <clear_lock+0x2a>
 801aee6:	4a09      	ldr	r2, [pc, #36]	@ (801af0c <clear_lock+0x44>)
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	011b      	lsls	r3, r3, #4
 801aeec:	4413      	add	r3, r2
 801aeee:	2200      	movs	r2, #0
 801aef0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	3301      	adds	r3, #1
 801aef6:	60fb      	str	r3, [r7, #12]
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	2b03      	cmp	r3, #3
 801aefc:	d9eb      	bls.n	801aed6 <clear_lock+0xe>
	}
}
 801aefe:	bf00      	nop
 801af00:	bf00      	nop
 801af02:	3714      	adds	r7, #20
 801af04:	46bd      	mov	sp, r7
 801af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af0a:	4770      	bx	lr
 801af0c:	240089b0 	.word	0x240089b0

0801af10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801af10:	b580      	push	{r7, lr}
 801af12:	b086      	sub	sp, #24
 801af14:	af00      	add	r7, sp, #0
 801af16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801af18:	2300      	movs	r3, #0
 801af1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	78db      	ldrb	r3, [r3, #3]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d034      	beq.n	801af8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	7858      	ldrb	r0, [r3, #1]
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801af34:	2301      	movs	r3, #1
 801af36:	697a      	ldr	r2, [r7, #20]
 801af38:	f7ff fd3e 	bl	801a9b8 <disk_write>
 801af3c:	4603      	mov	r3, r0
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d002      	beq.n	801af48 <sync_window+0x38>
			res = FR_DISK_ERR;
 801af42:	2301      	movs	r3, #1
 801af44:	73fb      	strb	r3, [r7, #15]
 801af46:	e022      	b.n	801af8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	2200      	movs	r2, #0
 801af4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	6a1b      	ldr	r3, [r3, #32]
 801af52:	697a      	ldr	r2, [r7, #20]
 801af54:	1ad2      	subs	r2, r2, r3
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	699b      	ldr	r3, [r3, #24]
 801af5a:	429a      	cmp	r2, r3
 801af5c:	d217      	bcs.n	801af8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	789b      	ldrb	r3, [r3, #2]
 801af62:	613b      	str	r3, [r7, #16]
 801af64:	e010      	b.n	801af88 <sync_window+0x78>
					wsect += fs->fsize;
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	699b      	ldr	r3, [r3, #24]
 801af6a:	697a      	ldr	r2, [r7, #20]
 801af6c:	4413      	add	r3, r2
 801af6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	7858      	ldrb	r0, [r3, #1]
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801af7a:	2301      	movs	r3, #1
 801af7c:	697a      	ldr	r2, [r7, #20]
 801af7e:	f7ff fd1b 	bl	801a9b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801af82:	693b      	ldr	r3, [r7, #16]
 801af84:	3b01      	subs	r3, #1
 801af86:	613b      	str	r3, [r7, #16]
 801af88:	693b      	ldr	r3, [r7, #16]
 801af8a:	2b01      	cmp	r3, #1
 801af8c:	d8eb      	bhi.n	801af66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801af8e:	7bfb      	ldrb	r3, [r7, #15]
}
 801af90:	4618      	mov	r0, r3
 801af92:	3718      	adds	r7, #24
 801af94:	46bd      	mov	sp, r7
 801af96:	bd80      	pop	{r7, pc}

0801af98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801af98:	b580      	push	{r7, lr}
 801af9a:	b084      	sub	sp, #16
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	6078      	str	r0, [r7, #4]
 801afa0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801afa2:	2300      	movs	r3, #0
 801afa4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afaa:	683a      	ldr	r2, [r7, #0]
 801afac:	429a      	cmp	r2, r3
 801afae:	d01b      	beq.n	801afe8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801afb0:	6878      	ldr	r0, [r7, #4]
 801afb2:	f7ff ffad 	bl	801af10 <sync_window>
 801afb6:	4603      	mov	r3, r0
 801afb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801afba:	7bfb      	ldrb	r3, [r7, #15]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d113      	bne.n	801afe8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	7858      	ldrb	r0, [r3, #1]
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801afca:	2301      	movs	r3, #1
 801afcc:	683a      	ldr	r2, [r7, #0]
 801afce:	f7ff fcd3 	bl	801a978 <disk_read>
 801afd2:	4603      	mov	r3, r0
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d004      	beq.n	801afe2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801afd8:	f04f 33ff 	mov.w	r3, #4294967295
 801afdc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801afde:	2301      	movs	r3, #1
 801afe0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	683a      	ldr	r2, [r7, #0]
 801afe6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801afe8:	7bfb      	ldrb	r3, [r7, #15]
}
 801afea:	4618      	mov	r0, r3
 801afec:	3710      	adds	r7, #16
 801afee:	46bd      	mov	sp, r7
 801aff0:	bd80      	pop	{r7, pc}
	...

0801aff4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801aff4:	b580      	push	{r7, lr}
 801aff6:	b084      	sub	sp, #16
 801aff8:	af00      	add	r7, sp, #0
 801affa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801affc:	6878      	ldr	r0, [r7, #4]
 801affe:	f7ff ff87 	bl	801af10 <sync_window>
 801b002:	4603      	mov	r3, r0
 801b004:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b006:	7bfb      	ldrb	r3, [r7, #15]
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d158      	bne.n	801b0be <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	781b      	ldrb	r3, [r3, #0]
 801b010:	2b03      	cmp	r3, #3
 801b012:	d148      	bne.n	801b0a6 <sync_fs+0xb2>
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	791b      	ldrb	r3, [r3, #4]
 801b018:	2b01      	cmp	r3, #1
 801b01a:	d144      	bne.n	801b0a6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	3330      	adds	r3, #48	@ 0x30
 801b020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b024:	2100      	movs	r1, #0
 801b026:	4618      	mov	r0, r3
 801b028:	f7ff fda8 	bl	801ab7c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	3330      	adds	r3, #48	@ 0x30
 801b030:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b034:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b038:	4618      	mov	r0, r3
 801b03a:	f7ff fd37 	bl	801aaac <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	3330      	adds	r3, #48	@ 0x30
 801b042:	4921      	ldr	r1, [pc, #132]	@ (801b0c8 <sync_fs+0xd4>)
 801b044:	4618      	mov	r0, r3
 801b046:	f7ff fd4c 	bl	801aae2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	3330      	adds	r3, #48	@ 0x30
 801b04e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b052:	491e      	ldr	r1, [pc, #120]	@ (801b0cc <sync_fs+0xd8>)
 801b054:	4618      	mov	r0, r3
 801b056:	f7ff fd44 	bl	801aae2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	3330      	adds	r3, #48	@ 0x30
 801b05e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	691b      	ldr	r3, [r3, #16]
 801b066:	4619      	mov	r1, r3
 801b068:	4610      	mov	r0, r2
 801b06a:	f7ff fd3a 	bl	801aae2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	3330      	adds	r3, #48	@ 0x30
 801b072:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	68db      	ldr	r3, [r3, #12]
 801b07a:	4619      	mov	r1, r3
 801b07c:	4610      	mov	r0, r2
 801b07e:	f7ff fd30 	bl	801aae2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	69db      	ldr	r3, [r3, #28]
 801b086:	1c5a      	adds	r2, r3, #1
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	7858      	ldrb	r0, [r3, #1]
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b09a:	2301      	movs	r3, #1
 801b09c:	f7ff fc8c 	bl	801a9b8 <disk_write>
			fs->fsi_flag = 0;
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	2200      	movs	r2, #0
 801b0a4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	785b      	ldrb	r3, [r3, #1]
 801b0aa:	2200      	movs	r2, #0
 801b0ac:	2100      	movs	r1, #0
 801b0ae:	4618      	mov	r0, r3
 801b0b0:	f7ff fca2 	bl	801a9f8 <disk_ioctl>
 801b0b4:	4603      	mov	r3, r0
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d001      	beq.n	801b0be <sync_fs+0xca>
 801b0ba:	2301      	movs	r3, #1
 801b0bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b0be:	7bfb      	ldrb	r3, [r7, #15]
}
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	3710      	adds	r7, #16
 801b0c4:	46bd      	mov	sp, r7
 801b0c6:	bd80      	pop	{r7, pc}
 801b0c8:	41615252 	.word	0x41615252
 801b0cc:	61417272 	.word	0x61417272

0801b0d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b0d0:	b480      	push	{r7}
 801b0d2:	b083      	sub	sp, #12
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	6078      	str	r0, [r7, #4]
 801b0d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b0da:	683b      	ldr	r3, [r7, #0]
 801b0dc:	3b02      	subs	r3, #2
 801b0de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	695b      	ldr	r3, [r3, #20]
 801b0e4:	3b02      	subs	r3, #2
 801b0e6:	683a      	ldr	r2, [r7, #0]
 801b0e8:	429a      	cmp	r2, r3
 801b0ea:	d301      	bcc.n	801b0f0 <clust2sect+0x20>
 801b0ec:	2300      	movs	r3, #0
 801b0ee:	e008      	b.n	801b102 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	895b      	ldrh	r3, [r3, #10]
 801b0f4:	461a      	mov	r2, r3
 801b0f6:	683b      	ldr	r3, [r7, #0]
 801b0f8:	fb03 f202 	mul.w	r2, r3, r2
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b100:	4413      	add	r3, r2
}
 801b102:	4618      	mov	r0, r3
 801b104:	370c      	adds	r7, #12
 801b106:	46bd      	mov	sp, r7
 801b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b10c:	4770      	bx	lr

0801b10e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b10e:	b580      	push	{r7, lr}
 801b110:	b086      	sub	sp, #24
 801b112:	af00      	add	r7, sp, #0
 801b114:	6078      	str	r0, [r7, #4]
 801b116:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b11e:	683b      	ldr	r3, [r7, #0]
 801b120:	2b01      	cmp	r3, #1
 801b122:	d904      	bls.n	801b12e <get_fat+0x20>
 801b124:	693b      	ldr	r3, [r7, #16]
 801b126:	695b      	ldr	r3, [r3, #20]
 801b128:	683a      	ldr	r2, [r7, #0]
 801b12a:	429a      	cmp	r2, r3
 801b12c:	d302      	bcc.n	801b134 <get_fat+0x26>
		val = 1;	/* Internal error */
 801b12e:	2301      	movs	r3, #1
 801b130:	617b      	str	r3, [r7, #20]
 801b132:	e08e      	b.n	801b252 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b134:	f04f 33ff 	mov.w	r3, #4294967295
 801b138:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b13a:	693b      	ldr	r3, [r7, #16]
 801b13c:	781b      	ldrb	r3, [r3, #0]
 801b13e:	2b03      	cmp	r3, #3
 801b140:	d061      	beq.n	801b206 <get_fat+0xf8>
 801b142:	2b03      	cmp	r3, #3
 801b144:	dc7b      	bgt.n	801b23e <get_fat+0x130>
 801b146:	2b01      	cmp	r3, #1
 801b148:	d002      	beq.n	801b150 <get_fat+0x42>
 801b14a:	2b02      	cmp	r3, #2
 801b14c:	d041      	beq.n	801b1d2 <get_fat+0xc4>
 801b14e:	e076      	b.n	801b23e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b150:	683b      	ldr	r3, [r7, #0]
 801b152:	60fb      	str	r3, [r7, #12]
 801b154:	68fb      	ldr	r3, [r7, #12]
 801b156:	085b      	lsrs	r3, r3, #1
 801b158:	68fa      	ldr	r2, [r7, #12]
 801b15a:	4413      	add	r3, r2
 801b15c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b15e:	693b      	ldr	r3, [r7, #16]
 801b160:	6a1a      	ldr	r2, [r3, #32]
 801b162:	68fb      	ldr	r3, [r7, #12]
 801b164:	0a5b      	lsrs	r3, r3, #9
 801b166:	4413      	add	r3, r2
 801b168:	4619      	mov	r1, r3
 801b16a:	6938      	ldr	r0, [r7, #16]
 801b16c:	f7ff ff14 	bl	801af98 <move_window>
 801b170:	4603      	mov	r3, r0
 801b172:	2b00      	cmp	r3, #0
 801b174:	d166      	bne.n	801b244 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	1c5a      	adds	r2, r3, #1
 801b17a:	60fa      	str	r2, [r7, #12]
 801b17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b180:	693a      	ldr	r2, [r7, #16]
 801b182:	4413      	add	r3, r2
 801b184:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b188:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b18a:	693b      	ldr	r3, [r7, #16]
 801b18c:	6a1a      	ldr	r2, [r3, #32]
 801b18e:	68fb      	ldr	r3, [r7, #12]
 801b190:	0a5b      	lsrs	r3, r3, #9
 801b192:	4413      	add	r3, r2
 801b194:	4619      	mov	r1, r3
 801b196:	6938      	ldr	r0, [r7, #16]
 801b198:	f7ff fefe 	bl	801af98 <move_window>
 801b19c:	4603      	mov	r3, r0
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d152      	bne.n	801b248 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b1a2:	68fb      	ldr	r3, [r7, #12]
 801b1a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b1a8:	693a      	ldr	r2, [r7, #16]
 801b1aa:	4413      	add	r3, r2
 801b1ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b1b0:	021b      	lsls	r3, r3, #8
 801b1b2:	68ba      	ldr	r2, [r7, #8]
 801b1b4:	4313      	orrs	r3, r2
 801b1b6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b1b8:	683b      	ldr	r3, [r7, #0]
 801b1ba:	f003 0301 	and.w	r3, r3, #1
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d002      	beq.n	801b1c8 <get_fat+0xba>
 801b1c2:	68bb      	ldr	r3, [r7, #8]
 801b1c4:	091b      	lsrs	r3, r3, #4
 801b1c6:	e002      	b.n	801b1ce <get_fat+0xc0>
 801b1c8:	68bb      	ldr	r3, [r7, #8]
 801b1ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b1ce:	617b      	str	r3, [r7, #20]
			break;
 801b1d0:	e03f      	b.n	801b252 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b1d2:	693b      	ldr	r3, [r7, #16]
 801b1d4:	6a1a      	ldr	r2, [r3, #32]
 801b1d6:	683b      	ldr	r3, [r7, #0]
 801b1d8:	0a1b      	lsrs	r3, r3, #8
 801b1da:	4413      	add	r3, r2
 801b1dc:	4619      	mov	r1, r3
 801b1de:	6938      	ldr	r0, [r7, #16]
 801b1e0:	f7ff feda 	bl	801af98 <move_window>
 801b1e4:	4603      	mov	r3, r0
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	d130      	bne.n	801b24c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b1ea:	693b      	ldr	r3, [r7, #16]
 801b1ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b1f0:	683b      	ldr	r3, [r7, #0]
 801b1f2:	005b      	lsls	r3, r3, #1
 801b1f4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801b1f8:	4413      	add	r3, r2
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	f7ff fc1a 	bl	801aa34 <ld_word>
 801b200:	4603      	mov	r3, r0
 801b202:	617b      	str	r3, [r7, #20]
			break;
 801b204:	e025      	b.n	801b252 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b206:	693b      	ldr	r3, [r7, #16]
 801b208:	6a1a      	ldr	r2, [r3, #32]
 801b20a:	683b      	ldr	r3, [r7, #0]
 801b20c:	09db      	lsrs	r3, r3, #7
 801b20e:	4413      	add	r3, r2
 801b210:	4619      	mov	r1, r3
 801b212:	6938      	ldr	r0, [r7, #16]
 801b214:	f7ff fec0 	bl	801af98 <move_window>
 801b218:	4603      	mov	r3, r0
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d118      	bne.n	801b250 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b21e:	693b      	ldr	r3, [r7, #16]
 801b220:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b224:	683b      	ldr	r3, [r7, #0]
 801b226:	009b      	lsls	r3, r3, #2
 801b228:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801b22c:	4413      	add	r3, r2
 801b22e:	4618      	mov	r0, r3
 801b230:	f7ff fc19 	bl	801aa66 <ld_dword>
 801b234:	4603      	mov	r3, r0
 801b236:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b23a:	617b      	str	r3, [r7, #20]
			break;
 801b23c:	e009      	b.n	801b252 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b23e:	2301      	movs	r3, #1
 801b240:	617b      	str	r3, [r7, #20]
 801b242:	e006      	b.n	801b252 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b244:	bf00      	nop
 801b246:	e004      	b.n	801b252 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b248:	bf00      	nop
 801b24a:	e002      	b.n	801b252 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b24c:	bf00      	nop
 801b24e:	e000      	b.n	801b252 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b250:	bf00      	nop
		}
	}

	return val;
 801b252:	697b      	ldr	r3, [r7, #20]
}
 801b254:	4618      	mov	r0, r3
 801b256:	3718      	adds	r7, #24
 801b258:	46bd      	mov	sp, r7
 801b25a:	bd80      	pop	{r7, pc}

0801b25c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b25c:	b590      	push	{r4, r7, lr}
 801b25e:	b089      	sub	sp, #36	@ 0x24
 801b260:	af00      	add	r7, sp, #0
 801b262:	60f8      	str	r0, [r7, #12]
 801b264:	60b9      	str	r1, [r7, #8]
 801b266:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b268:	2302      	movs	r3, #2
 801b26a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b26c:	68bb      	ldr	r3, [r7, #8]
 801b26e:	2b01      	cmp	r3, #1
 801b270:	f240 80d9 	bls.w	801b426 <put_fat+0x1ca>
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	695b      	ldr	r3, [r3, #20]
 801b278:	68ba      	ldr	r2, [r7, #8]
 801b27a:	429a      	cmp	r2, r3
 801b27c:	f080 80d3 	bcs.w	801b426 <put_fat+0x1ca>
		switch (fs->fs_type) {
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	781b      	ldrb	r3, [r3, #0]
 801b284:	2b03      	cmp	r3, #3
 801b286:	f000 8096 	beq.w	801b3b6 <put_fat+0x15a>
 801b28a:	2b03      	cmp	r3, #3
 801b28c:	f300 80cb 	bgt.w	801b426 <put_fat+0x1ca>
 801b290:	2b01      	cmp	r3, #1
 801b292:	d002      	beq.n	801b29a <put_fat+0x3e>
 801b294:	2b02      	cmp	r3, #2
 801b296:	d06e      	beq.n	801b376 <put_fat+0x11a>
 801b298:	e0c5      	b.n	801b426 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b29a:	68bb      	ldr	r3, [r7, #8]
 801b29c:	61bb      	str	r3, [r7, #24]
 801b29e:	69bb      	ldr	r3, [r7, #24]
 801b2a0:	085b      	lsrs	r3, r3, #1
 801b2a2:	69ba      	ldr	r2, [r7, #24]
 801b2a4:	4413      	add	r3, r2
 801b2a6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b2a8:	68fb      	ldr	r3, [r7, #12]
 801b2aa:	6a1a      	ldr	r2, [r3, #32]
 801b2ac:	69bb      	ldr	r3, [r7, #24]
 801b2ae:	0a5b      	lsrs	r3, r3, #9
 801b2b0:	4413      	add	r3, r2
 801b2b2:	4619      	mov	r1, r3
 801b2b4:	68f8      	ldr	r0, [r7, #12]
 801b2b6:	f7ff fe6f 	bl	801af98 <move_window>
 801b2ba:	4603      	mov	r3, r0
 801b2bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b2be:	7ffb      	ldrb	r3, [r7, #31]
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	f040 80a9 	bne.w	801b418 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b2cc:	69bb      	ldr	r3, [r7, #24]
 801b2ce:	1c59      	adds	r1, r3, #1
 801b2d0:	61b9      	str	r1, [r7, #24]
 801b2d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b2d6:	4413      	add	r3, r2
 801b2d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b2da:	68bb      	ldr	r3, [r7, #8]
 801b2dc:	f003 0301 	and.w	r3, r3, #1
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d00d      	beq.n	801b300 <put_fat+0xa4>
 801b2e4:	697b      	ldr	r3, [r7, #20]
 801b2e6:	781b      	ldrb	r3, [r3, #0]
 801b2e8:	b25b      	sxtb	r3, r3
 801b2ea:	f003 030f 	and.w	r3, r3, #15
 801b2ee:	b25a      	sxtb	r2, r3
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	b25b      	sxtb	r3, r3
 801b2f4:	011b      	lsls	r3, r3, #4
 801b2f6:	b25b      	sxtb	r3, r3
 801b2f8:	4313      	orrs	r3, r2
 801b2fa:	b25b      	sxtb	r3, r3
 801b2fc:	b2db      	uxtb	r3, r3
 801b2fe:	e001      	b.n	801b304 <put_fat+0xa8>
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	b2db      	uxtb	r3, r3
 801b304:	697a      	ldr	r2, [r7, #20]
 801b306:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	2201      	movs	r2, #1
 801b30c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b30e:	68fb      	ldr	r3, [r7, #12]
 801b310:	6a1a      	ldr	r2, [r3, #32]
 801b312:	69bb      	ldr	r3, [r7, #24]
 801b314:	0a5b      	lsrs	r3, r3, #9
 801b316:	4413      	add	r3, r2
 801b318:	4619      	mov	r1, r3
 801b31a:	68f8      	ldr	r0, [r7, #12]
 801b31c:	f7ff fe3c 	bl	801af98 <move_window>
 801b320:	4603      	mov	r3, r0
 801b322:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b324:	7ffb      	ldrb	r3, [r7, #31]
 801b326:	2b00      	cmp	r3, #0
 801b328:	d178      	bne.n	801b41c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801b32a:	68fb      	ldr	r3, [r7, #12]
 801b32c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b330:	69bb      	ldr	r3, [r7, #24]
 801b332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b336:	4413      	add	r3, r2
 801b338:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b33a:	68bb      	ldr	r3, [r7, #8]
 801b33c:	f003 0301 	and.w	r3, r3, #1
 801b340:	2b00      	cmp	r3, #0
 801b342:	d003      	beq.n	801b34c <put_fat+0xf0>
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	091b      	lsrs	r3, r3, #4
 801b348:	b2db      	uxtb	r3, r3
 801b34a:	e00e      	b.n	801b36a <put_fat+0x10e>
 801b34c:	697b      	ldr	r3, [r7, #20]
 801b34e:	781b      	ldrb	r3, [r3, #0]
 801b350:	b25b      	sxtb	r3, r3
 801b352:	f023 030f 	bic.w	r3, r3, #15
 801b356:	b25a      	sxtb	r2, r3
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	0a1b      	lsrs	r3, r3, #8
 801b35c:	b25b      	sxtb	r3, r3
 801b35e:	f003 030f 	and.w	r3, r3, #15
 801b362:	b25b      	sxtb	r3, r3
 801b364:	4313      	orrs	r3, r2
 801b366:	b25b      	sxtb	r3, r3
 801b368:	b2db      	uxtb	r3, r3
 801b36a:	697a      	ldr	r2, [r7, #20]
 801b36c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b36e:	68fb      	ldr	r3, [r7, #12]
 801b370:	2201      	movs	r2, #1
 801b372:	70da      	strb	r2, [r3, #3]
			break;
 801b374:	e057      	b.n	801b426 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	6a1a      	ldr	r2, [r3, #32]
 801b37a:	68bb      	ldr	r3, [r7, #8]
 801b37c:	0a1b      	lsrs	r3, r3, #8
 801b37e:	4413      	add	r3, r2
 801b380:	4619      	mov	r1, r3
 801b382:	68f8      	ldr	r0, [r7, #12]
 801b384:	f7ff fe08 	bl	801af98 <move_window>
 801b388:	4603      	mov	r3, r0
 801b38a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b38c:	7ffb      	ldrb	r3, [r7, #31]
 801b38e:	2b00      	cmp	r3, #0
 801b390:	d146      	bne.n	801b420 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b398:	68bb      	ldr	r3, [r7, #8]
 801b39a:	005b      	lsls	r3, r3, #1
 801b39c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801b3a0:	4413      	add	r3, r2
 801b3a2:	687a      	ldr	r2, [r7, #4]
 801b3a4:	b292      	uxth	r2, r2
 801b3a6:	4611      	mov	r1, r2
 801b3a8:	4618      	mov	r0, r3
 801b3aa:	f7ff fb7f 	bl	801aaac <st_word>
			fs->wflag = 1;
 801b3ae:	68fb      	ldr	r3, [r7, #12]
 801b3b0:	2201      	movs	r2, #1
 801b3b2:	70da      	strb	r2, [r3, #3]
			break;
 801b3b4:	e037      	b.n	801b426 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b3b6:	68fb      	ldr	r3, [r7, #12]
 801b3b8:	6a1a      	ldr	r2, [r3, #32]
 801b3ba:	68bb      	ldr	r3, [r7, #8]
 801b3bc:	09db      	lsrs	r3, r3, #7
 801b3be:	4413      	add	r3, r2
 801b3c0:	4619      	mov	r1, r3
 801b3c2:	68f8      	ldr	r0, [r7, #12]
 801b3c4:	f7ff fde8 	bl	801af98 <move_window>
 801b3c8:	4603      	mov	r3, r0
 801b3ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b3cc:	7ffb      	ldrb	r3, [r7, #31]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d128      	bne.n	801b424 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b3d8:	68fb      	ldr	r3, [r7, #12]
 801b3da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b3de:	68bb      	ldr	r3, [r7, #8]
 801b3e0:	009b      	lsls	r3, r3, #2
 801b3e2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801b3e6:	4413      	add	r3, r2
 801b3e8:	4618      	mov	r0, r3
 801b3ea:	f7ff fb3c 	bl	801aa66 <ld_dword>
 801b3ee:	4603      	mov	r3, r0
 801b3f0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b3f4:	4323      	orrs	r3, r4
 801b3f6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b3fe:	68bb      	ldr	r3, [r7, #8]
 801b400:	009b      	lsls	r3, r3, #2
 801b402:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801b406:	4413      	add	r3, r2
 801b408:	6879      	ldr	r1, [r7, #4]
 801b40a:	4618      	mov	r0, r3
 801b40c:	f7ff fb69 	bl	801aae2 <st_dword>
			fs->wflag = 1;
 801b410:	68fb      	ldr	r3, [r7, #12]
 801b412:	2201      	movs	r2, #1
 801b414:	70da      	strb	r2, [r3, #3]
			break;
 801b416:	e006      	b.n	801b426 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b418:	bf00      	nop
 801b41a:	e004      	b.n	801b426 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b41c:	bf00      	nop
 801b41e:	e002      	b.n	801b426 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b420:	bf00      	nop
 801b422:	e000      	b.n	801b426 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801b424:	bf00      	nop
		}
	}
	return res;
 801b426:	7ffb      	ldrb	r3, [r7, #31]
}
 801b428:	4618      	mov	r0, r3
 801b42a:	3724      	adds	r7, #36	@ 0x24
 801b42c:	46bd      	mov	sp, r7
 801b42e:	bd90      	pop	{r4, r7, pc}

0801b430 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b430:	b580      	push	{r7, lr}
 801b432:	b088      	sub	sp, #32
 801b434:	af00      	add	r7, sp, #0
 801b436:	60f8      	str	r0, [r7, #12]
 801b438:	60b9      	str	r1, [r7, #8]
 801b43a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b43c:	2300      	movs	r3, #0
 801b43e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b446:	68bb      	ldr	r3, [r7, #8]
 801b448:	2b01      	cmp	r3, #1
 801b44a:	d904      	bls.n	801b456 <remove_chain+0x26>
 801b44c:	69bb      	ldr	r3, [r7, #24]
 801b44e:	695b      	ldr	r3, [r3, #20]
 801b450:	68ba      	ldr	r2, [r7, #8]
 801b452:	429a      	cmp	r2, r3
 801b454:	d301      	bcc.n	801b45a <remove_chain+0x2a>
 801b456:	2302      	movs	r3, #2
 801b458:	e04b      	b.n	801b4f2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d00c      	beq.n	801b47a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b460:	f04f 32ff 	mov.w	r2, #4294967295
 801b464:	6879      	ldr	r1, [r7, #4]
 801b466:	69b8      	ldr	r0, [r7, #24]
 801b468:	f7ff fef8 	bl	801b25c <put_fat>
 801b46c:	4603      	mov	r3, r0
 801b46e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b470:	7ffb      	ldrb	r3, [r7, #31]
 801b472:	2b00      	cmp	r3, #0
 801b474:	d001      	beq.n	801b47a <remove_chain+0x4a>
 801b476:	7ffb      	ldrb	r3, [r7, #31]
 801b478:	e03b      	b.n	801b4f2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b47a:	68b9      	ldr	r1, [r7, #8]
 801b47c:	68f8      	ldr	r0, [r7, #12]
 801b47e:	f7ff fe46 	bl	801b10e <get_fat>
 801b482:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b484:	697b      	ldr	r3, [r7, #20]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d031      	beq.n	801b4ee <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b48a:	697b      	ldr	r3, [r7, #20]
 801b48c:	2b01      	cmp	r3, #1
 801b48e:	d101      	bne.n	801b494 <remove_chain+0x64>
 801b490:	2302      	movs	r3, #2
 801b492:	e02e      	b.n	801b4f2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b494:	697b      	ldr	r3, [r7, #20]
 801b496:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b49a:	d101      	bne.n	801b4a0 <remove_chain+0x70>
 801b49c:	2301      	movs	r3, #1
 801b49e:	e028      	b.n	801b4f2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b4a0:	2200      	movs	r2, #0
 801b4a2:	68b9      	ldr	r1, [r7, #8]
 801b4a4:	69b8      	ldr	r0, [r7, #24]
 801b4a6:	f7ff fed9 	bl	801b25c <put_fat>
 801b4aa:	4603      	mov	r3, r0
 801b4ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b4ae:	7ffb      	ldrb	r3, [r7, #31]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d001      	beq.n	801b4b8 <remove_chain+0x88>
 801b4b4:	7ffb      	ldrb	r3, [r7, #31]
 801b4b6:	e01c      	b.n	801b4f2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b4b8:	69bb      	ldr	r3, [r7, #24]
 801b4ba:	691a      	ldr	r2, [r3, #16]
 801b4bc:	69bb      	ldr	r3, [r7, #24]
 801b4be:	695b      	ldr	r3, [r3, #20]
 801b4c0:	3b02      	subs	r3, #2
 801b4c2:	429a      	cmp	r2, r3
 801b4c4:	d20b      	bcs.n	801b4de <remove_chain+0xae>
			fs->free_clst++;
 801b4c6:	69bb      	ldr	r3, [r7, #24]
 801b4c8:	691b      	ldr	r3, [r3, #16]
 801b4ca:	1c5a      	adds	r2, r3, #1
 801b4cc:	69bb      	ldr	r3, [r7, #24]
 801b4ce:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801b4d0:	69bb      	ldr	r3, [r7, #24]
 801b4d2:	791b      	ldrb	r3, [r3, #4]
 801b4d4:	f043 0301 	orr.w	r3, r3, #1
 801b4d8:	b2da      	uxtb	r2, r3
 801b4da:	69bb      	ldr	r3, [r7, #24]
 801b4dc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b4de:	697b      	ldr	r3, [r7, #20]
 801b4e0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b4e2:	69bb      	ldr	r3, [r7, #24]
 801b4e4:	695b      	ldr	r3, [r3, #20]
 801b4e6:	68ba      	ldr	r2, [r7, #8]
 801b4e8:	429a      	cmp	r2, r3
 801b4ea:	d3c6      	bcc.n	801b47a <remove_chain+0x4a>
 801b4ec:	e000      	b.n	801b4f0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b4ee:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b4f0:	2300      	movs	r3, #0
}
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	3720      	adds	r7, #32
 801b4f6:	46bd      	mov	sp, r7
 801b4f8:	bd80      	pop	{r7, pc}

0801b4fa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b4fa:	b580      	push	{r7, lr}
 801b4fc:	b088      	sub	sp, #32
 801b4fe:	af00      	add	r7, sp, #0
 801b500:	6078      	str	r0, [r7, #4]
 801b502:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b50a:	683b      	ldr	r3, [r7, #0]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d10d      	bne.n	801b52c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b510:	693b      	ldr	r3, [r7, #16]
 801b512:	68db      	ldr	r3, [r3, #12]
 801b514:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b516:	69bb      	ldr	r3, [r7, #24]
 801b518:	2b00      	cmp	r3, #0
 801b51a:	d004      	beq.n	801b526 <create_chain+0x2c>
 801b51c:	693b      	ldr	r3, [r7, #16]
 801b51e:	695b      	ldr	r3, [r3, #20]
 801b520:	69ba      	ldr	r2, [r7, #24]
 801b522:	429a      	cmp	r2, r3
 801b524:	d31b      	bcc.n	801b55e <create_chain+0x64>
 801b526:	2301      	movs	r3, #1
 801b528:	61bb      	str	r3, [r7, #24]
 801b52a:	e018      	b.n	801b55e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b52c:	6839      	ldr	r1, [r7, #0]
 801b52e:	6878      	ldr	r0, [r7, #4]
 801b530:	f7ff fded 	bl	801b10e <get_fat>
 801b534:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	2b01      	cmp	r3, #1
 801b53a:	d801      	bhi.n	801b540 <create_chain+0x46>
 801b53c:	2301      	movs	r3, #1
 801b53e:	e070      	b.n	801b622 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b540:	68fb      	ldr	r3, [r7, #12]
 801b542:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b546:	d101      	bne.n	801b54c <create_chain+0x52>
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	e06a      	b.n	801b622 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b54c:	693b      	ldr	r3, [r7, #16]
 801b54e:	695b      	ldr	r3, [r3, #20]
 801b550:	68fa      	ldr	r2, [r7, #12]
 801b552:	429a      	cmp	r2, r3
 801b554:	d201      	bcs.n	801b55a <create_chain+0x60>
 801b556:	68fb      	ldr	r3, [r7, #12]
 801b558:	e063      	b.n	801b622 <create_chain+0x128>
		scl = clst;
 801b55a:	683b      	ldr	r3, [r7, #0]
 801b55c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b55e:	69bb      	ldr	r3, [r7, #24]
 801b560:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b562:	69fb      	ldr	r3, [r7, #28]
 801b564:	3301      	adds	r3, #1
 801b566:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b568:	693b      	ldr	r3, [r7, #16]
 801b56a:	695b      	ldr	r3, [r3, #20]
 801b56c:	69fa      	ldr	r2, [r7, #28]
 801b56e:	429a      	cmp	r2, r3
 801b570:	d307      	bcc.n	801b582 <create_chain+0x88>
				ncl = 2;
 801b572:	2302      	movs	r3, #2
 801b574:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b576:	69fa      	ldr	r2, [r7, #28]
 801b578:	69bb      	ldr	r3, [r7, #24]
 801b57a:	429a      	cmp	r2, r3
 801b57c:	d901      	bls.n	801b582 <create_chain+0x88>
 801b57e:	2300      	movs	r3, #0
 801b580:	e04f      	b.n	801b622 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b582:	69f9      	ldr	r1, [r7, #28]
 801b584:	6878      	ldr	r0, [r7, #4]
 801b586:	f7ff fdc2 	bl	801b10e <get_fat>
 801b58a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b58c:	68fb      	ldr	r3, [r7, #12]
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d00e      	beq.n	801b5b0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b592:	68fb      	ldr	r3, [r7, #12]
 801b594:	2b01      	cmp	r3, #1
 801b596:	d003      	beq.n	801b5a0 <create_chain+0xa6>
 801b598:	68fb      	ldr	r3, [r7, #12]
 801b59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b59e:	d101      	bne.n	801b5a4 <create_chain+0xaa>
 801b5a0:	68fb      	ldr	r3, [r7, #12]
 801b5a2:	e03e      	b.n	801b622 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b5a4:	69fa      	ldr	r2, [r7, #28]
 801b5a6:	69bb      	ldr	r3, [r7, #24]
 801b5a8:	429a      	cmp	r2, r3
 801b5aa:	d1da      	bne.n	801b562 <create_chain+0x68>
 801b5ac:	2300      	movs	r3, #0
 801b5ae:	e038      	b.n	801b622 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b5b0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b5b2:	f04f 32ff 	mov.w	r2, #4294967295
 801b5b6:	69f9      	ldr	r1, [r7, #28]
 801b5b8:	6938      	ldr	r0, [r7, #16]
 801b5ba:	f7ff fe4f 	bl	801b25c <put_fat>
 801b5be:	4603      	mov	r3, r0
 801b5c0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b5c2:	7dfb      	ldrb	r3, [r7, #23]
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d109      	bne.n	801b5dc <create_chain+0xe2>
 801b5c8:	683b      	ldr	r3, [r7, #0]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d006      	beq.n	801b5dc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b5ce:	69fa      	ldr	r2, [r7, #28]
 801b5d0:	6839      	ldr	r1, [r7, #0]
 801b5d2:	6938      	ldr	r0, [r7, #16]
 801b5d4:	f7ff fe42 	bl	801b25c <put_fat>
 801b5d8:	4603      	mov	r3, r0
 801b5da:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b5dc:	7dfb      	ldrb	r3, [r7, #23]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d116      	bne.n	801b610 <create_chain+0x116>
		fs->last_clst = ncl;
 801b5e2:	693b      	ldr	r3, [r7, #16]
 801b5e4:	69fa      	ldr	r2, [r7, #28]
 801b5e6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b5e8:	693b      	ldr	r3, [r7, #16]
 801b5ea:	691a      	ldr	r2, [r3, #16]
 801b5ec:	693b      	ldr	r3, [r7, #16]
 801b5ee:	695b      	ldr	r3, [r3, #20]
 801b5f0:	3b02      	subs	r3, #2
 801b5f2:	429a      	cmp	r2, r3
 801b5f4:	d804      	bhi.n	801b600 <create_chain+0x106>
 801b5f6:	693b      	ldr	r3, [r7, #16]
 801b5f8:	691b      	ldr	r3, [r3, #16]
 801b5fa:	1e5a      	subs	r2, r3, #1
 801b5fc:	693b      	ldr	r3, [r7, #16]
 801b5fe:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801b600:	693b      	ldr	r3, [r7, #16]
 801b602:	791b      	ldrb	r3, [r3, #4]
 801b604:	f043 0301 	orr.w	r3, r3, #1
 801b608:	b2da      	uxtb	r2, r3
 801b60a:	693b      	ldr	r3, [r7, #16]
 801b60c:	711a      	strb	r2, [r3, #4]
 801b60e:	e007      	b.n	801b620 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b610:	7dfb      	ldrb	r3, [r7, #23]
 801b612:	2b01      	cmp	r3, #1
 801b614:	d102      	bne.n	801b61c <create_chain+0x122>
 801b616:	f04f 33ff 	mov.w	r3, #4294967295
 801b61a:	e000      	b.n	801b61e <create_chain+0x124>
 801b61c:	2301      	movs	r3, #1
 801b61e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b620:	69fb      	ldr	r3, [r7, #28]
}
 801b622:	4618      	mov	r0, r3
 801b624:	3720      	adds	r7, #32
 801b626:	46bd      	mov	sp, r7
 801b628:	bd80      	pop	{r7, pc}

0801b62a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b62a:	b480      	push	{r7}
 801b62c:	b087      	sub	sp, #28
 801b62e:	af00      	add	r7, sp, #0
 801b630:	6078      	str	r0, [r7, #4]
 801b632:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b63e:	3304      	adds	r3, #4
 801b640:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b642:	683b      	ldr	r3, [r7, #0]
 801b644:	0a5b      	lsrs	r3, r3, #9
 801b646:	68fa      	ldr	r2, [r7, #12]
 801b648:	8952      	ldrh	r2, [r2, #10]
 801b64a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b64e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b650:	693b      	ldr	r3, [r7, #16]
 801b652:	1d1a      	adds	r2, r3, #4
 801b654:	613a      	str	r2, [r7, #16]
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b65a:	68bb      	ldr	r3, [r7, #8]
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d101      	bne.n	801b664 <clmt_clust+0x3a>
 801b660:	2300      	movs	r3, #0
 801b662:	e010      	b.n	801b686 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801b664:	697a      	ldr	r2, [r7, #20]
 801b666:	68bb      	ldr	r3, [r7, #8]
 801b668:	429a      	cmp	r2, r3
 801b66a:	d307      	bcc.n	801b67c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801b66c:	697a      	ldr	r2, [r7, #20]
 801b66e:	68bb      	ldr	r3, [r7, #8]
 801b670:	1ad3      	subs	r3, r2, r3
 801b672:	617b      	str	r3, [r7, #20]
 801b674:	693b      	ldr	r3, [r7, #16]
 801b676:	3304      	adds	r3, #4
 801b678:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b67a:	e7e9      	b.n	801b650 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801b67c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b67e:	693b      	ldr	r3, [r7, #16]
 801b680:	681a      	ldr	r2, [r3, #0]
 801b682:	697b      	ldr	r3, [r7, #20]
 801b684:	4413      	add	r3, r2
}
 801b686:	4618      	mov	r0, r3
 801b688:	371c      	adds	r7, #28
 801b68a:	46bd      	mov	sp, r7
 801b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b690:	4770      	bx	lr

0801b692 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b692:	b580      	push	{r7, lr}
 801b694:	b086      	sub	sp, #24
 801b696:	af00      	add	r7, sp, #0
 801b698:	6078      	str	r0, [r7, #4]
 801b69a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	681b      	ldr	r3, [r3, #0]
 801b6a0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b6a2:	683b      	ldr	r3, [r7, #0]
 801b6a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b6a8:	d204      	bcs.n	801b6b4 <dir_sdi+0x22>
 801b6aa:	683b      	ldr	r3, [r7, #0]
 801b6ac:	f003 031f 	and.w	r3, r3, #31
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d001      	beq.n	801b6b8 <dir_sdi+0x26>
		return FR_INT_ERR;
 801b6b4:	2302      	movs	r3, #2
 801b6b6:	e063      	b.n	801b780 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	683a      	ldr	r2, [r7, #0]
 801b6bc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	689b      	ldr	r3, [r3, #8]
 801b6c2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b6c4:	697b      	ldr	r3, [r7, #20]
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d106      	bne.n	801b6d8 <dir_sdi+0x46>
 801b6ca:	693b      	ldr	r3, [r7, #16]
 801b6cc:	781b      	ldrb	r3, [r3, #0]
 801b6ce:	2b02      	cmp	r3, #2
 801b6d0:	d902      	bls.n	801b6d8 <dir_sdi+0x46>
		clst = fs->dirbase;
 801b6d2:	693b      	ldr	r3, [r7, #16]
 801b6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b6d6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801b6d8:	697b      	ldr	r3, [r7, #20]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	d10c      	bne.n	801b6f8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801b6de:	683b      	ldr	r3, [r7, #0]
 801b6e0:	095b      	lsrs	r3, r3, #5
 801b6e2:	693a      	ldr	r2, [r7, #16]
 801b6e4:	8912      	ldrh	r2, [r2, #8]
 801b6e6:	4293      	cmp	r3, r2
 801b6e8:	d301      	bcc.n	801b6ee <dir_sdi+0x5c>
 801b6ea:	2302      	movs	r3, #2
 801b6ec:	e048      	b.n	801b780 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801b6ee:	693b      	ldr	r3, [r7, #16]
 801b6f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	61da      	str	r2, [r3, #28]
 801b6f6:	e029      	b.n	801b74c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801b6f8:	693b      	ldr	r3, [r7, #16]
 801b6fa:	895b      	ldrh	r3, [r3, #10]
 801b6fc:	025b      	lsls	r3, r3, #9
 801b6fe:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b700:	e019      	b.n	801b736 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	6979      	ldr	r1, [r7, #20]
 801b706:	4618      	mov	r0, r3
 801b708:	f7ff fd01 	bl	801b10e <get_fat>
 801b70c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b70e:	697b      	ldr	r3, [r7, #20]
 801b710:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b714:	d101      	bne.n	801b71a <dir_sdi+0x88>
 801b716:	2301      	movs	r3, #1
 801b718:	e032      	b.n	801b780 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801b71a:	697b      	ldr	r3, [r7, #20]
 801b71c:	2b01      	cmp	r3, #1
 801b71e:	d904      	bls.n	801b72a <dir_sdi+0x98>
 801b720:	693b      	ldr	r3, [r7, #16]
 801b722:	695b      	ldr	r3, [r3, #20]
 801b724:	697a      	ldr	r2, [r7, #20]
 801b726:	429a      	cmp	r2, r3
 801b728:	d301      	bcc.n	801b72e <dir_sdi+0x9c>
 801b72a:	2302      	movs	r3, #2
 801b72c:	e028      	b.n	801b780 <dir_sdi+0xee>
			ofs -= csz;
 801b72e:	683a      	ldr	r2, [r7, #0]
 801b730:	68fb      	ldr	r3, [r7, #12]
 801b732:	1ad3      	subs	r3, r2, r3
 801b734:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b736:	683a      	ldr	r2, [r7, #0]
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	429a      	cmp	r2, r3
 801b73c:	d2e1      	bcs.n	801b702 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801b73e:	6979      	ldr	r1, [r7, #20]
 801b740:	6938      	ldr	r0, [r7, #16]
 801b742:	f7ff fcc5 	bl	801b0d0 <clust2sect>
 801b746:	4602      	mov	r2, r0
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	697a      	ldr	r2, [r7, #20]
 801b750:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	69db      	ldr	r3, [r3, #28]
 801b756:	2b00      	cmp	r3, #0
 801b758:	d101      	bne.n	801b75e <dir_sdi+0xcc>
 801b75a:	2302      	movs	r3, #2
 801b75c:	e010      	b.n	801b780 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	69da      	ldr	r2, [r3, #28]
 801b762:	683b      	ldr	r3, [r7, #0]
 801b764:	0a5b      	lsrs	r3, r3, #9
 801b766:	441a      	add	r2, r3
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801b76c:	693b      	ldr	r3, [r7, #16]
 801b76e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b772:	683b      	ldr	r3, [r7, #0]
 801b774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b778:	441a      	add	r2, r3
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b77e:	2300      	movs	r3, #0
}
 801b780:	4618      	mov	r0, r3
 801b782:	3718      	adds	r7, #24
 801b784:	46bd      	mov	sp, r7
 801b786:	bd80      	pop	{r7, pc}

0801b788 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801b788:	b580      	push	{r7, lr}
 801b78a:	b086      	sub	sp, #24
 801b78c:	af00      	add	r7, sp, #0
 801b78e:	6078      	str	r0, [r7, #4]
 801b790:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	695b      	ldr	r3, [r3, #20]
 801b79c:	3320      	adds	r3, #32
 801b79e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	69db      	ldr	r3, [r3, #28]
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d003      	beq.n	801b7b0 <dir_next+0x28>
 801b7a8:	68bb      	ldr	r3, [r7, #8]
 801b7aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b7ae:	d301      	bcc.n	801b7b4 <dir_next+0x2c>
 801b7b0:	2304      	movs	r3, #4
 801b7b2:	e0aa      	b.n	801b90a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b7b4:	68bb      	ldr	r3, [r7, #8]
 801b7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	f040 8098 	bne.w	801b8f0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	69db      	ldr	r3, [r3, #28]
 801b7c4:	1c5a      	adds	r2, r3, #1
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	699b      	ldr	r3, [r3, #24]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d10b      	bne.n	801b7ea <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801b7d2:	68bb      	ldr	r3, [r7, #8]
 801b7d4:	095b      	lsrs	r3, r3, #5
 801b7d6:	68fa      	ldr	r2, [r7, #12]
 801b7d8:	8912      	ldrh	r2, [r2, #8]
 801b7da:	4293      	cmp	r3, r2
 801b7dc:	f0c0 8088 	bcc.w	801b8f0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	2200      	movs	r2, #0
 801b7e4:	61da      	str	r2, [r3, #28]
 801b7e6:	2304      	movs	r3, #4
 801b7e8:	e08f      	b.n	801b90a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801b7ea:	68bb      	ldr	r3, [r7, #8]
 801b7ec:	0a5b      	lsrs	r3, r3, #9
 801b7ee:	68fa      	ldr	r2, [r7, #12]
 801b7f0:	8952      	ldrh	r2, [r2, #10]
 801b7f2:	3a01      	subs	r2, #1
 801b7f4:	4013      	ands	r3, r2
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d17a      	bne.n	801b8f0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801b7fa:	687a      	ldr	r2, [r7, #4]
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	699b      	ldr	r3, [r3, #24]
 801b800:	4619      	mov	r1, r3
 801b802:	4610      	mov	r0, r2
 801b804:	f7ff fc83 	bl	801b10e <get_fat>
 801b808:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801b80a:	697b      	ldr	r3, [r7, #20]
 801b80c:	2b01      	cmp	r3, #1
 801b80e:	d801      	bhi.n	801b814 <dir_next+0x8c>
 801b810:	2302      	movs	r3, #2
 801b812:	e07a      	b.n	801b90a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801b814:	697b      	ldr	r3, [r7, #20]
 801b816:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b81a:	d101      	bne.n	801b820 <dir_next+0x98>
 801b81c:	2301      	movs	r3, #1
 801b81e:	e074      	b.n	801b90a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801b820:	68fb      	ldr	r3, [r7, #12]
 801b822:	695b      	ldr	r3, [r3, #20]
 801b824:	697a      	ldr	r2, [r7, #20]
 801b826:	429a      	cmp	r2, r3
 801b828:	d358      	bcc.n	801b8dc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801b82a:	683b      	ldr	r3, [r7, #0]
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d104      	bne.n	801b83a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	2200      	movs	r2, #0
 801b834:	61da      	str	r2, [r3, #28]
 801b836:	2304      	movs	r3, #4
 801b838:	e067      	b.n	801b90a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801b83a:	687a      	ldr	r2, [r7, #4]
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	699b      	ldr	r3, [r3, #24]
 801b840:	4619      	mov	r1, r3
 801b842:	4610      	mov	r0, r2
 801b844:	f7ff fe59 	bl	801b4fa <create_chain>
 801b848:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801b84a:	697b      	ldr	r3, [r7, #20]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d101      	bne.n	801b854 <dir_next+0xcc>
 801b850:	2307      	movs	r3, #7
 801b852:	e05a      	b.n	801b90a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801b854:	697b      	ldr	r3, [r7, #20]
 801b856:	2b01      	cmp	r3, #1
 801b858:	d101      	bne.n	801b85e <dir_next+0xd6>
 801b85a:	2302      	movs	r3, #2
 801b85c:	e055      	b.n	801b90a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b85e:	697b      	ldr	r3, [r7, #20]
 801b860:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b864:	d101      	bne.n	801b86a <dir_next+0xe2>
 801b866:	2301      	movs	r3, #1
 801b868:	e04f      	b.n	801b90a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801b86a:	68f8      	ldr	r0, [r7, #12]
 801b86c:	f7ff fb50 	bl	801af10 <sync_window>
 801b870:	4603      	mov	r3, r0
 801b872:	2b00      	cmp	r3, #0
 801b874:	d001      	beq.n	801b87a <dir_next+0xf2>
 801b876:	2301      	movs	r3, #1
 801b878:	e047      	b.n	801b90a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	3330      	adds	r3, #48	@ 0x30
 801b87e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b882:	2100      	movs	r1, #0
 801b884:	4618      	mov	r0, r3
 801b886:	f7ff f979 	bl	801ab7c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b88a:	2300      	movs	r3, #0
 801b88c:	613b      	str	r3, [r7, #16]
 801b88e:	6979      	ldr	r1, [r7, #20]
 801b890:	68f8      	ldr	r0, [r7, #12]
 801b892:	f7ff fc1d 	bl	801b0d0 <clust2sect>
 801b896:	4602      	mov	r2, r0
 801b898:	68fb      	ldr	r3, [r7, #12]
 801b89a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801b89c:	e012      	b.n	801b8c4 <dir_next+0x13c>
						fs->wflag = 1;
 801b89e:	68fb      	ldr	r3, [r7, #12]
 801b8a0:	2201      	movs	r2, #1
 801b8a2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801b8a4:	68f8      	ldr	r0, [r7, #12]
 801b8a6:	f7ff fb33 	bl	801af10 <sync_window>
 801b8aa:	4603      	mov	r3, r0
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d001      	beq.n	801b8b4 <dir_next+0x12c>
 801b8b0:	2301      	movs	r3, #1
 801b8b2:	e02a      	b.n	801b90a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b8b4:	693b      	ldr	r3, [r7, #16]
 801b8b6:	3301      	adds	r3, #1
 801b8b8:	613b      	str	r3, [r7, #16]
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8be:	1c5a      	adds	r2, r3, #1
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	895b      	ldrh	r3, [r3, #10]
 801b8c8:	461a      	mov	r2, r3
 801b8ca:	693b      	ldr	r3, [r7, #16]
 801b8cc:	4293      	cmp	r3, r2
 801b8ce:	d3e6      	bcc.n	801b89e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b8d4:	693b      	ldr	r3, [r7, #16]
 801b8d6:	1ad2      	subs	r2, r2, r3
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	697a      	ldr	r2, [r7, #20]
 801b8e0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801b8e2:	6979      	ldr	r1, [r7, #20]
 801b8e4:	68f8      	ldr	r0, [r7, #12]
 801b8e6:	f7ff fbf3 	bl	801b0d0 <clust2sect>
 801b8ea:	4602      	mov	r2, r0
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	68ba      	ldr	r2, [r7, #8]
 801b8f4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801b8f6:	68fb      	ldr	r3, [r7, #12]
 801b8f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801b8fc:	68bb      	ldr	r3, [r7, #8]
 801b8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b902:	441a      	add	r2, r3
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b908:	2300      	movs	r3, #0
}
 801b90a:	4618      	mov	r0, r3
 801b90c:	3718      	adds	r7, #24
 801b90e:	46bd      	mov	sp, r7
 801b910:	bd80      	pop	{r7, pc}

0801b912 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801b912:	b580      	push	{r7, lr}
 801b914:	b086      	sub	sp, #24
 801b916:	af00      	add	r7, sp, #0
 801b918:	6078      	str	r0, [r7, #4]
 801b91a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	681b      	ldr	r3, [r3, #0]
 801b920:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801b922:	2100      	movs	r1, #0
 801b924:	6878      	ldr	r0, [r7, #4]
 801b926:	f7ff feb4 	bl	801b692 <dir_sdi>
 801b92a:	4603      	mov	r3, r0
 801b92c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b92e:	7dfb      	ldrb	r3, [r7, #23]
 801b930:	2b00      	cmp	r3, #0
 801b932:	d12b      	bne.n	801b98c <dir_alloc+0x7a>
		n = 0;
 801b934:	2300      	movs	r3, #0
 801b936:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	69db      	ldr	r3, [r3, #28]
 801b93c:	4619      	mov	r1, r3
 801b93e:	68f8      	ldr	r0, [r7, #12]
 801b940:	f7ff fb2a 	bl	801af98 <move_window>
 801b944:	4603      	mov	r3, r0
 801b946:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b948:	7dfb      	ldrb	r3, [r7, #23]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d11d      	bne.n	801b98a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	6a1b      	ldr	r3, [r3, #32]
 801b952:	781b      	ldrb	r3, [r3, #0]
 801b954:	2be5      	cmp	r3, #229	@ 0xe5
 801b956:	d004      	beq.n	801b962 <dir_alloc+0x50>
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	6a1b      	ldr	r3, [r3, #32]
 801b95c:	781b      	ldrb	r3, [r3, #0]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d107      	bne.n	801b972 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801b962:	693b      	ldr	r3, [r7, #16]
 801b964:	3301      	adds	r3, #1
 801b966:	613b      	str	r3, [r7, #16]
 801b968:	693a      	ldr	r2, [r7, #16]
 801b96a:	683b      	ldr	r3, [r7, #0]
 801b96c:	429a      	cmp	r2, r3
 801b96e:	d102      	bne.n	801b976 <dir_alloc+0x64>
 801b970:	e00c      	b.n	801b98c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801b972:	2300      	movs	r3, #0
 801b974:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801b976:	2101      	movs	r1, #1
 801b978:	6878      	ldr	r0, [r7, #4]
 801b97a:	f7ff ff05 	bl	801b788 <dir_next>
 801b97e:	4603      	mov	r3, r0
 801b980:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801b982:	7dfb      	ldrb	r3, [r7, #23]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d0d7      	beq.n	801b938 <dir_alloc+0x26>
 801b988:	e000      	b.n	801b98c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801b98a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b98c:	7dfb      	ldrb	r3, [r7, #23]
 801b98e:	2b04      	cmp	r3, #4
 801b990:	d101      	bne.n	801b996 <dir_alloc+0x84>
 801b992:	2307      	movs	r3, #7
 801b994:	75fb      	strb	r3, [r7, #23]
	return res;
 801b996:	7dfb      	ldrb	r3, [r7, #23]
}
 801b998:	4618      	mov	r0, r3
 801b99a:	3718      	adds	r7, #24
 801b99c:	46bd      	mov	sp, r7
 801b99e:	bd80      	pop	{r7, pc}

0801b9a0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801b9a0:	b580      	push	{r7, lr}
 801b9a2:	b084      	sub	sp, #16
 801b9a4:	af00      	add	r7, sp, #0
 801b9a6:	6078      	str	r0, [r7, #4]
 801b9a8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801b9aa:	683b      	ldr	r3, [r7, #0]
 801b9ac:	331a      	adds	r3, #26
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	f7ff f840 	bl	801aa34 <ld_word>
 801b9b4:	4603      	mov	r3, r0
 801b9b6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	781b      	ldrb	r3, [r3, #0]
 801b9bc:	2b03      	cmp	r3, #3
 801b9be:	d109      	bne.n	801b9d4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801b9c0:	683b      	ldr	r3, [r7, #0]
 801b9c2:	3314      	adds	r3, #20
 801b9c4:	4618      	mov	r0, r3
 801b9c6:	f7ff f835 	bl	801aa34 <ld_word>
 801b9ca:	4603      	mov	r3, r0
 801b9cc:	041b      	lsls	r3, r3, #16
 801b9ce:	68fa      	ldr	r2, [r7, #12]
 801b9d0:	4313      	orrs	r3, r2
 801b9d2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801b9d4:	68fb      	ldr	r3, [r7, #12]
}
 801b9d6:	4618      	mov	r0, r3
 801b9d8:	3710      	adds	r7, #16
 801b9da:	46bd      	mov	sp, r7
 801b9dc:	bd80      	pop	{r7, pc}

0801b9de <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801b9de:	b580      	push	{r7, lr}
 801b9e0:	b084      	sub	sp, #16
 801b9e2:	af00      	add	r7, sp, #0
 801b9e4:	60f8      	str	r0, [r7, #12]
 801b9e6:	60b9      	str	r1, [r7, #8]
 801b9e8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801b9ea:	68bb      	ldr	r3, [r7, #8]
 801b9ec:	331a      	adds	r3, #26
 801b9ee:	687a      	ldr	r2, [r7, #4]
 801b9f0:	b292      	uxth	r2, r2
 801b9f2:	4611      	mov	r1, r2
 801b9f4:	4618      	mov	r0, r3
 801b9f6:	f7ff f859 	bl	801aaac <st_word>
	if (fs->fs_type == FS_FAT32) {
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	781b      	ldrb	r3, [r3, #0]
 801b9fe:	2b03      	cmp	r3, #3
 801ba00:	d109      	bne.n	801ba16 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801ba02:	68bb      	ldr	r3, [r7, #8]
 801ba04:	f103 0214 	add.w	r2, r3, #20
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	0c1b      	lsrs	r3, r3, #16
 801ba0c:	b29b      	uxth	r3, r3
 801ba0e:	4619      	mov	r1, r3
 801ba10:	4610      	mov	r0, r2
 801ba12:	f7ff f84b 	bl	801aaac <st_word>
	}
}
 801ba16:	bf00      	nop
 801ba18:	3710      	adds	r7, #16
 801ba1a:	46bd      	mov	sp, r7
 801ba1c:	bd80      	pop	{r7, pc}

0801ba1e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801ba1e:	b580      	push	{r7, lr}
 801ba20:	b086      	sub	sp, #24
 801ba22:	af00      	add	r7, sp, #0
 801ba24:	6078      	str	r0, [r7, #4]
 801ba26:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801ba28:	2304      	movs	r3, #4
 801ba2a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801ba32:	e03c      	b.n	801baae <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	69db      	ldr	r3, [r3, #28]
 801ba38:	4619      	mov	r1, r3
 801ba3a:	6938      	ldr	r0, [r7, #16]
 801ba3c:	f7ff faac 	bl	801af98 <move_window>
 801ba40:	4603      	mov	r3, r0
 801ba42:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801ba44:	7dfb      	ldrb	r3, [r7, #23]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d136      	bne.n	801bab8 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	6a1b      	ldr	r3, [r3, #32]
 801ba4e:	781b      	ldrb	r3, [r3, #0]
 801ba50:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801ba52:	7bfb      	ldrb	r3, [r7, #15]
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d102      	bne.n	801ba5e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801ba58:	2304      	movs	r3, #4
 801ba5a:	75fb      	strb	r3, [r7, #23]
 801ba5c:	e031      	b.n	801bac2 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	6a1b      	ldr	r3, [r3, #32]
 801ba62:	330b      	adds	r3, #11
 801ba64:	781b      	ldrb	r3, [r3, #0]
 801ba66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ba6a:	73bb      	strb	r3, [r7, #14]
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	7bba      	ldrb	r2, [r7, #14]
 801ba70:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801ba72:	7bfb      	ldrb	r3, [r7, #15]
 801ba74:	2be5      	cmp	r3, #229	@ 0xe5
 801ba76:	d011      	beq.n	801ba9c <dir_read+0x7e>
 801ba78:	7bfb      	ldrb	r3, [r7, #15]
 801ba7a:	2b2e      	cmp	r3, #46	@ 0x2e
 801ba7c:	d00e      	beq.n	801ba9c <dir_read+0x7e>
 801ba7e:	7bbb      	ldrb	r3, [r7, #14]
 801ba80:	2b0f      	cmp	r3, #15
 801ba82:	d00b      	beq.n	801ba9c <dir_read+0x7e>
 801ba84:	7bbb      	ldrb	r3, [r7, #14]
 801ba86:	f023 0320 	bic.w	r3, r3, #32
 801ba8a:	2b08      	cmp	r3, #8
 801ba8c:	bf0c      	ite	eq
 801ba8e:	2301      	moveq	r3, #1
 801ba90:	2300      	movne	r3, #0
 801ba92:	b2db      	uxtb	r3, r3
 801ba94:	461a      	mov	r2, r3
 801ba96:	683b      	ldr	r3, [r7, #0]
 801ba98:	4293      	cmp	r3, r2
 801ba9a:	d00f      	beq.n	801babc <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801ba9c:	2100      	movs	r1, #0
 801ba9e:	6878      	ldr	r0, [r7, #4]
 801baa0:	f7ff fe72 	bl	801b788 <dir_next>
 801baa4:	4603      	mov	r3, r0
 801baa6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801baa8:	7dfb      	ldrb	r3, [r7, #23]
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d108      	bne.n	801bac0 <dir_read+0xa2>
	while (dp->sect) {
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	69db      	ldr	r3, [r3, #28]
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d1be      	bne.n	801ba34 <dir_read+0x16>
 801bab6:	e004      	b.n	801bac2 <dir_read+0xa4>
		if (res != FR_OK) break;
 801bab8:	bf00      	nop
 801baba:	e002      	b.n	801bac2 <dir_read+0xa4>
				break;
 801babc:	bf00      	nop
 801babe:	e000      	b.n	801bac2 <dir_read+0xa4>
		if (res != FR_OK) break;
 801bac0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801bac2:	7dfb      	ldrb	r3, [r7, #23]
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d002      	beq.n	801bace <dir_read+0xb0>
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	2200      	movs	r2, #0
 801bacc:	61da      	str	r2, [r3, #28]
	return res;
 801bace:	7dfb      	ldrb	r3, [r7, #23]
}
 801bad0:	4618      	mov	r0, r3
 801bad2:	3718      	adds	r7, #24
 801bad4:	46bd      	mov	sp, r7
 801bad6:	bd80      	pop	{r7, pc}

0801bad8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801bad8:	b580      	push	{r7, lr}
 801bada:	b086      	sub	sp, #24
 801badc:	af00      	add	r7, sp, #0
 801bade:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801bae6:	2100      	movs	r1, #0
 801bae8:	6878      	ldr	r0, [r7, #4]
 801baea:	f7ff fdd2 	bl	801b692 <dir_sdi>
 801baee:	4603      	mov	r3, r0
 801baf0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801baf2:	7dfb      	ldrb	r3, [r7, #23]
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	d001      	beq.n	801bafc <dir_find+0x24>
 801baf8:	7dfb      	ldrb	r3, [r7, #23]
 801bafa:	e03e      	b.n	801bb7a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	69db      	ldr	r3, [r3, #28]
 801bb00:	4619      	mov	r1, r3
 801bb02:	6938      	ldr	r0, [r7, #16]
 801bb04:	f7ff fa48 	bl	801af98 <move_window>
 801bb08:	4603      	mov	r3, r0
 801bb0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bb0c:	7dfb      	ldrb	r3, [r7, #23]
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d12f      	bne.n	801bb72 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	6a1b      	ldr	r3, [r3, #32]
 801bb16:	781b      	ldrb	r3, [r3, #0]
 801bb18:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801bb1a:	7bfb      	ldrb	r3, [r7, #15]
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	d102      	bne.n	801bb26 <dir_find+0x4e>
 801bb20:	2304      	movs	r3, #4
 801bb22:	75fb      	strb	r3, [r7, #23]
 801bb24:	e028      	b.n	801bb78 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	6a1b      	ldr	r3, [r3, #32]
 801bb2a:	330b      	adds	r3, #11
 801bb2c:	781b      	ldrb	r3, [r3, #0]
 801bb2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bb32:	b2da      	uxtb	r2, r3
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	6a1b      	ldr	r3, [r3, #32]
 801bb3c:	330b      	adds	r3, #11
 801bb3e:	781b      	ldrb	r3, [r3, #0]
 801bb40:	f003 0308 	and.w	r3, r3, #8
 801bb44:	2b00      	cmp	r3, #0
 801bb46:	d10a      	bne.n	801bb5e <dir_find+0x86>
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	6a18      	ldr	r0, [r3, #32]
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	3324      	adds	r3, #36	@ 0x24
 801bb50:	220b      	movs	r2, #11
 801bb52:	4619      	mov	r1, r3
 801bb54:	f7ff f82d 	bl	801abb2 <mem_cmp>
 801bb58:	4603      	mov	r3, r0
 801bb5a:	2b00      	cmp	r3, #0
 801bb5c:	d00b      	beq.n	801bb76 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801bb5e:	2100      	movs	r1, #0
 801bb60:	6878      	ldr	r0, [r7, #4]
 801bb62:	f7ff fe11 	bl	801b788 <dir_next>
 801bb66:	4603      	mov	r3, r0
 801bb68:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801bb6a:	7dfb      	ldrb	r3, [r7, #23]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d0c5      	beq.n	801bafc <dir_find+0x24>
 801bb70:	e002      	b.n	801bb78 <dir_find+0xa0>
		if (res != FR_OK) break;
 801bb72:	bf00      	nop
 801bb74:	e000      	b.n	801bb78 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801bb76:	bf00      	nop

	return res;
 801bb78:	7dfb      	ldrb	r3, [r7, #23]
}
 801bb7a:	4618      	mov	r0, r3
 801bb7c:	3718      	adds	r7, #24
 801bb7e:	46bd      	mov	sp, r7
 801bb80:	bd80      	pop	{r7, pc}

0801bb82 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801bb82:	b580      	push	{r7, lr}
 801bb84:	b084      	sub	sp, #16
 801bb86:	af00      	add	r7, sp, #0
 801bb88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801bb90:	2101      	movs	r1, #1
 801bb92:	6878      	ldr	r0, [r7, #4]
 801bb94:	f7ff febd 	bl	801b912 <dir_alloc>
 801bb98:	4603      	mov	r3, r0
 801bb9a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801bb9c:	7bfb      	ldrb	r3, [r7, #15]
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d11c      	bne.n	801bbdc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	69db      	ldr	r3, [r3, #28]
 801bba6:	4619      	mov	r1, r3
 801bba8:	68b8      	ldr	r0, [r7, #8]
 801bbaa:	f7ff f9f5 	bl	801af98 <move_window>
 801bbae:	4603      	mov	r3, r0
 801bbb0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801bbb2:	7bfb      	ldrb	r3, [r7, #15]
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d111      	bne.n	801bbdc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	6a1b      	ldr	r3, [r3, #32]
 801bbbc:	2220      	movs	r2, #32
 801bbbe:	2100      	movs	r1, #0
 801bbc0:	4618      	mov	r0, r3
 801bbc2:	f7fe ffdb 	bl	801ab7c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	6a18      	ldr	r0, [r3, #32]
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	3324      	adds	r3, #36	@ 0x24
 801bbce:	220b      	movs	r2, #11
 801bbd0:	4619      	mov	r1, r3
 801bbd2:	f7fe ffb2 	bl	801ab3a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801bbd6:	68bb      	ldr	r3, [r7, #8]
 801bbd8:	2201      	movs	r2, #1
 801bbda:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801bbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 801bbde:	4618      	mov	r0, r3
 801bbe0:	3710      	adds	r7, #16
 801bbe2:	46bd      	mov	sp, r7
 801bbe4:	bd80      	pop	{r7, pc}

0801bbe6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801bbe6:	b580      	push	{r7, lr}
 801bbe8:	b086      	sub	sp, #24
 801bbea:	af00      	add	r7, sp, #0
 801bbec:	6078      	str	r0, [r7, #4]
 801bbee:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801bbf0:	683b      	ldr	r3, [r7, #0]
 801bbf2:	2200      	movs	r2, #0
 801bbf4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	69db      	ldr	r3, [r3, #28]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d04f      	beq.n	801bc9e <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801bbfe:	2300      	movs	r3, #0
 801bc00:	613b      	str	r3, [r7, #16]
 801bc02:	693b      	ldr	r3, [r7, #16]
 801bc04:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 801bc06:	e022      	b.n	801bc4e <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	6a1a      	ldr	r2, [r3, #32]
 801bc0c:	697b      	ldr	r3, [r7, #20]
 801bc0e:	1c59      	adds	r1, r3, #1
 801bc10:	6179      	str	r1, [r7, #20]
 801bc12:	4413      	add	r3, r2
 801bc14:	781b      	ldrb	r3, [r3, #0]
 801bc16:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801bc18:	7bfb      	ldrb	r3, [r7, #15]
 801bc1a:	2b20      	cmp	r3, #32
 801bc1c:	d016      	beq.n	801bc4c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801bc1e:	7bfb      	ldrb	r3, [r7, #15]
 801bc20:	2b05      	cmp	r3, #5
 801bc22:	d101      	bne.n	801bc28 <get_fileinfo+0x42>
 801bc24:	23e5      	movs	r3, #229	@ 0xe5
 801bc26:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 801bc28:	697b      	ldr	r3, [r7, #20]
 801bc2a:	2b09      	cmp	r3, #9
 801bc2c:	d106      	bne.n	801bc3c <get_fileinfo+0x56>
 801bc2e:	693b      	ldr	r3, [r7, #16]
 801bc30:	1c5a      	adds	r2, r3, #1
 801bc32:	613a      	str	r2, [r7, #16]
 801bc34:	683a      	ldr	r2, [r7, #0]
 801bc36:	4413      	add	r3, r2
 801bc38:	222e      	movs	r2, #46	@ 0x2e
 801bc3a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 801bc3c:	693b      	ldr	r3, [r7, #16]
 801bc3e:	1c5a      	adds	r2, r3, #1
 801bc40:	613a      	str	r2, [r7, #16]
 801bc42:	683a      	ldr	r2, [r7, #0]
 801bc44:	4413      	add	r3, r2
 801bc46:	7bfa      	ldrb	r2, [r7, #15]
 801bc48:	725a      	strb	r2, [r3, #9]
 801bc4a:	e000      	b.n	801bc4e <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 801bc4c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 801bc4e:	697b      	ldr	r3, [r7, #20]
 801bc50:	2b0a      	cmp	r3, #10
 801bc52:	d9d9      	bls.n	801bc08 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 801bc54:	683a      	ldr	r2, [r7, #0]
 801bc56:	693b      	ldr	r3, [r7, #16]
 801bc58:	4413      	add	r3, r2
 801bc5a:	3309      	adds	r3, #9
 801bc5c:	2200      	movs	r2, #0
 801bc5e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	6a1b      	ldr	r3, [r3, #32]
 801bc64:	7ada      	ldrb	r2, [r3, #11]
 801bc66:	683b      	ldr	r3, [r7, #0]
 801bc68:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	6a1b      	ldr	r3, [r3, #32]
 801bc6e:	331c      	adds	r3, #28
 801bc70:	4618      	mov	r0, r3
 801bc72:	f7fe fef8 	bl	801aa66 <ld_dword>
 801bc76:	4602      	mov	r2, r0
 801bc78:	683b      	ldr	r3, [r7, #0]
 801bc7a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	6a1b      	ldr	r3, [r3, #32]
 801bc80:	3316      	adds	r3, #22
 801bc82:	4618      	mov	r0, r3
 801bc84:	f7fe feef 	bl	801aa66 <ld_dword>
 801bc88:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801bc8a:	68bb      	ldr	r3, [r7, #8]
 801bc8c:	b29a      	uxth	r2, r3
 801bc8e:	683b      	ldr	r3, [r7, #0]
 801bc90:	80da      	strh	r2, [r3, #6]
 801bc92:	68bb      	ldr	r3, [r7, #8]
 801bc94:	0c1b      	lsrs	r3, r3, #16
 801bc96:	b29a      	uxth	r2, r3
 801bc98:	683b      	ldr	r3, [r7, #0]
 801bc9a:	809a      	strh	r2, [r3, #4]
 801bc9c:	e000      	b.n	801bca0 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801bc9e:	bf00      	nop
}
 801bca0:	3718      	adds	r7, #24
 801bca2:	46bd      	mov	sp, r7
 801bca4:	bd80      	pop	{r7, pc}
	...

0801bca8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801bca8:	b580      	push	{r7, lr}
 801bcaa:	b088      	sub	sp, #32
 801bcac:	af00      	add	r7, sp, #0
 801bcae:	6078      	str	r0, [r7, #4]
 801bcb0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801bcb2:	683b      	ldr	r3, [r7, #0]
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	60fb      	str	r3, [r7, #12]
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	3324      	adds	r3, #36	@ 0x24
 801bcbc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801bcbe:	220b      	movs	r2, #11
 801bcc0:	2120      	movs	r1, #32
 801bcc2:	68b8      	ldr	r0, [r7, #8]
 801bcc4:	f7fe ff5a 	bl	801ab7c <mem_set>
	si = i = 0; ni = 8;
 801bcc8:	2300      	movs	r3, #0
 801bcca:	613b      	str	r3, [r7, #16]
 801bccc:	693b      	ldr	r3, [r7, #16]
 801bcce:	61fb      	str	r3, [r7, #28]
 801bcd0:	2308      	movs	r3, #8
 801bcd2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801bcd4:	69fb      	ldr	r3, [r7, #28]
 801bcd6:	1c5a      	adds	r2, r3, #1
 801bcd8:	61fa      	str	r2, [r7, #28]
 801bcda:	68fa      	ldr	r2, [r7, #12]
 801bcdc:	4413      	add	r3, r2
 801bcde:	781b      	ldrb	r3, [r3, #0]
 801bce0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801bce2:	7efb      	ldrb	r3, [r7, #27]
 801bce4:	2b20      	cmp	r3, #32
 801bce6:	d94e      	bls.n	801bd86 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801bce8:	7efb      	ldrb	r3, [r7, #27]
 801bcea:	2b2f      	cmp	r3, #47	@ 0x2f
 801bcec:	d006      	beq.n	801bcfc <create_name+0x54>
 801bcee:	7efb      	ldrb	r3, [r7, #27]
 801bcf0:	2b5c      	cmp	r3, #92	@ 0x5c
 801bcf2:	d110      	bne.n	801bd16 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801bcf4:	e002      	b.n	801bcfc <create_name+0x54>
 801bcf6:	69fb      	ldr	r3, [r7, #28]
 801bcf8:	3301      	adds	r3, #1
 801bcfa:	61fb      	str	r3, [r7, #28]
 801bcfc:	68fa      	ldr	r2, [r7, #12]
 801bcfe:	69fb      	ldr	r3, [r7, #28]
 801bd00:	4413      	add	r3, r2
 801bd02:	781b      	ldrb	r3, [r3, #0]
 801bd04:	2b2f      	cmp	r3, #47	@ 0x2f
 801bd06:	d0f6      	beq.n	801bcf6 <create_name+0x4e>
 801bd08:	68fa      	ldr	r2, [r7, #12]
 801bd0a:	69fb      	ldr	r3, [r7, #28]
 801bd0c:	4413      	add	r3, r2
 801bd0e:	781b      	ldrb	r3, [r3, #0]
 801bd10:	2b5c      	cmp	r3, #92	@ 0x5c
 801bd12:	d0f0      	beq.n	801bcf6 <create_name+0x4e>
			break;
 801bd14:	e038      	b.n	801bd88 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801bd16:	7efb      	ldrb	r3, [r7, #27]
 801bd18:	2b2e      	cmp	r3, #46	@ 0x2e
 801bd1a:	d003      	beq.n	801bd24 <create_name+0x7c>
 801bd1c:	693a      	ldr	r2, [r7, #16]
 801bd1e:	697b      	ldr	r3, [r7, #20]
 801bd20:	429a      	cmp	r2, r3
 801bd22:	d30c      	bcc.n	801bd3e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801bd24:	697b      	ldr	r3, [r7, #20]
 801bd26:	2b0b      	cmp	r3, #11
 801bd28:	d002      	beq.n	801bd30 <create_name+0x88>
 801bd2a:	7efb      	ldrb	r3, [r7, #27]
 801bd2c:	2b2e      	cmp	r3, #46	@ 0x2e
 801bd2e:	d001      	beq.n	801bd34 <create_name+0x8c>
 801bd30:	2306      	movs	r3, #6
 801bd32:	e044      	b.n	801bdbe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801bd34:	2308      	movs	r3, #8
 801bd36:	613b      	str	r3, [r7, #16]
 801bd38:	230b      	movs	r3, #11
 801bd3a:	617b      	str	r3, [r7, #20]
			continue;
 801bd3c:	e022      	b.n	801bd84 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801bd3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	da04      	bge.n	801bd50 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801bd46:	7efb      	ldrb	r3, [r7, #27]
 801bd48:	3b80      	subs	r3, #128	@ 0x80
 801bd4a:	4a1f      	ldr	r2, [pc, #124]	@ (801bdc8 <create_name+0x120>)
 801bd4c:	5cd3      	ldrb	r3, [r2, r3]
 801bd4e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801bd50:	7efb      	ldrb	r3, [r7, #27]
 801bd52:	4619      	mov	r1, r3
 801bd54:	481d      	ldr	r0, [pc, #116]	@ (801bdcc <create_name+0x124>)
 801bd56:	f7fe ff53 	bl	801ac00 <chk_chr>
 801bd5a:	4603      	mov	r3, r0
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d001      	beq.n	801bd64 <create_name+0xbc>
 801bd60:	2306      	movs	r3, #6
 801bd62:	e02c      	b.n	801bdbe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801bd64:	7efb      	ldrb	r3, [r7, #27]
 801bd66:	2b60      	cmp	r3, #96	@ 0x60
 801bd68:	d905      	bls.n	801bd76 <create_name+0xce>
 801bd6a:	7efb      	ldrb	r3, [r7, #27]
 801bd6c:	2b7a      	cmp	r3, #122	@ 0x7a
 801bd6e:	d802      	bhi.n	801bd76 <create_name+0xce>
 801bd70:	7efb      	ldrb	r3, [r7, #27]
 801bd72:	3b20      	subs	r3, #32
 801bd74:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801bd76:	693b      	ldr	r3, [r7, #16]
 801bd78:	1c5a      	adds	r2, r3, #1
 801bd7a:	613a      	str	r2, [r7, #16]
 801bd7c:	68ba      	ldr	r2, [r7, #8]
 801bd7e:	4413      	add	r3, r2
 801bd80:	7efa      	ldrb	r2, [r7, #27]
 801bd82:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801bd84:	e7a6      	b.n	801bcd4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801bd86:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801bd88:	68fa      	ldr	r2, [r7, #12]
 801bd8a:	69fb      	ldr	r3, [r7, #28]
 801bd8c:	441a      	add	r2, r3
 801bd8e:	683b      	ldr	r3, [r7, #0]
 801bd90:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801bd92:	693b      	ldr	r3, [r7, #16]
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d101      	bne.n	801bd9c <create_name+0xf4>
 801bd98:	2306      	movs	r3, #6
 801bd9a:	e010      	b.n	801bdbe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801bd9c:	68bb      	ldr	r3, [r7, #8]
 801bd9e:	781b      	ldrb	r3, [r3, #0]
 801bda0:	2be5      	cmp	r3, #229	@ 0xe5
 801bda2:	d102      	bne.n	801bdaa <create_name+0x102>
 801bda4:	68bb      	ldr	r3, [r7, #8]
 801bda6:	2205      	movs	r2, #5
 801bda8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801bdaa:	7efb      	ldrb	r3, [r7, #27]
 801bdac:	2b20      	cmp	r3, #32
 801bdae:	d801      	bhi.n	801bdb4 <create_name+0x10c>
 801bdb0:	2204      	movs	r2, #4
 801bdb2:	e000      	b.n	801bdb6 <create_name+0x10e>
 801bdb4:	2200      	movs	r2, #0
 801bdb6:	68bb      	ldr	r3, [r7, #8]
 801bdb8:	330b      	adds	r3, #11
 801bdba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801bdbc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801bdbe:	4618      	mov	r0, r3
 801bdc0:	3720      	adds	r7, #32
 801bdc2:	46bd      	mov	sp, r7
 801bdc4:	bd80      	pop	{r7, pc}
 801bdc6:	bf00      	nop
 801bdc8:	08031fd8 	.word	0x08031fd8
 801bdcc:	0801ef80 	.word	0x0801ef80

0801bdd0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801bdd0:	b580      	push	{r7, lr}
 801bdd2:	b086      	sub	sp, #24
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	6078      	str	r0, [r7, #4]
 801bdd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801bdde:	693b      	ldr	r3, [r7, #16]
 801bde0:	681b      	ldr	r3, [r3, #0]
 801bde2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801bde4:	e002      	b.n	801bdec <follow_path+0x1c>
 801bde6:	683b      	ldr	r3, [r7, #0]
 801bde8:	3301      	adds	r3, #1
 801bdea:	603b      	str	r3, [r7, #0]
 801bdec:	683b      	ldr	r3, [r7, #0]
 801bdee:	781b      	ldrb	r3, [r3, #0]
 801bdf0:	2b2f      	cmp	r3, #47	@ 0x2f
 801bdf2:	d0f8      	beq.n	801bde6 <follow_path+0x16>
 801bdf4:	683b      	ldr	r3, [r7, #0]
 801bdf6:	781b      	ldrb	r3, [r3, #0]
 801bdf8:	2b5c      	cmp	r3, #92	@ 0x5c
 801bdfa:	d0f4      	beq.n	801bde6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801bdfc:	693b      	ldr	r3, [r7, #16]
 801bdfe:	2200      	movs	r2, #0
 801be00:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801be02:	683b      	ldr	r3, [r7, #0]
 801be04:	781b      	ldrb	r3, [r3, #0]
 801be06:	2b1f      	cmp	r3, #31
 801be08:	d80a      	bhi.n	801be20 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	2280      	movs	r2, #128	@ 0x80
 801be0e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801be12:	2100      	movs	r1, #0
 801be14:	6878      	ldr	r0, [r7, #4]
 801be16:	f7ff fc3c 	bl	801b692 <dir_sdi>
 801be1a:	4603      	mov	r3, r0
 801be1c:	75fb      	strb	r3, [r7, #23]
 801be1e:	e043      	b.n	801bea8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801be20:	463b      	mov	r3, r7
 801be22:	4619      	mov	r1, r3
 801be24:	6878      	ldr	r0, [r7, #4]
 801be26:	f7ff ff3f 	bl	801bca8 <create_name>
 801be2a:	4603      	mov	r3, r0
 801be2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801be2e:	7dfb      	ldrb	r3, [r7, #23]
 801be30:	2b00      	cmp	r3, #0
 801be32:	d134      	bne.n	801be9e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801be34:	6878      	ldr	r0, [r7, #4]
 801be36:	f7ff fe4f 	bl	801bad8 <dir_find>
 801be3a:	4603      	mov	r3, r0
 801be3c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801be44:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801be46:	7dfb      	ldrb	r3, [r7, #23]
 801be48:	2b00      	cmp	r3, #0
 801be4a:	d00a      	beq.n	801be62 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801be4c:	7dfb      	ldrb	r3, [r7, #23]
 801be4e:	2b04      	cmp	r3, #4
 801be50:	d127      	bne.n	801bea2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801be52:	7afb      	ldrb	r3, [r7, #11]
 801be54:	f003 0304 	and.w	r3, r3, #4
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d122      	bne.n	801bea2 <follow_path+0xd2>
 801be5c:	2305      	movs	r3, #5
 801be5e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801be60:	e01f      	b.n	801bea2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801be62:	7afb      	ldrb	r3, [r7, #11]
 801be64:	f003 0304 	and.w	r3, r3, #4
 801be68:	2b00      	cmp	r3, #0
 801be6a:	d11c      	bne.n	801bea6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801be6c:	693b      	ldr	r3, [r7, #16]
 801be6e:	799b      	ldrb	r3, [r3, #6]
 801be70:	f003 0310 	and.w	r3, r3, #16
 801be74:	2b00      	cmp	r3, #0
 801be76:	d102      	bne.n	801be7e <follow_path+0xae>
				res = FR_NO_PATH; break;
 801be78:	2305      	movs	r3, #5
 801be7a:	75fb      	strb	r3, [r7, #23]
 801be7c:	e014      	b.n	801bea8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801be7e:	68fb      	ldr	r3, [r7, #12]
 801be80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	695b      	ldr	r3, [r3, #20]
 801be88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801be8c:	4413      	add	r3, r2
 801be8e:	4619      	mov	r1, r3
 801be90:	68f8      	ldr	r0, [r7, #12]
 801be92:	f7ff fd85 	bl	801b9a0 <ld_clust>
 801be96:	4602      	mov	r2, r0
 801be98:	693b      	ldr	r3, [r7, #16]
 801be9a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801be9c:	e7c0      	b.n	801be20 <follow_path+0x50>
			if (res != FR_OK) break;
 801be9e:	bf00      	nop
 801bea0:	e002      	b.n	801bea8 <follow_path+0xd8>
				break;
 801bea2:	bf00      	nop
 801bea4:	e000      	b.n	801bea8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801bea6:	bf00      	nop
			}
		}
	}

	return res;
 801bea8:	7dfb      	ldrb	r3, [r7, #23]
}
 801beaa:	4618      	mov	r0, r3
 801beac:	3718      	adds	r7, #24
 801beae:	46bd      	mov	sp, r7
 801beb0:	bd80      	pop	{r7, pc}

0801beb2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801beb2:	b480      	push	{r7}
 801beb4:	b087      	sub	sp, #28
 801beb6:	af00      	add	r7, sp, #0
 801beb8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801beba:	f04f 33ff 	mov.w	r3, #4294967295
 801bebe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d031      	beq.n	801bf2c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	617b      	str	r3, [r7, #20]
 801bece:	e002      	b.n	801bed6 <get_ldnumber+0x24>
 801bed0:	697b      	ldr	r3, [r7, #20]
 801bed2:	3301      	adds	r3, #1
 801bed4:	617b      	str	r3, [r7, #20]
 801bed6:	697b      	ldr	r3, [r7, #20]
 801bed8:	781b      	ldrb	r3, [r3, #0]
 801beda:	2b20      	cmp	r3, #32
 801bedc:	d903      	bls.n	801bee6 <get_ldnumber+0x34>
 801bede:	697b      	ldr	r3, [r7, #20]
 801bee0:	781b      	ldrb	r3, [r3, #0]
 801bee2:	2b3a      	cmp	r3, #58	@ 0x3a
 801bee4:	d1f4      	bne.n	801bed0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801bee6:	697b      	ldr	r3, [r7, #20]
 801bee8:	781b      	ldrb	r3, [r3, #0]
 801beea:	2b3a      	cmp	r3, #58	@ 0x3a
 801beec:	d11c      	bne.n	801bf28 <get_ldnumber+0x76>
			tp = *path;
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801bef4:	68fb      	ldr	r3, [r7, #12]
 801bef6:	1c5a      	adds	r2, r3, #1
 801bef8:	60fa      	str	r2, [r7, #12]
 801befa:	781b      	ldrb	r3, [r3, #0]
 801befc:	3b30      	subs	r3, #48	@ 0x30
 801befe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801bf00:	68bb      	ldr	r3, [r7, #8]
 801bf02:	2b09      	cmp	r3, #9
 801bf04:	d80e      	bhi.n	801bf24 <get_ldnumber+0x72>
 801bf06:	68fa      	ldr	r2, [r7, #12]
 801bf08:	697b      	ldr	r3, [r7, #20]
 801bf0a:	429a      	cmp	r2, r3
 801bf0c:	d10a      	bne.n	801bf24 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801bf0e:	68bb      	ldr	r3, [r7, #8]
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d107      	bne.n	801bf24 <get_ldnumber+0x72>
					vol = (int)i;
 801bf14:	68bb      	ldr	r3, [r7, #8]
 801bf16:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801bf18:	697b      	ldr	r3, [r7, #20]
 801bf1a:	3301      	adds	r3, #1
 801bf1c:	617b      	str	r3, [r7, #20]
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	697a      	ldr	r2, [r7, #20]
 801bf22:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801bf24:	693b      	ldr	r3, [r7, #16]
 801bf26:	e002      	b.n	801bf2e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801bf28:	2300      	movs	r3, #0
 801bf2a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801bf2c:	693b      	ldr	r3, [r7, #16]
}
 801bf2e:	4618      	mov	r0, r3
 801bf30:	371c      	adds	r7, #28
 801bf32:	46bd      	mov	sp, r7
 801bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf38:	4770      	bx	lr
	...

0801bf3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801bf3c:	b580      	push	{r7, lr}
 801bf3e:	b082      	sub	sp, #8
 801bf40:	af00      	add	r7, sp, #0
 801bf42:	6078      	str	r0, [r7, #4]
 801bf44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	2200      	movs	r2, #0
 801bf4a:	70da      	strb	r2, [r3, #3]
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	f04f 32ff 	mov.w	r2, #4294967295
 801bf52:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801bf54:	6839      	ldr	r1, [r7, #0]
 801bf56:	6878      	ldr	r0, [r7, #4]
 801bf58:	f7ff f81e 	bl	801af98 <move_window>
 801bf5c:	4603      	mov	r3, r0
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d001      	beq.n	801bf66 <check_fs+0x2a>
 801bf62:	2304      	movs	r3, #4
 801bf64:	e038      	b.n	801bfd8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	3330      	adds	r3, #48	@ 0x30
 801bf6a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801bf6e:	4618      	mov	r0, r3
 801bf70:	f7fe fd60 	bl	801aa34 <ld_word>
 801bf74:	4603      	mov	r3, r0
 801bf76:	461a      	mov	r2, r3
 801bf78:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801bf7c:	429a      	cmp	r2, r3
 801bf7e:	d001      	beq.n	801bf84 <check_fs+0x48>
 801bf80:	2303      	movs	r3, #3
 801bf82:	e029      	b.n	801bfd8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bf8a:	2be9      	cmp	r3, #233	@ 0xe9
 801bf8c:	d009      	beq.n	801bfa2 <check_fs+0x66>
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bf94:	2beb      	cmp	r3, #235	@ 0xeb
 801bf96:	d11e      	bne.n	801bfd6 <check_fs+0x9a>
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801bf9e:	2b90      	cmp	r3, #144	@ 0x90
 801bfa0:	d119      	bne.n	801bfd6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	3330      	adds	r3, #48	@ 0x30
 801bfa6:	3336      	adds	r3, #54	@ 0x36
 801bfa8:	4618      	mov	r0, r3
 801bfaa:	f7fe fd5c 	bl	801aa66 <ld_dword>
 801bfae:	4603      	mov	r3, r0
 801bfb0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801bfb4:	4a0a      	ldr	r2, [pc, #40]	@ (801bfe0 <check_fs+0xa4>)
 801bfb6:	4293      	cmp	r3, r2
 801bfb8:	d101      	bne.n	801bfbe <check_fs+0x82>
 801bfba:	2300      	movs	r3, #0
 801bfbc:	e00c      	b.n	801bfd8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	3330      	adds	r3, #48	@ 0x30
 801bfc2:	3352      	adds	r3, #82	@ 0x52
 801bfc4:	4618      	mov	r0, r3
 801bfc6:	f7fe fd4e 	bl	801aa66 <ld_dword>
 801bfca:	4603      	mov	r3, r0
 801bfcc:	4a05      	ldr	r2, [pc, #20]	@ (801bfe4 <check_fs+0xa8>)
 801bfce:	4293      	cmp	r3, r2
 801bfd0:	d101      	bne.n	801bfd6 <check_fs+0x9a>
 801bfd2:	2300      	movs	r3, #0
 801bfd4:	e000      	b.n	801bfd8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801bfd6:	2302      	movs	r3, #2
}
 801bfd8:	4618      	mov	r0, r3
 801bfda:	3708      	adds	r7, #8
 801bfdc:	46bd      	mov	sp, r7
 801bfde:	bd80      	pop	{r7, pc}
 801bfe0:	00544146 	.word	0x00544146
 801bfe4:	33544146 	.word	0x33544146

0801bfe8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801bfe8:	b580      	push	{r7, lr}
 801bfea:	b096      	sub	sp, #88	@ 0x58
 801bfec:	af00      	add	r7, sp, #0
 801bfee:	60f8      	str	r0, [r7, #12]
 801bff0:	60b9      	str	r1, [r7, #8]
 801bff2:	4613      	mov	r3, r2
 801bff4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801bff6:	68bb      	ldr	r3, [r7, #8]
 801bff8:	2200      	movs	r2, #0
 801bffa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801bffc:	68f8      	ldr	r0, [r7, #12]
 801bffe:	f7ff ff58 	bl	801beb2 <get_ldnumber>
 801c002:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801c004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c006:	2b00      	cmp	r3, #0
 801c008:	da01      	bge.n	801c00e <find_volume+0x26>
 801c00a:	230b      	movs	r3, #11
 801c00c:	e22d      	b.n	801c46a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801c00e:	4aa1      	ldr	r2, [pc, #644]	@ (801c294 <find_volume+0x2ac>)
 801c010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c016:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801c018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d101      	bne.n	801c022 <find_volume+0x3a>
 801c01e:	230c      	movs	r3, #12
 801c020:	e223      	b.n	801c46a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801c022:	68bb      	ldr	r3, [r7, #8]
 801c024:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c026:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801c028:	79fb      	ldrb	r3, [r7, #7]
 801c02a:	f023 0301 	bic.w	r3, r3, #1
 801c02e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801c030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c032:	781b      	ldrb	r3, [r3, #0]
 801c034:	2b00      	cmp	r3, #0
 801c036:	d01a      	beq.n	801c06e <find_volume+0x86>
		stat = disk_status(fs->drv);
 801c038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c03a:	785b      	ldrb	r3, [r3, #1]
 801c03c:	4618      	mov	r0, r3
 801c03e:	f7fe fc59 	bl	801a8f4 <disk_status>
 801c042:	4603      	mov	r3, r0
 801c044:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801c048:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c04c:	f003 0301 	and.w	r3, r3, #1
 801c050:	2b00      	cmp	r3, #0
 801c052:	d10c      	bne.n	801c06e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801c054:	79fb      	ldrb	r3, [r7, #7]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d007      	beq.n	801c06a <find_volume+0x82>
 801c05a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c05e:	f003 0304 	and.w	r3, r3, #4
 801c062:	2b00      	cmp	r3, #0
 801c064:	d001      	beq.n	801c06a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801c066:	230a      	movs	r3, #10
 801c068:	e1ff      	b.n	801c46a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801c06a:	2300      	movs	r3, #0
 801c06c:	e1fd      	b.n	801c46a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801c06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c070:	2200      	movs	r2, #0
 801c072:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801c074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c076:	b2da      	uxtb	r2, r3
 801c078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c07a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801c07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c07e:	785b      	ldrb	r3, [r3, #1]
 801c080:	4618      	mov	r0, r3
 801c082:	f7fe fc51 	bl	801a928 <disk_initialize>
 801c086:	4603      	mov	r3, r0
 801c088:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801c08c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c090:	f003 0301 	and.w	r3, r3, #1
 801c094:	2b00      	cmp	r3, #0
 801c096:	d001      	beq.n	801c09c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801c098:	2303      	movs	r3, #3
 801c09a:	e1e6      	b.n	801c46a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801c09c:	79fb      	ldrb	r3, [r7, #7]
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	d007      	beq.n	801c0b2 <find_volume+0xca>
 801c0a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c0a6:	f003 0304 	and.w	r3, r3, #4
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d001      	beq.n	801c0b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801c0ae:	230a      	movs	r3, #10
 801c0b0:	e1db      	b.n	801c46a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801c0b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c0b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c0ba:	f7ff ff3f 	bl	801bf3c <check_fs>
 801c0be:	4603      	mov	r3, r0
 801c0c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801c0c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c0c8:	2b02      	cmp	r3, #2
 801c0ca:	d149      	bne.n	801c160 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c0cc:	2300      	movs	r3, #0
 801c0ce:	643b      	str	r3, [r7, #64]	@ 0x40
 801c0d0:	e01e      	b.n	801c110 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801c0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c0d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c0d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c0da:	011b      	lsls	r3, r3, #4
 801c0dc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801c0e0:	4413      	add	r3, r2
 801c0e2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801c0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0e6:	3304      	adds	r3, #4
 801c0e8:	781b      	ldrb	r3, [r3, #0]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d006      	beq.n	801c0fc <find_volume+0x114>
 801c0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0f0:	3308      	adds	r3, #8
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	f7fe fcb7 	bl	801aa66 <ld_dword>
 801c0f8:	4602      	mov	r2, r0
 801c0fa:	e000      	b.n	801c0fe <find_volume+0x116>
 801c0fc:	2200      	movs	r2, #0
 801c0fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c100:	009b      	lsls	r3, r3, #2
 801c102:	3358      	adds	r3, #88	@ 0x58
 801c104:	443b      	add	r3, r7
 801c106:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c10a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c10c:	3301      	adds	r3, #1
 801c10e:	643b      	str	r3, [r7, #64]	@ 0x40
 801c110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c112:	2b03      	cmp	r3, #3
 801c114:	d9dd      	bls.n	801c0d2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801c116:	2300      	movs	r3, #0
 801c118:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801c11a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d002      	beq.n	801c126 <find_volume+0x13e>
 801c120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c122:	3b01      	subs	r3, #1
 801c124:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801c126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c128:	009b      	lsls	r3, r3, #2
 801c12a:	3358      	adds	r3, #88	@ 0x58
 801c12c:	443b      	add	r3, r7
 801c12e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801c132:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801c134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c136:	2b00      	cmp	r3, #0
 801c138:	d005      	beq.n	801c146 <find_volume+0x15e>
 801c13a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c13c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c13e:	f7ff fefd 	bl	801bf3c <check_fs>
 801c142:	4603      	mov	r3, r0
 801c144:	e000      	b.n	801c148 <find_volume+0x160>
 801c146:	2303      	movs	r3, #3
 801c148:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801c14c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c150:	2b01      	cmp	r3, #1
 801c152:	d905      	bls.n	801c160 <find_volume+0x178>
 801c154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c156:	3301      	adds	r3, #1
 801c158:	643b      	str	r3, [r7, #64]	@ 0x40
 801c15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c15c:	2b03      	cmp	r3, #3
 801c15e:	d9e2      	bls.n	801c126 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801c160:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c164:	2b04      	cmp	r3, #4
 801c166:	d101      	bne.n	801c16c <find_volume+0x184>
 801c168:	2301      	movs	r3, #1
 801c16a:	e17e      	b.n	801c46a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801c16c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c170:	2b01      	cmp	r3, #1
 801c172:	d901      	bls.n	801c178 <find_volume+0x190>
 801c174:	230d      	movs	r3, #13
 801c176:	e178      	b.n	801c46a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801c178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c17a:	3330      	adds	r3, #48	@ 0x30
 801c17c:	330b      	adds	r3, #11
 801c17e:	4618      	mov	r0, r3
 801c180:	f7fe fc58 	bl	801aa34 <ld_word>
 801c184:	4603      	mov	r3, r0
 801c186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c18a:	d001      	beq.n	801c190 <find_volume+0x1a8>
 801c18c:	230d      	movs	r3, #13
 801c18e:	e16c      	b.n	801c46a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801c190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c192:	3330      	adds	r3, #48	@ 0x30
 801c194:	3316      	adds	r3, #22
 801c196:	4618      	mov	r0, r3
 801c198:	f7fe fc4c 	bl	801aa34 <ld_word>
 801c19c:	4603      	mov	r3, r0
 801c19e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801c1a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d106      	bne.n	801c1b4 <find_volume+0x1cc>
 801c1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1a8:	3330      	adds	r3, #48	@ 0x30
 801c1aa:	3324      	adds	r3, #36	@ 0x24
 801c1ac:	4618      	mov	r0, r3
 801c1ae:	f7fe fc5a 	bl	801aa66 <ld_dword>
 801c1b2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801c1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c1b8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801c1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1bc:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 801c1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801c1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1c6:	789b      	ldrb	r3, [r3, #2]
 801c1c8:	2b01      	cmp	r3, #1
 801c1ca:	d005      	beq.n	801c1d8 <find_volume+0x1f0>
 801c1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1ce:	789b      	ldrb	r3, [r3, #2]
 801c1d0:	2b02      	cmp	r3, #2
 801c1d2:	d001      	beq.n	801c1d8 <find_volume+0x1f0>
 801c1d4:	230d      	movs	r3, #13
 801c1d6:	e148      	b.n	801c46a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801c1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1da:	789b      	ldrb	r3, [r3, #2]
 801c1dc:	461a      	mov	r2, r3
 801c1de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c1e0:	fb02 f303 	mul.w	r3, r2, r3
 801c1e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801c1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801c1ec:	461a      	mov	r2, r3
 801c1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801c1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1f4:	895b      	ldrh	r3, [r3, #10]
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d008      	beq.n	801c20c <find_volume+0x224>
 801c1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c1fc:	895b      	ldrh	r3, [r3, #10]
 801c1fe:	461a      	mov	r2, r3
 801c200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c202:	895b      	ldrh	r3, [r3, #10]
 801c204:	3b01      	subs	r3, #1
 801c206:	4013      	ands	r3, r2
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d001      	beq.n	801c210 <find_volume+0x228>
 801c20c:	230d      	movs	r3, #13
 801c20e:	e12c      	b.n	801c46a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801c210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c212:	3330      	adds	r3, #48	@ 0x30
 801c214:	3311      	adds	r3, #17
 801c216:	4618      	mov	r0, r3
 801c218:	f7fe fc0c 	bl	801aa34 <ld_word>
 801c21c:	4603      	mov	r3, r0
 801c21e:	461a      	mov	r2, r3
 801c220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c222:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801c224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c226:	891b      	ldrh	r3, [r3, #8]
 801c228:	f003 030f 	and.w	r3, r3, #15
 801c22c:	b29b      	uxth	r3, r3
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d001      	beq.n	801c236 <find_volume+0x24e>
 801c232:	230d      	movs	r3, #13
 801c234:	e119      	b.n	801c46a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801c236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c238:	3330      	adds	r3, #48	@ 0x30
 801c23a:	3313      	adds	r3, #19
 801c23c:	4618      	mov	r0, r3
 801c23e:	f7fe fbf9 	bl	801aa34 <ld_word>
 801c242:	4603      	mov	r3, r0
 801c244:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801c246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d106      	bne.n	801c25a <find_volume+0x272>
 801c24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c24e:	3330      	adds	r3, #48	@ 0x30
 801c250:	3320      	adds	r3, #32
 801c252:	4618      	mov	r0, r3
 801c254:	f7fe fc07 	bl	801aa66 <ld_dword>
 801c258:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801c25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c25c:	3330      	adds	r3, #48	@ 0x30
 801c25e:	330e      	adds	r3, #14
 801c260:	4618      	mov	r0, r3
 801c262:	f7fe fbe7 	bl	801aa34 <ld_word>
 801c266:	4603      	mov	r3, r0
 801c268:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801c26a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d101      	bne.n	801c274 <find_volume+0x28c>
 801c270:	230d      	movs	r3, #13
 801c272:	e0fa      	b.n	801c46a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801c274:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c278:	4413      	add	r3, r2
 801c27a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c27c:	8912      	ldrh	r2, [r2, #8]
 801c27e:	0912      	lsrs	r2, r2, #4
 801c280:	b292      	uxth	r2, r2
 801c282:	4413      	add	r3, r2
 801c284:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801c286:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c28a:	429a      	cmp	r2, r3
 801c28c:	d204      	bcs.n	801c298 <find_volume+0x2b0>
 801c28e:	230d      	movs	r3, #13
 801c290:	e0eb      	b.n	801c46a <find_volume+0x482>
 801c292:	bf00      	nop
 801c294:	240089a8 	.word	0x240089a8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801c298:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c29c:	1ad3      	subs	r3, r2, r3
 801c29e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c2a0:	8952      	ldrh	r2, [r2, #10]
 801c2a2:	fbb3 f3f2 	udiv	r3, r3, r2
 801c2a6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801c2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d101      	bne.n	801c2b2 <find_volume+0x2ca>
 801c2ae:	230d      	movs	r3, #13
 801c2b0:	e0db      	b.n	801c46a <find_volume+0x482>
		fmt = FS_FAT32;
 801c2b2:	2303      	movs	r3, #3
 801c2b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801c2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2ba:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801c2be:	4293      	cmp	r3, r2
 801c2c0:	d802      	bhi.n	801c2c8 <find_volume+0x2e0>
 801c2c2:	2302      	movs	r3, #2
 801c2c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801c2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2ca:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801c2ce:	4293      	cmp	r3, r2
 801c2d0:	d802      	bhi.n	801c2d8 <find_volume+0x2f0>
 801c2d2:	2301      	movs	r3, #1
 801c2d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801c2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2da:	1c9a      	adds	r2, r3, #2
 801c2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c2de:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801c2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c2e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c2e4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801c2e6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c2e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c2ea:	441a      	add	r2, r3
 801c2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c2ee:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801c2f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801c2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2f4:	441a      	add	r2, r3
 801c2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c2f8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801c2fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c2fe:	2b03      	cmp	r3, #3
 801c300:	d11e      	bne.n	801c340 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801c302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c304:	3330      	adds	r3, #48	@ 0x30
 801c306:	332a      	adds	r3, #42	@ 0x2a
 801c308:	4618      	mov	r0, r3
 801c30a:	f7fe fb93 	bl	801aa34 <ld_word>
 801c30e:	4603      	mov	r3, r0
 801c310:	2b00      	cmp	r3, #0
 801c312:	d001      	beq.n	801c318 <find_volume+0x330>
 801c314:	230d      	movs	r3, #13
 801c316:	e0a8      	b.n	801c46a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801c318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c31a:	891b      	ldrh	r3, [r3, #8]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d001      	beq.n	801c324 <find_volume+0x33c>
 801c320:	230d      	movs	r3, #13
 801c322:	e0a2      	b.n	801c46a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801c324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c326:	3330      	adds	r3, #48	@ 0x30
 801c328:	332c      	adds	r3, #44	@ 0x2c
 801c32a:	4618      	mov	r0, r3
 801c32c:	f7fe fb9b 	bl	801aa66 <ld_dword>
 801c330:	4602      	mov	r2, r0
 801c332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c334:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801c336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c338:	695b      	ldr	r3, [r3, #20]
 801c33a:	009b      	lsls	r3, r3, #2
 801c33c:	647b      	str	r3, [r7, #68]	@ 0x44
 801c33e:	e01f      	b.n	801c380 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801c340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c342:	891b      	ldrh	r3, [r3, #8]
 801c344:	2b00      	cmp	r3, #0
 801c346:	d101      	bne.n	801c34c <find_volume+0x364>
 801c348:	230d      	movs	r3, #13
 801c34a:	e08e      	b.n	801c46a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801c34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c34e:	6a1a      	ldr	r2, [r3, #32]
 801c350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c352:	441a      	add	r2, r3
 801c354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c356:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801c358:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c35c:	2b02      	cmp	r3, #2
 801c35e:	d103      	bne.n	801c368 <find_volume+0x380>
 801c360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c362:	695b      	ldr	r3, [r3, #20]
 801c364:	005b      	lsls	r3, r3, #1
 801c366:	e00a      	b.n	801c37e <find_volume+0x396>
 801c368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c36a:	695a      	ldr	r2, [r3, #20]
 801c36c:	4613      	mov	r3, r2
 801c36e:	005b      	lsls	r3, r3, #1
 801c370:	4413      	add	r3, r2
 801c372:	085a      	lsrs	r2, r3, #1
 801c374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c376:	695b      	ldr	r3, [r3, #20]
 801c378:	f003 0301 	and.w	r3, r3, #1
 801c37c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801c37e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801c380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c382:	699a      	ldr	r2, [r3, #24]
 801c384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c386:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801c38a:	0a5b      	lsrs	r3, r3, #9
 801c38c:	429a      	cmp	r2, r3
 801c38e:	d201      	bcs.n	801c394 <find_volume+0x3ac>
 801c390:	230d      	movs	r3, #13
 801c392:	e06a      	b.n	801c46a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801c394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c396:	f04f 32ff 	mov.w	r2, #4294967295
 801c39a:	611a      	str	r2, [r3, #16]
 801c39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c39e:	691a      	ldr	r2, [r3, #16]
 801c3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c3a2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801c3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c3a6:	2280      	movs	r2, #128	@ 0x80
 801c3a8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801c3aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c3ae:	2b03      	cmp	r3, #3
 801c3b0:	d149      	bne.n	801c446 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801c3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c3b4:	3330      	adds	r3, #48	@ 0x30
 801c3b6:	3330      	adds	r3, #48	@ 0x30
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	f7fe fb3b 	bl	801aa34 <ld_word>
 801c3be:	4603      	mov	r3, r0
 801c3c0:	2b01      	cmp	r3, #1
 801c3c2:	d140      	bne.n	801c446 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801c3c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c3c6:	3301      	adds	r3, #1
 801c3c8:	4619      	mov	r1, r3
 801c3ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c3cc:	f7fe fde4 	bl	801af98 <move_window>
 801c3d0:	4603      	mov	r3, r0
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d137      	bne.n	801c446 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801c3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c3d8:	2200      	movs	r2, #0
 801c3da:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801c3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c3de:	3330      	adds	r3, #48	@ 0x30
 801c3e0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801c3e4:	4618      	mov	r0, r3
 801c3e6:	f7fe fb25 	bl	801aa34 <ld_word>
 801c3ea:	4603      	mov	r3, r0
 801c3ec:	461a      	mov	r2, r3
 801c3ee:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801c3f2:	429a      	cmp	r2, r3
 801c3f4:	d127      	bne.n	801c446 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801c3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c3f8:	3330      	adds	r3, #48	@ 0x30
 801c3fa:	4618      	mov	r0, r3
 801c3fc:	f7fe fb33 	bl	801aa66 <ld_dword>
 801c400:	4603      	mov	r3, r0
 801c402:	4a1c      	ldr	r2, [pc, #112]	@ (801c474 <find_volume+0x48c>)
 801c404:	4293      	cmp	r3, r2
 801c406:	d11e      	bne.n	801c446 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801c408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c40a:	3330      	adds	r3, #48	@ 0x30
 801c40c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801c410:	4618      	mov	r0, r3
 801c412:	f7fe fb28 	bl	801aa66 <ld_dword>
 801c416:	4603      	mov	r3, r0
 801c418:	4a17      	ldr	r2, [pc, #92]	@ (801c478 <find_volume+0x490>)
 801c41a:	4293      	cmp	r3, r2
 801c41c:	d113      	bne.n	801c446 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801c41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c420:	3330      	adds	r3, #48	@ 0x30
 801c422:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801c426:	4618      	mov	r0, r3
 801c428:	f7fe fb1d 	bl	801aa66 <ld_dword>
 801c42c:	4602      	mov	r2, r0
 801c42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c430:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801c432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c434:	3330      	adds	r3, #48	@ 0x30
 801c436:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801c43a:	4618      	mov	r0, r3
 801c43c:	f7fe fb13 	bl	801aa66 <ld_dword>
 801c440:	4602      	mov	r2, r0
 801c442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c444:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801c446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c448:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801c44c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801c44e:	4b0b      	ldr	r3, [pc, #44]	@ (801c47c <find_volume+0x494>)
 801c450:	881b      	ldrh	r3, [r3, #0]
 801c452:	3301      	adds	r3, #1
 801c454:	b29a      	uxth	r2, r3
 801c456:	4b09      	ldr	r3, [pc, #36]	@ (801c47c <find_volume+0x494>)
 801c458:	801a      	strh	r2, [r3, #0]
 801c45a:	4b08      	ldr	r3, [pc, #32]	@ (801c47c <find_volume+0x494>)
 801c45c:	881a      	ldrh	r2, [r3, #0]
 801c45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c460:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801c462:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c464:	f7fe fd30 	bl	801aec8 <clear_lock>
#endif
	return FR_OK;
 801c468:	2300      	movs	r3, #0
}
 801c46a:	4618      	mov	r0, r3
 801c46c:	3758      	adds	r7, #88	@ 0x58
 801c46e:	46bd      	mov	sp, r7
 801c470:	bd80      	pop	{r7, pc}
 801c472:	bf00      	nop
 801c474:	41615252 	.word	0x41615252
 801c478:	61417272 	.word	0x61417272
 801c47c:	240089ac 	.word	0x240089ac

0801c480 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801c480:	b580      	push	{r7, lr}
 801c482:	b084      	sub	sp, #16
 801c484:	af00      	add	r7, sp, #0
 801c486:	6078      	str	r0, [r7, #4]
 801c488:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801c48a:	2309      	movs	r3, #9
 801c48c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	2b00      	cmp	r3, #0
 801c492:	d01c      	beq.n	801c4ce <validate+0x4e>
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d018      	beq.n	801c4ce <validate+0x4e>
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	781b      	ldrb	r3, [r3, #0]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d013      	beq.n	801c4ce <validate+0x4e>
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	889a      	ldrh	r2, [r3, #4]
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	681b      	ldr	r3, [r3, #0]
 801c4ae:	88db      	ldrh	r3, [r3, #6]
 801c4b0:	429a      	cmp	r2, r3
 801c4b2:	d10c      	bne.n	801c4ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	785b      	ldrb	r3, [r3, #1]
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	f7fe fa1a 	bl	801a8f4 <disk_status>
 801c4c0:	4603      	mov	r3, r0
 801c4c2:	f003 0301 	and.w	r3, r3, #1
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d101      	bne.n	801c4ce <validate+0x4e>
			res = FR_OK;
 801c4ca:	2300      	movs	r3, #0
 801c4cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801c4ce:	7bfb      	ldrb	r3, [r7, #15]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d102      	bne.n	801c4da <validate+0x5a>
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	e000      	b.n	801c4dc <validate+0x5c>
 801c4da:	2300      	movs	r3, #0
 801c4dc:	683a      	ldr	r2, [r7, #0]
 801c4de:	6013      	str	r3, [r2, #0]
	return res;
 801c4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 801c4e2:	4618      	mov	r0, r3
 801c4e4:	3710      	adds	r7, #16
 801c4e6:	46bd      	mov	sp, r7
 801c4e8:	bd80      	pop	{r7, pc}
	...

0801c4ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801c4ec:	b580      	push	{r7, lr}
 801c4ee:	b088      	sub	sp, #32
 801c4f0:	af00      	add	r7, sp, #0
 801c4f2:	60f8      	str	r0, [r7, #12]
 801c4f4:	60b9      	str	r1, [r7, #8]
 801c4f6:	4613      	mov	r3, r2
 801c4f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801c4fa:	68bb      	ldr	r3, [r7, #8]
 801c4fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801c4fe:	f107 0310 	add.w	r3, r7, #16
 801c502:	4618      	mov	r0, r3
 801c504:	f7ff fcd5 	bl	801beb2 <get_ldnumber>
 801c508:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801c50a:	69fb      	ldr	r3, [r7, #28]
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	da01      	bge.n	801c514 <f_mount+0x28>
 801c510:	230b      	movs	r3, #11
 801c512:	e02b      	b.n	801c56c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801c514:	4a17      	ldr	r2, [pc, #92]	@ (801c574 <f_mount+0x88>)
 801c516:	69fb      	ldr	r3, [r7, #28]
 801c518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c51c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801c51e:	69bb      	ldr	r3, [r7, #24]
 801c520:	2b00      	cmp	r3, #0
 801c522:	d005      	beq.n	801c530 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801c524:	69b8      	ldr	r0, [r7, #24]
 801c526:	f7fe fccf 	bl	801aec8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801c52a:	69bb      	ldr	r3, [r7, #24]
 801c52c:	2200      	movs	r2, #0
 801c52e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d002      	beq.n	801c53c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	2200      	movs	r2, #0
 801c53a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801c53c:	68fa      	ldr	r2, [r7, #12]
 801c53e:	490d      	ldr	r1, [pc, #52]	@ (801c574 <f_mount+0x88>)
 801c540:	69fb      	ldr	r3, [r7, #28]
 801c542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801c546:	68fb      	ldr	r3, [r7, #12]
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d002      	beq.n	801c552 <f_mount+0x66>
 801c54c:	79fb      	ldrb	r3, [r7, #7]
 801c54e:	2b01      	cmp	r3, #1
 801c550:	d001      	beq.n	801c556 <f_mount+0x6a>
 801c552:	2300      	movs	r3, #0
 801c554:	e00a      	b.n	801c56c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801c556:	f107 010c 	add.w	r1, r7, #12
 801c55a:	f107 0308 	add.w	r3, r7, #8
 801c55e:	2200      	movs	r2, #0
 801c560:	4618      	mov	r0, r3
 801c562:	f7ff fd41 	bl	801bfe8 <find_volume>
 801c566:	4603      	mov	r3, r0
 801c568:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801c56a:	7dfb      	ldrb	r3, [r7, #23]
}
 801c56c:	4618      	mov	r0, r3
 801c56e:	3720      	adds	r7, #32
 801c570:	46bd      	mov	sp, r7
 801c572:	bd80      	pop	{r7, pc}
 801c574:	240089a8 	.word	0x240089a8

0801c578 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801c578:	b580      	push	{r7, lr}
 801c57a:	b098      	sub	sp, #96	@ 0x60
 801c57c:	af00      	add	r7, sp, #0
 801c57e:	60f8      	str	r0, [r7, #12]
 801c580:	60b9      	str	r1, [r7, #8]
 801c582:	4613      	mov	r3, r2
 801c584:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801c586:	68fb      	ldr	r3, [r7, #12]
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d101      	bne.n	801c590 <f_open+0x18>
 801c58c:	2309      	movs	r3, #9
 801c58e:	e1a9      	b.n	801c8e4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801c590:	79fb      	ldrb	r3, [r7, #7]
 801c592:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c596:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801c598:	79fa      	ldrb	r2, [r7, #7]
 801c59a:	f107 0110 	add.w	r1, r7, #16
 801c59e:	f107 0308 	add.w	r3, r7, #8
 801c5a2:	4618      	mov	r0, r3
 801c5a4:	f7ff fd20 	bl	801bfe8 <find_volume>
 801c5a8:	4603      	mov	r3, r0
 801c5aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801c5ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	f040 818d 	bne.w	801c8d2 <f_open+0x35a>
		dj.obj.fs = fs;
 801c5b8:	693b      	ldr	r3, [r7, #16]
 801c5ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801c5bc:	68ba      	ldr	r2, [r7, #8]
 801c5be:	f107 0314 	add.w	r3, r7, #20
 801c5c2:	4611      	mov	r1, r2
 801c5c4:	4618      	mov	r0, r3
 801c5c6:	f7ff fc03 	bl	801bdd0 <follow_path>
 801c5ca:	4603      	mov	r3, r0
 801c5cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801c5d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d118      	bne.n	801c60a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801c5d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801c5dc:	b25b      	sxtb	r3, r3
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	da03      	bge.n	801c5ea <f_open+0x72>
				res = FR_INVALID_NAME;
 801c5e2:	2306      	movs	r3, #6
 801c5e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c5e8:	e00f      	b.n	801c60a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c5ea:	79fb      	ldrb	r3, [r7, #7]
 801c5ec:	2b01      	cmp	r3, #1
 801c5ee:	bf8c      	ite	hi
 801c5f0:	2301      	movhi	r3, #1
 801c5f2:	2300      	movls	r3, #0
 801c5f4:	b2db      	uxtb	r3, r3
 801c5f6:	461a      	mov	r2, r3
 801c5f8:	f107 0314 	add.w	r3, r7, #20
 801c5fc:	4611      	mov	r1, r2
 801c5fe:	4618      	mov	r0, r3
 801c600:	f7fe fb1a 	bl	801ac38 <chk_lock>
 801c604:	4603      	mov	r3, r0
 801c606:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801c60a:	79fb      	ldrb	r3, [r7, #7]
 801c60c:	f003 031c 	and.w	r3, r3, #28
 801c610:	2b00      	cmp	r3, #0
 801c612:	d07f      	beq.n	801c714 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801c614:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c618:	2b00      	cmp	r3, #0
 801c61a:	d017      	beq.n	801c64c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801c61c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c620:	2b04      	cmp	r3, #4
 801c622:	d10e      	bne.n	801c642 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801c624:	f7fe fb64 	bl	801acf0 <enq_lock>
 801c628:	4603      	mov	r3, r0
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	d006      	beq.n	801c63c <f_open+0xc4>
 801c62e:	f107 0314 	add.w	r3, r7, #20
 801c632:	4618      	mov	r0, r3
 801c634:	f7ff faa5 	bl	801bb82 <dir_register>
 801c638:	4603      	mov	r3, r0
 801c63a:	e000      	b.n	801c63e <f_open+0xc6>
 801c63c:	2312      	movs	r3, #18
 801c63e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801c642:	79fb      	ldrb	r3, [r7, #7]
 801c644:	f043 0308 	orr.w	r3, r3, #8
 801c648:	71fb      	strb	r3, [r7, #7]
 801c64a:	e010      	b.n	801c66e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801c64c:	7ebb      	ldrb	r3, [r7, #26]
 801c64e:	f003 0311 	and.w	r3, r3, #17
 801c652:	2b00      	cmp	r3, #0
 801c654:	d003      	beq.n	801c65e <f_open+0xe6>
					res = FR_DENIED;
 801c656:	2307      	movs	r3, #7
 801c658:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c65c:	e007      	b.n	801c66e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801c65e:	79fb      	ldrb	r3, [r7, #7]
 801c660:	f003 0304 	and.w	r3, r3, #4
 801c664:	2b00      	cmp	r3, #0
 801c666:	d002      	beq.n	801c66e <f_open+0xf6>
 801c668:	2308      	movs	r3, #8
 801c66a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801c66e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c672:	2b00      	cmp	r3, #0
 801c674:	d168      	bne.n	801c748 <f_open+0x1d0>
 801c676:	79fb      	ldrb	r3, [r7, #7]
 801c678:	f003 0308 	and.w	r3, r3, #8
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d063      	beq.n	801c748 <f_open+0x1d0>
				dw = GET_FATTIME();
 801c680:	f7f4 fb5e 	bl	8010d40 <get_fattime>
 801c684:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801c686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c688:	330e      	adds	r3, #14
 801c68a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c68c:	4618      	mov	r0, r3
 801c68e:	f7fe fa28 	bl	801aae2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801c692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c694:	3316      	adds	r3, #22
 801c696:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c698:	4618      	mov	r0, r3
 801c69a:	f7fe fa22 	bl	801aae2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801c69e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c6a0:	330b      	adds	r3, #11
 801c6a2:	2220      	movs	r2, #32
 801c6a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801c6a6:	693b      	ldr	r3, [r7, #16]
 801c6a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c6aa:	4611      	mov	r1, r2
 801c6ac:	4618      	mov	r0, r3
 801c6ae:	f7ff f977 	bl	801b9a0 <ld_clust>
 801c6b2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801c6b4:	693b      	ldr	r3, [r7, #16]
 801c6b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c6b8:	2200      	movs	r2, #0
 801c6ba:	4618      	mov	r0, r3
 801c6bc:	f7ff f98f 	bl	801b9de <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801c6c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c6c2:	331c      	adds	r3, #28
 801c6c4:	2100      	movs	r1, #0
 801c6c6:	4618      	mov	r0, r3
 801c6c8:	f7fe fa0b 	bl	801aae2 <st_dword>
					fs->wflag = 1;
 801c6cc:	693b      	ldr	r3, [r7, #16]
 801c6ce:	2201      	movs	r2, #1
 801c6d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801c6d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	d037      	beq.n	801c748 <f_open+0x1d0>
						dw = fs->winsect;
 801c6d8:	693b      	ldr	r3, [r7, #16]
 801c6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c6dc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801c6de:	f107 0314 	add.w	r3, r7, #20
 801c6e2:	2200      	movs	r2, #0
 801c6e4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801c6e6:	4618      	mov	r0, r3
 801c6e8:	f7fe fea2 	bl	801b430 <remove_chain>
 801c6ec:	4603      	mov	r3, r0
 801c6ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801c6f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d126      	bne.n	801c748 <f_open+0x1d0>
							res = move_window(fs, dw);
 801c6fa:	693b      	ldr	r3, [r7, #16]
 801c6fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c6fe:	4618      	mov	r0, r3
 801c700:	f7fe fc4a 	bl	801af98 <move_window>
 801c704:	4603      	mov	r3, r0
 801c706:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801c70a:	693b      	ldr	r3, [r7, #16]
 801c70c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c70e:	3a01      	subs	r2, #1
 801c710:	60da      	str	r2, [r3, #12]
 801c712:	e019      	b.n	801c748 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801c714:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d115      	bne.n	801c748 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801c71c:	7ebb      	ldrb	r3, [r7, #26]
 801c71e:	f003 0310 	and.w	r3, r3, #16
 801c722:	2b00      	cmp	r3, #0
 801c724:	d003      	beq.n	801c72e <f_open+0x1b6>
					res = FR_NO_FILE;
 801c726:	2304      	movs	r3, #4
 801c728:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c72c:	e00c      	b.n	801c748 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801c72e:	79fb      	ldrb	r3, [r7, #7]
 801c730:	f003 0302 	and.w	r3, r3, #2
 801c734:	2b00      	cmp	r3, #0
 801c736:	d007      	beq.n	801c748 <f_open+0x1d0>
 801c738:	7ebb      	ldrb	r3, [r7, #26]
 801c73a:	f003 0301 	and.w	r3, r3, #1
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d002      	beq.n	801c748 <f_open+0x1d0>
						res = FR_DENIED;
 801c742:	2307      	movs	r3, #7
 801c744:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801c748:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d126      	bne.n	801c79e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801c750:	79fb      	ldrb	r3, [r7, #7]
 801c752:	f003 0308 	and.w	r3, r3, #8
 801c756:	2b00      	cmp	r3, #0
 801c758:	d003      	beq.n	801c762 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801c75a:	79fb      	ldrb	r3, [r7, #7]
 801c75c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c760:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801c762:	693b      	ldr	r3, [r7, #16]
 801c764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801c76a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c770:	79fb      	ldrb	r3, [r7, #7]
 801c772:	2b01      	cmp	r3, #1
 801c774:	bf8c      	ite	hi
 801c776:	2301      	movhi	r3, #1
 801c778:	2300      	movls	r3, #0
 801c77a:	b2db      	uxtb	r3, r3
 801c77c:	461a      	mov	r2, r3
 801c77e:	f107 0314 	add.w	r3, r7, #20
 801c782:	4611      	mov	r1, r2
 801c784:	4618      	mov	r0, r3
 801c786:	f7fe fad5 	bl	801ad34 <inc_lock>
 801c78a:	4602      	mov	r2, r0
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	691b      	ldr	r3, [r3, #16]
 801c794:	2b00      	cmp	r3, #0
 801c796:	d102      	bne.n	801c79e <f_open+0x226>
 801c798:	2302      	movs	r3, #2
 801c79a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801c79e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	f040 8095 	bne.w	801c8d2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801c7a8:	693b      	ldr	r3, [r7, #16]
 801c7aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c7ac:	4611      	mov	r1, r2
 801c7ae:	4618      	mov	r0, r3
 801c7b0:	f7ff f8f6 	bl	801b9a0 <ld_clust>
 801c7b4:	4602      	mov	r2, r0
 801c7b6:	68fb      	ldr	r3, [r7, #12]
 801c7b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801c7ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c7bc:	331c      	adds	r3, #28
 801c7be:	4618      	mov	r0, r3
 801c7c0:	f7fe f951 	bl	801aa66 <ld_dword>
 801c7c4:	4602      	mov	r2, r0
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	2200      	movs	r2, #0
 801c7ce:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801c7d0:	693a      	ldr	r2, [r7, #16]
 801c7d2:	68fb      	ldr	r3, [r7, #12]
 801c7d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801c7d6:	693b      	ldr	r3, [r7, #16]
 801c7d8:	88da      	ldrh	r2, [r3, #6]
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	79fa      	ldrb	r2, [r7, #7]
 801c7e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	2200      	movs	r2, #0
 801c7e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	2200      	movs	r2, #0
 801c7ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	2200      	movs	r2, #0
 801c7f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801c7f6:	68fb      	ldr	r3, [r7, #12]
 801c7f8:	3330      	adds	r3, #48	@ 0x30
 801c7fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c7fe:	2100      	movs	r1, #0
 801c800:	4618      	mov	r0, r3
 801c802:	f7fe f9bb 	bl	801ab7c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801c806:	79fb      	ldrb	r3, [r7, #7]
 801c808:	f003 0320 	and.w	r3, r3, #32
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d060      	beq.n	801c8d2 <f_open+0x35a>
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	68db      	ldr	r3, [r3, #12]
 801c814:	2b00      	cmp	r3, #0
 801c816:	d05c      	beq.n	801c8d2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	68da      	ldr	r2, [r3, #12]
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801c820:	693b      	ldr	r3, [r7, #16]
 801c822:	895b      	ldrh	r3, [r3, #10]
 801c824:	025b      	lsls	r3, r3, #9
 801c826:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	689b      	ldr	r3, [r3, #8]
 801c82c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	68db      	ldr	r3, [r3, #12]
 801c832:	657b      	str	r3, [r7, #84]	@ 0x54
 801c834:	e016      	b.n	801c864 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801c83a:	4618      	mov	r0, r3
 801c83c:	f7fe fc67 	bl	801b10e <get_fat>
 801c840:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801c842:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c844:	2b01      	cmp	r3, #1
 801c846:	d802      	bhi.n	801c84e <f_open+0x2d6>
 801c848:	2302      	movs	r3, #2
 801c84a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801c84e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c850:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c854:	d102      	bne.n	801c85c <f_open+0x2e4>
 801c856:	2301      	movs	r3, #1
 801c858:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c85c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c85e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c860:	1ad3      	subs	r3, r2, r3
 801c862:	657b      	str	r3, [r7, #84]	@ 0x54
 801c864:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d103      	bne.n	801c874 <f_open+0x2fc>
 801c86c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c86e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c870:	429a      	cmp	r2, r3
 801c872:	d8e0      	bhi.n	801c836 <f_open+0x2be>
				}
				fp->clust = clst;
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801c878:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801c87a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d127      	bne.n	801c8d2 <f_open+0x35a>
 801c882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c888:	2b00      	cmp	r3, #0
 801c88a:	d022      	beq.n	801c8d2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801c88c:	693b      	ldr	r3, [r7, #16]
 801c88e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801c890:	4618      	mov	r0, r3
 801c892:	f7fe fc1d 	bl	801b0d0 <clust2sect>
 801c896:	6478      	str	r0, [r7, #68]	@ 0x44
 801c898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d103      	bne.n	801c8a6 <f_open+0x32e>
						res = FR_INT_ERR;
 801c89e:	2302      	movs	r3, #2
 801c8a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801c8a4:	e015      	b.n	801c8d2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801c8a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c8a8:	0a5a      	lsrs	r2, r3, #9
 801c8aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c8ac:	441a      	add	r2, r3
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801c8b2:	693b      	ldr	r3, [r7, #16]
 801c8b4:	7858      	ldrb	r0, [r3, #1]
 801c8b6:	68fb      	ldr	r3, [r7, #12]
 801c8b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c8bc:	68fb      	ldr	r3, [r7, #12]
 801c8be:	6a1a      	ldr	r2, [r3, #32]
 801c8c0:	2301      	movs	r3, #1
 801c8c2:	f7fe f859 	bl	801a978 <disk_read>
 801c8c6:	4603      	mov	r3, r0
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	d002      	beq.n	801c8d2 <f_open+0x35a>
 801c8cc:	2301      	movs	r3, #1
 801c8ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801c8d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d002      	beq.n	801c8e0 <f_open+0x368>
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	2200      	movs	r2, #0
 801c8de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801c8e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	3760      	adds	r7, #96	@ 0x60
 801c8e8:	46bd      	mov	sp, r7
 801c8ea:	bd80      	pop	{r7, pc}

0801c8ec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801c8ec:	b580      	push	{r7, lr}
 801c8ee:	b08c      	sub	sp, #48	@ 0x30
 801c8f0:	af00      	add	r7, sp, #0
 801c8f2:	60f8      	str	r0, [r7, #12]
 801c8f4:	60b9      	str	r1, [r7, #8]
 801c8f6:	607a      	str	r2, [r7, #4]
 801c8f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801c8fa:	68bb      	ldr	r3, [r7, #8]
 801c8fc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801c8fe:	683b      	ldr	r3, [r7, #0]
 801c900:	2200      	movs	r2, #0
 801c902:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	f107 0210 	add.w	r2, r7, #16
 801c90a:	4611      	mov	r1, r2
 801c90c:	4618      	mov	r0, r3
 801c90e:	f7ff fdb7 	bl	801c480 <validate>
 801c912:	4603      	mov	r3, r0
 801c914:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801c918:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d107      	bne.n	801c930 <f_write+0x44>
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	7d5b      	ldrb	r3, [r3, #21]
 801c924:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801c928:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d002      	beq.n	801c936 <f_write+0x4a>
 801c930:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c934:	e14b      	b.n	801cbce <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801c936:	68fb      	ldr	r3, [r7, #12]
 801c938:	7d1b      	ldrb	r3, [r3, #20]
 801c93a:	f003 0302 	and.w	r3, r3, #2
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d101      	bne.n	801c946 <f_write+0x5a>
 801c942:	2307      	movs	r3, #7
 801c944:	e143      	b.n	801cbce <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	699a      	ldr	r2, [r3, #24]
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	441a      	add	r2, r3
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	699b      	ldr	r3, [r3, #24]
 801c952:	429a      	cmp	r2, r3
 801c954:	f080 812d 	bcs.w	801cbb2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	699b      	ldr	r3, [r3, #24]
 801c95c:	43db      	mvns	r3, r3
 801c95e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801c960:	e127      	b.n	801cbb2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	699b      	ldr	r3, [r3, #24]
 801c966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	f040 80e3 	bne.w	801cb36 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801c970:	68fb      	ldr	r3, [r7, #12]
 801c972:	699b      	ldr	r3, [r3, #24]
 801c974:	0a5b      	lsrs	r3, r3, #9
 801c976:	693a      	ldr	r2, [r7, #16]
 801c978:	8952      	ldrh	r2, [r2, #10]
 801c97a:	3a01      	subs	r2, #1
 801c97c:	4013      	ands	r3, r2
 801c97e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801c980:	69bb      	ldr	r3, [r7, #24]
 801c982:	2b00      	cmp	r3, #0
 801c984:	d143      	bne.n	801ca0e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801c986:	68fb      	ldr	r3, [r7, #12]
 801c988:	699b      	ldr	r3, [r3, #24]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d10c      	bne.n	801c9a8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	689b      	ldr	r3, [r3, #8]
 801c992:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801c994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c996:	2b00      	cmp	r3, #0
 801c998:	d11a      	bne.n	801c9d0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	2100      	movs	r1, #0
 801c99e:	4618      	mov	r0, r3
 801c9a0:	f7fe fdab 	bl	801b4fa <create_chain>
 801c9a4:	62b8      	str	r0, [r7, #40]	@ 0x28
 801c9a6:	e013      	b.n	801c9d0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801c9a8:	68fb      	ldr	r3, [r7, #12]
 801c9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d007      	beq.n	801c9c0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	699b      	ldr	r3, [r3, #24]
 801c9b4:	4619      	mov	r1, r3
 801c9b6:	68f8      	ldr	r0, [r7, #12]
 801c9b8:	f7fe fe37 	bl	801b62a <clmt_clust>
 801c9bc:	62b8      	str	r0, [r7, #40]	@ 0x28
 801c9be:	e007      	b.n	801c9d0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801c9c0:	68fa      	ldr	r2, [r7, #12]
 801c9c2:	68fb      	ldr	r3, [r7, #12]
 801c9c4:	69db      	ldr	r3, [r3, #28]
 801c9c6:	4619      	mov	r1, r3
 801c9c8:	4610      	mov	r0, r2
 801c9ca:	f7fe fd96 	bl	801b4fa <create_chain>
 801c9ce:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801c9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	f000 80f2 	beq.w	801cbbc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801c9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9da:	2b01      	cmp	r3, #1
 801c9dc:	d104      	bne.n	801c9e8 <f_write+0xfc>
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	2202      	movs	r2, #2
 801c9e2:	755a      	strb	r2, [r3, #21]
 801c9e4:	2302      	movs	r3, #2
 801c9e6:	e0f2      	b.n	801cbce <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c9ee:	d104      	bne.n	801c9fa <f_write+0x10e>
 801c9f0:	68fb      	ldr	r3, [r7, #12]
 801c9f2:	2201      	movs	r2, #1
 801c9f4:	755a      	strb	r2, [r3, #21]
 801c9f6:	2301      	movs	r3, #1
 801c9f8:	e0e9      	b.n	801cbce <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c9fe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801ca00:	68fb      	ldr	r3, [r7, #12]
 801ca02:	689b      	ldr	r3, [r3, #8]
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d102      	bne.n	801ca0e <f_write+0x122>
 801ca08:	68fb      	ldr	r3, [r7, #12]
 801ca0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ca0c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801ca0e:	68fb      	ldr	r3, [r7, #12]
 801ca10:	7d1b      	ldrb	r3, [r3, #20]
 801ca12:	b25b      	sxtb	r3, r3
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	da18      	bge.n	801ca4a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ca18:	693b      	ldr	r3, [r7, #16]
 801ca1a:	7858      	ldrb	r0, [r3, #1]
 801ca1c:	68fb      	ldr	r3, [r7, #12]
 801ca1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	6a1a      	ldr	r2, [r3, #32]
 801ca26:	2301      	movs	r3, #1
 801ca28:	f7fd ffc6 	bl	801a9b8 <disk_write>
 801ca2c:	4603      	mov	r3, r0
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d004      	beq.n	801ca3c <f_write+0x150>
 801ca32:	68fb      	ldr	r3, [r7, #12]
 801ca34:	2201      	movs	r2, #1
 801ca36:	755a      	strb	r2, [r3, #21]
 801ca38:	2301      	movs	r3, #1
 801ca3a:	e0c8      	b.n	801cbce <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801ca3c:	68fb      	ldr	r3, [r7, #12]
 801ca3e:	7d1b      	ldrb	r3, [r3, #20]
 801ca40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ca44:	b2da      	uxtb	r2, r3
 801ca46:	68fb      	ldr	r3, [r7, #12]
 801ca48:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801ca4a:	693a      	ldr	r2, [r7, #16]
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	69db      	ldr	r3, [r3, #28]
 801ca50:	4619      	mov	r1, r3
 801ca52:	4610      	mov	r0, r2
 801ca54:	f7fe fb3c 	bl	801b0d0 <clust2sect>
 801ca58:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801ca5a:	697b      	ldr	r3, [r7, #20]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d104      	bne.n	801ca6a <f_write+0x17e>
 801ca60:	68fb      	ldr	r3, [r7, #12]
 801ca62:	2202      	movs	r2, #2
 801ca64:	755a      	strb	r2, [r3, #21]
 801ca66:	2302      	movs	r3, #2
 801ca68:	e0b1      	b.n	801cbce <f_write+0x2e2>
			sect += csect;
 801ca6a:	697a      	ldr	r2, [r7, #20]
 801ca6c:	69bb      	ldr	r3, [r7, #24]
 801ca6e:	4413      	add	r3, r2
 801ca70:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	0a5b      	lsrs	r3, r3, #9
 801ca76:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801ca78:	6a3b      	ldr	r3, [r7, #32]
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d03c      	beq.n	801caf8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801ca7e:	69ba      	ldr	r2, [r7, #24]
 801ca80:	6a3b      	ldr	r3, [r7, #32]
 801ca82:	4413      	add	r3, r2
 801ca84:	693a      	ldr	r2, [r7, #16]
 801ca86:	8952      	ldrh	r2, [r2, #10]
 801ca88:	4293      	cmp	r3, r2
 801ca8a:	d905      	bls.n	801ca98 <f_write+0x1ac>
					cc = fs->csize - csect;
 801ca8c:	693b      	ldr	r3, [r7, #16]
 801ca8e:	895b      	ldrh	r3, [r3, #10]
 801ca90:	461a      	mov	r2, r3
 801ca92:	69bb      	ldr	r3, [r7, #24]
 801ca94:	1ad3      	subs	r3, r2, r3
 801ca96:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ca98:	693b      	ldr	r3, [r7, #16]
 801ca9a:	7858      	ldrb	r0, [r3, #1]
 801ca9c:	6a3b      	ldr	r3, [r7, #32]
 801ca9e:	697a      	ldr	r2, [r7, #20]
 801caa0:	69f9      	ldr	r1, [r7, #28]
 801caa2:	f7fd ff89 	bl	801a9b8 <disk_write>
 801caa6:	4603      	mov	r3, r0
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d004      	beq.n	801cab6 <f_write+0x1ca>
 801caac:	68fb      	ldr	r3, [r7, #12]
 801caae:	2201      	movs	r2, #1
 801cab0:	755a      	strb	r2, [r3, #21]
 801cab2:	2301      	movs	r3, #1
 801cab4:	e08b      	b.n	801cbce <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	6a1a      	ldr	r2, [r3, #32]
 801caba:	697b      	ldr	r3, [r7, #20]
 801cabc:	1ad3      	subs	r3, r2, r3
 801cabe:	6a3a      	ldr	r2, [r7, #32]
 801cac0:	429a      	cmp	r2, r3
 801cac2:	d915      	bls.n	801caf0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801cac4:	68fb      	ldr	r3, [r7, #12]
 801cac6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801caca:	68fb      	ldr	r3, [r7, #12]
 801cacc:	6a1a      	ldr	r2, [r3, #32]
 801cace:	697b      	ldr	r3, [r7, #20]
 801cad0:	1ad3      	subs	r3, r2, r3
 801cad2:	025b      	lsls	r3, r3, #9
 801cad4:	69fa      	ldr	r2, [r7, #28]
 801cad6:	4413      	add	r3, r2
 801cad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801cadc:	4619      	mov	r1, r3
 801cade:	f7fe f82c 	bl	801ab3a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801cae2:	68fb      	ldr	r3, [r7, #12]
 801cae4:	7d1b      	ldrb	r3, [r3, #20]
 801cae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801caea:	b2da      	uxtb	r2, r3
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801caf0:	6a3b      	ldr	r3, [r7, #32]
 801caf2:	025b      	lsls	r3, r3, #9
 801caf4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801caf6:	e03f      	b.n	801cb78 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801caf8:	68fb      	ldr	r3, [r7, #12]
 801cafa:	6a1b      	ldr	r3, [r3, #32]
 801cafc:	697a      	ldr	r2, [r7, #20]
 801cafe:	429a      	cmp	r2, r3
 801cb00:	d016      	beq.n	801cb30 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801cb02:	68fb      	ldr	r3, [r7, #12]
 801cb04:	699a      	ldr	r2, [r3, #24]
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801cb0a:	429a      	cmp	r2, r3
 801cb0c:	d210      	bcs.n	801cb30 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801cb0e:	693b      	ldr	r3, [r7, #16]
 801cb10:	7858      	ldrb	r0, [r3, #1]
 801cb12:	68fb      	ldr	r3, [r7, #12]
 801cb14:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cb18:	2301      	movs	r3, #1
 801cb1a:	697a      	ldr	r2, [r7, #20]
 801cb1c:	f7fd ff2c 	bl	801a978 <disk_read>
 801cb20:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d004      	beq.n	801cb30 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	2201      	movs	r2, #1
 801cb2a:	755a      	strb	r2, [r3, #21]
 801cb2c:	2301      	movs	r3, #1
 801cb2e:	e04e      	b.n	801cbce <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801cb30:	68fb      	ldr	r3, [r7, #12]
 801cb32:	697a      	ldr	r2, [r7, #20]
 801cb34:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	699b      	ldr	r3, [r3, #24]
 801cb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cb3e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801cb42:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801cb44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	429a      	cmp	r2, r3
 801cb4a:	d901      	bls.n	801cb50 <f_write+0x264>
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801cb50:	68fb      	ldr	r3, [r7, #12]
 801cb52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801cb56:	68fb      	ldr	r3, [r7, #12]
 801cb58:	699b      	ldr	r3, [r3, #24]
 801cb5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cb5e:	4413      	add	r3, r2
 801cb60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cb62:	69f9      	ldr	r1, [r7, #28]
 801cb64:	4618      	mov	r0, r3
 801cb66:	f7fd ffe8 	bl	801ab3a <mem_cpy>
		fp->flag |= FA_DIRTY;
 801cb6a:	68fb      	ldr	r3, [r7, #12]
 801cb6c:	7d1b      	ldrb	r3, [r3, #20]
 801cb6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801cb72:	b2da      	uxtb	r2, r3
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801cb78:	69fa      	ldr	r2, [r7, #28]
 801cb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb7c:	4413      	add	r3, r2
 801cb7e:	61fb      	str	r3, [r7, #28]
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	699a      	ldr	r2, [r3, #24]
 801cb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb86:	441a      	add	r2, r3
 801cb88:	68fb      	ldr	r3, [r7, #12]
 801cb8a:	619a      	str	r2, [r3, #24]
 801cb8c:	68fb      	ldr	r3, [r7, #12]
 801cb8e:	68da      	ldr	r2, [r3, #12]
 801cb90:	68fb      	ldr	r3, [r7, #12]
 801cb92:	699b      	ldr	r3, [r3, #24]
 801cb94:	429a      	cmp	r2, r3
 801cb96:	bf38      	it	cc
 801cb98:	461a      	movcc	r2, r3
 801cb9a:	68fb      	ldr	r3, [r7, #12]
 801cb9c:	60da      	str	r2, [r3, #12]
 801cb9e:	683b      	ldr	r3, [r7, #0]
 801cba0:	681a      	ldr	r2, [r3, #0]
 801cba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cba4:	441a      	add	r2, r3
 801cba6:	683b      	ldr	r3, [r7, #0]
 801cba8:	601a      	str	r2, [r3, #0]
 801cbaa:	687a      	ldr	r2, [r7, #4]
 801cbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbae:	1ad3      	subs	r3, r2, r3
 801cbb0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	f47f aed4 	bne.w	801c962 <f_write+0x76>
 801cbba:	e000      	b.n	801cbbe <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801cbbc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801cbbe:	68fb      	ldr	r3, [r7, #12]
 801cbc0:	7d1b      	ldrb	r3, [r3, #20]
 801cbc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cbc6:	b2da      	uxtb	r2, r3
 801cbc8:	68fb      	ldr	r3, [r7, #12]
 801cbca:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801cbcc:	2300      	movs	r3, #0
}
 801cbce:	4618      	mov	r0, r3
 801cbd0:	3730      	adds	r7, #48	@ 0x30
 801cbd2:	46bd      	mov	sp, r7
 801cbd4:	bd80      	pop	{r7, pc}

0801cbd6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801cbd6:	b580      	push	{r7, lr}
 801cbd8:	b086      	sub	sp, #24
 801cbda:	af00      	add	r7, sp, #0
 801cbdc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	f107 0208 	add.w	r2, r7, #8
 801cbe4:	4611      	mov	r1, r2
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	f7ff fc4a 	bl	801c480 <validate>
 801cbec:	4603      	mov	r3, r0
 801cbee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801cbf0:	7dfb      	ldrb	r3, [r7, #23]
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d168      	bne.n	801ccc8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	7d1b      	ldrb	r3, [r3, #20]
 801cbfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	d062      	beq.n	801ccc8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	7d1b      	ldrb	r3, [r3, #20]
 801cc06:	b25b      	sxtb	r3, r3
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	da15      	bge.n	801cc38 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801cc0c:	68bb      	ldr	r3, [r7, #8]
 801cc0e:	7858      	ldrb	r0, [r3, #1]
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	6a1a      	ldr	r2, [r3, #32]
 801cc1a:	2301      	movs	r3, #1
 801cc1c:	f7fd fecc 	bl	801a9b8 <disk_write>
 801cc20:	4603      	mov	r3, r0
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d001      	beq.n	801cc2a <f_sync+0x54>
 801cc26:	2301      	movs	r3, #1
 801cc28:	e04f      	b.n	801ccca <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	7d1b      	ldrb	r3, [r3, #20]
 801cc2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801cc32:	b2da      	uxtb	r2, r3
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801cc38:	f7f4 f882 	bl	8010d40 <get_fattime>
 801cc3c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801cc3e:	68ba      	ldr	r2, [r7, #8]
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cc44:	4619      	mov	r1, r3
 801cc46:	4610      	mov	r0, r2
 801cc48:	f7fe f9a6 	bl	801af98 <move_window>
 801cc4c:	4603      	mov	r3, r0
 801cc4e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801cc50:	7dfb      	ldrb	r3, [r7, #23]
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d138      	bne.n	801ccc8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cc5a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	330b      	adds	r3, #11
 801cc60:	781a      	ldrb	r2, [r3, #0]
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	330b      	adds	r3, #11
 801cc66:	f042 0220 	orr.w	r2, r2, #32
 801cc6a:	b2d2      	uxtb	r2, r2
 801cc6c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	6818      	ldr	r0, [r3, #0]
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	689b      	ldr	r3, [r3, #8]
 801cc76:	461a      	mov	r2, r3
 801cc78:	68f9      	ldr	r1, [r7, #12]
 801cc7a:	f7fe feb0 	bl	801b9de <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	f103 021c 	add.w	r2, r3, #28
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	68db      	ldr	r3, [r3, #12]
 801cc88:	4619      	mov	r1, r3
 801cc8a:	4610      	mov	r0, r2
 801cc8c:	f7fd ff29 	bl	801aae2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	3316      	adds	r3, #22
 801cc94:	6939      	ldr	r1, [r7, #16]
 801cc96:	4618      	mov	r0, r3
 801cc98:	f7fd ff23 	bl	801aae2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801cc9c:	68fb      	ldr	r3, [r7, #12]
 801cc9e:	3312      	adds	r3, #18
 801cca0:	2100      	movs	r1, #0
 801cca2:	4618      	mov	r0, r3
 801cca4:	f7fd ff02 	bl	801aaac <st_word>
					fs->wflag = 1;
 801cca8:	68bb      	ldr	r3, [r7, #8]
 801ccaa:	2201      	movs	r2, #1
 801ccac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801ccae:	68bb      	ldr	r3, [r7, #8]
 801ccb0:	4618      	mov	r0, r3
 801ccb2:	f7fe f99f 	bl	801aff4 <sync_fs>
 801ccb6:	4603      	mov	r3, r0
 801ccb8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	7d1b      	ldrb	r3, [r3, #20]
 801ccbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801ccc2:	b2da      	uxtb	r2, r3
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801ccc8:	7dfb      	ldrb	r3, [r7, #23]
}
 801ccca:	4618      	mov	r0, r3
 801cccc:	3718      	adds	r7, #24
 801ccce:	46bd      	mov	sp, r7
 801ccd0:	bd80      	pop	{r7, pc}

0801ccd2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801ccd2:	b580      	push	{r7, lr}
 801ccd4:	b084      	sub	sp, #16
 801ccd6:	af00      	add	r7, sp, #0
 801ccd8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801ccda:	6878      	ldr	r0, [r7, #4]
 801ccdc:	f7ff ff7b 	bl	801cbd6 <f_sync>
 801cce0:	4603      	mov	r3, r0
 801cce2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801cce4:	7bfb      	ldrb	r3, [r7, #15]
 801cce6:	2b00      	cmp	r3, #0
 801cce8:	d118      	bne.n	801cd1c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	f107 0208 	add.w	r2, r7, #8
 801ccf0:	4611      	mov	r1, r2
 801ccf2:	4618      	mov	r0, r3
 801ccf4:	f7ff fbc4 	bl	801c480 <validate>
 801ccf8:	4603      	mov	r3, r0
 801ccfa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801ccfc:	7bfb      	ldrb	r3, [r7, #15]
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d10c      	bne.n	801cd1c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	691b      	ldr	r3, [r3, #16]
 801cd06:	4618      	mov	r0, r3
 801cd08:	f7fe f8a2 	bl	801ae50 <dec_lock>
 801cd0c:	4603      	mov	r3, r0
 801cd0e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801cd10:	7bfb      	ldrb	r3, [r7, #15]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d102      	bne.n	801cd1c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	2200      	movs	r2, #0
 801cd1a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801cd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 801cd1e:	4618      	mov	r0, r3
 801cd20:	3710      	adds	r7, #16
 801cd22:	46bd      	mov	sp, r7
 801cd24:	bd80      	pop	{r7, pc}

0801cd26 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801cd26:	b580      	push	{r7, lr}
 801cd28:	b090      	sub	sp, #64	@ 0x40
 801cd2a:	af00      	add	r7, sp, #0
 801cd2c:	6078      	str	r0, [r7, #4]
 801cd2e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	f107 0208 	add.w	r2, r7, #8
 801cd36:	4611      	mov	r1, r2
 801cd38:	4618      	mov	r0, r3
 801cd3a:	f7ff fba1 	bl	801c480 <validate>
 801cd3e:	4603      	mov	r3, r0
 801cd40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801cd44:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d103      	bne.n	801cd54 <f_lseek+0x2e>
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	7d5b      	ldrb	r3, [r3, #21]
 801cd50:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801cd54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d002      	beq.n	801cd62 <f_lseek+0x3c>
 801cd5c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801cd60:	e1e6      	b.n	801d130 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	f000 80d1 	beq.w	801cf0e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801cd6c:	683b      	ldr	r3, [r7, #0]
 801cd6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd72:	d15a      	bne.n	801ce2a <f_lseek+0x104>
			tbl = fp->cltbl;
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd78:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801cd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd7c:	1d1a      	adds	r2, r3, #4
 801cd7e:	627a      	str	r2, [r7, #36]	@ 0x24
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	617b      	str	r3, [r7, #20]
 801cd84:	2302      	movs	r3, #2
 801cd86:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	689b      	ldr	r3, [r3, #8]
 801cd8c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801cd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d03a      	beq.n	801ce0a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801cd94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd96:	613b      	str	r3, [r7, #16]
 801cd98:	2300      	movs	r3, #0
 801cd9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd9e:	3302      	adds	r3, #2
 801cda0:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 801cda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cda4:	60fb      	str	r3, [r7, #12]
 801cda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cda8:	3301      	adds	r3, #1
 801cdaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	f7fe f9ac 	bl	801b10e <get_fat>
 801cdb6:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801cdb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cdba:	2b01      	cmp	r3, #1
 801cdbc:	d804      	bhi.n	801cdc8 <f_lseek+0xa2>
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	2202      	movs	r2, #2
 801cdc2:	755a      	strb	r2, [r3, #21]
 801cdc4:	2302      	movs	r3, #2
 801cdc6:	e1b3      	b.n	801d130 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801cdc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cdca:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cdce:	d104      	bne.n	801cdda <f_lseek+0xb4>
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	2201      	movs	r2, #1
 801cdd4:	755a      	strb	r2, [r3, #21]
 801cdd6:	2301      	movs	r3, #1
 801cdd8:	e1aa      	b.n	801d130 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801cdda:	68fb      	ldr	r3, [r7, #12]
 801cddc:	3301      	adds	r3, #1
 801cdde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cde0:	429a      	cmp	r2, r3
 801cde2:	d0de      	beq.n	801cda2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801cde4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cde6:	697b      	ldr	r3, [r7, #20]
 801cde8:	429a      	cmp	r2, r3
 801cdea:	d809      	bhi.n	801ce00 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdee:	1d1a      	adds	r2, r3, #4
 801cdf0:	627a      	str	r2, [r7, #36]	@ 0x24
 801cdf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cdf4:	601a      	str	r2, [r3, #0]
 801cdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cdf8:	1d1a      	adds	r2, r3, #4
 801cdfa:	627a      	str	r2, [r7, #36]	@ 0x24
 801cdfc:	693a      	ldr	r2, [r7, #16]
 801cdfe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801ce00:	68bb      	ldr	r3, [r7, #8]
 801ce02:	695b      	ldr	r3, [r3, #20]
 801ce04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ce06:	429a      	cmp	r2, r3
 801ce08:	d3c4      	bcc.n	801cd94 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ce10:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801ce12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ce14:	697b      	ldr	r3, [r7, #20]
 801ce16:	429a      	cmp	r2, r3
 801ce18:	d803      	bhi.n	801ce22 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801ce1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce1c:	2200      	movs	r2, #0
 801ce1e:	601a      	str	r2, [r3, #0]
 801ce20:	e184      	b.n	801d12c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801ce22:	2311      	movs	r3, #17
 801ce24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801ce28:	e180      	b.n	801d12c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	68db      	ldr	r3, [r3, #12]
 801ce2e:	683a      	ldr	r2, [r7, #0]
 801ce30:	429a      	cmp	r2, r3
 801ce32:	d902      	bls.n	801ce3a <f_lseek+0x114>
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	68db      	ldr	r3, [r3, #12]
 801ce38:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	683a      	ldr	r2, [r7, #0]
 801ce3e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801ce40:	683b      	ldr	r3, [r7, #0]
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	f000 8172 	beq.w	801d12c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801ce48:	683b      	ldr	r3, [r7, #0]
 801ce4a:	3b01      	subs	r3, #1
 801ce4c:	4619      	mov	r1, r3
 801ce4e:	6878      	ldr	r0, [r7, #4]
 801ce50:	f7fe fbeb 	bl	801b62a <clmt_clust>
 801ce54:	4602      	mov	r2, r0
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801ce5a:	68ba      	ldr	r2, [r7, #8]
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	69db      	ldr	r3, [r3, #28]
 801ce60:	4619      	mov	r1, r3
 801ce62:	4610      	mov	r0, r2
 801ce64:	f7fe f934 	bl	801b0d0 <clust2sect>
 801ce68:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801ce6a:	69bb      	ldr	r3, [r7, #24]
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	d104      	bne.n	801ce7a <f_lseek+0x154>
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	2202      	movs	r2, #2
 801ce74:	755a      	strb	r2, [r3, #21]
 801ce76:	2302      	movs	r3, #2
 801ce78:	e15a      	b.n	801d130 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801ce7a:	683b      	ldr	r3, [r7, #0]
 801ce7c:	3b01      	subs	r3, #1
 801ce7e:	0a5b      	lsrs	r3, r3, #9
 801ce80:	68ba      	ldr	r2, [r7, #8]
 801ce82:	8952      	ldrh	r2, [r2, #10]
 801ce84:	3a01      	subs	r2, #1
 801ce86:	4013      	ands	r3, r2
 801ce88:	69ba      	ldr	r2, [r7, #24]
 801ce8a:	4413      	add	r3, r2
 801ce8c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	699b      	ldr	r3, [r3, #24]
 801ce92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	f000 8148 	beq.w	801d12c <f_lseek+0x406>
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	6a1b      	ldr	r3, [r3, #32]
 801cea0:	69ba      	ldr	r2, [r7, #24]
 801cea2:	429a      	cmp	r2, r3
 801cea4:	f000 8142 	beq.w	801d12c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	7d1b      	ldrb	r3, [r3, #20]
 801ceac:	b25b      	sxtb	r3, r3
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	da18      	bge.n	801cee4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ceb2:	68bb      	ldr	r3, [r7, #8]
 801ceb4:	7858      	ldrb	r0, [r3, #1]
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	6a1a      	ldr	r2, [r3, #32]
 801cec0:	2301      	movs	r3, #1
 801cec2:	f7fd fd79 	bl	801a9b8 <disk_write>
 801cec6:	4603      	mov	r3, r0
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d004      	beq.n	801ced6 <f_lseek+0x1b0>
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	2201      	movs	r2, #1
 801ced0:	755a      	strb	r2, [r3, #21]
 801ced2:	2301      	movs	r3, #1
 801ced4:	e12c      	b.n	801d130 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	7d1b      	ldrb	r3, [r3, #20]
 801ceda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801cede:	b2da      	uxtb	r2, r3
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801cee4:	68bb      	ldr	r3, [r7, #8]
 801cee6:	7858      	ldrb	r0, [r3, #1]
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801ceee:	2301      	movs	r3, #1
 801cef0:	69ba      	ldr	r2, [r7, #24]
 801cef2:	f7fd fd41 	bl	801a978 <disk_read>
 801cef6:	4603      	mov	r3, r0
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	d004      	beq.n	801cf06 <f_lseek+0x1e0>
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	2201      	movs	r2, #1
 801cf00:	755a      	strb	r2, [r3, #21]
 801cf02:	2301      	movs	r3, #1
 801cf04:	e114      	b.n	801d130 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	69ba      	ldr	r2, [r7, #24]
 801cf0a:	621a      	str	r2, [r3, #32]
 801cf0c:	e10e      	b.n	801d12c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	68db      	ldr	r3, [r3, #12]
 801cf12:	683a      	ldr	r2, [r7, #0]
 801cf14:	429a      	cmp	r2, r3
 801cf16:	d908      	bls.n	801cf2a <f_lseek+0x204>
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	7d1b      	ldrb	r3, [r3, #20]
 801cf1c:	f003 0302 	and.w	r3, r3, #2
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	d102      	bne.n	801cf2a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	68db      	ldr	r3, [r3, #12]
 801cf28:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	699b      	ldr	r3, [r3, #24]
 801cf2e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801cf30:	2300      	movs	r3, #0
 801cf32:	637b      	str	r3, [r7, #52]	@ 0x34
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cf38:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801cf3a:	683b      	ldr	r3, [r7, #0]
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	f000 80a7 	beq.w	801d090 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801cf42:	68bb      	ldr	r3, [r7, #8]
 801cf44:	895b      	ldrh	r3, [r3, #10]
 801cf46:	025b      	lsls	r3, r3, #9
 801cf48:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801cf4a:	6a3b      	ldr	r3, [r7, #32]
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	d01b      	beq.n	801cf88 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801cf50:	683b      	ldr	r3, [r7, #0]
 801cf52:	1e5a      	subs	r2, r3, #1
 801cf54:	69fb      	ldr	r3, [r7, #28]
 801cf56:	fbb2 f2f3 	udiv	r2, r2, r3
 801cf5a:	6a3b      	ldr	r3, [r7, #32]
 801cf5c:	1e59      	subs	r1, r3, #1
 801cf5e:	69fb      	ldr	r3, [r7, #28]
 801cf60:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801cf64:	429a      	cmp	r2, r3
 801cf66:	d30f      	bcc.n	801cf88 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801cf68:	6a3b      	ldr	r3, [r7, #32]
 801cf6a:	1e5a      	subs	r2, r3, #1
 801cf6c:	69fb      	ldr	r3, [r7, #28]
 801cf6e:	425b      	negs	r3, r3
 801cf70:	401a      	ands	r2, r3
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	699b      	ldr	r3, [r3, #24]
 801cf7a:	683a      	ldr	r2, [r7, #0]
 801cf7c:	1ad3      	subs	r3, r2, r3
 801cf7e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	69db      	ldr	r3, [r3, #28]
 801cf84:	63bb      	str	r3, [r7, #56]	@ 0x38
 801cf86:	e022      	b.n	801cfce <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	689b      	ldr	r3, [r3, #8]
 801cf8c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801cf8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d119      	bne.n	801cfc8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	2100      	movs	r1, #0
 801cf98:	4618      	mov	r0, r3
 801cf9a:	f7fe faae 	bl	801b4fa <create_chain>
 801cf9e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801cfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfa2:	2b01      	cmp	r3, #1
 801cfa4:	d104      	bne.n	801cfb0 <f_lseek+0x28a>
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	2202      	movs	r2, #2
 801cfaa:	755a      	strb	r2, [r3, #21]
 801cfac:	2302      	movs	r3, #2
 801cfae:	e0bf      	b.n	801d130 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801cfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cfb6:	d104      	bne.n	801cfc2 <f_lseek+0x29c>
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	2201      	movs	r2, #1
 801cfbc:	755a      	strb	r2, [r3, #21]
 801cfbe:	2301      	movs	r3, #1
 801cfc0:	e0b6      	b.n	801d130 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cfc6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cfcc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801cfce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	d05d      	beq.n	801d090 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801cfd4:	e03a      	b.n	801d04c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801cfd6:	683a      	ldr	r2, [r7, #0]
 801cfd8:	69fb      	ldr	r3, [r7, #28]
 801cfda:	1ad3      	subs	r3, r2, r3
 801cfdc:	603b      	str	r3, [r7, #0]
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	699a      	ldr	r2, [r3, #24]
 801cfe2:	69fb      	ldr	r3, [r7, #28]
 801cfe4:	441a      	add	r2, r3
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	7d1b      	ldrb	r3, [r3, #20]
 801cfee:	f003 0302 	and.w	r3, r3, #2
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	d00b      	beq.n	801d00e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801cffa:	4618      	mov	r0, r3
 801cffc:	f7fe fa7d 	bl	801b4fa <create_chain>
 801d000:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801d002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d004:	2b00      	cmp	r3, #0
 801d006:	d108      	bne.n	801d01a <f_lseek+0x2f4>
							ofs = 0; break;
 801d008:	2300      	movs	r3, #0
 801d00a:	603b      	str	r3, [r7, #0]
 801d00c:	e022      	b.n	801d054 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d012:	4618      	mov	r0, r3
 801d014:	f7fe f87b 	bl	801b10e <get_fat>
 801d018:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d020:	d104      	bne.n	801d02c <f_lseek+0x306>
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	2201      	movs	r2, #1
 801d026:	755a      	strb	r2, [r3, #21]
 801d028:	2301      	movs	r3, #1
 801d02a:	e081      	b.n	801d130 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801d02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d02e:	2b01      	cmp	r3, #1
 801d030:	d904      	bls.n	801d03c <f_lseek+0x316>
 801d032:	68bb      	ldr	r3, [r7, #8]
 801d034:	695b      	ldr	r3, [r3, #20]
 801d036:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d038:	429a      	cmp	r2, r3
 801d03a:	d304      	bcc.n	801d046 <f_lseek+0x320>
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	2202      	movs	r2, #2
 801d040:	755a      	strb	r2, [r3, #21]
 801d042:	2302      	movs	r3, #2
 801d044:	e074      	b.n	801d130 <f_lseek+0x40a>
					fp->clust = clst;
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d04a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801d04c:	683a      	ldr	r2, [r7, #0]
 801d04e:	69fb      	ldr	r3, [r7, #28]
 801d050:	429a      	cmp	r2, r3
 801d052:	d8c0      	bhi.n	801cfd6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	699a      	ldr	r2, [r3, #24]
 801d058:	683b      	ldr	r3, [r7, #0]
 801d05a:	441a      	add	r2, r3
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801d060:	683b      	ldr	r3, [r7, #0]
 801d062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d066:	2b00      	cmp	r3, #0
 801d068:	d012      	beq.n	801d090 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801d06a:	68bb      	ldr	r3, [r7, #8]
 801d06c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d06e:	4618      	mov	r0, r3
 801d070:	f7fe f82e 	bl	801b0d0 <clust2sect>
 801d074:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801d076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d078:	2b00      	cmp	r3, #0
 801d07a:	d104      	bne.n	801d086 <f_lseek+0x360>
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	2202      	movs	r2, #2
 801d080:	755a      	strb	r2, [r3, #21]
 801d082:	2302      	movs	r3, #2
 801d084:	e054      	b.n	801d130 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801d086:	683b      	ldr	r3, [r7, #0]
 801d088:	0a5b      	lsrs	r3, r3, #9
 801d08a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d08c:	4413      	add	r3, r2
 801d08e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	699a      	ldr	r2, [r3, #24]
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	68db      	ldr	r3, [r3, #12]
 801d098:	429a      	cmp	r2, r3
 801d09a:	d90a      	bls.n	801d0b2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	699a      	ldr	r2, [r3, #24]
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	7d1b      	ldrb	r3, [r3, #20]
 801d0a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d0ac:	b2da      	uxtb	r2, r3
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	699b      	ldr	r3, [r3, #24]
 801d0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	d036      	beq.n	801d12c <f_lseek+0x406>
 801d0be:	687b      	ldr	r3, [r7, #4]
 801d0c0:	6a1b      	ldr	r3, [r3, #32]
 801d0c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d0c4:	429a      	cmp	r2, r3
 801d0c6:	d031      	beq.n	801d12c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	7d1b      	ldrb	r3, [r3, #20]
 801d0cc:	b25b      	sxtb	r3, r3
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	da18      	bge.n	801d104 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d0d2:	68bb      	ldr	r3, [r7, #8]
 801d0d4:	7858      	ldrb	r0, [r3, #1]
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	6a1a      	ldr	r2, [r3, #32]
 801d0e0:	2301      	movs	r3, #1
 801d0e2:	f7fd fc69 	bl	801a9b8 <disk_write>
 801d0e6:	4603      	mov	r3, r0
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	d004      	beq.n	801d0f6 <f_lseek+0x3d0>
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	2201      	movs	r2, #1
 801d0f0:	755a      	strb	r2, [r3, #21]
 801d0f2:	2301      	movs	r3, #1
 801d0f4:	e01c      	b.n	801d130 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	7d1b      	ldrb	r3, [r3, #20]
 801d0fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d0fe:	b2da      	uxtb	r2, r3
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801d104:	68bb      	ldr	r3, [r7, #8]
 801d106:	7858      	ldrb	r0, [r3, #1]
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d10e:	2301      	movs	r3, #1
 801d110:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d112:	f7fd fc31 	bl	801a978 <disk_read>
 801d116:	4603      	mov	r3, r0
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d004      	beq.n	801d126 <f_lseek+0x400>
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	2201      	movs	r2, #1
 801d120:	755a      	strb	r2, [r3, #21]
 801d122:	2301      	movs	r3, #1
 801d124:	e004      	b.n	801d130 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d12a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801d12c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801d130:	4618      	mov	r0, r3
 801d132:	3740      	adds	r7, #64	@ 0x40
 801d134:	46bd      	mov	sp, r7
 801d136:	bd80      	pop	{r7, pc}

0801d138 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801d138:	b580      	push	{r7, lr}
 801d13a:	b086      	sub	sp, #24
 801d13c:	af00      	add	r7, sp, #0
 801d13e:	6078      	str	r0, [r7, #4]
 801d140:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	2b00      	cmp	r3, #0
 801d146:	d101      	bne.n	801d14c <f_opendir+0x14>
 801d148:	2309      	movs	r3, #9
 801d14a:	e064      	b.n	801d216 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801d150:	f107 010c 	add.w	r1, r7, #12
 801d154:	463b      	mov	r3, r7
 801d156:	2200      	movs	r2, #0
 801d158:	4618      	mov	r0, r3
 801d15a:	f7fe ff45 	bl	801bfe8 <find_volume>
 801d15e:	4603      	mov	r3, r0
 801d160:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d162:	7dfb      	ldrb	r3, [r7, #23]
 801d164:	2b00      	cmp	r3, #0
 801d166:	d14f      	bne.n	801d208 <f_opendir+0xd0>
		obj->fs = fs;
 801d168:	68fa      	ldr	r2, [r7, #12]
 801d16a:	693b      	ldr	r3, [r7, #16]
 801d16c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801d16e:	683b      	ldr	r3, [r7, #0]
 801d170:	4619      	mov	r1, r3
 801d172:	6878      	ldr	r0, [r7, #4]
 801d174:	f7fe fe2c 	bl	801bdd0 <follow_path>
 801d178:	4603      	mov	r3, r0
 801d17a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801d17c:	7dfb      	ldrb	r3, [r7, #23]
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d13d      	bne.n	801d1fe <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801d188:	b25b      	sxtb	r3, r3
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	db12      	blt.n	801d1b4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801d18e:	693b      	ldr	r3, [r7, #16]
 801d190:	799b      	ldrb	r3, [r3, #6]
 801d192:	f003 0310 	and.w	r3, r3, #16
 801d196:	2b00      	cmp	r3, #0
 801d198:	d00a      	beq.n	801d1b0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801d19a:	68fa      	ldr	r2, [r7, #12]
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	6a1b      	ldr	r3, [r3, #32]
 801d1a0:	4619      	mov	r1, r3
 801d1a2:	4610      	mov	r0, r2
 801d1a4:	f7fe fbfc 	bl	801b9a0 <ld_clust>
 801d1a8:	4602      	mov	r2, r0
 801d1aa:	693b      	ldr	r3, [r7, #16]
 801d1ac:	609a      	str	r2, [r3, #8]
 801d1ae:	e001      	b.n	801d1b4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801d1b0:	2305      	movs	r3, #5
 801d1b2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801d1b4:	7dfb      	ldrb	r3, [r7, #23]
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	d121      	bne.n	801d1fe <f_opendir+0xc6>
				obj->id = fs->id;
 801d1ba:	68fb      	ldr	r3, [r7, #12]
 801d1bc:	88da      	ldrh	r2, [r3, #6]
 801d1be:	693b      	ldr	r3, [r7, #16]
 801d1c0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801d1c2:	2100      	movs	r1, #0
 801d1c4:	6878      	ldr	r0, [r7, #4]
 801d1c6:	f7fe fa64 	bl	801b692 <dir_sdi>
 801d1ca:	4603      	mov	r3, r0
 801d1cc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801d1ce:	7dfb      	ldrb	r3, [r7, #23]
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d114      	bne.n	801d1fe <f_opendir+0xc6>
					if (obj->sclust) {
 801d1d4:	693b      	ldr	r3, [r7, #16]
 801d1d6:	689b      	ldr	r3, [r3, #8]
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	d00d      	beq.n	801d1f8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801d1dc:	2100      	movs	r1, #0
 801d1de:	6878      	ldr	r0, [r7, #4]
 801d1e0:	f7fd fda8 	bl	801ad34 <inc_lock>
 801d1e4:	4602      	mov	r2, r0
 801d1e6:	693b      	ldr	r3, [r7, #16]
 801d1e8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801d1ea:	693b      	ldr	r3, [r7, #16]
 801d1ec:	691b      	ldr	r3, [r3, #16]
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	d105      	bne.n	801d1fe <f_opendir+0xc6>
 801d1f2:	2312      	movs	r3, #18
 801d1f4:	75fb      	strb	r3, [r7, #23]
 801d1f6:	e002      	b.n	801d1fe <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801d1f8:	693b      	ldr	r3, [r7, #16]
 801d1fa:	2200      	movs	r2, #0
 801d1fc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801d1fe:	7dfb      	ldrb	r3, [r7, #23]
 801d200:	2b04      	cmp	r3, #4
 801d202:	d101      	bne.n	801d208 <f_opendir+0xd0>
 801d204:	2305      	movs	r3, #5
 801d206:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801d208:	7dfb      	ldrb	r3, [r7, #23]
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d002      	beq.n	801d214 <f_opendir+0xdc>
 801d20e:	693b      	ldr	r3, [r7, #16]
 801d210:	2200      	movs	r2, #0
 801d212:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d214:	7dfb      	ldrb	r3, [r7, #23]
}
 801d216:	4618      	mov	r0, r3
 801d218:	3718      	adds	r7, #24
 801d21a:	46bd      	mov	sp, r7
 801d21c:	bd80      	pop	{r7, pc}

0801d21e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801d21e:	b580      	push	{r7, lr}
 801d220:	b084      	sub	sp, #16
 801d222:	af00      	add	r7, sp, #0
 801d224:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	f107 0208 	add.w	r2, r7, #8
 801d22c:	4611      	mov	r1, r2
 801d22e:	4618      	mov	r0, r3
 801d230:	f7ff f926 	bl	801c480 <validate>
 801d234:	4603      	mov	r3, r0
 801d236:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801d238:	7bfb      	ldrb	r3, [r7, #15]
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	d110      	bne.n	801d260 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	691b      	ldr	r3, [r3, #16]
 801d242:	2b00      	cmp	r3, #0
 801d244:	d006      	beq.n	801d254 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	691b      	ldr	r3, [r3, #16]
 801d24a:	4618      	mov	r0, r3
 801d24c:	f7fd fe00 	bl	801ae50 <dec_lock>
 801d250:	4603      	mov	r3, r0
 801d252:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801d254:	7bfb      	ldrb	r3, [r7, #15]
 801d256:	2b00      	cmp	r3, #0
 801d258:	d102      	bne.n	801d260 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	2200      	movs	r2, #0
 801d25e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801d260:	7bfb      	ldrb	r3, [r7, #15]
}
 801d262:	4618      	mov	r0, r3
 801d264:	3710      	adds	r7, #16
 801d266:	46bd      	mov	sp, r7
 801d268:	bd80      	pop	{r7, pc}

0801d26a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801d26a:	b580      	push	{r7, lr}
 801d26c:	b084      	sub	sp, #16
 801d26e:	af00      	add	r7, sp, #0
 801d270:	6078      	str	r0, [r7, #4]
 801d272:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	f107 0208 	add.w	r2, r7, #8
 801d27a:	4611      	mov	r1, r2
 801d27c:	4618      	mov	r0, r3
 801d27e:	f7ff f8ff 	bl	801c480 <validate>
 801d282:	4603      	mov	r3, r0
 801d284:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801d286:	7bfb      	ldrb	r3, [r7, #15]
 801d288:	2b00      	cmp	r3, #0
 801d28a:	d126      	bne.n	801d2da <f_readdir+0x70>
		if (!fno) {
 801d28c:	683b      	ldr	r3, [r7, #0]
 801d28e:	2b00      	cmp	r3, #0
 801d290:	d106      	bne.n	801d2a0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801d292:	2100      	movs	r1, #0
 801d294:	6878      	ldr	r0, [r7, #4]
 801d296:	f7fe f9fc 	bl	801b692 <dir_sdi>
 801d29a:	4603      	mov	r3, r0
 801d29c:	73fb      	strb	r3, [r7, #15]
 801d29e:	e01c      	b.n	801d2da <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801d2a0:	2100      	movs	r1, #0
 801d2a2:	6878      	ldr	r0, [r7, #4]
 801d2a4:	f7fe fbbb 	bl	801ba1e <dir_read>
 801d2a8:	4603      	mov	r3, r0
 801d2aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801d2ac:	7bfb      	ldrb	r3, [r7, #15]
 801d2ae:	2b04      	cmp	r3, #4
 801d2b0:	d101      	bne.n	801d2b6 <f_readdir+0x4c>
 801d2b2:	2300      	movs	r3, #0
 801d2b4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801d2b6:	7bfb      	ldrb	r3, [r7, #15]
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d10e      	bne.n	801d2da <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801d2bc:	6839      	ldr	r1, [r7, #0]
 801d2be:	6878      	ldr	r0, [r7, #4]
 801d2c0:	f7fe fc91 	bl	801bbe6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801d2c4:	2100      	movs	r1, #0
 801d2c6:	6878      	ldr	r0, [r7, #4]
 801d2c8:	f7fe fa5e 	bl	801b788 <dir_next>
 801d2cc:	4603      	mov	r3, r0
 801d2ce:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801d2d0:	7bfb      	ldrb	r3, [r7, #15]
 801d2d2:	2b04      	cmp	r3, #4
 801d2d4:	d101      	bne.n	801d2da <f_readdir+0x70>
 801d2d6:	2300      	movs	r3, #0
 801d2d8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801d2da:	7bfb      	ldrb	r3, [r7, #15]
}
 801d2dc:	4618      	mov	r0, r3
 801d2de:	3710      	adds	r7, #16
 801d2e0:	46bd      	mov	sp, r7
 801d2e2:	bd80      	pop	{r7, pc}

0801d2e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801d2e4:	b480      	push	{r7}
 801d2e6:	b087      	sub	sp, #28
 801d2e8:	af00      	add	r7, sp, #0
 801d2ea:	60f8      	str	r0, [r7, #12]
 801d2ec:	60b9      	str	r1, [r7, #8]
 801d2ee:	4613      	mov	r3, r2
 801d2f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801d2f2:	2301      	movs	r3, #1
 801d2f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801d2f6:	2300      	movs	r3, #0
 801d2f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801d2fa:	4b1f      	ldr	r3, [pc, #124]	@ (801d378 <FATFS_LinkDriverEx+0x94>)
 801d2fc:	7a5b      	ldrb	r3, [r3, #9]
 801d2fe:	b2db      	uxtb	r3, r3
 801d300:	2b00      	cmp	r3, #0
 801d302:	d131      	bne.n	801d368 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801d304:	4b1c      	ldr	r3, [pc, #112]	@ (801d378 <FATFS_LinkDriverEx+0x94>)
 801d306:	7a5b      	ldrb	r3, [r3, #9]
 801d308:	b2db      	uxtb	r3, r3
 801d30a:	461a      	mov	r2, r3
 801d30c:	4b1a      	ldr	r3, [pc, #104]	@ (801d378 <FATFS_LinkDriverEx+0x94>)
 801d30e:	2100      	movs	r1, #0
 801d310:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801d312:	4b19      	ldr	r3, [pc, #100]	@ (801d378 <FATFS_LinkDriverEx+0x94>)
 801d314:	7a5b      	ldrb	r3, [r3, #9]
 801d316:	b2db      	uxtb	r3, r3
 801d318:	4a17      	ldr	r2, [pc, #92]	@ (801d378 <FATFS_LinkDriverEx+0x94>)
 801d31a:	009b      	lsls	r3, r3, #2
 801d31c:	4413      	add	r3, r2
 801d31e:	68fa      	ldr	r2, [r7, #12]
 801d320:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801d322:	4b15      	ldr	r3, [pc, #84]	@ (801d378 <FATFS_LinkDriverEx+0x94>)
 801d324:	7a5b      	ldrb	r3, [r3, #9]
 801d326:	b2db      	uxtb	r3, r3
 801d328:	461a      	mov	r2, r3
 801d32a:	4b13      	ldr	r3, [pc, #76]	@ (801d378 <FATFS_LinkDriverEx+0x94>)
 801d32c:	4413      	add	r3, r2
 801d32e:	79fa      	ldrb	r2, [r7, #7]
 801d330:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801d332:	4b11      	ldr	r3, [pc, #68]	@ (801d378 <FATFS_LinkDriverEx+0x94>)
 801d334:	7a5b      	ldrb	r3, [r3, #9]
 801d336:	b2db      	uxtb	r3, r3
 801d338:	1c5a      	adds	r2, r3, #1
 801d33a:	b2d1      	uxtb	r1, r2
 801d33c:	4a0e      	ldr	r2, [pc, #56]	@ (801d378 <FATFS_LinkDriverEx+0x94>)
 801d33e:	7251      	strb	r1, [r2, #9]
 801d340:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801d342:	7dbb      	ldrb	r3, [r7, #22]
 801d344:	3330      	adds	r3, #48	@ 0x30
 801d346:	b2da      	uxtb	r2, r3
 801d348:	68bb      	ldr	r3, [r7, #8]
 801d34a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801d34c:	68bb      	ldr	r3, [r7, #8]
 801d34e:	3301      	adds	r3, #1
 801d350:	223a      	movs	r2, #58	@ 0x3a
 801d352:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801d354:	68bb      	ldr	r3, [r7, #8]
 801d356:	3302      	adds	r3, #2
 801d358:	222f      	movs	r2, #47	@ 0x2f
 801d35a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801d35c:	68bb      	ldr	r3, [r7, #8]
 801d35e:	3303      	adds	r3, #3
 801d360:	2200      	movs	r2, #0
 801d362:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801d364:	2300      	movs	r3, #0
 801d366:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801d368:	7dfb      	ldrb	r3, [r7, #23]
}
 801d36a:	4618      	mov	r0, r3
 801d36c:	371c      	adds	r7, #28
 801d36e:	46bd      	mov	sp, r7
 801d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d374:	4770      	bx	lr
 801d376:	bf00      	nop
 801d378:	240089f0 	.word	0x240089f0

0801d37c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801d37c:	b580      	push	{r7, lr}
 801d37e:	b082      	sub	sp, #8
 801d380:	af00      	add	r7, sp, #0
 801d382:	6078      	str	r0, [r7, #4]
 801d384:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801d386:	2200      	movs	r2, #0
 801d388:	6839      	ldr	r1, [r7, #0]
 801d38a:	6878      	ldr	r0, [r7, #4]
 801d38c:	f7ff ffaa 	bl	801d2e4 <FATFS_LinkDriverEx>
 801d390:	4603      	mov	r3, r0
}
 801d392:	4618      	mov	r0, r3
 801d394:	3708      	adds	r7, #8
 801d396:	46bd      	mov	sp, r7
 801d398:	bd80      	pop	{r7, pc}

0801d39a <atoi>:
 801d39a:	220a      	movs	r2, #10
 801d39c:	2100      	movs	r1, #0
 801d39e:	f000 b87b 	b.w	801d498 <strtol>
	...

0801d3a4 <_strtol_l.isra.0>:
 801d3a4:	2b24      	cmp	r3, #36	@ 0x24
 801d3a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3aa:	4686      	mov	lr, r0
 801d3ac:	4690      	mov	r8, r2
 801d3ae:	d801      	bhi.n	801d3b4 <_strtol_l.isra.0+0x10>
 801d3b0:	2b01      	cmp	r3, #1
 801d3b2:	d106      	bne.n	801d3c2 <_strtol_l.isra.0+0x1e>
 801d3b4:	f000 fb7c 	bl	801dab0 <__errno>
 801d3b8:	2316      	movs	r3, #22
 801d3ba:	6003      	str	r3, [r0, #0]
 801d3bc:	2000      	movs	r0, #0
 801d3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3c2:	4834      	ldr	r0, [pc, #208]	@ (801d494 <_strtol_l.isra.0+0xf0>)
 801d3c4:	460d      	mov	r5, r1
 801d3c6:	462a      	mov	r2, r5
 801d3c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d3cc:	5d06      	ldrb	r6, [r0, r4]
 801d3ce:	f016 0608 	ands.w	r6, r6, #8
 801d3d2:	d1f8      	bne.n	801d3c6 <_strtol_l.isra.0+0x22>
 801d3d4:	2c2d      	cmp	r4, #45	@ 0x2d
 801d3d6:	d110      	bne.n	801d3fa <_strtol_l.isra.0+0x56>
 801d3d8:	782c      	ldrb	r4, [r5, #0]
 801d3da:	2601      	movs	r6, #1
 801d3dc:	1c95      	adds	r5, r2, #2
 801d3de:	f033 0210 	bics.w	r2, r3, #16
 801d3e2:	d115      	bne.n	801d410 <_strtol_l.isra.0+0x6c>
 801d3e4:	2c30      	cmp	r4, #48	@ 0x30
 801d3e6:	d10d      	bne.n	801d404 <_strtol_l.isra.0+0x60>
 801d3e8:	782a      	ldrb	r2, [r5, #0]
 801d3ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d3ee:	2a58      	cmp	r2, #88	@ 0x58
 801d3f0:	d108      	bne.n	801d404 <_strtol_l.isra.0+0x60>
 801d3f2:	786c      	ldrb	r4, [r5, #1]
 801d3f4:	3502      	adds	r5, #2
 801d3f6:	2310      	movs	r3, #16
 801d3f8:	e00a      	b.n	801d410 <_strtol_l.isra.0+0x6c>
 801d3fa:	2c2b      	cmp	r4, #43	@ 0x2b
 801d3fc:	bf04      	itt	eq
 801d3fe:	782c      	ldrbeq	r4, [r5, #0]
 801d400:	1c95      	addeq	r5, r2, #2
 801d402:	e7ec      	b.n	801d3de <_strtol_l.isra.0+0x3a>
 801d404:	2b00      	cmp	r3, #0
 801d406:	d1f6      	bne.n	801d3f6 <_strtol_l.isra.0+0x52>
 801d408:	2c30      	cmp	r4, #48	@ 0x30
 801d40a:	bf14      	ite	ne
 801d40c:	230a      	movne	r3, #10
 801d40e:	2308      	moveq	r3, #8
 801d410:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d414:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d418:	2200      	movs	r2, #0
 801d41a:	fbbc f9f3 	udiv	r9, ip, r3
 801d41e:	4610      	mov	r0, r2
 801d420:	fb03 ca19 	mls	sl, r3, r9, ip
 801d424:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d428:	2f09      	cmp	r7, #9
 801d42a:	d80f      	bhi.n	801d44c <_strtol_l.isra.0+0xa8>
 801d42c:	463c      	mov	r4, r7
 801d42e:	42a3      	cmp	r3, r4
 801d430:	dd1b      	ble.n	801d46a <_strtol_l.isra.0+0xc6>
 801d432:	1c57      	adds	r7, r2, #1
 801d434:	d007      	beq.n	801d446 <_strtol_l.isra.0+0xa2>
 801d436:	4581      	cmp	r9, r0
 801d438:	d314      	bcc.n	801d464 <_strtol_l.isra.0+0xc0>
 801d43a:	d101      	bne.n	801d440 <_strtol_l.isra.0+0x9c>
 801d43c:	45a2      	cmp	sl, r4
 801d43e:	db11      	blt.n	801d464 <_strtol_l.isra.0+0xc0>
 801d440:	fb00 4003 	mla	r0, r0, r3, r4
 801d444:	2201      	movs	r2, #1
 801d446:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d44a:	e7eb      	b.n	801d424 <_strtol_l.isra.0+0x80>
 801d44c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d450:	2f19      	cmp	r7, #25
 801d452:	d801      	bhi.n	801d458 <_strtol_l.isra.0+0xb4>
 801d454:	3c37      	subs	r4, #55	@ 0x37
 801d456:	e7ea      	b.n	801d42e <_strtol_l.isra.0+0x8a>
 801d458:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d45c:	2f19      	cmp	r7, #25
 801d45e:	d804      	bhi.n	801d46a <_strtol_l.isra.0+0xc6>
 801d460:	3c57      	subs	r4, #87	@ 0x57
 801d462:	e7e4      	b.n	801d42e <_strtol_l.isra.0+0x8a>
 801d464:	f04f 32ff 	mov.w	r2, #4294967295
 801d468:	e7ed      	b.n	801d446 <_strtol_l.isra.0+0xa2>
 801d46a:	1c53      	adds	r3, r2, #1
 801d46c:	d108      	bne.n	801d480 <_strtol_l.isra.0+0xdc>
 801d46e:	2322      	movs	r3, #34	@ 0x22
 801d470:	f8ce 3000 	str.w	r3, [lr]
 801d474:	4660      	mov	r0, ip
 801d476:	f1b8 0f00 	cmp.w	r8, #0
 801d47a:	d0a0      	beq.n	801d3be <_strtol_l.isra.0+0x1a>
 801d47c:	1e69      	subs	r1, r5, #1
 801d47e:	e006      	b.n	801d48e <_strtol_l.isra.0+0xea>
 801d480:	b106      	cbz	r6, 801d484 <_strtol_l.isra.0+0xe0>
 801d482:	4240      	negs	r0, r0
 801d484:	f1b8 0f00 	cmp.w	r8, #0
 801d488:	d099      	beq.n	801d3be <_strtol_l.isra.0+0x1a>
 801d48a:	2a00      	cmp	r2, #0
 801d48c:	d1f6      	bne.n	801d47c <_strtol_l.isra.0+0xd8>
 801d48e:	f8c8 1000 	str.w	r1, [r8]
 801d492:	e794      	b.n	801d3be <_strtol_l.isra.0+0x1a>
 801d494:	08032059 	.word	0x08032059

0801d498 <strtol>:
 801d498:	4613      	mov	r3, r2
 801d49a:	460a      	mov	r2, r1
 801d49c:	4601      	mov	r1, r0
 801d49e:	4802      	ldr	r0, [pc, #8]	@ (801d4a8 <strtol+0x10>)
 801d4a0:	6800      	ldr	r0, [r0, #0]
 801d4a2:	f7ff bf7f 	b.w	801d3a4 <_strtol_l.isra.0>
 801d4a6:	bf00      	nop
 801d4a8:	2400002c 	.word	0x2400002c

0801d4ac <std>:
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	b510      	push	{r4, lr}
 801d4b0:	4604      	mov	r4, r0
 801d4b2:	e9c0 3300 	strd	r3, r3, [r0]
 801d4b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d4ba:	6083      	str	r3, [r0, #8]
 801d4bc:	8181      	strh	r1, [r0, #12]
 801d4be:	6643      	str	r3, [r0, #100]	@ 0x64
 801d4c0:	81c2      	strh	r2, [r0, #14]
 801d4c2:	6183      	str	r3, [r0, #24]
 801d4c4:	4619      	mov	r1, r3
 801d4c6:	2208      	movs	r2, #8
 801d4c8:	305c      	adds	r0, #92	@ 0x5c
 801d4ca:	f000 fa8d 	bl	801d9e8 <memset>
 801d4ce:	4b0d      	ldr	r3, [pc, #52]	@ (801d504 <std+0x58>)
 801d4d0:	6263      	str	r3, [r4, #36]	@ 0x24
 801d4d2:	4b0d      	ldr	r3, [pc, #52]	@ (801d508 <std+0x5c>)
 801d4d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d4d6:	4b0d      	ldr	r3, [pc, #52]	@ (801d50c <std+0x60>)
 801d4d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d4da:	4b0d      	ldr	r3, [pc, #52]	@ (801d510 <std+0x64>)
 801d4dc:	6323      	str	r3, [r4, #48]	@ 0x30
 801d4de:	4b0d      	ldr	r3, [pc, #52]	@ (801d514 <std+0x68>)
 801d4e0:	6224      	str	r4, [r4, #32]
 801d4e2:	429c      	cmp	r4, r3
 801d4e4:	d006      	beq.n	801d4f4 <std+0x48>
 801d4e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d4ea:	4294      	cmp	r4, r2
 801d4ec:	d002      	beq.n	801d4f4 <std+0x48>
 801d4ee:	33d0      	adds	r3, #208	@ 0xd0
 801d4f0:	429c      	cmp	r4, r3
 801d4f2:	d105      	bne.n	801d500 <std+0x54>
 801d4f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d4fc:	f000 bb02 	b.w	801db04 <__retarget_lock_init_recursive>
 801d500:	bd10      	pop	{r4, pc}
 801d502:	bf00      	nop
 801d504:	0801d7c1 	.word	0x0801d7c1
 801d508:	0801d7e3 	.word	0x0801d7e3
 801d50c:	0801d81b 	.word	0x0801d81b
 801d510:	0801d83f 	.word	0x0801d83f
 801d514:	240089fc 	.word	0x240089fc

0801d518 <stdio_exit_handler>:
 801d518:	4a02      	ldr	r2, [pc, #8]	@ (801d524 <stdio_exit_handler+0xc>)
 801d51a:	4903      	ldr	r1, [pc, #12]	@ (801d528 <stdio_exit_handler+0x10>)
 801d51c:	4803      	ldr	r0, [pc, #12]	@ (801d52c <stdio_exit_handler+0x14>)
 801d51e:	f000 b869 	b.w	801d5f4 <_fwalk_sglue>
 801d522:	bf00      	nop
 801d524:	24000020 	.word	0x24000020
 801d528:	0801e66d 	.word	0x0801e66d
 801d52c:	24000030 	.word	0x24000030

0801d530 <cleanup_stdio>:
 801d530:	6841      	ldr	r1, [r0, #4]
 801d532:	4b0c      	ldr	r3, [pc, #48]	@ (801d564 <cleanup_stdio+0x34>)
 801d534:	4299      	cmp	r1, r3
 801d536:	b510      	push	{r4, lr}
 801d538:	4604      	mov	r4, r0
 801d53a:	d001      	beq.n	801d540 <cleanup_stdio+0x10>
 801d53c:	f001 f896 	bl	801e66c <_fflush_r>
 801d540:	68a1      	ldr	r1, [r4, #8]
 801d542:	4b09      	ldr	r3, [pc, #36]	@ (801d568 <cleanup_stdio+0x38>)
 801d544:	4299      	cmp	r1, r3
 801d546:	d002      	beq.n	801d54e <cleanup_stdio+0x1e>
 801d548:	4620      	mov	r0, r4
 801d54a:	f001 f88f 	bl	801e66c <_fflush_r>
 801d54e:	68e1      	ldr	r1, [r4, #12]
 801d550:	4b06      	ldr	r3, [pc, #24]	@ (801d56c <cleanup_stdio+0x3c>)
 801d552:	4299      	cmp	r1, r3
 801d554:	d004      	beq.n	801d560 <cleanup_stdio+0x30>
 801d556:	4620      	mov	r0, r4
 801d558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d55c:	f001 b886 	b.w	801e66c <_fflush_r>
 801d560:	bd10      	pop	{r4, pc}
 801d562:	bf00      	nop
 801d564:	240089fc 	.word	0x240089fc
 801d568:	24008a64 	.word	0x24008a64
 801d56c:	24008acc 	.word	0x24008acc

0801d570 <global_stdio_init.part.0>:
 801d570:	b510      	push	{r4, lr}
 801d572:	4b0b      	ldr	r3, [pc, #44]	@ (801d5a0 <global_stdio_init.part.0+0x30>)
 801d574:	4c0b      	ldr	r4, [pc, #44]	@ (801d5a4 <global_stdio_init.part.0+0x34>)
 801d576:	4a0c      	ldr	r2, [pc, #48]	@ (801d5a8 <global_stdio_init.part.0+0x38>)
 801d578:	601a      	str	r2, [r3, #0]
 801d57a:	4620      	mov	r0, r4
 801d57c:	2200      	movs	r2, #0
 801d57e:	2104      	movs	r1, #4
 801d580:	f7ff ff94 	bl	801d4ac <std>
 801d584:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d588:	2201      	movs	r2, #1
 801d58a:	2109      	movs	r1, #9
 801d58c:	f7ff ff8e 	bl	801d4ac <std>
 801d590:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d594:	2202      	movs	r2, #2
 801d596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d59a:	2112      	movs	r1, #18
 801d59c:	f7ff bf86 	b.w	801d4ac <std>
 801d5a0:	24008b34 	.word	0x24008b34
 801d5a4:	240089fc 	.word	0x240089fc
 801d5a8:	0801d519 	.word	0x0801d519

0801d5ac <__sfp_lock_acquire>:
 801d5ac:	4801      	ldr	r0, [pc, #4]	@ (801d5b4 <__sfp_lock_acquire+0x8>)
 801d5ae:	f000 baaa 	b.w	801db06 <__retarget_lock_acquire_recursive>
 801d5b2:	bf00      	nop
 801d5b4:	24008b3d 	.word	0x24008b3d

0801d5b8 <__sfp_lock_release>:
 801d5b8:	4801      	ldr	r0, [pc, #4]	@ (801d5c0 <__sfp_lock_release+0x8>)
 801d5ba:	f000 baa5 	b.w	801db08 <__retarget_lock_release_recursive>
 801d5be:	bf00      	nop
 801d5c0:	24008b3d 	.word	0x24008b3d

0801d5c4 <__sinit>:
 801d5c4:	b510      	push	{r4, lr}
 801d5c6:	4604      	mov	r4, r0
 801d5c8:	f7ff fff0 	bl	801d5ac <__sfp_lock_acquire>
 801d5cc:	6a23      	ldr	r3, [r4, #32]
 801d5ce:	b11b      	cbz	r3, 801d5d8 <__sinit+0x14>
 801d5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d5d4:	f7ff bff0 	b.w	801d5b8 <__sfp_lock_release>
 801d5d8:	4b04      	ldr	r3, [pc, #16]	@ (801d5ec <__sinit+0x28>)
 801d5da:	6223      	str	r3, [r4, #32]
 801d5dc:	4b04      	ldr	r3, [pc, #16]	@ (801d5f0 <__sinit+0x2c>)
 801d5de:	681b      	ldr	r3, [r3, #0]
 801d5e0:	2b00      	cmp	r3, #0
 801d5e2:	d1f5      	bne.n	801d5d0 <__sinit+0xc>
 801d5e4:	f7ff ffc4 	bl	801d570 <global_stdio_init.part.0>
 801d5e8:	e7f2      	b.n	801d5d0 <__sinit+0xc>
 801d5ea:	bf00      	nop
 801d5ec:	0801d531 	.word	0x0801d531
 801d5f0:	24008b34 	.word	0x24008b34

0801d5f4 <_fwalk_sglue>:
 801d5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d5f8:	4607      	mov	r7, r0
 801d5fa:	4688      	mov	r8, r1
 801d5fc:	4614      	mov	r4, r2
 801d5fe:	2600      	movs	r6, #0
 801d600:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d604:	f1b9 0901 	subs.w	r9, r9, #1
 801d608:	d505      	bpl.n	801d616 <_fwalk_sglue+0x22>
 801d60a:	6824      	ldr	r4, [r4, #0]
 801d60c:	2c00      	cmp	r4, #0
 801d60e:	d1f7      	bne.n	801d600 <_fwalk_sglue+0xc>
 801d610:	4630      	mov	r0, r6
 801d612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d616:	89ab      	ldrh	r3, [r5, #12]
 801d618:	2b01      	cmp	r3, #1
 801d61a:	d907      	bls.n	801d62c <_fwalk_sglue+0x38>
 801d61c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d620:	3301      	adds	r3, #1
 801d622:	d003      	beq.n	801d62c <_fwalk_sglue+0x38>
 801d624:	4629      	mov	r1, r5
 801d626:	4638      	mov	r0, r7
 801d628:	47c0      	blx	r8
 801d62a:	4306      	orrs	r6, r0
 801d62c:	3568      	adds	r5, #104	@ 0x68
 801d62e:	e7e9      	b.n	801d604 <_fwalk_sglue+0x10>

0801d630 <iprintf>:
 801d630:	b40f      	push	{r0, r1, r2, r3}
 801d632:	b507      	push	{r0, r1, r2, lr}
 801d634:	4906      	ldr	r1, [pc, #24]	@ (801d650 <iprintf+0x20>)
 801d636:	ab04      	add	r3, sp, #16
 801d638:	6808      	ldr	r0, [r1, #0]
 801d63a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d63e:	6881      	ldr	r1, [r0, #8]
 801d640:	9301      	str	r3, [sp, #4]
 801d642:	f000 fceb 	bl	801e01c <_vfiprintf_r>
 801d646:	b003      	add	sp, #12
 801d648:	f85d eb04 	ldr.w	lr, [sp], #4
 801d64c:	b004      	add	sp, #16
 801d64e:	4770      	bx	lr
 801d650:	2400002c 	.word	0x2400002c

0801d654 <_puts_r>:
 801d654:	6a03      	ldr	r3, [r0, #32]
 801d656:	b570      	push	{r4, r5, r6, lr}
 801d658:	6884      	ldr	r4, [r0, #8]
 801d65a:	4605      	mov	r5, r0
 801d65c:	460e      	mov	r6, r1
 801d65e:	b90b      	cbnz	r3, 801d664 <_puts_r+0x10>
 801d660:	f7ff ffb0 	bl	801d5c4 <__sinit>
 801d664:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d666:	07db      	lsls	r3, r3, #31
 801d668:	d405      	bmi.n	801d676 <_puts_r+0x22>
 801d66a:	89a3      	ldrh	r3, [r4, #12]
 801d66c:	0598      	lsls	r0, r3, #22
 801d66e:	d402      	bmi.n	801d676 <_puts_r+0x22>
 801d670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d672:	f000 fa48 	bl	801db06 <__retarget_lock_acquire_recursive>
 801d676:	89a3      	ldrh	r3, [r4, #12]
 801d678:	0719      	lsls	r1, r3, #28
 801d67a:	d502      	bpl.n	801d682 <_puts_r+0x2e>
 801d67c:	6923      	ldr	r3, [r4, #16]
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d135      	bne.n	801d6ee <_puts_r+0x9a>
 801d682:	4621      	mov	r1, r4
 801d684:	4628      	mov	r0, r5
 801d686:	f000 f959 	bl	801d93c <__swsetup_r>
 801d68a:	b380      	cbz	r0, 801d6ee <_puts_r+0x9a>
 801d68c:	f04f 35ff 	mov.w	r5, #4294967295
 801d690:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d692:	07da      	lsls	r2, r3, #31
 801d694:	d405      	bmi.n	801d6a2 <_puts_r+0x4e>
 801d696:	89a3      	ldrh	r3, [r4, #12]
 801d698:	059b      	lsls	r3, r3, #22
 801d69a:	d402      	bmi.n	801d6a2 <_puts_r+0x4e>
 801d69c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d69e:	f000 fa33 	bl	801db08 <__retarget_lock_release_recursive>
 801d6a2:	4628      	mov	r0, r5
 801d6a4:	bd70      	pop	{r4, r5, r6, pc}
 801d6a6:	2b00      	cmp	r3, #0
 801d6a8:	da04      	bge.n	801d6b4 <_puts_r+0x60>
 801d6aa:	69a2      	ldr	r2, [r4, #24]
 801d6ac:	429a      	cmp	r2, r3
 801d6ae:	dc17      	bgt.n	801d6e0 <_puts_r+0x8c>
 801d6b0:	290a      	cmp	r1, #10
 801d6b2:	d015      	beq.n	801d6e0 <_puts_r+0x8c>
 801d6b4:	6823      	ldr	r3, [r4, #0]
 801d6b6:	1c5a      	adds	r2, r3, #1
 801d6b8:	6022      	str	r2, [r4, #0]
 801d6ba:	7019      	strb	r1, [r3, #0]
 801d6bc:	68a3      	ldr	r3, [r4, #8]
 801d6be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d6c2:	3b01      	subs	r3, #1
 801d6c4:	60a3      	str	r3, [r4, #8]
 801d6c6:	2900      	cmp	r1, #0
 801d6c8:	d1ed      	bne.n	801d6a6 <_puts_r+0x52>
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	da11      	bge.n	801d6f2 <_puts_r+0x9e>
 801d6ce:	4622      	mov	r2, r4
 801d6d0:	210a      	movs	r1, #10
 801d6d2:	4628      	mov	r0, r5
 801d6d4:	f000 f8f4 	bl	801d8c0 <__swbuf_r>
 801d6d8:	3001      	adds	r0, #1
 801d6da:	d0d7      	beq.n	801d68c <_puts_r+0x38>
 801d6dc:	250a      	movs	r5, #10
 801d6de:	e7d7      	b.n	801d690 <_puts_r+0x3c>
 801d6e0:	4622      	mov	r2, r4
 801d6e2:	4628      	mov	r0, r5
 801d6e4:	f000 f8ec 	bl	801d8c0 <__swbuf_r>
 801d6e8:	3001      	adds	r0, #1
 801d6ea:	d1e7      	bne.n	801d6bc <_puts_r+0x68>
 801d6ec:	e7ce      	b.n	801d68c <_puts_r+0x38>
 801d6ee:	3e01      	subs	r6, #1
 801d6f0:	e7e4      	b.n	801d6bc <_puts_r+0x68>
 801d6f2:	6823      	ldr	r3, [r4, #0]
 801d6f4:	1c5a      	adds	r2, r3, #1
 801d6f6:	6022      	str	r2, [r4, #0]
 801d6f8:	220a      	movs	r2, #10
 801d6fa:	701a      	strb	r2, [r3, #0]
 801d6fc:	e7ee      	b.n	801d6dc <_puts_r+0x88>
	...

0801d700 <puts>:
 801d700:	4b02      	ldr	r3, [pc, #8]	@ (801d70c <puts+0xc>)
 801d702:	4601      	mov	r1, r0
 801d704:	6818      	ldr	r0, [r3, #0]
 801d706:	f7ff bfa5 	b.w	801d654 <_puts_r>
 801d70a:	bf00      	nop
 801d70c:	2400002c 	.word	0x2400002c

0801d710 <sniprintf>:
 801d710:	b40c      	push	{r2, r3}
 801d712:	b530      	push	{r4, r5, lr}
 801d714:	4b18      	ldr	r3, [pc, #96]	@ (801d778 <sniprintf+0x68>)
 801d716:	1e0c      	subs	r4, r1, #0
 801d718:	681d      	ldr	r5, [r3, #0]
 801d71a:	b09d      	sub	sp, #116	@ 0x74
 801d71c:	da08      	bge.n	801d730 <sniprintf+0x20>
 801d71e:	238b      	movs	r3, #139	@ 0x8b
 801d720:	602b      	str	r3, [r5, #0]
 801d722:	f04f 30ff 	mov.w	r0, #4294967295
 801d726:	b01d      	add	sp, #116	@ 0x74
 801d728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d72c:	b002      	add	sp, #8
 801d72e:	4770      	bx	lr
 801d730:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d734:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d738:	f04f 0300 	mov.w	r3, #0
 801d73c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d73e:	bf14      	ite	ne
 801d740:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d744:	4623      	moveq	r3, r4
 801d746:	9304      	str	r3, [sp, #16]
 801d748:	9307      	str	r3, [sp, #28]
 801d74a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d74e:	9002      	str	r0, [sp, #8]
 801d750:	9006      	str	r0, [sp, #24]
 801d752:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d756:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d758:	ab21      	add	r3, sp, #132	@ 0x84
 801d75a:	a902      	add	r1, sp, #8
 801d75c:	4628      	mov	r0, r5
 801d75e:	9301      	str	r3, [sp, #4]
 801d760:	f000 fb36 	bl	801ddd0 <_svfiprintf_r>
 801d764:	1c43      	adds	r3, r0, #1
 801d766:	bfbc      	itt	lt
 801d768:	238b      	movlt	r3, #139	@ 0x8b
 801d76a:	602b      	strlt	r3, [r5, #0]
 801d76c:	2c00      	cmp	r4, #0
 801d76e:	d0da      	beq.n	801d726 <sniprintf+0x16>
 801d770:	9b02      	ldr	r3, [sp, #8]
 801d772:	2200      	movs	r2, #0
 801d774:	701a      	strb	r2, [r3, #0]
 801d776:	e7d6      	b.n	801d726 <sniprintf+0x16>
 801d778:	2400002c 	.word	0x2400002c

0801d77c <siprintf>:
 801d77c:	b40e      	push	{r1, r2, r3}
 801d77e:	b510      	push	{r4, lr}
 801d780:	b09d      	sub	sp, #116	@ 0x74
 801d782:	ab1f      	add	r3, sp, #124	@ 0x7c
 801d784:	9002      	str	r0, [sp, #8]
 801d786:	9006      	str	r0, [sp, #24]
 801d788:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801d78c:	480a      	ldr	r0, [pc, #40]	@ (801d7b8 <siprintf+0x3c>)
 801d78e:	9107      	str	r1, [sp, #28]
 801d790:	9104      	str	r1, [sp, #16]
 801d792:	490a      	ldr	r1, [pc, #40]	@ (801d7bc <siprintf+0x40>)
 801d794:	f853 2b04 	ldr.w	r2, [r3], #4
 801d798:	9105      	str	r1, [sp, #20]
 801d79a:	2400      	movs	r4, #0
 801d79c:	a902      	add	r1, sp, #8
 801d79e:	6800      	ldr	r0, [r0, #0]
 801d7a0:	9301      	str	r3, [sp, #4]
 801d7a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 801d7a4:	f000 fb14 	bl	801ddd0 <_svfiprintf_r>
 801d7a8:	9b02      	ldr	r3, [sp, #8]
 801d7aa:	701c      	strb	r4, [r3, #0]
 801d7ac:	b01d      	add	sp, #116	@ 0x74
 801d7ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d7b2:	b003      	add	sp, #12
 801d7b4:	4770      	bx	lr
 801d7b6:	bf00      	nop
 801d7b8:	2400002c 	.word	0x2400002c
 801d7bc:	ffff0208 	.word	0xffff0208

0801d7c0 <__sread>:
 801d7c0:	b510      	push	{r4, lr}
 801d7c2:	460c      	mov	r4, r1
 801d7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d7c8:	f000 f94e 	bl	801da68 <_read_r>
 801d7cc:	2800      	cmp	r0, #0
 801d7ce:	bfab      	itete	ge
 801d7d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d7d2:	89a3      	ldrhlt	r3, [r4, #12]
 801d7d4:	181b      	addge	r3, r3, r0
 801d7d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d7da:	bfac      	ite	ge
 801d7dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d7de:	81a3      	strhlt	r3, [r4, #12]
 801d7e0:	bd10      	pop	{r4, pc}

0801d7e2 <__swrite>:
 801d7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7e6:	461f      	mov	r7, r3
 801d7e8:	898b      	ldrh	r3, [r1, #12]
 801d7ea:	05db      	lsls	r3, r3, #23
 801d7ec:	4605      	mov	r5, r0
 801d7ee:	460c      	mov	r4, r1
 801d7f0:	4616      	mov	r6, r2
 801d7f2:	d505      	bpl.n	801d800 <__swrite+0x1e>
 801d7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d7f8:	2302      	movs	r3, #2
 801d7fa:	2200      	movs	r2, #0
 801d7fc:	f000 f922 	bl	801da44 <_lseek_r>
 801d800:	89a3      	ldrh	r3, [r4, #12]
 801d802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d806:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d80a:	81a3      	strh	r3, [r4, #12]
 801d80c:	4632      	mov	r2, r6
 801d80e:	463b      	mov	r3, r7
 801d810:	4628      	mov	r0, r5
 801d812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d816:	f000 b939 	b.w	801da8c <_write_r>

0801d81a <__sseek>:
 801d81a:	b510      	push	{r4, lr}
 801d81c:	460c      	mov	r4, r1
 801d81e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d822:	f000 f90f 	bl	801da44 <_lseek_r>
 801d826:	1c43      	adds	r3, r0, #1
 801d828:	89a3      	ldrh	r3, [r4, #12]
 801d82a:	bf15      	itete	ne
 801d82c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d82e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d832:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d836:	81a3      	strheq	r3, [r4, #12]
 801d838:	bf18      	it	ne
 801d83a:	81a3      	strhne	r3, [r4, #12]
 801d83c:	bd10      	pop	{r4, pc}

0801d83e <__sclose>:
 801d83e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d842:	f000 b8ef 	b.w	801da24 <_close_r>

0801d846 <_vsniprintf_r>:
 801d846:	b530      	push	{r4, r5, lr}
 801d848:	4614      	mov	r4, r2
 801d84a:	2c00      	cmp	r4, #0
 801d84c:	b09b      	sub	sp, #108	@ 0x6c
 801d84e:	4605      	mov	r5, r0
 801d850:	461a      	mov	r2, r3
 801d852:	da05      	bge.n	801d860 <_vsniprintf_r+0x1a>
 801d854:	238b      	movs	r3, #139	@ 0x8b
 801d856:	6003      	str	r3, [r0, #0]
 801d858:	f04f 30ff 	mov.w	r0, #4294967295
 801d85c:	b01b      	add	sp, #108	@ 0x6c
 801d85e:	bd30      	pop	{r4, r5, pc}
 801d860:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d864:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d868:	f04f 0300 	mov.w	r3, #0
 801d86c:	9319      	str	r3, [sp, #100]	@ 0x64
 801d86e:	bf14      	ite	ne
 801d870:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d874:	4623      	moveq	r3, r4
 801d876:	9302      	str	r3, [sp, #8]
 801d878:	9305      	str	r3, [sp, #20]
 801d87a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d87e:	9100      	str	r1, [sp, #0]
 801d880:	9104      	str	r1, [sp, #16]
 801d882:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d886:	4669      	mov	r1, sp
 801d888:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d88a:	f000 faa1 	bl	801ddd0 <_svfiprintf_r>
 801d88e:	1c43      	adds	r3, r0, #1
 801d890:	bfbc      	itt	lt
 801d892:	238b      	movlt	r3, #139	@ 0x8b
 801d894:	602b      	strlt	r3, [r5, #0]
 801d896:	2c00      	cmp	r4, #0
 801d898:	d0e0      	beq.n	801d85c <_vsniprintf_r+0x16>
 801d89a:	9b00      	ldr	r3, [sp, #0]
 801d89c:	2200      	movs	r2, #0
 801d89e:	701a      	strb	r2, [r3, #0]
 801d8a0:	e7dc      	b.n	801d85c <_vsniprintf_r+0x16>
	...

0801d8a4 <vsniprintf>:
 801d8a4:	b507      	push	{r0, r1, r2, lr}
 801d8a6:	9300      	str	r3, [sp, #0]
 801d8a8:	4613      	mov	r3, r2
 801d8aa:	460a      	mov	r2, r1
 801d8ac:	4601      	mov	r1, r0
 801d8ae:	4803      	ldr	r0, [pc, #12]	@ (801d8bc <vsniprintf+0x18>)
 801d8b0:	6800      	ldr	r0, [r0, #0]
 801d8b2:	f7ff ffc8 	bl	801d846 <_vsniprintf_r>
 801d8b6:	b003      	add	sp, #12
 801d8b8:	f85d fb04 	ldr.w	pc, [sp], #4
 801d8bc:	2400002c 	.word	0x2400002c

0801d8c0 <__swbuf_r>:
 801d8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8c2:	460e      	mov	r6, r1
 801d8c4:	4614      	mov	r4, r2
 801d8c6:	4605      	mov	r5, r0
 801d8c8:	b118      	cbz	r0, 801d8d2 <__swbuf_r+0x12>
 801d8ca:	6a03      	ldr	r3, [r0, #32]
 801d8cc:	b90b      	cbnz	r3, 801d8d2 <__swbuf_r+0x12>
 801d8ce:	f7ff fe79 	bl	801d5c4 <__sinit>
 801d8d2:	69a3      	ldr	r3, [r4, #24]
 801d8d4:	60a3      	str	r3, [r4, #8]
 801d8d6:	89a3      	ldrh	r3, [r4, #12]
 801d8d8:	071a      	lsls	r2, r3, #28
 801d8da:	d501      	bpl.n	801d8e0 <__swbuf_r+0x20>
 801d8dc:	6923      	ldr	r3, [r4, #16]
 801d8de:	b943      	cbnz	r3, 801d8f2 <__swbuf_r+0x32>
 801d8e0:	4621      	mov	r1, r4
 801d8e2:	4628      	mov	r0, r5
 801d8e4:	f000 f82a 	bl	801d93c <__swsetup_r>
 801d8e8:	b118      	cbz	r0, 801d8f2 <__swbuf_r+0x32>
 801d8ea:	f04f 37ff 	mov.w	r7, #4294967295
 801d8ee:	4638      	mov	r0, r7
 801d8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8f2:	6823      	ldr	r3, [r4, #0]
 801d8f4:	6922      	ldr	r2, [r4, #16]
 801d8f6:	1a98      	subs	r0, r3, r2
 801d8f8:	6963      	ldr	r3, [r4, #20]
 801d8fa:	b2f6      	uxtb	r6, r6
 801d8fc:	4283      	cmp	r3, r0
 801d8fe:	4637      	mov	r7, r6
 801d900:	dc05      	bgt.n	801d90e <__swbuf_r+0x4e>
 801d902:	4621      	mov	r1, r4
 801d904:	4628      	mov	r0, r5
 801d906:	f000 feb1 	bl	801e66c <_fflush_r>
 801d90a:	2800      	cmp	r0, #0
 801d90c:	d1ed      	bne.n	801d8ea <__swbuf_r+0x2a>
 801d90e:	68a3      	ldr	r3, [r4, #8]
 801d910:	3b01      	subs	r3, #1
 801d912:	60a3      	str	r3, [r4, #8]
 801d914:	6823      	ldr	r3, [r4, #0]
 801d916:	1c5a      	adds	r2, r3, #1
 801d918:	6022      	str	r2, [r4, #0]
 801d91a:	701e      	strb	r6, [r3, #0]
 801d91c:	6962      	ldr	r2, [r4, #20]
 801d91e:	1c43      	adds	r3, r0, #1
 801d920:	429a      	cmp	r2, r3
 801d922:	d004      	beq.n	801d92e <__swbuf_r+0x6e>
 801d924:	89a3      	ldrh	r3, [r4, #12]
 801d926:	07db      	lsls	r3, r3, #31
 801d928:	d5e1      	bpl.n	801d8ee <__swbuf_r+0x2e>
 801d92a:	2e0a      	cmp	r6, #10
 801d92c:	d1df      	bne.n	801d8ee <__swbuf_r+0x2e>
 801d92e:	4621      	mov	r1, r4
 801d930:	4628      	mov	r0, r5
 801d932:	f000 fe9b 	bl	801e66c <_fflush_r>
 801d936:	2800      	cmp	r0, #0
 801d938:	d0d9      	beq.n	801d8ee <__swbuf_r+0x2e>
 801d93a:	e7d6      	b.n	801d8ea <__swbuf_r+0x2a>

0801d93c <__swsetup_r>:
 801d93c:	b538      	push	{r3, r4, r5, lr}
 801d93e:	4b29      	ldr	r3, [pc, #164]	@ (801d9e4 <__swsetup_r+0xa8>)
 801d940:	4605      	mov	r5, r0
 801d942:	6818      	ldr	r0, [r3, #0]
 801d944:	460c      	mov	r4, r1
 801d946:	b118      	cbz	r0, 801d950 <__swsetup_r+0x14>
 801d948:	6a03      	ldr	r3, [r0, #32]
 801d94a:	b90b      	cbnz	r3, 801d950 <__swsetup_r+0x14>
 801d94c:	f7ff fe3a 	bl	801d5c4 <__sinit>
 801d950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d954:	0719      	lsls	r1, r3, #28
 801d956:	d422      	bmi.n	801d99e <__swsetup_r+0x62>
 801d958:	06da      	lsls	r2, r3, #27
 801d95a:	d407      	bmi.n	801d96c <__swsetup_r+0x30>
 801d95c:	2209      	movs	r2, #9
 801d95e:	602a      	str	r2, [r5, #0]
 801d960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d964:	81a3      	strh	r3, [r4, #12]
 801d966:	f04f 30ff 	mov.w	r0, #4294967295
 801d96a:	e033      	b.n	801d9d4 <__swsetup_r+0x98>
 801d96c:	0758      	lsls	r0, r3, #29
 801d96e:	d512      	bpl.n	801d996 <__swsetup_r+0x5a>
 801d970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d972:	b141      	cbz	r1, 801d986 <__swsetup_r+0x4a>
 801d974:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d978:	4299      	cmp	r1, r3
 801d97a:	d002      	beq.n	801d982 <__swsetup_r+0x46>
 801d97c:	4628      	mov	r0, r5
 801d97e:	f000 f8d3 	bl	801db28 <_free_r>
 801d982:	2300      	movs	r3, #0
 801d984:	6363      	str	r3, [r4, #52]	@ 0x34
 801d986:	89a3      	ldrh	r3, [r4, #12]
 801d988:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d98c:	81a3      	strh	r3, [r4, #12]
 801d98e:	2300      	movs	r3, #0
 801d990:	6063      	str	r3, [r4, #4]
 801d992:	6923      	ldr	r3, [r4, #16]
 801d994:	6023      	str	r3, [r4, #0]
 801d996:	89a3      	ldrh	r3, [r4, #12]
 801d998:	f043 0308 	orr.w	r3, r3, #8
 801d99c:	81a3      	strh	r3, [r4, #12]
 801d99e:	6923      	ldr	r3, [r4, #16]
 801d9a0:	b94b      	cbnz	r3, 801d9b6 <__swsetup_r+0x7a>
 801d9a2:	89a3      	ldrh	r3, [r4, #12]
 801d9a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d9a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d9ac:	d003      	beq.n	801d9b6 <__swsetup_r+0x7a>
 801d9ae:	4621      	mov	r1, r4
 801d9b0:	4628      	mov	r0, r5
 801d9b2:	f000 fea9 	bl	801e708 <__smakebuf_r>
 801d9b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d9ba:	f013 0201 	ands.w	r2, r3, #1
 801d9be:	d00a      	beq.n	801d9d6 <__swsetup_r+0x9a>
 801d9c0:	2200      	movs	r2, #0
 801d9c2:	60a2      	str	r2, [r4, #8]
 801d9c4:	6962      	ldr	r2, [r4, #20]
 801d9c6:	4252      	negs	r2, r2
 801d9c8:	61a2      	str	r2, [r4, #24]
 801d9ca:	6922      	ldr	r2, [r4, #16]
 801d9cc:	b942      	cbnz	r2, 801d9e0 <__swsetup_r+0xa4>
 801d9ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d9d2:	d1c5      	bne.n	801d960 <__swsetup_r+0x24>
 801d9d4:	bd38      	pop	{r3, r4, r5, pc}
 801d9d6:	0799      	lsls	r1, r3, #30
 801d9d8:	bf58      	it	pl
 801d9da:	6962      	ldrpl	r2, [r4, #20]
 801d9dc:	60a2      	str	r2, [r4, #8]
 801d9de:	e7f4      	b.n	801d9ca <__swsetup_r+0x8e>
 801d9e0:	2000      	movs	r0, #0
 801d9e2:	e7f7      	b.n	801d9d4 <__swsetup_r+0x98>
 801d9e4:	2400002c 	.word	0x2400002c

0801d9e8 <memset>:
 801d9e8:	4402      	add	r2, r0
 801d9ea:	4603      	mov	r3, r0
 801d9ec:	4293      	cmp	r3, r2
 801d9ee:	d100      	bne.n	801d9f2 <memset+0xa>
 801d9f0:	4770      	bx	lr
 801d9f2:	f803 1b01 	strb.w	r1, [r3], #1
 801d9f6:	e7f9      	b.n	801d9ec <memset+0x4>

0801d9f8 <strstr>:
 801d9f8:	780a      	ldrb	r2, [r1, #0]
 801d9fa:	b570      	push	{r4, r5, r6, lr}
 801d9fc:	b96a      	cbnz	r2, 801da1a <strstr+0x22>
 801d9fe:	bd70      	pop	{r4, r5, r6, pc}
 801da00:	429a      	cmp	r2, r3
 801da02:	d109      	bne.n	801da18 <strstr+0x20>
 801da04:	460c      	mov	r4, r1
 801da06:	4605      	mov	r5, r0
 801da08:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d0f6      	beq.n	801d9fe <strstr+0x6>
 801da10:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801da14:	429e      	cmp	r6, r3
 801da16:	d0f7      	beq.n	801da08 <strstr+0x10>
 801da18:	3001      	adds	r0, #1
 801da1a:	7803      	ldrb	r3, [r0, #0]
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	d1ef      	bne.n	801da00 <strstr+0x8>
 801da20:	4618      	mov	r0, r3
 801da22:	e7ec      	b.n	801d9fe <strstr+0x6>

0801da24 <_close_r>:
 801da24:	b538      	push	{r3, r4, r5, lr}
 801da26:	4d06      	ldr	r5, [pc, #24]	@ (801da40 <_close_r+0x1c>)
 801da28:	2300      	movs	r3, #0
 801da2a:	4604      	mov	r4, r0
 801da2c:	4608      	mov	r0, r1
 801da2e:	602b      	str	r3, [r5, #0]
 801da30:	f7e4 fc96 	bl	8002360 <_close>
 801da34:	1c43      	adds	r3, r0, #1
 801da36:	d102      	bne.n	801da3e <_close_r+0x1a>
 801da38:	682b      	ldr	r3, [r5, #0]
 801da3a:	b103      	cbz	r3, 801da3e <_close_r+0x1a>
 801da3c:	6023      	str	r3, [r4, #0]
 801da3e:	bd38      	pop	{r3, r4, r5, pc}
 801da40:	24008b38 	.word	0x24008b38

0801da44 <_lseek_r>:
 801da44:	b538      	push	{r3, r4, r5, lr}
 801da46:	4d07      	ldr	r5, [pc, #28]	@ (801da64 <_lseek_r+0x20>)
 801da48:	4604      	mov	r4, r0
 801da4a:	4608      	mov	r0, r1
 801da4c:	4611      	mov	r1, r2
 801da4e:	2200      	movs	r2, #0
 801da50:	602a      	str	r2, [r5, #0]
 801da52:	461a      	mov	r2, r3
 801da54:	f7e4 fcab 	bl	80023ae <_lseek>
 801da58:	1c43      	adds	r3, r0, #1
 801da5a:	d102      	bne.n	801da62 <_lseek_r+0x1e>
 801da5c:	682b      	ldr	r3, [r5, #0]
 801da5e:	b103      	cbz	r3, 801da62 <_lseek_r+0x1e>
 801da60:	6023      	str	r3, [r4, #0]
 801da62:	bd38      	pop	{r3, r4, r5, pc}
 801da64:	24008b38 	.word	0x24008b38

0801da68 <_read_r>:
 801da68:	b538      	push	{r3, r4, r5, lr}
 801da6a:	4d07      	ldr	r5, [pc, #28]	@ (801da88 <_read_r+0x20>)
 801da6c:	4604      	mov	r4, r0
 801da6e:	4608      	mov	r0, r1
 801da70:	4611      	mov	r1, r2
 801da72:	2200      	movs	r2, #0
 801da74:	602a      	str	r2, [r5, #0]
 801da76:	461a      	mov	r2, r3
 801da78:	f7e4 fc39 	bl	80022ee <_read>
 801da7c:	1c43      	adds	r3, r0, #1
 801da7e:	d102      	bne.n	801da86 <_read_r+0x1e>
 801da80:	682b      	ldr	r3, [r5, #0]
 801da82:	b103      	cbz	r3, 801da86 <_read_r+0x1e>
 801da84:	6023      	str	r3, [r4, #0]
 801da86:	bd38      	pop	{r3, r4, r5, pc}
 801da88:	24008b38 	.word	0x24008b38

0801da8c <_write_r>:
 801da8c:	b538      	push	{r3, r4, r5, lr}
 801da8e:	4d07      	ldr	r5, [pc, #28]	@ (801daac <_write_r+0x20>)
 801da90:	4604      	mov	r4, r0
 801da92:	4608      	mov	r0, r1
 801da94:	4611      	mov	r1, r2
 801da96:	2200      	movs	r2, #0
 801da98:	602a      	str	r2, [r5, #0]
 801da9a:	461a      	mov	r2, r3
 801da9c:	f7e4 fc44 	bl	8002328 <_write>
 801daa0:	1c43      	adds	r3, r0, #1
 801daa2:	d102      	bne.n	801daaa <_write_r+0x1e>
 801daa4:	682b      	ldr	r3, [r5, #0]
 801daa6:	b103      	cbz	r3, 801daaa <_write_r+0x1e>
 801daa8:	6023      	str	r3, [r4, #0]
 801daaa:	bd38      	pop	{r3, r4, r5, pc}
 801daac:	24008b38 	.word	0x24008b38

0801dab0 <__errno>:
 801dab0:	4b01      	ldr	r3, [pc, #4]	@ (801dab8 <__errno+0x8>)
 801dab2:	6818      	ldr	r0, [r3, #0]
 801dab4:	4770      	bx	lr
 801dab6:	bf00      	nop
 801dab8:	2400002c 	.word	0x2400002c

0801dabc <__libc_init_array>:
 801dabc:	b570      	push	{r4, r5, r6, lr}
 801dabe:	4d0d      	ldr	r5, [pc, #52]	@ (801daf4 <__libc_init_array+0x38>)
 801dac0:	4c0d      	ldr	r4, [pc, #52]	@ (801daf8 <__libc_init_array+0x3c>)
 801dac2:	1b64      	subs	r4, r4, r5
 801dac4:	10a4      	asrs	r4, r4, #2
 801dac6:	2600      	movs	r6, #0
 801dac8:	42a6      	cmp	r6, r4
 801daca:	d109      	bne.n	801dae0 <__libc_init_array+0x24>
 801dacc:	4d0b      	ldr	r5, [pc, #44]	@ (801dafc <__libc_init_array+0x40>)
 801dace:	4c0c      	ldr	r4, [pc, #48]	@ (801db00 <__libc_init_array+0x44>)
 801dad0:	f000 fed8 	bl	801e884 <_init>
 801dad4:	1b64      	subs	r4, r4, r5
 801dad6:	10a4      	asrs	r4, r4, #2
 801dad8:	2600      	movs	r6, #0
 801dada:	42a6      	cmp	r6, r4
 801dadc:	d105      	bne.n	801daea <__libc_init_array+0x2e>
 801dade:	bd70      	pop	{r4, r5, r6, pc}
 801dae0:	f855 3b04 	ldr.w	r3, [r5], #4
 801dae4:	4798      	blx	r3
 801dae6:	3601      	adds	r6, #1
 801dae8:	e7ee      	b.n	801dac8 <__libc_init_array+0xc>
 801daea:	f855 3b04 	ldr.w	r3, [r5], #4
 801daee:	4798      	blx	r3
 801daf0:	3601      	adds	r6, #1
 801daf2:	e7f2      	b.n	801dada <__libc_init_array+0x1e>
 801daf4:	08032194 	.word	0x08032194
 801daf8:	08032194 	.word	0x08032194
 801dafc:	08032194 	.word	0x08032194
 801db00:	08032198 	.word	0x08032198

0801db04 <__retarget_lock_init_recursive>:
 801db04:	4770      	bx	lr

0801db06 <__retarget_lock_acquire_recursive>:
 801db06:	4770      	bx	lr

0801db08 <__retarget_lock_release_recursive>:
 801db08:	4770      	bx	lr

0801db0a <memcpy>:
 801db0a:	440a      	add	r2, r1
 801db0c:	4291      	cmp	r1, r2
 801db0e:	f100 33ff 	add.w	r3, r0, #4294967295
 801db12:	d100      	bne.n	801db16 <memcpy+0xc>
 801db14:	4770      	bx	lr
 801db16:	b510      	push	{r4, lr}
 801db18:	f811 4b01 	ldrb.w	r4, [r1], #1
 801db1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801db20:	4291      	cmp	r1, r2
 801db22:	d1f9      	bne.n	801db18 <memcpy+0xe>
 801db24:	bd10      	pop	{r4, pc}
	...

0801db28 <_free_r>:
 801db28:	b538      	push	{r3, r4, r5, lr}
 801db2a:	4605      	mov	r5, r0
 801db2c:	2900      	cmp	r1, #0
 801db2e:	d041      	beq.n	801dbb4 <_free_r+0x8c>
 801db30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801db34:	1f0c      	subs	r4, r1, #4
 801db36:	2b00      	cmp	r3, #0
 801db38:	bfb8      	it	lt
 801db3a:	18e4      	addlt	r4, r4, r3
 801db3c:	f000 f8e0 	bl	801dd00 <__malloc_lock>
 801db40:	4a1d      	ldr	r2, [pc, #116]	@ (801dbb8 <_free_r+0x90>)
 801db42:	6813      	ldr	r3, [r2, #0]
 801db44:	b933      	cbnz	r3, 801db54 <_free_r+0x2c>
 801db46:	6063      	str	r3, [r4, #4]
 801db48:	6014      	str	r4, [r2, #0]
 801db4a:	4628      	mov	r0, r5
 801db4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801db50:	f000 b8dc 	b.w	801dd0c <__malloc_unlock>
 801db54:	42a3      	cmp	r3, r4
 801db56:	d908      	bls.n	801db6a <_free_r+0x42>
 801db58:	6820      	ldr	r0, [r4, #0]
 801db5a:	1821      	adds	r1, r4, r0
 801db5c:	428b      	cmp	r3, r1
 801db5e:	bf01      	itttt	eq
 801db60:	6819      	ldreq	r1, [r3, #0]
 801db62:	685b      	ldreq	r3, [r3, #4]
 801db64:	1809      	addeq	r1, r1, r0
 801db66:	6021      	streq	r1, [r4, #0]
 801db68:	e7ed      	b.n	801db46 <_free_r+0x1e>
 801db6a:	461a      	mov	r2, r3
 801db6c:	685b      	ldr	r3, [r3, #4]
 801db6e:	b10b      	cbz	r3, 801db74 <_free_r+0x4c>
 801db70:	42a3      	cmp	r3, r4
 801db72:	d9fa      	bls.n	801db6a <_free_r+0x42>
 801db74:	6811      	ldr	r1, [r2, #0]
 801db76:	1850      	adds	r0, r2, r1
 801db78:	42a0      	cmp	r0, r4
 801db7a:	d10b      	bne.n	801db94 <_free_r+0x6c>
 801db7c:	6820      	ldr	r0, [r4, #0]
 801db7e:	4401      	add	r1, r0
 801db80:	1850      	adds	r0, r2, r1
 801db82:	4283      	cmp	r3, r0
 801db84:	6011      	str	r1, [r2, #0]
 801db86:	d1e0      	bne.n	801db4a <_free_r+0x22>
 801db88:	6818      	ldr	r0, [r3, #0]
 801db8a:	685b      	ldr	r3, [r3, #4]
 801db8c:	6053      	str	r3, [r2, #4]
 801db8e:	4408      	add	r0, r1
 801db90:	6010      	str	r0, [r2, #0]
 801db92:	e7da      	b.n	801db4a <_free_r+0x22>
 801db94:	d902      	bls.n	801db9c <_free_r+0x74>
 801db96:	230c      	movs	r3, #12
 801db98:	602b      	str	r3, [r5, #0]
 801db9a:	e7d6      	b.n	801db4a <_free_r+0x22>
 801db9c:	6820      	ldr	r0, [r4, #0]
 801db9e:	1821      	adds	r1, r4, r0
 801dba0:	428b      	cmp	r3, r1
 801dba2:	bf04      	itt	eq
 801dba4:	6819      	ldreq	r1, [r3, #0]
 801dba6:	685b      	ldreq	r3, [r3, #4]
 801dba8:	6063      	str	r3, [r4, #4]
 801dbaa:	bf04      	itt	eq
 801dbac:	1809      	addeq	r1, r1, r0
 801dbae:	6021      	streq	r1, [r4, #0]
 801dbb0:	6054      	str	r4, [r2, #4]
 801dbb2:	e7ca      	b.n	801db4a <_free_r+0x22>
 801dbb4:	bd38      	pop	{r3, r4, r5, pc}
 801dbb6:	bf00      	nop
 801dbb8:	24008b44 	.word	0x24008b44

0801dbbc <sbrk_aligned>:
 801dbbc:	b570      	push	{r4, r5, r6, lr}
 801dbbe:	4e0f      	ldr	r6, [pc, #60]	@ (801dbfc <sbrk_aligned+0x40>)
 801dbc0:	460c      	mov	r4, r1
 801dbc2:	6831      	ldr	r1, [r6, #0]
 801dbc4:	4605      	mov	r5, r0
 801dbc6:	b911      	cbnz	r1, 801dbce <sbrk_aligned+0x12>
 801dbc8:	f000 fe16 	bl	801e7f8 <_sbrk_r>
 801dbcc:	6030      	str	r0, [r6, #0]
 801dbce:	4621      	mov	r1, r4
 801dbd0:	4628      	mov	r0, r5
 801dbd2:	f000 fe11 	bl	801e7f8 <_sbrk_r>
 801dbd6:	1c43      	adds	r3, r0, #1
 801dbd8:	d103      	bne.n	801dbe2 <sbrk_aligned+0x26>
 801dbda:	f04f 34ff 	mov.w	r4, #4294967295
 801dbde:	4620      	mov	r0, r4
 801dbe0:	bd70      	pop	{r4, r5, r6, pc}
 801dbe2:	1cc4      	adds	r4, r0, #3
 801dbe4:	f024 0403 	bic.w	r4, r4, #3
 801dbe8:	42a0      	cmp	r0, r4
 801dbea:	d0f8      	beq.n	801dbde <sbrk_aligned+0x22>
 801dbec:	1a21      	subs	r1, r4, r0
 801dbee:	4628      	mov	r0, r5
 801dbf0:	f000 fe02 	bl	801e7f8 <_sbrk_r>
 801dbf4:	3001      	adds	r0, #1
 801dbf6:	d1f2      	bne.n	801dbde <sbrk_aligned+0x22>
 801dbf8:	e7ef      	b.n	801dbda <sbrk_aligned+0x1e>
 801dbfa:	bf00      	nop
 801dbfc:	24008b40 	.word	0x24008b40

0801dc00 <_malloc_r>:
 801dc00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc04:	1ccd      	adds	r5, r1, #3
 801dc06:	f025 0503 	bic.w	r5, r5, #3
 801dc0a:	3508      	adds	r5, #8
 801dc0c:	2d0c      	cmp	r5, #12
 801dc0e:	bf38      	it	cc
 801dc10:	250c      	movcc	r5, #12
 801dc12:	2d00      	cmp	r5, #0
 801dc14:	4606      	mov	r6, r0
 801dc16:	db01      	blt.n	801dc1c <_malloc_r+0x1c>
 801dc18:	42a9      	cmp	r1, r5
 801dc1a:	d904      	bls.n	801dc26 <_malloc_r+0x26>
 801dc1c:	230c      	movs	r3, #12
 801dc1e:	6033      	str	r3, [r6, #0]
 801dc20:	2000      	movs	r0, #0
 801dc22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dc26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801dcfc <_malloc_r+0xfc>
 801dc2a:	f000 f869 	bl	801dd00 <__malloc_lock>
 801dc2e:	f8d8 3000 	ldr.w	r3, [r8]
 801dc32:	461c      	mov	r4, r3
 801dc34:	bb44      	cbnz	r4, 801dc88 <_malloc_r+0x88>
 801dc36:	4629      	mov	r1, r5
 801dc38:	4630      	mov	r0, r6
 801dc3a:	f7ff ffbf 	bl	801dbbc <sbrk_aligned>
 801dc3e:	1c43      	adds	r3, r0, #1
 801dc40:	4604      	mov	r4, r0
 801dc42:	d158      	bne.n	801dcf6 <_malloc_r+0xf6>
 801dc44:	f8d8 4000 	ldr.w	r4, [r8]
 801dc48:	4627      	mov	r7, r4
 801dc4a:	2f00      	cmp	r7, #0
 801dc4c:	d143      	bne.n	801dcd6 <_malloc_r+0xd6>
 801dc4e:	2c00      	cmp	r4, #0
 801dc50:	d04b      	beq.n	801dcea <_malloc_r+0xea>
 801dc52:	6823      	ldr	r3, [r4, #0]
 801dc54:	4639      	mov	r1, r7
 801dc56:	4630      	mov	r0, r6
 801dc58:	eb04 0903 	add.w	r9, r4, r3
 801dc5c:	f000 fdcc 	bl	801e7f8 <_sbrk_r>
 801dc60:	4581      	cmp	r9, r0
 801dc62:	d142      	bne.n	801dcea <_malloc_r+0xea>
 801dc64:	6821      	ldr	r1, [r4, #0]
 801dc66:	1a6d      	subs	r5, r5, r1
 801dc68:	4629      	mov	r1, r5
 801dc6a:	4630      	mov	r0, r6
 801dc6c:	f7ff ffa6 	bl	801dbbc <sbrk_aligned>
 801dc70:	3001      	adds	r0, #1
 801dc72:	d03a      	beq.n	801dcea <_malloc_r+0xea>
 801dc74:	6823      	ldr	r3, [r4, #0]
 801dc76:	442b      	add	r3, r5
 801dc78:	6023      	str	r3, [r4, #0]
 801dc7a:	f8d8 3000 	ldr.w	r3, [r8]
 801dc7e:	685a      	ldr	r2, [r3, #4]
 801dc80:	bb62      	cbnz	r2, 801dcdc <_malloc_r+0xdc>
 801dc82:	f8c8 7000 	str.w	r7, [r8]
 801dc86:	e00f      	b.n	801dca8 <_malloc_r+0xa8>
 801dc88:	6822      	ldr	r2, [r4, #0]
 801dc8a:	1b52      	subs	r2, r2, r5
 801dc8c:	d420      	bmi.n	801dcd0 <_malloc_r+0xd0>
 801dc8e:	2a0b      	cmp	r2, #11
 801dc90:	d917      	bls.n	801dcc2 <_malloc_r+0xc2>
 801dc92:	1961      	adds	r1, r4, r5
 801dc94:	42a3      	cmp	r3, r4
 801dc96:	6025      	str	r5, [r4, #0]
 801dc98:	bf18      	it	ne
 801dc9a:	6059      	strne	r1, [r3, #4]
 801dc9c:	6863      	ldr	r3, [r4, #4]
 801dc9e:	bf08      	it	eq
 801dca0:	f8c8 1000 	streq.w	r1, [r8]
 801dca4:	5162      	str	r2, [r4, r5]
 801dca6:	604b      	str	r3, [r1, #4]
 801dca8:	4630      	mov	r0, r6
 801dcaa:	f000 f82f 	bl	801dd0c <__malloc_unlock>
 801dcae:	f104 000b 	add.w	r0, r4, #11
 801dcb2:	1d23      	adds	r3, r4, #4
 801dcb4:	f020 0007 	bic.w	r0, r0, #7
 801dcb8:	1ac2      	subs	r2, r0, r3
 801dcba:	bf1c      	itt	ne
 801dcbc:	1a1b      	subne	r3, r3, r0
 801dcbe:	50a3      	strne	r3, [r4, r2]
 801dcc0:	e7af      	b.n	801dc22 <_malloc_r+0x22>
 801dcc2:	6862      	ldr	r2, [r4, #4]
 801dcc4:	42a3      	cmp	r3, r4
 801dcc6:	bf0c      	ite	eq
 801dcc8:	f8c8 2000 	streq.w	r2, [r8]
 801dccc:	605a      	strne	r2, [r3, #4]
 801dcce:	e7eb      	b.n	801dca8 <_malloc_r+0xa8>
 801dcd0:	4623      	mov	r3, r4
 801dcd2:	6864      	ldr	r4, [r4, #4]
 801dcd4:	e7ae      	b.n	801dc34 <_malloc_r+0x34>
 801dcd6:	463c      	mov	r4, r7
 801dcd8:	687f      	ldr	r7, [r7, #4]
 801dcda:	e7b6      	b.n	801dc4a <_malloc_r+0x4a>
 801dcdc:	461a      	mov	r2, r3
 801dcde:	685b      	ldr	r3, [r3, #4]
 801dce0:	42a3      	cmp	r3, r4
 801dce2:	d1fb      	bne.n	801dcdc <_malloc_r+0xdc>
 801dce4:	2300      	movs	r3, #0
 801dce6:	6053      	str	r3, [r2, #4]
 801dce8:	e7de      	b.n	801dca8 <_malloc_r+0xa8>
 801dcea:	230c      	movs	r3, #12
 801dcec:	6033      	str	r3, [r6, #0]
 801dcee:	4630      	mov	r0, r6
 801dcf0:	f000 f80c 	bl	801dd0c <__malloc_unlock>
 801dcf4:	e794      	b.n	801dc20 <_malloc_r+0x20>
 801dcf6:	6005      	str	r5, [r0, #0]
 801dcf8:	e7d6      	b.n	801dca8 <_malloc_r+0xa8>
 801dcfa:	bf00      	nop
 801dcfc:	24008b44 	.word	0x24008b44

0801dd00 <__malloc_lock>:
 801dd00:	4801      	ldr	r0, [pc, #4]	@ (801dd08 <__malloc_lock+0x8>)
 801dd02:	f7ff bf00 	b.w	801db06 <__retarget_lock_acquire_recursive>
 801dd06:	bf00      	nop
 801dd08:	24008b3c 	.word	0x24008b3c

0801dd0c <__malloc_unlock>:
 801dd0c:	4801      	ldr	r0, [pc, #4]	@ (801dd14 <__malloc_unlock+0x8>)
 801dd0e:	f7ff befb 	b.w	801db08 <__retarget_lock_release_recursive>
 801dd12:	bf00      	nop
 801dd14:	24008b3c 	.word	0x24008b3c

0801dd18 <__ssputs_r>:
 801dd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd1c:	688e      	ldr	r6, [r1, #8]
 801dd1e:	461f      	mov	r7, r3
 801dd20:	42be      	cmp	r6, r7
 801dd22:	680b      	ldr	r3, [r1, #0]
 801dd24:	4682      	mov	sl, r0
 801dd26:	460c      	mov	r4, r1
 801dd28:	4690      	mov	r8, r2
 801dd2a:	d82d      	bhi.n	801dd88 <__ssputs_r+0x70>
 801dd2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dd30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801dd34:	d026      	beq.n	801dd84 <__ssputs_r+0x6c>
 801dd36:	6965      	ldr	r5, [r4, #20]
 801dd38:	6909      	ldr	r1, [r1, #16]
 801dd3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dd3e:	eba3 0901 	sub.w	r9, r3, r1
 801dd42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dd46:	1c7b      	adds	r3, r7, #1
 801dd48:	444b      	add	r3, r9
 801dd4a:	106d      	asrs	r5, r5, #1
 801dd4c:	429d      	cmp	r5, r3
 801dd4e:	bf38      	it	cc
 801dd50:	461d      	movcc	r5, r3
 801dd52:	0553      	lsls	r3, r2, #21
 801dd54:	d527      	bpl.n	801dda6 <__ssputs_r+0x8e>
 801dd56:	4629      	mov	r1, r5
 801dd58:	f7ff ff52 	bl	801dc00 <_malloc_r>
 801dd5c:	4606      	mov	r6, r0
 801dd5e:	b360      	cbz	r0, 801ddba <__ssputs_r+0xa2>
 801dd60:	6921      	ldr	r1, [r4, #16]
 801dd62:	464a      	mov	r2, r9
 801dd64:	f7ff fed1 	bl	801db0a <memcpy>
 801dd68:	89a3      	ldrh	r3, [r4, #12]
 801dd6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801dd6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dd72:	81a3      	strh	r3, [r4, #12]
 801dd74:	6126      	str	r6, [r4, #16]
 801dd76:	6165      	str	r5, [r4, #20]
 801dd78:	444e      	add	r6, r9
 801dd7a:	eba5 0509 	sub.w	r5, r5, r9
 801dd7e:	6026      	str	r6, [r4, #0]
 801dd80:	60a5      	str	r5, [r4, #8]
 801dd82:	463e      	mov	r6, r7
 801dd84:	42be      	cmp	r6, r7
 801dd86:	d900      	bls.n	801dd8a <__ssputs_r+0x72>
 801dd88:	463e      	mov	r6, r7
 801dd8a:	6820      	ldr	r0, [r4, #0]
 801dd8c:	4632      	mov	r2, r6
 801dd8e:	4641      	mov	r1, r8
 801dd90:	f000 fcf6 	bl	801e780 <memmove>
 801dd94:	68a3      	ldr	r3, [r4, #8]
 801dd96:	1b9b      	subs	r3, r3, r6
 801dd98:	60a3      	str	r3, [r4, #8]
 801dd9a:	6823      	ldr	r3, [r4, #0]
 801dd9c:	4433      	add	r3, r6
 801dd9e:	6023      	str	r3, [r4, #0]
 801dda0:	2000      	movs	r0, #0
 801dda2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dda6:	462a      	mov	r2, r5
 801dda8:	f000 fd36 	bl	801e818 <_realloc_r>
 801ddac:	4606      	mov	r6, r0
 801ddae:	2800      	cmp	r0, #0
 801ddb0:	d1e0      	bne.n	801dd74 <__ssputs_r+0x5c>
 801ddb2:	6921      	ldr	r1, [r4, #16]
 801ddb4:	4650      	mov	r0, sl
 801ddb6:	f7ff feb7 	bl	801db28 <_free_r>
 801ddba:	230c      	movs	r3, #12
 801ddbc:	f8ca 3000 	str.w	r3, [sl]
 801ddc0:	89a3      	ldrh	r3, [r4, #12]
 801ddc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ddc6:	81a3      	strh	r3, [r4, #12]
 801ddc8:	f04f 30ff 	mov.w	r0, #4294967295
 801ddcc:	e7e9      	b.n	801dda2 <__ssputs_r+0x8a>
	...

0801ddd0 <_svfiprintf_r>:
 801ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddd4:	4698      	mov	r8, r3
 801ddd6:	898b      	ldrh	r3, [r1, #12]
 801ddd8:	061b      	lsls	r3, r3, #24
 801ddda:	b09d      	sub	sp, #116	@ 0x74
 801dddc:	4607      	mov	r7, r0
 801ddde:	460d      	mov	r5, r1
 801dde0:	4614      	mov	r4, r2
 801dde2:	d510      	bpl.n	801de06 <_svfiprintf_r+0x36>
 801dde4:	690b      	ldr	r3, [r1, #16]
 801dde6:	b973      	cbnz	r3, 801de06 <_svfiprintf_r+0x36>
 801dde8:	2140      	movs	r1, #64	@ 0x40
 801ddea:	f7ff ff09 	bl	801dc00 <_malloc_r>
 801ddee:	6028      	str	r0, [r5, #0]
 801ddf0:	6128      	str	r0, [r5, #16]
 801ddf2:	b930      	cbnz	r0, 801de02 <_svfiprintf_r+0x32>
 801ddf4:	230c      	movs	r3, #12
 801ddf6:	603b      	str	r3, [r7, #0]
 801ddf8:	f04f 30ff 	mov.w	r0, #4294967295
 801ddfc:	b01d      	add	sp, #116	@ 0x74
 801ddfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de02:	2340      	movs	r3, #64	@ 0x40
 801de04:	616b      	str	r3, [r5, #20]
 801de06:	2300      	movs	r3, #0
 801de08:	9309      	str	r3, [sp, #36]	@ 0x24
 801de0a:	2320      	movs	r3, #32
 801de0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801de10:	f8cd 800c 	str.w	r8, [sp, #12]
 801de14:	2330      	movs	r3, #48	@ 0x30
 801de16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801dfb4 <_svfiprintf_r+0x1e4>
 801de1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801de1e:	f04f 0901 	mov.w	r9, #1
 801de22:	4623      	mov	r3, r4
 801de24:	469a      	mov	sl, r3
 801de26:	f813 2b01 	ldrb.w	r2, [r3], #1
 801de2a:	b10a      	cbz	r2, 801de30 <_svfiprintf_r+0x60>
 801de2c:	2a25      	cmp	r2, #37	@ 0x25
 801de2e:	d1f9      	bne.n	801de24 <_svfiprintf_r+0x54>
 801de30:	ebba 0b04 	subs.w	fp, sl, r4
 801de34:	d00b      	beq.n	801de4e <_svfiprintf_r+0x7e>
 801de36:	465b      	mov	r3, fp
 801de38:	4622      	mov	r2, r4
 801de3a:	4629      	mov	r1, r5
 801de3c:	4638      	mov	r0, r7
 801de3e:	f7ff ff6b 	bl	801dd18 <__ssputs_r>
 801de42:	3001      	adds	r0, #1
 801de44:	f000 80a7 	beq.w	801df96 <_svfiprintf_r+0x1c6>
 801de48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801de4a:	445a      	add	r2, fp
 801de4c:	9209      	str	r2, [sp, #36]	@ 0x24
 801de4e:	f89a 3000 	ldrb.w	r3, [sl]
 801de52:	2b00      	cmp	r3, #0
 801de54:	f000 809f 	beq.w	801df96 <_svfiprintf_r+0x1c6>
 801de58:	2300      	movs	r3, #0
 801de5a:	f04f 32ff 	mov.w	r2, #4294967295
 801de5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801de62:	f10a 0a01 	add.w	sl, sl, #1
 801de66:	9304      	str	r3, [sp, #16]
 801de68:	9307      	str	r3, [sp, #28]
 801de6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801de6e:	931a      	str	r3, [sp, #104]	@ 0x68
 801de70:	4654      	mov	r4, sl
 801de72:	2205      	movs	r2, #5
 801de74:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de78:	484e      	ldr	r0, [pc, #312]	@ (801dfb4 <_svfiprintf_r+0x1e4>)
 801de7a:	f7e2 fa51 	bl	8000320 <memchr>
 801de7e:	9a04      	ldr	r2, [sp, #16]
 801de80:	b9d8      	cbnz	r0, 801deba <_svfiprintf_r+0xea>
 801de82:	06d0      	lsls	r0, r2, #27
 801de84:	bf44      	itt	mi
 801de86:	2320      	movmi	r3, #32
 801de88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801de8c:	0711      	lsls	r1, r2, #28
 801de8e:	bf44      	itt	mi
 801de90:	232b      	movmi	r3, #43	@ 0x2b
 801de92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801de96:	f89a 3000 	ldrb.w	r3, [sl]
 801de9a:	2b2a      	cmp	r3, #42	@ 0x2a
 801de9c:	d015      	beq.n	801deca <_svfiprintf_r+0xfa>
 801de9e:	9a07      	ldr	r2, [sp, #28]
 801dea0:	4654      	mov	r4, sl
 801dea2:	2000      	movs	r0, #0
 801dea4:	f04f 0c0a 	mov.w	ip, #10
 801dea8:	4621      	mov	r1, r4
 801deaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801deae:	3b30      	subs	r3, #48	@ 0x30
 801deb0:	2b09      	cmp	r3, #9
 801deb2:	d94b      	bls.n	801df4c <_svfiprintf_r+0x17c>
 801deb4:	b1b0      	cbz	r0, 801dee4 <_svfiprintf_r+0x114>
 801deb6:	9207      	str	r2, [sp, #28]
 801deb8:	e014      	b.n	801dee4 <_svfiprintf_r+0x114>
 801deba:	eba0 0308 	sub.w	r3, r0, r8
 801debe:	fa09 f303 	lsl.w	r3, r9, r3
 801dec2:	4313      	orrs	r3, r2
 801dec4:	9304      	str	r3, [sp, #16]
 801dec6:	46a2      	mov	sl, r4
 801dec8:	e7d2      	b.n	801de70 <_svfiprintf_r+0xa0>
 801deca:	9b03      	ldr	r3, [sp, #12]
 801decc:	1d19      	adds	r1, r3, #4
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	9103      	str	r1, [sp, #12]
 801ded2:	2b00      	cmp	r3, #0
 801ded4:	bfbb      	ittet	lt
 801ded6:	425b      	neglt	r3, r3
 801ded8:	f042 0202 	orrlt.w	r2, r2, #2
 801dedc:	9307      	strge	r3, [sp, #28]
 801dede:	9307      	strlt	r3, [sp, #28]
 801dee0:	bfb8      	it	lt
 801dee2:	9204      	strlt	r2, [sp, #16]
 801dee4:	7823      	ldrb	r3, [r4, #0]
 801dee6:	2b2e      	cmp	r3, #46	@ 0x2e
 801dee8:	d10a      	bne.n	801df00 <_svfiprintf_r+0x130>
 801deea:	7863      	ldrb	r3, [r4, #1]
 801deec:	2b2a      	cmp	r3, #42	@ 0x2a
 801deee:	d132      	bne.n	801df56 <_svfiprintf_r+0x186>
 801def0:	9b03      	ldr	r3, [sp, #12]
 801def2:	1d1a      	adds	r2, r3, #4
 801def4:	681b      	ldr	r3, [r3, #0]
 801def6:	9203      	str	r2, [sp, #12]
 801def8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801defc:	3402      	adds	r4, #2
 801defe:	9305      	str	r3, [sp, #20]
 801df00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801dfc4 <_svfiprintf_r+0x1f4>
 801df04:	7821      	ldrb	r1, [r4, #0]
 801df06:	2203      	movs	r2, #3
 801df08:	4650      	mov	r0, sl
 801df0a:	f7e2 fa09 	bl	8000320 <memchr>
 801df0e:	b138      	cbz	r0, 801df20 <_svfiprintf_r+0x150>
 801df10:	9b04      	ldr	r3, [sp, #16]
 801df12:	eba0 000a 	sub.w	r0, r0, sl
 801df16:	2240      	movs	r2, #64	@ 0x40
 801df18:	4082      	lsls	r2, r0
 801df1a:	4313      	orrs	r3, r2
 801df1c:	3401      	adds	r4, #1
 801df1e:	9304      	str	r3, [sp, #16]
 801df20:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df24:	4824      	ldr	r0, [pc, #144]	@ (801dfb8 <_svfiprintf_r+0x1e8>)
 801df26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801df2a:	2206      	movs	r2, #6
 801df2c:	f7e2 f9f8 	bl	8000320 <memchr>
 801df30:	2800      	cmp	r0, #0
 801df32:	d036      	beq.n	801dfa2 <_svfiprintf_r+0x1d2>
 801df34:	4b21      	ldr	r3, [pc, #132]	@ (801dfbc <_svfiprintf_r+0x1ec>)
 801df36:	bb1b      	cbnz	r3, 801df80 <_svfiprintf_r+0x1b0>
 801df38:	9b03      	ldr	r3, [sp, #12]
 801df3a:	3307      	adds	r3, #7
 801df3c:	f023 0307 	bic.w	r3, r3, #7
 801df40:	3308      	adds	r3, #8
 801df42:	9303      	str	r3, [sp, #12]
 801df44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df46:	4433      	add	r3, r6
 801df48:	9309      	str	r3, [sp, #36]	@ 0x24
 801df4a:	e76a      	b.n	801de22 <_svfiprintf_r+0x52>
 801df4c:	fb0c 3202 	mla	r2, ip, r2, r3
 801df50:	460c      	mov	r4, r1
 801df52:	2001      	movs	r0, #1
 801df54:	e7a8      	b.n	801dea8 <_svfiprintf_r+0xd8>
 801df56:	2300      	movs	r3, #0
 801df58:	3401      	adds	r4, #1
 801df5a:	9305      	str	r3, [sp, #20]
 801df5c:	4619      	mov	r1, r3
 801df5e:	f04f 0c0a 	mov.w	ip, #10
 801df62:	4620      	mov	r0, r4
 801df64:	f810 2b01 	ldrb.w	r2, [r0], #1
 801df68:	3a30      	subs	r2, #48	@ 0x30
 801df6a:	2a09      	cmp	r2, #9
 801df6c:	d903      	bls.n	801df76 <_svfiprintf_r+0x1a6>
 801df6e:	2b00      	cmp	r3, #0
 801df70:	d0c6      	beq.n	801df00 <_svfiprintf_r+0x130>
 801df72:	9105      	str	r1, [sp, #20]
 801df74:	e7c4      	b.n	801df00 <_svfiprintf_r+0x130>
 801df76:	fb0c 2101 	mla	r1, ip, r1, r2
 801df7a:	4604      	mov	r4, r0
 801df7c:	2301      	movs	r3, #1
 801df7e:	e7f0      	b.n	801df62 <_svfiprintf_r+0x192>
 801df80:	ab03      	add	r3, sp, #12
 801df82:	9300      	str	r3, [sp, #0]
 801df84:	462a      	mov	r2, r5
 801df86:	4b0e      	ldr	r3, [pc, #56]	@ (801dfc0 <_svfiprintf_r+0x1f0>)
 801df88:	a904      	add	r1, sp, #16
 801df8a:	4638      	mov	r0, r7
 801df8c:	f3af 8000 	nop.w
 801df90:	1c42      	adds	r2, r0, #1
 801df92:	4606      	mov	r6, r0
 801df94:	d1d6      	bne.n	801df44 <_svfiprintf_r+0x174>
 801df96:	89ab      	ldrh	r3, [r5, #12]
 801df98:	065b      	lsls	r3, r3, #25
 801df9a:	f53f af2d 	bmi.w	801ddf8 <_svfiprintf_r+0x28>
 801df9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dfa0:	e72c      	b.n	801ddfc <_svfiprintf_r+0x2c>
 801dfa2:	ab03      	add	r3, sp, #12
 801dfa4:	9300      	str	r3, [sp, #0]
 801dfa6:	462a      	mov	r2, r5
 801dfa8:	4b05      	ldr	r3, [pc, #20]	@ (801dfc0 <_svfiprintf_r+0x1f0>)
 801dfaa:	a904      	add	r1, sp, #16
 801dfac:	4638      	mov	r0, r7
 801dfae:	f000 f9bb 	bl	801e328 <_printf_i>
 801dfb2:	e7ed      	b.n	801df90 <_svfiprintf_r+0x1c0>
 801dfb4:	08032159 	.word	0x08032159
 801dfb8:	08032163 	.word	0x08032163
 801dfbc:	00000000 	.word	0x00000000
 801dfc0:	0801dd19 	.word	0x0801dd19
 801dfc4:	0803215f 	.word	0x0803215f

0801dfc8 <__sfputc_r>:
 801dfc8:	6893      	ldr	r3, [r2, #8]
 801dfca:	3b01      	subs	r3, #1
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	b410      	push	{r4}
 801dfd0:	6093      	str	r3, [r2, #8]
 801dfd2:	da08      	bge.n	801dfe6 <__sfputc_r+0x1e>
 801dfd4:	6994      	ldr	r4, [r2, #24]
 801dfd6:	42a3      	cmp	r3, r4
 801dfd8:	db01      	blt.n	801dfde <__sfputc_r+0x16>
 801dfda:	290a      	cmp	r1, #10
 801dfdc:	d103      	bne.n	801dfe6 <__sfputc_r+0x1e>
 801dfde:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfe2:	f7ff bc6d 	b.w	801d8c0 <__swbuf_r>
 801dfe6:	6813      	ldr	r3, [r2, #0]
 801dfe8:	1c58      	adds	r0, r3, #1
 801dfea:	6010      	str	r0, [r2, #0]
 801dfec:	7019      	strb	r1, [r3, #0]
 801dfee:	4608      	mov	r0, r1
 801dff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dff4:	4770      	bx	lr

0801dff6 <__sfputs_r>:
 801dff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dff8:	4606      	mov	r6, r0
 801dffa:	460f      	mov	r7, r1
 801dffc:	4614      	mov	r4, r2
 801dffe:	18d5      	adds	r5, r2, r3
 801e000:	42ac      	cmp	r4, r5
 801e002:	d101      	bne.n	801e008 <__sfputs_r+0x12>
 801e004:	2000      	movs	r0, #0
 801e006:	e007      	b.n	801e018 <__sfputs_r+0x22>
 801e008:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e00c:	463a      	mov	r2, r7
 801e00e:	4630      	mov	r0, r6
 801e010:	f7ff ffda 	bl	801dfc8 <__sfputc_r>
 801e014:	1c43      	adds	r3, r0, #1
 801e016:	d1f3      	bne.n	801e000 <__sfputs_r+0xa>
 801e018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e01c <_vfiprintf_r>:
 801e01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e020:	460d      	mov	r5, r1
 801e022:	b09d      	sub	sp, #116	@ 0x74
 801e024:	4614      	mov	r4, r2
 801e026:	4698      	mov	r8, r3
 801e028:	4606      	mov	r6, r0
 801e02a:	b118      	cbz	r0, 801e034 <_vfiprintf_r+0x18>
 801e02c:	6a03      	ldr	r3, [r0, #32]
 801e02e:	b90b      	cbnz	r3, 801e034 <_vfiprintf_r+0x18>
 801e030:	f7ff fac8 	bl	801d5c4 <__sinit>
 801e034:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e036:	07d9      	lsls	r1, r3, #31
 801e038:	d405      	bmi.n	801e046 <_vfiprintf_r+0x2a>
 801e03a:	89ab      	ldrh	r3, [r5, #12]
 801e03c:	059a      	lsls	r2, r3, #22
 801e03e:	d402      	bmi.n	801e046 <_vfiprintf_r+0x2a>
 801e040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e042:	f7ff fd60 	bl	801db06 <__retarget_lock_acquire_recursive>
 801e046:	89ab      	ldrh	r3, [r5, #12]
 801e048:	071b      	lsls	r3, r3, #28
 801e04a:	d501      	bpl.n	801e050 <_vfiprintf_r+0x34>
 801e04c:	692b      	ldr	r3, [r5, #16]
 801e04e:	b99b      	cbnz	r3, 801e078 <_vfiprintf_r+0x5c>
 801e050:	4629      	mov	r1, r5
 801e052:	4630      	mov	r0, r6
 801e054:	f7ff fc72 	bl	801d93c <__swsetup_r>
 801e058:	b170      	cbz	r0, 801e078 <_vfiprintf_r+0x5c>
 801e05a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e05c:	07dc      	lsls	r4, r3, #31
 801e05e:	d504      	bpl.n	801e06a <_vfiprintf_r+0x4e>
 801e060:	f04f 30ff 	mov.w	r0, #4294967295
 801e064:	b01d      	add	sp, #116	@ 0x74
 801e066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e06a:	89ab      	ldrh	r3, [r5, #12]
 801e06c:	0598      	lsls	r0, r3, #22
 801e06e:	d4f7      	bmi.n	801e060 <_vfiprintf_r+0x44>
 801e070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e072:	f7ff fd49 	bl	801db08 <__retarget_lock_release_recursive>
 801e076:	e7f3      	b.n	801e060 <_vfiprintf_r+0x44>
 801e078:	2300      	movs	r3, #0
 801e07a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e07c:	2320      	movs	r3, #32
 801e07e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e082:	f8cd 800c 	str.w	r8, [sp, #12]
 801e086:	2330      	movs	r3, #48	@ 0x30
 801e088:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e238 <_vfiprintf_r+0x21c>
 801e08c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e090:	f04f 0901 	mov.w	r9, #1
 801e094:	4623      	mov	r3, r4
 801e096:	469a      	mov	sl, r3
 801e098:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e09c:	b10a      	cbz	r2, 801e0a2 <_vfiprintf_r+0x86>
 801e09e:	2a25      	cmp	r2, #37	@ 0x25
 801e0a0:	d1f9      	bne.n	801e096 <_vfiprintf_r+0x7a>
 801e0a2:	ebba 0b04 	subs.w	fp, sl, r4
 801e0a6:	d00b      	beq.n	801e0c0 <_vfiprintf_r+0xa4>
 801e0a8:	465b      	mov	r3, fp
 801e0aa:	4622      	mov	r2, r4
 801e0ac:	4629      	mov	r1, r5
 801e0ae:	4630      	mov	r0, r6
 801e0b0:	f7ff ffa1 	bl	801dff6 <__sfputs_r>
 801e0b4:	3001      	adds	r0, #1
 801e0b6:	f000 80a7 	beq.w	801e208 <_vfiprintf_r+0x1ec>
 801e0ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e0bc:	445a      	add	r2, fp
 801e0be:	9209      	str	r2, [sp, #36]	@ 0x24
 801e0c0:	f89a 3000 	ldrb.w	r3, [sl]
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	f000 809f 	beq.w	801e208 <_vfiprintf_r+0x1ec>
 801e0ca:	2300      	movs	r3, #0
 801e0cc:	f04f 32ff 	mov.w	r2, #4294967295
 801e0d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e0d4:	f10a 0a01 	add.w	sl, sl, #1
 801e0d8:	9304      	str	r3, [sp, #16]
 801e0da:	9307      	str	r3, [sp, #28]
 801e0dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e0e0:	931a      	str	r3, [sp, #104]	@ 0x68
 801e0e2:	4654      	mov	r4, sl
 801e0e4:	2205      	movs	r2, #5
 801e0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0ea:	4853      	ldr	r0, [pc, #332]	@ (801e238 <_vfiprintf_r+0x21c>)
 801e0ec:	f7e2 f918 	bl	8000320 <memchr>
 801e0f0:	9a04      	ldr	r2, [sp, #16]
 801e0f2:	b9d8      	cbnz	r0, 801e12c <_vfiprintf_r+0x110>
 801e0f4:	06d1      	lsls	r1, r2, #27
 801e0f6:	bf44      	itt	mi
 801e0f8:	2320      	movmi	r3, #32
 801e0fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e0fe:	0713      	lsls	r3, r2, #28
 801e100:	bf44      	itt	mi
 801e102:	232b      	movmi	r3, #43	@ 0x2b
 801e104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e108:	f89a 3000 	ldrb.w	r3, [sl]
 801e10c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e10e:	d015      	beq.n	801e13c <_vfiprintf_r+0x120>
 801e110:	9a07      	ldr	r2, [sp, #28]
 801e112:	4654      	mov	r4, sl
 801e114:	2000      	movs	r0, #0
 801e116:	f04f 0c0a 	mov.w	ip, #10
 801e11a:	4621      	mov	r1, r4
 801e11c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e120:	3b30      	subs	r3, #48	@ 0x30
 801e122:	2b09      	cmp	r3, #9
 801e124:	d94b      	bls.n	801e1be <_vfiprintf_r+0x1a2>
 801e126:	b1b0      	cbz	r0, 801e156 <_vfiprintf_r+0x13a>
 801e128:	9207      	str	r2, [sp, #28]
 801e12a:	e014      	b.n	801e156 <_vfiprintf_r+0x13a>
 801e12c:	eba0 0308 	sub.w	r3, r0, r8
 801e130:	fa09 f303 	lsl.w	r3, r9, r3
 801e134:	4313      	orrs	r3, r2
 801e136:	9304      	str	r3, [sp, #16]
 801e138:	46a2      	mov	sl, r4
 801e13a:	e7d2      	b.n	801e0e2 <_vfiprintf_r+0xc6>
 801e13c:	9b03      	ldr	r3, [sp, #12]
 801e13e:	1d19      	adds	r1, r3, #4
 801e140:	681b      	ldr	r3, [r3, #0]
 801e142:	9103      	str	r1, [sp, #12]
 801e144:	2b00      	cmp	r3, #0
 801e146:	bfbb      	ittet	lt
 801e148:	425b      	neglt	r3, r3
 801e14a:	f042 0202 	orrlt.w	r2, r2, #2
 801e14e:	9307      	strge	r3, [sp, #28]
 801e150:	9307      	strlt	r3, [sp, #28]
 801e152:	bfb8      	it	lt
 801e154:	9204      	strlt	r2, [sp, #16]
 801e156:	7823      	ldrb	r3, [r4, #0]
 801e158:	2b2e      	cmp	r3, #46	@ 0x2e
 801e15a:	d10a      	bne.n	801e172 <_vfiprintf_r+0x156>
 801e15c:	7863      	ldrb	r3, [r4, #1]
 801e15e:	2b2a      	cmp	r3, #42	@ 0x2a
 801e160:	d132      	bne.n	801e1c8 <_vfiprintf_r+0x1ac>
 801e162:	9b03      	ldr	r3, [sp, #12]
 801e164:	1d1a      	adds	r2, r3, #4
 801e166:	681b      	ldr	r3, [r3, #0]
 801e168:	9203      	str	r2, [sp, #12]
 801e16a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e16e:	3402      	adds	r4, #2
 801e170:	9305      	str	r3, [sp, #20]
 801e172:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e248 <_vfiprintf_r+0x22c>
 801e176:	7821      	ldrb	r1, [r4, #0]
 801e178:	2203      	movs	r2, #3
 801e17a:	4650      	mov	r0, sl
 801e17c:	f7e2 f8d0 	bl	8000320 <memchr>
 801e180:	b138      	cbz	r0, 801e192 <_vfiprintf_r+0x176>
 801e182:	9b04      	ldr	r3, [sp, #16]
 801e184:	eba0 000a 	sub.w	r0, r0, sl
 801e188:	2240      	movs	r2, #64	@ 0x40
 801e18a:	4082      	lsls	r2, r0
 801e18c:	4313      	orrs	r3, r2
 801e18e:	3401      	adds	r4, #1
 801e190:	9304      	str	r3, [sp, #16]
 801e192:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e196:	4829      	ldr	r0, [pc, #164]	@ (801e23c <_vfiprintf_r+0x220>)
 801e198:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e19c:	2206      	movs	r2, #6
 801e19e:	f7e2 f8bf 	bl	8000320 <memchr>
 801e1a2:	2800      	cmp	r0, #0
 801e1a4:	d03f      	beq.n	801e226 <_vfiprintf_r+0x20a>
 801e1a6:	4b26      	ldr	r3, [pc, #152]	@ (801e240 <_vfiprintf_r+0x224>)
 801e1a8:	bb1b      	cbnz	r3, 801e1f2 <_vfiprintf_r+0x1d6>
 801e1aa:	9b03      	ldr	r3, [sp, #12]
 801e1ac:	3307      	adds	r3, #7
 801e1ae:	f023 0307 	bic.w	r3, r3, #7
 801e1b2:	3308      	adds	r3, #8
 801e1b4:	9303      	str	r3, [sp, #12]
 801e1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1b8:	443b      	add	r3, r7
 801e1ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801e1bc:	e76a      	b.n	801e094 <_vfiprintf_r+0x78>
 801e1be:	fb0c 3202 	mla	r2, ip, r2, r3
 801e1c2:	460c      	mov	r4, r1
 801e1c4:	2001      	movs	r0, #1
 801e1c6:	e7a8      	b.n	801e11a <_vfiprintf_r+0xfe>
 801e1c8:	2300      	movs	r3, #0
 801e1ca:	3401      	adds	r4, #1
 801e1cc:	9305      	str	r3, [sp, #20]
 801e1ce:	4619      	mov	r1, r3
 801e1d0:	f04f 0c0a 	mov.w	ip, #10
 801e1d4:	4620      	mov	r0, r4
 801e1d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e1da:	3a30      	subs	r2, #48	@ 0x30
 801e1dc:	2a09      	cmp	r2, #9
 801e1de:	d903      	bls.n	801e1e8 <_vfiprintf_r+0x1cc>
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d0c6      	beq.n	801e172 <_vfiprintf_r+0x156>
 801e1e4:	9105      	str	r1, [sp, #20]
 801e1e6:	e7c4      	b.n	801e172 <_vfiprintf_r+0x156>
 801e1e8:	fb0c 2101 	mla	r1, ip, r1, r2
 801e1ec:	4604      	mov	r4, r0
 801e1ee:	2301      	movs	r3, #1
 801e1f0:	e7f0      	b.n	801e1d4 <_vfiprintf_r+0x1b8>
 801e1f2:	ab03      	add	r3, sp, #12
 801e1f4:	9300      	str	r3, [sp, #0]
 801e1f6:	462a      	mov	r2, r5
 801e1f8:	4b12      	ldr	r3, [pc, #72]	@ (801e244 <_vfiprintf_r+0x228>)
 801e1fa:	a904      	add	r1, sp, #16
 801e1fc:	4630      	mov	r0, r6
 801e1fe:	f3af 8000 	nop.w
 801e202:	4607      	mov	r7, r0
 801e204:	1c78      	adds	r0, r7, #1
 801e206:	d1d6      	bne.n	801e1b6 <_vfiprintf_r+0x19a>
 801e208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e20a:	07d9      	lsls	r1, r3, #31
 801e20c:	d405      	bmi.n	801e21a <_vfiprintf_r+0x1fe>
 801e20e:	89ab      	ldrh	r3, [r5, #12]
 801e210:	059a      	lsls	r2, r3, #22
 801e212:	d402      	bmi.n	801e21a <_vfiprintf_r+0x1fe>
 801e214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e216:	f7ff fc77 	bl	801db08 <__retarget_lock_release_recursive>
 801e21a:	89ab      	ldrh	r3, [r5, #12]
 801e21c:	065b      	lsls	r3, r3, #25
 801e21e:	f53f af1f 	bmi.w	801e060 <_vfiprintf_r+0x44>
 801e222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e224:	e71e      	b.n	801e064 <_vfiprintf_r+0x48>
 801e226:	ab03      	add	r3, sp, #12
 801e228:	9300      	str	r3, [sp, #0]
 801e22a:	462a      	mov	r2, r5
 801e22c:	4b05      	ldr	r3, [pc, #20]	@ (801e244 <_vfiprintf_r+0x228>)
 801e22e:	a904      	add	r1, sp, #16
 801e230:	4630      	mov	r0, r6
 801e232:	f000 f879 	bl	801e328 <_printf_i>
 801e236:	e7e4      	b.n	801e202 <_vfiprintf_r+0x1e6>
 801e238:	08032159 	.word	0x08032159
 801e23c:	08032163 	.word	0x08032163
 801e240:	00000000 	.word	0x00000000
 801e244:	0801dff7 	.word	0x0801dff7
 801e248:	0803215f 	.word	0x0803215f

0801e24c <_printf_common>:
 801e24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e250:	4616      	mov	r6, r2
 801e252:	4698      	mov	r8, r3
 801e254:	688a      	ldr	r2, [r1, #8]
 801e256:	690b      	ldr	r3, [r1, #16]
 801e258:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e25c:	4293      	cmp	r3, r2
 801e25e:	bfb8      	it	lt
 801e260:	4613      	movlt	r3, r2
 801e262:	6033      	str	r3, [r6, #0]
 801e264:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e268:	4607      	mov	r7, r0
 801e26a:	460c      	mov	r4, r1
 801e26c:	b10a      	cbz	r2, 801e272 <_printf_common+0x26>
 801e26e:	3301      	adds	r3, #1
 801e270:	6033      	str	r3, [r6, #0]
 801e272:	6823      	ldr	r3, [r4, #0]
 801e274:	0699      	lsls	r1, r3, #26
 801e276:	bf42      	ittt	mi
 801e278:	6833      	ldrmi	r3, [r6, #0]
 801e27a:	3302      	addmi	r3, #2
 801e27c:	6033      	strmi	r3, [r6, #0]
 801e27e:	6825      	ldr	r5, [r4, #0]
 801e280:	f015 0506 	ands.w	r5, r5, #6
 801e284:	d106      	bne.n	801e294 <_printf_common+0x48>
 801e286:	f104 0a19 	add.w	sl, r4, #25
 801e28a:	68e3      	ldr	r3, [r4, #12]
 801e28c:	6832      	ldr	r2, [r6, #0]
 801e28e:	1a9b      	subs	r3, r3, r2
 801e290:	42ab      	cmp	r3, r5
 801e292:	dc26      	bgt.n	801e2e2 <_printf_common+0x96>
 801e294:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e298:	6822      	ldr	r2, [r4, #0]
 801e29a:	3b00      	subs	r3, #0
 801e29c:	bf18      	it	ne
 801e29e:	2301      	movne	r3, #1
 801e2a0:	0692      	lsls	r2, r2, #26
 801e2a2:	d42b      	bmi.n	801e2fc <_printf_common+0xb0>
 801e2a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e2a8:	4641      	mov	r1, r8
 801e2aa:	4638      	mov	r0, r7
 801e2ac:	47c8      	blx	r9
 801e2ae:	3001      	adds	r0, #1
 801e2b0:	d01e      	beq.n	801e2f0 <_printf_common+0xa4>
 801e2b2:	6823      	ldr	r3, [r4, #0]
 801e2b4:	6922      	ldr	r2, [r4, #16]
 801e2b6:	f003 0306 	and.w	r3, r3, #6
 801e2ba:	2b04      	cmp	r3, #4
 801e2bc:	bf02      	ittt	eq
 801e2be:	68e5      	ldreq	r5, [r4, #12]
 801e2c0:	6833      	ldreq	r3, [r6, #0]
 801e2c2:	1aed      	subeq	r5, r5, r3
 801e2c4:	68a3      	ldr	r3, [r4, #8]
 801e2c6:	bf0c      	ite	eq
 801e2c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e2cc:	2500      	movne	r5, #0
 801e2ce:	4293      	cmp	r3, r2
 801e2d0:	bfc4      	itt	gt
 801e2d2:	1a9b      	subgt	r3, r3, r2
 801e2d4:	18ed      	addgt	r5, r5, r3
 801e2d6:	2600      	movs	r6, #0
 801e2d8:	341a      	adds	r4, #26
 801e2da:	42b5      	cmp	r5, r6
 801e2dc:	d11a      	bne.n	801e314 <_printf_common+0xc8>
 801e2de:	2000      	movs	r0, #0
 801e2e0:	e008      	b.n	801e2f4 <_printf_common+0xa8>
 801e2e2:	2301      	movs	r3, #1
 801e2e4:	4652      	mov	r2, sl
 801e2e6:	4641      	mov	r1, r8
 801e2e8:	4638      	mov	r0, r7
 801e2ea:	47c8      	blx	r9
 801e2ec:	3001      	adds	r0, #1
 801e2ee:	d103      	bne.n	801e2f8 <_printf_common+0xac>
 801e2f0:	f04f 30ff 	mov.w	r0, #4294967295
 801e2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2f8:	3501      	adds	r5, #1
 801e2fa:	e7c6      	b.n	801e28a <_printf_common+0x3e>
 801e2fc:	18e1      	adds	r1, r4, r3
 801e2fe:	1c5a      	adds	r2, r3, #1
 801e300:	2030      	movs	r0, #48	@ 0x30
 801e302:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e306:	4422      	add	r2, r4
 801e308:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e30c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e310:	3302      	adds	r3, #2
 801e312:	e7c7      	b.n	801e2a4 <_printf_common+0x58>
 801e314:	2301      	movs	r3, #1
 801e316:	4622      	mov	r2, r4
 801e318:	4641      	mov	r1, r8
 801e31a:	4638      	mov	r0, r7
 801e31c:	47c8      	blx	r9
 801e31e:	3001      	adds	r0, #1
 801e320:	d0e6      	beq.n	801e2f0 <_printf_common+0xa4>
 801e322:	3601      	adds	r6, #1
 801e324:	e7d9      	b.n	801e2da <_printf_common+0x8e>
	...

0801e328 <_printf_i>:
 801e328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e32c:	7e0f      	ldrb	r7, [r1, #24]
 801e32e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e330:	2f78      	cmp	r7, #120	@ 0x78
 801e332:	4691      	mov	r9, r2
 801e334:	4680      	mov	r8, r0
 801e336:	460c      	mov	r4, r1
 801e338:	469a      	mov	sl, r3
 801e33a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e33e:	d807      	bhi.n	801e350 <_printf_i+0x28>
 801e340:	2f62      	cmp	r7, #98	@ 0x62
 801e342:	d80a      	bhi.n	801e35a <_printf_i+0x32>
 801e344:	2f00      	cmp	r7, #0
 801e346:	f000 80d1 	beq.w	801e4ec <_printf_i+0x1c4>
 801e34a:	2f58      	cmp	r7, #88	@ 0x58
 801e34c:	f000 80b8 	beq.w	801e4c0 <_printf_i+0x198>
 801e350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e354:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e358:	e03a      	b.n	801e3d0 <_printf_i+0xa8>
 801e35a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e35e:	2b15      	cmp	r3, #21
 801e360:	d8f6      	bhi.n	801e350 <_printf_i+0x28>
 801e362:	a101      	add	r1, pc, #4	@ (adr r1, 801e368 <_printf_i+0x40>)
 801e364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e368:	0801e3c1 	.word	0x0801e3c1
 801e36c:	0801e3d5 	.word	0x0801e3d5
 801e370:	0801e351 	.word	0x0801e351
 801e374:	0801e351 	.word	0x0801e351
 801e378:	0801e351 	.word	0x0801e351
 801e37c:	0801e351 	.word	0x0801e351
 801e380:	0801e3d5 	.word	0x0801e3d5
 801e384:	0801e351 	.word	0x0801e351
 801e388:	0801e351 	.word	0x0801e351
 801e38c:	0801e351 	.word	0x0801e351
 801e390:	0801e351 	.word	0x0801e351
 801e394:	0801e4d3 	.word	0x0801e4d3
 801e398:	0801e3ff 	.word	0x0801e3ff
 801e39c:	0801e48d 	.word	0x0801e48d
 801e3a0:	0801e351 	.word	0x0801e351
 801e3a4:	0801e351 	.word	0x0801e351
 801e3a8:	0801e4f5 	.word	0x0801e4f5
 801e3ac:	0801e351 	.word	0x0801e351
 801e3b0:	0801e3ff 	.word	0x0801e3ff
 801e3b4:	0801e351 	.word	0x0801e351
 801e3b8:	0801e351 	.word	0x0801e351
 801e3bc:	0801e495 	.word	0x0801e495
 801e3c0:	6833      	ldr	r3, [r6, #0]
 801e3c2:	1d1a      	adds	r2, r3, #4
 801e3c4:	681b      	ldr	r3, [r3, #0]
 801e3c6:	6032      	str	r2, [r6, #0]
 801e3c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e3cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e3d0:	2301      	movs	r3, #1
 801e3d2:	e09c      	b.n	801e50e <_printf_i+0x1e6>
 801e3d4:	6833      	ldr	r3, [r6, #0]
 801e3d6:	6820      	ldr	r0, [r4, #0]
 801e3d8:	1d19      	adds	r1, r3, #4
 801e3da:	6031      	str	r1, [r6, #0]
 801e3dc:	0606      	lsls	r6, r0, #24
 801e3de:	d501      	bpl.n	801e3e4 <_printf_i+0xbc>
 801e3e0:	681d      	ldr	r5, [r3, #0]
 801e3e2:	e003      	b.n	801e3ec <_printf_i+0xc4>
 801e3e4:	0645      	lsls	r5, r0, #25
 801e3e6:	d5fb      	bpl.n	801e3e0 <_printf_i+0xb8>
 801e3e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e3ec:	2d00      	cmp	r5, #0
 801e3ee:	da03      	bge.n	801e3f8 <_printf_i+0xd0>
 801e3f0:	232d      	movs	r3, #45	@ 0x2d
 801e3f2:	426d      	negs	r5, r5
 801e3f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e3f8:	4858      	ldr	r0, [pc, #352]	@ (801e55c <_printf_i+0x234>)
 801e3fa:	230a      	movs	r3, #10
 801e3fc:	e011      	b.n	801e422 <_printf_i+0xfa>
 801e3fe:	6821      	ldr	r1, [r4, #0]
 801e400:	6833      	ldr	r3, [r6, #0]
 801e402:	0608      	lsls	r0, r1, #24
 801e404:	f853 5b04 	ldr.w	r5, [r3], #4
 801e408:	d402      	bmi.n	801e410 <_printf_i+0xe8>
 801e40a:	0649      	lsls	r1, r1, #25
 801e40c:	bf48      	it	mi
 801e40e:	b2ad      	uxthmi	r5, r5
 801e410:	2f6f      	cmp	r7, #111	@ 0x6f
 801e412:	4852      	ldr	r0, [pc, #328]	@ (801e55c <_printf_i+0x234>)
 801e414:	6033      	str	r3, [r6, #0]
 801e416:	bf14      	ite	ne
 801e418:	230a      	movne	r3, #10
 801e41a:	2308      	moveq	r3, #8
 801e41c:	2100      	movs	r1, #0
 801e41e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e422:	6866      	ldr	r6, [r4, #4]
 801e424:	60a6      	str	r6, [r4, #8]
 801e426:	2e00      	cmp	r6, #0
 801e428:	db05      	blt.n	801e436 <_printf_i+0x10e>
 801e42a:	6821      	ldr	r1, [r4, #0]
 801e42c:	432e      	orrs	r6, r5
 801e42e:	f021 0104 	bic.w	r1, r1, #4
 801e432:	6021      	str	r1, [r4, #0]
 801e434:	d04b      	beq.n	801e4ce <_printf_i+0x1a6>
 801e436:	4616      	mov	r6, r2
 801e438:	fbb5 f1f3 	udiv	r1, r5, r3
 801e43c:	fb03 5711 	mls	r7, r3, r1, r5
 801e440:	5dc7      	ldrb	r7, [r0, r7]
 801e442:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e446:	462f      	mov	r7, r5
 801e448:	42bb      	cmp	r3, r7
 801e44a:	460d      	mov	r5, r1
 801e44c:	d9f4      	bls.n	801e438 <_printf_i+0x110>
 801e44e:	2b08      	cmp	r3, #8
 801e450:	d10b      	bne.n	801e46a <_printf_i+0x142>
 801e452:	6823      	ldr	r3, [r4, #0]
 801e454:	07df      	lsls	r7, r3, #31
 801e456:	d508      	bpl.n	801e46a <_printf_i+0x142>
 801e458:	6923      	ldr	r3, [r4, #16]
 801e45a:	6861      	ldr	r1, [r4, #4]
 801e45c:	4299      	cmp	r1, r3
 801e45e:	bfde      	ittt	le
 801e460:	2330      	movle	r3, #48	@ 0x30
 801e462:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e466:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e46a:	1b92      	subs	r2, r2, r6
 801e46c:	6122      	str	r2, [r4, #16]
 801e46e:	f8cd a000 	str.w	sl, [sp]
 801e472:	464b      	mov	r3, r9
 801e474:	aa03      	add	r2, sp, #12
 801e476:	4621      	mov	r1, r4
 801e478:	4640      	mov	r0, r8
 801e47a:	f7ff fee7 	bl	801e24c <_printf_common>
 801e47e:	3001      	adds	r0, #1
 801e480:	d14a      	bne.n	801e518 <_printf_i+0x1f0>
 801e482:	f04f 30ff 	mov.w	r0, #4294967295
 801e486:	b004      	add	sp, #16
 801e488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e48c:	6823      	ldr	r3, [r4, #0]
 801e48e:	f043 0320 	orr.w	r3, r3, #32
 801e492:	6023      	str	r3, [r4, #0]
 801e494:	4832      	ldr	r0, [pc, #200]	@ (801e560 <_printf_i+0x238>)
 801e496:	2778      	movs	r7, #120	@ 0x78
 801e498:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e49c:	6823      	ldr	r3, [r4, #0]
 801e49e:	6831      	ldr	r1, [r6, #0]
 801e4a0:	061f      	lsls	r7, r3, #24
 801e4a2:	f851 5b04 	ldr.w	r5, [r1], #4
 801e4a6:	d402      	bmi.n	801e4ae <_printf_i+0x186>
 801e4a8:	065f      	lsls	r7, r3, #25
 801e4aa:	bf48      	it	mi
 801e4ac:	b2ad      	uxthmi	r5, r5
 801e4ae:	6031      	str	r1, [r6, #0]
 801e4b0:	07d9      	lsls	r1, r3, #31
 801e4b2:	bf44      	itt	mi
 801e4b4:	f043 0320 	orrmi.w	r3, r3, #32
 801e4b8:	6023      	strmi	r3, [r4, #0]
 801e4ba:	b11d      	cbz	r5, 801e4c4 <_printf_i+0x19c>
 801e4bc:	2310      	movs	r3, #16
 801e4be:	e7ad      	b.n	801e41c <_printf_i+0xf4>
 801e4c0:	4826      	ldr	r0, [pc, #152]	@ (801e55c <_printf_i+0x234>)
 801e4c2:	e7e9      	b.n	801e498 <_printf_i+0x170>
 801e4c4:	6823      	ldr	r3, [r4, #0]
 801e4c6:	f023 0320 	bic.w	r3, r3, #32
 801e4ca:	6023      	str	r3, [r4, #0]
 801e4cc:	e7f6      	b.n	801e4bc <_printf_i+0x194>
 801e4ce:	4616      	mov	r6, r2
 801e4d0:	e7bd      	b.n	801e44e <_printf_i+0x126>
 801e4d2:	6833      	ldr	r3, [r6, #0]
 801e4d4:	6825      	ldr	r5, [r4, #0]
 801e4d6:	6961      	ldr	r1, [r4, #20]
 801e4d8:	1d18      	adds	r0, r3, #4
 801e4da:	6030      	str	r0, [r6, #0]
 801e4dc:	062e      	lsls	r6, r5, #24
 801e4de:	681b      	ldr	r3, [r3, #0]
 801e4e0:	d501      	bpl.n	801e4e6 <_printf_i+0x1be>
 801e4e2:	6019      	str	r1, [r3, #0]
 801e4e4:	e002      	b.n	801e4ec <_printf_i+0x1c4>
 801e4e6:	0668      	lsls	r0, r5, #25
 801e4e8:	d5fb      	bpl.n	801e4e2 <_printf_i+0x1ba>
 801e4ea:	8019      	strh	r1, [r3, #0]
 801e4ec:	2300      	movs	r3, #0
 801e4ee:	6123      	str	r3, [r4, #16]
 801e4f0:	4616      	mov	r6, r2
 801e4f2:	e7bc      	b.n	801e46e <_printf_i+0x146>
 801e4f4:	6833      	ldr	r3, [r6, #0]
 801e4f6:	1d1a      	adds	r2, r3, #4
 801e4f8:	6032      	str	r2, [r6, #0]
 801e4fa:	681e      	ldr	r6, [r3, #0]
 801e4fc:	6862      	ldr	r2, [r4, #4]
 801e4fe:	2100      	movs	r1, #0
 801e500:	4630      	mov	r0, r6
 801e502:	f7e1 ff0d 	bl	8000320 <memchr>
 801e506:	b108      	cbz	r0, 801e50c <_printf_i+0x1e4>
 801e508:	1b80      	subs	r0, r0, r6
 801e50a:	6060      	str	r0, [r4, #4]
 801e50c:	6863      	ldr	r3, [r4, #4]
 801e50e:	6123      	str	r3, [r4, #16]
 801e510:	2300      	movs	r3, #0
 801e512:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e516:	e7aa      	b.n	801e46e <_printf_i+0x146>
 801e518:	6923      	ldr	r3, [r4, #16]
 801e51a:	4632      	mov	r2, r6
 801e51c:	4649      	mov	r1, r9
 801e51e:	4640      	mov	r0, r8
 801e520:	47d0      	blx	sl
 801e522:	3001      	adds	r0, #1
 801e524:	d0ad      	beq.n	801e482 <_printf_i+0x15a>
 801e526:	6823      	ldr	r3, [r4, #0]
 801e528:	079b      	lsls	r3, r3, #30
 801e52a:	d413      	bmi.n	801e554 <_printf_i+0x22c>
 801e52c:	68e0      	ldr	r0, [r4, #12]
 801e52e:	9b03      	ldr	r3, [sp, #12]
 801e530:	4298      	cmp	r0, r3
 801e532:	bfb8      	it	lt
 801e534:	4618      	movlt	r0, r3
 801e536:	e7a6      	b.n	801e486 <_printf_i+0x15e>
 801e538:	2301      	movs	r3, #1
 801e53a:	4632      	mov	r2, r6
 801e53c:	4649      	mov	r1, r9
 801e53e:	4640      	mov	r0, r8
 801e540:	47d0      	blx	sl
 801e542:	3001      	adds	r0, #1
 801e544:	d09d      	beq.n	801e482 <_printf_i+0x15a>
 801e546:	3501      	adds	r5, #1
 801e548:	68e3      	ldr	r3, [r4, #12]
 801e54a:	9903      	ldr	r1, [sp, #12]
 801e54c:	1a5b      	subs	r3, r3, r1
 801e54e:	42ab      	cmp	r3, r5
 801e550:	dcf2      	bgt.n	801e538 <_printf_i+0x210>
 801e552:	e7eb      	b.n	801e52c <_printf_i+0x204>
 801e554:	2500      	movs	r5, #0
 801e556:	f104 0619 	add.w	r6, r4, #25
 801e55a:	e7f5      	b.n	801e548 <_printf_i+0x220>
 801e55c:	0803216a 	.word	0x0803216a
 801e560:	0803217b 	.word	0x0803217b

0801e564 <__sflush_r>:
 801e564:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e56c:	0716      	lsls	r6, r2, #28
 801e56e:	4605      	mov	r5, r0
 801e570:	460c      	mov	r4, r1
 801e572:	d454      	bmi.n	801e61e <__sflush_r+0xba>
 801e574:	684b      	ldr	r3, [r1, #4]
 801e576:	2b00      	cmp	r3, #0
 801e578:	dc02      	bgt.n	801e580 <__sflush_r+0x1c>
 801e57a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	dd48      	ble.n	801e612 <__sflush_r+0xae>
 801e580:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e582:	2e00      	cmp	r6, #0
 801e584:	d045      	beq.n	801e612 <__sflush_r+0xae>
 801e586:	2300      	movs	r3, #0
 801e588:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e58c:	682f      	ldr	r7, [r5, #0]
 801e58e:	6a21      	ldr	r1, [r4, #32]
 801e590:	602b      	str	r3, [r5, #0]
 801e592:	d030      	beq.n	801e5f6 <__sflush_r+0x92>
 801e594:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e596:	89a3      	ldrh	r3, [r4, #12]
 801e598:	0759      	lsls	r1, r3, #29
 801e59a:	d505      	bpl.n	801e5a8 <__sflush_r+0x44>
 801e59c:	6863      	ldr	r3, [r4, #4]
 801e59e:	1ad2      	subs	r2, r2, r3
 801e5a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e5a2:	b10b      	cbz	r3, 801e5a8 <__sflush_r+0x44>
 801e5a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e5a6:	1ad2      	subs	r2, r2, r3
 801e5a8:	2300      	movs	r3, #0
 801e5aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e5ac:	6a21      	ldr	r1, [r4, #32]
 801e5ae:	4628      	mov	r0, r5
 801e5b0:	47b0      	blx	r6
 801e5b2:	1c43      	adds	r3, r0, #1
 801e5b4:	89a3      	ldrh	r3, [r4, #12]
 801e5b6:	d106      	bne.n	801e5c6 <__sflush_r+0x62>
 801e5b8:	6829      	ldr	r1, [r5, #0]
 801e5ba:	291d      	cmp	r1, #29
 801e5bc:	d82b      	bhi.n	801e616 <__sflush_r+0xb2>
 801e5be:	4a2a      	ldr	r2, [pc, #168]	@ (801e668 <__sflush_r+0x104>)
 801e5c0:	40ca      	lsrs	r2, r1
 801e5c2:	07d6      	lsls	r6, r2, #31
 801e5c4:	d527      	bpl.n	801e616 <__sflush_r+0xb2>
 801e5c6:	2200      	movs	r2, #0
 801e5c8:	6062      	str	r2, [r4, #4]
 801e5ca:	04d9      	lsls	r1, r3, #19
 801e5cc:	6922      	ldr	r2, [r4, #16]
 801e5ce:	6022      	str	r2, [r4, #0]
 801e5d0:	d504      	bpl.n	801e5dc <__sflush_r+0x78>
 801e5d2:	1c42      	adds	r2, r0, #1
 801e5d4:	d101      	bne.n	801e5da <__sflush_r+0x76>
 801e5d6:	682b      	ldr	r3, [r5, #0]
 801e5d8:	b903      	cbnz	r3, 801e5dc <__sflush_r+0x78>
 801e5da:	6560      	str	r0, [r4, #84]	@ 0x54
 801e5dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e5de:	602f      	str	r7, [r5, #0]
 801e5e0:	b1b9      	cbz	r1, 801e612 <__sflush_r+0xae>
 801e5e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e5e6:	4299      	cmp	r1, r3
 801e5e8:	d002      	beq.n	801e5f0 <__sflush_r+0x8c>
 801e5ea:	4628      	mov	r0, r5
 801e5ec:	f7ff fa9c 	bl	801db28 <_free_r>
 801e5f0:	2300      	movs	r3, #0
 801e5f2:	6363      	str	r3, [r4, #52]	@ 0x34
 801e5f4:	e00d      	b.n	801e612 <__sflush_r+0xae>
 801e5f6:	2301      	movs	r3, #1
 801e5f8:	4628      	mov	r0, r5
 801e5fa:	47b0      	blx	r6
 801e5fc:	4602      	mov	r2, r0
 801e5fe:	1c50      	adds	r0, r2, #1
 801e600:	d1c9      	bne.n	801e596 <__sflush_r+0x32>
 801e602:	682b      	ldr	r3, [r5, #0]
 801e604:	2b00      	cmp	r3, #0
 801e606:	d0c6      	beq.n	801e596 <__sflush_r+0x32>
 801e608:	2b1d      	cmp	r3, #29
 801e60a:	d001      	beq.n	801e610 <__sflush_r+0xac>
 801e60c:	2b16      	cmp	r3, #22
 801e60e:	d11e      	bne.n	801e64e <__sflush_r+0xea>
 801e610:	602f      	str	r7, [r5, #0]
 801e612:	2000      	movs	r0, #0
 801e614:	e022      	b.n	801e65c <__sflush_r+0xf8>
 801e616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e61a:	b21b      	sxth	r3, r3
 801e61c:	e01b      	b.n	801e656 <__sflush_r+0xf2>
 801e61e:	690f      	ldr	r7, [r1, #16]
 801e620:	2f00      	cmp	r7, #0
 801e622:	d0f6      	beq.n	801e612 <__sflush_r+0xae>
 801e624:	0793      	lsls	r3, r2, #30
 801e626:	680e      	ldr	r6, [r1, #0]
 801e628:	bf08      	it	eq
 801e62a:	694b      	ldreq	r3, [r1, #20]
 801e62c:	600f      	str	r7, [r1, #0]
 801e62e:	bf18      	it	ne
 801e630:	2300      	movne	r3, #0
 801e632:	eba6 0807 	sub.w	r8, r6, r7
 801e636:	608b      	str	r3, [r1, #8]
 801e638:	f1b8 0f00 	cmp.w	r8, #0
 801e63c:	dde9      	ble.n	801e612 <__sflush_r+0xae>
 801e63e:	6a21      	ldr	r1, [r4, #32]
 801e640:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e642:	4643      	mov	r3, r8
 801e644:	463a      	mov	r2, r7
 801e646:	4628      	mov	r0, r5
 801e648:	47b0      	blx	r6
 801e64a:	2800      	cmp	r0, #0
 801e64c:	dc08      	bgt.n	801e660 <__sflush_r+0xfc>
 801e64e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e656:	81a3      	strh	r3, [r4, #12]
 801e658:	f04f 30ff 	mov.w	r0, #4294967295
 801e65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e660:	4407      	add	r7, r0
 801e662:	eba8 0800 	sub.w	r8, r8, r0
 801e666:	e7e7      	b.n	801e638 <__sflush_r+0xd4>
 801e668:	20400001 	.word	0x20400001

0801e66c <_fflush_r>:
 801e66c:	b538      	push	{r3, r4, r5, lr}
 801e66e:	690b      	ldr	r3, [r1, #16]
 801e670:	4605      	mov	r5, r0
 801e672:	460c      	mov	r4, r1
 801e674:	b913      	cbnz	r3, 801e67c <_fflush_r+0x10>
 801e676:	2500      	movs	r5, #0
 801e678:	4628      	mov	r0, r5
 801e67a:	bd38      	pop	{r3, r4, r5, pc}
 801e67c:	b118      	cbz	r0, 801e686 <_fflush_r+0x1a>
 801e67e:	6a03      	ldr	r3, [r0, #32]
 801e680:	b90b      	cbnz	r3, 801e686 <_fflush_r+0x1a>
 801e682:	f7fe ff9f 	bl	801d5c4 <__sinit>
 801e686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	d0f3      	beq.n	801e676 <_fflush_r+0xa>
 801e68e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e690:	07d0      	lsls	r0, r2, #31
 801e692:	d404      	bmi.n	801e69e <_fflush_r+0x32>
 801e694:	0599      	lsls	r1, r3, #22
 801e696:	d402      	bmi.n	801e69e <_fflush_r+0x32>
 801e698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e69a:	f7ff fa34 	bl	801db06 <__retarget_lock_acquire_recursive>
 801e69e:	4628      	mov	r0, r5
 801e6a0:	4621      	mov	r1, r4
 801e6a2:	f7ff ff5f 	bl	801e564 <__sflush_r>
 801e6a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e6a8:	07da      	lsls	r2, r3, #31
 801e6aa:	4605      	mov	r5, r0
 801e6ac:	d4e4      	bmi.n	801e678 <_fflush_r+0xc>
 801e6ae:	89a3      	ldrh	r3, [r4, #12]
 801e6b0:	059b      	lsls	r3, r3, #22
 801e6b2:	d4e1      	bmi.n	801e678 <_fflush_r+0xc>
 801e6b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e6b6:	f7ff fa27 	bl	801db08 <__retarget_lock_release_recursive>
 801e6ba:	e7dd      	b.n	801e678 <_fflush_r+0xc>

0801e6bc <__swhatbuf_r>:
 801e6bc:	b570      	push	{r4, r5, r6, lr}
 801e6be:	460c      	mov	r4, r1
 801e6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e6c4:	2900      	cmp	r1, #0
 801e6c6:	b096      	sub	sp, #88	@ 0x58
 801e6c8:	4615      	mov	r5, r2
 801e6ca:	461e      	mov	r6, r3
 801e6cc:	da0d      	bge.n	801e6ea <__swhatbuf_r+0x2e>
 801e6ce:	89a3      	ldrh	r3, [r4, #12]
 801e6d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e6d4:	f04f 0100 	mov.w	r1, #0
 801e6d8:	bf14      	ite	ne
 801e6da:	2340      	movne	r3, #64	@ 0x40
 801e6dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e6e0:	2000      	movs	r0, #0
 801e6e2:	6031      	str	r1, [r6, #0]
 801e6e4:	602b      	str	r3, [r5, #0]
 801e6e6:	b016      	add	sp, #88	@ 0x58
 801e6e8:	bd70      	pop	{r4, r5, r6, pc}
 801e6ea:	466a      	mov	r2, sp
 801e6ec:	f000 f862 	bl	801e7b4 <_fstat_r>
 801e6f0:	2800      	cmp	r0, #0
 801e6f2:	dbec      	blt.n	801e6ce <__swhatbuf_r+0x12>
 801e6f4:	9901      	ldr	r1, [sp, #4]
 801e6f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e6fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e6fe:	4259      	negs	r1, r3
 801e700:	4159      	adcs	r1, r3
 801e702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e706:	e7eb      	b.n	801e6e0 <__swhatbuf_r+0x24>

0801e708 <__smakebuf_r>:
 801e708:	898b      	ldrh	r3, [r1, #12]
 801e70a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e70c:	079d      	lsls	r5, r3, #30
 801e70e:	4606      	mov	r6, r0
 801e710:	460c      	mov	r4, r1
 801e712:	d507      	bpl.n	801e724 <__smakebuf_r+0x1c>
 801e714:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e718:	6023      	str	r3, [r4, #0]
 801e71a:	6123      	str	r3, [r4, #16]
 801e71c:	2301      	movs	r3, #1
 801e71e:	6163      	str	r3, [r4, #20]
 801e720:	b003      	add	sp, #12
 801e722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e724:	ab01      	add	r3, sp, #4
 801e726:	466a      	mov	r2, sp
 801e728:	f7ff ffc8 	bl	801e6bc <__swhatbuf_r>
 801e72c:	9f00      	ldr	r7, [sp, #0]
 801e72e:	4605      	mov	r5, r0
 801e730:	4639      	mov	r1, r7
 801e732:	4630      	mov	r0, r6
 801e734:	f7ff fa64 	bl	801dc00 <_malloc_r>
 801e738:	b948      	cbnz	r0, 801e74e <__smakebuf_r+0x46>
 801e73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e73e:	059a      	lsls	r2, r3, #22
 801e740:	d4ee      	bmi.n	801e720 <__smakebuf_r+0x18>
 801e742:	f023 0303 	bic.w	r3, r3, #3
 801e746:	f043 0302 	orr.w	r3, r3, #2
 801e74a:	81a3      	strh	r3, [r4, #12]
 801e74c:	e7e2      	b.n	801e714 <__smakebuf_r+0xc>
 801e74e:	89a3      	ldrh	r3, [r4, #12]
 801e750:	6020      	str	r0, [r4, #0]
 801e752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e756:	81a3      	strh	r3, [r4, #12]
 801e758:	9b01      	ldr	r3, [sp, #4]
 801e75a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e75e:	b15b      	cbz	r3, 801e778 <__smakebuf_r+0x70>
 801e760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e764:	4630      	mov	r0, r6
 801e766:	f000 f837 	bl	801e7d8 <_isatty_r>
 801e76a:	b128      	cbz	r0, 801e778 <__smakebuf_r+0x70>
 801e76c:	89a3      	ldrh	r3, [r4, #12]
 801e76e:	f023 0303 	bic.w	r3, r3, #3
 801e772:	f043 0301 	orr.w	r3, r3, #1
 801e776:	81a3      	strh	r3, [r4, #12]
 801e778:	89a3      	ldrh	r3, [r4, #12]
 801e77a:	431d      	orrs	r5, r3
 801e77c:	81a5      	strh	r5, [r4, #12]
 801e77e:	e7cf      	b.n	801e720 <__smakebuf_r+0x18>

0801e780 <memmove>:
 801e780:	4288      	cmp	r0, r1
 801e782:	b510      	push	{r4, lr}
 801e784:	eb01 0402 	add.w	r4, r1, r2
 801e788:	d902      	bls.n	801e790 <memmove+0x10>
 801e78a:	4284      	cmp	r4, r0
 801e78c:	4623      	mov	r3, r4
 801e78e:	d807      	bhi.n	801e7a0 <memmove+0x20>
 801e790:	1e43      	subs	r3, r0, #1
 801e792:	42a1      	cmp	r1, r4
 801e794:	d008      	beq.n	801e7a8 <memmove+0x28>
 801e796:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e79a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e79e:	e7f8      	b.n	801e792 <memmove+0x12>
 801e7a0:	4402      	add	r2, r0
 801e7a2:	4601      	mov	r1, r0
 801e7a4:	428a      	cmp	r2, r1
 801e7a6:	d100      	bne.n	801e7aa <memmove+0x2a>
 801e7a8:	bd10      	pop	{r4, pc}
 801e7aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e7ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e7b2:	e7f7      	b.n	801e7a4 <memmove+0x24>

0801e7b4 <_fstat_r>:
 801e7b4:	b538      	push	{r3, r4, r5, lr}
 801e7b6:	4d07      	ldr	r5, [pc, #28]	@ (801e7d4 <_fstat_r+0x20>)
 801e7b8:	2300      	movs	r3, #0
 801e7ba:	4604      	mov	r4, r0
 801e7bc:	4608      	mov	r0, r1
 801e7be:	4611      	mov	r1, r2
 801e7c0:	602b      	str	r3, [r5, #0]
 801e7c2:	f7e3 fdd9 	bl	8002378 <_fstat>
 801e7c6:	1c43      	adds	r3, r0, #1
 801e7c8:	d102      	bne.n	801e7d0 <_fstat_r+0x1c>
 801e7ca:	682b      	ldr	r3, [r5, #0]
 801e7cc:	b103      	cbz	r3, 801e7d0 <_fstat_r+0x1c>
 801e7ce:	6023      	str	r3, [r4, #0]
 801e7d0:	bd38      	pop	{r3, r4, r5, pc}
 801e7d2:	bf00      	nop
 801e7d4:	24008b38 	.word	0x24008b38

0801e7d8 <_isatty_r>:
 801e7d8:	b538      	push	{r3, r4, r5, lr}
 801e7da:	4d06      	ldr	r5, [pc, #24]	@ (801e7f4 <_isatty_r+0x1c>)
 801e7dc:	2300      	movs	r3, #0
 801e7de:	4604      	mov	r4, r0
 801e7e0:	4608      	mov	r0, r1
 801e7e2:	602b      	str	r3, [r5, #0]
 801e7e4:	f7e3 fdd8 	bl	8002398 <_isatty>
 801e7e8:	1c43      	adds	r3, r0, #1
 801e7ea:	d102      	bne.n	801e7f2 <_isatty_r+0x1a>
 801e7ec:	682b      	ldr	r3, [r5, #0]
 801e7ee:	b103      	cbz	r3, 801e7f2 <_isatty_r+0x1a>
 801e7f0:	6023      	str	r3, [r4, #0]
 801e7f2:	bd38      	pop	{r3, r4, r5, pc}
 801e7f4:	24008b38 	.word	0x24008b38

0801e7f8 <_sbrk_r>:
 801e7f8:	b538      	push	{r3, r4, r5, lr}
 801e7fa:	4d06      	ldr	r5, [pc, #24]	@ (801e814 <_sbrk_r+0x1c>)
 801e7fc:	2300      	movs	r3, #0
 801e7fe:	4604      	mov	r4, r0
 801e800:	4608      	mov	r0, r1
 801e802:	602b      	str	r3, [r5, #0]
 801e804:	f7e3 fde0 	bl	80023c8 <_sbrk>
 801e808:	1c43      	adds	r3, r0, #1
 801e80a:	d102      	bne.n	801e812 <_sbrk_r+0x1a>
 801e80c:	682b      	ldr	r3, [r5, #0]
 801e80e:	b103      	cbz	r3, 801e812 <_sbrk_r+0x1a>
 801e810:	6023      	str	r3, [r4, #0]
 801e812:	bd38      	pop	{r3, r4, r5, pc}
 801e814:	24008b38 	.word	0x24008b38

0801e818 <_realloc_r>:
 801e818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e81c:	4607      	mov	r7, r0
 801e81e:	4614      	mov	r4, r2
 801e820:	460d      	mov	r5, r1
 801e822:	b921      	cbnz	r1, 801e82e <_realloc_r+0x16>
 801e824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e828:	4611      	mov	r1, r2
 801e82a:	f7ff b9e9 	b.w	801dc00 <_malloc_r>
 801e82e:	b92a      	cbnz	r2, 801e83c <_realloc_r+0x24>
 801e830:	f7ff f97a 	bl	801db28 <_free_r>
 801e834:	4625      	mov	r5, r4
 801e836:	4628      	mov	r0, r5
 801e838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e83c:	f000 f81a 	bl	801e874 <_malloc_usable_size_r>
 801e840:	4284      	cmp	r4, r0
 801e842:	4606      	mov	r6, r0
 801e844:	d802      	bhi.n	801e84c <_realloc_r+0x34>
 801e846:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e84a:	d8f4      	bhi.n	801e836 <_realloc_r+0x1e>
 801e84c:	4621      	mov	r1, r4
 801e84e:	4638      	mov	r0, r7
 801e850:	f7ff f9d6 	bl	801dc00 <_malloc_r>
 801e854:	4680      	mov	r8, r0
 801e856:	b908      	cbnz	r0, 801e85c <_realloc_r+0x44>
 801e858:	4645      	mov	r5, r8
 801e85a:	e7ec      	b.n	801e836 <_realloc_r+0x1e>
 801e85c:	42b4      	cmp	r4, r6
 801e85e:	4622      	mov	r2, r4
 801e860:	4629      	mov	r1, r5
 801e862:	bf28      	it	cs
 801e864:	4632      	movcs	r2, r6
 801e866:	f7ff f950 	bl	801db0a <memcpy>
 801e86a:	4629      	mov	r1, r5
 801e86c:	4638      	mov	r0, r7
 801e86e:	f7ff f95b 	bl	801db28 <_free_r>
 801e872:	e7f1      	b.n	801e858 <_realloc_r+0x40>

0801e874 <_malloc_usable_size_r>:
 801e874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e878:	1f18      	subs	r0, r3, #4
 801e87a:	2b00      	cmp	r3, #0
 801e87c:	bfbc      	itt	lt
 801e87e:	580b      	ldrlt	r3, [r1, r0]
 801e880:	18c0      	addlt	r0, r0, r3
 801e882:	4770      	bx	lr

0801e884 <_init>:
 801e884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e886:	bf00      	nop
 801e888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e88a:	bc08      	pop	{r3}
 801e88c:	469e      	mov	lr, r3
 801e88e:	4770      	bx	lr

0801e890 <_fini>:
 801e890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e892:	bf00      	nop
 801e894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e896:	bc08      	pop	{r3}
 801e898:	469e      	mov	lr, r3
 801e89a:	4770      	bx	lr
